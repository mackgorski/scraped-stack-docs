[{
  "url": "https://docs.cypress.io/guides/overview/why-cypress",
  "markdown": "# Comprehensive Cypress Test Automation Guide\n\n## Why Cypress?\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   What Cypress is and why you should use it\n*   Our mission, and what we believe in\n*   Key Cypress features\n*   Types of tests Cypress is designed for\n\n## In a nutshell[​](#In-a-nutshell \"Direct link to In a nutshell\")\n\nCypress is a next generation front end testing tool built for the modern web. We address the key pain points developers and QA engineers face when testing modern applications.\n\nWe make it possible to:\n\n*   [Set up tests](#Setting-up-tests)\n*   [Write tests](#Writing-tests)\n*   [Run tests](#Running-tests)\n*   [Debug Tests](#Debugging-tests)\n\nCypress is most often compared to Selenium; however Cypress is both fundamentally and architecturally different. Cypress is not constrained by the same restrictions as Selenium.\n\nThis enables you to **write faster**, **easier** and **more reliable** tests.\n\n## Who uses Cypress?[​](#Who-uses-Cypress \"Direct link to Who uses Cypress?\")\n\nOur users are typically developers or QA engineers building web applications using modern JavaScript frameworks.\n\nCypress enables you to write all types of tests:\n\n*   [End-to-end tests](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test)\n*   [Component tests](https://docs.cypress.io/guides/component-testing/overview)\n*   Integration tests\n*   Unit tests\n\nCypress can test anything that runs in a browser.\n\n## Cypress ecosystem[​](#Cypress-ecosystem \"Direct link to Cypress ecosystem\")\n\nCypress consists of a free, [open source](https://github.com/cypress-io/cypress), [locally installed](https://docs.cypress.io/guides/getting-started/installing-cypress) application **and** Cypress Cloud for [recording your tests](https://docs.cypress.io/guides/cloud/introduction).\n\n*   **First:** Cypress helps you set up and start writing tests every day while you build your application locally. _TDD at its best!_\n*   **Later:** After building up a suite of tests and [integrating Cypress](https://docs.cypress.io/guides/continuous-integration/introduction) with your CI Provider, [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) can record your test runs. You'll never have to wonder: _Why did this fail?_\n\n## Our mission[​](#Our-mission \"Direct link to Our mission\")\n\nOur mission is to build a thriving, open source ecosystem that enhances productivity, makes testing an enjoyable experience, and generates developer happiness. We hold ourselves accountable to champion a testing process **that actually works**.\n\nWe believe our documentation should be approachable. This means enabling our readers to understand fully not just the **what** but the **why** as well.\n\nWe want to help developers build a new generation of modern applications faster, better, and without the stress and anxiety associated with managing tests. We aim to elevate the art of software development by leveraging test results to generate actionable insights for long-term stability by proactively identifying areas for improvement.\n\nWe know that in order for us to be successful we must enable, nurture, and foster an ecosystem that thrives on open source. Every line of test code is an investment in **your codebase**, it will never be coupled to us as a paid service or company. Tests will be able to run and work independently, _always_.\n\nWe believe testing needs a lot of ❤️ and we are here to build a tool, a service, and a community that everyone can learn and benefit from. We're solving the hardest pain points shared by every developer working on the web. We believe in this mission and hope that you will join us to make Cypress a lasting ecosystem that makes everyone happy.\n\n## Features[​](#Features \"Direct link to Features\")\n\nCypress comes fully baked, batteries included. Here is a list of things it can do that no other testing framework can:\n\n*   **Time Travel:** Cypress takes snapshots as your tests run. Hover over commands in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) to see exactly what happened at each step.\n*   **Debuggability:** Stop guessing why your tests are failing. [Debug directly](https://docs.cypress.io/guides/guides/debugging) from familiar tools like Developer Tools. Our readable errors and stack traces make debugging lightning fast.\n*   **Automatic Waiting:** Never add waits or sleeps to your tests. Cypress [automatically waits](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Cypress-is-Not-Like-jQuery) for commands and assertions before moving on. No more async hell.\n*   **Spies, Stubs, and Clocks:** Verify and [control the behavior](https://docs.cypress.io/guides/guides/stubs-spies-and-clocks) of functions, server responses, or timers. The same functionality you love from unit testing is right at your fingertips.\n*   **Network Traffic Control:** Easily [control, stub, and test edge cases](https://docs.cypress.io/guides/guides/network-requests) without involving your server. You can stub network traffic however you like.\n*   **Consistent Results:** Our architecture doesn't use Selenium or WebDriver. Say hello to fast, consistent and reliable tests that are flake-free.\n*   **Screenshots, Videos, and Test Replay:** View screenshots taken automatically on failure, or videos, if enabled, of your entire test suite when run from the CLI. Record to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) and replay the test as it executed during the run for zero-configuration debugging using [Test Replay](https://docs.cypress.io/guides/cloud/test-replay).\n*   **Cross Browser Testing:** Run tests within Firefox and Chrome-family browsers (including Edge and Electron) locally and [optimally in a Continuous Integration pipeline](https://docs.cypress.io/guides/guides/cross-browser-testing).\n*   **Smart Orchestration:** Once you're set up to record to Cypress Cloud, easily [parallelize](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) your test suite, rerun failed specs first with [Spec Prioritization](https://docs.cypress.io/guides/cloud/smart-orchestration/spec-prioritization), and cancel test runs on failures with [Auto Cancellation](https://docs.cypress.io/guides/cloud/smart-orchestration/run-cancellation) for tight feedback loops.\n*   **Flake Detection:** Discover and diagnose unreliable tests with Cypress Cloud's [Flaky test management](https://docs.cypress.io/guides/cloud/flaky-test-management).\n\n### Setting up tests[​](#Setting-up-tests \"Direct link to Setting-up-tests\")\n\nThere are no servers, drivers, or any other dependencies to install or configure. You can quickly see your first passing test using template example test specs for [End-to-end tests](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test) or [Component tests](https://docs.cypress.io/guides/component-testing/getting-started).\n\n### Writing tests[​](#Writing-tests \"Direct link to Writing-tests\")\n\nTests written in Cypress are meant to be easy to read and understand. Our API comes fully baked, on top of tools you are familiar with already.\n\n### Running tests[​](#Running-tests \"Direct link to Running-tests\")\n\nCypress runs as fast as your browser can render content. You can watch tests run in real time as you develop your applications. TDD FTW!\n\n### Debugging tests[​](#Debugging-tests \"Direct link to Debugging-tests\")\n\nReadable error messages help you to debug quickly. You also have access to all the developer tools you know and love.\n\n## Test types[​](#Test-types \"Direct link to Test types\")\n\nCypress can be used to write several different types of tests. This can provide even more confidence that your application under test is working as intended.\n\n### End-to-end[​](#End-to-end \"Direct link to End-to-end\")\n\nCypress was originally designed to run end-to-end (E2E) tests on anything that runs in a browser. A typical E2E test visits the application in a browser and performs actions via the UI just like a real user would.\n\n```\nit('adds todos', () => {  cy.visit('https://example.cypress.io/')  cy.get('[data-testid=\"new-todo\"]')    .type('write code{enter}')    .type('write tests{enter}')  // confirm the application is showing two items  cy.get('[data-testid=\"todos\"]').should('have.length', 2)})\n```\n\n### Component[​](#Component \"Direct link to Component\")\n\nYou can also use Cypress to mount components from supported web frameworks and execute [component tests](https://docs.cypress.io/guides/component-testing/overview).\n\n```\nimport TodoList from './components/TodoList'it('contains the correct number of todos', () => {  const todos = [    { text: 'Buy milk', id: 1 },    { text: 'Learn Component Testing', id: 2 },  ]  cy.mount(<TodoList todos={todos} />)  // the component starts running like a mini web app  cy.get('[data-testid=\"todos\"]').should('have.length', todos.length)})\n```\n\n### API[​](#API \"Direct link to API\")\n\nCypress can perform arbitrary HTTP calls, thus you can use it for API testing.\n\n```\nit('adds a todo', () => {  cy.request({    url: '/todos',    method: 'POST',    body: {      title: 'Write REST API',    },  })    .its('body')    .should('deep.contain', {      title: 'Write REST API',      completed: false,    })})\n```\n\n### Other[​](#Other \"Direct link to Other\")\n\nFinally, through a large number of [official and 3rd party plugins](https://docs.cypress.io/plugins) you can write Cypress [a11y](https://github.com/component-driven/cypress-axe),\n\n[visual](https://docs.cypress.io/plugins#visual-testing), [email](https://docs.cypress.io/faq/questions/using-cypress-faq#How-do-I-check-that-an-email-was-sent-out) and other types of tests.\n\n## Cypress in the Real World[​](#Cypress-in-the-Real-World \"Direct link to Cypress in the Real World\")\n\n![Cypress Real World App](https://docs.cypress.io/img/guides/overview/v10/real-world-app.png)\n\nCypress makes it quick and easy to start testing, and as you begin to test your app, **you'll often wonder if you're using best practices or scalable strategies**.\n\nTo guide the way, the Cypress team has created the [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app), a full stack example application that demonstrates testing with **Cypress in practical and realistic scenarios.**\n\nThe RWA achieves full [code-coverage](https://docs.cypress.io/guides/tooling/code-coverage) with end-to-end tests [across multiple browsers](https://docs.cypress.io/guides/guides/cross-browser-testing) and [device sizes](https://docs.cypress.io/api/commands/viewport), but also includes [visual regression tests](https://docs.cypress.io/guides/tooling/visual-testing), API tests, unit tests, and runs them all in an [efficient CI pipeline](https://cloud.cypress.io/projects/7s5okt). Use the RWA to **learn, experiment, tinker, and practice** web application testing with Cypress.\n\nThe app is bundled with everything you need, [just clone the repository](https://github.com/cypress-io/cypress-realworld-app) and start testing.",
  "title": "Comprehensive Cypress Test Automation Guide | Cypress Documentation",
  "description": "Explore Cypress documentation for a comprehensive guide on efficient testing. Discover features, commands, best practices, and get started with Cypress today",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/command-line",
  "markdown": "# Command Line | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to run Cypress from the command line\n*   How to specify which spec files to run\n*   How to launch other browsers\n*   How to record your tests to Cypress Cloud\n\n## Installation[​](#Installation \"Direct link to Installation\")\n\nThis guide assumes you've already read our [Installing Cypress](https://docs.cypress.io/guides/getting-started/installing-cypress) guide and installed Cypress as an `npm` module. After installing you'll be able to execute all of the commands in this document from your **project root**.\n\n## How to run commands[​](#How-to-run-commands \"Direct link to How to run commands\")\n\nYou can run Cypress from your **project root** using a command which depends on the package manager you are using: npm, Yarn or pnpm. For example, you would prefix the command [cypress run](#cypress-run) as shown:\n\n*   npm\n*   Yarn\n*   pnpm\n\nAdd any required [options](#Options) to the end of the command line. As an example, if you want to run tests in headless mode from a single spec file and record the results with Cypress Cloud, the command should be:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpx cypress run --record --spec \"cypress/e2e/my-spec.cy.js\"\n```\n\ninfo\n\nYou can alternatively require and run Cypress as a node module using our [Module API](https://docs.cypress.io/guides/guides/module-api).\n\n## Using scripts[​](#Using-scripts \"Direct link to Using scripts\")\n\nCypress command strings can be saved as scripts for reuse.\n\nLet's say you often need to run Cypress E2E tests in headless mode using the Chrome browser. You can add the corresponding command `cypress run --browser chrome` to the `scripts` object in your `package.json` file and use the name `e2e:chrome` to identify it.\n\n```\n{  \"scripts\": {    \"e2e:chrome\": \"cypress run --browser chrome\"  }}\n```\n\nRunning the script `e2e:chrome` as follows will run the command you defined:\n\n*   npm\n*   Yarn\n*   pnpm\n\ncaution\n\n**Best Practice**\n\nDon't use `cypress` as the exact name of a script, especially if you use Yarn as package manager. When running commands on the Cypress binary (e.g. `yarn cypress verify`), Yarn will reference the script of the same name instead and Cypress CLI commands may not work as expected.\n\n### Extending script options[​](#Extending-script-options \"Direct link to Extending script options\")\n\nYou do not have to define a new script for every variation of a command string you need. You can extend a script with additional options.\n\nLet's say that when you ran the full set of tests with the script `e2e:chrome` it showed a failure in one test spec `cypress/e2e/my-spec.cy.js`. You corrected the problem and would like to re-run the tests only for the test spec which previously failed.\n\nThe option [`--spec`](#cypress-run-spec-lt-spec-gt) allows you to specify which test specs to run, so you can add this to the command after the script name `e2e:chrome`:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm run e2e:chrome -- --spec \"cypress/e2e/my-spec.cy.js\"\n```\n\nRefer to each package manager's documentation for full details of command and script usage:\n\n*   [npm CLI](https://docs.npmjs.com/cli/)  \n    When adding Cypress [options](#Options) after a script name called from `npm`, you need to pass the command's arguments using the `--` string (see [`npm-run-script`](https://docs.npmjs.com/cli/run-script.html)).\n*   [Yarn CLI](https://classic.yarnpkg.com/lang/en/docs/cli/)\n*   [pnpm CLI](https://pnpm.io/pnpm-cli)\n\n## Commands[​](#Commands \"Direct link to Commands\")\n\ninfo\n\nThe prefix required to run `cypress` is not shown in the list of commands below. You need to add the prefix `npx`, `yarn` or `pnpm` to the command line, corresponding to the package manager you are using. See [How to run commands](#How-to-run-commands).\n\n### `cypress run`[​](#cypress-run \"Direct link to cypress-run\")\n\nRuns Cypress tests to completion. By default, `cypress run` will run all tests headlessly.\n\n#### Options[​](#Options \"Direct link to Options\")\n\n| Option | Description |\n| --- | --- |\n| `--auto-cancel-after-failures` | [Overrides the Cloud project-level configuration to set the failed test threshold for auto cancellation or to disable auto cancellation when recording to the Cloud](#auto-cancel-after-runs) |\n| `--browser`, `-b` | [Run Cypress in the browser with the given name. If a filesystem path is supplied, Cypress will attempt to use the browser at that path.](#cypress-run-browser-lt-browser-name-or-path-gt) |\n| `--ci-build-id` | [Specify a unique identifier for a run to enable grouping or parallelization.](#cypress-run-ci-build-id-lt-id-gt) |\n| `--component` | [Run component tests](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing) |\n| `--config`, `-c` | [Specify configuration](#cypress-run-config-lt-config-gt) |\n| `--config-file`, `-C` | [Specify configuration file](#cypress-run-config-file-lt-configuration-file-gt) |\n| `--e2e` | Run end to end tests (default) |\n| `--env`, `-e` | [Specify environment variables](#cypress-run-env-lt-env-gt) |\n| `--group` | [Group recorded tests together under a single run](#cypress-run-group-lt-name-gt) |\n| `--headed` | [Displays the browser instead of running headlessly](#cypress-run-headed) |\n| `--headless` | Hide the browser instead of running headed (default during `cypress run`) |\n| `--help`, `-h` | Output usage information |\n| `--key`, `-k` | [Specify your secret record key](#cypress-run-record-key-lt-record-key-gt) |\n| `--no-exit` | [Keep Cypress open after tests in a spec file run](#cypress-run-no-exit) |\n| `--no-runner-ui` | [Hides the Cypress Runner UI](#cypress-run-no-runner-ui) |\n| `--parallel` | [Run recorded specs in parallel across multiple machines](#cypress-run-parallel) |\n| `--port`,`-p` | [Override default port](#cypress-run-port-lt-port-gt) |\n| `--project`, `-P` | [Path to a specific project](#cypress-run-project-lt-project-path-gt) |\n| `--quiet`, `-q` | If passed, Cypress output will not be printed to `stdout`. Only output from the configured [Mocha reporter](https://docs.cypress.io/guides/tooling/reporters) will print. |\n| `--record` | [Whether to record the test run](#cypress-run-record-key-lt-record-key-gt) |\n| `--reporter`, `-r` | [Specify a Mocha reporter](#cypress-run-reporter-lt-reporter-gt) |\n| `--reporter-options`, `-o` | [Specify Mocha reporter options](#cypress-run-reporter-lt-reporter-gt) |\n| `--runner-ui` | [Displays the Cypress Runner UI. Useful for when Test Replay is enabled and you would still like the Cypress Runner UI to be displayed for screenshots and video](#cypress-run-runner-ui) |\n| `--spec`, `-s` | [Specify the spec files to run](#cypress-run-spec-lt-spec-gt) |\n| `--tag`, `-t` | [Identify a run with a tag or tags](#cypress-run-tag-lt-tag-gt) |\n\n#### `cypress run --auto-cancel-after-failures <autoCancelAfterFailures>`[​](#auto-cancel-after-runs \"Direct link to auto-cancel-after-runs\")\n\n> Note: Available in Cypress 12.6.0 and later\n\nThe \"autoCancelAfterFailures\" argument is the number of times tests can fail before the run is canceled\n\n```\ncypress run --record --key <<your_record_key>> --auto-cancel-after-failures 1\n```\n\nYou can also specify `false` for the value to disable Auto Cancellation for the run:\n\n```\ncypress run --record --key <<your_record_key>> --auto-cancel-after-failures false\n```\n\n#### `cypress run --browser <browser-name-or-path>`[​](#cypress-run-browser-lt-browser-name-or-path-gt \"Direct link to cypress-run-browser-lt-browser-name-or-path-gt\")\n\n```\ncypress run --browser chrome\n```\n\nThe \"browser\" argument can be set to `chrome`, `chromium`, `edge`, `electron`, `firefox` to launch a browser detected on your system. Cypress will attempt to automatically find the installed browser for you.\n\nTo launch non-stable browsers, add a colon and the desired release channel. For example, to launch Chrome Canary, use `chrome:canary`.\n\nYou can also choose a browser by supplying a path:\n\n```\ncypress run --browser /usr/bin/chromium\n```\n\n[Having trouble with browser detection? Check out our troubleshooting guide](https://docs.cypress.io/guides/references/troubleshooting#Launching-browsers)\n\n#### `cypress run --ci-build-id <id>`[​](#cypress-run-ci-build-id-lt-id-gt \"Direct link to cypress-run-ci-build-id-lt-id-gt\")\n\nThis value should be automatically detected for most CI providers and is unnecessary to define unless Cypress is unable to determine it.\n\nTypically, this is defined as an environment variable within your CI provider, defining a unique \"build\" or \"run\".\n\n```\ncypress run --ci-build-id BUILD_NUMBER\n```\n\nOnly valid when providing a `--group` or `--parallel` flag. Read our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n#### `cypress run --config <config>`[​](#cypress-run-config-lt-config-gt \"Direct link to cypress-run-config-lt-config-gt\")\n\nSet [configuration](https://docs.cypress.io/guides/references/configuration) values. Separate multiple values with commas. The values set here override any values set in your configuration file.\n\n```\ncypress run --config pageLoadTimeout=100000,watchForFileChanges=false\n```\n\nFor more complex configuration objects, you may want to consider passing a [JSON.stringified](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) object surrounded by single quotes.\n\nHere, we're passing in the configuration for component spec files.\n\n```\ncypress run --config '{\"watchForFileChanges\":false,\"specPattern\":[\"**/*.cy.js\",\"**/*.cy.ts\"]}'\n```\n\n#### `cypress run --config-file <configuration-file>`[​](#cypress-run-config-file-lt-configuration-file-gt \"Direct link to cypress-run-config-file-lt-configuration-file-gt\")\n\nYou can specify a path to a file where [Cypress configuration](https://docs.cypress.io/guides/references/configuration) values are set.\n\n```\ncypress run --config-file tests/cypress.config.js\n```\n\n#### `cypress run --env <env>`[​](#cypress-run-env-lt-env-gt \"Direct link to cypress-run-env-lt-env-gt\")\n\nSet Cypress [environment variables](https://docs.cypress.io/guides/guides/environment-variables).\n\n```\ncypress run --env host=api.dev.local\n```\n\nPass several variables using commas and no spaces. Numbers are automatically converted from strings.\n\n```\ncypress run --env host=api.dev.local,port=4222\n```\n\nPass an object as a JSON in a string.\n\n```\ncypress run --env flags='{\"feature-a\":true,\"feature-b\":false}'\n```\n\n#### `cypress run --group <name>`[​](#cypress-run-group-lt-name-gt \"Direct link to cypress-run-group-lt-name-gt\")\n\nGroup recorded tests together under a single run.\n\n```\ncypress run --group develop-env\n```\n\nYou can add multiple groups to the same run by passing a different name. This can help distinguish groups of specs from each other.\n\n```\ncypress run --group admin-tests --spec 'cypress/e2e/admin/**/*'\n```\n\n```\ncypress run --group user-tests --spec 'cypress/e2e/user/**/*'\n```\n\nSpecifying the `--ci-build-id` may also be necessary.\n\n[Read more about grouping.](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs)\n\n#### `cypress run --headed`[​](#cypress-run-headed \"Direct link to cypress-run-headed\")\n\nBy default, Cypress will run tests headlessly during `cypress run`.\n\nPassing `--headed` will force the browser to be shown. This matches how you run any browser via `cypress open`.\n\n#### `cypress run --no-exit`[​](#cypress-run-no-exit \"Direct link to cypress-run-no-exit\")\n\nTo prevent Cypress from exiting after running tests in a spec file, use `--no-exit`.\n\nYou can pass `--headed --no-exit` in order to view the **command log** or have access to **developer tools** after a `spec` has run.\n\n```\ncypress run --headed --no-exit\n```\n\n#### `cypress run --no-runner-ui`[​](#cypress-run-no-runner-ui \"Direct link to cypress-run-no-runner-ui\")\n\nTo prevent Cypress from rendering the Runner UI, use `--no-runner-ui`.\n\n```\ncypress run --no-runner-ui\n```\n\n#### `cypress run --parallel`[​](#cypress-run-parallel \"Direct link to cypress-run-parallel\")\n\nRun recorded specs in [parallel](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) across multiple machines.\n\n```\ncypress run --record --parallel\n```\n\nYou can additionally pass a `--group` flag so this shows up as a named [group](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs).\n\n```\ncypress run --record --parallel --group e2e-staging-specs\n```\n\nRead our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n#### `cypress run --port <port>`[​](#cypress-run-port-lt-port-gt \"Direct link to cypress-run-port-lt-port-gt\")\n\n#### `cypress run --project <project-path>`[​](#cypress-run-project-lt-project-path-gt \"Direct link to cypress-run-project-lt-project-path-gt\")\n\nTo see this in action we've set up an [example repo to demonstrate this here](https://github.com/cypress-io/cypress-test-nested-projects).\n\n```\ncypress run --project ./some/nested/folder\n```\n\n#### `cypress run --record --key <record-key>`[​](#cypress-run-record-key-lt-record-key-gt \"Direct link to cypress-run-record-key-lt-record-key-gt\")\n\nRecord your test results to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction). For this option to work you must first [set up your project to record](https://docs.cypress.io/guides/cloud/getting-started#Setup), make sure your `projectId` is set in your [Cypress configuration file](https://docs.cypress.io/guides/references/configuration#Configuration-File), and append your **Record Key** to the command.\n\n```\ncypress run --record --key <record_key>\n```\n\nIf you set the **Record Key** as the environment variable `CYPRESS_RECORD_KEY`, you can omit the `--key` flag. You'd typically set this environment variable when running in [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction).\n\n```\nexport CYPRESS_RECORD_KEY=abc-key-123\n```\n\nNow you can omit the `--key` flag.\n\nFor more information on recording runs, see the [Cypress Cloud setup instructions](https://docs.cypress.io/guides/cloud/getting-started#Setup). For an in-depth explanation of how Cypress uses your record key and `projectId` to save your test results to Cypress Cloud, see the [Identification section](https://docs.cypress.io/guides/cloud/account-management/projects#Identification).\n\n#### `cypress run --reporter <reporter>`[​](#cypress-run-reporter-lt-reporter-gt \"Direct link to cypress-run-reporter-lt-reporter-gt\")\n\nYou can tests specifying a specific [Mocha reporter](https://docs.cypress.io/guides/tooling/reporters).\n\n```\ncypress run --reporter json\n```\n\nYou can specify reporter options using the `--reporter-options <reporter-options>` flag.\n\n```\ncypress run --reporter junit --reporter-options mochaFile=result.xml,toConsole=true\n```\n\n#### `cypress run --runner-ui`[​](#cypress-run-runner-ui \"Direct link to cypress-run-runner-ui\")\n\nTo force Cypress to render the Runner UI, use `--runner-ui`.\n\nUseful for when [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) is enabled and you would still like the Runner UI to be rendered for screenshots and video.\n\n#### `cypress run --spec <spec>`[​](#cypress-run-spec-lt-spec-gt \"Direct link to cypress-run-spec-lt-spec-gt\")\n\nRun tests specifying a single test file to run instead of all tests. The spec path should be an absolute path or can be relative to the current working directory.\n\n```\ncypress run --spec \"cypress/e2e/examples/actions.cy.js\"\n```\n\nRun tests within the folder matching the glob _(Note: Using double quotes is strongly recommended)_.\n\n```\ncypress run --spec \"cypress/e2e/login/**/*\"\n```\n\nRun tests specifying multiple test files to run.\n\n```\ncypress run --spec \"cypress/e2e/examples/actions.cy.js,cypress/e2e/examples/files.cy.js\"\n```\n\nUse in combination with `--project` parameter. Imagine the Cypress tests are in a subfolder `tests/e2e` of the current project:\n\n```\napp/  node_modules/  package.json  tests/    unit/    e2e/      cypress/        e2e/          spec.cy.js      cypress.config.js\n```\n\nIf we are in the `app` folder, we can run the specs using the following command\n\n```\ncypress run --project tests/e2e --spec ./tests/e2e/cypress/e2e/spec.cy.js\n```\n\n#### `cypress run --tag <tag>`[​](#cypress-run-tag-lt-tag-gt \"Direct link to cypress-run-tag-lt-tag-gt\")\n\nAdd a tag or tags to the recorded run. This can be used to help identify separate runs when displayed in Cypress Cloud.\n\n```\ncypress run  --record --tag \"staging\"\n```\n\nGive a run multiple tags.\n\n```\ncypress run --record --tag \"production,nightly\"\n```\n\nCypress Cloud will display any tags sent with the appropriate run.\n\n![Cypress run in Cypress Cloud displaying flags](https://docs.cypress.io/img/guides/cloud/runs/dashboard-run-with-tags.png)\n\n#### Exit code[​](#Exit-code \"Direct link to Exit code\")\n\nWhen Cypress finishes running tests, it exits. If there are no failed tests, the exit code will be 0.\n\n```\n## All tests pass$ cypress run...                                        Tests  Passing  Failing    ✔  All specs passed!      00:16       17       17        0## print exit code on Mac or Linux$ echo $?0\n```\n\nIf there are any test failures, then the exit code will match the number of tests that failed.\n\n```\n## Spec with two failing tests$ cypress run...                                        Tests  Passing  Failing    ✖  1 of 1 failed (100%)   00:22       17       14        2## print exit code on Mac or Linux$ echo $?2\n```\n\nIf Cypress could not run for some reason (for example if no spec files were found) then the exit code will be 1.\n\n```\n## No spec files found$ cypress run --spec not-found.js...Can't run because no spec files were found.We searched for any files matching this glob pattern:not-found.js## print exit code on Mac or Linux$ echo $?1\n```\n\n### `cypress open`[​](#cypress-open \"Direct link to cypress-open\")\n\nOpens Cypress.\n\n#### Options:[​](#Options-1 \"Direct link to Options:\")\n\nOptions passed to `cypress open` will automatically be applied to the project you open. These persist on all projects until you quit Cypress. These options will also override values in the Cypress configuration file.\n\nBy passing `--browser` and `--e2e` or `--component` when launching a project, you can open Cypress and launch the browser at the same time. Otherwise, you will be guided through selecting a browser, project, and/or testing type.\n\n| Option | Description |\n| --- | --- |\n| `--browser`, `-b` | [Run Cypress in the browser with the given name. If a filesystem path is supplied, Cypress will attempt to use the browser at that path.](#cypress-open-browser-lt-browser-path-gt) |\n| `--component` | [Open in component testing mode](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing) |\n| `--config`, `-c` | [Specify configuration](#cypress-open-config-lt-config-gt) |\n| `--config-file`, `-C` | [Specify configuration file](#cypress-open-config-file-lt-configuration-file-gt) |\n| `--detached`, `-d` | Open Cypress in detached mode |\n| `--e2e` | Open in end to end testing mode (default) |\n| `--env`, `-e` | [Specify environment variables](#cypress-open-env-lt-env-gt) |\n| `--global` | [Open in global mode](#cypress-open-global) |\n| `--help`, `-h` | Output usage information |\n| `--port`, `-p` | [Override default port](#cypress-open-port-lt-port-gt) |\n| `--project`, `-P` | [Path to a specific project](#cypress-open-project-lt-project-path-gt) |\n\n#### `cypress open --browser <browser-path>`[​](#cypress-open-browser-lt-browser-path-gt \"Direct link to cypress-open-browser-lt-browser-path-gt\")\n\nBy default, Cypress will automatically find and allow you to use the browsers installed on your system.\n\nThe \"browser\" option allows you to specify the path to a custom browser to use with Cypress:\n\n```\ncypress open --browser /usr/bin/chromium\n```\n\nIf found, the specified browser will be added to the list of available browsers.\n\nCurrently, only browsers in the Chrome family (including the new Chromium-based Microsoft Edge and Brave) and Firefox are supported.\n\n[Having trouble launching a browser? Check out our troubleshooting guide](https://docs.cypress.io/guides/references/troubleshooting#Launching-browsers)\n\n#### `cypress open --config <config>`[​](#cypress-open-config-lt-config-gt \"Direct link to cypress-open-config-lt-config-gt\")\n\nSet [configuration](https://docs.cypress.io/guides/references/configuration) values. Separate multiple values with a comma. The values set here override any values set in your configuration file.\n\n```\ncypress open --config pageLoadTimeout=100000,watchForFileChanges=false\n```\n\nFor more complex configuration objects, you may want to consider passing a [JSON.stringified](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) object.\n\nHere, we're passing in the configuration for component spec files.\n\n```\ncypress open --config \"{\\\"watchForFileChanges\\\":false,\\\"specPattern\\\":[\\\"**/*.cy.js\\\",\\\"**/*.cy.ts\\\"]}\"\n```\n\n#### `cypress open --config-file <configuration-file>`[​](#cypress-open-config-file-lt-configuration-file-gt \"Direct link to cypress-open-config-file-lt-configuration-file-gt\")\n\nYou can specify a path to a file where [Cypress configuration](https://docs.cypress.io/guides/references/configuration) values are set.\n\n```\ncypress open --config-file tests/cypress.config.js\n```\n\n#### `cypress open --env <env>`[​](#cypress-open-env-lt-env-gt \"Direct link to cypress-open-env-lt-env-gt\")\n\nSet Cypress [environment variables](https://docs.cypress.io/guides/guides/environment-variables).\n\n```\ncypress open --env host=api.dev.local\n```\n\nPass several variables using commas and no spaces. Numbers are automatically converted from strings.\n\n```\ncypress open --env host=api.dev.local,port=4222\n```\n\nPass an object as a JSON in a string.\n\n```\ncypress open --env flags='{\"feature-a\":true,\"feature-b\":false}'\n```\n\n#### `cypress open --global`[​](#cypress-open-global \"Direct link to cypress-open-global\")\n\nOpening Cypress in global mode is useful if you have multiple nested projects but want to share a single global installation of Cypress. In this case you can add each nested project to the Cypress in global mode, thus giving you a nice UI to switch between them.\n\n#### `cypress open --port <port>`[​](#cypress-open-port-lt-port-gt \"Direct link to cypress-open-port-lt-port-gt\")\n\n#### `cypress open --project <project-path>`[​](#cypress-open-project-lt-project-path-gt \"Direct link to cypress-open-project-lt-project-path-gt\")\n\nTo see this in action we've set up an [example repo to demonstrate this here](https://github.com/cypress-io/cypress-test-nested-projects).\n\n```\ncypress open --project ./some/nested/folder\n```\n\n### `cypress info`[​](#cypress-info \"Direct link to cypress-info\")\n\nPrints information about Cypress and the current environment such as:\n\n*   A list of browsers Cypress detected on the machine.\n*   Any environment variables that control [proxy configuration](https://docs.cypress.io/guides/references/proxy-configuration).\n*   Any environment variables that start with the `CYPRESS` prefix (with sensitive variables like [record key](https://docs.cypress.io/guides/cloud/account-management/projects#Record-key) masked for security).\n*   The location where run-time data is stored.\n*   The location where the Cypress binary is cached.\n*   Operating system information.\n*   System memory including free space.\n\n```\ncypress infoDisplaying Cypress info...Detected 2 browsers installed:1. Chrome  - Name: chrome  - Channel: stable  - Version: 79.0.3945.130  - Executable: /path/to/google-chrome  - Profile: /user/profile/folder/for/google-chrome2. Firefox Nightly  - Name: firefox  - Channel: nightly  - Version: 74.0a1  - Executable: /path/to/firefoxNote: to run these browsers, pass <name>:<channel> to the '--browser' fieldExamples:- cypress run --browser firefox:nightly- cypress run --browser chromeLearn More: https://on.cypress.io/launching-browsersProxy Settings: none detectedEnvironment Variables: none detectedApplication Data: /path/to/app/data/cypress/cy/developmentBrowser Profiles: /path/to/app/data/cypress/cy/development/browsersBinary Caches: /user/profile/path/.cache/CypressCypress Version: 4.1.0System Platform: darwin (19.2.0)System Memory: 17.2 GB free 670 MB\n```\n\n**Tip:** set [DEBUG environment variable](https://docs.cypress.io/guides/references/troubleshooting#Print-DEBUG-logs) to `cypress:launcher` when running `cypress info` to troubleshoot browser detection.\n\n### `cypress verify`[​](#cypress-verify \"Direct link to cypress-verify\")\n\nVerify that Cypress is installed correctly and is executable.\n\n```\ncypress verify✔  Verified Cypress! /Users/jane/Library/Caches/Cypress/3.0.0/Cypress.app\n```\n\nTo change the default timeout of 30 seconds, you can set the environment variable `CYPRESS_VERIFY_TIMEOUT`:\n\n```\nexport CYPRESS_VERIFY_TIMEOUT=60000 # wait for 60 secondscypress verify\n```\n\nNote that the `cypress verify` command is executed as part of the `cypress open` and `cypress run` commands. The `CYPRESS_VERIFY_TIMEOUT` environment variable should be provided for those commands if you wish to modify the timeout duration.\n\n### `cypress version`[​](#cypress-version \"Direct link to cypress-version\")\n\nPrints the installed Cypress binary version, the Cypress package version, the version of Electron used to build Cypress, and the bundled Node version.\n\nIn most cases the binary and the package versions will be the same, but they could be different if you have installed a different version of the package and for some reason failed to install the matching binary version.\n\n```\ncypress versionCypress package version: 12.0.0Cypress binary version: 12.0.0Electron version: 21.0.0Bundled Node version: 16.16.0\n```\n\nYou can print each individual component's version number also.\n\n```\ncypress version --component package12.0.0cypress version --component binary12.0.0cypress version --component electron21.0.0cypress version --component node16.16.0\n```\n\n### `cypress cache [command]`[​](#cypress-cache-command \"Direct link to cypress-cache-command\")\n\nCommands for managing the global Cypress cache. The Cypress cache applies to all installs of Cypress across your machine, global or not.\n\n#### `cypress cache path`[​](#cypress-cache-path \"Direct link to cypress-cache-path\")\n\nPrint the `path` to the Cypress cache folder. You can change the path where the Cypress cache is located by following [these instructions](https://docs.cypress.io/guides/references/advanced-installation#Binary-cache).\n\n```\ncypress cache path/Users/jane/Library/Caches/Cypress\n```\n\n#### `cypress cache list`[​](#cypress-cache-list \"Direct link to cypress-cache-list\")\n\nPrint all existing installed versions of Cypress. The output will be a table with cached versions and the last time the binary was used by the user, determined from the file's access time.\n\n```\ncypress cache list┌─────────┬──────────────┐│ version │ last used    │├─────────┼──────────────┤│ 3.0.0   │ 3 months ago │├─────────┼──────────────┤│ 3.0.1   │ 5 days ago   │└─────────┴──────────────┘\n```\n\nYou can calculate the size of every Cypress version folder by adding the `--size` argument to the command. Note that calculating the disk size can be slow.\n\n```\ncypress cache list --size┌─────────┬──────────────┬─────────┐│ version │ last used    │ size    │├─────────┼──────────────┼─────────┤│ 5.0.0   │ 3 months ago │ 425.3MB │├─────────┼──────────────┼─────────┤│ 5.3.0   │ 5 days ago   │ 436.3MB │└─────────┴──────────────┴─────────┘\n```\n\n#### `cypress cache clear`[​](#cypress-cache-clear \"Direct link to cypress-cache-clear\")\n\nClear the contents of the Cypress cache. This is useful when you want Cypress to clear out all installed versions of Cypress that may be cached on your machine. After running this command, you will need to run `cypress install` before running Cypress again.\n\n#### `cypress cache prune`[​](#cypress-cache-prune \"Direct link to cypress-cache-prune\")\n\nDeletes all installed Cypress versions from the cache except for the currently-installed version.\n\n## Debugging commands[​](#Debugging-commands \"Direct link to Debugging commands\")\n\n### Enable Debug Logs[​](#Enable-Debug-Logs \"Direct link to Enable Debug Logs\")\n\nCypress is built using the [debug](https://github.com/visionmedia/debug) module. That means you can receive helpful debugging output by running Cypress with this turned on prior to running `cypress open` or `cypress run`.\n\n**On Mac or Linux:**\n\n```\nDEBUG=cypress:* cypress open\n```\n\n```\nDEBUG=cypress:* cypress run\n```\n\n**On Windows:**\n\nCypress is a rather large and complex project involving a dozen or more submodules, and the default output can be overwhelming.\n\n**To filter debug output to a specific module**\n\n```\nDEBUG=cypress:cli cypress run\n```\n\n```\nDEBUG=cypress:launcher cypress run\n```\n\n...or even a 3rd level deep submodule\n\n```\nDEBUG=cypress:server:project cypress run\n```\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [12.6.0](https://docs.cypress.io/guides/references/changelog#12-6-0) | Added `--auto-cancel-after-failures` flag to `cypress run` |\n| [5.4.0](https://docs.cypress.io/guides/references/changelog) | Added `prune` subcommand to `cypress cache` |\n| [5.4.0](https://docs.cypress.io/guides/references/changelog) | Added `--size` flag to `cypress cache list` subcommand |\n| [4.9.0](https://docs.cypress.io/guides/references/changelog) | Added `--quiet` flag to `cypress run` |",
  "title": "Command Line | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/overview/key-differences",
  "markdown": "# Key Differences | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   What makes Cypress unique\n*   How its architecture differs from Selenium\n*   New testing approaches not possible before\n\n## Architecture[​](#Architecture \"Direct link to Architecture\")\n\nMost testing tools (like Selenium) operate by running outside of the browser and executing remote commands across the network. _Cypress is the exact opposite._ Cypress is executed in the same run loop as your application.\n\nBehind Cypress is a Node server process. Cypress and the Node process constantly communicate, synchronize, and perform tasks on behalf of each other. Having access to both parts (front and back) gives us the ability to respond to your application's events in real time, while at the same time work outside of the browser for tasks that require a higher privilege.\n\nCypress also operates at the network layer by reading and altering web traffic on the fly. This enables Cypress to not only modify everything coming in and out of the browser, but also to change code that may interfere with its ability to automate the browser.\n\nCypress ultimately controls the entire automation process from top to bottom, which puts it in the unique position of being able to understand everything happening in and outside of the browser. This means Cypress is capable of delivering more consistent results than any other testing tool.\n\nBecause Cypress is [installed locally](https://docs.cypress.io/guides/getting-started/installing-cypress) on your machine, it can additionally tap into the operating system for automation tasks. This makes performing tasks such as [taking screenshots, recording videos](https://docs.cypress.io/guides/guides/screenshots-and-videos), general [file system operations](https://docs.cypress.io/api/commands/exec) and [network operations](https://docs.cypress.io/api/commands/request) possible.\n\n## Native access[​](#Native-access \"Direct link to Native access\")\n\nBecause Cypress operates within your application, that means it has native access to every single object. Whether it is the `window`, the `document`, a DOM element, your application instance, a function, a timer, a service worker, or anything else - you have access to it in your Cypress tests. There is no object serialization, there is no over-the-wire protocol - you have access to everything. Your test code can access all the same objects that your application code can.\n\n## New kind of testing[​](#New-kind-of-testing \"Direct link to New kind of testing\")\n\nHaving ultimate control over your application, the network traffic, and native access to every host object unlocks a new way of testing that has never been possible before. Instead of being 'locked out' of your application and not being able to easily control it - Cypress instead lets you alter any aspect of how your application works. Instead of slow and expensive tests, such as creating the state required for a given situation, you can create these states artificially like you would in an unit test. For instance you can:\n\n*   [Stub](https://docs.cypress.io/api/commands/stub) the browser or your application's functions and force them to behave as needed in your test case.\n*   Expose data stores (like in Redux) so you can programmatically alter the state of your application directly from your test code.\n*   Test edge cases like 'empty views' by forcing your server to send empty responses.\n*   Test how your application responds to errors on your server by modifying response status codes to be 500.\n*   Modify DOM elements directly - like forcing hidden elements to be shown.\n*   Use 3rd party plugins programmatically. Instead of fussing with complex UI widgets like multi selects, autocompletes, drop downs, tree views or calendars, you can call methods directly from your test code to control them.\n*   [Prevent Google Analytics from loading _before_ any of your application code executes](https://docs.cypress.io/guides/references/configuration#blockHosts) when testing.\n*   Get synchronous notifications whenever your application transitions to a new page or when it begins to unload.\n*   [Control time by moving forward or backward](https://docs.cypress.io/api/commands/clock) so that timers or polls automatically fire without having to wait for the required time in your tests.\n*   Add your own event listeners to respond to your application. You could update your application code to behave differently when under tests in Cypress. You can control WebSocket messages from within Cypress, conditionally load 3rd party scripts, or call functions directly on your application.\n\n## Shortcuts[​](#Shortcuts \"Direct link to Shortcuts\")\n\nTrying to test hard to reach areas of your application? Don't like the side effects an action creates? Tired of repeating the same repetitive and slow actions over and over again? You can skip them for most test cases.\n\nCypress allows for browser context to be cached with [`cy.session()`](https://docs.cypress.io/api/commands/session). This means as a user, you only need to perform authentication once for the entirety of your test suite, and restore the saved session between each test. That means you do not have to visit a login page, type in a username and password and wait for the page to load and/or redirect for every test you run. You can accomplish this once with [`cy.session()`](https://docs.cypress.io/api/commands/session) and if needed, [`cy.origin()`](https://docs.cypress.io/api/commands/origin).\n\nCypress also gives you the ability to take shortcuts and programmatically log in. With commands like [`cy.request()`](https://docs.cypress.io/api/commands/request), you can send HTTP requests directly, yet have those requests synchronized with the browser. Cookies are automatically sent and applied back. Worried about CORS? Don't be, it is completely bypassed. The power to choose when to test like a user and when to skip slow and repetitive parts is yours.\n\n## Flake resistant[​](#Flake-resistant \"Direct link to Flake resistant\")\n\nCypress knows and understands everything that happens in your application synchronously. It is notified the moment the page loads and the moment the page unloads. It is impossible for Cypress to miss elements when it fires events. Cypress even knows how fast an element is animating and will [wait for it to stop animating](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Animations). Additionally, it [automatically waits for elements to become visible](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Visibility), to [become enabled](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Disability), and to [stop being covered](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Covering). When pages begin to transition, Cypress will pause command execution until the following page is fully loaded. You can even tell Cypress to [wait](https://docs.cypress.io/api/commands/wait) on specific network requests to finish.\n\nCypress executes the vast majority of its commands inside the browser, so there is no network lag. Commands execute and drive your application as fast as it is capable of rendering. To deal with modern JavaScript frameworks with complex UIs, you use assertions to tell Cypress what the desired state of your application should be. Cypress will automatically wait for your application to reach this state before moving on. You are completely insulated from fussing with manual waits or retries. Cypress automatically waits for elements to exist and will never yield you stale elements that have been detached from the DOM.\n\n## Debuggability[​](#Debuggability \"Direct link to Debuggability\")\n\nAbove all else Cypress has been built for usability.\n\nThere are hundreds of custom error messages describing the exact reason Cypress failed your test.\n\nThere is a rich UI which visually shows you the command execution, assertions, network requests, spies, stubs, page loads, or URL changes.\n\nCypress takes snapshots of your application and enables you to time travel back to the state it was in when commands ran.\n\nYou can use the Developer Tools while your tests run, you can see every console message, every network request. You can inspect elements, and you can even use debugger statements in your spec code or your application code. There is no fidelity loss - you can use all the tools you're already comfortable with. This enables you to test and develop all at the same time.\n\n## Trade offs[​](#Trade-offs \"Direct link to Trade offs\")\n\nWhile there are many new and powerful capabilities of Cypress - there are also important trade-offs that we've made in making this possible.\n\nIf you're interested in understanding more, we've written [an entire guide](https://docs.cypress.io/guides/references/trade-offs) on this topic.",
  "title": "Key Differences | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/content-security-policy",
  "markdown": "# Content Security Policy | Cypress Documentation\n\nContent Security Policy (CSP) is a browser security feature that allows you to restrict the resources that can be loaded into your application. This can be problematic for Cypress, because it needs to inject JavaScript into your application in order to run tests and interact with the DOM. This page describes how Cypress handles CSP and how to configure it to work with your application.\n\nThere are two ways to implement CSP:\n\n*   [Meta tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv)\n*   [HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)\n\nThe `<meta>` tag implementation is fully supported by Cypress without any configuration required. This is because Cypress loads the necessary `<script>` tags into your application before any `<meta>` tag is parsed. This prevents any CSP directives from being applied to the script loaded by Cypress.\n\nThe second implementation requires you to configure Cypress to allow the headers to be sent to your application. By default, Cypress will remove any CSP headers from the response before it is sent to the browser. This is done to prevent Cypress from being blocked by the browser's CSP implementation.\n\nFor most application tests, this should not cause any issues. However, if you are testing your application's CSP implementation, you will need to configure Cypress to allow the headers to be sent to the browser. You can do this by setting the [`experimentalCspAllowList`](https://docs.cypress.io/guides/references/experiments#Experimental-CSP-Allow-List) configuration option.\n\nFor more information on CSP, see the [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) documentation on MDN.",
  "title": "Content Security Policy | Cypress Documentation",
  "description": "Content Security Policy (CSP) is a browser security feature that allows you to",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/getting-started/installing-cypress",
  "markdown": "# Seamless Cypress Installation Guide | Cypress Documentation\n\n## Installing Cypress\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to install Cypress via `npm`, `yarn` or `pnpm`\n*   How to install Cypress via direct download\n*   How to version and run Cypress via `package.json`\n\nFirst, make sure you have all the [system requirements](#System-requirements).\n\n## Installing[​](#Installing \"Direct link to Installing\")\n\n### `npm install`[​](#npm-install \"Direct link to npm-install\")\n\nInstall Cypress via `npm`:\n\n```\nnpm install cypress --save-dev\n```\n\nThis will install Cypress locally as a dev dependency for your project.\n\ninfo\n\nMake sure you have Node.js installed and that you have already run [`npm init`](https://docs.npmjs.com/cli/init) or have a `node_modules` folder or `package.json` file in the root of your project to ensure cypress is installed in the correct directory.\n\ninfo\n\nSystem proxy properties `http_proxy`, `https_proxy` and `no_proxy` are respected for the download of the Cypress binary. You can also use the npm properties `npm_config_proxy` and `npm_config_https_proxy`. Those have lower priority, so they will only be used if the system properties are being resolved to not use a proxy.\n\ntip\n\n**Best Practice**\n\nThe recommended approach is to install Cypress with `npm` because:\n\n*   Cypress is versioned like any other dependency.\n*   It simplifies running Cypress in [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction).\n\n### `yarn add`[​](#yarn-add \"Direct link to yarn-add\")\n\nInstalling Cypress via [`Yarn`](https://yarnpkg.com/):\n\nSystem proxy properties `http_proxy`, `https_proxy` and `no_proxy` are respected for the download of the Cypress binary.\n\n### `pnpm add`[​](#pnpm-add \"Direct link to pnpm-add\")\n\nInstalling Cypress via [`pnpm`](https://pnpm.io/):\n\n```\npnpm add --save-dev cypress\n```\n\ninfo\n\nYou need to make sure that you have the `pnpm` environment installed locally. If not you need to install it: `npm install pnpm@latest --global`.\n\n### Direct download[​](#Direct-download \"Direct link to Direct-download\")\n\nIf you're not using Node or a package manager (`npm`, `pnpm` or `Yarn`) in your project or you want to try Cypress out quickly, you can always [download Cypress directly from our CDN](https://download.cypress.io/desktop).\n\ncaution\n\nRecording runs to Cypress Cloud is not possible from the direct download. This download is only intended as a quick way to try out Cypress. To record tests to Cypress Cloud, you'll need to install Cypress as an `npm` dependency.\n\nThe direct download will always grab the latest available version. Your platform will be detected automatically.\n\nThen you can manually unzip and double click. Cypress will run without needing to install any dependencies.\n\n### Advanced Installation[​](#Advanced-Installation \"Direct link to Advanced-Installation\")\n\nIf you have more complex requirements, want to level-up your Cypress workflow or just need help with troubleshooting, check out our [Advanced Installation](https://docs.cypress.io/guides/references/advanced-installation) reference.\n\n### Continuous integration[​](#Continuous-integration \"Direct link to Continuous-integration\")\n\nPlease read our [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction) docs for help installing Cypress in CI. When running in Linux you may need to install some [system dependencies](#Linux-Prerequisites) or you can use our [Docker images](#Docker-Prerequisites) which have everything you need prebuilt.\n\n## System requirements[​](#System-requirements \"Direct link to System requirements\")\n\n### Operating System[​](#Operating-System \"Direct link to Operating System\")\n\nCypress is a desktop application that is installed on your computer. The desktop application supports these operating systems:\n\n*   **macOS** 10.15 and above _(Intel or Apple Silicon 64-bit (x64 or arm64))_\n*   **Linux** Ubuntu 20.04 and above, Fedora 38 and above, and Debian 10 and above _(x64 or arm64)_ (see [Linux Prerequisites](#Linux-Prerequisites) down below)\n*   **Windows** 10 and above _(64-bit only)_\n\n### Node.js[​](#Nodejs \"Direct link to Node.js\")\n\nCypress requires Node.js in order to install. We support the versions listed below:\n\n*   **Node.js** 18.x, 20.x, 22.x and above\n\nCypress generally aligns with [Node's release schedule](https://github.com/nodejs/Release).\n\n### Hardware[​](#Hardware \"Direct link to Hardware\")\n\nWhen running Cypress locally, it should run comfortably on any machine that is capable of modern web development.\n\nWhen running Cypress in CI, however, some of the lower-tier configurations might not be able to run Cypress reliably, especially when recording videos or doing longer test runs.\n\nSome issues you might run into in CI that could be a sign of insufficient resources are:\n\n*   Exiting early during `cypress run` or abruptly closing (“crashing”)\n*   Frozen or missing frames in the video that is captured\n*   Increased runtime\n\nWhen running Cypress in CI, we recommend that you have the following hardware requirements:\n\n#### CPU[​](#CPU \"Direct link to CPU\")\n\n*   2 CPUs minimum to run Cypress\n*   1 additional CPU if video recording is enabled\n*   1 additional CPU per process you run outside of Cypress, such as:\n    *   App server (frontend)\n    *   App server (backend)\n    *   App database\n    *   Any additional infrastructure (Redis, Kafka, etc..)\n\n### Memory[​](#Memory \"Direct link to Memory\")\n\n*   4GB minimum, 8GB+ for longer test runs\n\n### Linux Prerequisites[​](#Linux-Prerequisites \"Direct link to Linux Prerequisites\")\n\nIf you're using Linux, you'll want to have the required dependencies installed on your system. Depending on your system defaults, these dependencies may already be installed. If not, run the command line for your operating system listed below. See below under [Docker Prerequisites](#Docker-Prerequisites) for information on [Cypress Docker images](https://github.com/cypress-io/cypress-docker-images). These already include the necessary dependencies.\n\n#### Ubuntu/Debian[​](#UbuntuDebian \"Direct link to Ubuntu/Debian\")\n\n```\napt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb\n```\n\nFor Ubuntu 24.04 use the following command:\n\n```\napt-get install libgtk2.0-0t64 libgtk-3-0t64 libgbm-dev libnotify-dev libnss3 libxss1 libasound2t64 libxtst6 xauth xvfb\n```\n\n#### Arch[​](#Arch \"Direct link to Arch\")\n\n```\npacman -S gtk2 gtk3 alsa-lib xorg-server-xvfb libxss nss libnotify\n```\n\n#### Amazon Linux 2023[​](#Amazon-Linux-2023 \"Direct link to Amazon Linux 2023\")\n\n```\ndnf install -y xorg-x11-server-Xvfb gtk3-devel nss alsa-lib\n```\n\n### Docker Prerequisites[​](#Docker-Prerequisites \"Direct link to Docker Prerequisites\")\n\n[Cypress Docker images](https://docs.cypress.io/guides/continuous-integration/introduction#Cypress-Docker-variants) are available from [Docker Hub](https://hub.docker.com/u/cypress) and the [Amazon ECR (Elastic Container Registry) Public Gallery](https://gallery.ecr.aws/cypress-io). These images, which are Linux (Debian) based, include all of the required dependencies pre-installed.\n\nIf you need Node.js, browser or Cypress version combinations which are not covered by the published Cypress Docker images, then the [cypress/factory](https://github.com/cypress-io/cypress-docker-images/tree/master/factory) image allows you to generate your own customized Docker image easily.\n\nIf you are not using a Cypress Docker image, make sure that your base operating system is a Linux system listed in the supported [Operating Systems](#Operating-System) above and that Node.js is installed in the image. It is recommended to have `unzip` installed. This avoids the Cypress binary installation falling back to a slower unzip method using Node.js.\n\n## Next Steps[​](#Next-Steps \"Direct link to Next Steps\")\n\n[Open the app](https://docs.cypress.io/guides/getting-started/opening-the-app) and take it for a test drive!",
  "title": "Seamless Cypress Installation Guide | Cypress Documentation",
  "description": "Follow a step-by-step guide to install Cypress seamlessly. Learn the prerequisites, installation process, and get started with Cypress for efficient testing",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/bundled-libraries",
  "markdown": "# Bundled Libraries | Cypress Documentation\n\ninfo\n\nCypress relies on many best-of-breed open source testing libraries to lend stability and familiarity to the platform from the get-go. If you've been testing in JavaScript, you'll recognize many old friends in this list. Understand how we exploit them and hit the ground running with Cypress!\n\n## Mocha[​](#Mocha \"Direct link to Mocha\")\n\n[http://mochajs.org/](http://mochajs.org/)\n\nCypress has adopted Mocha's `bdd` syntax, which fits perfectly with both integration and unit testing. All of the tests you'll be writing sit on the fundamental harness Mocha provides, namely:\n\n*   [`describe()`](http://mochajs.org/#bdd)\n*   [`context()`](http://mochajs.org/#bdd)\n*   [`it()`](http://mochajs.org/#bdd)\n*   [`before()`](http://mochajs.org/#hooks)\n*   [`beforeEach()`](http://mochajs.org/#hooks)\n*   [`afterEach()`](http://mochajs.org/#hooks)\n*   [`after()`](http://mochajs.org/#hooks)\n*   [`.only()`](http://mochajs.org/#exclusive-tests)\n*   [`.skip()`](http://mochajs.org/#exclusive-tests)\n\nAdditionally, Mocha gives us excellent [`async` support](http://mochajs.org/#asynchronous-code). Cypress has extended Mocha, sanding off the rough edges, weird edge cases, bugs, and error messages. These fixes are all completely transparent.\n\n## Chai[​](#Chai \"Direct link to Chai\")\n\n[http://chaijs.com/](http://chaijs.com/)\n\nWhile Mocha provides us a framework to structure our tests, Chai gives us the ability to easily write assertions. Chai gives us readable assertions with excellent error messages. Cypress extends this, fixes several common pitfalls, and wraps Chai's DSL using [subjects](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions) and the [`.should()`](https://docs.cypress.io/api/commands/should) command.\n\n## Chai-jQuery[​](#Chai-jQuery \"Direct link to Chai-jQuery\")\n\n[https://github.com/chaijs/chai-jquery](https://github.com/chaijs/chai-jquery)\n\nWhen writing integration tests, you will likely work a lot with the DOM. Cypress brings in Chai-jQuery, which automatically extends Chai with specific jQuery chainer methods.\n\n## Sinon.js[​](#Sinonjs \"Direct link to Sinon.js\")\n\n[https://github.com/sinonjs/sinon](https://github.com/sinonjs/sinon)\n\nWhen writing unit tests, or even in integration-like tests, you often need to ability to stub and spy methods. Cypress includes two methods, [`cy.stub()`](https://docs.cypress.io/api/commands/stub) and [`cy.spy()`](https://docs.cypress.io/api/commands/spy) that return Sinon stubs and spies, respectively.\n\nCypress also exposes a utility so that `sinon` can be called anywhere inside of your tests using [`Cypress.sinon`](https://docs.cypress.io/api/utilities/sinon).\n\n## Sinon-Chai[​](#Sinon-Chai \"Direct link to Sinon-Chai\")\n\n[https://github.com/cypress-io/sinon-chai](https://github.com/cypress-io/sinon-chai)\n\nWhen working with `stubs` or `spies` you'll regularly want to use those when writing Chai assertions. Cypress bundles in Sinon-Chai which extends Chai allowing you to [write assertions](https://github.com/cypress-io/sinon-chai) about `stubs` and `spies`.\n\n## Other Library Utilities[​](#Other-Library-Utilities \"Direct link to Other Library Utilities\")\n\nCypress also bundles the following tools on the `Cypress` object. These can be used anywhere inside of your tests.\n\n*   [`Cypress._`](https://docs.cypress.io/api/utilities/_) (lodash)\n*   [`Cypress.$`](https://docs.cypress.io/api/utilities/$) (jQuery)\n*   [`Cypress.minimatch`](https://docs.cypress.io/api/utilities/minimatch) (minimatch.js)\n*   [`Cypress.Blob`](https://docs.cypress.io/api/utilities/blob) (Blob utils)\n*   [`Cypress.Buffer`](https://docs.cypress.io/api/utilities/buffer) (Buffer utils)\n*   [`Cypress.Promise`](https://docs.cypress.io/api/utilities/promise) (Bluebird)",
  "title": "Bundled Libraries | Cypress Documentation",
  "description": "Cypress relies on many best-of-breed open source testing libraries to lend",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/cross-browser-testing",
  "markdown": "# Cross Browser Testing | Cypress Documentation\n\nCypress has the capability to run tests across multiple browsers. Currently, Cypress has support for [Chrome-family browsers](https://docs.cypress.io/guides/guides/launching-browsers#Chrome-Browsers) (including Electron and Chromium-based Microsoft Edge), [WebKit](https://docs.cypress.io/guides/guides/launching-browsers#WebKit-Experimental) (Safari's browser engine), and Firefox.\n\nExcluding [Electron](https://docs.cypress.io/guides/guides/launching-browsers#Electron-Browser), any browser you want to run Cypress tests in needs to be installed on your local system or CI environment. A full list of detected browsers is displayed within the browser selection menu of [Cypress](https://docs.cypress.io/guides/core-concepts/cypress-app).\n\n![Cypress with Firefox selected as the browser](https://docs.cypress.io/img/guides/cross-browser-testing/v10/browser-select-FF.png)\n\nThe desired browser can also specified via the [`--browser`](https://docs.cypress.io/guides/guides/command-line#Options) flag when using [`run`](https://docs.cypress.io/guides/guides/command-line#cypress-run) command to launch Cypress. For example, to run Cypress tests in Firefox:\n\n```\ncypress run --browser firefox\n```\n\nTo make launching of Cypress with a specific browser even more convenient, npm scripts can be used as a shortcut:\n\n```\n\"scripts\": {  \"cy:run:chrome\": \"cypress run --browser chrome\",  \"cy:run:firefox\": \"cypress run --browser firefox\"}\n```\n\n## Continuous Integration Strategies[​](#Continuous-Integration-Strategies \"Direct link to Continuous Integration Strategies\")\n\nWhen incorporating testing of multiple browsers within your QA process, you must implement a CI strategy that provides an optimal level of confidence while taking into consideration test duration and infrastructure costs. This optimal strategy will vary by the type and needs of a particular project. This guide we present several strategies to consider when crafting the strategy for your project.\n\nCI strategies will be demonstrated using the [Circle CI Cypress Orb](https://circleci.com/orbs/registry/orb/cypress-io/cypress) for its concise and readable configuration, but the same concepts apply for most CI providers.\n\ninfo\n\n**Docker Images for Testing**\n\nThe CI configuration examples within this guide use [Cypress's Docker images](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers) to provision testing environments with desired versions of Node, Chrome, and Firefox.\n\n### Periodic Basis[​](#Periodic-Basis \"Direct link to Periodic Basis\")\n\nGenerally, it is desired to run tests with each pushed commit, but it may not be necessary to do so for all browsers. For example, we can choose to run tests within Chrome for each commit, but only run Firefox on a periodic basis (i.e. nightly). The periodic frequency will depend on the scheduling of your project releases, so consider a test run frequency that is appropriate for the release schedule of your project.\n\ninfo\n\n**Cron Scheduling**\n\nTypically CI providers allow for the scheduling of CI jobs via [cron expressions](https://en.wikipedia.org/wiki/Cron). For example, the expression `0 0 * * *` translates to \"everyday at midnight\" or nightly. Helpful [online utilities](https://crontab.guru/) are available to assist with creation and translation of cron expressions.\n\nThe following example demonstrates a nightly CI schedule against production (`master` branch) for Firefox:\n\n```\nversion: 2.1orbs:  cypress: cypress-io/cypress@3workflows:  nightly:    triggers:      - schedule:          cron: '0 0 * * *'          filters:            branches:              only:                - master    jobs:      - cypress/run:          install-browsers: true          cypress-command: 'npx cypress run --browser firefox'          start-command: 'npm start'\n```\n\n### Production Deployment[​](#Production-Deployment \"Direct link to Production Deployment\")\n\nFor projects that exhibit consistently stable behavior across browsers, it may be better to run tests against additional browsers only before merging changes in the production deployment branch.\n\nThe following example demonstrates only running Firefox tests when commits are merged into a specific branch (`develop` branch in this case) so any potential Firefox issues can be caught before a production release:\n\n```\nversion: 2.1orbs:  cypress: cypress-io/cypress@3workflows:  test_develop:    jobs:      - filters:        branches:          only:            - develop      - cypress/run:          install-browsers: true          cypress-command: 'npx cypress run --browser firefox'          start-command: 'npm start'\n```\n\n### Subset of Tests[​](#Subset-of-Tests \"Direct link to Subset of Tests\")\n\nWe can choose to only run a subset of tests against a given browser. For example, we can execute only the happy or critical path related test files, or a directory of specific \"smoke\" test files. It is not always necessary to have both browsers always running _all_ tests.\n\nIn the example below, the Chrome `cypress/run` job runs _all_ tests against Chrome and reports results to [Cypress Cloud](https://on.cypress.io/cloud) using a ([group](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs)) named `chrome`.\n\nThe Firefox `cypress/run` job runs a subset of tests, defined in the `spec` parameter, against the Firefox browser, and reports the results to [Cypress Cloud](https://on.cypress.io/cloud) under the group `firefox-critical-path`.\n\ninfo\n\n**Note:** The `name` under each `cypress/run` job which will be shown in the Circle CI workflow UI to distinguish the jobs.\n\n```\nversion: 2.1orbs:  cypress: cypress-io/cypress@3workflows:  build:    jobs:      - cypress/run:          name: Chrome          start-command: 'npm start'          install-browsers: true          cypress-command: 'npx cypress run --browser chrome --record --group chrome'      - cypress/run:          name: Firefox          start-command: 'npm start'          cypress-command: 'npx cypress run --browser firefox --record --group            firefox-critical-path --spec            cypress/e2e/signup.cy.js,cypress/e2e/login.cy.js'\n```\n\n### Parallelize per browser[​](#Parallelize-per-browser \"Direct link to Parallelize per browser\")\n\nExecution of test files can be parallelized on a per [group](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) basis, where test files can be grouped by the browser under test. This versatility enables the ability to allocate the desired amount of CI resources towards a browser to either improve test duration or to minimize CI costs.\n\n**You do not have to run all browsers at the same parallelization level.** In the example below, the Chrome dedicated `cypress/run` job runs _all_ tests in parallel, across **4 machines**, against Chrome and reports results to [Cypress Cloud](https://on.cypress.io/cloud) under the group name `chrome`. The Firefox dedicated `cypress/run` job runs a _subset_ of tests in parallel, across **2 machines**, defined by the `spec` parameter, against the Firefox browser and reports results to [Cypress Cloud](https://on.cypress.io/cloud) under the group named `firefox`.\n\n```\nversion: 2.1orbs:  cypress: cypress-io/cypress@3workflows:  build:    jobs:      - cypress/run:          name: Chrome          cypress-command: 'npx cypress run --record --parallel --group chrome --browser chrome'          start-command: 'npm start'          parallelism: 4          install-browsers: true      - cypress/run:          name: Firefox          cypress-command:            'npx cypress run --record --parallel --group firefox --browser            firefox --spec            cypress/e2e/app.cy.js,cypress/e2e/login.cy.js,cypress/e2e/about.cy.js'          start-command: 'npm start'          parallelism: 2          install-browsers: true\n```\n\n### Running Specific Tests by Browser[​](#Running-Specific-Tests-by-Browser \"Direct link to Running Specific Tests by Browser\")\n\nThere may be instances where it can be useful to run or ignore one or more tests when in specific browsers. For example, test run duration can be reduced by only running smoke-tests against Chrome and not Firefox. This type of granular selection of test execution depends on the type of tests and the level of confidence those specific tests provide to the overall project.\n\ntip\n\n**Tip**\n\nWhen considering to ignore or only run a particular test within a given browser, assess the true need for the test to run on multiple browsers.\n\nYou can specify a browser to run or exclude by passing a matcher to the suite or test within the [test configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration). The `browser` option accepts the same arguments as [Cypress.isBrowser()](https://docs.cypress.io/api/cypress-api/isbrowser#Arguments).\n\n```\n// Run the test if Cypress is running// using the built-in Electron browserit('has access to clipboard', { browser: 'electron' }, () => {  ...})// Run the test if Cypress is run via Firefoxit('Download extension in Firefox', { browser: 'firefox' }, () => {  cy.get('#dl-extension')    .should('contain', 'Download Firefox Extension')})// Run happy path tests if Cypress is run via Firefoxdescribe('happy path suite', { browser: 'firefox' }, () => {  it('...')  it('...')  it('...')})// Ignore test if Cypress is running via Chrome// This test is not recorded to Cypress Cloudit('Show warning outside Chrome', { browser: '!chrome' }, () => {  cy.get('.browser-warning').should(    'contain',    'For optimal viewing, use Chrome browser'  )})\n```\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Browser Launch API](https://docs.cypress.io/api/plugins/browser-launch-api)\n*   [Cypress.browser](https://docs.cypress.io/api/cypress-api/browser)\n*   [Cypress.isBrowser](https://docs.cypress.io/api/cypress-api/isbrowser)\n*   [Launching Browsers](https://docs.cypress.io/guides/guides/launching-browsers)\n*   [Test Configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration)",
  "title": "Cross Browser Testing | Cypress Documentation",
  "description": "Cypress has the capability to run tests across multiple browsers. Currently,",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/cross-origin-testing",
  "markdown": "# Cross Origin Testing | Cypress Documentation\n\ninfo\n\nAs of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), Cypress has the capability to visit multiple origins in a single test via the [cy.origin()](https://on.cypress.io/origin) command!\n\nCypress limits each test to visiting domains that share the same superdomain. If a navigation occurs that does not meet the same superdomain rule, the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command must be used to execute Cypress commands inside the newly navigated origin.\n\nBut what is same superdomain? It is actually very similar to that of same origin! Two URLs have the same origin if the protocol, port (if specified), and host match. Cypress automatically handles hosts of the same superdomain by injecting the [`document.domain`](https://developer.mozilla.org/en-US/docs/Web/API/Document/domain) property into the visited `text/html` pages. This is why navigations without the use of the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command are solely scope to the same superdomain.\n\ncaution\n\n**Disabling document.domain Injection**\n\nIn some cases, `document.domain` injection may cause issues. As of Cypress [v12.4.0](https://on.cypress.io/changelog#12-4-0), disabling `document.domain` injection is available with the `experimentalSkipDomainInjection` option. Please read about this [experiment](https://docs.cypress.io/guides/references/experiments#Experimental-Skip-Domain-Injection) for more information\n\nWe understand this is a bit complicated to understand, so we have built a nifty chart to help clarify the differences!\n\n### Parts of a URL[​](#Parts-of-a-URL \"Direct link to Parts of a URL\")\n\n![](https://docs.cypress.io/img/guides/cross-origin-testing/parts_of_a_url.jpg)\n\nGiven the URLs below, all have the same superdomain compared to `https://www.cypress.io`.\n\n*   `https://cypress.io`\n*   `https://docs.cypress.io`\n*   `https://example.cypress.io/commands/querying`\n\nThe URLs below, however, will have different superdomains/origins compared to `https://www.cypress.io`.\n\n*   `http://www.cypress.io` (Different protocol)\n*   `https://docs.cypress.io:81` (Different port)\n*   `https://www.auth0.com/` (Different host of different superdomain)\n\nThe `http://localhost` URLs differ if their ports are different. For example, the `http://localhost:3000` URL is considered to be a different origin from the `http://localhost:8080` URL.\n\nThe rules are:\n\n*   You **cannot** [visit](https://docs.cypress.io/api/commands/visit) two domains of different superdomains in the same test and continue to interact with the page without the use of the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command.\n*   You **can** [visit](https://docs.cypress.io/api/commands/visit) two or more domains of different origin in **different** tests without needing [`cy.origin()`](https://docs.cypress.io/api/commands/origin).\n\nFor practical purposes, this means the following:\n\n```\n// This test will run without errorit('navigates', () => {  cy.visit('https://www.cypress.io')  cy.visit('https://docs.cypress.io')  cy.get('selector') // yup all good})\n```\n\n```\n// this will error because cypress-dx.com doesn't match the cypress.io superdomainit('navigates', () => {  cy.visit('https://www.cypress.io')  cy.visit('https://www.cypress-dx.com')  cy.get('selector')})\n```\n\nTo fix the above cross-origin error, use `cy.origin()` to indicate which origin the sequential command should run against:\n\n```\nit('navigates', () => {  cy.visit('https://example.cypress.io')  cy.visit('https://www.cypress-dx.com')  cy.origin('https://www.cypress-dx.com', () => {    cy.get('selector') // yup all good  })})\n```\n\n```\nit('navigates', () => {  cy.visit('https://www.cypress.io')})// split visiting different origin in another testit('navigates to new origin', () => {  cy.visit('https://cypress-dx.com')  cy.get('selector') // yup all good})\n```\n\nThis limitation exists because Cypress switches to the domain under each specific test when it runs. For more information on this, please see our Web Security page regarding [Different superdomain per test requires cy.origin command](https://docs.cypress.io/guides/guides/web-security#Different-superdomain-per-test-requires-cyorigin-command).\n\n#### Other workarounds[​](#Other-workarounds \"Direct link to Other workarounds\")\n\nThere are other ways of testing the interaction between two superdomains. The browser has a natural security barrier called `origin policy` this means that state like `localStorage`, `cookies`, `service workers` and many other APIs are not shared between them anyways. Cypress does offer APIs around `localStorage`, `sessionStorage`, and `cookies` that are not limited to this restriction.\n\nAs a best practice, you should not visit or interact with any website not under your control.\n\nIf your organization uses Single Sign On (SSO) or OAuth then you might choose to test a 3rd party service other than your superdomain, which can be tested with [`cy.origin()`](https://docs.cypress.io/api/commands/origin).\n\nWe've written several other guides specifically about handling this situation.\n\n*   [Best Practices: Visiting external sites](https://docs.cypress.io/guides/references/best-practices#Visiting-External-Sites)\n*   [Web Security: Common Workarounds](https://docs.cypress.io/guides/guides/web-security#Common-Workarounds)\n*   [Recipes: Logging In - Single Sign On](https://docs.cypress.io/examples/recipes#Logging-In)\n*   [Guides: Amazon Cognito Authentication](https://docs.cypress.io/guides/end-to-end-testing/amazon-cognito-authentication)\n*   [Guides: Auth0 Authentication](https://docs.cypress.io/guides/end-to-end-testing/auth0-authentication)\n*   [Guides: Okta Authentication](https://docs.cypress.io/guides/end-to-end-testing/okta-authentication)",
  "title": "Cross Origin Testing | Cypress Documentation",
  "description": "As of Cypress v12.0.0, Cypress has the",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/client-certificates",
  "markdown": "# Client Certificates | Cypress Documentation\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  clientCertificates: [    {      url: 'https://a.host.com',      ca: ['certs/ca.pem'],      certs: [        {          cert: 'certs/cert.pem',          key: 'certs/private.key',          passphrase: 'certs/pem-passphrase.txt',        },      ],    },    {      url: 'https://b.host.com/a_base_route/**',      ca: [],      certs: [        {          pfx: '/home/tester/certs/cert.pfx',          passphrase: '/home/tester/certs/pfx-passphrase.txt',        },      ],    },    {      url: 'https://a.host.*.com/',      ca: [],      certs: [        {          pfx: 'certs/cert.pfx',          passphrase: 'certs/pfx-passphrase.txt',        },      ],    },  ],})\n```",
  "title": "Client Certificates | Cypress Documentation",
  "description": "Configure certificate authority (CA) and client certificates to use within tests",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/getting-started/opening-the-app",
  "markdown": "# Open the App with Cypress: Step-by-Step Guide\n\n## Opening the App\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to start Cypress from the command line\n*   How to start your testing journey with the Launchpad\n*   How to choose a testing type\n*   How to launch a browser\n\nYou can open Cypress from your **project root** using one of the following commands, depending on the package manager (npm, Yarn or pnpm) you are using:\n\n*   npm\n*   Yarn\n*   pnpm\n\nAfter a moment, the Cypress Launchpad will open.\n\n### Adding npm Scripts[​](#Adding-npm-Scripts \"Direct link to Adding npm Scripts\")\n\nWhile there's nothing wrong with writing out the full path to the Cypress executable each time, it's much easier and clearer to add Cypress commands to the `scripts` field in your `package.json` file.\n\n```\n{  \"scripts\": {    \"cy:open\": \"cypress open\"  }}\n```\n\nNow you can invoke the command from your project root like so:\n\n...and Cypress will open right up for you.\n\ncaution\n\n**Best Practice**\n\nDon't use `cypress` as the exact name of a script, especially if you use Yarn as package manager. When running commands on the Cypress binary (e.g. `yarn cypress verify`), Yarn will reference the script of the same name instead and [Cypress CLI commands](https://docs.cypress.io/guides/guides/command-line) may not work as expected. Use instead a descriptive and non-ambiguous script name such as `cy:open` or `cy:run`.\n\n### CLI tools[​](#CLI-tools \"Direct link to CLI tools\")\n\nBy installing Cypress through `npm` you also get access to many other CLI commands. On top of that, Cypress is also a fully baked JavaScript library you can import into your Node scripts.\n\nYou can [read more about the CLI here](https://docs.cypress.io/guides/guides/command-line).\n\n## The Launchpad[​](#The-Launchpad \"Direct link to The Launchpad\")\n\n![The Launchpad window](https://docs.cypress.io/img/guides/core-concepts/cypress-app/the-launchpad.png)\n\nOn opening Cypress, your testing journey begins with the Launchpad. Its job is to guide you through the decisions and configuration tasks you need to complete before you start writing your first test.\n\nIf this is your first time using Cypress it will take you through the following steps in order.\n\n### Choosing a Testing Type[​](#Choosing-a-Testing-Type \"Direct link to Choosing a Testing Type\")\n\n![The Launchpad test type selector](https://docs.cypress.io/img/guides/getting-started/opening-the-app/choose-testing-type.png)\n\nThe Launchpad presents you with your biggest decision first: What type of testing shall I do? [E2E Testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing), where I run my whole application and visit pages to test them? Or [Component Testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing), where I mount individual components of my app and test them in isolation?\n\nFor more background on this critical decision, read [Testing Types](https://docs.cypress.io/guides/core-concepts/testing-types). Alternatively, if you're not sure which type you want and just want to get on with your testing journey, just choose **E2E** for now - you can always change this later!\n\n### Quick Configuration[​](#Quick-Configuration \"Direct link to Quick Configuration\")\n\n![The Launchpad scaffolded files list](https://docs.cypress.io/img/guides/getting-started/opening-the-app/scaffolded-files.png)\n\nOn the next step, the Launchpad will scaffold out a set of configuration files appropriate to your chosen testing type, and the changes will be listed for you to review. For more information about the generated config check out the [Cypress configuration reference](https://docs.cypress.io/guides/references/configuration), or you can just scroll down and hit \"Continue\".\n\n### Launching a Browser[​](#Launching-a-Browser \"Direct link to Launching a Browser\")\n\n![The Launchpad browser selector](https://docs.cypress.io/img/guides/getting-started/opening-the-app/select-browser.png)\n\nLastly, you're presented with the list of compatible browsers Cypress found on your system. To understand more about your options here, see [our guide on launching browsers](https://docs.cypress.io/guides/guides/launching-browsers). Again, don't sweat it, you can switch browsers whenever you want. Now **MASH THAT START BUTTON!**\n\n## Next Steps[​](#Next-Steps \"Direct link to Next Steps\")\n\nTime to get testing! If you chose [to start with E2E Testing, go here](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test). Alternatively, if you decided [to try Component Testing, go here](https://docs.cypress.io/guides/component-testing/overview).",
  "title": "Open the App with Cypress: Step-by-Step Guide | Cypress Documentation",
  "description": "Open the app effectively in Cypress. Get started with a guide on opening the application for testing and improve your workflow",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test",
  "markdown": "# End-to-End Testing: Your First Test with Cypress\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to start testing a new project in Cypress.\n*   What passing and failing tests look like.\n*   Testing web navigation, DOM querying, and writing assertions.\n\n## Add a test file[​](#Add-a-test-file \"Direct link to Add a test file\")\n\nAssuming you've successfully [installed Cypress](https://docs.cypress.io/guides/getting-started/installing-cypress) and [opened Cypress](https://docs.cypress.io/guides/getting-started/opening-the-app), now it's time to add your first test. We're going to do this with the **Create new empty spec** button.\n\n![Cypress with the Create new empty spec button highlighted](https://docs.cypress.io/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/create-new-spec.png)\n\nOn clicking it, you should see a dialog where you can enter the name of your new spec. Just accept the default name for now.\n\n![The new spec path dialog](https://docs.cypress.io/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/enter-path-for-new-spec.png)\n\nThe newly-generated spec is displayed in a confirmation dialog. Just go ahead and close it with the ✕ button.\n\n![The new spec confirmation dialog](https://docs.cypress.io/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/new-spec-added-confirmation.png)\n\nOnce we've created that file, you should see it immediately displayed in the list of end-to-end specs. Cypress monitors your spec files for any changes and automatically displays any changes.\n\n![Cypress showing the spec list with the newly created spec](https://docs.cypress.io/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/spec-list-with-new-spec.png)\n\nEven though we haven't written any code yet - that's okay - let's click on your new spec and watch Cypress launch it. Cypress with visit `https://example.cypress.io` and the test passes.\n\n![Cypress showing the newly created spec passing](https://docs.cypress.io/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/new-spec-test-run.png)\n\n## Write your first test[​](#Write-your-first-test \"Direct link to Write your first test\")\n\nNow it's time to write your first test. We're going to:\n\n1.  Write your first passing test.\n2.  Update it so it fails.\n3.  Watch Cypress reload in real time.\n\nOpen up your favorite IDE and replace the contents of your spec with the code below.\n\n```\ndescribe('My First Test', () => {  it('Does not do much!', () => {    expect(true).to.equal(true)  })})\n```\n\nOnce you save this change you should see the browser reload.\n\nAlthough it doesn't do anything useful, this is our first passing test! ✅\n\nOver in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) you'll see Cypress display the suite, the test and your first assertion (which should be passing in green).\n\n![My first test shown passing in Cypress](https://docs.cypress.io/img/guides/getting-started/e2e/v10/first-test.png)\n\ninfo\n\nNotice Cypress displays a message about this being the default page [on the righthand side](https://docs.cypress.io/guides/core-concepts/cypress-app#Application-Under-Test). Cypress assumes you'll want to go out and [visit](https://docs.cypress.io/api/commands/visit) a URL on the internet - but it can also work just fine without that.\n\nNow let's write our first failing test.\n\n```\ndescribe('My First Test', () => {  it('Does not do much!', () => {    expect(true).to.equal(false)  })})\n```\n\nOnce you save again, you'll see Cypress display the failing test in red since `true` does not equal `false`.\n\nCypress also displays the stack trace and the code frame where the assertion failed (when available). You can click on the blue file link to open the file where the error occurred in [your preferred file opener](https://docs.cypress.io/guides/tooling/IDE-integration#File-Opener-Preference). To read more about the error's display, read about [Debugging Errors](https://docs.cypress.io/guides/guides/debugging#Errors).\n\n![Failing test](https://docs.cypress.io/img/guides/getting-started/e2e/v10/first-test-failing.png)\n\n[Cypress](https://docs.cypress.io/guides/core-concepts/cypress-app) gives you a visual structure of suites, tests, and assertions. Soon you'll also see commands, page events, network requests, and more.\n\ninfo\n\n**What are _describe_, _it_, and _expect_ ?**\n\nAll of these functions come from [Bundled Libraries](https://docs.cypress.io/guides/references/bundled-libraries) that Cypress bakes in.\n\n*   `describe` and `it` come from [Mocha](https://mochajs.org/)\n*   `expect` comes from [Chai](http://www.chaijs.com/)\n\nCypress builds on these popular tools and frameworks that you _hopefully_ already have some familiarity and knowledge of. If not, that's okay too.\n\n## Write a _real_ test[​](#Write-a-real-test \"Direct link to Write-a-real-test\")\n\n**A solid test generally covers 3 phases:**\n\n1.  Set up the application state.\n2.  Take an action.\n3.  Make an assertion about the resulting application state.\n\nYou might also see this phrased as \"Given, When, Then\", or \"Arrange, Act, Assert\". But the idea is: First you put the application into a specific state, then you take some action in the application that causes it to change, and finally you check the resulting application state.\n\nToday, we'll take a narrow view of these steps and map them cleanly to Cypress commands:\n\n1.  Visit a web page.\n2.  Query for an element.\n3.  Interact with that element.\n4.  Assert about the content on the page.\n\n### Step 1: Visit a page[​](#Step-1-Visit-a-page \"Direct link to Step-1-Visit-a-page\")\n\nFirst, let's visit a web page. We will visit our [Kitchen Sink](https://docs.cypress.io/examples/applications#Kitchen-Sink) application in this example so that you can try Cypress out without needing to worry about finding a page to test.\n\nWe can pass the URL we want to visit to [`cy.visit()`](https://docs.cypress.io/api/commands/visit). Let's replace our previous test with the one below that actually visits a page:\n\n```\ndescribe('My First Test', () => {  it('Visits the Kitchen Sink', () => {    cy.visit('https://example.cypress.io')  })})\n```\n\nSave the file and switch back over to the Cypress Test Runner. You might notice a few things:\n\n1.  The [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) now shows the new `VISIT` action.\n2.  The Kitchen Sink application has been loaded into the [App Preview](https://docs.cypress.io/guides/core-concepts/cypress-app#Overview) pane.\n3.  The test is green, even though we made no assertions.\n4.  The `VISIT` displays a **blue pending state** until the page finishes loading.\n\nHad this request come back with a non `2xx` status code such as `404` or `500`, or if there was a JavaScript error in the application's code, the test would have failed.\n\ndanger\n\n**Testing Apps You Don't Control**\n\nIn this guide we are testing our example application: [`https://example.cypress.io`](https://example.cypress.io/). However you should think carefully about testing applications you **don't control**. Why?\n\n*   They have the potential to change at any moment which will break tests.\n*   They may do A/B testing which makes it impossible to get consistent results.\n*   They may detect you are a script and block your access.\n*   They may have security features enabled which prevent Cypress from working.\n\nGenerally speaking, the point of Cypress is to be a tool you use every day to build and test your own applications, not a general purpose web automation tool. However, this is a guideline rather than a hard-and-fast rule and there are a number of good reasons to make exceptions for certain kinds of application:\n\n*   They are specifically designed to integrate with third parties, e.g. SSO providers.\n*   They provide you with a complementary service, e.g. SaaS control panels or analytics.\n*   They reuse your content or provide plugins for an app you control.\n\nThe key here is to carefully weigh the benefits of the tests in question against the possible disruption and flake these sorts of tests can introduce.\n\n### Step 2: Query for an element[​](#Step-2-Query-for-an-element \"Direct link to Step-2-Query-for-an-element\")\n\nNow that we've got a page loaded, we need to take some action on it. Why don't we click a link on the page? Sounds easy enough, let's go look for one we like... how about `type`?\n\nTo find this element by its contents, we'll use [cy.contains()](https://docs.cypress.io/api/commands/contains).\n\nLet's add it to our test and see what happens:\n\n```\ndescribe('My First Test', () => {  it('finds the content \"type\"', () => {    cy.visit('https://example.cypress.io')    cy.contains('type')  })})\n```\n\nOur test should now display `CONTAINS` in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) and still be green.\n\nEven without adding an assertion, we know that everything is okay! This is because many of Cypress' commands are built to fail if they don't find what they're expecting to find. This is known as an [Implicit Assertion](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Implicit-Assertions).\n\nTo verify this, replace `type` with something not on the page, like `hype`. You'll notice the test goes red, but only after about 4 seconds!\n\nCan you see what Cypress is doing under the hood? It's automatically waiting and retrying because it expects the content to **eventually** be found in the DOM. It doesn't immediately fail!\n\n![Test failing to not find content 'hype'](https://docs.cypress.io/img/guides/getting-started/e2e/v10/first-test-failing-contains.png)\n\ncaution\n\n**Error Messages**\n\nWe've taken care at Cypress to write hundreds of custom error messages that attempt to clearly explain what went wrong. In this case, Cypress **timed out retrying** to find the content `hype` within the entire page. To read more about the error's display, read about [Debugging Errors](https://docs.cypress.io/guides/guides/debugging#Errors).\n\nBefore we add another command - let's get this test back to passing. Replace `hype` with `type`.\n\n### Step 3: Click an element[​](#Step-3-Click-an-element \"Direct link to Step-3-Click-an-element\")\n\nOk, now we want to click on the link we found. How do we do that? Add a [.click()](https://docs.cypress.io/api/commands/click) command to the end of the previous command, like so:\n\n```\ndescribe('My First Test', () => {  it('clicks the link \"type\"', () => {    cy.visit('https://example.cypress.io')    cy.contains('type').click()  })})\n```\n\nYou can almost read it like a little story! Cypress calls this \"chaining\" and we chain together commands to build tests that really express what the app does in a declarative way.\n\nAlso note that the [App Preview](https://docs.cypress.io/guides/core-concepts/cypress-app#Overview) pane has updated further after the click, following the link and showing the destination page:\n\nNow we can assert something about this new page!\n\ninfo\n\n✨ IntelliSense is available in your Cypress spec files by adding a special triple slash comment line. Read about [Intelligent Code Completion](https://docs.cypress.io/guides/tooling/IDE-integration#Triple-slash-directives).\n\n### Step 4: Make an assertion[​](#Step-4-Make-an-assertion \"Direct link to Step-4-Make-an-assertion\")\n\nLet's make an assertion about something on the new page we clicked into. Perhaps we'd like to make sure the new URL is the expected URL. We can do that by looking up the URL and chaining an assertion to it with [.should()](https://docs.cypress.io/api/commands/should).\n\nHere's what that looks like:\n\n```\ndescribe('My First Test', () => {  it('clicking \"type\" navigates to a new url', () => {    cy.visit('https://example.cypress.io')    cy.contains('type').click()    // Should be on a new URL which    // includes '/commands/actions'    cy.url().should('include', '/commands/actions')  })})\n```\n\n#### Adding more commands and assertions[​](#Adding-more-commands-and-assertions \"Direct link to Adding more commands and assertions\")\n\nWe are not limited to a single interaction and assertion in a given test. In fact, many interactions in an application may require multiple steps and are likely to change your application state in more than one way.\n\nWe can continue the interactions and assertions in this test by adding another chain to interact with and verify the behavior of elements on this new page.\n\nWe can use [cy.get()](https://docs.cypress.io/api/commands/get) to select an element based on its class. Then we can use the [.type()](https://docs.cypress.io/api/commands/type) command to enter text into the selected input. Finally, we can verify that the value of the input reflects the text that was typed with another [.should()](https://docs.cypress.io/api/commands/should).\n\nIn general, the structure of your test should flow query -> query -> command or assertion(s). It's best practice not to chain anything after an action command; for more details on why this is, see our guide on [retry-ability](https://docs.cypress.io/guides/core-concepts/retry-ability).\n\n```\ndescribe('My First Test', () => {  it('Gets, types and asserts', () => {    cy.visit('https://example.cypress.io')    cy.contains('type').click()    // Should be on a new URL which    // includes '/commands/actions'    cy.url().should('include', '/commands/actions')    // Get an input, type into it    cy.get('.action-email').type('[email protected]')    //  Verify that the value has been updated    cy.get('.action-email').should('have.value', '[email protected]')  })})\n```\n\ncaution\n\nWe normally don't suggest selecting and finding elements by their class names, but we do so here since we are querying an external site, and sometimes that is all we have to work with.\n\nFor more information on our guidance on selector best practices, see our guide on it [here](https://docs.cypress.io/guides/references/best-practices#Selecting-Elements).\n\nAnd there you have it: a short test in Cypress that visits a page, finds and clicks a link, verifies the URL and then verifies the behavior of an element on the new page. If we read it out loud, it might sound like:\n\nnote\n\n1.  _Visit: `https://example.cypress.io`_\n2.  _Find the element with content: `type`_\n3.  _Click on it_\n4.  _Get the URL_\n5.  _Assert it includes: `/commands/actions`_\n6.  _Get the input with the `action-email` class_\n7.  _Type `[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)` into the input_\n8.  _Assert the input reflects the new value_\n\nOr in the _Given_, _When_, _Then_ syntax:\n\nnote\n\n1.  _**Given** a user visits `https://example.cypress.io`_\n2.  _**When** they click the link labeled `type`_\n3.  _And they type \"[\\[email protected\\]](https://docs.cypress.io/cdn-cgi/l/email-protection#5630373d3316333b373f3a7835393b)\" into the input that has a class of `action-email` input_\n4.  _**Then** the URL should include `/commands/actions`_\n5.  _And the `[data-testid=\"action-email\"]` input has \"[\\[email protected\\]](https://docs.cypress.io/cdn-cgi/l/email-protection#096f68626c496c64686065276a6664)\" as its value_\n\nAnd hey, this is a very clean test! We didn't have to say anything about _how_ things work, just that we'd like to verify a particular series of events and outcomes.\n\ninfo\n\n**Page Transitions**\n\nWorth noting is that this test transitioned across two different pages.\n\n1.  The initial [cy.visit()](https://docs.cypress.io/api/commands/visit)\n2.  The [.click()](https://docs.cypress.io/api/commands/click) to a new page\n\nCypress automatically detects things like a `page transition event` and will automatically **halt** running commands until the next page has **finished** loading.\n\nHad the **next page** not finished its loading phase, Cypress would have ended the test and presented an error.\n\nUnder the hood - this means you don't have to worry about commands accidentally running against a stale page, nor do you have to worry about running commands against a partially loaded page.\n\nWe mentioned previously that Cypress waited **4 seconds** before timing out finding a DOM element - but in this case, when Cypress detects a `page transition event` it automatically increases the timeout to **60 seconds** for the single `PAGE LOAD` event.\n\nIn other words, based on the commands and the events happening, Cypress automatically alters its expected timeouts to match web application behavior.\n\nThese various timeouts are defined in the [Configuration](https://docs.cypress.io/guides/references/configuration#Timeouts) document.\n\n## Record Tests with Cypress Studio[​](#Record-Tests-with-Cypress-Studio \"Direct link to Record Tests with Cypress Studio\")\n\nIf you want a minimal code approach to creating tests, you can use [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) to record your browser interactions and generate tests. Visit our [guide](https://docs.cypress.io/guides/references/cypress-studio) for more information.\n\n## Next steps[​](#Next-steps \"Direct link to Next steps\")\n\n*   Take our free [Testing your first application](https://learn.cypress.io/testing-your-first-application) course.\n*   Learn more about the [Cypress App](https://docs.cypress.io/guides/core-concepts/cypress-app) UI.\n*   Start [testing your app](https://docs.cypress.io/guides/end-to-end-testing/testing-your-app).\n*   Set up [intelligent code completion](https://docs.cypress.io/guides/tooling/IDE-integration#Intelligent-Code-Completion) for Cypress commands and assertions.\n*   Record your test results to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) for advanced features like parallelization, flake detection, and more.\n*   Check out the [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) for practical demonstrations of Cypress testing practices, configuration, and strategies in a real-world project.\n*   Search Cypress's documentation to quickly find what you need.\n\n![Use the search box to find relevant documentation](https://docs.cypress.io/img/guides/getting-started/e2e/search-box.png)",
  "title": "End-to-End Testing: Your First Test with Cypress | Cypress Documentation",
  "description": "Dive into Cypress end-to-end testing with a guide on writing your first test. Learn step-by-step, best practices, and tips for efficient test creation",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/configuration",
  "markdown": "# Configuration | Cypress Documentation\n\ncaution\n\nThis guide is for Cypress 10+ and the new JavaScript configuration file format.\n\nIf you are on an older version of Cypress that uses `cypress.json`, please see the [legacy configuration](https://docs.cypress.io/guides/references/legacy-configuration) guide.\n\nFor more info on upgrading configuration to Cypress 10, see the [migration guide](https://docs.cypress.io/guides/references/migration-guide#Migrating-to-Cypress-100).\n\nLaunching Cypress for the first time, you will be guided through a wizard that will create a Cypress configuration file for you. This file will be `cypress.config.js` for JavaScript apps or `cypress.config.ts` for [TypeScript](https://docs.cypress.io/guides/tooling/typescript-support) apps. This file is used to store any configuration specific to Cypress.\n\nCypress additionally supports config files with `.mjs` or `.cjs` extensions.\n\nUsing a `.mjs` file will allow you to use [ESM Module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) syntax in your config without the need of a transpiler step.\n\nA '.cjs' file uses the [CommonJS](https://nodejs.org/api/modules.html) module syntax, which is the default for JavaScript files. All JavaScript config examples in our docs use the CommonJS format.\n\nIf you [configure your tests to record](https://docs.cypress.io/guides/cloud/getting-started#Setup) the results to [Cypress Cloud](https://on.cypress.io/cloud-introduction) the `projectId` will be stored in the config file as well.\n\n## Intelligent Code Completion[​](#Intelligent-Code-Completion \"Direct link to Intelligent Code Completion\")\n\nThe `defineConfig` helper function is exported by Cypress, and it provides automatic code completion for configuration in many popular code editors. While it's not strictly necessary for Cypress to parse your configuration, we recommend wrapping your config object with `defineConfig()` like this:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    baseUrl: 'http://localhost:1234',  },})\n```\n\n## Options[​](#Options \"Direct link to Options\")\n\nThe default behavior of Cypress can be modified by supplying any of the following configuration options. Below is a list of available options and their default values.\n\n### Global[​](#Global \"Direct link to Global\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `clientCertificates` | `[]` | An optional array of [client certificates](https://docs.cypress.io/guides/references/client-certificates). |\n| `env` | `{}` | Any values to be set as [environment variables](https://docs.cypress.io/guides/guides/environment-variables). |\n| `includeShadowDom` | `false` | Whether to traverse shadow DOM boundaries and include elements within the shadow DOM in the results of query commands (e.g. [`cy.get()`](https://docs.cypress.io/api/commands/get)). |\n| `numTestsKeptInMemory` | Default based on `run` or `open` mode | The number of tests for which snapshots and command data are kept in memory. `numTestsKeptInMemory` is set to `50` by default during `cypress open` and set to `0` by default during `cypress run`. Reduce this number if you are experiencing high memory consumption in your browser during a test run. |\n| `port` | `null` | Port used to host Cypress. Normally this is a randomly generated port. |\n| `redirectionLimit` | `20` | The number of times that the application under test can redirect before erroring. |\n| `reporter` | `spec` | The [reporter](https://docs.cypress.io/guides/tooling/reporters) used during `cypress run`. |\n| `reporterOptions` | `null` | The [reporter options](https://docs.cypress.io/guides/tooling/reporters#Reporter-Options) used. Supported options depend on the reporter. |\n| `retries` | `{ \"runMode\": 0, \"openMode\": 0 }` | The number of times to retry a failing test. Can be configured to apply to `cypress run` or `cypress open` separately. As of Cypress `13.4.0`, the experimental Flake Detection strategy can also be configured. See [Test Retries](https://docs.cypress.io/guides/guides/test-retries) for more information. |\n| `watchForFileChanges` | Default based on `run` or `open` mode | Whether Cypress will watch and restart tests on test file changes. `watchForFileChanges` is set to `true` by default during `cypress open` and set to `false` by default during `cypress run`. |\n\n### Timeouts[​](#Timeouts \"Direct link to Timeouts\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `defaultCommandTimeout` | `4000` | Time, in milliseconds, to wait until most DOM based commands are considered timed out. |\n| `execTimeout` | `60000` | Time, in milliseconds, to wait for a system command to finish executing during a [`cy.exec()`](https://docs.cypress.io/api/commands/exec) command. |\n| `taskTimeout` | `60000` | Time, in milliseconds, to wait for a task to finish executing during a [`cy.task()`](https://docs.cypress.io/api/commands/task) command. |\n| `pageLoadTimeout` | `60000` | Time, in milliseconds, to wait for `page transition events` or [`cy.visit()`](https://docs.cypress.io/api/commands/visit), [`cy.go()`](https://docs.cypress.io/api/commands/go), [`cy.reload()`](https://docs.cypress.io/api/commands/reload) commands to fire their page `load` events. Network requests are limited by the underlying operating system, and may still time out if this value is increased. |\n| `requestTimeout` | `5000` | Time, in milliseconds, to wait for a request to go out in a [`cy.wait()`](https://docs.cypress.io/api/commands/wait) command. |\n| `responseTimeout` | `30000` | Time, in milliseconds, to wait until a response in a [`cy.request()`](https://docs.cypress.io/api/commands/request), [`cy.wait()`](https://docs.cypress.io/api/commands/wait), [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture), [`cy.getCookie()`](https://docs.cypress.io/api/commands/getcookie), [`cy.getCookies()`](https://docs.cypress.io/api/commands/getcookies), [`cy.setCookie()`](https://docs.cypress.io/api/commands/setcookie), [`cy.clearCookie()`](https://docs.cypress.io/api/commands/clearcookie), [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies), and [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) commands. |\n\n### Folders / Files[​](#Folders--Files \"Direct link to Folders / Files\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `downloadsFolder` | `cypress/downloads` | Path to folder where files downloaded during a test are saved. |\n| `fileServerFolder` | root project folder | Path to folder where application files will attempt to be served from. |\n| `fixturesFolder` | `cypress/fixtures` | Path to folder containing fixture files (Pass `false` to disable). |\n| `screenshotsFolder` | `cypress/screenshots` | Path to folder where screenshots will be saved from [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) command or after a test fails during `cypress run`. |\n| `videosFolder` | `cypress/videos` | Path to folder where videos will be saved during `cypress run`. |\n\n### Screenshots[​](#Screenshots \"Direct link to Screenshots\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `screenshotOnRunFailure` | `true` | Whether Cypress will take a screenshot when a test fails during `cypress run`. |\n| `screenshotsFolder` | `cypress/screenshots` | Path to folder where screenshots will be saved from [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) command or after a test fails during `cypress run`. |\n| `trashAssetsBeforeRuns` | `true` | Whether Cypress will trash assets within the `downloadsFolder`, `screenshotsFolder`, and `videosFolder` before tests run with `cypress run`. |\n\nFor more options regarding screenshots, view the [Cypress.Screenshot API](https://docs.cypress.io/api/cypress-api/screenshot-api).\n\n### Videos[​](#Videos \"Direct link to Videos\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `trashAssetsBeforeRuns` | `true` | Whether Cypress will trash assets within the `downloadsFolder`, `screenshotsFolder`, and `videosFolder` before tests run with `cypress run`. |\n| `videoCompression` | `false` | The quality setting for the video compression, in Constant Rate Factor (CRF). The value can be `false` or `0` to disable compression or a CRF between `1` and `51`, where a lower value results in better quality (at the expense of a higher file size). Setting this option to `true` will result in a default CRF of `32`. |\n| `videosFolder` | `cypress/videos` | Where Cypress will automatically save the video of the test run when tests run with `cypress run`. |\n| `video` | `false` | Whether Cypress will capture a video of the tests run with `cypress run`. |\n\n### Downloads[​](#Downloads \"Direct link to Downloads\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `downloadsFolder` | `cypress/downloads` | Path to folder where files downloaded during a test are saved. |\n| `trashAssetsBeforeRuns` | `true` | Whether Cypress will trash assets within the `downloadsFolder`, `screenshotsFolder`, and `videosFolder` before tests run with `cypress run`. |\n\n### Browser[​](#Browser \"Direct link to Browser\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `chromeWebSecurity` | `true` | Whether to enable Chromium-based browser's Web Security for same-origin policy and insecure mixed content. |\n| `blockHosts` | `null` | A String or Array of hosts that you wish to block traffic for. [Please read the notes for examples on using this.](#blockHosts) |\n| `modifyObstructiveCode` | `true` | Whether Cypress will search for and replace obstructive JS code in `.js` or `.html` files. [Please read the notes for more information on this setting.](#modifyObstructiveCode) |\n| `userAgent` | `null` | Enables you to override the default user agent the browser sends in all request headers. User agent values are typically used by servers to help identify the operating system, browser, and browser version. See [User-Agent MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) for example user agent values. |\n\n### Viewport[​](#Viewport \"Direct link to Viewport\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `viewportHeight` | `660` | Default height in pixels for the application under tests' viewport. (Override with [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) command) |\n| `viewportWidth` | `1000` | Default width in pixels for the application under tests' viewport. (Override with [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) command) |\n\n### Actionability[​](#Actionability \"Direct link to Actionability\")\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `animationDistanceThreshold` | `5` | The distance in pixels an element must exceed over time to be considered animating. |\n| `waitForAnimations` | `true` | Whether to wait for elements to finish animating before executing commands. |\n| `scrollBehavior` | `top` | Viewport position to which an element should be scrolled before executing commands. Can be `'center'`, `'top'`, `'bottom'`, `'nearest'`, or `false`. `false` disables scrolling. |\n\nFor more information, see the docs on [actionability](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Actionability).\n\n### Experiments[​](#Experiments \"Direct link to Experiments\")\n\nConfiguration might include experimental options currently being tested. See [Experiments](https://docs.cypress.io/guides/references/experiments) page.\n\n## Testing Type-Specific Options[​](#Testing-Type-Specific-Options \"Direct link to Testing Type-Specific Options\")\n\nYou can provide configuration options for either E2E or Component Testing by creating `e2e` and `component` objects inside your Cypress configuration.\n\n### e2e[​](#e2e \"Direct link to e2e\")\n\nThese options are available to be specified inside the `e2e` configuration object:\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `baseUrl` | `null` | URL used as prefix for [`cy.visit()`](https://docs.cypress.io/api/commands/visit) or [`cy.request()`](https://docs.cypress.io/api/commands/request) command's URL. |\n| `setupNodeEvents` | `null` | Function in which node events can be registered and config can be modified. Takes the place of the (removed) pluginFile option. [Please read the notes for examples on using this.](#setupNodeEvents) |\n| `supportFile` | `cypress/support/e2e.{js,jsx,ts,tsx}` | Path to file to load before spec files load. This file is compiled and bundled. (Pass `false` to disable) |\n| `specPattern` | `cypress/e2e/**/*.cy.{js,jsx,ts,tsx}` | A String or Array of glob patterns of the test files to load. |\n| `excludeSpecPattern` | `*.hot-update.js` | A String or Array of glob patterns used to ignore test files that would otherwise be shown in your list of tests. [Please read the notes on using this.](#excludeSpecPattern) |\n| `experimentalRunAllSpecs` | `false` | Enables the \"Run All Specs\" UI feature, allowing the execution of multiple specs sequentially. |\n| `slowTestThreshold` | `10000` | Time, in milliseconds, to consider a test \"slow\" during `cypress run`. A slow test will display in orange text in the default reporter. |\n| `testIsolation` | `true` | Whether or not [test isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) is enabled to ensure a clean browser context between tests. |\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    // e2e options here  },})\n```\n\n### component[​](#component \"Direct link to component\")\n\nThese options are available to be specified inside the `component` configuration object:\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `devServer` | `null` | Required option used to configure the component testing dev server. [Please read the notes for examples on using this.](#devServer) |\n| `indexHtmlFile` | `cypress/support/component-index.html` | This is where Cypress renders your components and allows you to add in global assets, such as styles, fonts, and external scripts. |\n| `setupNodeEvents` | `null` | Function in which node events can be registered and config can be modified. Takes the place of the (removed) plugins file. [Please read the notes for examples on using this.](#setupNodeEvents) |\n| `supportFile` | `cypress/support/component.js` | Path to file to load before spec files load. This file is compiled and bundled. (Pass `false` to disable) |\n| `specPattern` | `**/*.cy.{js,jsx,ts,tsx}` | A glob pattern String or Array of glob pattern Strings of the spec files to load.<br><br>Note that any files found matching the `e2e.specPattern` value will be automatically **excluded.** |\n| `excludeSpecPattern` | `['/snapshots/*', '/image_snapshots/*']` | A String or Array of glob patterns used to ignore spec files that would otherwise be shown in your list of specs. [Please read the notes on using this.](#excludeSpecPattern) |\n| `experimentalSingleTabRunMode` | `false` | Run all specs in a single tab, instead of creating a new tab per spec. This can improve run mode performance, but can impact spec isolation and reliability on large test suites. This experiment currently only applies to Component Testing. |\n| `slowTestThreshold` | `250` | Time, in milliseconds, to consider a test \"slow\" during `cypress run`. A slow test will display in orange text in the default reporter. |\n| `devServerPublicPathRoute` | `/__cypress/src` | The public path of the dev server in use. Use caution overriding the default value as it can have unintended consequences. See [Framework Configuration](https://docs.cypress.io/guides/component-testing/component-framework-configuration) or dev server specific documentation (in particular `@cypress/vite-dev-server`). |\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    // component options here  },})\n```\n\n## Overriding Options[​](#Overriding-Options \"Direct link to Overriding Options\")\n\nCypress gives you the option to dynamically alter configuration options. This is helpful when running Cypress in multiple environments and on multiple developer machines.\n\n### Overriding Individual Options[​](#Overriding-Individual-Options \"Direct link to Overriding Individual Options\")\n\nWhen running Cypress from the command line you can pass a `--config` flag to override individual config options.\n\nFor example, to override `viewportWidth` and `viewportHeight`, you can run:\n\n```\ncypress run --browser firefox --config viewportWidth=1280,viewportHeight=720\n```\n\n### Specifying an Alternative Config File[​](#Specifying-an-Alternative-Config-File \"Direct link to Specifying an Alternative Config File\")\n\nIn the Cypress CLI, you can change which config file Cypress will use with the [`--config-file`](https://docs.cypress.io/guides/guides/command-line#cypress-open-config-file-lt-configuration-file-gt) flag.\n\n```\ncypress run --config-file tests/cypress.config.js\n```\n\nSee the [Command Line](https://docs.cypress.io/guides/guides/command-line) guide for more examples.\n\n### Testing Type-Specific Overrides[​](#Testing-Type-Specific-Overrides \"Direct link to Testing Type-Specific Overrides\")\n\nIn addition to setting [Testing Type-Specific options](#Testing-Type-Specific-Options), you can override other configuration options for either the [E2E Testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing) or [Component Testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing).\n\nFor example:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // These settings apply everywhere unless overridden  defaultCommandTimeout: 5000,  viewportWidth: 1000,  viewportHeight: 600,  // Viewport settings overridden for component tests  component: {    viewportWidth: 500,    viewportHeight: 500,  },  // Command timeout overridden for E2E tests  e2e: {    defaultCommandTimeout: 10000,  },})\n```\n\n### Environment Variables[​](#Environment-Variables \"Direct link to Environment Variables\")\n\nConfiguration options can be overridden with [environment variables](https://docs.cypress.io/guides/guides/environment-variables). This is especially useful in [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction) or when working locally. This gives you the ability to change configuration options without modifying any code or build scripts.\n\nFor example, these enviroment variables in the command line will override any `viewportWidth` or `viewportHeight` options set in the Cypress configuration:\n\n```\nexport CYPRESS_VIEWPORT_WIDTH=800export CYPRESS_VIEWPORT_HEIGHT=600\n```\n\nSee the [Environment Variables](https://docs.cypress.io/guides/guides/environment-variables#Option-3-CYPRESS_) guide for more examples.\n\n## Test Configuration[​](#Test-Configuration \"Direct link to Test Configuration\")\n\nWe provide two options to override the configuration while your test are running, `Cypress.config()` and suite-specific or test-specific configuration overrides.\n\n⚠️ **Note:** The configuration values below are all writeable and **can be changed** via per test configuration. Any other configuration values are readonly and cannot be changed at run time.\n\n*   `animationDistanceThreshold`\n*   `baseUrl`\n*   `blockHosts`\n*   `defaultCommandTimeout`\n*   `env` **note:** Provided environment variables will be merged with current environment variables.\n*   `execTimeout`\n*   `includeShadowDom`\n*   `keystrokeDelay`\n*   `numTestsKeptInMemory`\n*   `pageLoadTimeout`\n*   `redirectionLimit`\n*   `requestTimeout`\n*   `responseTimeout`\n*   `retries`\n*   `screenshotOnRunFailure`\n*   `scrollBehavior`\n*   `slowTestThreshold`\n*   `taskTimeout`\n*   `testIsolation` - this option can only be overridden at the suite-specific override level\n*   `viewportHeight`\n*   `viewportWidth`\n*   `waitForAnimations`\n\n#### `Cypress.config()`[​](#Cypressconfig \"Direct link to Cypressconfig\")\n\nYou can also override configuration values within your test using [`Cypress.config()`](https://docs.cypress.io/api/cypress-api/config).\n\nThis changes the configuration _for the remaining execution of the current spec file_. The values will reset to the previous default values after the spec has complete.\n\n```\nCypress.config('pageLoadTimeout', 100000)Cypress.config('pageLoadTimeout') // => 100000\n```\n\n#### Test-specific Configuration[​](#Test-specific-Configuration \"Direct link to Test-specific Configuration\")\n\nTo apply specific Cypress [configuration](https://docs.cypress.io/guides/references/configuration) values to a suite or test, pass a configuration object to the test or suite function as the second argument.\n\nThe configuration values passed in will only take effect during the suite or test where they are set. The values will then reset to the previous default values after the suite or test is complete.\n\n##### Syntax[​](#Syntax \"Direct link to Syntax\")\n\n```\ndescribe(name, config, fn)context(name, config, fn)it(name, config, fn)specify(name, config, fn)\n```\n\n##### Suite configuration[​](#Suite-configuration \"Direct link to Suite configuration\")\n\nIf you want to target a suite of tests to run or be excluded when run in a specific browser, you can override the `browser` configuration within the suite configuration. The `browser` option accepts the same arguments as [`Cypress.isBrowser()`](https://docs.cypress.io/api/cypress-api/isbrowser).\n\nYou can configure the number of times to retries a suite of tests if they fail during `cypress run` and `cypress open` separately.\n\n```\ndescribe(  'login',  {    retries: {      runMode: 3,      openMode: 2,    },  },  () => {    it('should redirect unauthenticated user to sign-in page', () => {      // ...    })    it('allows user to login', () => {      // ...    })  })\n```\n\n##### Single test configuration[​](#Single-test-configuration \"Direct link to Single test configuration\")\n\nIf you want to target a test to run or be excluded when run in a specific browser, you can override the `browser` configuration within the test configuration. The `browser` option accepts the same arguments as [Cypress.isBrowser()](https://docs.cypress.io/api/cypress-api/isbrowser).\n\n```\nit('Show warning outside Chrome', { browser: '!chrome' }, () => {  cy.get('.browser-warning').should(    'contain',    'For optimal viewing, use Chrome browser'  )})\n```\n\n## Resolved Configuration[​](#Resolved-Configuration \"Direct link to Resolved Configuration\")\n\nWhen you open a Cypress project, expanding the Project Settings panel under **Settings** will display the resolved configuration to you. This helps you to understand and see where different values came from. Each set value is highlighted to show where the value has been set via the following ways:\n\n*   Default value\n*   [Cypress configuration file](https://docs.cypress.io/guides/references/configuration)\n*   The [Cypress environment file](https://docs.cypress.io/guides/guides/environment-variables#Option-2-cypressenvjson)\n*   System [environment variables](https://docs.cypress.io/guides/guides/environment-variables#Option-3-CYPRESS_)\n*   [Command Line arguments](https://docs.cypress.io/guides/guides/command-line)\n*   [setupNodeEvents](#setupNodeEvents)\n\n![See resolved configuration](https://docs.cypress.io/img/guides/configuration/v10/see-resolved-configuration.png)\n\n## Notes[​](#Notes \"Direct link to Notes\")\n\n### blockHosts[​](#blockHosts \"Direct link to blockHosts\")\n\nBy passing a string or array of strings you can block requests made to one or more hosts.\n\nTo block a host:\n\n*   ✅ Pass only the host\n*   ✅ Use wildcard `*` patterns\n*   ✅ Include the port other than `80` and `443`\n*   ❌ Do **NOT** include protocol: `http://` or `https://`\n\ninfo\n\nNot sure what a part of the URL a host is? [Use this guide as a reference.](https://nodejs.org/api/url.html#url_url_strings_and_url_objects)\n\nWhen blocking a host, we use [`minimatch`](https://docs.cypress.io/api/utilities/minimatch) to check the host. When in doubt you can test whether something matches yourself.\n\nGiven the following URLs:\n\n```\nhttps://www.google-analytics.com/ga.jshttp://localhost:1234/some/user.json\n```\n\nThis would match the following blocked hosts:\n\n```\nwww.google-analytics.com*.google-analytics.com*google-analytics.comlocalhost:1234\n```\n\nBecause `localhost:1234` uses a port other than `80` and `443` it **must be included**.\n\ncaution\n\n**Subdomains**\n\nBe cautious for URL's which have no subdomain.\n\nFor instance given a URL: `https://google.com/search?q=cypress`\n\n*   ✅ Matches `google.com`\n*   ✅ Matches `*google.com`\n*   ❌ Does NOT match `*.google.com`\n\nWhen Cypress blocks a request made to a matching host, it will automatically send a `503` status code. As a convenience it also sets a `x-cypress-matched-blocked-host` header so you can see which rule it matched.\n\n![Network tab of dev tools showing blocked host](https://docs.cypress.io/img/guides/references/v10/blocked-host.png)\n\n### devServer[​](#devServer \"Direct link to devServer\")\n\nThe `devServer` option is required for [`component`](#component) testing, and allows you to register a component testing dev server.\n\nTypically, you will specify a `framework` and `bundler` options in `devServer` for your framework and UI library like so:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer: {      framework: 'create-react-app',      bundler: 'webpack',    },  },})\n```\n\nSee [Framework Configuration](https://docs.cypress.io/guides/component-testing/component-framework-configuration) guide for more info on all the available `framework` and `bundler` options, as well as additional configuration options.\n\n#### Custom Dev Server[​](#Custom-Dev-Server \"Direct link to Custom Dev Server\")\n\nIt is possible to customize the devServer and provide your own function for custom or advanced setups.\n\nThe devServer function receives a `cypressConfig` argument:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer(cypressConfig) {      // return dev server instance or a promise that resolves to      // a dev server instance here    },  },})\n```\n\nSee the [Custom Dev Server](https://docs.cypress.io/guides/component-testing/component-framework-configuration) guide for more info.\n\n### excludeSpecPattern[​](#excludeSpecPattern \"Direct link to excludeSpecPattern\")\n\nCypress uses `minimatch` with the options: `{dot: true, matchBase: true}`. We suggest using [https://globster.xyz](https://globster.xyz/) to test what files would match.\n\nThe `**/node_modules/**` pattern is automatically added to `excludeSpecPattern`, and does not need to be specified (and can't be overridden). See [`e2e`](#e2e) or [`component`](#component) testing-specific options.\n\n### isInteractive[​](#isInteractive \"Direct link to isInteractive\")\n\nYou can open Cypress in the interactive mode via the `cypress open` command, and in run mode via the `cypress run` command. To detect the mode from your test code you can query the `isInteractive` property on [Cypress.config](https://docs.cypress.io/api/cypress-api/config).\n\n```\nif (Cypress.config('isInteractive')) {  // interactive \"cypress open\" mode!} else {  // \"cypress run\" mode}\n```\n\n### modifyObstructiveCode[​](#modifyObstructiveCode \"Direct link to modifyObstructiveCode\")\n\nWith this option enabled - Cypress will search through the response streams coming from your server on `.html` and `.js` files and replace code that matches patterns commonly found in framebusting.\n\nThese script patterns are antiquated and deprecated security techniques to prevent clickjacking and framebusting. They are a relic of the past and are no longer necessary in modern browsers. However many sites and applications still implement them.\n\nThese techniques prevent Cypress from working, and they can be safely removed without altering any of your application's behavior.\n\nCypress modifies these scripts at the network level, and therefore there is a tiny performance cost to search the response streams for these patterns.\n\nYou can turn this option off if the application or site you're testing **does not** implement these security measures. Additionally it's possible that the patterns we search for may accidentally rewrite valid JS code. If that's the case, please disable this option.\n\nDetails for `experimentalModifyObstructiveThirdPartyCode` can be found [here](https://docs.cypress.io/guides/guides/web-security#Modifying-Obstructive-Third-Party-Code).\n\n### setupNodeEvents[​](#setupNodeEvents \"Direct link to setupNodeEvents\")\n\nThe `setupNodeEvents` function allows you to tap into, modify, or extend the internal behavior of Cypress using the [`on`](https://docs.cypress.io/api/plugins/writing-a-plugin#on) and [`config`](https://docs.cypress.io/api/plugins/writing-a-plugin#config) arguments, and is valid as an [`e2e`](#e2e) or [`component`](#component) testing specific option.\n\ninfo\n\nThis function was added in Cypress version `10.0.0` to replace the deprecated [plugins file](https://docs.cypress.io/guides/references/legacy-configuration#Plugins).\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    setupNodeEvents(on, config) {      // e2e testing node events setup code    },  },  component: {    setupNodeEvents(on, config) {      // component testing node events setup code    },  },})\n```\n\nSee the [plugins guide](https://docs.cypress.io/guides/tooling/plugins-guide) for more information.\n\n## Common problems[​](#Common-problems \"Direct link to Common problems\")\n\n#### `baseUrl` is not set[​](#baseUrl-is-not-set \"Direct link to baseUrl-is-not-set\")\n\nMake sure you do not accidentally place the `baseUrl` config option into the `env` object. The following configuration is _incorrect_ and will not work:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // ⛔️ DOES NOT WORK  env: {    baseUrl: 'http://localhost:3030',    FOO: 'bar',  },})\n```\n\nSolution: place the `baseUrl` property outside the `env` object and inside the [e2e](https://docs.cypress.io/guides/references/configuration#e2e) testing-type specific object.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // ✅ THE CORRECT WAY  env: {    FOO: 'bar',  },  e2e: {    baseUrl: 'http://localhost:3030',  },})\n```\n\nYou can also find a few tips on setting the `baseUrl` in this [short video](https://www.youtube.com/watch?v=f5UaXuAc52c).\n\n#### Test files not found when using `spec` parameter[​](#Test-files-not-found-when-using-spec-parameter \"Direct link to Test-files-not-found-when-using-spec-parameter\")\n\nWhen using the `--spec <path or mask>` argument, make it relative to the project's folder. If the specs are still missing, run Cypress with [DEBUG logs](https://docs.cypress.io/guides/references/troubleshooting#Print-DEBUG-logs) with the following setting to see how Cypress is looking for spec files:\n\n```\nDEBUG=cypress:cli,cypress:server:specs\n```\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [13.4.0](https://docs.cypress.io/guides/references/changelog#13-4-0) | Added support for configuring the Experimental Flake Detection strategy via `retries.experimentalStrategy` and `retries.experimentalOptions`. |\n| [13.0.0](https://docs.cypress.io/guides/references/changelog#13-0-0) | Removed `nodeVersion` option. |\n| [13.0.0](https://docs.cypress.io/guides/references/changelog#13-0-0) | Removed `videoUploadOnPasses` option. |\n| [11.0.0](https://docs.cypress.io/guides/references/changelog#11-0-0) | Removed `e2e.experimentalSessionAndOrigin` option. |\n| [10.4.0](https://docs.cypress.io/guides/references/changelog#10-4-0) | Added `e2e.testIsolation` option. |\n| [10.0.0](https://docs.cypress.io/guides/references/changelog#10-0-0) | Reworked page to support new `cypress.config.js` and deprecated `cypress.json` files. |\n| [8.7.0](https://docs.cypress.io/guides/references/changelog#8-7-0) | Added `slowTestThreshold` option. |\n| [8.0.0](https://docs.cypress.io/guides/references/changelog#8-0-0) | Added `clientCertificates` option and removed `firefoxGcInterval` configuration. |\n| [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0) | Added `e2e` and `component` options. |\n| [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0) | Added `redirectionLimit` option. |\n| [6.1.0](https://docs.cypress.io/guides/references/changelog#6-1-0) | Added `scrollBehavior` option. |\n| [5.2.0](https://docs.cypress.io/guides/references/changelog#5-2-0) | Added `includeShadowDom` option. |\n| [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) | Added `retries` configuration. |\n| [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) | Renamed `blacklistHosts` configuration to `blockHosts`. |\n| [4.1.0](https://docs.cypress.io/guides/references/changelog#4-12-0) | Added `screenshotOnRunFailure` configuration. |\n| [4.0.0](https://docs.cypress.io/guides/references/changelog#4-0-0) | Added `firefoxGcInterval` configuration. |\n| [3.5.0](https://docs.cypress.io/guides/references/changelog#3-5-0) | Added `nodeVersion` configuration. |\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Cypress.config()](https://docs.cypress.io/api/cypress-api/config) and [Cypress.env()](https://docs.cypress.io/api/cypress-api/env)\n*   [Environment variables](https://docs.cypress.io/guides/guides/environment-variables)\n*   [Environment Variables recipe](https://docs.cypress.io/examples/recipes#Fundamentals)\n*   Blog post [Keep passwords secret in E2E tests](https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests/)",
  "title": "Configuration | Cypress Documentation",
  "description": "This guide is for Cypress 10+ and the new JavaScript configuration file format.",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/changelog",
  "markdown": "# Changelog | Cypress Documentation\n\n## 13.13.0[​](#13-13-0 \"Direct link to 13.13.0\")\n\n_Released 7/02/2024_\n\n**Performance:**\n\n*   Improved performance of `experimentalSourceRewriting` option. Fixed in [#29540](https://github.com/cypress-io/cypress/pull/29540).\n\n**Features:**\n\n*   Adds Signal support for Angular Component Testing versions 17.2 and up. Addresses [#29264](https://github.com/cypress-io/cypress/issues/29264).\n\n**Bugfixes:**\n\n*   Fixed an issue where Chrome launch instances would not recreate the browser CRI client correctly after recovering from an unexpected browser closure. Fixes [#27657](https://github.com/cypress-io/cypress/issues/27657). Fixed in [#29663](https://github.com/cypress-io/cypress/pull/29663).\n*   Fixed an issue where Firefox 129 (Firefox Nightly) would not launch with Cypress. Fixes [#29713](https://github.com/cypress-io/cypress/issues/29713). Fixed in [#29720](https://github.com/cypress-io/cypress/pull/29720).\n\n**Dependency Updates:**\n\n*   Updated `launch-editor` from `2.3.0` to `2.8.0`. Addressed in [#29770](https://github.com/cypress-io/cypress/pull/29770).\n*   Updated `memfs` from `3.4.12` to `3.5.3`. Addressed in [#29746](https://github.com/cypress-io/cypress/pull/29746).\n*   Updated `tmp` from `0.2.1` to `0.2.3`. Addresses [#29693](https://github.com/cypress-io/cypress/issues/29693).\n*   Updated `ws` from `5.2.3` to `5.2.4`. Addressed in [#29698](https://github.com/cypress-io/cypress/pull/29698).\n\n## 13.12.0[​](#13-12-0 \"Direct link to 13.12.0\")\n\n_Released 6/18/2024_\n\n**Features:**\n\n*   Added Component Testing support for Angular version 18. Addresses [#29309](https://github.com/cypress-io/cypress/issues/29309).\n\n**Bugfixes:**\n\n*   We now trigger `input` and `change` events when typing `{upArrow}` and `{downArrow}` via `.type()` on `input[type=number]` elements. Fixes [#29611](https://github.com/cypress-io/cypress/issues/29611).\n*   Fixed an issue where auto scrolling the reporter would sometimes be disabled without the user's intent. Fixes [#25084](https://github.com/cypress-io/cypress/issues/25084).\n*   Fixed an issue where `inlineSourceMaps` was still being used when `sourceMaps` was provided in a user's TypeScript config for TypeScript version 5. Fixes [#26203](https://github.com/cypress-io/cypress/issues/26203).\n*   When capture protocol script fails verification, an appropriate error is now displayed. Previously, an error regarding Test Replay archive location was shown. Addressed in [#29603](https://github.com/cypress-io/cypress/pull/29603).\n*   Fixed an issue where receiving HTTP responses with invalid headers raised an error. Now Cypress removes the invalid headers and gives a warning in the console with debug mode on. Fixes [#28865](https://github.com/cypress-io/cypress/issues/28865).\n\n**Misc:**\n\n*   Report afterSpec durations to Cloud API when running in record mode with Test Replay enabled. Addressed in [#29500](https://github.com/cypress-io/cypress/pull/29500).\n\n**Dependency Updates:**\n\n*   Updated firefox-profile from `4.3.1` to `4.6.0`. Addressed in [#29662](https://github.com/cypress-io/cypress/pull/29662).\n*   Updated typescript from `4.7.4` to `5.3.3`. Addressed in [#29568](https://github.com/cypress-io/cypress/pull/29568).\n*   Updated url-parse from `1.5.9` to `1.5.10`. Addressed in [#29650](https://github.com/cypress-io/cypress/pull/29650).\n\n## 13.11.0[​](#13-11-0 \"Direct link to 13.11.0\")\n\n_Released 6/4/2024_\n\n**Performance:**\n\n*   Improved performance when setting console props within `Cypress.log`. Addressed in [#29501](https://github.com/cypress-io/cypress/pull/29501).\n\n**Features:**\n\n*   Added support for [Next.js 14](https://nextjs.org/blog/next-14) for component testing. Addresses [#28185](https://github.com/cypress-io/cypress/issues/28185).\n*   Added an `IGNORE_CHROME_PREFERENCES` environment variable to ignore Chrome preferences when launching Chrome. Addresses [#29330](https://github.com/cypress-io/cypress/issues/29330).\n\n**Bugfixes:**\n\n*   Fixed a situation where the Launchpad would hang if the project config had not been loaded when the Launchpad first queries the current project. Fixes [#29486](https://github.com/cypress-io/cypress/issues/29486).\n*   Pre-emptively fix behavior with Chrome for when `unload` events are forcefully deprecated by using `pagehide` as a proxy. Fixes [#29241](https://github.com/cypress-io/cypress/issues/29241).\n\n**Misc:**\n\n*   Enhanced the type definitions available to [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) and [`cy.wait()`](https://docs.cypress.io/api/commands/wait). The `body` property of both the request and response in an interception can optionally be specified with user-defined types. Addresses [#29507](https://github.com/cypress-io/cypress/issues/29507).\n\n## 13.10.0[​](#13-10-0 \"Direct link to 13.10.0\")\n\n_Released 5/21/2024_\n\n**Features:**\n\n*   Added support for `vite` [`v5`](https://vitejs.dev/blog/announcing-vite5) to `@cypress/vite-dev-server`. Addresses [#28347](https://github.com/cypress-io/cypress/issues/28347).\n\n**Bugfixes:**\n\n*   Fixed an issue where orphaned Electron processes were inadvertently terminating the browser's CRI client. Fixes [#28397](https://github.com/cypress-io/cypress/issues/28397). Fixed in [#29515](https://github.com/cypress-io/cypress/pull/29515).\n*   Fixed an issue where Cypress would use the wrong URL to upload Test Replay recordings when it wasn't able to determine the upload URL. It now displays an error when the upload URL cannot be determined, rather than a \"Request Entity Too Large\" error. Addressed in [#29512](https://github.com/cypress-io/cypress/pull/29512).\n*   Fixed an issue where Cypress was unable to search in the Specs list for files or folders containing numbers. Fixes [#29034](https://github.com/cypress-io/cypress/issues/29034).\n*   Fixed an issue setting the `x-cypress-file-path` header when there are invalid header characters in the file path. Fixes [#25839](https://github.com/cypress-io/cypress/issues/25839).\n*   Fixed the display of some command assertions. Fixed in [#29517](https://github.com/cypress-io/cypress/pull/29517).\n\n**Dependency Updates:**\n\n*   Updated js-cookie from `2.2.1` to `3.0.5`. Addressed in [#29497](https://github.com/cypress-io/cypress/pull/29497).\n*   Updated randomstring from `1.1.5` to `1.3.0`. Addressed in [#29503](https://github.com/cypress-io/cypress/pull/29503).\n\n## 13.9.0[​](#13-9-0 \"Direct link to 13.9.0\")\n\n_Released 5/7/2024_\n\n**Features:**\n\n*   Added more descriptive error messages when Test Replay fails to record or upload. Addresses [#29022](https://github.com/cypress-io/cypress/issues/29022).\n\n**Bugfixes:**\n\n*   Fixed a bug where promises rejected with `undefined` were failing inside `cy.origin()`. Addresses [#23937](https://github.com/cypress-io/cypress/issues/23937).\n*   We now pass the same default Chromium flags to Electron as we do to Chrome. As a result of this change, the application under test's `navigator.webdriver` property will now correctly be `true` when testing in Electron. Fixes [#27939](https://github.com/cypress-io/cypress/issues/27939).\n*   Fixed network issues in requests using fetch for users where Cypress is run behind a proxy that performs HTTPS decryption (common among corporate proxies). Fixes [#29171](https://github.com/cypress-io/cypress/issues/29171).\n*   Fixed an issue where extra windows weren't being closed between specs in Firefox causing potential issues in subsequent specs. Fixes [#29473](https://github.com/cypress-io/cypress/issues/29473).\n\n**Misc:**\n\n*   Improved accessibility of the Cypress App in some areas. Addressed in [#29322](https://github.com/cypress-io/cypress/pull/29322).\n\n**Dependency Updates:**\n\n*   Updated electron from `27.1.3` to `27.3.10` to address [CVE-2024-3156](https://nvd.nist.gov/vuln/detail/CVE-2024-3156). Addressed in [#29431](https://github.com/cypress-io/cypress/pull/29431).\n\n## 13.8.1[​](#13-8-1 \"Direct link to 13.8.1\")\n\n_Released 4/23/2024_\n\n**Performance:**\n\n*   Fixed a performance issue with activated service workers that aren't controlling clients which could lead to correlation timeouts. Fixes [#29333](https://github.com/cypress-io/cypress/issues/29333) and [#29126](https://github.com/cypress-io/cypress/issues/29126).\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in [`13.6.0`](https://docs.cypress.io/guides/references/changelog#13-6-0) where Cypress would occasionally exit with status code 1, even when a test run was successful, due to an unhandled WebSocket exception (`Error: WebSocket connection closed`). Addresses [#28523](https://github.com/cypress-io/cypress/issues/28523).\n*   Fixed an issue where Cypress would hang on some commands when an invalid `timeout` option was provided. Fixes [#29323](https://github.com/cypress-io/cypress/issues/29323).\n\n**Misc:**\n\n*   `.its()` type now excludes null and undefined. Fixes [#28872](https://github.com/cypress-io/cypress/issues/28872).\n\n**Dependency Updates:**\n\n*   Updated zod from `3.20.3` to `3.22.5`. Addressed in [#29367](https://github.com/cypress-io/cypress/pull/29367).\n\n## 13.8.0[​](#13-8-0 \"Direct link to 13.8.0\")\n\n_Released 4/18/2024_\n\n**Features:**\n\n*   Added support for `webpack-dev-server` `v5` to `@cypress/webpack-dev-server`. Addresses [#29305](https://github.com/cypress-io/cypress/issues/29305).\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in [`13.7.3`](https://docs.cypress.io/guides/references/changelog#13-7-3) where Cypress could hang handling long assertion messages. Fixes [#29350](https://github.com/cypress-io/cypress/issues/29350).\n\n**Misc:**\n\n*   The [`SEMAPHORE_GIT_PR_NUMBER`](https://docs.semaphoreci.com/ci-cd-environment/environment-variables/#semaphore_git_pr_number) environment variable from [Semaphore](https://semaphoreci.com/) CI is now captured to display the linked PR number in the Cloud. Addressed in [#29314](https://github.com/cypress-io/cypress/pull/29314).\n\n## 13.7.3[​](#13-7-3 \"Direct link to 13.7.3\")\n\n_Released 4/11/2024_\n\n**Bugfixes:**\n\n*   Fixed an issue where asserts with custom messages weren't displaying properly. Fixes [#29167](https://github.com/cypress-io/cypress/issues/29167).\n*   Fixed an issue where Cypress launch arguments were not being escaped correctly with multiple values inside quotes. Fixes [#27454](https://github.com/cypress-io/cypress/issues/27454).\n\n**Misc:**\n\n*   Updated the Chrome flags to not show the \"Enhanced Ad Privacy\" dialog. Addresses [#29199](https://github.com/cypress-io/cypress/issues/29199).\n*   Suppresses benign warnings that reference Vulkan on GPU-less hosts. Addresses [#29085](https://github.com/cypress-io/cypress/issues/29085). Addressed in [#29278](https://github.com/cypress-io/cypress/pull/29278).\n\n## 13.7.2[​](#13-7-2 \"Direct link to 13.7.2\")\n\n_Released 4/2/2024_\n\n**Performance:**\n\n*   Improvements to Test Replay upload resiliency. Fixes [#28890](https://github.com/cypress-io/cypress/issues/28890). Addressed in [#29174](https://github.com/cypress-io/cypress/pull/29174).\n\n**Bugfixes:**\n\n*   Fixed an issue where Cypress was not executing beyond the first spec in `cypress run` for versions of Firefox 124 and up when a custom user agent was provided. Fixes [#29190](https://github.com/cypress-io/cypress/issues/29190).\n*   Fixed a bug where fields using arrays in `cypress.config` are not correctly processed. Fixes [#27103](https://github.com/cypress-io/cypress/issues/27103). Fixed in [#27312](https://github.com/cypress-io/cypress/pull/27312).\n*   Fixed a hang where Cypress would run indefinitely while recording to the cloud when CDP disconnects during the middle of a test. Fixes [#29209](https://github.com/cypress-io/cypress/issues/29209).\n*   Fixed a bug where option values containing quotation marks could not be selected. Fixes [#29213](https://github.com/cypress-io/cypress/issues/29213).\n\n**Dependency Updates:**\n\n*   Updated express from `4.17.3` to `4.19.2`. Addressed in [#29211](https://github.com/cypress-io/cypress/pull/29211).\n\n## 13.7.1[​](#13-7-1 \"Direct link to 13.7.1\")\n\n_Released 3/21/2024_\n\n**Bugfixes:**\n\n*   Fixed an issue where Cypress was not executing beyond the first spec in `cypress run` for versions of Firefox 124 and up. Fixes [#29172](https://github.com/cypress-io/cypress/issues/29172).\n*   Fixed an issue blurring shadow dom elements. Fixed in [#29125](https://github.com/cypress-io/cypress/pull/29125).\n\n**Dependency Updates:**\n\n*   Updated jose from `4.11.2` to `4.15.5`. Addressed in [#29086](https://github.com/cypress-io/cypress/pull/29086).\n\n## 13.7.0[​](#13-7-0 \"Direct link to 13.7.0\")\n\n_Released 3/13/2024_\n\n**Features:**\n\n*   Added shadow DOM snapshot support within Test Replay in order to highlight elements correctly within the Cypress reporter. Addressed in [#28823](https://github.com/cypress-io/cypress/pull/28823).\n*   Added TypeScript support for [Vue 2.7+](https://github.com/vuejs/vue/blob/main/CHANGELOG.md#270-2022-07-01). Addresses [#28591](https://github.com/cypress-io/cypress/issues/28591).\n*   Adds additional context to error messages displayed when Test Replay artifacts fail to upload. Addressed in [#28986](https://github.com/cypress-io/cypress/pull/28986).\n\n**Performance:**\n\n*   Fixed a performance regression from [`13.6.3`](https://docs.cypress.io/guides/references/changelog#13-6-3) where unhandled service worker requests may not correlate correctly. Fixes [#28868](https://github.com/cypress-io/cypress/issues/28868).\n*   Reduces the number of attempts to retry failed Test Replay artifact uploads from 8 to 3, to reduce time spent on artifact upload attempts that will not succeed. Addressed in [#28986](https://github.com/cypress-io/cypress/pull/28986).\n\n**Bugfixes:**\n\n*   Changed screenshot capture behavior in Chromium to activate the main Cypress tab before capturing. This prevents screenshot capture from timing out in certain situations. Fixed in [#29038](https://github.com/cypress-io/cypress/pull/29038). Fixes [#5016](https://github.com/cypress-io/cypress/issues/5016)\n*   Fixed an issue where `.click()` commands on children of disabled elements would still produce \"click\" events -- even without `{ force: true }`. Fixes [#28788](https://github.com/cypress-io/cypress/issues/28788).\n*   Changed RequestBody type to allow for boolean and null literals to be passed as body values. [#28789](https://github.com/cypress-io/cypress/issues/28789).\n\n**Misc:**\n\n*   Changed Component Testing scaffolding instruction to `pnpm add` to add framework dependencies when a project uses `pnpm` as package manager. Addresses [#29052](https://github.com/cypress-io/cypress/issues/29052).\n*   Command messages in the Cypress command logs will now truncate display at 100 lines instead of 50. Fixes [#29023](https://github.com/cypress-io/cypress/issues/29023).\n*   Capture the `beforeTest` timestamp inside the browser for the purposes of accurately determining test start for Test Replay. Addressed in [#29061](https://github.com/cypress-io/cypress/pull/29061).\n\n**Dependency Updates:**\n\n*   Updated [`jimp`](https://www.npmjs.com/package/jimp) from `0.14.0` to `0.22.12`. Addressed in [#29055](https://github.com/cypress-io/cypress/pull/29055).\n*   Updated [`http-proxy-middleware`](https://www.npmjs.com/package/http-proxy-middleware) from `2.0.4` to `2.0.6`. Addressed in [#28902](https://github.com/cypress-io/cypress/pull/28902).\n*   Updated [`signal-exit`](https://www.npmjs.com/package/signal-exit) from `3.0.3` to `3.0.7`. Addressed in [#28979](https://github.com/cypress-io/cypress/pull/28979).\n\n## 13.6.6[​](#13-6-6 \"Direct link to 13.6.6\")\n\n_Released 2/22/2024_\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in [`13.6.5`](https://docs.cypress.io/guides/references/changelog#13-6-5) where `cypress verify` would fail for [`nx`](https://nx.dev/) users. Fixes [#28982](https://github.com/cypress-io/cypress/issues/28982).\n\n## 13.6.5[​](#13-6-5 \"Direct link to 13.6.5\")\n\n_Released 2/20/2024_\n\n**Bugfixes:**\n\n*   Fixed tests hanging when the Chrome browser extension is disabled. Fixes [#28392](https://github.com/cypress-io/cypress/issues/28392).\n*   Fixed an issue which caused the browser to relaunch after closing the browser from the Launchpad. Fixes [#28852](https://github.com/cypress-io/cypress/issues/28852).\n*   Fixed an issue with the unzip promise never being rejected when an empty error happens. Fixed in [#28850](https://github.com/cypress-io/cypress/pull/28850).\n*   Fixed a regression introduced in [`13.6.3`](https://docs.cypress.io/guides/references/changelog#13-6-3) where Cypress could crash when processing service worker requests through our proxy. Fixes [#28950](https://github.com/cypress-io/cypress/issues/28950).\n*   Fixed incorrect type definition of `dom.getContainsSelector`. Fixed in [#28339](https://github.com/cypress-io/cypress/pull/28339).\n\n**Misc:**\n\n*   Improved accessibility of the Cypress App in some areas. Addressed in [#28774](https://github.com/cypress-io/cypress/pull/28774).\n*   Changed references of LayerCI to webapp.io. Addressed in [#28874](https://github.com/cypress-io/cypress/pull/28874).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` from `25.8.4` to `27.1.3`.\n*   Upgraded bundled Node.js version from `18.15.0` to `18.17.0`.\n*   Upgraded bundled Chromium version from `114.0.5735.289` to `118.0.5993.117`.\n*   Updated buffer from `5.6.0` to `5.7.1`. Addressed in [#28934](https://github.com/cypress-io/cypress/pull/28934).\n*   Updated [`duplexify`](https://www.npmjs.com/package/duplexify) from `4.1.1` to `4.1.2`. Addressed in [#28941](https://github.com/cypress-io/cypress/pull/28941).\n*   Updated [`is-ci`](https://www.npmjs.com/package/is-ci) from `3.0.0` to `3.0.1`. Addressed in [#28933](https://github.com/cypress-io/cypress/pull/28933).\n\n## 13.6.4[​](#13-6-4 \"Direct link to 13.6.4\")\n\n_Released 1/30/2024_\n\n**Performance:**\n\n*   Fixed a performance regression from [`13.3.2`](https://docs.cypress.io/guides/references/changelog#13-3-2) where aborted requests may not correlate correctly. Fixes [#28734](https://github.com/cypress-io/cypress/issues/28734).\n\n**Bugfixes:**\n\n*   Fixed an issue with capturing assets for Test Replay when service workers are registered in Cypress support files. This issue would cause styles to not render properly in Test Replay. Fixes [#28747](https://github.com/cypress-io/cypress/issues/28747).\n\n**Misc:**\n\n*   Added missing properties to the `Cypress.spec` interface for TypeScript users. Addresses [#27835](https://github.com/cypress-io/cypress/issues/27835).\n\n## 13.6.3[​](#13-6-3 \"Direct link to 13.6.3\")\n\n_Released 1/16/2024_\n\n**Bugfixes:**\n\n*   Force `moduleResolution` to `node` when TypeScript projects are detected to correctly run Cypress. This change should not have a large impact as `commonjs` is already forced when `ts-node` is registered. This fix does not impact the ESM TypeScript configuration loader. Fixes [#27731](https://github.com/cypress-io/cypress/issues/27731).\n*   No longer wait for additional frames when recording a video for a spec that was skipped by the Cloud due to Auto Cancellation. Fixes [#27898](https://github.com/cypress-io/cypress/issues/27898).\n*   Now `node_modules` will not be ignored if a project path or a provided path to spec files contains it. Fixes [#23616](https://github.com/cypress-io/cypress/issues/23616).\n*   Updated display of assertions and commands with a URL argument to escape markdown formatting so that values are displayed as is and assertion values display as bold. Fixes [#24960](https://github.com/cypress-io/cypress/issues/24960) and [#28100](https://github.com/cypress-io/cypress/issues/28100).\n*   When generating assertions via Cypress Studio, the preview of the generated assertions now correctly displays the past tense of 'expected' instead of 'expect'. Fixed in [#28593](https://github.com/cypress-io/cypress/pull/28593).\n*   Fixed a regression in [`13.6.2`](https://docs.cypress.io/guides/references/changelog#13-6-2) where the `body` element was not highlighted correctly in Test Replay. Fixed in [#28627](https://github.com/cypress-io/cypress/pull/28627).\n*   Correctly sync `Cypress.currentRetry` with secondary origin so test retries that leverage [`cy.origin()`](https://docs.cypress.io/api/commands/origin) render logs as expected. Fixes [#28574](https://github.com/cypress-io/cypress/issues/28574).\n*   Fixed an issue where some cross-origin logs, like assertions or cy.clock(), were getting too many dom snapshots. Fixes [#28609](https://github.com/cypress-io/cypress/issues/28609).\n*   Fixed asset capture for Test Replay for requests that are routed through service workers. This addresses an issue where styles were not being applied properly in Test Replay and [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) was not working properly for requests in this scenario. Fixes [#28516](https://github.com/cypress-io/cypress/issues/28516).\n*   Fixed an issue where visiting an `http://` site would result in an infinite reload/redirect loop in Chrome 114+. Fixes [#25891](https://github.com/cypress-io/cypress/issues/25891).\n*   Fixed an issue where requests made from extra tabs do not include their original headers. Fixes [#28641](https://github.com/cypress-io/cypress/issues/28641).\n*   Fixed an issue where [`cy.wait()`](https://docs.cypress.io/api/commands/wait) would sometimes throw an error reading a property of undefined when returning responses. Fixes [#28233](https://github.com/cypress-io/cypress/issues/28233).\n\n**Performance:**\n\n*   Fixed a performance regression from [`13.3.2`](https://docs.cypress.io/guides/references/changelog#13-3-2) where requests may not correlate correctly when test isolation is off. Fixes [#28545](https://github.com/cypress-io/cypress/issues/28545).\n\n**Dependency Updates:**\n\n*   Remove dependency on `@types/node` package. Addresses [#28473](https://github.com/cypress-io/cypress/issues/28473).\n*   Updated [`@cypress/unique-selector`](https://www.npmjs.com/package/@cypress/unique-selector) to include a performance optimization. It's possible this could improve performance of the selector playground. Addressed in [#28571](https://github.com/cypress-io/cypress/pull/28571).\n*   Replace [`CircularJSON`](https://www.npmjs.com/package/circular-json) with its successor [`flatted`](https://www.npmjs.com/package/flatted) version `3.2.9`. This resolves decoding issues observed in complex objects sent from the browser. Addressed in [#28683](https://github.com/cypress-io/cypress/pull/28683).\n*   Updated [`better-sqlite3`](https://www.npmjs.com/package/better-sqlite3) from `8.7.0` to `9.2.2` to fix macOS Catalina issues. Addresses [#28697](https://github.com/cypress-io/cypress/issues/28697).\n\n**Misc:**\n\n*   Improved accessibility of some areas of the Cypress App. Addressed in [#28628](https://github.com/cypress-io/cypress/pull/28628).\n*   Updated some documentation links to go through on.cypress.io. Addressed in [#28623](https://github.com/cypress-io/cypress/pull/28623).\n\n## 13.6.2[​](#13-6-2 \"Direct link to 13.6.2\")\n\n_Released 12/26/2023_\n\n**Bugfixes:**\n\n*   Fixed a regression in [`13.6.1`](https://docs.cypress.io/guides/references/changelog#13-6-1) where a malformed URI would crash Cypress. Fixes [#28521](https://github.com/cypress-io/cypress/issues/28521).\n*   Fixed a regression in [`12.4.0`](https://docs.cypress.io/guides/references/changelog#12-4-0) where erroneous `<br>` tags were displaying in error messages in the Command Log making them less readable. Fixes [#28452](https://github.com/cypress-io/cypress/issues/28452).\n\n**Performance:**\n\n*   Improved performance when finding unique selectors for command log snapshots for Test Replay. Addressed in [#28536](https://github.com/cypress-io/cypress/pull/28536).\n\n**Dependency Updates:**\n\n*   Updated ts-node from `10.9.1` to `10.9.2`. Cypress will longer error during `cypress run` or `cypress open` when using typescript 5.3.2+ with `extends` in `tsconfig.json`. Addresses [#28385](https://github.com/cypress-io/cypress/issues/28385).\n\n## 13.6.1[​](#13-6-1 \"Direct link to 13.6.1\")\n\n_Released 12/5/2023_\n\n**Bugfixes:**\n\n*   Fixed an issue where pages or downloads opened in a new tab were missing basic auth headers. Fixes [#28350](https://github.com/cypress-io/cypress/issues/28350).\n*   Fixed an issue where request logging would default the `message` to the `args` of the currently running command even though those `args` would not apply to the request log and are not displayed. If the `args` are sufficiently large (e.g. when running the `cy.task` from the [code-coverage](https://github.com/cypress-io/code-coverage/) plugin) there could be performance/memory implications. Addressed in [#28411](https://github.com/cypress-io/cypress/pull/28411).\n*   Fixed an issue where commands would fail with the error `must only be invoked from the spec file or support file` if the project's `baseUrl` included basic auth credentials. Fixes [#27457](https://github.com/cypress-io/cypress/issues/27457) and [#28336](https://github.com/cypress-io/cypress/issues/28336).\n*   Fixed an issue where some URLs would timeout in pre-request correlation. Addressed in [#28427](https://github.com/cypress-io/cypress/pull/28427).\n*   Cypress will now correctly log errors and debug logs on Linux machines. Fixes [#5051](https://github.com/cypress-io/cypress/issues/5051) and [#24713](https://github.com/cypress-io/cypress/issues/24713).\n\n**Misc:**\n\n*   Artifact upload duration is now reported to Cypress Cloud. Fixes [#28238](https://github.com/cypress-io/cypress/issues/28238). Addressed in [#28418](https://github.com/cypress-io/cypress/pull/28418).\n\n## 13.6.0[​](#13-6-0 \"Direct link to 13.6.0\")\n\n_Released 11/21/2023_\n\n**Features:**\n\n*   Added an activity indicator to CLI output when artifacts (screenshots, videos, or Test Replay) are being uploaded to the cloud. Addresses [#28239](https://github.com/cypress-io/cypress/issues/28239). Addressed in [#28277](https://github.com/cypress-io/cypress/pull/28277).\n*   When artifacts are uploaded to the Cypress Cloud, the duration of each upload will be displayed in the terminal. Addresses [#28237](https://github.com/cypress-io/cypress/issues/28237).\n\n**Bugfixes:**\n\n*   We now allow absolute paths when setting `component.indexHtmlFile` in the Cypress config. Fixes [#27750](https://github.com/cypress-io/cypress/issues/27750).\n*   Fixed an issue where dynamic intercept aliases now show with alias name instead of \"no alias\" in driver. Addresses [#24653](https://github.com/cypress-io/cypress/issues/24653)\n*   Fixed an issue where [aliasing individual requests](https://docs.cypress.io/api/commands/intercept#Aliasing-individual-requests) with `cy.intercept()` led to an error when retrieving all of the aliases with `cy.get(@alias.all)` . Addresses [#25448](https://github.com/cypress-io/cypress/issues/25448)\n*   The URL of the application under test and command error \"Learn more\" links now open externally instead of in the Cypress-launched browser. Fixes [#24572](https://github.com/cypress-io/cypress/issues/24572).\n*   Fixed issue where some URLs would timeout in pre-request correlation. Addressed in [#28354](https://github.com/cypress-io/cypress/pull/28354).\n\n**Misc:**\n\n*   Browser tabs and windows other than the Cypress tab are now closed between tests in Chromium-based browsers. Addressed in [#28204](https://github.com/cypress-io/cypress/pull/28204).\n*   Cypress now ensures the main browser tab is active before running each command in Chromium-based browsers. Addressed in [#28334](https://github.com/cypress-io/cypress/pull/28334).\n\n**Dependency Updates:**\n\n*   Upgraded [`chrome-remote-interface`](https://www.npmjs.com/package/chrome-remote-interface) from `0.31.3` to `0.33.0` to increase the max payload from 100MB to 256MB. Addressed in [#27998](https://github.com/cypress-io/cypress/pull/27998).\n\n## 13.5.1[​](#13-5-1 \"Direct link to 13.5.1\")\n\n_Released 11/14/2023_\n\n**Bugfixes:**\n\n*   Fixed a regression in [`13.5.0`](#13-5-0) where requests cached within a given spec may take longer to load than they did previously. Addresses [#28295](https://github.com/cypress-io/cypress/issues/28295).\n*   Fixed an issue where pages opened in a new tab were missing response headers, causing them not to load properly. Fixes [#28293](https://github.com/cypress-io/cypress/issues/28293) and [#28303](https://github.com/cypress-io/cypress/issues/28303).\n*   We now pass a flag to Chromium browsers to disable default component extensions. This is a common flag passed during browser automation. Fixed in [#28294](https://github.com/cypress-io/cypress/pull/28294).\n\n## 13.5.0[​](#13-5-0 \"Direct link to 13.5.0\")\n\n_Released 11/8/2023_\n\n**Features:**\n\n*   Added Component Testing support for [Angular](https://angular.io/) version 17. Addresses [#28153](https://github.com/cypress-io/cypress/issues/28153).\n\n**Bugfixes:**\n\n*   Fixed an issue in chromium based browsers, where global style updates can trigger flooding of font face requests in DevTools and Test Replay. This can affect performance due to the flooding of messages in CDP. Fixes [#28150](https://github.com/cypress-io/cypress/issues/28150) and [#28215](https://github.com/cypress-io/cypress/issues/28215).\n*   Fixed a regression in [`13.3.3`](#13-3-3) where Cypress would hang on loading shared workers when using `cy.reload` to reload the page. Fixes [#28248](https://github.com/cypress-io/cypress/issues/28248).\n*   Fixed an issue where network requests made from tabs, or windows other than the main Cypress tab, would be delayed. Fixes [#28113](https://github.com/cypress-io/cypress/issues/28113).\n*   Fixed an issue with 'other' targets (e.g. pdf documents embedded in an object tag) not fully loading. Fixes [#28228](https://github.com/cypress-io/cypress/issues/28228) and [#28162](https://github.com/cypress-io/cypress/issues/28162).\n*   Fixed an issue where clicking a link to download a file could cause a page load timeout when the download attribute was missing. Note: download behaviors in experimental WebKit are still an issue. Fixes [#14857](https://github.com/cypress-io/cypress/issues/14857).\n*   Fixed an issue to account for canceled and failed downloads to correctly reflect these status in Command log as a download failure where previously it would be pending. Fixed in [#28222](https://github.com/cypress-io/cypress/pull/28222).\n*   Fixed an issue determining visibility when an element is hidden by an ancestor with a shared edge. Fixes [#27514](https://github.com/cypress-io/cypress/issues/27514).\n*   We now pass a flag to Chromium browsers to disable Chrome translation, both the manual option and the popup prompt, when a page with a differing language is detected. Fixes [#28225](https://github.com/cypress-io/cypress/issues/28225).\n*   Stopped processing CDP events at the end of a spec when Test Isolation is off and Test Replay is enabled. Addressed in [#28213](https://github.com/cypress-io/cypress/pull/28213).\n\n## 13.4.0[​](#13-4-0 \"Direct link to 13.4.0\")\n\n_Released 10/30/2023_\n\n**Features:**\n\n*   Introduced experimental configuration options for advanced retry logic: adds `experimentalStrategy` and `experimentalOptions` keys to the `retry` configuration key. See [Experimental Flake Detection Features](https://docs.cypress.io/guides/references/experiments#Experimental-Flake-Detection-Features) for more information. Addressed in [#27930](https://github.com/cypress-io/cypress/pull/27930).\n\n**Bugfixes:**\n\n*   Fixed a regression in [`13.3.2`](#13-3-2) where Cypress would crash with 'Inspected target navigated or closed' or 'Session with given id not found'. Fixes [#28141](https://github.com/cypress-io/cypress/issues/28141) and [#28148](https://github.com/cypress-io/cypress/issues/28148).\n\n## 13.3.3[​](#13-3-3 \"Direct link to 13.3.3\")\n\n_Released 10/24/2023_\n\n**Bugfixes:**\n\n*   Fixed a performance regression in [13.3.1](#13-3-1) with proxy correlation timeouts and requests issued from web and shared workers. Fixes [#28104](https://github.com/cypress-io/cypress/issues/28104).\n*   Fixed a performance problem with proxy correlation when requests get aborted and then get miscorrelated with follow up requests. Addressed in [#28094](https://github.com/cypress-io/cypress/pull/28094).\n*   Fixed a regression in [10.0.0](#10-0-0), where search would not find a spec if the file name contains \"-\" or \"\\_\", but search prompt contains \" \" instead (e.g. search file \"spec-file.cy.ts\" with prompt \"spec file\"). Fixes [#25303](https://github.com/cypress-io/cypress/issues/25303).\n\n## 13.3.2[​](#13-3-2 \"Direct link to 13.3.2\")\n\n_Released 10/18/2023_\n\n**Bugfixes:**\n\n*   Fixed a performance regression in [13.3.1](#13-3-1) with proxy correlation timeouts and requests issued from service workers. Fixes [#28054](https://github.com/cypress-io/cypress/issues/28054) and [#28056](https://github.com/cypress-io/cypress/issues/28056).\n*   Fixed an issue where proxy correlation would leak over from a previous spec causing performance problems, `cy.intercept` problems, and Test Replay asset capturing issues. Addressed in [#28060](https://github.com/cypress-io/cypress/pull/28060).\n*   Fixed an issue where redirects of requests that knowingly don't have CDP traffic should also be assumed to not have CDP traffic. Addressed in [#28060](https://github.com/cypress-io/cypress/pull/28060).\n*   Fixed an issue with Accept Encoding headers by forcing gzip when no accept encoding header is sent and using identity if gzip is not sent. Fixes [#28025](https://github.com/cypress-io/cypress/issues/28025).\n\n**Dependency Updates:**\n\n*   Upgraded [`@babel/core`](https://www.npmjs.com/package/@babel/core) from `7.22.9` to `7.23.2` to address the [SNYK-JS-SEMVER-3247795](https://snyk.io/vuln/SNYK-JS-SEMVER-3247795) security vulnerability. Addressed in [#28063](https://github.com/cypress-io/cypress/pull/28063).\n*   Upgraded [`@babel/traverse`](https://www.npmjs.com/package/@babel/traverse) from `7.22.8` to `7.23.2` to address the [SNYK-JS-BABELTRAVERSE-5962462](https://snyk.io/vuln/SNYK-JS-BABELTRAVERSE-5962462) security vulnerability. Addressed in [#28063](https://github.com/cypress-io/cypress/pull/28063).\n*   Upgraded [`react-docgen`](https://www.npmjs.com/package/react-docgen) from `6.0.0-alpha.3` to `6.0.4` to address the [SNYK-JS-BABELTRAVERSE-5962462](https://snyk.io/vuln/SNYK-JS-BABELTRAVERSE-5962462) security vulnerability. Addressed in [#28063](https://github.com/cypress-io/cypress/pull/28063).\n\n## 13.3.1[​](#13-3-1 \"Direct link to 13.3.1\")\n\n_Released 10/11/2023_\n\n**Bugfixes:**\n\n*   Fixed an issue where requests were correlated in the wrong order in the proxy. This could cause an issue where the wrong request is used for `cy.intercept` or assets (e.g. stylesheets or images) may not properly be available in Test Replay. Addressed in [#27892](https://github.com/cypress-io/cypress/pull/27892).\n*   Fixed an issue where a crashed Chrome renderer can cause the Test Replay recorder to hang. Addressed in [#27909](https://github.com/cypress-io/cypress/pull/27909).\n*   Fixed an issue where multiple responses yielded from calls to `cy.wait()` would sometimes be out of order. Fixes [#27337](https://github.com/cypress-io/cypress/issues/27337).\n*   Fixed an issue where requests were timing out in the proxy. This could cause an issue where the wrong request is used for `cy.intercept` or assets (e.g. stylesheets or images) may not properly be available in Test Replay. Addressed in [#27976](https://github.com/cypress-io/cypress/pull/27976).\n*   Fixed an issue where Test Replay couldn't record tests due to issues involving `GLIBC`. Fixed deprecation warnings during the rebuild of better-sqlite3. Fixes [#27891](https://github.com/cypress-io/cypress/issues/27891) and [#27902](https://github.com/cypress-io/cypress/issues/27902).\n*   Enables test replay for executed specs in runs that have a spec that causes a browser crash. Addressed in [#27786](https://github.com/cypress-io/cypress/pull/27786).\n\n## 13.3.0[​](#13-3-0 \"Direct link to 13.3.0\")\n\n_Released 09/27/2023_\n\n**Features:**\n\n*   Introduces new layout for Runs page providing additional run information. Addresses [#27203](https://github.com/cypress-io/cypress/issues/27203).\n\n**Bugfixes:**\n\n*   Fixed an issue where actionability checks trigger a flood of font requests. Removing the font requests has the potential to improve performance and removes clutter from Test Replay. Addressed in [#27860](https://github.com/cypress-io/cypress/pull/27860).\n*   Fixed network stubbing not permitting status code 999. Fixes [#27567](https://github.com/cypress-io/cypress/issues/27567). Addressed in [#27853](https://github.com/cypress-io/cypress/pull/27853).\n\n## 13.2.0[​](#13-2-0 \"Direct link to 13.2.0\")\n\n_Released 09/12/2023_\n\n**Features:**\n\n*   Adds support for Nx users who want to run Angular Component Testing in parallel. Addressed in [#27723](https://github.com/cypress-io/cypress/pull/27723).\n\n**Bugfixes:**\n\n*   Edge cases where `cy.intercept()` would not properly intercept and asset response bodies would not properly be captured for Test Replay have been addressed. Addressed in [#27771](https://github.com/cypress-io/cypress/pull/27771).\n*   Fixed an issue where `enter`, `keyup`, and `space` events were not triggering `click` events properly in some versions of Firefox. Addressed in [#27715](https://github.com/cypress-io/cypress/pull/27715).\n*   Fixed a regression in `13.0.0` where tests using Basic Authorization can potentially hang indefinitely on chromium browsers. Addressed in [#27781](https://github.com/cypress-io/cypress/pull/27781).\n\n**Dependency Updates:**\n\n*   Upgraded Electron from `21.0.0` to `25.8.0`, which updates bundled Chromium from `106.0.5249.51` to `114.0.5735.289`. Additionally, the Node version binary has been upgraded from `16.16.0` to `18.15.0`. This does **NOT** have an impact on the node version you are using with Cypress and is merely an internal update to the repository & shipped binary. Addressed in [#27715](https://github.com/cypress-io/cypress/pull/27715). Addresses [#27595](https://github.com/cypress-io/cypress/issues/27595).\n\n## 13.1.0[​](#13-1-0 \"Direct link to 13.1.0\")\n\n_Released 08/31/2023_\n\n**Features:**\n\n*   Introduces a status icon representing the `latest` test run in the Sidebar for the Runs Page. Addresses [#27206](https://github.com/cypress-io/cypress/issues/27206).\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in Cypress [13.0.0](#13-0-0) where the [Module API](https://docs.cypress.io/guides/guides/module-api), [`after:run`](https://docs.cypress.io/api/plugins/after-run-api), and [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) results did not include the `stats.skipped` field for each run result. Fixes [#27694](https://github.com/cypress-io/cypress/issues/27694). Addressed in [#27695](https://github.com/cypress-io/cypress/pull/27695).\n*   Individual CDP errors that occur while capturing data for Test Replay will no longer prevent the entire run from being available. Addressed in [#27709](https://github.com/cypress-io/cypress/pull/27709).\n*   Fixed an issue where the release date on the `v13` landing page was a day behind. Fixed in [#27711](https://github.com/cypress-io/cypress/pull/27711).\n*   Fixed an issue where fatal protocol errors would leak between specs causing all subsequent specs to fail to upload protocol information. Fixed in [#27720](https://github.com/cypress-io/cypress/pull/27720)\n*   Updated `plist` from `3.0.6` to `3.1.0` to address [CVE-2022-37616](https://github.com/advisories/GHSA-9pgh-qqpf-7wqj) and [CVE-2022-39353](https://github.com/advisories/GHSA-crh6-fp67-6883). Fixed in [#27710](https://github.com/cypress-io/cypress/pull/27710).\n\n## 13.0.0[​](#13-0-0 \"Direct link to 13.0.0\")\n\n_Released 08/29/2023_\n\n**Summary:**\n\nWhen recording to Cypress Cloud, users now receive our newest feature: [Test Replay](https://docs.cypress.io/guides/cloud/test-replay). Test Replay brings the debugging experience you know and love from the Cypress app directly into your recorded tests in Cypress Cloud.\n\nPreviously, trying to debug failures and flake in CI was painful and time consuming with only videos & screenshots. Test Replay provides a way to inspect the DOM, network events, and console logs of your application from your tests exactly as they ran in CI.\n\nTest Replay is available in all Cypress Cloud plans. To start using Test Replay, simply record a run to Cypress Cloud. Learn more in the [Test Replay documentation](https://docs.cypress.io/guides/cloud/test-replay).\n\nTest Replay now serves as the primary replacement for debugging via video. Video capture and `videoCompression` of captured video are now set to `false` by default and `videoUploadOnPasses` is removed.\n\nRead more about v13.0.0 in [our blog post](https://on.cypress.io/cypress-13-release).\n\n**Breaking Changes:**\n\n*   The [`video`](https://docs.cypress.io/guides/references/configuration#Videos) configuration option now defaults to `false`. Addresses [#26157](https://github.com/cypress-io/cypress/issues/26157).\n*   The [`videoCompression`](https://docs.cypress.io/guides/references/configuration#Videos) configuration option now defaults to `false`. Addresses [#26160](https://github.com/cypress-io/cypress/issues/26160).\n*   The [`videoUploadOnPasses`](https://docs.cypress.io/guides/references/configuration#Videos) configuration option has been removed. Please see our [screenshots & videos guide](https://docs.cypress.io/guides/guides/screenshots-and-videos#Delete-videos-for-specs-without-failing-or-retried-tests) on how to accomplish similar functionality. Addresses [#26899](https://github.com/cypress-io/cypress/issues/26899).\n*   Requests for assets at relative paths for component testing are now correctly forwarded to the dev server. Fixes [#26725](https://github.com/cypress-io/cypress/issues/26725).\n*   The [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile) command is now retry-able as a [query command](https://docs.cypress.io/guides/core-concepts/retry-ability). This should not affect any tests using it; the functionality is unchanged. However, it can no longer be overwritten using [`Cypress.Commands.overwrite()`](https://docs.cypress.io/api/cypress-api/custom-commands#Overwrite-Existing-Commands). Addressed in [#25595](https://github.com/cypress-io/cypress/pull/25595).\n*   The deprecated configuration option `nodeVersion` has been removed. Addresses [#27016](https://github.com/cypress-io/cypress/issues/27016).\n*   The properties and values returned by the [Module API](https://docs.cypress.io/guides/guides/module-api) and included in the arguments of handlers for the [`after:run`](https://docs.cypress.io/api/plugins/after-run-api) and [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) have been changed to be more consistent. Addresses [#23805](https://github.com/cypress-io/cypress/issues/23805).\n*   For Cypress Cloud runs with Test Replay enabled, the Cypress Runner UI is now hidden during the run. This change was made to improve performance in situations where the Runner no longer needs to be rendered. If video is recorded during the run, the Runner will not be visible. In addition, if a screenshot with `capture: runner` is taken, the screenshot will be taken as if the `capture: viewport` option was passed. You can turn off this behavior by passing [`--runner-ui`](https://docs.cypress.io/guides/guides/command-line#cypress-run-runner-ui). Addressed in [#27482](https://github.com/cypress-io/cypress/pull/27482).\n*   The browser and browser page unexpectedly closing in the middle of a test run are now gracefully handled. Addressed in [#27592](https://github.com/cypress-io/cypress/issues/27592).\n*   Automation performance is now improved by switching away from websockets to direct CDP calls for Chrome and Electron browsers. Addressed in [#27592](https://github.com/cypress-io/cypress/issues/27592).\n*   Edge cases where `cy.intercept` would not properly intercept have been addressed. Addressed in [#27592](https://github.com/cypress-io/cypress/issues/27592).\n*   Node 14 support has been removed and Node 16 support has been deprecated. Node 16 may continue to work with Cypress `v13`, but will not be supported moving forward to closer coincide with [Node 16's end-of-life](https://nodejs.org/en/blog/announcements/nodejs16-eol) schedule. It is recommended that users update to at least Node 18.\n*   The minimum supported TypeScript version is `4.x`.\n\n**Features:**\n\n*   Added [`--runner-ui`](https://docs.cypress.io/guides/guides/command-line#cypress-run-runner-ui) and [`--no-runner-ui`](https://docs.cypress.io/guides/guides/command-line#cypress-run-no-runner-ui) CLI flags to control whether the Cypress Runner UI is visible during a run. Addressed in [#27582](https://github.com/cypress-io/cypress/pull/27582).\n*   Consolidates and improves terminal output when uploading test artifacts to Cypress Cloud. Addressed in [#27402](https://github.com/cypress-io/cypress/pull/27402)\n\n**Bugfixes:**\n\n*   Fixed an issue where Cypress's internal `tsconfig` would conflict with properties set in the user's `tsconfig.json` such as `module` and `moduleResolution`. Fixes [#26308](https://github.com/cypress-io/cypress/issues/26308) and [#27448](https://github.com/cypress-io/cypress/issues/27448).\n*   Clarified Svelte 4 works correctly with Component Testing and updated dependencies checks to reflect this. It was incorrectly flagged as not supported. Fixes [#27465](https://github.com/cypress-io/cypress/issues/27465).\n*   Resolve the `process/browser` global inside `@cypress/webpack-batteries-included-preprocessor` to resolve to `process/browser.js` in order to explicitly provide the file extension. File resolution must include the extension for `.mjs` and `.js` files inside ESM packages in order to resolve correctly. Fixes[#27599](https://github.com/cypress-io/cypress/issues/27599).\n*   Fixed an issue where the correct `pnp` process was not being discovered. Fixes [#27562](https://github.com/cypress-io/cypress/issues/27562).\n*   Fixed incorrect type declarations for Cypress and Chai globals that asserted them to be local variables of the global scope rather than properties on the global object. Fixes [#27539](https://github.com/cypress-io/cypress/issues/27539). Fixed in [#27540](https://github.com/cypress-io/cypress/pull/27540).\n*   Dev Servers will now respect and use the `port` configuration option if present. Fixes [#27675](https://github.com/cypress-io/cypress/issues/27675).\n\n**Dependency Updates:**\n\n*   Upgraded [`@cypress/request`](https://www.npmjs.com/package/@cypress/request) from `^2.88.11` to `^3.0.0` to address the [CVE-2023-28155](https://github.com/advisories/GHSA-p8p7-x288-28g6) security vulnerability. Addresses [#27535](https://github.com/cypress-io/cypress/issues/27535). Addressed in [#27495](https://github.com/cypress-io/cypress/pull/27495).\n\n## 12.17.4[​](#12-17-4 \"Direct link to 12.17.4\")\n\n_Released 08/15/2023_\n\n**Bugfixes:**\n\n*   Fixed an issue where having `cypress.config` in a nested directory would cause problems with locating the `component-index.html` file when using component testing. Fixes [#26400](https://github.com/cypress-io/cypress/issues/26400).\n\n**Dependency Updates:**\n\n*   Upgraded [`webpack`](https://www.npmjs.com/package/webpack) from `v4` to `v5`. This means that we are now bundling your `e2e` tests with webpack 5. We don't anticipate this causing any noticeable changes. However, if you'd like to keep bundling your `e2e` tests with webpack 4 you can use the same process as before by pinning [@cypress/webpack-batteries-included-preprocessor](https://www.npmjs.com/package/@cypress/webpack-batteries-included-preprocessor) to `v2.x.x` and hooking into the [file:preprocessor](https://docs.cypress.io/api/plugins/preprocessors-api#Usage) plugin event. This will restore the previous bundling process. Additionally, if you're using [@cypress/webpack-batteries-included-preprocessor](https://www.npmjs.com/package/@cypress/webpack-batteries-included-preprocessor) already, a new version has been published to support webpack `v5`.\n*   Upgraded [`tough-cookie`](https://www.npmjs.com/package/tough-cookie) from `4.0` to `4.1.3`, [`@cypress/request`](https://www.npmjs.com/package/@cypress/request) from `2.88.11` to `2.88.12` and [`@cypress/request-promise`](https://www.npmjs.com/package/@cypress/request-promise) from `4.2.6` to `4.2.7` to address a [security vulnerability](https://security.snyk.io/vuln/SNYK-JS-TOUGHCOOKIE-5672873). Fixes [#27261](https://github.com/cypress-io/cypress/issues/27261).\n\n## 12.17.3[​](#12-17-3 \"Direct link to 12.17.3\")\n\n_Released 08/01/2023_\n\n**Bugfixes:**\n\n*   Fixed an issue where unexpected branch names were being recorded for cypress runs when executed by GitHub Actions. The `HEAD` branch name will now be recorded by default for pull request workflows if a branch name cannot otherwise be detected from user overrides or from local git data. Fixes [#27389](https://github.com/cypress-io/cypress/issues/27389).\n\n**Performance:**\n\n*   Fixed an issue where unnecessary requests were being paused. No longer sends `X-Cypress-Is-XHR-Or-Fetch` header and infers resource type off of the server pre-request object. Fixes [#26620](https://github.com/cypress-io/cypress/issues/26620) and [#26622](https://github.com/cypress-io/cypress/issues/26622).\n\n## 12.17.2[​](#12-17-2 \"Direct link to 12.17.2\")\n\n_Released 07/20/2023_\n\n**Bugfixes:**\n\n*   Fixed an issue where commands would fail with the error `must only be invoked from the spec file or support file` if their arguments were mutated. Fixes [#27200](https://github.com/cypress-io/cypress/issues/27200).\n*   Fixed an issue where `cy.writeFile()` would erroneously fail with the error `cy.writeFile() must only be invoked from the spec file or support file`. Fixes [#27097](https://github.com/cypress-io/cypress/issues/27097).\n*   Fixed an issue where web workers could not be created within a spec. Fixes [#27298](https://github.com/cypress-io/cypress/issues/27298).\n\n## 12.17.1[​](#12-17-1 \"Direct link to 12.17.1\")\n\n_Released 07/10/2023_\n\n**Bugfixes:**\n\n*   Fixed invalid stored preference when enabling in-app notifications that could cause the application to crash. Fixes [#27228](https://github.com/cypress-io/cypress/issues/27228).\n*   Fixed an issue with the TypeScript types of [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot). Fixed in [#27130](https://github.com/cypress-io/cypress/pull/27130).\n\n**Dependency Updates:**\n\n*   Upgraded [`@cypress/request`](https://www.npmjs.com/package/@cypress/request) from `2.88.10` to `2.88.11` to address [CVE-2022-24999](https://www.cve.org/CVERecord?id=CVE-2022-24999) security vulnerability. Addressed in [#27005](https://github.com/cypress-io/cypress/pull/27005).\n\n## 12.17.0[​](#12-17-0 \"Direct link to 12.17.0\")\n\n_Released 07/06/2023_\n\n**Features:**\n\n*   Cypress Cloud users can now receive [desktop notifications](https://docs.cypress.io/guides/cloud/recorded-runs#Notifications) about their runs, including when one starts, finishes, or fails. Addresses [#26686](https://github.com/cypress-io/cypress/issues/26686).\n\n**Bugfixes:**\n\n*   Fixed issues where commands would fail with the error `must only be invoked from the spec file or support file`. Fixes [#27149](https://github.com/cypress-io/cypress/issues/27149) and [#27163](https://github.com/cypress-io/cypress/issues/27163).\n*   Fixed a regression introduced in Cypress [12.12.0](#12-12-0) where Cypress may fail to reconnect to the Chrome DevTools Protocol in Electron. Fixes [#26900](https://github.com/cypress-io/cypress/issues/26900).\n*   Fixed an issue where chrome was not recovering from browser crashes properly. Fixes [#24650](https://github.com/cypress-io/cypress/issues/24650).\n*   Fixed a race condition that was causing a GraphQL error to appear on the [Debug page](https://docs.cypress.io/guides/cloud/recorded-runs#Debug) when viewing a running Cypress Cloud build. Fixed in [#27134](https://github.com/cypress-io/cypress/pull/27134).\n*   Fixed a race condition in electron where the test window exiting prematurely during the browser launch process was causing the whole test run to fail. Addressed in [#27167](https://github.com/cypress-io/cypress/pull/27167).\n*   Fixed minor issues with TypeScript types in the CLI. Fixes [#24110](https://github.com/cypress-io/cypress/issues/24110).\n*   Fixed an issue where a value for the Electron debug port would not be respected if defined using the `ELECTRON_EXTRA_LAUNCH_ARGS` environment variable. Fixes [#26711](https://github.com/cypress-io/cypress/issues/26711).\n\n**Dependency Updates:**\n\n*   Update dependency semver to ^7.5.3. Addressed in [#27151](https://github.com/cypress-io/cypress/pull/27151).\n\n## 12.16.0[​](#12-16-0 \"Direct link to 12.16.0\")\n\n_Released 06/26/2023_\n\n**Features:**\n\n*   Added support for Angular 16.1.0 in Cypress Component Testing. Addresses [#27049](https://github.com/cypress-io/cypress/issues/27049).\n\n**Bugfixes:**\n\n*   Fixed an issue where certain commands would fail with the error `must only be invoked from the spec file or support file` when invoked with a large argument. Fixes [#27099](https://github.com/cypress-io/cypress/issues/27099).\n\n## 12.15.0[​](#12-15-0 \"Direct link to 12.15.0\")\n\n_Released 06/20/2023_\n\n**Features:**\n\n*   Added support for running Cypress tests with [Chrome's new `--headless=new` flag](https://developer.chrome.com/articles/new-headless/). Chrome versions 112 and above will now be run in the `headless` mode that matches the `headed` browser implementation. Addresses [#25972](https://github.com/cypress-io/cypress/issues/25972).\n*   Cypress can now test pages with targeted `Content-Security-Policy` and `Content-Security-Policy-Report-Only` header directives by specifying the allow list via the [`experimentalCspAllowList`](https://docs.cypress.io/guides/references/experiments#Experimental-CSP-Allow-List) configuration option. Addresses [#1030](https://github.com/cypress-io/cypress/issues/1030). Addressed in [#26483](https://github.com/cypress-io/cypress/pull/26483)\n*   The [`videoCompression`](https://docs.cypress.io/guides/references/configuration#Videos) configuration option now accepts both a boolean or a Constant Rate Factor (CRF) number between `1` and `51`. The `videoCompression` default value is still `32` CRF and when `videoCompression` is set to `true` the default of `32` CRF will be used. Addresses [#26658](https://github.com/cypress-io/cypress/issues/26658).\n*   The Cypress Cloud data shown on the [Specs](https://docs.cypress.io/guides/core-concepts/cypress-app#Specs) page and [Runs](https://docs.cypress.io/guides/core-concepts/cypress-app#Runs) page will now reflect Cloud Runs that match the current Git tree if Git is being used. Addresses [#26693](https://github.com/cypress-io/cypress/issues/26693).\n\n**Bugfixes:**\n\n*   Fixed an issue where video output was not being logged to the console when `videoCompression` was turned off. Videos will now log to the terminal regardless of the compression value. Addresses [#25945](https://github.com/cypress-io/cypress/issues/25945).\n\n**Dependency Updates:**\n\n*   Removed [`@cypress/mocha-teamcity-reporter`](https://www.npmjs.com/package/@cypress/mocha-teamcity-reporter) as this package was no longer being referenced. Addressed in [#26938](https://github.com/cypress-io/cypress/pull/26938).\n\n## 12.14.0[​](#12-14-0 \"Direct link to 12.14.0\")\n\n_Released 06/07/2023_\n\n**Features:**\n\n*   A new testing type switcher has been added to the Spec Explorer to make it easier to move between E2E and Component Testing. An informational overview of each type is displayed if it hasn't already been configured to help educate and onboard new users to each testing type. Addresses [#26448](https://github.com/cypress-io/cypress/issues/26448), [#26836](https://github.com/cypress-io/cypress/issues/26836) and [#26837](https://github.com/cypress-io/cypress/issues/26837).\n\n**Bugfixes:**\n\n*   Fixed an issue to now correctly detect Angular 16 dependencies ([@angular/cli](https://www.npmjs.com/package/@angular/cli), [@angular-devkit/build-angular](https://www.npmjs.com/package/@angular-devkit/build-angular), [@angular/core](https://www.npmjs.com/package/@angular/core), [@angular/common](https://www.npmjs.com/package/@angular/common), [@angular/platform-browser-dynamic](https://www.npmjs.com/package/@angular/platform-browser-dynamic)) during Component Testing onboarding. Addresses [#26852](https://github.com/cypress-io/cypress/issues/26852).\n*   Ensures Git-related messages on the [Runs page](https://docs.cypress.io/guides/core-concepts/cypress-app#Runs) remain dismissed. Addresses [#26808](https://github.com/cypress-io/cypress/issues/26808).\n\n**Dependency Updates:**\n\n*   Upgraded [`find-process`](https://www.npmjs.com/package/find-process) from `1.4.1` to `1.4.7` to address this [Synk](https://security.snyk.io/vuln/SNYK-JS-FINDPROCESS-1090284) security vulnerability. Addressed in [#26906](https://github.com/cypress-io/cypress/pull/26906).\n*   Upgraded [`firefox-profile`](https://www.npmjs.com/package/firefox-profile) from `4.0.0` to `4.3.2` to address security vulnerabilities within sub-dependencies. Addressed in [#26912](https://github.com/cypress-io/cypress/pull/26912).\n\n## 12.13.0[​](#12-13-0 \"Direct link to 12.13.0\")\n\n_Released 05/23/2023_\n\n**Features:**\n\n*   Adds Git-related messages for the [Runs page](https://docs.cypress.io/guides/core-concepts/cypress-app#Runs) and [Debug page](https://docs.cypress.io/guides/cloud/recorded-runs#Debug) when users aren't using Git or there are no recorded runs for the current branch. Addresses [#26680](https://github.com/cypress-io/cypress/issues/26680).\n\n**Bugfixes:**\n\n*   Reverted [#26452](https://github.com/cypress-io/cypress/pull/26452) which introduced a bug that prevents users from using End to End with Yarn 3. Fixed in [#26735](https://github.com/cypress-io/cypress/pull/26735). Fixes [#26676](https://github.com/cypress-io/cypress/issues/26676).\n*   Moved `types` condition to the front of `package.json#exports` since keys there are meant to be order-sensitive. Fixed in [#26630](https://github.com/cypress-io/cypress/pull/26630).\n*   Fixed an issue where newly-installed dependencies would not be detected during Component Testing setup. Addresses [#26685](https://github.com/cypress-io/cypress/issues/26685).\n*   Fixed a UI regression that was flashing an \"empty\" state inappropriately when loading the Debug page. Fixed in [#26761](https://github.com/cypress-io/cypress/pull/26761).\n*   Fixed an issue in Component Testing setup where TypeScript version 5 was not properly detected. Fixes [#26204](https://github.com/cypress-io/cypress/issues/26204).\n\n**Misc:**\n\n*   Updated styling & content of Cypress Cloud slideshows when not logged in or no runs have been recorded. Addresses [#26181](https://github.com/cypress-io/cypress/issues/26181).\n*   Changed the nomenclature of 'processing' to 'compressing' when terminal video output is printed during a run. Addresses [#26657](https://github.com/cypress-io/cypress/issues/26657).\n*   Changed the nomenclature of 'Upload Results' to 'Uploading Screenshots & Videos' when terminal output is printed during a run. Addresses [#26759](https://github.com/cypress-io/cypress/issues/26759).\n\n## 12.12.0[​](#12-12-0 \"Direct link to 12.12.0\")\n\n_Released 05/09/2023_\n\n**Features:**\n\n*   Added a new informational banner to help get started with component testing from an existing end-to-end test suite. Addresses [#26511](https://github.com/cypress-io/cypress/issues/26511).\n\n**Bugfixes:**\n\n*   Fixed an issue in Electron where devtools gets out of sync with the DOM occasionally. Addresses [#15932](https://github.com/cypress-io/cypress/issues/15932).\n*   Updated the Chromium renderer process crash message to be more terse. Addressed in [#26597](https://github.com/cypress-io/cypress/pull/26597).\n*   Fixed an issue with `CYPRESS_DOWNLOAD_PATH_TEMPLATE` regex to allow multiple replacements. Addresses [#23670](https://github.com/cypress-io/cypress/issues/23670).\n\n**Dependency Updates:**\n\n*   Upgraded [`plist`](https://www.npmjs.com/package/plist) from `3.0.5` to `3.0.6` to address [CVE-2022-26260](https://nvd.nist.gov/vuln/detail/CVE-2022-22912#range-8131646) NVD security vulnerability. Addressed in [#26631](https://github.com/cypress-io/cypress/pull/26631).\n*   Upgraded [`engine.io`](https://www.npmjs.com/package/engine.io) from `6.2.1` to `6.4.2` to address [CVE-2023-31125](https://github.com/socketio/engine.io/security/advisories/GHSA-q9mw-68c2-j6m5) NVD security vulnerability. Addressed in [#26664](https://github.com/cypress-io/cypress/pull/26664).\n*   Upgraded [`@vue/test-utils`](https://www.npmjs.com/package/@vue/test-utils) from `2.0.2` to `2.3.2`. Addresses [#26575](https://github.com/cypress-io/cypress/issues/26575).\n\n## 12.11.0[​](#12-11-0 \"Direct link to 12.11.0\")\n\n_Released 04/26/2023_\n\n**Features:**\n\n*   Added Component Testing support for Angular 16. Addresses [#26044](https://github.com/cypress-io/cypress/issues/26044).\n*   The run navigation component on the [Debug page](https://on.cypress.io/debug-page) will now display a warning message if there are more relevant runs than can be displayed in the list. Addresses [#26288](https://github.com/cypress-io/cypress/issues/26288).\n\n**Bugfixes:**\n\n*   Fixed an issue where setting `videoCompression` to `0` would cause the video output to be broken. `0` is now treated as false. Addresses [#5191](https://github.com/cypress-io/cypress/issues/5191) and [#24595](https://github.com/cypress-io/cypress/issues/24595).\n*   Fixed an issue on the [Debug page](https://on.cypress.io/debug-page) where the passing run status would appear even if the Cypress Cloud organization was over its monthly test result limit. Addresses [#26528](https://github.com/cypress-io/cypress/issues/26528).\n\n**Misc:**\n\n*   Cleaned up our open telemetry dependencies, reducing the size of the open telemetry modules. Addressed in [#26522](https://github.com/cypress-io/cypress/pull/26522).\n\n**Dependency Updates:**\n\n*   Upgraded [`vue`](https://www.npmjs.com/package/vue) from `3.2.31` to `3.2.47`. Addressed in [#26555](https://github.com/cypress-io/cypress/pull/26555).\n\n## 12.10.0[​](#12-10-0 \"Direct link to 12.10.0\")\n\n_Released 04/17/2023_\n\n**Features:**\n\n*   The Component Testing setup wizard will now show a warning message if an issue is encountered with an installed [third party framework definition](https://on.cypress.io/component-integrations). Addresses [#25838](https://github.com/cypress-io/cypress/issues/25838).\n\n**Bugfixes:**\n\n*   Capture the [Azure](https://azure.microsoft.com/) CI provider's environment variable [`SYSTEM_PULLREQUEST_PULLREQUESTNUMBER`](https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#system-variables-devops-services) to display the linked PR number in the Cloud. Addressed in [#26215](https://github.com/cypress-io/cypress/pull/26215).\n*   Fixed an issue in the onboarding wizard where project framework & bundler would not be auto-detected when opening directly into component testing mode using the `--component` CLI flag. Fixes [#22777](https://github.com/cypress-io/cypress/issues/22777) and [#26388](https://github.com/cypress-io/cypress/issues/26388).\n*   Updated to use the `SEMAPHORE_GIT_WORKING_BRANCH` [Semaphore](https://docs.semaphoreci.com/) CI environment variable to correctly associate a Cloud run to the current branch. Previously this was incorrectly associating a run to the target branch. Fixes [#26309](https://github.com/cypress-io/cypress/issues/26309).\n*   Fix an edge case in Component Testing where a custom `baseUrl` in `tsconfig.json` for Next.js 13.2.0+ is not respected. This was partially fixed in [#26005](https://github.com/cypress-io/cypress/pull/26005), but an edge case was missed. Fixes [#25951](https://github.com/cypress-io/cypress/issues/25951).\n*   Correctly detect and resolve dependencies when configuring Component Testing in projects using Yarn's [Plug'n'Play feature](https://yarnpkg.com/features/pnp). Fixes [#25960](https://github.com/cypress-io/cypress/issues/25960).\n*   Fixed an issue where `click` events fired on [`.type('{enter}')`](https://docs.cypress.io/api/commands/type) did not propagate through shadow roots. Fixes [#26392](https://github.com/cypress-io/cypress/issues/26392).\n\n**Misc:**\n\n*   Removed unintentional debug logs. Addressed in [#26411](https://github.com/cypress-io/cypress/pull/26411).\n*   Improved styling on the [Runs Page](https://docs.cypress.io/guides/core-concepts/cypress-app#Runs). Addresses [#26180](https://github.com/cypress-io/cypress/issues/26180).\n\n**Dependency Updates:**\n\n*   Upgraded [`commander`](https://www.npmjs.com/package/commander) from `^5.1.0` to `^6.2.1`. Addressed in [#26226](https://github.com/cypress-io/cypress/pull/26226).\n*   Upgraded [`minimist`](https://www.npmjs.com/package/minimist) from `1.2.6` to `1.2.8` to address this [CVE-2021-44906](https://github.com/advisories/GHSA-xvch-5gv4-984h) NVD security vulnerability. Addressed in [#26254](https://github.com/cypress-io/cypress/pull/26254).\n\n## 12.9.0[​](#12-9-0 \"Direct link to 12.9.0\")\n\n_Released 03/28/2023_\n\n**Features:**\n\n*   The [Debug page](https://docs.cypress.io/guides/cloud/recorded-runs#Debug) now allows for navigating between all runs recorded for a commit. Addresses [#25899](https://github.com/cypress-io/cypress/issues/25899) and [#26018](https://github.com/cypress-io/cypress/issues/26018).\n\n**Bugfixes:**\n\n*   Fixed a compatibility issue so that component test projects can use [Vite](https://vitejs.dev/) version 4.2.0 and greater. Fixes [#26138](https://github.com/cypress-io/cypress/issues/26138).\n*   Fixed an issue where [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) added an additional `content-length` header to spied requests that did not set a `content-length` header on the original request. Fixes [#24407](https://github.com/cypress-io/cypress/issues/24407).\n*   Changed the way that Git hashes are loaded so that non-relevant runs are excluded from the Debug page. Fixes [#26058](https://github.com/cypress-io/cypress/issues/26058).\n*   Corrected the [`.type()`](https://docs.cypress.io/api/commands/type) command to account for shadow root elements when determining whether or not focus needs to be simulated before typing. Fixes [#26198](https://github.com/cypress-io/cypress/issues/26198).\n*   Fixed an issue where an incorrect working directory could be used for Git operations on Windows. Fixes [#23317](https://github.com/cypress-io/cypress/issues/23317).\n\n**Misc:**\n\n*   Made some minor styling updates to the Debug page. Addresses [#26041](https://github.com/cypress-io/cypress/issues/26041).\n\n## 12.8.1[​](#12-8-1 \"Direct link to 12.8.1\")\n\n_Released 03/15/2023_\n\n**Bugfixes:**\n\n*   Fixed a regression in Cypress [10](https://docs.cypress.io/guides/references/changelog#10-0-0) where the reporter auto-scroll configuration inside user preferences was unintentionally being toggled off. Users must now explicitly enable/disable auto-scroll under user preferences, which is enabled by default. Fixes [#24171](https://github.com/cypress-io/cypress/issues/24171) and [#26113](https://github.com/cypress-io/cypress/issues/26113).\n\n**Dependency Updates:**\n\n*   Upgraded [`ejs`](https://www.npmjs.com/package/ejs) from `3.1.6` to `3.1.8` to address this [CVE-2022-29078](https://github.com/advisories/GHSA-phwq-j96m-2c2q) NVD security vulnerability. Addressed in [#25279](https://github.com/cypress-io/cypress/pull/25279).\n\n## 12.8.0[​](#12-8-0 \"Direct link to 12.8.0\")\n\n_Released 03/14/2023_\n\n**Features:**\n\n*   The [Debug page](https://docs.cypress.io/guides/cloud/recorded-runs#Debug) is now able to show real-time results from in-progress runs. Addresses [#25759](https://github.com/cypress-io/cypress/issues/25759).\n*   Added the ability to control whether a request is logged to the command log via [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) by passing `log: false` or `log: true`. Addresses [#7362](https://github.com/cypress-io/cypress/issues/7362).\n    *   This can be used to override Cypress's default behavior of logging all XHRs and fetches, see the [example](https://docs.cypress.io/api/commands/intercept#Disabling-logs-for-a-request).\n*   It is now possible to control the number of connection attempts to the browser using the `CYPRESS_CONNECT_RETRY_THRESHOLD` Environment Variable. Learn more [here](https://docs.cypress.io/guides/references/advanced-installation#Environment-variables). Addressed in [#25848](https://github.com/cypress-io/cypress/pull/25848).\n\n**Bugfixes:**\n\n*   Fixed an issue where using `Cypress.require()` would throw the error `Cannot find module 'typescript'`. Fixes [#25885](https://github.com/cypress-io/cypress/issues/25885).\n*   The [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api) API was updated to correctly support async event handlers in `run` mode. Fixes [#24403](https://github.com/cypress-io/cypress/issues/24403).\n*   Updated the Component Testing [community framework](https://docs.cypress.io/guides/component-testing/third-party-definitions) definition detection logic to take into account monorepo structures that hoist dependencies. Fixes [#25993](https://github.com/cypress-io/cypress/issues/25993).\n*   The onboarding wizard for Component Testing will now detect installed dependencies more reliably. Fixes [#25782](https://github.com/cypress-io/cypress/issues/25782).\n*   Fixed an issue where Angular components would sometimes be mounted in unexpected DOM locations in component tests. Fixes [#25956](https://github.com/cypress-io/cypress/issues/25956).\n*   Fixed an issue where Cypress component testing would fail to work with [Next.js](https://nextjs.org/) `13.2.1`. Fixes [#25951](https://github.com/cypress-io/cypress/issues/25951).\n*   Fixed an issue where migrating a project from a version of Cypress earlier than [10.0.0](#10-0-0) could fail if the project's `testFiles` configuration was an array of globs. Fixes [#25947](https://github.com/cypress-io/cypress/issues/25947).\n\n**Misc:**\n\n*   Removed \"New\" badge in the navigation bar for the debug page icon. Addresses [#25925](https://github.com/cypress-io/cypress/issues/25925).\n*   Removed inline \"Connect\" buttons within the Specs Explorer. Addresses [#25926](https://github.com/cypress-io/cypress/issues/25926).\n*   Added an icon for \"beta\" versions of the Chrome browser. Addresses [#25968](https://github.com/cypress-io/cypress/issues/25968).\n\n**Dependency Updates:**\n\n*   Upgraded [`mocha-junit-reporter`](https://github.com/michaelleeallen/mocha-junit-reporter) from `2.1.0` to `2.2.0` to be able to use [new placeholders](https://github.com/michaelleeallen/mocha-junit-reporter/pull/163) such as `[suiteFilename]` or `[suiteName]` when defining the test report name. Addressed in [#25922](https://github.com/cypress-io/cypress/pull/25922).\n\n## 12.7.0[​](#12-7-0 \"Direct link to 12.7.0\")\n\n_Released 02/24/2023_\n\n**Features:**\n\n*   It is now possible to set `hostOnly` cookies with [`cy.setCookie()`](https://docs.cypress.io/api/commands/setcookie) for a given domain. Addresses [#16856](https://github.com/cypress-io/cypress/issues/16856) and [#17527](https://github.com/cypress-io/cypress/issues/17527).\n*   Added a Public API for third party component libraries to define a Framework Definition, embedding their library into the Cypress onboarding workflow. Learn more [here](https://docs.cypress.io/guides/component-testing/third-party-definitions). Implemented in [#25780](https://github.com/cypress-io/cypress/pull/25780) and closes [#25638](https://github.com/cypress-io/cypress/issues/25638).\n*   Added a Debug Page tutorial slideshow for projects that are not connected to Cypress Cloud. Addresses [#25768](https://github.com/cypress-io/cypress/issues/25768).\n*   Updated the \"new\" status badge for the Debug page navigation link to be less noticeable when the navigation is collapsed. Addresses [#25739](https://github.com/cypress-io/cypress/issues/25739).\n*   Improved various error message around interactions with the Cypress cloud. Implemented in [#25837](https://github.com/cypress-io/cypress/pull/25837).\n\n**Bugfixes:**\n\n*   Fixed an issue where cookies were being duplicated with the same hostname, but a prepended dot. Fixed an issue where cookies may not be expiring correctly. Fixes [#25174](https://github.com/cypress-io/cypress/issues/25174), [#25205](https://github.com/cypress-io/cypress/issues/25205) and [#25495](https://github.com/cypress-io/cypress/issues/25495).\n*   Fixed an issue where cookies weren't being synced when the application was stable. Fixed in [#25855](https://github.com/cypress-io/cypress/pull/25855). Fixes [#25835](https://github.com/cypress-io/cypress/issues/25835).\n*   Added missing TypeScript type definitions for the [`cy.reload()`](https://docs.cypress.io/api/commands/reload) command. Addressed in [#25779](https://github.com/cypress-io/cypress/pull/25779).\n*   Ensure Angular components are mounted inside the correct element. Fixes [#24385](https://github.com/cypress-io/cypress/issues/24385).\n*   Fix a bug where files outside the project root in a monorepo are not correctly served when using Vite. Addressed in [#25801](https://github.com/cypress-io/cypress/pull/25801).\n*   Fixed an issue where using [`cy.intercept`](https://docs.cypress.io/api/commands/intercept)'s `req.continue()` with a non-function parameter would not provide an appropriate error message. Fixed in [#25884](https://github.com/cypress-io/cypress/pull/25884).\n*   Fixed an issue where Cypress would erroneously launch and connect to multiple browser instances. Fixes [#24377](https://github.com/cypress-io/cypress/issues/24377).\n*   Fixed various bugs when recording to the cloud. Fixed in [#25837](https://github.com/cypress-io/cypress/pull/25837).\n\n**Misc:**\n\n*   Made updates to the way that the Debug Page header displays information. Addresses [#25796](https://github.com/cypress-io/cypress/issues/25796) and [#25798](https://github.com/cypress-io/cypress/issues/25798).\n\n## 12.6.0[​](#12-6-0 \"Direct link to 12.6.0\")\n\n_Released 02/15/2023_\n\n**Features:**\n\n*   Added a new CLI flag, called [`--auto-cancel-after-failures`](https://docs.cypress.io/guides/guides/command-line#Options), that overrides the project-level [\"Auto Cancellation\"](https://docs.cypress.io/guides/cloud/smart-orchestration/run-cancellation) value when recording to the Cloud. This gives Cloud users on Business and Enterprise plans the flexibility to alter the auto-cancellation value per run. Addressed in [#25237](https://github.com/cypress-io/cypress/pull/25237).\n*   It is now possible to overwrite query commands using [`Cypress.Commands.overwriteQuery`](https://on.cypress.io/api/custom-queries). Addressed in [#25078](https://github.com/cypress-io/cypress/issues/25078).\n*   Added [`Cypress.require()`](https://docs.cypress.io/api/cypress-api/require) for including dependencies within the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) callback. This change removed support for using `require()` and `import()` directly within the callback because we found that it impacted performance not only for spec files using them within the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) callback, but even for spec files that did not use them. Addresses [#24976](https://github.com/cypress-io/cypress/issues/24976).\n*   Added the ability to open the failing test in the IDE from the Debug page before needing to re-run the test. Addressed in [#24850](https://github.com/cypress-io/cypress/issues/24850).\n\n**Bugfixes:**\n\n*   When a Cloud user is a part of multiple Cloud organizations, the [Connect to Cloud setup](https://docs.cypress.io/guides/cloud/getting-started#Set-up-a-project-to-record) now shows the correct organizational prompts when connecting a new project. Fixes [#25520](https://github.com/cypress-io/cypress/issues/25520).\n*   Fixed an issue where Cypress would fail to load any specs if the project `specPattern` included a resource that could not be accessed due to filesystem permissions. Fixes [#24109](https://github.com/cypress-io/cypress/issues/24109).\n*   Fixed an issue where the Debug page would display a different number of specs for in-progress runs than the in-progress specs reported in Cypress Cloud. Fixes [#25647](https://github.com/cypress-io/cypress/issues/25647).\n*   Fixed an issue in middleware where error-handling code could itself generate an error and fail to report the original issue. Fixes [#22825](https://github.com/cypress-io/cypress/issues/22825).\n*   Fixed an regression introduced in Cypress [12.3.0](#12-3-0) where custom browsers that relied on process environment variables were not found on macOS arm64 architectures. Fixed in [#25753](https://github.com/cypress-io/cypress/pull/25753).\n\n**Misc:**\n\n*   Improved the UI of the Debug page. Addresses [#25664](https://github.com/cypress-io/cypress/issues/25664), [#25669](https://github.com/cypress-io/cypress/issues/25669), [#25665](https://github.com/cypress-io/cypress/issues/25665), [#25666](https://github.com/cypress-io/cypress/issues/25666), and [#25667](https://github.com/cypress-io/cypress/issues/25667).\n*   Updated the Debug page sidebar badge to to show 0 to 99+ failing tests, increased from showing 0 to 9+ failing tests, to provide better test failure insights. Addresses [#25662](https://github.com/cypress-io/cypress/issues/25662).\n\n**Dependency Updates:**\n\n*   Upgrade [`debug`](https://www.npmjs.com/package/debug) to `4.3.4`. Addressed in [#25699](https://github.com/cypress-io/cypress/pull/25699).\n\n## 12.5.1[​](#12-5-1 \"Direct link to 12.5.1\")\n\n_Released 02/2/2023_\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in Cypress [12.5.0](#12-5-0) where the `runnable` was not included in the [`test:after:run`](https://docs.cypress.io/api/cypress-api/catalog-of-events) event. Fixes [#25663](https://github.com/cypress-io/cypress/issues/25663).\n\n**Dependency Updates:**\n\n*   Upgraded [`simple-git`](https://github.com/steveukx/git-js) from `3.15.0` to `3.16.0` to address this [security vulnerability](https://github.com/advisories/GHSA-9p95-fxvg-qgq2) where Remote Code Execution (RCE) via the clone(), pull(), push() and listRemote() methods due to improper input sanitization was possible. Addressed in [#25603](https://github.com/cypress-io/cypress/pull/25603).\n\n## 12.5.0[​](#12-5-0 \"Direct link to 12.5.0\")\n\n_Released 01/31/2023_\n\n**Features:**\n\n*   Easily debug failed CI test runs recorded to the Cypress Cloud from your local Cypress app with the new Debug page. Please leave any feedback [here](https://github.com/cypress-io/cypress/discussions/25649). Your feedback will help us make decisions to improve the Debug experience. For more details, see [our blog post](https://on.cypress.io/debug-page-release). Addressed in [#25488](https://github.com/cypress-io/cypress/pull/25488).\n\n**Performance:**\n\n*   Improved memory consumption in `run` mode by removing reporter logs for successful tests. Fixes [#25230](https://github.com/cypress-io/cypress/issues/25230).\n\n**Bugfixes:**\n\n*   Fixed an issue where alternative Microsoft Edge Beta, Canary, and Dev binary versions were not being discovered by Cypress. Fixes [#25455](https://github.com/cypress-io/cypress/issues/25455).\n\n**Dependency Updates:**\n\n*   Upgraded [`underscore.string`](https://github.com/esamattis/underscore.string/blob/HEAD/CHANGELOG.markdown) from `3.3.5` to `3.3.6` to reference rebuilt assets after security patch to fix regular expression DDOS exploit. Addressed in [#25574](https://github.com/cypress-io/cypress/pull/25574).\n\n## 12.4.1[​](#12-4-1 \"Direct link to 12.4.1\")\n\n_Released 01/27/2023_\n\n**Bugfixes:**\n\n*   Fixed a regression from Cypress [12.4.0](#12-4-0) where Cypress was not exiting properly when running multiple Component Testing specs in `electron` in `run` mode. Fixes [#25568](https://github.com/cypress-io/cypress/issues/25568).\n\n**Dependency Updates:**\n\n*   Upgraded [`ua-parser-js`](https://github.com/faisalman/ua-parser-js) from `0.7.24` to `0.7.33` to address this [security vulnerability](https://github.com/faisalman/ua-parser-js/security/advisories/GHSA-fhg7-m89q-25r3) where crafting a very-very-long user-agent string with specific pattern, an attacker can turn the script to get stuck processing for a very long time which results in a denial of service (DoS) condition. Addressed in [#25561](https://github.com/cypress-io/cypress/pull/25561).\n\n## 12.4.0[​](#12-4-0 \"Direct link to 12.4.0\")\n\n_Released 1/24/2023_\n\n**Features:**\n\n*   Added official support for Vite 4 in component testing. Addresses [#24969](https://github.com/cypress-io/cypress/issues/24969).\n*   Added new [`experimentalMemoryManagement`](https://docs.cypress.io/guides/references/experiments#Configuration) configuration option to improve memory management in Chromium-based browsers. Enable this option with `experimentalMemoryManagement=true` if you have experienced \"Out of Memory\" issues. Please leave any feedback around `experimentalMemoryManagement` [here](https://github.com/cypress-io/cypress/discussions/25557). Your feedback will help us make decisions to improve memory issues. Addresses [#23391](https://github.com/cypress-io/cypress/issues/23391).\n*   Added new [`experimentalSkipDomainInjection`](https://docs.cypress.io/guides/references/experiments#Experimental-Skip-Domain-Injection) configuration option to disable Cypress from setting `document.domain` on injection, allowing users to test Salesforce domains. If you believe you are having `document.domain` issues, please see the [`experimentalSkipDomainInjection`](https://docs.cypress.io/guides/references/experiments#Experimental-Skip-Domain-Injection) guide. This config option is end-to-end only. Addresses [#2367](https://github.com/cypress-io/cypress/issues/2367), [#23958](https://github.com/cypress-io/cypress/issues/23958), [#24290](https://github.com/cypress-io/cypress/issues/24290), and [#24418](https://github.com/cypress-io/cypress/issues/24418).\n*   The [`.as`](https://docs.cypress.io/api/commands/as) command now accepts an options argument, allowing an alias to be stored as type \"query\" or \"static\" value. This is stored as \"query\" by default. Addresses [#25173](https://github.com/cypress-io/cypress/issues/25173).\n*   The `cy.log()` command will now display a line break where the `\\n` character is used. Addresses [#24964](https://github.com/cypress-io/cypress/issues/24964).\n*   [`component.specPattern`](https://docs.cypress.io/guides/references/configuration#component) now utilizes a JSX/TSX file extension when generating a new empty spec file if project contains at least one file with those extensions. This applies only to component testing and is skipped if [`component.specPattern`](https://docs.cypress.io/guides/references/configuration#component) has been configured to exclude files with those extensions. Addresses [#24495](https://github.com/cypress-io/cypress/issues/24495).\n*   Added support for the `data-qa` selector in the [Selector Playground](https://docs.cypress.io/api/cypress-api/selector-playground-api) in addition to `data-cy`, `data-test` and `data-testid`. Addresses [#25305](https://github.com/cypress-io/cypress/issues/25305).\n\n**Bugfixes:**\n\n*   Fixed an issue where component tests could incorrectly treat new major versions of certain dependencies as supported. Fixes [#25379](https://github.com/cypress-io/cypress/issues/25379).\n*   Fixed an issue where new lines or spaces on new lines in the Command Log were not maintained. Fixes [#23679](https://github.com/cypress-io/cypress/issues/23679) and [#24964](https://github.com/cypress-io/cypress/issues/24964).\n*   Fixed an issue where Angular component testing projects would fail to initialize if an unsupported browserslist entry was specified in the project configuration. Fixes [#25312](https://github.com/cypress-io/cypress/issues/25312).\n\n**Misc**\n\n*   Video output link in `cypress run` mode has been added to its own line to make the video output link more easily clickable in the terminal. Addresses [#23913](https://github.com/cypress-io/cypress/issues/23913).\n\n## 12.3.0[​](#12-3-0 \"Direct link to 12.3.0\")\n\n_Released 1/03/2023_\n\n**Features:**\n\n*   Added support for mapping the `CYPRESS_PULL_REQUEST_ID`, `CYPRESS_PULL_REQUEST_URL`, and/or `CYPRESS_CI_BUILD_URL` environment variables to the the corresponding Cloud run. This provides workarounds when supported CI provider mappings are incorrect or unsupported CI providers are used. Addressed in [#25036](https://github.com/cypress-io/cypress/pull/25036).\n*   Added new Cypress API, [`Cypress.currentRetry`](https://docs.cypress.io/api/cypress-api/currentretry), to easily access the current test retry count. Addresses [#25239](https://github.com/cypress-io/cypress/pull/25239).\n\n**Performance:**\n\n*   Increased the pre-request proxy cleanup interval. The previous cleanup interval was too aggressive for projects loading a large number of JS modules, causing applications to load very slowly and in chunks. Fixed in [#25209](https://github.com/cypress-io/cypress/pull/25209).\n*   Fixed an issue where browsers distributed as universal binaries (Chrome, Firefox) on M1 Macs could be launched in the wrong architecture, resulting in poor performance in-browser. Fixed in [#25014](https://github.com/cypress-io/cypress/pull/25014).\n*   Resolved a delay that could occur on startup when using a custom Cypress configuration file location in projects with a transitive `typescript` dependency. Fixes [#24781](https://github.com/cypress-io/cypress/issues/24781).\n\n**Bugfixes:**\n\n*   Fixes an issue where component test files that contained characters, such as brackets (`[]`), would be ignored when running tests. This is a common pattern in Next.js and Gatsby.js projects. Fixes [#24588](https://github.com/cypress-io/cypress/issues/24588).\n*   Updated the Jenkins environment variable mappings so pull request data is correctly linked to the corresponding Cloud run. Fixed in [#25036](https://github.com/cypress-io/cypress/pull/25036).\n*   Fixed a regression in [`10.11.0`](#10-11-0) where the mocha test results no longer sent the pending boolean to reporters. This caused the [`mochaawesome`](https://www.npmjs.com/package/mochawesome) reporter to incorrectly report pending tests as pending and skipped. Fixes [#24477](https://github.com/cypress-io/cypress/issues/24477).\n*   Fix for regression introduced in [`12.1.0`](#12-1-0), where [`.contains()`](https://docs.cypress.io/api/commands/contains) could return multiple elements instead of one element when it was matching directly on the subject, rather than on the subject's children. Fixes [#25225](https://github.com/cypress-io/cypress/issues/25225).\n*   Fixed a small visual bug in the Test Runner such that Chrome users will no longer see a white border on the nav bar at the specific zoom levels. Fixes [#25284](https://github.com/cypress-io/cypress/issues/25284).\n\n**Misc**\n\n*   Remove the redundant `Need help` link from the migration information modal because the modal provides in-depth details for users already. Addresses [#21923](https://github.com/cypress-io/cypress/issues/21923).\n*   Minor UI updates were make to truncate the browser's name when it exceeds the allocated space and to only show the browsers's major version in the UI. Addresses [#21730](https://github.com/cypress-io/cypress/issues/21730) and [#21755](https://github.com/cypress-io/cypress/issues/21755).\n*   Removed the line break that was displayed on the Settings page when a configuration value was an empty object. Addresses [#21790](https://github.com/cypress-io/cypress/issues/21790).\n\n**Dependency Updates:**\n\n*   Upgraded [`engine.io`](https://www.npmjs.com/package/engine.io) from `5.2.1` to `6.2.1` to address this [security vulnerability](https://github.com/socketio/engine.io/security/advisories/GHSA-r7qp-cfhv-p84w) where a specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. Addressed in [#23843](https://github.com/cypress-io/cypress/issues/23843).\n*   Upgraded [`express`](https://www.npmjs.com/package/express) from `4.17.1` to `4.17.3` to address this [NVD security vulnerability](https://nvd.nist.gov/vuln/detail/CVE-2022-24999). Addressed in [#23843](https://github.com/cypress-io/cypress/issues/23843).\n*   Upgraded [`simple-git`](https://www.npmjs.com/package/simple-git) from `3.4.0` to `3.15.0` to address this [NVD security vulnerability](https://nvd.nist.gov/vuln/detail/CVE-2022-25912). Addressed in [#23843](https://github.com/cypress-io/cypress/issues/23843).\n\n## 12.2.0[​](#12-2-0 \"Direct link to 12.2.0\")\n\n_Released 12/20/2022_\n\n**Features:**\n\n*   Added the ability to match on `resourceType` with [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept), and to see the resource type of an intercepted request as `req.resourceType`. Addresses [#14525](https://github.com/cypress-io/cypress/issues/14525).\n*   Users working in React Component Testing projects can now generate a basic spec file from the components that exist in their project. Addresses [#24008](https://github.com/cypress-io/cypress/issues/24008).\n\n**Performance:**\n\n*   Fixed a regression introduced in the Electron browser in [Cypress 10.8.0](#10-8-0) where the `CYPRESS_EVERY_NTH_FRAME` environment variable was not being set appropriately causing all frames to be captured which slowed down tests. Fixes [#23830](https://github.com/cypress-io/cypress/issues/23830).\n\n**Bugfixes:**\n\n*   Fixed an issue where the `query` object was not available on requests from [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) once they were yielded. Fixes [#25088](https://github.com/cypress-io/cypress/issues/25088).\n*   Fixed an issue with Angular Component Testing where urls within SASS/SCSS files were not being correctly resolved which could result in incomplete styling. Fixes [#24272](https://github.com/cypress-io/cypress/issues/24272).\n*   Fixed a regression introduced in [Cypress 12](#12-0-0) where [`cy.get()`](https://docs.cypress.io/api/commands/get) would ignore a `null` value for the `withinSubject` option. Fixes [#25104](https://github.com/cypress-io/cypress/issues/25104).\n*   Fixed an issue where an unhandled promise rejection would display an incomplete error message in the command log. Fixes [#24915](https://github.com/cypress-io/cypress/issues/24915).\n*   Fixed an issue where the incorrect Cypress version could be shown in the migration wizard. Fixes [#25138](https://github.com/cypress-io/cypress/issues/25138).\n*   Fixed an issue where the Cypress migration wizard would fail to run in [global mode](https://docs.cypress.io/guides/guides/command-line#cypress-open-global) on newer versions of Cypress. Addressed in [#25138](https://github.com/cypress-io/cypress/issues/25138).\n*   Fixed an issue with Angular Component Testing where a custom [`sourceRoot`](https://angular.io/guide/workspace-config#project-configuration-options) configuration would not be respected. Fixes [#24827](https://github.com/cypress-io/cypress/issues/24827).\n*   Fixed TypeScript typings for [`cy.nextUntil()`](https://docs.cypress.io/api/commands/nextuntil) to include the `filter` parameter. Fixes [#24772](https://github.com/cypress-io/cypress/issues/24772).\n\n## 12.1.0[​](#12-1-0 \"Direct link to 12.1.0\")\n\n_Released 12/12/2022_\n\n**Features:**\n\n*   Added [`cy.getAllCookies()`](https://docs.cypress.io/api/commands/getallcookies) and [`cy.clearAllCookies()`](https://docs.cypress.io/api/commands/clearallcookies), which get and clear cookies for all browser cookies across any domains. Addresses [#24265](https://github.com/cypress-io/cypress/issues/24265), [#8956](https://github.com/cypress-io/cypress/issues/8956), and [#408](https://github.com/cypress-io/cypress/issues/408).\n*   Updated the error messaging to provide more context when parallel group parameters are mismatched when sent to the Cypress Cloud. Fixes [#24734](https://github.com/cypress-io/cypress/issues/24734).\n\n**Bugfixes:**\n\n*   Fixed an issue with the `cy.session` command where it now recollects the session data after validation is successful to correctly store the full browser context before the command ends. Addressed with [#25112](https://github.com/cypress-io/cypress/pull/25112).\n*   Fixed an issue where recent versions of Firefox in headless mode would behave inconsistently with headed. Fixes [#24900](https://github.com/cypress-io/cypress/issues/24900).\n*   Fixed an issue where [`.select(index)`](https://docs.cypress.io/api/commands/select#Index) would fail when multiple `<option>` elements have the same value property. Fixes [#24739](https://github.com/cypress-io/cypress/issues/24739).\n*   Cleaned up temp files generated by `cypress run`. Addressed by [#24957](https://github.com/cypress-io/cypress/pull/24957)\n*   The Chrome web security configuration tooltip will now be shown only if [`chromeWebSecurity`](https://docs.cypress.io/guides/guides/web-security#Disabling-Web-Security) is set to false when using a non-chromium browser. Fixes [#23846](https://github.com/cypress-io/cypress/issues/23846).\n*   Fixed an issue where updating a component would not trigger the `supportFile` to reload imported stylesheets. This is fixed by doing a full reload for Vite, to ensure the spec re-runs correctly with the latest styles. Fixes [#24874](https://github.com/cypress-io/cypress/issues/24874).\n*   The [Run All Specs experiment](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing) will now open in a new tab rather than close and reopen the browser. This will make the run faster and help mitigate [#21743](https://github.com/cypress-io/cypress/issues/21743). Fixes [#24919](https://github.com/cypress-io/cypress/issues/24919).\n\n## 12.0.2[​](#12-0-2 \"Direct link to 12.0.2\")\n\n_Released 12/08/2022_\n\n**Bugfixes:**\n\n*   Fixed a regression in [12.0.0](#12-0-0) where [`.contains()`](https://docs.cypress.io/api/commands/contains) received multiple elements as a subject, it only searched inside the first one. Fixes [#25025](https://github.com/cypress-io/cypress/issues/25025)\n*   Fixed a regression in [12.0.0](#12-0-0) around [`.contains()`](https://docs.cypress.io/api/commands/contains) where if the subject was a `<form>` element, it would only consider the first `<input>` element in the form, rather than every child. Fixes [#25019](https://github.com/cypress-io/cypress/issues/25019)\n\n## 12.0.1[​](#12-0-1 \"Direct link to 12.0.1\")\n\n_Released 12/06/2022_\n\n**Bugfixes:**\n\n*   Fixed a regression in [11.2.0](#11-2-0) where a stale spec search pattern was shown in the spec search bar after re-launching Cypress. Fixes [#24936](https://github.com/cypress-io/cypress/issues/24936)\n*   Fixed a regression in [12.0.0](#12-0-0) where tests scaffolded into new projects were using a removed api. Fixed in [#25006](https://github.com/cypress-io/cypress/pull/25006)\n*   Fixed regression in [12.0.0](#12-0-0) where setting `e2e.testIsolation=false` caused invalid configuration validation when running `cypress run --component`. Fixes [#25007](https://github.com/cypress-io/cypress/issues/25007)\n*   Fixed a regression introduced in [12.0.0](#12-0-0) that sometimes does not allow cy.origin() to communicate correctly with the navigated to domain. Fixes [#25010](https://github.com/cypress-io/cypress/issues/25010)\n\n## 12.0.0[​](#12-0-0 \"Direct link to 12.0.0\")\n\n_Released 12/06/2022_\n\n**Summary:**\n\nThe Session and Origin Experiment is now generally available for end-to-end testing. This means Cypress now fully supports:\n\n*   Testing multiple origins in a single test with the new [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command.\n*   Caching and restoring cookies, [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage), and [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) between tests\n*   Configuring [`testIsolation`](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) in suites to define whether or not the browser context is cleaned or persisted between tests\n\nAdditionally in this release, enhancements were made to how Cypress manages DOM element resolution to reduce the likelihood of hitting detached DOM errors due to maintaining stale DOM references. We've updated our [Retry-ability Guide](https://docs.cypress.io/guides/core-concepts/retry-ability) with all the details if you'd like to learn more.\n\nRead more about 12.0 in [our blog post](https://on.cypress.io/cypress-12-release).\n\n**Breaking Changes:**\n\n*   Cypress dropped support for Node.js 12, 15 and 17. Those versions have reached end-of-life. Installing Cypress on your system now requires Node.js 14, 16 or 18+. Addressed in [#24885](https://github.com/cypress-io/cypress/pull/24885).\n*   Cypress has always recommended writing tests in a clean context. In Cypress 12, we enforce running tests in a clean browser context through [test isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation). This option is configurable, but is enabled by default. Whether enabled or disabled, this changes how Cypress cleans up the browser context before each test and you may experience test errors with this upgrade. To better understand the full impact of this change, please review the [migration guide](https://docs.cypress.io/guides/references/migration-guide#Test-Isolation).\n    *   In Cypress v12, the `testIsolation` configuration values have changed from `on` or `off` to `true` or `false`. Addressed in [#24935](https://github.com/cypress-io/cypress/pull/24935).\n*   The `experimentalSessionAndOrigin` configuration option has been removed and all functionality associated with this experiment is now enabled by default, with the exception of using `require` and `import` with callback supplied to the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command. To leverage external dependencies in `cy.origin()` callbacks, set the new [`e2e.experimentalOriginDependencies`](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing) configuration option to `true`. Addresses [#21471](https://github.com/cypress-io/cypress/issues/21471).\n*   The `Cookies.defaults` and `Cookies.preserveOnce` APIs have been removed. Use the new [`cy.session()`](https://docs.cypress.io/api/commands/session) command to preserve cookies between tests. Addresses [#21472](https://github.com/cypress-io/cypress/issues/21472).\n*   The `cy.server()` and `cy.route()` commands have been removed. Additionally, the corresponding `Cypress.Server.defaults` API has also been removed. Use the \\[`cy.intercept()`(/api/commands/intercept) command to stub network responses and requests. Addresses [#22126](https://github.com/cypress-io/cypress/issues/22126).\n*   The Cookie commands now uses the `hostname` as the domain by default instead of the `superdomain`. This change aligns Cypress' cookie rules with the browser cookie rules. This may affect what cookies are returned by [`cy.getCookie()`](https://docs.cypress.io/api/commands/getcookie), what cookies are set with [`cy.setCookie()`](https://docs.cypress.io/api/commands/setcookie), and the cookies cleared with [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies). Addresses [#363](https://github.com/cypress-io/cypress/issues/363), [#5723](https://github.com/cypress-io/cypress/issues/5723) and [#24526](https://github.com/cypress-io/cypress/issues/24526).\n*   The [`.within()`](https://docs.cypress.io/api/commands/within) command now requires a single subject and throws an error if given more than one subject. This change adds consistency around how `.within()` behaves across commands. Previously some commands inside a `.within()` callback would silently select the first element, while others would use all of the previously yielded subjects, and others would throw an error. Addressed in [#24975](https://github.com/cypress-io/cypress/pull/24975).\n*   Cypress now throws an error if any Cypress commands are invoked from inside a [`.should()`](https://docs.cypress.io/api/commands/should) callback. This previously resulted in unusual and undefined behavior. Addresses [#5963](https://github.com/cypress-io/cypress/issues/5963), [#14656](https://github.com/cypress-io/cypress/issues/14656) and [#22587](https://github.com/cypress-io/cypress/issues/22587).\n*   The [`.invoke()`](https://docs.cypress.io/api/commands/invoke) command now throws an error if the invoked function returns a promise. If you wish to call a method that returns a promise and wait for it to resolve, use [`.then()`](https://docs.cypress.io/api/commands/then) instead of `.invoke()`. Addressed in [#24417](https://github.com/cypress-io/cypress/pull/24417).\n*   The [`cy.request()`](https://docs.cypress.io/api/commands/request) command now uses [`querystringify`](https://www.npmjs.com/package/querystringify) to stringify & parse the `qs` options. This change aligns with how the [`cy.visit()`](https://docs.cypress.io/api/commands/visit) command generates urls with query parameters. Addressed in [#20302](https://github.com/cypress-io/cypress/pull/20302).\n\n**Features:**\n\n*   Added a new configuration option called `testIsolation`, which defaults to `true`. This option can be set at the `e2e` or suite-level to determine whether or not [test isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) is enabled to ensure a clean browser context between tests. Addressed in [#22230](https://github.com/cypress-io/cypress/pull/22230).\n*   The previously experimental Cypress command, [`cy.origin()`](https://docs.cypress.io/api/commands/origin), is now generally available in end-to-end testing. This command allows testing multiple origins in a single test. Addresses [#17336](https://github.com/cypress-io/cypress/issues/17336).\n*   The previously experimental Cypress command, [`cy.session()`](https://docs.cypress.io/api/commands/session), is now generally available. This command caches and restores `cookies`, [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage), and [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) in order to recreate a consistent browser context between tests. Addresses [#20977](https://github.com/cypress-io/cypress/issues/20977).\n*   Added a new Cypress command, [`cy.getAllLocalStorage()`](https://docs.cypress.io/api/commands/getalllocalstorage), to get [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) data for all origins with which the test has interacted. Addresses [#24276](https://github.com/cypress-io/cypress/issues/24276).\n*   Added a new Cypress command, [`cy.clearAllLocalStorage()`](https://docs.cypress.io/api/commands/clearalllocalstorage), to clear [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) data for all origins with which the test has interacted. Addresses [#24276](https://github.com/cypress-io/cypress/issues/24276).\n*   Added a new Cypress command, [`cy.getAllSessionStorage()`](https://docs.cypress.io/api/commands/getallsessionstorage), to get [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) data for all origins with which the test has interacted. Addresses [#24276](https://github.com/cypress-io/cypress/issues/24276).\n*   Added a new Cypress command, [`cy.clearAllSessionStorage()`](https://docs.cypress.io/api/commands/clearallsessionstorage), to clear [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) data for all origins with which the test has interacted. Addresses [#24276](https://github.com/cypress-io/cypress/issues/24276).\n*   Added a new configuration option called [`experimentalOriginDependencies`](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing), which defaults to `false`. This option enables support for `require` and `import` within the callback supplied to the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command in end-to-end testing. Previously this feature was enabled through the `experimentalSessionAndOrigin` configuration option. `experimentalOriginDependencies` was added as a configuration option in Cypress 12, instead of being enabled by default, due to increased Node.js memory usage associated with this option that needs to be addressed before making this behavior generally available. See issue [#24976](https://github.com/cypress-io/cypress/issues/24976) for more information. Addressed in [#24931](https://github.com/cypress-io/cypress/pull/24931).\n*   Added a new `Cypress.ensure` API which provides several methods that can be helpful when writing customs commands. Addressed in [#24697](https://github.com/cypress-io/cypress/pull/24697).\n*   Added a new \"Run All\" button to the [`experimentalRunAllSpecs`](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing) experiment which enables running all spec files returned from the `specPattern` glob or an array of globs, regardless of the specs sharing a root folder. Addresses [#24759](https://github.com/cypress-io/cypress/issues/24759).\n*   Further improved bundling in the binary to reduce startup and unzip time. Addressed in [#24909](https://github.com/cypress-io/cypress/pull/24909)\n\n**Bugfixes:**\n\n*   Fixed a regression in [10.11.0](#10-11-0) where the Launchpad no longer showed a loading spinner on startup to indicate that it had successfully started and was in a loading state. Fixed [#24950](https://github.com/cypress-io/cypress/issues/24950).\n*   Fixed the \"Create Spec from Component\" capability to correctly scaffold the component spec from a component which contains special characters in its name. Before this change, a spec was scaffolded with either the wrong spec name or the incorrect component import which led to invalid JS errors. Fixes [#23492](https://github.com/cypress-io/cypress/issues/23492).\n*   Corrected Cypress environment variable resolution to correctly resolve environment variables set with `npm config set`. Fixes [#24556](https://github.com/cypress-io/cypress/issues/24556).\n*   When [`experimentalRunAllSpecs=true`](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing), the \"Run N specs\" directory-level buttons in the Inline Specs List now function correctly when activated by the keyboard. Fixes [#24762](https://github.com/cypress-io/cypress/pull/24762).\n*   Fixed unexpected behaviors when verifying a cookie was not returned from [`cy.getCookie()`](https://docs.cypress.io/api/commands/getcookie). Now it's possible to explicitly assert the cookie did not exist with `cy.getCookie('foo1').should('not.exist')`. Previously users had to verify cookies properties did not exist with `.its('value').should('equal', null)`. Addressed in [#24203](https://github.com/cypress-io/cypress/pull/24203).\n*   Fixed the console output returned from clicking on an aliased intercept in the Command Log. It now logs the yielded request/response object associated to the intercepted call when clicked, where previously it did not log these details. Fixed in [#24623](https://github.com/cypress-io/cypress/pull/24623).\n\n## 11.2.0[​](#11-2-0 \"Direct link to 11.2.0\")\n\n_Released 11/22/2022_\n\n**Features:**\n\n*   Re-implemented the 'Run All Specs' for End to End Testing for running multiple tests sequentially in open mode. This feature had been previously removed in Cypress 10.0. Enable 'Run All Specs' with the new experimental flag, [`experimentalRunAllSpecs`](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing). Please leave any feedback around 'Run All Specs' [here](https://github.com/cypress-io/cypress/discussions/21628). Your feedback will help us make product decisions around the future of this feature. Addresses [#24168](https://github.com/cypress-io/cypress/issues/24168)\n*   Added messaging after failures in CI to direct people to set up recording to the Cypress Cloud if they are not already set up to do so. Addresses [#24000](https://github.com/cypress-io/cypress/issues/24000).\n*   Visually warn in the Command Log when the [`cy.session()`](https://docs.cypress.io/api/commands/session) command fails to restore a session to surface to users potential issues with their setup and validation. Addresses [#24207](https://github.com/cypress-io/cypress/issues/24207).\n\n**Bugfixes:**\n\n*   The [`cy.session()`](https://docs.cypress.io/api/commands/session) command no longer clears the page between setup and validation and will now always clear the page at the end of the command when test isolation is on. Fixes [#21397](https://github.com/cypress-io/cypress/issues/21397).\n\n## 11.1.0[​](#11-1-0 \"Direct link to 11.1.0\")\n\n_Released 11/14/2022_\n\n**Features:**\n\n*   Next.js v13 is now supported. [#24396](https://github.com/cypress-io/cypress/pull/24396)\n*   `mount()` now accepts an extensions.directives option, which will be registered globally for Vue2 component testing. [#24488](https://github.com/cypress-io/cypress/pull/24488)\n\n**Bugfixes:**\n\n*   Fixed an 11.0.0 regression where the migration workflow would error and hang for TypeScript projects. Fixes [#24643](https://github.com/cypress-io/cypress/issues/24643)\n*   Fixed an 11.0.0 regression where `cypress run` crashed when using the junit reporter and an assertion failed. Fixes [#24652](https://github.com/cypress-io/cypress/issues/24652)\n*   Fixed TypeScript types for `testIsolation`. Fixes [#23911](https://github.com/cypress-io/cypress/issues/23911)\n*   Sessions will no longer be stored if validation fails which will prevent a previously failed session from being restored in the next test. Fixes [#24208](https://github.com/cypress-io/cypress/issues/24208)\n\n**Experimental Breaking Changes:**\n\n*   Updates were made to enhance the cy.session() recovered error experience. With this change, cy.session() will no longer fail validation when false is returned from the validate callback. Fixes [#21398](https://github.com/cypress-io/cypress/issues/21398), [#24205](https://github.com/cypress-io/cypress/issues/24205), and [#24593](https://github.com/cypress-io/cypress/issues/24593).\n\n## 11.0.1[​](#11-0-1 \"Direct link to 11.0.1\")\n\n_Released 11/09/2022_\n\n**Bugfixes:**\n\n*   Fixed an 11.0.0 regression that caused enabling `experimentalSessionAndOrigin` to throw a webpack error. Fixes [#24611](https://github.com/cypress-io/cypress/issues/24611)\n*   Fixed an 11.0.0 regression where using custom reporters would cause Cypress to throw a 'Cannot find module' error. Fixes [#24607](https://github.com/cypress-io/cypress/issues/24607)\n*   Fixed `testIsolation` configuration validation to allow configuration updates without restarting Cypress. Fixes [#24497](https://github.com/cypress-io/cypress/issues/24497).\n*   Fixed an issue where `cy.origin()` would not prevent users from setting up `same-superdomain-origin` `cy.origin()` blocks. In these cases `cy.origin()` is not required and users would be better served by not using the command. Fixes [#24169](https://github.com/cypress-io/cypress/issues/24169)\n*   Fixed an 11.0.0 regression where modifying the currently loaded component testing spec in open mode does not trigger a rerun of the spec. Fixed by [#24630](https://github.com/cypress-io/cypress/pull/24630)\n\n## 11.0.0[​](#11-0-0 \"Direct link to 11.0.0\")\n\n_Released 11/08/2022_\n\n**Summary:**\n\nComponent Testing is now generally available for projects using React, Next.js, Angular, and Vue!\n\nComponent tests allow you to see and test your application's components in a real browser as you work. You can use your favorite Cypress commands and features to develop your components without running your whole app. Learn more in our [blog](https://on.cypress.io/cypress-11-release) post.\n\nWe have also massively improved our startup performance by shipping a snapshot of our binary instead of the source files. The performance boost applies to the time it takes from running a cypress command (e.g. `cypress open`) to when the Cypress app is opened. Results will vary based on your situation, but we saw up to 84% faster startup times!\n\n**Breaking Changes:**\n\n**Read our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide#Migrating-to-Cypress-110) which explains the breaking changes in more detail.**\n\n###### Component Testing:[​](#Component-Testing \"Direct link to Component Testing:\")\n\n*   Removed `cssFile`, `cssFiles`, `style`, `styles`, `stylesheet`, and `stylesheets` from the `options` argument to the `cy.mount()` function. We recommend writing test-specific styles in a separate `css` file you import in your test, or in your `supportFile`. See [migration guide](https://docs.cypress.io/guides/references/migration-guide#Changes-to-Mounting-Options). Addresses [#24328](https://github.com/cypress-io/cypress/issues/24328).\n*   Subsequent `cy.mount` calls within the same test will remove the last mounted component from the DOM. Addresses [#24329](https://github.com/cypress-io/cypress/issues/24329).\n*   `mountHook` from `cypress/react` has been removed. We recommend replacing it with `mount` and a component. See [migration guide](https://docs.cypress.io/guides/references/migration-guide#React---mountHook-Removed). Addresses [#24328](https://github.com/cypress-io/cypress/issues/24328).\n*   `unmount` from `cypress/react` has been removed. We recommend using the API React provides for unmounting components, [unmountComponentAtNode](https://reactjs.org/docs/react-dom.html#unmountcomponentatnode). See [migration guide](https://docs.cypress.io/guides/references/migration-guide#React---unmount-Removed). Addresses [#24328](https://github.com/cypress-io/cypress/issues/24328).\n*   `mountCallback` from `cypress/vue` has been removed. We recommend using `mount`. See [migration guide](https://docs.cypress.io/guides/references/migration-guide#Vue---mountCallback-Removed). Addresses [#24328](https://github.com/cypress-io/cypress/issues/24328).\n*   `mount` from `cypress/vue` now returns an object with both the VueWrapper (wrapper) and the component instance (component). Addresses [#24342](https://github.com/cypress-io/cypress/issues/24342).\n*   When providing an inline `viteConfig` inside of `cypress.config`, any `vite.config.js` file is not automatically merged. See [migration guide](https://docs.cypress.io/guides/references/migration-guide#Vite-Dev-Server-cypressvite-dev-server). Addresses [#24133](https://github.com/cypress-io/cypress/issues/24133).\n*   Angular providers passed as part of the mounting options will be assigned at the module level using the `TestBed.configureTestingModule` API. This means that module-level providers (resolved from imports or `@Injectable({ providedIn: 'root' })` can be overridden, but providers specified in `@Component({ providers: [...] })` will not be overridden when using `cy.mount(MyComponent, { providers: [...] })`. To override component-level providers, use the `TestBed.overrideComponent` API. See [migration guide](https://docs.cypress.io/guides/references/migration-guide#Angular---Providers-Mounting-Options-Change). Addresses [#24047](https://github.com/cypress-io/cypress/issues/24047) and [#23427](https://github.com/cypress-io/cypress/issues/23427).\n\n###### General:[​](#General \"Direct link to General:\")\n\n*   Communication with the Cypress Dashboard will now verify CAs and reject any unauthorized calls. If you use a self-signed CA you will need to set `npm_config_ca`, `npm_config_cafile`, or `NODE_EXTRA_CA_CERTS`. Addresses [#23980](https://github.com/cypress-io/cypress/issues/23980).\n\n###### Experimental:[​](#Experimental \"Direct link to Experimental:\")\n\n*   [`cy.session()`](https://docs.cypress.io/api/commands/session) now requires a setup command to use the command. Addresses [#24311](https://github.com/cypress-io/cypress/issues/24311).\n\n**Features:**\n\n*   Incorporated V8 snapshots into the build process of the Electron binary to improve startup time and reduce the time to download and unzip the binary during installation. Startup time is the time from running a command to when Cypress's window is first opened. Addresses [#18480](https://github.com/cypress-io/cypress/issues/18480).\n*   `cy.getCookie()`, `cy.getCookies()`, `cy.setCookie()`, `cy.clearCookie()`, and `cy.clearCookies()` now accept a domain option. Addresses [#24264](https://github.com/cypress-io/cypress/issues/24264).\n\n**Bugfixes:**\n\n*   Fix types associated with `cy.mount()` that were incorrectly typed as `any`. Fixes [#24330](https://github.com/cypress-io/cypress/issues/24330).\n*   The `cy.mount()` snapshot now shows the mounted component instead of a blank page. Fixes [#24138](https://github.com/cypress-io/cypress/issues/24138).\n*   \"Open in IDE\" is no longer displayed in the command log for component tests. Fixes [#24366](https://github.com/cypress-io/cypress/issues/24366).\n*   Cypress now correctly handles CSVs and other non-html MIME types. Fixes [#24297](https://github.com/cypress-io/cypress/issues/24297).\n*   Cypress now supports project directories mounted on read-only file systems. Fixes [#2064](https://github.com/cypress-io/cypress/issues/2064).\n*   Snapshots now capture the AUT correctly when it has navigated away. Fixes [#24506](https://github.com/cypress-io/cypress/issues/24506).\n*   `cy.pause()` now functions correctly when called within the `cy.origin()` callback. Fixes [#21495](https://github.com/cypress-io/cypress/issues/21495).\n*   When utilizing dependencies within the `cy.origin()` callback, errors now show the correct code frame. Fixes [#23365](https://github.com/cypress-io/cypress/issues/23365).\n*   The select dropdown (in Front-end Framework, Bundler, Organization, Project, Preferred Editor) now highlights and adds a checkmark to the selected option. Fixes [#21768](https://github.com/cypress-io/cypress/issues/21768).\n*   The failure icon in the reporter header now displays correctly when there are a large number of successful tests. Fixes [#21838](https://github.com/cypress-io/cypress/issues/21838).\n*   Cypress now allows more than twenty sessions to be created in a single test. Fixed in [#24379](https://github.com/cypress-io/cypress/pull/24379).\n\n## 10.11.0[​](#10-11-0 \"Direct link to 10.11.0\")\n\n_Released 10/25/2022_\n\n**Features:**\n\n*   [`cy.session()`](https://docs.cypress.io/api/commands/session) is now supported when using [WebKit (Experimental)](https://docs.cypress.io/guides/guides/launching-browsers#WebKit-Experimental) and `experimentalSessionAndOrigin` is enabled. Addresses [#24116](https://github.com/cypress-io/cypress/issues/24116), [#23832](https://github.com/cypress-io/cypress/issues/23832).\n*   Improves user experience when connecting a project to the Dashboard. Addresses [#23379](https://github.com/cypress-io/cypress/issues/23379), [#23766](https://github.com/cypress-io/cypress/issues/23766), [#23767](https://github.com/cypress-io/cypress/issues/23767).\n    *   Users will be prompted to connect a project to the Dashboard when logging in from the Cypress Launchpad after a testing type has been selected.\n    *   Users will be prompted to record runs to the Dashboard from both the Cypress App and Cypress Launchpad if a project is connected to the Dashboard and has no recorded runs.\n\n**Bugfixes:**\n\n*   When a chromium based browser tab or process crashes, Cypress will no longer hang indefinitely but will fail the current test and move on to the next. [#6170](https://github.com/cypress-io/cypress/issues/6170).\n*   Fixed as issue where browser-skipped tests were incorrectly recorded to the Dashboard which resulted in the Dashboard marking the test as \"new\" or \"modified\" when it already existed. Fixes [#23517](https://github.com/cypress-io/cypress/issues/23517).\n*   Fixed issue connecting to the cloud when a self-signed cert was in the cert chain. Fixes [#24298](https://github.com/cypress-io/cypress/issues/24298).\n*   [`cy.origin()`](https://docs.cypress.io/api/commands/origin) now supports more than 30 unique origin spec bridges per test. Fixes [#22874](https://github.com/cypress-io/cypress/issues/22874), [#23967](https://github.com/cypress-io/cypress/issues/23967).\n*   Fixed an issue where `document.cookie` would not reflect the correct value in cross-origin tests. Fixes [#23531](https://github.com/cypress-io/cypress/issues/23531).\n*   Cypress will now restart on changes to the `blockHosts` configuration entry. Fixes [#22634](https://github.com/cypress-io/cypress/issues/22634).\n*   When shown the command to record runs to the cloud, the user can select and copy parts of the command (like the record key), instead of only being able to use the \"Copy\" button to copy the entire command. Fixes [#22091](https://github.com/cypress-io/cypress/issues/22091).\n*   Cleaned up inconsistencies in the UI between sentence case and title case. Fixes [#21854](https://github.com/cypress-io/cypress/issues/21854).\n*   Fixed an issue where there is a visible \"Project ID\" section (with no `projectId`) when user has not connected to the Dashboard. [#21806](https://github.com/cypress-io/cypress/issues/21806).\n\n**Experimental Breaking Changes:**\n\n*   [`cy.origin()`](https://docs.cypress.io/api/commands/origin) now supports using `require()` and dynamic `import()` to include dependencies. `Cypress.require()` has been removed. Addresses [#24293](https://github.com/cypress-io/cypress/issues/24293).\n*   The way that Cypress handles [test isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) has changed. The previous modes of `legacy` and `strict` have been replaced with `on` and `off`. Fixes [#24206](https://github.com/cypress-io/cypress/issues/24206).\n    *   The default mode is `on` when [`experimentalSessionAndOrigin`](https://docs.cypress.io/guides/references/experiments) is enabled.\n    *   The [cy.session()](https://docs.cypress.io/api/commands/session) command now inherits the test isolation behavior for the suite it runs in.\n\n## 10.10.0[​](#10-10-0 \"Direct link to 10.10.0\")\n\n_Released 10/11/2022_\n\n**Features:**\n\n*   [`cy.origin()`](https://docs.cypress.io/api/commands/origin)'s URL argument must be an exact origin match to the origin of the AUT. Addresses [#23999](https://github.com/cypress-io/cypress/issues/23999), [#23814](https://github.com/cypress-io/cypress/issues/23814), [#24085](https://github.com/cypress-io/cypress/issues/24085), [#22882](https://github.com/cypress-io/cypress/issues/22882), and [#17166](https://github.com/cypress-io/cypress/issues/17166).\n*   More accurately send/set cookies in [`cy.origin()`](https://docs.cypress.io/api/commands/origin) when `experimentalSessionAndOrigin` is enabled. Addresses [#23551](https://github.com/cypress-io/cypress/issues/23551), [#22670](https://github.com/cypress-io/cypress/issues/22670), and [#23603](https://github.com/cypress-io/cypress/issues/23603).\n*   Cypress will no longer watch files when executing component tests in \"run\" mode. Addresses [#22959](https://github.com/cypress-io/cypress/issues/22959).\n\n**Bugfixes:**\n\n*   Cypress is now able to connect to Firefox v105. Fixes [#23897](https://github.com/cypress-io/cypress/issues/23897).\n*   Cypress component tests now correctly load assets with Angular. Fixes [#23797](https://github.com/cypress-io/cypress/issues/23797).\n*   Imports in component testing support files are no longer tree-shaken by Webpack. Fixes [#24117](https://github.com/cypress-io/cypress/issues/24117).\n*   [`cy.session()`](https://docs.cypress.io/api/commands/session) commands will correctly fail when the setup function has a failing command or assertion. Fixes [#21399](https://github.com/cypress-io/cypress/issues/21399).\n*   `ngOnChanges` is now called after mounting an Angular component in component testing. Fixes [#23591](https://github.com/cypress-io/cypress/issues/23591).\n*   Code frames for Vite project stack traces now point to the correct lines of source code. Fixes [#23919](https://github.com/cypress-io/cypress/issues/23919).\n*   Uncaught exceptions are now only handled once in component testing. Fixes [#23920](https://github.com/cypress-io/cypress/issues/23920).\n*   Nuxt and Angular component tests now fail on uncaught exceptions. Fixes [#24122](https://github.com/cypress-io/cypress/pull/24122).\n*   Command log messages are once again being truncated to 50 lines. Fixes [#23995](https://github.com/cypress-io/cypress/issues/23995).\n\n**Dependency Updates:**\n\n*   Upgraded Electron from v19 to v21. Addressed in [#23843](https://github.com/cypress-io/cypress/issues/23843).\n\n## 10.9.0[​](#10-9-0 \"Direct link to 10.9.0\")\n\n_Released 9/27/2022_\n\n**Features:**\n\n*   Added support for requiring dependencies within the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) callback. See the [`cy.origin()`](https://docs.cypress.io/api/commands/origin#Dependencies--Sharing-Code) docs for more information.\n*   Added support for visiting cross-origin pages outside of a [`cy.origin()`](https://docs.cypress.io/api/commands/origin) callback. See the [`cy.origin()`](https://docs.cypress.io/api/commands/origin#Alternative-navigation) and [`cy.visit()`](https://docs.cypress.io/api/commands/visit#Visiting-cross-origin-sites) docs for more information and caveats. Addresses [#21485](https://github.com/cypress-io/cypress/issues/21485), [#22282](https://github.com/cypress-io/cypress/issues/22282), [#21300](https://github.com/cypress-io/cypress/issues/21300), and [#23236](https://github.com/cypress-io/cypress/issues/23236).\n*   Added support for re-using session data cached by [`cy.session()`](https://docs.cypress.io/api/commands/session) across specs via the `cacheAcrossSpecs` option. Addresses [#17710](https://github.com/cypress-io/cypress/issues/17710).\n*   Added support for advanced dev server configuration via an async function that can optionally modify the dev server config. Addresses [#23302](https://github.com/cypress-io/cypress/issues/23302).\n*   Launch options returned from the [`before:browser:launch`](https://docs.cypress.io/api/plugins/browser-launch-api) event can now include an `env` key that can be used to pass environment variables to the browser when it is launched. Addressed by [#23624](https://github.com/cypress-io/cypress/pull/23624).\n*   Component tests that fail now display a code frame of the source location of the error within the Cypress reporter. Addresses [#21720](https://github.com/cypress-io/cypress/issues/21720).\n\n**Bugfixes:**\n\n*   The spec results printed stdout after a test run now show the path to the spec and not just the file name. Fixes [#22304](https://github.com/cypress-io/cypress/issues/22304).\n*   The viewport dropdown in the Cypress App now displays the correct text. Fixes [#23789](https://github.com/cypress-io/cypress/issues/23789).\n*   Compile errors are now surfaced in the command log during tests for Angular and Next projects. Fixes [#23219](https://github.com/cypress-io/cypress/issues/23219).\n*   The error \"Automatic publicPath is not supported in this browser\" will no longer be displayed when using Webpack 5 and dynamic imports. Fixes [#18435](https://github.com/cypress-io/cypress/issues/18435).\n*   The correct source control link is now sent to the Cypress Dashboard for failed specs when the cypress config file is not the project root. Fixes [#22971](https://github.com/cypress-io/cypress/issues/22971).\n*   The error \"Invalid left-hand-side in assignment\" will no longer be thrown when the `experimentalModifyObstructiveThirdPartyCode` flag is enabled. Fixes [#23647](https://github.com/cypress-io/cypress/issues/23647).\n*   `it.skip` now functions correctly in Angular component tests. Fixes [#23409](https://github.com/cypress-io/cypress/issues/23409).\n*   The `tsConfig` build option is now respected for Angular component tests. Fixes [#23673](https://github.com/cypress-io/cypress/issues/23673).\n*   Configuring a custom browser no longer logs a warning when trying to use that browser. Addressed in [#23446](https://github.com/cypress-io/cypress/pull/23446).\n\n**Misc:**\n\n*   Improved the accessibility of a few components within the Cypress Launchpad and App. Addressed in [#23745](https://github.com/cypress-io/cypress/pull/23745).\n*   Improved the UI of the Sessions instrument panel in the Cypress reporter. Addresses [#21400](https://github.com/cypress-io/cypress/issues/21400).\n\n## 10.8.0[​](#10-8-0 \"Direct link to 10.8.0\")\n\n_Released 9/13/2022_\n\n**Features:**\n\n*   You can now run tests in WebKit, Safari's browser engine, by enabling the [`experimentalWebKitSupport`](https://docs.cypress.io/guides/references/experiments) experiment and installing [`playwright-webkit`](https://www.npmjs.com/package/playwright-webkit). For more details, read [our blog post](https://www.cypress.io/blog/2022/09/13/cypress-10-8-experimental-run-tests-in-webkit). Addresses [#6422](https://github.com/cypress-io/cypress/issues/6422).\n\n**Performance:**\n\n*   Several minor changes were made to reduce Cypress's memory footprint in the browser in an attempt to improve test times and reduce the likelihood of crashing the launched browser under test. Addressed in [#23708](https://github.com/cypress-io/cypress/pull/23708), [#23729](https://github.com/cypress-io/cypress/pull/23729), [#23737](https://github.com/cypress-io/cypress/pull/23737), and [#23738](https://github.com/cypress-io/cypress/pull/23738).\n\n**Bugfixes:**\n\n*   The Dashboard will now correctly show whether a video of the spec was uploaded to review. Before this change, the Dashboard would shows the error message `The media could not be loaded` when a passing test's video was not uploaded because `videoUploadOnPasses` was `false`. Fixes [#2939](https://github.com/cypress-io/cypress/issues/2939).\n*   Fixed an issue where the stack traces in `run` mode did not match the stack traces shown in `open` mode. Now, in the terminal, users will see the source map line and column number in the error stack trace. Fixes [#7715](https://github.com/cypress-io/cypress/issues/7715).\n*   Fixed a bug where projects using Node.js 16.17+ and 18.6+ with ES Modules and TypeScript were not working with Cypress. Fixes [#22795](https://github.com/cypress-io/cypress/issues/22795), [#23393](https://github.com/cypress-io/cypress/issues/23393), and [#23552](https://github.com/cypress-io/cypress/issues/23552).\n*   When searching for specs we now normalize OS-specific path separators so that Windows users can use back- and forward-slashes. Fixes [#23426](https://github.com/cypress-io/cypress/issues/23426).\n*   Fixed an regression introduced in Cypress [10.3.0](#10-3-0), and further exposed in [10.4.0](#10-4-0), that omitted `same-site` cookies when the URL Scheme, Domain, and Top Level Domain matched, but the ports are different (i.e. same-site). Fixes [#23132](https://github.com/cypress-io/cypress/issues/23132).\n*   Autoscrolling of the command log can no longer become disabled in `run` mode. This fixes an issue observed where the reporter randomly stops scrolling during a video recording and the Command log details are not visible. Fixes [#16098](https://github.com/cypress-io/cypress/issues/16098) and [#22199](https://github.com/cypress-io/cypress/issues/22199).\n*   The `cypress/react18` [`cy.mount()`](https://docs.cypress.io/guides/component-testing/react/overview) command's yielded rerender function has been updated to only create one `ReactDom.Root` element. This fixes the issue where state did not persist between rerenders, and all lifecycle hooks were reran when executed. Fixes [#23357](https://github.com/cypress-io/cypress/issues/23357).\n*   Fixed a regression introduced in Cypress [10.0.0](#10-0-0) where Cypress was incompatible with Chrome v64 - v70. Fixes [#23509](https://github.com/cypress-io/cypress/issues/23509).\n*   Fixes an issue where outdated organization and project information could be shown in dialogs when connecting a project to the Cypress Dashboard. Fixes [#23538](https://github.com/cypress-io/cypress/issues/23538).\n*   The `Sec-Fetch-Dest` [metadata request header](https://developer.mozilla.org/en-US/docs/Glossary/Fetch_metadata_request_header) is now set to `document` when the request is sent from the Application Under Test when the [`experimentalModifyObstructiveThirdPartyCode`](https://docs.cypress.io/guides/references/experiments#Configuration) experiment is enabled. This was updated to prevent Google Authentication from returning `403 forbidden` in Edge and Electron. Fixes [#23720](https://github.com/cypress-io/cypress/pull/23720).\n*   Correctly override the Electron `userAgent`when the [`userAgent`](https://docs.cypress.io/guides/references/configuration#Browser) configuration option is provided or [`experimentalModifyObstructiveThirdPartyCode`](https://docs.cypress.io/guides/references/experiments#Configuration) experiment is enabled. Fixes [#23597](https://github.com/cypress-io/cypress/issues/23597).\n*   Fix regression introduced by Cypress [10.0.0](#10-0-0) where the `before:spec` plugin event was not triggered in `open` mode when the [`experimentalInteractiveRunEvents`](https://docs.cypress.io/guides/references/experiments#Configuration) experiment was enabled. Fixed #22360.\n*   Fixed a regression introduced in [10.4.0](#10-4-0) where referencing an aliased custom command would return undefined. Fixes [#23652](https://github.com/cypress-io/cypress/issues/23652).\n*   Users can now log into the Dashboard from the \"Choose a browser\" page of the Launchpad even if a browser is not open. Fixes [#23779](https://github.com/cypress-io/cypress/issues/23779).\n*   Fixed a bug where the `cypress/svelte` [`cy.mount()`](https://docs.cypress.io/guides/component-testing/svelte/overview) command was not logging by default. Fixed in [#23771](https://github.com/cypress-io/cypress/pull/23771).\n*   Fixed an issue where setting the [`testIsolation`](https://docs.cypress.io/guides/references/configuration#Global) configuration at the suite-level would throw on the second test. Fixes [#23644](https://github.com/cypress-io/cypress/issues/23644).\n*   Removed misleading dependency warning in Launchpad for Next.js applications using component testing. Fixes [#23598](https://github.com/cypress-io/cypress/pull/23598).\n*   Added [`modifyObstructiveCode`](https://docs.cypress.io/guides/references/configuration#Browser) TypeScript types. Fixes [#22146](https://github.com/cypress-io/cypress/issues/22146).\n*   Assertions will no longer 'vibrate' in the command log when asserting on the text of elements with trailing whitespace. Fixed in [#23727](https://github.com/cypress-io/cypress/pull/23727).\n\n**Misc:**\n\n*   There were some minor improvements made to the UI when configuration files are created for a project when using the Project Setup workflow. Addressed in [#21847](https://github.com/cypress-io/cypress/issues/21847), [#23260](https://github.com/cypress-io/cypress/issues/23260) and [#23710](https://github.com/cypress-io/cypress/issues/23710).\n\n## 10.7.0[​](#10-7-0 \"Direct link to 10.7.0\")\n\n_Released 8/30/2022_\n\n**Features:**\n\n*   Re-introduces the experimental [Cypress Studio feature](https://docs.cypress.io/guides/references/cypress-studio). Cypress Studio provides a visual way to generate tests within Cypress by recording interactions against the application under test. Cypress Studio is available only in end-to-end tests, and must be enabled via the `e2e.experimentalStudio` flag. For more details, read [our blog post](https://www.cypress.io/blog/2022/08/30/how-to-use-studio-in-cypress-10-7). Addresses [#23461](https://github.com/cypress-io/cypress/issues/23461).\n*   Adds [Svelte](https://svelte.dev/) component testing support. This feature is being released as an Alpha, meaning there may be breaking changes in future Cypress releases. Addresses [#23037](https://github.com/cypress-io/cypress/issues/23037).\n*   The \"Latest Runs\" and \"Average Duration\" columns in the specs list now provide actions when hovered over to assist with the process of connecting the project to the Cypress Dashboard. Addresses [#22932](https://github.com/cypress-io/cypress/issues/22932).\n*   Informational banners were added to display instructions to assist with connecting projects to the Cypress Dashboard and recording a first test run. Users who don't plan to use the Cypress Dashboard can dismiss the banners to prevent seeing them in the future. Addresses [#22933](https://github.com/cypress-io/cypress/issues/22933), [#22934](https://github.com/cypress-io/cypress/issues/22934), [#22798](https://github.com/cypress-io/cypress/issues/22798), and [#22935](https://github.com/cypress-io/cypress/issues/22935).\n*   Vue.js projects with a custom spec pattern configuration can now use the \"Create Spec from Component\" capability introduced in v10.5.0. Addresses [#23071](https://github.com/cypress-io/cypress/issues/23071).\n*   Angular component testing projects can provide a custom configuration to the Webpack dev server using the [`projectConfig`](https://docs.cypress.io/guides/component-testing/angular/overview#Options-API) key. This enables support for projects that don't adhere to Angular CLI conventions. Addresses [#23161](https://github.com/cypress-io/cypress/issues/23161).\n*   The Cypress `clock` can now be set to a new time using the `setSystemTime` function. Addresses [#15424](https://github.com/cypress-io/cypress/issues/15424).\n\n**Performance:**\n\n*   The `cy.session()` command's behavior has been enhanced to no longer clear the dom after a validation function runs. This means a `cy.visit()` command is no longer required after running `cy.session()` when a validation function is used. Addresses [#22368](https://github.com/cypress-io/cypress/issues/22368).\n\n**Bugfixes:**\n\n*   Fixed an issue where Cypress could crash if a websocket upgrade request was made over HTTPS. Fixes [#22217](https://github.com/cypress-io/cypress/issues/22217).\n*   Fixed an issue where filtering with the `--spec` CLI flag in run mode option would not find any specs if the project was located at the root directory of a file system. Fixes [#23380](https://github.com/cypress-io/cypress/issues/23380).\n*   Fixed an issue where projects using Angular `v14.2.0` and above would be unable to run component tests. Fixes [#23585](https://github.com/cypress-io/cypress/issues/23585).\n*   Fixed an issue where snapshots performed in XHR requests could reflect the primary domain instead of current domain. Fixes [#21496](https://github.com/cypress-io/cypress/issues/21496).\n*   An update was made to correctly track Github Actions retries in the Cypress Dashboard. Previously retries data was not being recorded. Addressed in [#23445](https://github.com/cypress-io/cypress/pull/23445).\n*   Fixed an issue where an internal TypeScript type was exposed globally. Fixes [#23333](https://github.com/cypress-io/cypress/pull/23333).\n*   Fixed an issue where an incomplete [`component.devServer`](https://docs.cypress.io/guides/references/configuration#devServer) configuration would cause the specs list to not display in the Cypress App when running Component Tests in open mode. Fixes [#23486](https://github.com/cypress-io/cypress/issues/23486).\n\n**Miscellaneous:**\n\n*   Display a default icon in the browser selection menu for browsers without bundled icons. Fixes [#21766](https://github.com/cypress-io/cypress/issues/21766).\n\n## 10.6.0[​](#10-6-0 \"Direct link to 10.6.0\")\n\n_Released 8/16/2022_\n\n**Features:**\n\n*   Introduced a new Cypress experiment, [`experimentalSingleTabRunMode`](https://docs.cypress.io/guides/references/experiments), for Component Testing. When enabled, all specs will execute in a single tab, similar to the execution behavior observed in Component Testing alpha in Cypress 9, which can improve `run` mode performance, but can impact spec isolation and reliability on large test suites. Addresses [#22353](https://github.com/cypress-io/cypress/issues/22353).\n*   Enhanced the [`CYPRESS_DOWNLOAD_PATH_TEMPLATE`](https://docs.cypress.io/guides/references/advanced-installation#Environment-variables) environment variable interpolation to accept and replace `${version}` to allow version-specific download paths to be honored. Addresses [#5141](https://github.com/cypress-io/cypress/issues/5141), [#16976](https://github.com/cypress-io/cypress/issues/16976), and [#22864](https://github.com/cypress-io/cypress/issues/22864).\n\n**Bugfixes:**\n\n*   Fixed an issue where the Firefox browser was not downloading files to the expected directory in Windows. Fixes [#17896](https://github.com/cypress-io/cypress/issues/17896).\n*   Fixed an issue in `cy.session()` where the unique session id logic was not persisting registered session ids, which incorrectly allowed session ids to override previously used session ids with different setups. Fixes [#22381](https://github.com/cypress-io/cypress/issues/22381).\n*   Fixed an issue where absolute path glob manipulation was incorrectly breaking `supportFile` and `specPattern` glob patterns that contained deep instances of the working directory. Fixes [#23361](https://github.com/cypress-io/cypress/issues/23361).\n*   Fixed an issue with the Specs list search that prevented full path matching. Fixes [#22463](https://github.com/cypress-io/cypress/issues/22463) and [#21879](https://github.com/cypress-io/cypress/issues/21879).\n*   Fixed an issue where Specs list popovers would not display a spec's full filename. Fixes [#23064](https://github.com/cypress-io/cypress/issues/23064).\n\n## 10.5.0[​](#10-5-0 \"Direct link to 10.5.0\")\n\n_Released 8/15/2022_\n\n**Features:**\n\n*   Display a 'flaky test' indicator in the Specs Explorer for specs that are known to be flaky in the Dashboard. Addresses [#22656](https://github.com/cypress-io/cypress/issues/22656) & [#22657](https://github.com/cypress-io/cypress/issues/22657).\n*   The project drop down is now populated when connecting a project with an organization that only has one project. Addresses [#22936](https://github.com/cypress-io/cypress/issues/22936).\n*   Added new `testIsolation` configuration option to allow users to revert to `legacy` mode when `experimentalSessionAndOrigin` is set to true. Read more about [test isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) in Cypress to learn more. Addresses [#22279](https://github.com/cypress-io/cypress/issues/22279).\n*   React 18 projects will now be scaffolded with the `cypress/react18` mount registration during component setup. Addresses [#23033](https://github.com/cypress-io/cypress/issues/23033).\n*   A list of Vue components in the project are now available for selection when generating a new spec for component testing in projects that are using the default spec pattern. Addresses [#22836](https://github.com/cypress-io/cypress/issues/22836).\n*   If the user logs in to the Dashboard from the app, but the current project does not have a project ID, the user will now be able to enter the connect project workflow directly. Addresses [#23022](https://github.com/cypress-io/cypress/issues/23022)\n*   Adds Angular component testing support, including Angular template support and support for Angular standalone components. Addresses [#22819](https://github.com/cypress-io/cypress/issues/22819).\n\n**Bugfixes:**\n\n*   Fixes an issue where usage of the `--spec` option would result in no specs found if the absolute project path included glob pattern characters. Fixes [#22272](https://github.com/cypress-io/cypress/issues/22272).\n*   Webpack entry points are no longer preserved for CT Webpack projects. Fixes [#23224](https://github.com/cypress-io/cypress/issues/23224)\n*   Fixes an issue where session state was not being reset when changing between specs in open mode. Fixes [#23146](https://github.com/cypress-io/cypress/pull/23146)\n*   Add delay to header tooltips so they don't pop open unless hovered on. Fixes [#23115](https://github.com/cypress-io/cypress/issues/23115)\n*   Fixed an edge-case bug where Cypress would hang in run-mode if an error was thrown from a `test:before:run` event handler. Fixes [#23039](https://github.com/cypress-io/cypress/issues/23039).\n*   Fixes an issue introduced in `10.3.0` where network logs could be missing certain information or cause certain requests to be delayed by 500ms. Fixes [#23227](https://github.com/cypress-io/cypress/pull/23227).\n*   In the 'Create Blank Spec' dialog, pressing enter or return when the focus is on the spec path input field will create the blank spec. Fixes [#21815](https://github.com/cypress-io/cypress/issues/21815).\n*   Fixes React 18 unmount component handling to resolve the `lastMountedReactDom.unmountComponentAtNode is not a function` error. Fixes [#23081](https://github.com/cypress-io/cypress/issues/23081).\n*   Fixes a regression introduced in Cypress 10.0 where Cypress no longer persisted the spec filter in the 'Search Specs' field during a session and when a project is reopened. The same filter will be used in the main specs list as well as the inline specs list present in the Test Runner. Fixes [#21837](https://github.com/cypress-io/cypress/issues/21837).\n*   Fixed an issue that could lead to infinite recursion and thus a crash when running tests that make use of `cy.intercept()`. Fixes [#22693](https://github.com/cypress-io/cypress/issues/22693).\n*   In the Launchpad, the project's name will no longer link to the 'Choose Testing Type' step of the launchpad. Fixes [#21911](https://github.com/cypress-io/cypress/issues/21911).\n*   CT projects using Vite `v3` work with Node versions `>=17`. Fixes [#23042](https://github.com/cypress-io/cypress/issues/23042) & [#23114](https://github.com/cypress-io/cypress/issues/23114).\n\n**Miscellaneous:**\n\n*   Updated UI styling for Cypress `about:blank` pages. Addresses [#20978](https://github.com/cypress-io/cypress/issues/20978).\n*   Stable Firefox versions 101 and 102 are now explicitly rendered as unsupported in Windows due to an unpatched browser incompatibility in those versions. Addresses [#23164](https://github.com/cypress-io/cypress/issues/23164).\n*   Add a warning for users on the old React API, `cypress/react`, who are using React 18. Users can now take advantage of the React 18 integration, `cypress/react18`. Addresses [#23032](https://github.com/cypress-io/cypress/issues/23032).\n*   `cy.state('subject')` is deprecated and reading from it will log a warning to the console. Prefer `cy.currentSubject()` instead. Addresses [#23092](https://github.com/cypress-io/cypress/issues/23092).\n\n## 10.4.0[​](#10-4-0 \"Direct link to 10.4.0\")\n\n_Released 8/2/2022_\n\n**Features:**\n\n*   Cypress Component testing now supports React 18 via the cypress/react18 package. Addresses [#21381](https://github.com/cypress-io/cypress/issues/21381) & [#21946](https://github.com/cypress-io/cypress/issues/21946).\n*   Cypress Component testing now supports Vite 3. Addresses [#22784](https://github.com/cypress-io/cypress/issues/22784).\n*   Cypress introduces a new experimental flag, called `experimentalModifyObstructiveThirdPartyCode`. When enabled, `experimentalModifyObstructiveThirdPartyCode` will turn on additional `modifyObstructiveCode` options to prevent frame busting, as well as striping integrity tags out of `<link>` and `<script>` elements and remove the electron user agent. In the current state of this experimental flag, SRI is not supported. Addresses [#21476](https://github.com/cypress-io/cypress/issues/21476), [#21307](https://github.com/cypress-io/cypress/issues/21307), [#22953](https://github.com/cypress-io/cypress/issues/22953), & [#21474](https://github.com/cypress-io/cypress/issues/21474).\n*   Cypress will now display a banner with a corrective action when your project uses a projectId that cannot be found in the Cypress Dashboard and when you do not have access to the current project in the Cypress Dashboard. Addresses [#22637](https://github.com/cypress-io/cypress/issues/22637).\n\n**Bugfixes:**\n\n*   Fixes issue where cookies were not handled within cy.origin for requests other than the AUT page request. Fixes [#22952](https://github.com/cypress-io/cypress/issues/22952) & [#21474](https://github.com/cypress-io/cypress/issues/21474).\n*   Tooltips are now correctly displayed behind modals. Fixes [#22595](https://github.com/cypress-io/cypress/issues/22595).\n*   Fixed a hang when sending video to the dashboard from the electron browser. Fixes [#17627](https://github.com/cypress-io/cypress/issues/17627).\n*   Cypress will now throw an error when we receive an unexpected return value from a custom config file. Fixes [#21948](https://github.com/cypress-io/cypress/issues/21948).\n*   Cypress will now warn when detecting unsupported dependencies for component testing. Fixes [#22025](https://github.com/cypress-io/cypress/issues/22025).\n*   cy.type() can now be used to enter datetime values with seconds, to an input of type datetime-local, for example 1959-09-13T10:12:13. Fixes [#22884](https://github.com/cypress-io/cypress/issues/22884).\n*   Next.js in Cypress is now allowed to import global styles. Fixes [#22525](https://github.com/cypress-io/cypress/issues/22525)\n*   Fixed an issue where 'additionalIgnorePattern' was not allowed to be an array of strings. [#22551](https://github.com/cypress-io/cypress/issues/22551).\n*   Prevented timer size from changing while counting up. Fixes [#22846](https://github.com/cypress-io/cypress/pull/22846).\n*   Added icons to help indicate that column headers provide more information on hover. Fixes [#22638](https://github.com/cypress-io/cypress/issues/22638).\n*   Fixed an issue where long \"run urls\" are cut off in the console. Fixes [#22619](https://github.com/cypress-io/cypress/pull/22619).\n\n**Dependency Updates:**\n\n*   Upgraded electron from 18.3.0 to 19.0.8. Addressed in [#22775](https://github.com/cypress-io/cypress/pull/22775).\n*   Upgraded bundled Node.js version from 16.13.2 to 16.14.2. Addressed in [#22775](https://github.com/cypress-io/cypress/pull/22775).\n*   Upgraded bundled Chromium version from 100.0.4896.75 to 102.0.5005.148. Addressed in [#22775](https://github.com/cypress-io/cypress/pull/22775).\n\n## 10.3.1[​](#10-3-1 \"Direct link to 10.3.1\")\n\n_Released 7/19/2022_\n\n**Bugfixes:**\n\n*   Fixed an issue where file watchers were not completely closed prior to the Cypress App quitting, causing crashes on exit in some macOS environments. Fixes [#22026](https://github.com/cypress-io/cypress/issues/22026).\n*   Fixed issues with reloading user configuration after it is updated. Fixes [#21785](https://github.com/cypress-io/cypress/issues/21785) and [#22389](https://github.com/cypress-io/cypress/issues/22389).\n*   Fixed issues with `document.cookie` when testing multiple origins. Fixes [#22479](https://github.com/cypress-io/cypress/issues/22479) and [#22674](https://github.com/cypress-io/cypress/issues/22674).\n*   Fixed an issue retrieving git information for non-bash Unix shells. Fixes [#22454](https://github.com/cypress-io/cypress/issues/22454).\n*   Fixed an issue that prevented displayed \"Last Updated\" information on Windows for git repositories without a commit history. Addressed in [#22741](https://github.com/cypress-io/cypress/issues/22741).\n*   Fixed styling of the Latest Runs tooltip to keep it centered over the latest run entry. Fixes [#22629](https://github.com/cypress-io/cypress/issues/22629) and [#22598](https://github.com/cypress-io/cypress/issues/22598).\n*   Fixed styling issues with the Specs Explorer at narrow viewport widths. Fixes [#22626](https://github.com/cypress-io/cypress/issues/22626).\n*   Fixed a visual issue in the reporter where special characters would be incorrectly formatted with markdown. Fixes [#5679](https://github.com/cypress-io/cypress/issues/5679).\n*   Fixed an issue where the Proxy-Authorization header included capitalization that would fail with certain proxies. Fixes [#22383](https://github.com/cypress-io/cypress/issues/22383).\n*   Added `react-dom` as a required dependency when setting up a React project for Component Testing. Fixes [#22371](https://github.com/cypress-io/cypress/issues/22371).\n*   The Spec Runner will no longer overflow unexpectedly in Firefox in certain situations. Fixes [#21881](https://github.com/cypress-io/cypress/issues/21881) and [#22610](https://github.com/cypress-io/cypress/issues/22610).\n*   Fixed a regression where the `CYPRESS_NO_COMMAND_LOG` environment variable was not honored. Fixes [#21721](https://github.com/cypress-io/cypress/issues/21721) and [#21271](https://github.com/cypress-io/cypress/issues/21271).\n*   Using `cy.contains()` with a regular expression now matches submit-type input labels correctly. Fixes [#21166](https://github.com/cypress-io/cypress/issues/21166).\n*   Prevent printing \"Class WebSwapCGLLayer is implemented in both\" warning in stdout. Fixes [#21615](https://github.com/cypress-io/cypress/issues/21615).\n*   Fixed the pluralization of Match(es) under Project Settings. Fixes [#21728](https://github.com/cypress-io/cypress/issues/21728).\n*   Fixed a regression where absolute elements were not properly blacked out in screenshots. Fixes [#22173](https://github.com/cypress-io/cypress/issues/22173).\n\n**Miscellaneous:**\n\n*   Improved keyboard navigation for Latest Runs data in the Specs Explorer. Addresses [#22628](https://github.com/cypress-io/cypress/issues/22628).\n*   Improved accessibility and styling around Specs Explorer tooltips. Addresses [#22597](https://github.com/cypress-io/cypress/issues/22597).\n*   Improved the styling and behavior of the Copy button seen in the Migration workflows. Addresses [#21860](https://github.com/cypress-io/cypress/issues/21860) and [#21862](https://github.com/cypress-io/cypress/issues/21862).\n*   Improved the layout of the Launchpad Docs dropdown when the viewport is narrow. Addresses [#21842](https://github.com/cypress-io/cypress/issues/21842).\n*   Removed autocomplete from certain inputs in the Cypress App. Addresses [#22102](https://github.com/cypress-io/cypress/issues/22102).\n*   Removed the Projects breadcrumb from the Launchpad when not in global mode. Addresses [#21771](https://github.com/cypress-io/cypress/issues/21771).\n*   Added padding to the bottom of the projects list in the Launchpad. Addresses [#21724](https://github.com/cypress-io/cypress/issues/21724).\n*   Improved the display of the \"Record your first run\" banner at smaller widths. Addresses [#21856](https://github.com/cypress-io/cypress/issues/21856).\n*   The Cypress App's sidebar will now automatically collapse at narrow widths. Addressed in [#22393](https://github.com/cypress-io/cypress/issues/22393).\n*   Improved punctuation consistency and reduced the need to scroll in the Key Differences modal. Addresses [#21852](https://github.com/cypress-io/cypress/issues/21852).\n\n## 10.3.0[​](#10-3-0 \"Direct link to 10.3.0\")\n\n_Released 6/28/2022_\n\n**Features:**\n\n*   Cypress Dashboard test data is now available real-time within Cypress. For more details, read [our blog post](https://www.cypress.io/blog/2022/06/28/cypress-10-3-0-speed-up-testing-workflows-with-improved-visibility-into-your-test-results/). Addressed in [#21250](https://github.com/cypress-io/cypress/issues/21250) and [#22497](https://github.com/cypress-io/cypress/issues/22497).\n*   Added a new clear button to easily clear the search text when filtering specs in the Cypress runner. Fixes [#21686](https://github.com/cypress-io/cypress/issues/21686).\n\n**Bugfixes:**\n\n*   Fixed a memory leak in Chromium-based browsers caused by storing `data:` urls containing base64 encoded files unnecessarily. Fixed [#17853](https://github.com/cypress-io/cypress/issues/17853) and [#22462](https://github.com/cypress-io/cypress/issues/22462).\n*   Updated cross-origin cookie handling to align with browser behavior. This fixed various issues with cookies when testing across multiple origins. Fixed [#21363](https://github.com/cypress-io/cypress/issues/21363) and [#20685](https://github.com/cypress-io/cypress/issues/20685).\n*   Updated Cypress to use posix paths to fix an issue on Windows when a project required `node-ts`. Fixes [#22544](https://github.com/cypress-io/cypress/issues/22544) and [#22297](https://github.com/cypress-io/cypress/issues/22297).\n*   Fixed a 9.x to 10.x migration bug where the migration tool would hang without a response when it attempted to read the `pluginsFile` contents when the `pluginsFile` value was a directory path instead of a relative file path. Fixed [#22461](https://github.com/cypress-io/cypress/issues/22461).\n*   Fixed the process profiler to output Cypress's summarized CPU and memory metrics when the `cypress:server:util:process_profiler` debug stream is enabled. Fixed [#22022](https://github.com/cypress-io/cypress/issues/22022).\n*   Fix styling issue observed when long text was entered in the search when filtering specs in the Cypress runner. Fixes [#21686](https://github.com/cypress-io/cypress/issues/21686).\n*   Corrected the TypeScript types to include `baseUrl` as a valid test config override option. Fixes [#22374](https://github.com/cypress-io/cypress/issues/22374) and [#22072](https://github.com/cypress-io/cypress/issues/22072).\n\n## 10.2.0[​](#10-2-0 \"Direct link to 10.2.0\")\n\n_Released 6/21/2022_\n\n**Features:**\n\n*   Cypress is now available natively on Apple silicon, including the M1 and M2 processor families. For more details, read [our blog post](https://www.cypress.io/blog/2022/06/21/cypress-10-2-0-run-tests-up-to-2x-faster-on-apple-silicon-m1/). Addresses [#19908](https://github.com/cypress-io/cypress/issues/19908).\n*   Cypress is now available natively on ARM64 and AArch64 systems running Linux. Addresses [#4478](https://github.com/cypress-io/cypress/issues/4478).\n*   The file name input field within the Create Spec modal is now automatically focused when the modal is opened. Addresses [#21865](https://github.com/cypress-io/cypress/issues/21865).\n\n**Bugfixes:**\n\n*   Suppressed a misleading Chromium warning about CertVerifyProcBuiltin that would appear when visiting HTTPS sites in Cypress. Fixed [#22128](https://github.com/cypress-io/cypress/discussions/22128).\n*   Users will be able to see the custom reason-phrase in the HTTP response if the custom reason-phrase is set. Otherwise, a default status message is returned based on the corresponding status code as earlier. Fixed [#16973](https://github.com/cypress-io/cypress/issues/16973).\n*   Fixed an issue where Cypress would crash with an EMFILE error if the process ran into the file descriptor limit. Fixed [#22023](https://github.com/cypress-io/cypress/issues/22023).\n*   Fixed an issue causing a \"nohoist config is ignored\" warning when installing cypress with yarn. Fixed [#22147](https://github.com/cypress-io/cypress/issues/22147).\n*   Spec directories and file names on the Specs page are now truncated if they exceed their column width. Fixed [#21895](https://github.com/cypress-io/cypress/issues/21895).\n*   Updated the file links in error views to wrap appropriately and no longer overflow their containers. Fixed [#22103](https://github.com/cypress-io/cypress/issues/22103).\n*   The Cypress v10 introduction video will now be skipped if loading the video takes longer than 3 seconds. Fixed [#21955](https://github.com/cypress-io/cypress/issues/21955).\n*   Updated the warning banner to use language consistent with the rest of the Cypress application. Addressed in [#21551](https://github.com/cypress-io/cypress/pull/21551).\n\n**Dependency Updates:**\n\n*   Upgraded the bundled electron version shipped with Cypress from `18.0.4` to `18.3.0`. Addressed in [#22252](https://github.com/cypress-io/cypress/pull/22252).\n\n## 10.1.0[​](#10-1-0 \"Direct link to 10.1.0\")\n\n_Released 6/10/2022_\n\n**Features:**\n\n*   Cypress will show an improved error message when running `cypress run --ct` when component testing has not been configured. Fixed[#21909](https://github.com/cypress-io/cypress/issues/21909)\n\n**Bugfixes:**\n\n*   Added support for TypeScript projects using `\"type\": \"module\"` using ts-node/esm. Fixed [#22096](https://github.com/cypress-io/cypress/issues/22096), [#21939](https://github.com/cypress-io/cypress/issues/21939), and [#22074](https://github.com/cypress-io/cypress/issues/22074)\n*   Users can now run multiple specs with `cypress run` in headed mode on linux and windows in chrome. Fixed [#22155](https://github.com/cypress-io/cypress/issues/22155)\n*   The baseUrl config option will now restart the Cypress server automatically when it is updated in a Cypress config file. Fixed [#22056](https://github.com/cypress-io/cypress/issues/22056)\n*   The supportFile can now be detected within projects that contain glob syntax characters in their absolute paths. Fixed [#22040](https://github.com/cypress-io/cypress/issues/22040)\n*   Selector Playground \"copy to clipboard\" now copies full command rather than just the selector. Fixed [#22043](https://github.com/cypress-io/cypress/issues/22043)\n*   The clickable area for the specs list has been expanded to include the entire row. Fixed [#22105](https://github.com/cypress-io/cypress/issues/21783)\n*   Removed the trailing period from the \"Learn More\" button. Fixed [#21807](https://github.com/cypress-io/cypress/issues/21807)\n*   Clicking the application under test url will now open the application in another tab. Fixed [#21823](https://github.com/cypress-io/cypress/issues/21823)\n\n## 10.0.3[​](#10-0-3 \"Direct link to 10.0.3\")\n\n_Released 6/3/2022_\n\n**Bugfixes:**\n\n*   Cypress will only watch files that match the provided `specPattern`. Fixed [#22054](https://github.com/cypress-io/cypress/issues/22054)\n*   Cypress will no longer crash when run behind a proxy that blocks Cypress's CDN. Fixed [#22081](https://github.com/cypress-io/cypress/issues/22081)\n*   Contrast increased on inline spec list header items for improved accessibility. Fixed [#21870](https://github.com/cypress-io/cypress/issues/21870)\n*   Updated UI to not show the spec list as selected when in the runner. Fixed [#21873](https://github.com/cypress-io/cypress/issues/21873)\n*   \"Cypress\" is now capitalized step 3 of migration text. Fixed [#21798](https://github.com/cypress-io/cypress/issues/21798)\n*   The browser list in the cypress apps top nav is now scrollable with a large number of browsers. [#22032](https://github.com/cypress-io/cypress/issues/22032)\n*   Newly scaffolded spec files will no longer be generated with as a failing test. Fixed [#21921](https://github.com/cypress-io/cypress/issues/21921)\n*   Cypress will not crash if it fails to access the machine-id on windows. Fixed [#22110](https://github.com/cypress-io/cypress/issues/22110)\n\n## 10.0.2[​](#10-0-2 \"Direct link to 10.0.2\")\n\n_Released 6/2/2022_\n\n**Bugfixes:**\n\n*   Cypress will no longer watch files when in run mode. Fixed [#22054](https://github.com/cypress-io/cypress/issues/22054)\n*   Improved support for esm in windows. Fixed [#22038](https://github.com/cypress-io/cypress/issues/22038)\n*   Improved TypeScript detection in project:\n    *   Ensures TypeScript actually exists (via `require.resolve`) and is specified in dependencies or devDependencies before migrating a project to use it.\n    *   When creating a new project include `*tsconfig.json` glob in algorithm to detect TypeScript.\n    *   When migrating the existing files in the `cypress` folder should be enough info to make the determination.\n    *   No longer includes `.d.ts` files when detecting TypeScript\n    *   Fixed [#22034](https://github.com/cypress-io/cypress/issues/22034), [#22108](https://github.com/cypress-io/cypress/issues/22018), and [#21997](https://github.com/cypress-io/cypress/issues/21997)\n*   Vite dev-server for component testing will not crash if user has vite plugins that rely on non-empty plugins list. Fixed [#22021](https://github.com/cypress-io/cypress/issues/22021)\n*   Post processing ffmpeg is now run at a lower priority. Fixed [#21585](https://github.com/cypress-io/cypress/issues/21585)\n\n## 10.0.1[​](#10-0-1 \"Direct link to 10.0.1\")\n\n_Released 6/1/2022_\n\n**Bugfixes:**\n\n*   The inline spec list is now scrollable. Fixed [#21995](https://github.com/cypress-io/cypress/issues/21995)\n*   `.check()` and `.uncheck()` will now properly remove the indeterminate state from checkboxes. Fixed [#21665](https://github.com/cypress-io/cypress/pull/21665)\n*   An error will no longer throw warning that `cypress` isn't a module after migrating a project's configuration file when using the direct download of Cypress. Fixed [#2199](https://github.com/cypress-io/cypress/issues/21999)\n*   Cypress will now throw a more description error when TypeScript errors are encountered when reading a `cypress.config.ts` file. Addressed in [#22009](https://github.com/cypress-io/cypress/pull/22009), Related to [#21997](https://github.com/cypress-io/cypress/issues/21997) & [#22004](https://github.com/cypress-io/cypress/issues/22004)\n*   We now more correctly handle EPERM errors related to chokidar watching files when there are permission issues. Fixed [#22002](https://github.com/cypress-io/cypress/issues/22002)\n*   The migration step for support file is no longer shown when the user had a custom support file path. Fixed [#22012](https://github.com/cypress-io/cypress/issues/22012)\n*   Styles are now applied correctly after a user views the runs page and returns to the specs list. Fixed [#21931](https://github.com/cypress-io/cypress/issues/21931)\n\n**Misc:**\n\n*   Updated messaging displayed when the `experimentalStudio` configuration is found. Addresses [#22008](https://github.com/cypress-io/cypress/issues/22008)\n\n## 10.0.0[​](#10-0-0 \"Direct link to 10.0.0\")\n\n_Released 6/1/2022_\n\n**Summary:**\n\nComponent testing is now beta! We've also reworked the Cypress app from the ground up to modernize the interface, streamline workflows and integrate better into your overall development experience. Read more about 10.0 in [our blog post](https://cypress.io/blog/2022/06/01/cypress-10-release/).\n\n**Breaking Changes:**\n\nPlease run `cypress open` to go through our interactive migration which will guide you in updating your files and configuration options. Read our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide) which explains some breaking changes in more detail.\\*\\*\n\n*   We introduced several breaking changes to the **Cypress configuration file** detailed below:\n    \n    *   Using a `cypress.json` configuration file is no longer supported. Replace this configuration file with a `cypress.config.js`, `cypress.config.ts`, `cypress.config.cjs` or `cypress.config.mjs` file. This change provides better flexibility and extensibility of configuration. An error will be thrown if both a `cypress.json` file and `cypress.config.{cjs,js,mjs,ts}` file are found. Addressed in [#18221](https://github.com/cypress-io/cypress/pull/18221), [#18300](https://github.com/cypress-io/cypress/pull/18300), [#20554](https://github.com/cypress-io/cypress/pull/20554), and [#20643](https://github.com/cypress-io/cypress/pull/20643).\n    *   A Cypress configuration file is now required and passing the CLI flag `--config-file=false` will throw an error. Addressed in [#20643](https://github.com/cypress-io/cypress/pull/20643).\n    *   A default configuration file will no longer be auto-generated by Cypress when a configuration file doesn't exist. Instead, you can run `cypress open` and set up your project with a specific testing type to have this file generated. This allows you to customize the configuration setup by testing-type for the language and dependencies leveraged in your project.\n    *   The configuration file's JSON schema is no longer supported since the configuration can no longer be provided via a JSON format.\n*   Cypress has made several **configuration option changes** including renaming options, removing options, and only allowing some options within a specific testing type. Please run `cypress open` to have our automated migration update these options for you.\n    \n    *   Many configuration options are now specific to either end-to-end or component testing. The types have also been updated to match the new structure. Addressed in [#20677](https://github.com/cypress-io/cypress/pull/20677).\n    *   The `baseUrl` and `experimentalSessionAndOrigin` configuration options are no longer valid as top-level configuration options and can only be defined within the `e2e` configuration. Addressed in [#20589](https://github.com/cypress-io/cypress/pull/20589) and [#21588](https://github.com/cypress-io/cypress/pull/21588).\n    *   The `supportFile` and `slowTestThreshold` options are no longer valid as top-level configuration options and must now be defined within the `e2e` and/or `component` configurations.\n    *   Previously the `supportFile` option defaulted to `cypress/support/index.js`. Now the [`e2e.supportFile`](https://docs.cypress.io/guides/references/configuration#e2e) option defaults to `cypress/support/e2e.{js,jsx,ts,tsx}` and the [`component.supportFile`](https://docs.cypress.io/guides/references/configuration#component) option defaults to `cypress/support/component.{js,jsx,ts,tsx}`. Addressed in [#19776](https://github.com/cypress-io/cypress/pull/19776) and [#19364](https://github.com/cypress-io/cypress/pull/19364).\n    *   The `pluginsFile` option was removed. This option should be replaced with the new [`setupNodeEvents()`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) and [`devServer()`](https://docs.cypress.io/guides/references/configuration#devServer) configuration options. Addressed in [#18798](https://github.com/cypress-io/cypress/pull/18798) and [#20560](https://github.com/cypress-io/cypress/pull/20560).\n    *   The `testFiles` option was removed. This option was replaced with the new `specPattern` option. Addressed in [#19319](https://github.com/cypress-io/cypress/pull/19319) and [#20565](https://github.com/cypress-io/cypress/pull/20565).\n    *   The `integrationFolder` and `componentFolder` options were removed. These options were made obsolete by the new `specPattern` option. Addressed in [#19319](https://github.com/cypress-io/cypress/pull/19319).\n    *   The `ignoreTestFiles` option was removed. This option was replaced with the new `excludeSpecPattern` option. Addressed in [#19319](https://github.com/cypress-io/cypress/pull/19319).\n    *   The `experimentalStudio` option was removed with the removal of the experimental Cypress Studio feature. If this option is configured in your project, a warning message will be displayed. Please leave any feedback around Cypress Studio [here](https://github.com/cypress-io/cypress/discussions/21561). Addressed in [#20515](https://github.com/cypress-io/cypress/pull/20515).\n*   During `cypress open`, the ability to \"Run all specs\" and \"Run filtered specs\" has been removed. Please leave feedback around the removal of this feature [here](https://github.com/cypress-io/cypress/discussions/21628). Your feedback will help us make product decisions around the future of this feature.\n    \n*   The experimental Cypress Studio feature has been removed. Please leave feedback around the removal of this feature [here](https://github.com/cypress-io/cypress/discussions/21561). Your feedback will help us make product decisions around the future of this feature. Addressed in [#20515](https://github.com/cypress-io/cypress/pull/20515).\n    \n*   You will no longer be able to run your tests during `cypress run` or `cypress open` in [browser versions that are not supported by Cypress](https://docs.cypress.io/guides/guides/launching-browsers#Browser-versions-supported).\n    \n*   Generated screenshots and videos will still be created inside their respective folders (`screenshotsFolder`, `videosFolder`). However, the paths of generated files inside those folders will be stripped of any common ancestor paths shared between spec files found by the `specPattern` option and may no longer be deterministic. Addressed in [#19319](https://github.com/cypress-io/cypress/pull/19319).\n    \n\n**Deprecations:**\n\n*   The `cypress open-ct` and `cypress run-ct` commands have been deprecated. Use `cypress open --component` and `cypress run --component` instead. Addresses [#18418](https://github.com/cypress-io/cypress/issues/18418).\n\n**Features:**\n\n*   Cypress 10 now includes beta support for **component testing**. More features around component testing are detailed below:\n    \n    *   Component testing is now integrated directly into the main app, allowing you to choose which testing experience you want upon launching Cypress. See our [current support for frameworks and bundlers](https://docs.cypress.io/guides/component-testing/component-framework-configuration). Addressed in [#21111](https://github.com/cypress-io/cypress/pull/21111).\n    *   Cypress will now guide you through installing the component testing dependencies and project setup necessary to begin component testing in Cypress. Previously this required manual setup and referencing the documentation.\n    *   When you use the Cypress app during `cypress open` to configure your project for CT testing, a [`cy.mount()`](https://docs.cypress.io/api/commands/mount) command will be automatically scaffolded for you in a `ct.supportFile`.\n    *   You can now create an empty component testing spec file from within the Cypress app directly and preview the specfile upon creation.\n    *   The following component testing plugins are now shipped with Cypress to enable easy `cy.mount()` implementation. Your local framework dependencies found in `node_modules` will be referenced to prevent adding additional dependencies or peer-dependencies to your `package.json`. From now on, the latest plugin version will be shipped with each Cypress release. See our [current support for frameworks and bundlers](https://docs.cypress.io/guides/component-testing/component-framework-configuration). Addressed in [#20930](https://github.com/cypress-io/cypress/pull/20930).\n        *   `@cypress/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)`\n        *   `@cypress/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)`\n        *   `@cypress/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)`\n        *   `@cypress/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)`\n*   We've enhanced how you can set and refresh **configuration** detailed below:\n    \n    *   Support for `cypress.config.js|ts|cjs|mjs` configuration files was added. Addressed in [#20643](https://github.com/cypress-io/cypress/pull/20643).\n    *   The Cypress app will now refresh when changes are made in the configuration file instead of closing the app. Addressed in [#21160](https://github.com/cypress-io/cypress/pull/21160).\n*   We've added several **new configuration options** detailed below:\n    \n    *   The [`setupNodeEvents()`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) option is a new testing type specific configuration option. It must be defined within the [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) and/or [`component`](https://docs.cypress.io/guides/references/configuration#component) configurations. This option allows you to modify your loaded configuration, listen to events and register plugins. This option replaces the `pluginsFile` option. Addressed in [#18798](https://github.com/cypress-io/cypress/pull/18798) and [#20560](https://github.com/cypress-io/cypress/pull/20560).\n        \n    *   The [`devServer`](https://docs.cypress.io/guides/references/configuration#devServer) option is a new component testing specific option that must be defined within the [`component`](https://docs.cypress.io/guides/references/configuration#component) configuration. This option provides a mechanism for starting a component testing dev-server when tests are running.\n        \n    *   The `specPattern` option is a new testing-type specific configuration option that must be defined within the [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) and/or [`component`](https://docs.cypress.io/guides/references/configuration#component) configurations. This option accepts a glob or an array of globs of the spec files to load. This option simplifies the spec discovery by replacing the `componentFolder`, `integrationFolder` and `testFiles` options. Addressed in [#19319](https://github.com/cypress-io/cypress/pull/19319), [#20565](https://github.com/cypress-io/cypress/pull/20565) and [#20853](https://github.com/cypress-io/cypress/pull/20853).\n        \n        *   The [`e2e.specPattern`](https://docs.cypress.io/guides/references/configuration#e2e) default value for new projects is `cypress/e2e/**.cy.{js,jsx,ts,tsx}`. For existing projects, please run `cypress open` to have your spec files automatically migrated to match this `specPattern`. Addressed in [#21193](https://github.com/cypress-io/cypress/pull/21193).\n        *   The [`component.specPattern`](https://docs.cypress.io/guides/references/configuration#component) default value is `**/*.cy.{js,jsx,ts,tsx}`.\n    *   The `excludeSpecPattern` option is a new testing type specific configuration option that must be defined within the [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) and/or [`component`](https://docs.cypress.io/guides/references/configuration#component) configurations. This option accepts a glob or an array of globs which allows you to ignore spec files that would otherwise be shown in your list of specs. This option replaces the `ignoreTestFiles` option. Addressed in [#19319](https://github.com/cypress-io/cypress/pull/19319), [#19980](https://github.com/cypress-io/cypress/pull/19980), [#20763](https://github.com/cypress-io/cypress/pull/20763), [#20853](https://github.com/cypress-io/cypress/pull/20853).\n        \n        *   The [`e2e.excludeSpecPattern`](https://docs.cypress.io/guides/references/configuration#e2e) default value is the same as the replaced `ignoreTestFiles` glob pattern of `*.hot-update.js`.\n        *   The [`component.excludeSpecPattern`](https://docs.cypress.io/guides/references/configuration#component) default value is `['**/__snapshots__/*','**/__image_snapshots__/*']` plus the `e2e.specPattern` glob patterns.\n        *   The `**/node_modules/**` pattern is automatically added to both `e2e.excludeSpecPattern` and `component.excludeSpecPattern` and can't be overridden. This is consistent with <10.0 behavior.\n    *   Intelligent Code Completion was added with the `defineConfig()` helper function. This enables configuration auto-completion and in-line documentation in the configuration file in your IDE. While it's not strictly necessary for Cypress to parse your configuration, we recommend wrapping your config object with `defineConfig()`. Addressed in [#18302](https://github.com/cypress-io/cypress/pull/18302).\n        \n*   We've made some updates to **Cypress API commands** detailed below:\n    \n    *   Enhancements were made to provide visual indication of nested commands and logs. With this change, users are now able to click on log groups to print additional log details to the dev tools console.\n        \n    *   The `.within()` command was updated to provide visual indication of logs and commands executed in the `.within` command context. Addresses [#20433](https://github.com/cypress-io/cypress/issues/20433).\n        \n    *   The redundant `cy.session()` log is now removed. Address [#7673](https://github.com/cypress-io/cypress/issues/7673) in [#21457](https://github.com/cypress-io/cypress/pull/21457).\n        \n    *   Users can now add custom `cy.hover()` and `cy.mount()` implementation using `Cypress.Commands.add()` since we don't provide a default implementation. Previously users had to use `Cypress.Command.override()` to provide the custom implementation. Addresses [#18941](https://github.com/cypress-io/cypress/issues/18941).\n        \n*   We've made some updates to the **Cypress CLI** detailed below:\n    \n    *   You can now pass in testing type specific configuration options via the `--config` CLI flag without nesting JSON. Addressed in [#20127](https://github.com/cypress-io/cypress/pull/20127).\n        \n    *   New `--e2e` and `--component` CLI flags were added to `cypress run` and `cypress open` to allow a user to run or launch Cypress for a specific testing-type. If a testing-type specific CLI flag is not provided when running `cypress run`, Cypress will run end-to-end tests by default.\n        \n    *   A warning message is now displayed when `cypress open` is ran with the `--browser` CLI flag for a browser that does not exist on the system. Addressed in [#18473](https://github.com/cypress-io/cypress/pull/18473).\n        \n    *   If a testing type and browser flag are passed to `cypress open` when launching a specific project, the browser will automatically launch. Addressed in [#21538](https://github.com/cypress-io/cypress/pull/21538).\n        \n*   The `cypress open` experience has been updated to take you through our **Launchpad** with many features detailed below:\n    \n    *   When you launch Cypress via `cypress open` you'll be asked whether you want to do end-to-end or component testing and taken through the configuration necessary to set up your project. Addressed in [#18924](https://github.com/cypress-io/cypress/pull/18924).\n        \n    *   Having files scaffolded on new projects during end-to-end testing is now opt in and not automatic. Addressed in [#18924](https://github.com/cypress-io/cypress/pull/18924).\n        \n    *   When Cypress detects you have a `cypress.json` during `cypress run`, it will error and ask you to run `cypress open` to migrate. When Cypress detects you have a `cypress.json` during `cypress open`, it will guide you through project migration to ensure your project continues to work as expected. Addressed in [#18924](https://github.com/cypress-io/cypress/pull/18924).\n        \n*   After launching the browser, there are several new features in our **App** detailed below:\n    \n    *   The Cypress app has been redesigned so that the Command Log and all associated navigation display with a dark background.\n    *   You can now change specs or the browser within the same window as running your tests.\n    *   Many git details are now shown within your current project in Cypress including the current branch and the last commit details of each spec in the spec explorer. Addressed in [#20648](https://github.com/cypress-io/cypress/pull/20648), [#21139](https://github.com/cypress-io/cypress/pull/21139), [#21436](https://github.com/cypress-io/cypress/pull/21436) and [#20744](https://github.com/cypress-io/cypress/pull/20744)\n    *   When creating a new spec within Cypress, your project's language is detected to provide the correct file extension and the `specPattern` is checked to ensure the spec is found by Cypress. After creating the spec, you can preview the spec that was generated with the option to immediately run the spec or create another spec. Addressed in [#21225](https://github.com/cypress-io/cypress/pull/21225), [#20567](https://github.com/cypress-io/cypress/pull/20567), [#20657](https://github.com/cypress-io/cypress/pull/20657), [#20962](https://github.com/cypress-io/cypress/pull/20962).\n    *   The Settings page has been redesigned to more clearly distinguish between settings that are specific to the project, your device, and the Dashboard.\n\n**Bugfixes:**\n\n*   An error message is displayed when you add a command using `Cypress.Commands.add()` that has the same name as an internal reserved Cypress command. Addresses [#6146](https://github.com/cypress-io/cypress/issues/6146).\n*   A one pixel, left, vertical border was removed that was incorrectly included on screenshot artifacts generated from the `cy.screenshot()` command in component tests. Addressed in [#21019](https://github.com/cypress-io/cypress/pull/21019).\n*   A memory leak was fixed during `cypress run` for end-to-end tests launched in Chromium and Firefox browsers that reduces the overall time it takes to run a set of specs and aligns with how the browser is launched once for all specs in component testing. With this change, the `before:browser:launch` node event will now properly only fire once per run, instead of firing before each spec. Addressed in [#19915](https://github.com/cypress-io/cypress/pull/19915).\n*   The default webpack configuration's host value was changed from `localhost` to `127.0.0.1` to support the Node 17+ changes with how DNS names are resolved. Addressed in [#21430](https://github.com/cypress-io/cypress/pull/21430).\n*   Cypress will throw a detailed error when some plugin versions are no longer supported in Cypress 10. Addressed in [#21169](https://github.com/cypress-io/cypress/pull/21169)\n\n**Dependencies:**\n\n*   Added `@cypress/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)` dependency.\n*   Added `@cypress/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)` dependency.\n*   Added `@cypress/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)` dependency.\n*   Added `@cypress/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)` dependency.\n\n**Misc:**\n\n*   The Plugins concept in Cypress still exists with the intent to tap into, modify or extend the internal behavior(s) of Cypress. It however is expected to be used in conjunction with our new `setupNodesEvents` configuration option, which was named to reflect that Plugins leverage Cypress's node events.\n\n## 9.7.0[​](#9-7-0 \"Direct link to 9.7.0\")\n\n_Released 5/23/2022_\n\n**Features:**\n\n*   The Electron version and shipped Chromium browser version has been updated. Addressed in [#21418](https://github.com/cypress-io/cypress/pull/21418).\n\n**Deprecations:**\n\n*   The `Cypress.Cookies.preserveOnce()` and `Cypress.Cookies.defaults()` Cypress APIs have been deprecated. In a future release, support for `Cypress.Cookies.preserveOnce()` and `Cypress.Cookies.defaults()` will be removed. Consider using the experimental [`cy.session()`](https://docs.cypress.io/api/commands/session) command instead to cache and restore cookies and other sessions details between tests. Fixed [#21333](https://github.com/cypress-io/cypress/issues/21333).\n\n**Bugfixes:**\n\n*   Updated the [`cy.contains()`](https://docs.cypress.io/api/commands/contains) command to correctly error and retry if the provided regex pattern begins with an equal sign and a match was not initially found. Previously the command would incorrectly fail with a syntax error. Fixed [#21108](https://github.com/cypress-io/cypress/issues/21108).\n*   Corrected the `cy.session()` command log grouping and validation verbiage. This change provides better insights to logs associated with the command. Fixed [#21377](https://github.com/cypress-io/cypress/issues/21377).\n*   Removed `eventemitter2` third-party type definitions from `cy` and `Cypress` that were unintentionally exposed. Fixed [#20556](https://github.com/cypress-io/cypress/issues/20556).\n\n**Dependency Updates:**\n\n*   Upgraded the bundled node version shipped with Cypress from `16.5.0` to `16.13.2`. Addressed in [#21418](https://github.com/cypress-io/cypress/pull/21418).\n*   Upgraded the Chromium browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `94.0.4606.81` to `100.0.4896.75`. Addressed in [#21418](https://github.com/cypress-io/cypress/pull/21418).\n*   Upgraded `electron` dependency from `15.5.1` to `18.0.4`. Addressed in [#21418](https://github.com/cypress-io/cypress/pull/21418).\n\n## 9.6.1[​](#9-6-1 \"Direct link to 9.6.1\")\n\n_Released 5/9/2022_\n\n**Bugfixes:**\n\n*   Cypress can now launch on systems where Firefox is installed via Snapcraft. Fixed [#19793](https://github.com/cypress-io/cypress/issues/19793).\n*   Updates were made to ensure XHR calls are properly displaying the response body in the command log. Fixed [#21361](https://github.com/cypress-io/cypress/issues/21361).\n*   Fixed [`cy.contains()`](https://docs.cypress.io/api/commands/contains) and [`.should('contain', ...)`](https://docs.cypress.io/api/commands/should) to handle finding text that contains backslash characters. Fixed [#19116](https://github.com/cypress-io/cypress/issues/19116)\n*   Updated [`.type('{enter}')`](https://docs.cypress.io/api/commands/type) to support sending the Enter keystroke to submit buttons that are not rendered within a form html element, but are associated with a form via the `form` attribute. Fixed [#21163](https://github.com/cypress-io/cypress/issues/21163).\n*   Fixed an issue with `cy.session()` such that re-running tests in open mode will now correctly recreate a session. Before this change, an error was thrown indicating the saved `setup` function was not a function because it was serialized. Fixed [#17805](https://github.com/cypress-io/cypress/issues/17805).\n\n## 9.6.0[​](#9-6-0 \"Direct link to 9.6.0\")\n\n_Released 4/25/2022_\n\n**Features:**\n\n*   Now you can easily test multi-domain workflows by using the experimental [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command. This feature allows you to test across different origins or domains within a single test. This experiment was designed to work side-by-side with the [`cy.session()`](https://docs.cypress.io/api/commands/session) experimental feature. You can turn on use of this command by setting the [`experimentalSessionAndOrigin`](https://docs.cypress.io/guides/references/experiments) configuration option to `true`. For more details, read [our blog post](https://cypress.io/blog/2022/04/25/cypress-9-6-0-easily-test-multi-domain-workflows-with-cy-origin/). Addressed [#17336](https://github.com/cypress-io/cypress/issues/17336) and [#944](https://github.com/cypress-io/cypress/issues/944).\n    *   Added a new configuration option called `experimentalSessionAndOrigin`. This option enables support for [`cy.session()`](https://docs.cypress.io/api/commands/session) and [`cy.origin()`](https://docs.cypress.io/api/commands/origin) for end-to-end testing.\n    *   The `experimentalSessionSupport` configuration option has been removed and replaced by the `experimentalSessionAndOrigin` configuration option. Please update your configuration to use the new `experimentalSessionAndOrigin` option to continue to opt-in to this experimental feature.\n    *   When `experimentalSessionAndOrigin` is enabled, cross-origin requests will no longer immediately fail, but instead, time out based on the [`pageLoadTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) configuration. This allows the request to be appropriately handled by the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command.\n    *   When `experimentalSessionAndOrigin` is enabled, Cypress will no longer wait on page loads between hooks before moving on to the next test.\n\n**Bugfixes:**\n\n*   Fixed an issue with Firefox 98+ where the Enter keystroke was not being sent to an input element when using [`.type('{enter}')`](https://docs.cypress.io/api/commands/type). Fixed [#21033](https://github.com/cypress-io/cypress/issues/21033).\n*   We now verify if an interruption while running tests was signaled by the user or if it came from an error in a plugin before showing the error message. Fixed [#21010](https://github.com/cypress-io/cypress/issues/21010).\n*   Improved the error message observed on Windows platforms when unzipping the Cypress binary and the max file length is exceeded. Fixed in [#21047](https://github.com/cypress-io/cypress/pull/21047).\n*   Updated the `Cypress.Commands.add()` TypeScript types to better reflect the attributes of the `.add()` utility and the JQuery element, a possible previous subject type. [#20376](https://github.com/cypress-io/cypress/issues/20376).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` dependency from `15.3.5` to `15.5.1` to consume fixes related to [improve performance](https://github.com/electron/electron/pull/33406) on macOS Big Sur and later. Addressed [#21068](https://github.com/cypress-io/cypress/issues/21068).\n\n## 9.5.4[​](#9-5-4 \"Direct link to 9.5.4\")\n\n_Released 4/11/2022_\n\n**Bugfixes:**\n\n*   Updates were made to silence Electron warnings related to being unable to connect to dbus. These errors are normal and expected, and do not result in test failures. Because they are always present when running Electron inside docker containers, it has incorrectly led people to believe it is the root-cause of an error within their test run. By silencing these errors, it will improve the debug experience to allow users to focus on meaningful warning and error messages. Fixed [#19299](https://github.com/cypress-io/cypress/issues/19299).\n*   Updates were made to ensure that all `*.enable` events are sent if Cypress becomes disconnected from the Chrome DevTools Protocol and must re-establish a connection to ensure all command logs are displayed to the user. This fixes an issue where some command logs, like download or network events, are missing once Cypress has disconnected and then reconnected to the Chrome DevTools Protocol. Fixed [#20618](https://github.com/cypress-io/cypress/issues/20618).\n*   Fixed an issue where `cy.type('{enter}')` was not sending the Enter key for Firefox `v98+`. This was not an issue with Firefox `v97` and below. Fixed [#20562](https://github.com/cypress-io/cypress/issues/20562).\n*   Fixed a regression in [9.3.0](https://docs.cypress.io/guides/references/changelog#9-3-0) where glob patterns provided to the `--spec` CLI parameter was incorrectly splitting the patterns in unexpected places when it should have split on commas. Fixes [#20794](https://github.com/cypress-io/cypress/issues/20794).\n*   Fixed an issue with `cy.root()` to respect the [`timeout`](https://docs.cypress.io/api/commands/root#Arguments) option passed to the command. Previously, when the `timeout` option was provided, it was ignored and the default timeout was used. Fixed [#19985](https://github.com/cypress-io/cypress/issues/19985).\n*   Updates were made to decrease the length of the Cypress cache path for Windows to ensure [installing pre-release versions](https://docs.cypress.io/guides/references/advanced-installation#Install-pre-release-version) of the Cypress binary are within the maximum path length of 260 characters. Fixed in [#20961](https://github.com/cypress-io/cypress/pull/20961).\n*   Fixed a regression in [8.6.0](https://docs.cypress.io/guides/references/changelog#8-6-0) which prevented `.pause()` from correctly executing when passing the `--headed --no-exit` CLI flags to `cypress run`. Fixed [#20745](https://github.com/cypress-io/cypress/issues/20745).\n*   Fixed a regression in [9.2.0](https://docs.cypress.io/guides/references/changelog#9-2-0) which would sometimes throw an expected error on navigation with `cy.back()` and `cy.go()`. Fixed [#19749](https://github.com/cypress-io/cypress/issues/19749) and [#20539](https://github.com/cypress-io/cypress/issues/20539).\n*   Corrected the TypeScript type for a cookie which was incorrectly typed as `any` when the correct type is `Cookie`. Fixed in [#20513](https://github.com/cypress-io/cypress/pull/20513).\n*   Added the missing `Cypress.Command.addAll()` TypeScript types. Fixed [#18886](https://github.com/cypress-io/cypress/issues/18886).\n*   Fixed an uncommon error observed in `cy.session()` where an error was thrown when no cookies had been set for the session and the user clicks the session command log to view additional details in the DevTools console. Fixed in [#20946](https://github.com/cypress-io/cypress/pull/20946).\n\n**Misc:**\n\n*   A minor visual update was made to the `cy.session()` command log visuals. Fixed [#20433](https://github.com/cypress-io/cypress/issues/20433).\n\n**Dependency Updates:**\n\n*   Upgraded `ansi-regex` dependency from `4.1.0` to `4.1.1` to address the [CVE-2021-3807](https://nvd.nist.gov/vuln/detail/CVE-2021-3807) NVD security vulnerability. Addressed in [#20807](https://github.com/cypress-io/cypress/pull/20807).\n*   Upgraded `plist` dependency from `3.0.4` to `3.0.5` to address the [CVE-2022-22912](https://nvd.nist.gov/vuln/detail/CVE-2022-22912) NVD security vulnerability. Addressed in [#20808](https://github.com/cypress-io/cypress/pull/20808).\n\n## 9.5.3[​](#9-5-3 \"Direct link to 9.5.3\")\n\n_Released 3/28/2022_\n\n**Bugfixes:**\n\n*   Corrected a logging issue with `cy.intercept()` where the response status code and response body were sometimes missing from the log details in `open` mode. Fixed [#18757](https://github.com/cypress-io/cypress/issues/18757).\n*   Fixed an issue in `cy.readFile()` where the command would not retry or provide a meaningful error message if `null` encoding was used and the file was not found. Fixed [#20683](https://github.com/cypress-io/cypress/issues/20683).\n*   Updated the Cypress Keyboard shortcuts to only run the shortcut when the pressed shortcut key was not used in conjunction with either the `alt`, `ctrl`, or `shift` modifier keys. This fixed an issue where the Cypress shortcut handler would override the browser native keyboard shortcut for search (`ctrl + f`). Fixed [#20222](https://github.com/cypress-io/cypress/issues/20222).\n*   Updates were made to correctly escape dollar signs in the `CYPRESS_DOWNLOAD_PATH_TEMPLATE` environment variable. Issues were seen utilizing this template when the env was provided from a package manager file. Fixed [#19914](https://github.com/cypress-io/cypress/issues/19914).\n*   Fix the `Cypress.Buffer` TypeScript type to reference the static constructor of `Buffer`, instead of incorrectly referencing the `Buffer` instance which caused Type errors. Fixes [#20542](https://github.com/cypress-io/cypress/issues/20542).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` dependency from `15.3.4` to `15.3.5` to address the [CVE-2022-21718](https://nvd.nist.gov/vuln/detail/CVE-2022-21718) NVD security vulnerability. Addressed in [#20750](https://github.com/cypress-io/cypress/issues/20750).\n*   Upgraded `minimist` dependency from `1.2.5` to `1.2.6`. Addressed in [#20756](https://github.com/cypress-io/cypress/issues/20756).\n*   Upgraded `nanoid` dependency from `3.1.20` to `3.1.31` to address the [CVE-2021-23566](https://nvd.nist.gov/vuln/detail/CVE-2021-23566) NVD security vulnerability. Addressed in [#20726](https://github.com/cypress-io/cypress/pull/20726).\n*   Upgraded `node-forge` dependency from `1.0.0` to `1.3.0` to address the [CVE-2022-24771](https://nvd.nist.gov/vuln/detail/CVE-2022-24771) NVD security vulnerability. Addressed in [#20727](https://github.com/cypress-io/cypress/pull/20727).\n\n## 9.5.2[​](#9-5-2 \"Direct link to 9.5.2\")\n\n_Released 3/14/2022_\n\n**Bugfixes:**\n\n*   Fixed an issue with `.type()` where click events could be fired on the incorrect target element because the target focus changed within a key-down event handler callback. Fixed in [#20525](https://github.com/cypress-io/cypress/pull/20525).\n*   Fixed a regression in [9.5.0](https://docs.cypress.io/guides/references/changelog#9-5-0) where ANSI colors were not removed from the FireFox warning message about the `chromeWebSecurity` configuration option having no effect on the Firefox browser. Fixes [#20496](https://github.com/cypress-io/cypress/issues/20496).\n*   Updates were made to the pre-release build setup such that Cypress will use a unique cache folder for each [pre-release installation](https://docs.cypress.io/guides/references/advanced-installation#Install-pre-release-version) on a machine. This removes the need to run `cypress clear cache` before installing a new pre-release version of Cypress or before installing a new released version of Cypress after a pre-release version had been installed. Addressed in [#20296](https://github.com/cypress-io/cypress/pull/20296).\n\n**Misc:**\n\n*   Updates were made to explicitly disable the `Origin-Agent-Cluster` header for proxied responses to ensure `document.domain` can continue to be set with Chrome v106+. This was necessary because Chrome is planning to make [`document.domain` immutable](https://developer.chrome.com/blog/immutable-document-domain/) in v106+ to relax the same-origin policy by interpreting the `Origin-Agent-Cluster` as `true`, whereas it is currently interpreted as `false`. Addresses [#20147](https://github.com/cypress-io/cypress/issues/20147).\n\n**Dependency Updates:**\n\n*   Upgraded `url-parse` dependency from `1.5.6` to `1.5.9` to address these NVD security vulnerabilities, [CVE-2022-0639](https://nvd.nist.gov/vuln/detail/CVE-2022-0639), [CVE-2022-0686](https://nvd.nist.gov/vuln/detail/CVE-2022-0686) and [CVE-2022-0691](https://nvd.nist.gov/vuln/detail/CVE-2022-0691). Addressed in [#20386](https://github.com/cypress-io/cypress/pull/20386) and [#20439](https://github.com/cypress-io/cypress/issues/20439).\n\n## 9.5.1[​](#9-5-1 \"Direct link to 9.5.1\")\n\n_Released 2/28/2022_\n\n**Bugfixes:**\n\n*   Added a `ready` event to the Plugins process to ensure all plugins have successfully started before the configuration is loaded and the tests start. Fixed in [#19792](https://github.com/cypress-io/cypress/issues/19792).\n    *   This fixes an issue where the plugin is never executed and leaves Cypress stuck in the initialization phase, where the user can only view the loading spinner.\n    *   This enables support for node's experimental `--loader` flag for plugins.\n*   Made a change to the DNS lookup to improve test performances and reliability on MacOS machines that leverage the VMWare CBCloud SaaS solution. Before this change, random test failures were observed, as well as hanging tests and initially pending HTTP and HTTPS responses. Fixed in [#20062](https://github.com/cypress-io/cypress/issues/20062).\n*   Fixed a regression in [9.5.0](https://docs.cypress.io/guides/references/changelog#9-5-0) where ANSI colors were not removed from the `cy.fixtures()` error code frame. Fixes [#20208](https://github.com/cypress-io/cypress/issues/20208).\n*   Fixed a regression in [9.5.0](https://docs.cypress.io/guides/references/changelog#9-5-0) where the test config override errors were formatted incorrectly. Fixes [#20208](https://github.com/cypress-io/cypress/issues/20208).\n*   Fixed an issue where Cypress would throw an error when reporting or wrapping errors with booleans or numbers. Fixes [#19561](https://github.com/cypress-io/cypress/issues/19561).\n\n**Dependency Updates:**\n\n*   Upgraded `url-parse` dependency from `1.5.2` to `1.5.6` to avoid authorization bypass through user-controlled key to address this [NVD security vulnerability](https://nvd.nist.gov/vuln/detail/CVE-2022-0512). Addressed in [#20270](https://github.com/cypress-io/cypress/issues/20270).\n\n## 9.5.0[​](#9-5-0 \"Direct link to 9.5.0\")\n\n_Released 2/15/2022_\n\n**Features:**\n\n*   Enhancements were made to the error experience in both run mode and open mode to improve readability and provide meaningful stack traces. Addressed in [#20124](https://github.com/cypress-io/cypress/issues/20124).\n*   Updated the `cy.request()` log message to hide the origin when it matched the browser origin to make debugging easier. This reduces the length of the log message that could be partially hidden if a long url is requested. Addressed in [#20009](https://github.com/cypress-io/cypress/issues/20009).\n*   Updates were made to log the `ShadowRoot` and `Document` elements as HTML elements. Previously these would be logged as enumerated objects, which were difficult to evaluate. Addressed in [#20049](https://github.com/cypress-io/cypress/issues/20049).\n*   Updated the terminal output generated in Cypress run mode to de-emphasis the `node` path in the run header. Addressed in [#20120](https://github.com/cypress-io/cypress/issues/20120).\n\n**Bugfixes:**\n\n*   Fixed an issue where files attached during `.selectFile()` could have the wrong `File` prototype. Fixes [#20003](https://github.com/cypress-io/cypress/issues/20003).\n*   Updated `.select()` to only dispatch the `change` and `input` events when the selected option is not the currently selected option. This change aligns `.select()` with the browser. Fixes [#19494](https://github.com/cypress-io/cypress/issues/19494).\n*   Updated `.type(' ')` to align with the W3C standards where a click event should be dispatched when the Space key is pressed and the current focus is on a state-changing element with type `button`, `image`, `submit` or `reset`. Fixes [#20067](https://github.com/cypress-io/cypress/pull/20067).\n\n## 9.4.1[​](#9-4-1 \"Direct link to 9.4.1\")\n\n_Released 1/31/2022_\n\n**Bugfixes:**\n\n*   Fixed a regression in [9.4.0](https://docs.cypress.io/guides/references/changelog#9-4-0) where the line endings in the public npm package prevented some users from running Cypress. Fixes [#19986](https://github.com/cypress-io/cypress/issues/19986).\n\n## 9.4.0[​](#9-4-0 \"Direct link to 9.4.0\")\n\n_Released 1/31/2022_\n\n**Features**\n\n*   Enhancements were made to `.selectFile()` after receiving feedback after its initial release in [9.3.0](https://docs.cypress.io/guides/references/changelog#9-3-0).\n    *   The default behavior was updated to automatically infer the mime type of files based on their extension to correctly encode file uploads. Addressed in [#19751](https://github.com/cypress-io/cypress/issues/19751).\n    *   Added the `mimeType` property so you can explicitly set the mime type on files using the `mimeType` property. Addressed in [#19751](https://github.com/cypress-io/cypress/issues/19751).\n    *   Updated file contents types to allow either a [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instance or a `Cypress.Buffer` instance, where previously file contents were expected to only be an instance of `Cypress.Buffer`. Addressed in [#19751](https://github.com/cypress-io/cypress/issues/19751).\n    *   Updated `.selectFile()` to retain the fileName of files read from disk to work with aliases. Addressed in [#19803](https://github.com/cypress-io/cypress/issues/19803).\n\n**Bugfixes:**\n\n*   Fixed a regression in [9.3.0](https://docs.cypress.io/guides/references/changelog#9-3-0) to correctly parse the `--spec` CLI parameter for glob patterns containing a range. Fixes [#19783](https://github.com/cypress-io/cypress/issues/19783).\n*   Fixed regression in [9.2.1](https://docs.cypress.io/guides/references/changelog#9-1-1) where the `--openssl-legacy-provider` flag was not being passed to the plugins' child process when the user's system Node version was Node 17+ built with OpenSSL v3+ which resulted in Cypress crashing when trying to run tests. Fixes [#19712](https://github.com/cypress-io/cypress/issues/19712).\n*   Update `.type('{enter}')` to align with the W3C standards where a click event should be dispatched when the Enter key is pressed and the current focus is on a state-changing element with type `button`, `image`, `submit` or `reset`. Fixes [#19541](https://github.com/cypress-io/cypress/issues/19541).\n\n## 9.3.1[​](#9-3-1 \"Direct link to 9.3.1\")\n\n_Released 1/19/2022_\n\n**Bugfixes:**\n\n*   Fixed an issue where the bin file was released with windows line breaks. Fixes [#19747](https://github.com/cypress-io/cypress/issues/19747).\n\n## 9.3.0[​](#9-3-0 \"Direct link to 9.3.0\")\n\n_Released 1/18/2022_\n\n**Features:**\n\n*   Added a new Cypress command, called [`.selectFile()`](https://docs.cypress.io/api/commands/selectfile), to select a file or files in an HTML5 input element or simulate dragging a file or files into the browser. The API is similar to `cypress-file-upload` and we have provided a [migration guide](https://docs.cypress.io/guides/references/migration-guide#Migrating-from-cypress-file-upload-to-selectFile) for previous users of that plugin. For more details, see [our blog post](https://cypress.io/blog/2022/01/18/uploading-files-with-selectfile/). Fixes [#19524](https://github.com/cypress-io/cypress/issues/19524) and [#170](https://github.com/cypress-io/cypress/issues/170).\n*   Exposed the `Buffer` polyfill, as [`Cypress.Buffer`](https://docs.cypress.io/api/utilities/buffer), to enable working with binary data. Addressed in [#19524](https://github.com/cypress-io/cypress/issues/19524).\n*   Added the `CYPRESS_DOWNLOAD_PATH_TEMPLATE` environment variable which can be set to a string template for building the download URL for the Cypress binary. This environment variable is useful for users who are downloading the Cypress binary from a proxy that is not one-to-one with the Cypress's default download url. More information can be found in the [Install Binary](https://docs.cypress.io/guides/references/advanced-installation#Install-binary) documentation. Fixes [#15697](https://github.com/cypress-io/cypress/issues/15697).\n\n**Bugfixes:**\n\n*   Fixed an issue where the `--spec` CLI parameter was not working properly when passing multiple glob patterns that are separated by commas. Fixes [#16102](https://github.com/cypress-io/cypress/issues/16102).\n*   Fixed an issue with how the `CYPRESS_VERIFY_TIMEOUT` environment variable was read so it can set in a project's `package.json` or its `.npmrc`. Fixes [#19559](https://github.com/cypress-io/cypress/issues/19559).\n\n**Dependency Updates:**\n\n*   Upgraded `graceful-fs` from `4.2.0` to `4.2.9`. This upgrade resolves issues observed with using graceful-fs v4.2.0 with resolve v1.21+. Addressed in [#19676](https://github.com/cypress-io/cypress/issues/19676) and resolves [#19610](https://github.com/cypress-io/cypress/pull/19610).\n    *   **NOTE:** This upgrade to `graceful-fs` breaks Cypress's compatibility with Yarn 2. We have observed errors with Yarn 2.4.2 with `graceful-fs` 4.2.9. Before this change, Cypress had minimal Yarn 2 support (see [#6377](https://github.com/cypress-io/cypress/issues/6377)). Between Yarn 3 fixing multiple bugs and the migration path from Yarn 2 to Yarn 3 being minimal, we felt the best step forward was to support and recommend Yarn 3 over Yarn 2.\n*   Upgraded `electron` from `15.2.0` to `15.3.4`. Addressed in [#19351](https://github.com/cypress-io/cypress/issues/19351).\n\n## 9.2.1[​](#9-2-1 \"Direct link to 9.2.1\")\n\n_Released 1/10/2022_\n\n**Bugfixes:**\n\n*   Fixed a regression in [9.2.0](https://docs.cypress.io/guides/references/changelog#9-2-0) to keep Cypress open after each spec finishes when the `--headed --no-exit` flags are passed to `cypress run`. Fixes [#19485](https://github.com/cypress-io/cypress/issues/19485).\n*   Improve heuristic for verifying when the `--openssl-legacy-provider` option should be passed to the plugins' child process when the system Node version is v17+. This prevents Cypress from crashing when a user has Node 17 installed which was built with OpenSSL v1. Fixes [#19320](https://github.com/cypress-io/cypress/issues/19320).\n*   Correctly cast the `CYPRESS_VERIFY_TIMEOUT` environment variable as a number so Cypress will no longer throw `TypeError: Expected the timeout option to be a non-negative integer`. Fixes [#19476](https://github.com/cypress-io/cypress/issues/19476).\n\n**Dependency Updates:**\n\n*   Update pinned resolution of `cli-table3` from `~0.6.0` to `~0.6.1` to avoid problems with the bug introduced in the [colors.js v1.4.44-liberty-2 release](https://github.com/Marak/colors.js/issues/285). Addresses [#19624](https://github.com/cypress-io/cypress/issues/19624).\n\n## 9.2.0[​](#9-2-0 \"Direct link to 9.2.0\")\n\n_Released 12/20/2021_\n\n**Features:**\n\n*   Cypress will throw an error when a user attempts to update a configuration value at run-time using either the Test Configuration or using `Cypress.config()` that is a [readonly option](https://docs.cypress.io/guides/references/configuration#Test-Configuration). Addresses [#6407](https://github.com/cypress-io/cypress/issues/6407) and [#19001](https://github.com/cypress-io/cypress/issues/19001).\n*   A `timeout` option has been added to the `cy.writeFile()` command, with a default value of `defaultCommandTimeout`. Addresses [#3350](https://github.com/cypress-io/cypress/issues/3350).\n*   The default `maxHttpBufferSize` for the internal socket server has been increased to [Node's maximum Buffer size](https://nodejs.org/api/buffer.html#bufferconstantsmax_length) (size varies by OS) to allow large file writes with `cy.writeFile()`. Addresses [#19140](https://github.com/cypress-io/cypress/issues/19140).\n*   Add `CYPRESS_VERIFY_TIMEOUT` environment variable to override the timeout duration of the `verify` command. Addresses [#18290](https://github.com/cypress-io/cypress/issues/18290).\n\n**Bugfixes:**\n\n*   Prevent unnecessary snapshotting when running default assertions that would unnecessarily increase CPU use in `cypress open` mode which lead to out of memory crashes on certain browsers. Fixes [#18549](https://github.com/cypress-io/cypress/issues/18549).\n*   Removed automatic retries for failed HTTP requests through the proxy. This fixes an issue where failed requests could be re-sent too many times in some conditions. This change could increase the number of failed requests that your app sees. Fixes [#19043](https://github.com/cypress-io/cypress/issues/19043).\n*   Reduced the occurrence of an issue where logs for `fetch` and `xhr` requests could be associated with the wrong request. Fixes [#19043](https://github.com/cypress-io/cypress/issues/19043).\n*   Tests that are skipped within `then` blocks will no longer throw errors causing the test to fail. Tests that are skipped outside of `then` blocks will no longer trigger the fail event. This will prevent screenshots from happening from errors thrown by the fail event. Fixes [#14867](https://github.com/cypress-io/cypress/issues/14867) and [#17660](https://github.com/cypress-io/cypress/issues/17660).\n*   Fixed a regression in [9.0.0](https://docs.cypress.io/guides/references/changelog#9-0-0) where a fixture provided in a static response to `cy.intercept()` did not support passing `null` to encoding to read the fixture as a Buffer. This identified an undocumented 9.0.0 Breaking Change where the default read behavior of a fixture changed from a Buffer to being read with `utf8` encoding. Fixes [#19344](https://github.com/cypress-io/cypress/issues/19344).\n*   Fixed a regression in [9.0.0](https://docs.cypress.io/guides/references/changelog#9-0-0) where `cy.contains()` attempted to ignore `<script>` and `<style>` elements found within `<body>`. by deleting them from the dom. This behavior was corrected to ignore the elements without deleting them. Fixes [#19377](https://github.com/cypress-io/cypress/issues/19377).\n*   Cypress will no longer crash when proxying an ill formed request. For example, if the application under test has a resource of `\"http: //localhost/asset.js\"` (notice the extraneous space), Cypress will now log a debug message and the asset will fail to load. Fixes [#9220](https://github.com/cypress-io/cypress/issues/9220).\n*   Correct `Cypress.Command.add()` and `Cypress.Command.override()` TypeScript types. Fixes [#18879](https://github.com/cypress-io/cypress/issues/18879), [#19095](https://github.com/cypress-io/cypress/issues/19095) and [#18940](https://github.com/cypress-io/cypress/issues/18940).\n    *   Custom command implementations typings take into account `prevSubject` variants.\n    *   Custom command implementations now allows to NOT return a value.\n    *   Custom command overwrites typings take into account `originalFn` function.\n*   Add types for `Cypress.session.clearAllSavedSessions()`. Fixes [#19363](https://github.com/cypress-io/cypress/issues/19363).\n\n**Dependencies:**\n\n*   Upgraded `ssri` from `6.0.1` to `6.0.2` to mitigate [ssri vulnerability](https://snyk.io/vuln/npm:ssri@6.0.1). Addressed in [#19351](https://github.com/cypress-io/cypress/issues/19351).\n\n## 9.1.1[​](#9-1-1 \"Direct link to 9.1.1\")\n\n_Released 12/03/2021_\n\n**Bugfixes:**\n\n*   Fixed a regression in [9.1.0](https://docs.cypress.io/guides/references/changelog#9-1-0) where our built binary didn't contain patches to some dependencies. Addressed in [#19239](https://github.com/cypress-io/cypress/pull/19239). This fixed some issues including:\n    *   Requests containing `~` will no longer be improperly encoded. Fixes [#19083](https://github.com/cypress-io/cypress/issues/19083), [#19084](https://github.com/cypress-io/cypress/issues/19084), [#19115](https://github.com/cypress-io/cypress/issues/19115), [#19096](https://github.com/cypress-io/cypress/issues/19096), [#19178](https://github.com/cypress-io/cypress/issues/19178).\n    *   A TypeError displaying `data.hasOwnProperty is not a function` will no longer throw in some situations. Fixes [#19091](https://github.com/cypress-io/cypress/issues/19091).\n    *   Empty extra hooks will no longer be sent as data when recording to the Dashboard. Fixes [#19087](https://github.com/cypress-io/cypress/issues/19087).\n    *   The Runner hanging when baseUrl is set to null to load a local file. Fixes [#19105](https://github.com/cypress-io/cypress/issues/19105)\n*   When using the default configuration of `\"nodeVersion\": \"system\"` with an installed system node >=17, Cypress will now work properly rather than throw an error incorrectly pointing to the user's plugin file. Fixes [#18914](https://github.com/cypress-io/cypress/issues/18914).\n*   Shadow DOM elements no longer error as hidden during actionability when the element is covered by its parent shadow root. Fixes [#18008](https://github.com/cypress-io/cypress/issues/18008).\n*   When using `.type()` events now correctly propagate out of the shadow DOM. Fixes [#17531](https://github.com/cypress-io/cypress/issues/17531).\n*   The `this` context is now properly preserved when overwriting `cy.clock()`. Fixes [#19158](https://github.com/cypress-io/cypress/issues/19158).\n\n**Dependencies:**\n\n*   Upgraded `@cypress/request` from `2.88.7` to `2.88.10`. Addressed in [#19099](https://github.com/cypress-io/cypress/issues/19099).\n\n## 9.1.0[​](#9-1-0 \"Direct link to 9.1.0\")\n\n_Released 11/22/2021_\n\n**Features:**\n\n*   A `CYPRESS` environment variable will be set to true in child processes where Cypress runs user code in Node.js. You can now detect that you're running in Cypress by looking for `process.env.CYPRESS`. Addresses [#18805](https://github.com/cypress-io/cypress/issues/18805).\n\n**Bugfixes:**\n\n*   Specs with % in the filename will no longer fail to load and now behave as any other spec. Fixes [#18871](https://github.com/cypress-io/cypress/issues/18871).\n*   When using the Selector Playground, the HTML attribute's value will be wrapped in double-quotes. Fixes [#1884](https://github.com/cypress-io/cypress/issues/1884).\n*   The call count is now shown in the Command Log when using `cy.stub().log(false)`. Fixes [#18907](https://github.com/cypress-io/cypress/issues/18907).\n*   The warning message for retrying connection to a browser has been improved to indicate when it is still waiting. Fixes [#18644](https://github.com/cypress-io/cypress/issues/18644).\n*   Cypress commands that rely on `this` context now have access to `this` when overridden. Fixes [#18899](https://github.com/cypress-io/cypress/pull/18899).\n*   Test configuration is now correctly applied when using `only`. Fixes [#18959](https://github.com/cypress-io/cypress/issues/18959).\n\n## 9.0.0[​](#9-0-0 \"Direct link to 9.0.0\")\n\n_Released 11/10/2021_\n\n**Breaking Changes:**\n\n*   The `nodeVersion` configuration option now defaults to `system`. The behavior of the `system` option has changed to always use the Node.js binary/version that launched Cypress. If Cypress was not launched via the terminal, Cypress will use the `bundled` Node.js version. This could change the behavior of code within your `pluginsFile` since it may be run in your `system` Node.js version. Addresses [#18684](https://github.com/cypress-io/cypress/issues/18684).\n*   Windows 32-bit is no longer supported in Cypress. Addresses [#17962](https://github.com/cypress-io/cypress/issues/17962).\n*   An error will now be thrown if an invalid value is passed to `Cypress.config`. Previously invalid values were ignored and could cause unexpected behavior. Addresses [#18589](https://github.com/cypress-io/cypress/pull/18589).\n*   `cy.contains()` no longer yields the `<body>` element when it matches the content of `<script>` or `<style>` tags. Addresses [#14861](https://github.com/cypress-io/cypress/issues/14861).\n*   Attempting to add an existing built-in Cypress command using `Cypress.Commands.add()` will now throw an error, indicating that `Cypress.Commands.overwrite()` should be used instead to overwrite the behavior of existing commands. Addresses [#18572](https://github.com/cypress-io/cypress/issues/18572).\n*   Custom command implementations are now typed based on the declared custom chainables. Addresses [#17496](https://github.com/cypress-io/cypress/pull/17496).\n*   The bundled Node.js version was upgraded from `14.17.0` to `16.5.0`. This could change the behavior of code within the `pluginsFile` when using the bundled Node.js version of Cypress. Addressed in [#18317](https://github.com/cypress-io/cypress/pull/18317).\n*   The default read behavior of a fixture provided as a static response in `cy.intercept()` changed from being read as a Buffer to using `utf8` encoding. This aligns the default read behavior of `cy.intercept()` to `cy.readFile()` and `cy.fixture()`. Addresses [#18534](https://github.com/cypress-io/cypress/issues/18534).\n\n**Deprecations:**\n\n*   The `nodeVersion` configuration option has been deprecated and will be removed in a future release.\n\n**Features:**\n\n*   When `null` is passed as the encoding to `cy.readFile()` or `cy.fixture()`, the file is treated as binary and read as a Buffer. Similarly, `null` passed as the encoding to `cy.writeFile()` allows direct writing of buffers. If the encoding is unspecified, the default remains `utf8`, matching the current behavior. Addresses [#18534](https://github.com/cypress-io/cypress/issues/18534).\n\n**Bugfixes:**\n\n*   Sticky elements within a fixed container will now be able to be properly scrolled to during action commands. Fixes [#4233](https://github.com/cypress-io/cypress/issues/4233).\n*   `document.referrer` will now correctly reflect the correct value from the application under test after `cy.visit()`. Fixes [#4295](https://github.com/cypress-io/cypress/issues/4295).\n\n**Dependencies:**\n\n*   Upgraded Chrome browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `91` to `94`. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/18317).\n*   Upgraded bundled Node.js version from `14.17.0` to `16.5.0`. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/18317).\n*   Upgraded `electron` from `14.1.0` to `15.2.0`. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/18317).\n\n## 8.7.0[​](#8-7-0 \"Direct link to 8.7.0\")\n\n_Released 10/25/2021_\n\n**Features:**\n\n*   There are changes to how \"slow\" tests are determined and displayed in Cypress. Addresses [#18496](https://github.com/cypress-io/cypress/pull/18496).\n    *   Added a [`slowTestThreshold`](https://docs.cypress.io/guides/references/configuration#Timeouts) configuration option to customize when tests are considered \"slow\" during `cypress run`. A test that runs slower than the given threshold will display in orange text in the default 'spec' reporter. This configuration can be set in your Cypress config file or via specific [test configuration](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Configuration).\n    *   The default slow test threshold was changed from 75ms (Mocha's default) to 10000ms for e2e tests and 250ms for component tests. To restore the old behavior, you can add `\"slowTestThreshold\": 75` to your Cypress config file.\n    *   All tests will show the time the test ran in milliseconds during `cypress run` with the default 'spec' reporter.\n*   Users can pass an `overwrite: true` option to `Cypress.Screenshot.defaults` to change default behavior to overwrite existing screenshots without having to set `overwrite` for each `cy.screenshot()` command. Addresses [#7955](https://github.com/cypress-io/cypress/issues/7955).\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in [8.6.0](#8-6-0) where videos recorded in Electron to the Dashboard were not playable in the Firefox or Safari browser and were not compatible with QuickTime player in MacOS.\n*   Fixed a regression introduced in [8.6.0](#8-6-0) so that the warning about the `projectRoot` directory not being writeable will now display correctly. Fixes [#18485](https://github.com/cypress-io/cypress/issues/18485).\n*   Improved the error message when running Cypress without non-root permissions. Fixes [#18445](https://github.com/cypress-io/cypress/issues/18445).\n*   An error now throws when invalid options are passed to the `selectorPriority` configuration option of `Cypress.SelectorPlayground.defaults`. Valid values are `data-*`, `id`, `class`, `tag`, `attribute`, or `nth-child`. Fixes [#7745](https://github.com/cypress-io/cypress/issues/7745).\n\n**Dependency Updates:**\n\n*   Pinned resolution of `ua-parser-js` to `0.7.24` to avoid dependency resolution to the compromised package versions. Please read the [security advisory](https://github.com/advisories/GHSA-pjwm-rvh2-c87w) and take actions advised as soon as possible. Addressed in [#18611](https://github.com/cypress-io/cypress/pull/18611)\n\n## 8.6.0[​](#8-6-0 \"Direct link to 8.6.0\")\n\n_Released 10/11/2021_\n\n**Features:**\n\n*   `cy.screenshot()` now accepts `overwrite: true` as an option to overwrite existing screenshots with the same file name. Addresses [#7955](https://github.com/cypress-io/cypress/issues/7955).\n*   `cy.select([])` can now be used to clear any selected options in a multi-value select. Addresses [#4318](https://github.com/cypress-io/cypress/issues/4318).\n*   Using `cy.pause()` when using `cypress run --headed --no-exit` will now pause a test. Addresses [#4044](https://github.com/cypress-io/cypress/issues/4044).\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in [8.2.0](#8-2-0) where certain XMLHttpRequests would not display their response bodies in the DevTools Console when clicked. Fixes [#17656](https://github.com/cypress-io/cypress/issues/17656).\n*   Fixed a regression in [8.3.0](#8-3-0) where capturing videos in Chrome versions earlier than 89 would result in choppy videos and skipped frames. Fixes [#18021](https://github.com/cypress-io/cypress/issues/18021).\n*   Cypress displays the correct error when certain custom error types are thrown within a test. Fixes [#18259](https://github.com/cypress-io/cypress/issues/18259).\n*   The Cypress App will no longer crash when passed a `--spec: {}` from the CLI and instead error when passed an invalid object argument. Fixes [#3957](https://github.com/cypress-io/cypress/issues/3957).\n*   Logging a plain object no longer results in the error \"Cannot convert object to primitive value\". Fixes [#18143](https://github.com/cypress-io/cypress/issues/18143).\n\n**Misc:**\n\n*   Updated the `cy.request()` error message when conflicting `failOnStatusCode` and `retryOnStatusCodeFailure` options are passed to be clearer. Fixes [#18271](https://github.com/cypress-io/cypress/issues/18271).\n\n**Dependency Updates:**\n\n*   Upgraded the Chromium browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `91.0.4472.164` to `93.0.4577.58`.\n*   Upgraded `electron` from `13.2.0` to `14.1.0`. Addressed in [#18318](https://github.com/cypress-io/cypress/issues/18318) and [#18384](https://github.com/cypress-io/cypress/issues/18384).\n\n## 8.5.0[​](#8-5-0 \"Direct link to 8.5.0\")\n\n_Released 09/27/2021_\n\n**Features:**\n\n*   You can now select an option by index within the [`.select()`](https://docs.cypress.io/api/commands/select) command. Addresses [#757](https://github.com/cypress-io/cypress/issues/757).\n*   Cypress now captures the repository URL on Drone CI. Addresses [#18210](https://github.com/cypress-io/cypress/issues/18210).\n\n**Bugfixes:**\n\n*   The download of Cypress now respects the `NO_PROXY` environment variable when one is set. Fixes [#17702](https://github.com/cypress-io/cypress/issues/17702).\n*   When using a custom config file and setting it up to record to the Dashboard, Cypress now writes the `projectId` in the custom config file instead of `cypress.json`. Fixes [#5747](https://github.com/cypress-io/cypress/issues/5747).\n\n**Misc:**\n\n*   Windows 32-bit has been deprecated and support will be removed in a later release. A deprecation warning will now display when using Cypress in a Windows 32-bit OS. See [#17962](https://github.com/cypress-io/cypress/issues/17962) for more detail. Addresses [#18094](https://github.com/cypress-io/cypress/issues/18094).\n*   Improved the error messages when an invalid argument type is passed to the [`.select()`](https://docs.cypress.io/api/commands/select) command. Addressed in [#18234](https://github.com/cypress-io/cypress/pull/18234).\n\n## 8.4.1[​](#8-4-1 \"Direct link to 8.4.1\")\n\n_Released 09/17/2021_\n\n**Bugfixes:**\n\n*   Cypress will no longer crash when setting up a project to record to the Dashboard or viewing the runs or record key for a previously set up project. Fixes [#18129](https://github.com/cypress-io/cypress/issues/18129).\n*   The branch collected for Drone CI now correctly reflects the source PR branch for showing in the Cypress Dashboard. Fixes [#17860](https://github.com/cypress-io/cypress/issues/17860).\n\n## 8.4.0[​](#8-4-0 \"Direct link to 8.4.0\")\n\n_Released 09/13/2021_\n\n**Features:**\n\n*   When the URL contains non-ASCII characters, you can use the new `decode` option of `cy.url()` to decode it. Addresses [#17399](https://github.com/cypress-io/cypress/issues/17399).\n\n**Bugfixes:**\n\n*   Cypress now better handles situations where the extension was installed in a read-only location. Fixes [#3852](https://github.com/cypress-io/cypress/issues/3852).\n*   A clearer error message is now thrown for `.check()` or `.uncheck()` when there are no matching value attributes found. Fixes[#7379](https://github.com/cypress-io/cypress/issues/7379).\n*   Hooks will no longer rerun on unrelated tests in some situations after a domain navigation. Fixes [#17705](https://github.com/cypress-io/cypress/issues/17705).\n*   `clientCertificate` types have been added for the Cypress configuration. Fixes [#17799](https://github.com/cypress-io/cypress/issues/17799).\n\n## 8.3.1[​](#8-3-1 \"Direct link to 8.3.1\")\n\n_Released 08/27/2021_\n\n**Performance:**\n\n*   Projects will now open much faster on MacOS Big Sur with improved browser detection performance. Fixes [#17773](https://github.com/cypress-io/cypress/issues/17773).\n\n**Bugfixes:**\n\n*   Fixed a regression in [8.3.0](https://docs.cypress.io/guides/references/changelog#8-3-0) where the correct exit code would not be issued during `cypress run-ct` while running in the Electron browser. Fixes [#17752](https://github.com/cypress-io/cypress/issues/17752) and [#17885](https://github.com/cypress-io/cypress/issues/17885).\n*   Fixed a regression in [8.3.0](https://docs.cypress.io/guides/references/changelog#8-3-0) where Cypress would cause a `SIGSEGV` error on Mac when closing the Cypress app opened via `cypress open`. Fixes [#17766](https://github.com/cypress-io/cypress/issues/17766).\n*   The `beforeinput` event now correctly fires in Firefox during keyboard events. Fixes [#17583](https://github.com/cypress-io/cypress/issues/17583).\n\n**Misc:**\n\n*   `cy.document()` typings now allow for the `timeout` option. Fixes [#17695](https://github.com/cypress-io/cypress/issues/17695).\n*   `cy.title()` typings now allow for the `timeout` option. Fixes [#17781](https://github.com/cypress-io/cypress/issues/17781)\n\n**Dependency Updates:**\n\n*   Upgraded `electron` from `13.1.7` to `13.2.0`. Addressed in [#17772](https://github.com/cypress-io/cypress/pull/17772).\n*   Upgraded `@cypress/request` from `2.88.5` to `2.88.6`. Addresses [#17622](https://github.com/cypress-io/cypress/pull/17622).\n\n## 8.3.0[​](#8-3-0 \"Direct link to 8.3.0\")\n\n_Released 08/16/2021_\n\n**Features:**\n\n*   The instructions for recording a run have been updated for some users. Addressed in [#17317](https://github.com/cypress-io/cypress/pull/17317).\n\n**Performance:**\n\n*   We addressed an issue that increased CPU usage during video recording in Chrome 89+/Electron 12+. Fixes [#16152](https://github.com/cypress-io/cypress/issues/16152).\n*   Fixed a regression in [7.2.0](https://docs.cypress.io/guides/references/changelog#7-2-0) that would cause `cy.visit()` to take longer to fire its load event in some circumstances. Fixes [#16671](https://github.com/cypress-io/cypress/issues/16671).\n\n**Bugfixes:**\n\n*   Fixed an issue that could cause intermittent OpenSSL errors when the local CA cert cache becomes corrupted. Fixes [#8705](https://github.com/cypress-io/cypress/issues/8705).\n*   Fixed a regression in [7.2.0](https://docs.cypress.io/guides/references/changelog#7-2-0) causing the menu bar of Cypress to not be clickable in Windows. Fixes [#16323](https://github.com/cypress-io/cypress/issues/16323).\n*   `res.send` of `cy.intercept()` will no longer override JSON-related content types. Fixes [#17084](https://github.com/cypress-io/cypress/issues/17084).\n*   The `times` option of `cy.intercept` now works properly with `req.reply`. Fixes [#17139](https://github.com/cypress-io/cypress/issues/17139).\n*   Fixed a regression in [8.0.0](https://docs.cypress.io/guides/references/changelog#8-0-0) where Cypress would always warn that `chromeWebSecurity` is set to \"false\" when it wasn't. Fixes [#17614](https://github.com/cypress-io/cypress/issues/17614).\n\n**Dependency Updates:**\n\n*   Upgraded Chrome browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `89` to `91`. Addressed in [#17408](https://github.com/cypress-io/cypress/pull/17408).\n*   Upgraded bundled Node.js version from `14.6.0` to `14.17.0`. Addressed in [#17408](https://github.com/cypress-io/cypress/pull/17408).\n*   Upgraded `electron` from `12.0.0-beta.14` to `13.1.7`. Addressed in [#17408](https://github.com/cypress-io/cypress/pull/17408).\n*   Upgraded `url-parse` from `1.5.1` to `1.5.2`. Addressed in [#17719](https://github.com/cypress-io/cypress/pull/17719).\n\n## 8.2.0[​](#8-2-0 \"Direct link to 8.2.0\")\n\n_Released 08/04/2021_\n\n**Features:**\n\n*   You can now cache and restore [cookies](https://docs.cypress.io/api/cypress-api/cookies), [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage), and [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) in order to reduce test setup times by using [`cy.session()`](https://docs.cypress.io/api/commands/session). The `session` API is experimental and can be enabled by setting the [`experimentalSessionSupport`](https://docs.cypress.io/guides/references/experiments) flag to `true` in your Cypress config. See [our blog](https://cypress.io/blog/2021/08/03/authenticate-faster-in-tests-cy-session-command/) and the [`cy.session()`](https://docs.cypress.io/api/commands/session) doc for more detail.\n*   The logging experience around HTTP requests has been updated.\n    *   `fetch` requests are always displayed in the Command Log, regardless of if `experimentalFetchSupport` is enabled.\n    *   Duplicate logs for XHRs, fetches, and `cy.intercept()` have been consolidated - Fixes [#14843](https://github.com/cypress-io/cypress/issues/14843).\n    *   The user experience around the information displayed in the console when clicking on `cy.intercept()` request logs has been improved.\n    *   Request logs now indicate if a request has gone to the origin or if it has been stubbed by displaying a filled or empty circle in the request log.\n    *   Request logs now display information about if the request and/or response was modified by a `cy.intercept()`.\n    *   The tooltip displayed when mousing over a request log now displays information about the matched `cy.intercept()`/`cy.route()` rules.\n    *   Fixed an issue where pending request logs were not ended between tests. Fixes [#14655](https://github.com/cypress-io/cypress/issues/14655).\n*   There's now a `Cypress.currentTest` property to access name the currently executing test via `Cypress.currentTest.title` and `Cypress.currentTest.titlePath`. Addresses [#2972](https://github.com/cypress-io/cypress/issues/2972).\n\n**Bugfixes:**\n\n*   A \"removing cookie failed\" error will no longer throw when cookies are cleared in Firefox. Fixes [#6375](https://github.com/cypress-io/cypress/issues/6375).\n*   Cypress no longer throws the error \"cannot read property split of undefined\" in certain circumstances when application errors are thrown. Fixes [#17378](https://github.com/cypress-io/cypress/issues/17378).\n*   Cypress now properly runs the final test when nested in a suite with a `before` hook. Fixes [#9026](https://github.com/cypress-io/cypress/issues/9026).\n*   Fixed a regression in [8.0.0](https://docs.cypress.io/guides/references/changelog#8-0-0) where an error would longer throw when there is no `/etc/passwd` entry for the current user, such as in some Docker and GitHub Action setups. Fixes [#17415](https://github.com/cypress-io/cypress/issues/17415).\n*   Cypress now throws if a function is incorrectly passed as the second argument to `cy.wait()`. Fixes [#17436](https://github.com/cypress-io/cypress/issues/17436).\n\n## 8.1.0[​](#8-1-0 \"Direct link to 8.1.0\")\n\n_Released 07/29/2021_\n\n**Features:**\n\n*   When using `experimentalStudio`, you can now generate assertions in [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) by right clicking on an element. Addressed in [#16295](https://github.com/cypress-io/cypress/pull/16295).\n*   When searching specs in the Test Runner during end-to-end testing, characters that are not letters will be ignored and don't have to be typed. Addressed in [#17346](https://github.com/cypress-io/cypress/issues/17346).\n\n**Performance:**\n\n*   The Test Runner's performance has been improved when running a large number of commands within a single test. Fixes [#6783](https://github.com/cypress-io/cypress/issues/6783).\n\n**Bugfixes:**\n\n*   Add Yarn v2 pnp support to our default webpack processor. Fixes [#8008](https://github.com/cypress-io/cypress/issues/8008) and [#16111](https://github.com/cypress-io/cypress/issues/16111).\n*   When running Cypress in global mode, an error will no longer be thrown when trying to add a new project to the Dashboard. Addressed in [#17514](https://github.com/cypress-io/cypress/pull/17514).\n*   The Test Runner will no longer crash in some instances when creating a new spec file from the GUI. [#17430](https://github.com/cypress-io/cypress/issues/17430).\n\n## 8.0.0[​](#8-0-0 \"Direct link to 8.0.0\")\n\n_Released 07/19/2021_\n\n**Summary:**\n\nWe've made some updates to ensure a consistent run experience across browsers. Now all browsers run via `cypress run` run headlessly, with a device pixel ratio of 1, and a screen size of 1280x720 by default.\n\n**Breaking Changes:**\n\nPlease read our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide) which explains the changes in more detail and how to change your code to migrate to Cypress 8.0.\\*\\*\n\n*   When running `cypress run` previous to 8.0, some browsers would launch headed while others were launched headless by default. Cypress now runs all browsers during `cypress run` as headless by default. Addresses [#16832](https://github.com/cypress-io/cypress/issues/16832).\n*   The default screen size when running a headless browser has been reverted back to 1280x720 pixels (pre 7.0 behavior). Addresses [#16853](https://github.com/cypress-io/cypress/issues/16853).\n*   When running the `--headless` Chrome browser via `cypress run`, the device pixel ratio will now be 1 by default, matching the behavior of all other browsers. This behavior can be overridden through the [browser launch API](https://docs.cypress.io/api/plugins/browser-launch-api#Override-the-device-pixel-ratio). Addresses [#17375](https://github.com/cypress-io/cypress/issues/17375).\n*   Cypress now enforces version checks for browser launching and will error during `cypress run` and not allow opening the browser in `cypress open` when attempting to open unsupported browser versions. Cypress supports Chrome >= 64, Firefox >= 86, and Edge >= 79. Addressed in [#17355](https://github.com/cypress-io/cypress/pull/17355).\n*   Arguments returned from a chained function will no longer incorrectly be of type `jQuery` and instead have an `any` type. Fixes [#16669](https://github.com/cypress-io/cypress/issues/16669).\n*   The `Cypress.ConfigOptions`, `Cypress.ResolvedConfigOptions` and `Cypress.RuntimeConfigOption` types have been updated so that `ConfigOptions` match the JSON schema. Addressed in [#17251](https://github.com/cypress-io/cypress/pull/17251).\n\n**Features:**\n\n*   You can now configure certificate authority (CA) and client certificates to use within tests on a per-URL basis via a `clientCertificates` configuration option. See [Client certificates](https://docs.cypress.io/guides/references/client-certificates) for more detail.\n*   Setting the environment variable `ELECTRON_RUN_AS_NODE` now starts Cypress as a normal Node.js process rather than an Electron process. Addresses [#16505](https://github.com/cypress-io/cypress/issues/16505).\n\n**Bugfixes:**\n\n*   `console.log` and `console.error` called within the [plugins file](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Plugins-file) will now be captured in the `stdout` sent to the Cypress Dashboard, making it visible in Output logs in the Dashboard. Fixes [#7434](https://github.com/cypress-io/cypress/issues/7434).\n*   There are several fixes for [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) including:\n    *   The `times` option now works correctly with `req.continue`. Fixes [#16821](https://github.com/cypress-io/cypress/issues/16821).\n    *   `localhost` is now accepted as a valid `hostname` in the `RouteMatcher`. Fixes [#17015](https://github.com/cypress-io/cypress/issues/17015).\n    *   `delay` now works correctly with a `statusCode` of 204. Fixes [#15188](https://github.com/cypress-io/cypress/issues/15188).\n*   When using the experimental [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio), there should be a reduced occurrence of \"Studio failed to save commands\" error messages. Fixes [#14767](https://github.com/cypress-io/cypress/issues/14767).\n*   [`cy.invoke()`](https://docs.cypress.io/api/commands/invoke) now retains the proper `this` context on nested object methods. Fixes [#3871](https://github.com/cypress-io/cypress/issues/3871).\n*   We no longer trigger unnecessary snapshot re-renders when hovering over the Command Log. Fixes [#17257](https://github.com/cypress-io/cypress/issues/17257).\n\n## 7.7.0[​](#7-7-0 \"Direct link to 7.7.0\")\n\n_Released 07/07/2021_\n\n**Features:**\n\n*   When using `experimentalStudio`, [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) can now copy all commands generated to your clipboard. Addressed in [#16912](https://github.com/cypress-io/cypress/issues/16912).\n\n**Bugfixes:**\n\n*   Cypress now respects `preventScroll` options passed to `element.focus()` calls within the application under test. Fixes [#15294](https://github.com/cypress-io/cypress/issues/15294).\n*   Using `.contains(0)` will now show the zero in the Command Log. Fixes [#1119](https://github.com/cypress-io/cypress/issues/1119).\n*   Cypress will no longer show a warning about allowed keys for the `showedOnBoardingModal` when running `cypress open`. Fixes [#17095](https://github.com/cypress-io/cypress/issues/17095).\n*   The Cypress Studio introduction modal will now display with the correct styling. Fixes [#17102](https://github.com/cypress-io/cypress/issues/17102).\n*   The types for `.contains()` now correctly allow for the `includeShadowDom` option. Fixes [#17066](https://github.com/cypress-io/cypress/issues/17066).\n\n**Misc:**\n\n*   We updated the messaging when Cypress fails to start to be clearer that it's not always due to a dependency missing. Addresses [#17112](https://github.com/cypress-io/cypress/pull/17112).\n\n## 7.6.0[​](#7-6-0 \"Direct link to 7.6.0\")\n\n_Released 06/23/2021_\n\n**Features:**\n\n*   You can now override the default delay between typing characters for `.type()` with [`Cypress.Keyboard.defaults()`](https://on.cypress.io/keyboard-api) or via [test configuration](https://on.cypress.io/writing-and-organizing-tests#Allowed-config-values). Addresses [#566](https://github.com/cypress-io/cypress/issues/566).\n*   The experience when opening a new project via `cypress open` has been improved. Addressed in [#15826](https://github.com/cypress-io/cypress/pull/15826).\n    *   The scaffolded example files have been updated to include examples tests of the TodoMVC project.\n    *   You can now easily delete all of the scaffolded example files directly from the Test Runner GUI.\n    *   There's now a button to create a new spec file when no spec files are found in the project.\n    *   A new onboarding banner with be present with helpful links for new users and new projects.\n*   The incoming request object yielded to request handler functions passed to `cy.intercept()` (`req`) now has a `req.query` property, which is a getter/setter for the query parameters on the request URL. Addresses [#16327](https://github.com/cypress-io/cypress/issues/16327).\n*   You can now pass an `ArrayBuffer` as a request / response body with `cy.intercept()`. Addresses [#16722](https://github.com/cypress-io/cypress/issues/16722)\n\n**Bugfixes:**\n\n*   Cypress no longer hangs intermittently when using webpack 5. Fixes [#15447](https://github.com/cypress-io/cypress/issues/15447).\n*   It is no longer necessary to return the config from the plugins function when using the `dev-server:start` event for component testing. Fixes [#16860](https://github.com/cypress-io/cypress/issues/16860).\n*   `cy.intercept()` now correctly sets the response body as a string instead of an ArrayBuffer when it contains multi-byte characters. Fixes [#16292](https://github.com/cypress-io/cypress/issues/16292).\n*   `cy.intercept()` won't corrupt certain binary responses. Fixes [#16722](https://github.com/cypress-io/cypress/issues/16722).\n*   On Windows, the Cypress executable is now code signed by \"Cypress.io, Inc.\". This fixes `spawn UNKNOWN` errors when launching Cypress with code signing required by policy on Windows. Fixes [#2543](https://github.com/cypress-io/cypress/issues/2543)\n*   We now warn on `EPERM` errors when accessing the project directory instead of erroring. Fixes [#16933](https://github.com/cypress-io/cypress/issues/16933).\n*   Cypress now better handles running when browsers with unconventional versions are present on the machine. Fixes [#15485](https://github.com/cypress-io/cypress/issues/15485).\n*   Expanded the types for `CyHttpMessages.BaseMessage.headers` to support the value being an array of strings. Fixes [#16734](https://github.com/cypress-io/cypress/issues/16734).\n\n**Dependency Updates:**\n\n*   Added `enquirer` dependency. Fixes [#16846](https://github.com/cypress-io/cypress/issues/16846).\n\n## 7.5.0[​](#7-5-0 \"Direct link to 7.5.0\")\n\n_Released 06/07/2021_\n\n**Features:**\n\n*   The Test Runner has a new 'Docs' menu with links and prompts specific to helping you get started writing tests, set up in CI, and running tests in the Dashboard. Addressed in [#16433](https://github.com/cypress-io/cypress/pull/16433).\n*   `cy.request()` now accepts a generic in TypeScript for specifying the type of the request body. Addresses [#9109](https://github.com/cypress-io/cypress/issues/9109).\n\n**Bugfixes:**\n\n*   Cypress will not longer crash with a `hasBinary` infinite recursive call. Fixes [#16476](https://github.com/cypress-io/cypress/issues/16476).\n*   The `--config-file` option now correctly handles absolute paths. Fixes [#6136](https://github.com/cypress-io/cypress/issues/6136).\n*   `cy.location(<key>)` will now retry if the remote location returns an empty string, which is possible during otherwise harmless redirects. Fixes [#16463](https://github.com/cypress-io/cypress/issues/16463).\n*   Cypress now passes a flag to Chrome browsers to prevent update notifications from displaying in some cases. Fixes [#16693](https://github.com/cypress-io/cypress/issues/16693).\n*   TypeScript will now properly error when attempting to use the chai `<value>.should()` syntax. Fixes [#16548](https://github.com/cypress-io/cypress/issues/16548).\n\n**Dependency Updates:**\n\n*   Replaced deprecated `listr` with `listr2`. Addressed in [#16663](https://github.com/cypress-io/cypress/pull/16663).\n\n## 7.4.0[​](#7-4-0 \"Direct link to 7.4.0\")\n\n_Released 05/24/2021_\n\n**Features:**\n\n*   Cypress now detects and supports testing in the Chrome Beta browser. Addresses [#16376](https://github.com/cypress-io/cypress/issues/16376).\n*   There are new keyboard shortcuts to continue (c) and to go to the next test (n) when the Test Runner is paused via `.pause()` and to toggle auto-scrolling of the Test Runner (a). Addresses [#248](https://github.com/cypress-io/cypress/issues/248).\n\n**Bugfixes:**\n\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) can now send binary files in form data. Fixes [#1647](https://github.com/cypress-io/cypress/issues/1647).\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) can now send blob data. Fixes [#6178](https://github.com/cypress-io/cypress/issues/6178).\n*   Fixed an issue where [`cy.wait()`](https://docs.cypress.io/api/commands/wait) could yield the incorrect result when used with [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) and several simultaneous requests. Fixes [#16451](https://github.com/cypress-io/cypress/issues/16451).\n*   Improved the way that [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) matchers are displayed in the Command Log when using `RouteMatcher` properties besides `url` and `method`. Fixes [#9403](https://github.com/cypress-io/cypress/issues/9403).\n*   [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) argument validation has been improved. Invalid hostnames and extra arguments passed to `cy.intercept()` now result in an error. Addressed in [#16577](https://github.com/cypress-io/cypress/issues/16577).\n*   [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) no longer incorrectly captures parts of the Test Runner UI during component testing. Fixes [#16543](https://github.com/cypress-io/cypress/issues/16543).\n*   Spec files that containing spaces in the path will now properly open during `cypress open-ct`. Fixes [#16278](https://github.com/cypress-io/cypress/issues/16278).\n*   Cypress now correctly uses the `componentFolder` and `testFiles` values from returned from plugins in the component testing runner. Fixes [#16424](https://github.com/cypress-io/cypress/issues/16424).\n*   Video recordings in Chrome, Chromium, and Electron browsers will no longer drop frames, with the frequency increasing along with the length of the video. Fixes [#16648](https://github.com/cypress-io/cypress/issues/16648).\n*   Tests located outside of the `projectRoot` will now open in IDE and generate studio commands when saved. Fixes [#16255](https://github.com/cypress-io/cypress/issues/16255).\n*   `config` in the plugins file will now display in alphabetical order. Fixes [#16564](https://github.com/cypress-io/cypress/issues/16564).\n\n**Dependency Updates:**\n\n*   Upgraded `dependency-tree` from `7.0.2` to `8.1.0`. Addressed in [#16464](https://github.com/cypress-io/cypress/issues/16464).\n*   Upgraded `extract-zip` from `1.7.0` to `2.0.1`. Fixes [#6896](https://github.com/cypress-io/cypress/issues/6896)\n\n## 7.3.0[​](#7-3-0 \"Direct link to 7.3.0\")\n\n_Released 05/10/2021_\n\n**Features:**\n\n*   Component tests can now be launched via the [Module API](https://docs.cypress.io/guides/guides/module-api) by passing `testingType: 'component'` via the new `testingType` property. The `testingType` will default to `e2e`. Addresses [#16302](https://github.com/cypress-io/cypress/issues/16302).\n*   `cy.intercept()` now accepts a `times` option in the `RouteMatcher`. `times` will specify the number of times that a particular `cy.intercept()` should be applied. Addresses [#4460](https://github.com/cypress-io/cypress/issues/4460) and [#8531](https://github.com/cypress-io/cypress/issues/8531).\n*   `cy.intercept()` now accepts invocation using `cy.intercept(url, routeMatcher, handler)`, where `url` is a regular expression. Previously, this only worked if `url` was a string. Addresses [#16390](https://github.com/cypress-io/cypress/issues/16390).\n*   Cypress will now automatically get environment variables for LayerCI when recording to the Dashboard. Addresses [#16101](https://github.com/cypress-io/cypress/issues/16101).\n*   Setting the env var `DEBUG=cypress:server:record:ci-info` will print commit information and CI provider information that's sent to the Dashboard as debug logs. Addresses [#16236](https://github.com/cypress-io/cypress/issues/16236).\n*   Cypress can now use the certificate authority specified in npm config if `CYPRESS_DOWNLOAD_USE_CA` is specified. See [\"Using a custom CA\"](https://docs.cypress.io/guides/references/advanced-installation#Using-a-custom-certificate-authority-CA) for more information. Addresses [#8825](https://github.com/cypress-io/cypress/issues/8825).\n\n**Bugfixes:**\n\n*   Cypress will no longer incorrectly redirect the AUT window to `/__/` when `location.href` is set to a relative path within the call stack of an XHR event handler. Fixes [#3975](https://github.com/cypress-io/cypress/issues/3975) and [#7439](https://github.com/cypress-io/cypress/issues/7439).\n*   Cypress now properly handles when a form submit or anchor tag target is set to `_top` or `_parent` so that it no longer redirects the parent frame. Fixes [#1244](https://github.com/cypress-io/cypress/issues/1244).\n*   Fixed a regression in [6.5.0](https://docs.cypress.io/guides/references/changelog#6-5-0) that could cause Cypress to crash with a `RangeError: Maximum call stack size exceeded at _deconstructPacket` error. Most commonly, this occurred when handling network errors with `cy.request()`. Fixes [#15101](https://github.com/cypress-io/cypress/issues/15101).\n*   Fixed a regression in [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0) that caused the Test Runner to crash with an `ERR_INVALID_ARG_TYPE` type error when testing a binary file upload. Fixes [#15898](https://github.com/cypress-io/cypress/issues/15898) and [#16223](https://github.com/cypress-io/cypress/issues/16223).\n*   When verifying Cypress, we now listen for the 'close' event instead of the 'exit' event in an effort to fix some situations where the browser cannot be found even though it is on the system. Addressed in [#16312](https://github.com/cypress-io/cypress/issues/16312).\n*   Fixed a regression in [6.5.0](https://docs.cypress.io/guides/references/changelog#6-5-0) that caused a node warning about `.then()` only accepting functions to display. Fixes [#15281](https://github.com/cypress-io/cypress/issues/15281).\n*   `cy.intercept()` now adds a `access-control-expose-headers: '*'` header by default for CORS requests unless overridden. Fixes [#15050](https://github.com/cypress-io/cypress/issues/15050).\n*   Improved the way that `cy.intercept()` and `cy.route()` requests with multiple aliases are displayed in the command log. Addressed in [#16382](https://github.com/cypress-io/cypress/issues/16382).\n*   Cypress now correctly shows all `.should('contain')` assertions when chained after `.should('be.visible')`. Fixes [#16006](https://github.com/cypress-io/cypress/issues/16006).\n*   `Cypress.cookies.debug(true)` will now correctly show cookie-related messages on the console. Fixes [#15032](https://github.com/cypress-io/cypress/issues/15032).\n*   `cy.log()` will now show all arguments, not only the first 2. Fixes [#16068](https://github.com/cypress-io/cypress/issues/16068).\n*   `.select()` now correctly selects option elements with values that have `&nbsp;` characters. Fixes [#16045](https://github.com/cypress-io/cypress/issues/16045).\n*   The `e2e` and `component` configuration values will now correctly show when previewing resolved configuration in the Test Runner. Fixes [#16282](https://github.com/cypress-io/cypress/issues/16282).\n*   When passing the `—quiet` flag, Cypress will no longer print uploading output to Stdout. Fixes [#16268](https://github.com/cypress-io/cypress/issues/16268).\n*   When pressing the `/` hotkey in Firefox, Cypress will select the SpecList's SearchInput as it does in other browsers. Fixes [#16309](https://github.com/cypress-io/cypress/issues/16309).\n*   Cypress will now detect the default installation location of the Visual Studio Code editors on Windows machines. Fixes [#15080](https://github.com/cypress-io/cypress/issues/15080).\n*   Changing files extensions when creating a new test file should no longer add extra dots to the filename on Windows machines. Fixes [#16131](https://github.com/cypress-io/cypress/issues/16131).\n\n**Dependency Updates:**\n\n*   Upgraded `classnames` from `2.2.6` to `2.3.1`. Addressed in [#8337](https://github.com/cypress-io/cypress/issues/8337).\n*   Upgraded `color-string` from `1.5.4` to `1.5.5`. Addressed in [#16362](https://github.com/cypress-io/cypress/issues/16362).\n*   Upgraded `lodash` from `4.17.19` to `4.17.21`. Addressed in [#16406](https://github.com/cypress-io/cypress/issues/16406).\n*   Upgraded `registry-js` from `1.13.0` to `1.15.0`. Addressed in [#16409](https://github.com/cypress-io/cypress/issues/16409).\n*   Upgraded `url-parse` from `1.4.7` to `1.5.0`. Addressed in [#16408](https://github.com/cypress-io/cypress/issues/16408).\n\n## 7.2.0[​](#7-2-0 \"Direct link to 7.2.0\")\n\n_Released 04/26/2021_\n\n**Features:**\n\n*   You can now navigate through folders in the Test Runner using the Tab keyboard input and open or close the folder's content with the Enter & Space keyboard inputs. Addresses [#3741](https://github.com/cypress-io/cypress/issues/3741).\n\n**Performance:**\n\n*   Fixed a regression in [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0) that caused tests to run slowly, especially when run with constrained CPU resources. Fixes [#15853](https://github.com/cypress-io/cypress/issues/15853).\n*   Fixed a regression in [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0) causing decreased performance in Chromium browsers due to requesting screencast frames when video is disabled. Fixes [#16030](https://github.com/cypress-io/cypress/issues/16030).\n\n**Bugfixes:**\n\n*   Fixed a regression in [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0) that caused the Test Runner to crash with an `ERR_INVALID_ARG_TYPE` type error. We now correctly detect a utf8 request body with multi-byte Unicode characters. Fixes [#15901](https://github.com/cypress-io/cypress/issues/15901).\n*   Reusing `cy.intercept()` aliases will now work as expected. Fixes [#15823](https://github.com/cypress-io/cypress/issues/15823).\n*   Fixed an issue in 7.0 where users could get a misleading \"must pass a handler as the 3rd argument\" error when using `cy.intercept`. Fixes [#16117](https://github.com/cypress-io/cypress/issues/16117).\n*   `cypress run-ct` no longer hangs on Windows machines. Fixes [#15976](https://github.com/cypress-io/cypress/issues/15976).\n*   Hovering over a command log without a snapshot will no longer cause the error `Cannot read property 'name' of null`. Fixes [#15816](https://github.com/cypress-io/cypress/issues/15816).\n*   We now throw an error when attempting to `.select()` an `<option>` within a disabled `<fieldset>`. Fixes [#5951](https://github.com/cypress-io/cypress/issues/5951).\n*   `.type()` will no longer change the `value` attribute of button-like inputs with type button, submit, reset, image, radio, or checkbox. Fixes [#15913](https://github.com/cypress-io/cypress/issues/15913).\n*   Specs will now load when using a relative directory for `componentFolder` outside of the root project when specifying `--project`. Fixes [#16053](https://github.com/cypress-io/cypress/issues/16053).\n*   The search input will now display when there are many component spec files. Fixes [#16089](https://github.com/cypress-io/cypress/issues/16089).\n\n**Misc:**\n\n*   Lodash types have been updated. Addressed in [#15860](https://github.com/cypress-io/cypress/issues/15860).\n*   Types for the selector playground have been added. Addressed in [#15834](https://github.com/cypress-io/cypress/issues/15834).\n*   `Cypress.Cookies.defaults()` now returns the correct type instead of `void`. Addresses [#15426](https://github.com/cypress-io/cypress/issues/15426).\n*   `.then()` will show the correct type when a collection of HTMLElements is provided. Addressed in [#15869](https://github.com/cypress-io/cypress/pull/15869).\n*   Improved types for `cy.intercept()`. Addressed in [#16167](https://github.com/cypress-io/cypress/pull/16167).\n\n**Dependency Updates:**\n\n*   Downgraded the Chromium browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `89.0.4348.1` to `89.0.4328.0`. This was done to address a performance regression introduced in [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0). Addressed in [#16113](https://github.com/cypress-io/cypress/pull/16113).\n*   Upgraded `systeminformation` from `5.3.1` to `5.6.4`. Addressed in [#15819](https://github.com/cypress-io/cypress/issues/15819).\n*   Replaced `lolex` with `@sinonjs/fake-timers`. Addressed in [#15595](https://github.com/cypress-io/cypress/issues/15595).\n\n## 7.1.0[​](#7-1-0 \"Direct link to 7.1.0\")\n\n_Released 04/12/2021_\n\n**Features:**\n\n*   The events `before:spec`, `after:spec`, `before:run`, and `after:run` now fire in interactive mode in addition to run mode. This requires the `experimentalInteractiveRunEvents` flag to be enabled. Addressed in [#15787](https://github.com/cypress-io/cypress/pull/15787).\n\n**Bugfixes:**\n\n*   Viewport configuration set in `cypress.json` is now correctly applied in the Component Test Runner. Fixes [#15899](https://github.com/cypress-io/cypress/issues/15899).\n*   Running specs on Windows is now supported in the Component Test Runner. Fixes [#15842](https://github.com/cypress-io/cypress/issues/15842).\n*   Fixed an issue where crashes in Cypress would cause a misleading \"Unknown signal: true\" error after the actual crash message. Fixes [#15943](https://github.com/cypress-io/cypress/issues/15943).\n*   Fixed an issue introduced in 7.0.0 where requests with responses stubbed via `cy.intercept(routeMatcher, staticResponse)` would still be sent to the destination server. Fixes [#15841](https://github.com/cypress-io/cypress/issues/15841).\n\n## 7.0.1[​](#7-0-1 \"Direct link to 7.0.1\")\n\n_Released 04/07/2021_\n\n**Bugfixes:**\n\n*   Fixed a regression in 7.0.0 that caused the test runner not to check for updates. Fixes [#15829](https://github.com/cypress-io/cypress/issues/15829).\n*   The component testing spec list search input no longer throws an exception when hitting `Enter`. Addressed in [#15833](https://github.com/cypress-io/cypress/pull/15833).\n*   The preferred file opener modal no longer appears behind the command log. Addressed in [#15831](https://github.com/cypress-io/cypress/pull/15831).\n*   Cypress no longer crashes in certain circumstances when running in Docker without `--ipc=host`. Fixes [#15814](https://github.com/cypress-io/cypress/issues/15814) and [#350](https://github.com/cypress-io/cypress/issues/350).\n*   Node.js warnings are no longer incorrectly printed to `stderr` in production builds of Cypress. Addressed in [#15817](https://github.com/cypress-io/cypress/pull/15817).\n*   Cypress no longer prints a warning to `stdout` when the video cannot be found after a run. Addressed in [#15828](https://github.com/cypress-io/cypress/pull/15828).\n*   A warning is no longer displayed when running a TypeScript spec without a `tsconfig.json` file present. Addressed in [#15828](https://github.com/cypress-io/cypress/pull/15828).\n\n**Misc:**\n\n*   The \"New Spec File\" in the Desktop GUI has a less pronounced style. Addressed in [#15835](https://github.com/cypress-io/cypress/pull/15835).\n\n## 7.0.0[​](#7-0-0 \"Direct link to 7.0.0\")\n\n_Released 04/05/2021_\n\n**Summary:**\n\n🎉 Introducing the **Cypress Component Test Runner** - now in alpha. Today's release includes a brand new test runner designed to replace your Node-based component tests. Our Component Test Runner tests your components in the browser, just like a user would. And, since it runs in the browser, you get to debug your components using your favorite developer tools. Read our [Component Testing Guide](https://docs.cypress.io/guides/component-testing/overview) for more details.\n\n**Breaking Changes:**\n\nPlease read our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide) which explains the changes in more detail and how to change your code to migrate to Cypress 7.0.\\*\\*\n\n*   We introduced several breaking changes to [cy.intercept()](https://docs.cypress.io/api/commands/intercept). See the [cy.intercept()](https://docs.cypress.io/api/commands/intercept) docs for full usage examples. Breaking changes:\n    *   Request handlers supplied to `cy.intercept()` are now matched starting with the most recently defined request interceptor. This allows users to override request handlers by calling `cy.intercept()` again. This matches the previous behavior that was default in `cy.route()`. Addresses [#9302](https://github.com/cypress-io/cypress/issues/9302).\n    *   `cy.intercept()` now automatically parses more JSON MIME types, including 'application/vnd.api+json'. You can now remove `JSON.parse(req.body)` or `JSON.parse(res.body)` from some tests that previously required it. Addresses [#14763](https://github.com/cypress-io/cypress/issues/14763).\n    *   Falsy values (with the exception of `undefined`) supplied as the body of a `StaticResponse` to `cy.intercept()` will now be JSONified and sent as the body. Previously, an empty string was sent instead. Addresses [#15234](https://github.com/cypress-io/cypress/issues/15234) and [#14205](https://github.com/cypress-io/cypress/issues/14205).\n    *   The `matchUrlAgainstPath` `RouteMatcher` property has been removed from `cy.intercept()`.\n    *   The \"substring match\" from `cy.intercept()` URL matching has been removed. Previously, a URL would match if it contained the supplied string anywhere. Now, the URL (including querystring) only matches if it is an equality match or a minimatch.\n    *   `res.delay()` and `res.throttle()` have been renamed to `res.setDelay()` and `res.setThrottle()`, respectively. Addresses [#15700](https://github.com/cypress-io/cypress/issues/15700).\n    *   `cy.route2()` was previously aliased to `cy.intercept()`. Now the alias `cy.route2()` has been removed. Please update usage of `cy.route2()` to `cy.intercept()`. Addressed in [#14709](https://github.com/cypress-io/cypress/pull/14709).\n*   Component tests have been migrated to use a dedicated test runner and are bundled differently. See the [Migration Guide](https://docs.cypress.io/guides/references/migration-guide#Component-Testing) for full examples on how to migrate. Addressed in [#14479](https://github.com/cypress-io/cypress/pull/14479).\n    *   Component tests will not be executed when running `cypress open` or `cypress run`. Now, they need to be executed by running `cypress open-ct` or `cypress run-ct`. Addressed in [#15701](https://github.com/cypress-io/cypress/pull/15701).\n    *   `experimentalComponentTesting` must be removed from your configuration file, `cypress.json` by default, or it will throw an error. Addressed in [#15701](https://github.com/cypress-io/cypress/pull/15701).\n    *   The `file:preprocessor` event is no longer used to compile component tests. Now, a `dev-server:start` event must be registered.\n*   Cypress now catches uncaught errors and fails the test even if the application under test has defined `window.onerror`. Addresses [#8802](https://github.com/cypress-io/cypress/pull/8802).\n*   Cypress now fails tests if there is an unhandled promise rejection in the application under test. Unhandled rejections will trigger the `uncaught:exception` event with the promise as the third argument. Addresses [#243](https://github.com/cypress-io/cypress/issues/243).\n*   Cypress now throws an error if the application under test redirects more than 20 times. The number of times allowed to redirect is configurable via the [`redirectionLimit`](https://docs.cypress.io/guides/references/configuration#Global) config. Addresses [#14445](https://github.com/cypress-io/cypress/issues/14445).\n*   The default preprocessor now targets a more modern version of ECMAScript. Addressed in [#15274](https://github.com/cypress-io/cypress/pull/15274).\n*   We now enable [`contextIsolation`](https://www.electronjs.org/docs/tutorial/context-isolation) by default in the Electron browser. You can override this option if needed within the `before:browser:launch` API. Addressed in [#15493](https://github.com/cypress-io/cypress/pull/15493).\n*   `Cypress.moment()` has been removed. Please migrate to a different datetime formatter. See [our recipe](https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/blogs__dayjs) for example replacements. Addresses [#8714](https://github.com/cypress-io/cypress/issues/8714).\n*   The bundled Node.js version was upgraded from `12.18.3` to `14.16.0`. This could change the behavior of code within the `pluginsFile` when using the [bundled Node.js version](https://docs.cypress.io/guides/references/legacy-configuration#Node-version) of Cypress. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/15292).\n*   Installing Cypress on your system now requires Node.js 12+. Addresses [#9545](https://github.com/cypress-io/cypress/issues/9545).\n*   The default headless browser window size has been increased to 1920x1080 pixels to capture [High-definition videos and screenshots](https://www.cypress.io/blog/2021/03/01/generate-high-resolution-videos-and-screenshots/). Addresses [#15752](https://github.com/cypress-io/cypress/issues/15752), [#15730](https://github.com/cypress-io/cypress/issues/15730), and [#15481](https://github.com/cypress-io/cypress/issues/15481).\n\n**Features:**\n\n*   A command log entry is now displayed when there is an uncaught exception or unhandled rejection. Addresses [#8236](https://github.com/cypress-io/cypress/issues/8236).\n*   We added several features to [cy.intercept()](https://docs.cypress.io/api/commands/intercept). See the [cy.intercept()](https://docs.cypress.io/api/commands/intercept) docs for full usage examples. Addressed in [#14543](https://github.com/cypress-io/cypress/pull/14543). New features:\n    *   There are new events on the req object for `cy.intercept()` including `before:response`, `response`, and `after:response`.\n    *   Response handlers (supplied via event handlers or via `req.continue(cb)`) supplied to `cy.intercept()` will be called in reverse order until `res.send` is called or until there are no more response handlers.\n    *   A new option, `middleware`, has been added to the `RouteMatcher` type. If true, the supplied request handler will be called before any non-middleware request handlers.\n    *   A new function, `req.continue(cb)`, is available on request objects yielded by `cy.intercept()`. It is functionally the same as `req.reply(cb)` - the request will stop propagating to other event handlers, will be sent outgoing, and the response will be handled by cb.\n    *   `cy.intercept()` can now be called with a new overload: `cy.intercept(url, routeMatcher, handler)`. `routeMatcher` will be merged with `url`, and the handler is required.\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) can now visit pages with `application/xhtml*` content-type. Addresses [#15738](https://github.com/cypress-io/cypress/issues/15738).\n*   You can now pass runner specific configuration in order to pass different configuration values to `component` tests versus `e2e` tests. Addressed in [#15526](https://github.com/cypress-io/cypress/pull/15526).\n*   There's a new keyboard shortcut (`ctrl/cmd + f`) to search spec files in the Test Runner based on your OS. Addresses [#6229](https://github.com/cypress-io/cypress/issues/6229).\n*   You can now create a new spec file directly from the Test Runner in the Desktop. Addressed in [#15335](https://github.com/cypress-io/cypress/issues/15335).\n*   [`cy.tick()`](https://docs.cypress.io/api/commands/tick) now accepts a `log` option. Addresses [#15180](https://github.com/cypress-io/cypress/issues/15180).\n*   The Cypress proxy now adds a `keep-alive` header to all proxy responses. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/15292)\n*   Cypress no longer forces specific `NODE_OPTIONS`. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/15292)\n\n**Bugfixes:**\n\n*   The `response.body` of [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) is now correct after stubbing a response using `res.send({ fixture })` in a `req.continue` callback or a `before:response` or `response` handler. Addressed in [#14543](https://github.com/cypress-io/cypress/pull/14543).\n*   Fixed an issue where only the first matching alias for a route would yield a response object on [`cy.wait()`](https://docs.cypress.io/api/commands/wait). Fixes [#14522](https://github.com/cypress-io/cypress/issues/14522).\n*   [`.click()`](https://docs.cypress.io/api/commands/click) will no longer fail with \"coordsHistory must be at least 2 sets of coords\" when specifying `{ multiple: true }`. Fixes [#3738](https://github.com/cypress-io/cypress/issues/3738).\n*   Cypress now checks visibility correctly when an element has CSS \"position: sticky\". Fixes [#14938](https://github.com/cypress-io/cypress/issues/14938).\n*   After selecting a project in global mode and clicking the back button, Cypress will no longer crash. Fixes [#15089](https://github.com/cypress-io/cypress/issues/15089).\n*   Errors `Refused to apply style` are gone from the console in `open-ct` during Component Testing. Addressed in [#15661](https://github.com/cypress-io/cypress/issues/15661).\n*   Some memory leaks were fixed in `@cypress/vue`. Addressed in [#15275](https://github.com/cypress-io/cypress/issues/15275).\n\n**Misc:**\n\n*   The types for `set-cookie` allow `string[]`, so the header's type has been changed to reflect this. Addresses [#15419](https://github.com/cypress-io/cypress/pull/15419).\n*   The type definition for [`cy.writeFile()`](https://docs.cypress.io/api/commands/writefile) now allows 4 arguments. Addresses [#15353](https://github.com/cypress-io/cypress/issues/15353).\n*   [`.then()`](https://docs.cypress.io/api/commands/then) will show the correct type when raw HTMLElements are provided. Addresses [#14875](https://github.com/cypress-io/cypress/issues/14875)\n*   The Cypress Studio icon now displays properly for tests with long titles. Addresses [#15182](https://github.com/cypress-io/cypress/issues/15182).\n*   There were some minor improvements made to the UI when setting up a project in the Test Runner. Addressed in [#15665](https://github.com/cypress-io/cypress/pull/15665).\n\n**Dependency Updates**\n\n*   Upgraded Chrome browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `87` to `89`. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/15292).\n*   Upgraded bundled Node.js version from `12.18.3` to `14.16.0`. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/15292).\n*   Upgraded `electron` from `11.3.0` to `12.0.0`. Addressed in [#15292](https://github.com/cypress-io/cypress/pull/15292).\n\n## 6.9.1[​](#6-9-1 \"Direct link to 6.9.1\")\n\n_Released 4/5/2021_\n\nThis release contains the same features as 6.8.0. It was published to provide a non-breaking alternative to 6.9.0, which was mistakenly published with breaking changes.\n\n## 6.9.0[​](#6-9-0 \"Direct link to 6.9.0\")\n\n_Released 4/5/2021_\n\nThis release was mistakenly published with breaking changes, is deprecated, and should not be used. Upgrade to 6.9.1 or 7.0.0, or stay on 6.8.0.\n\n## 6.8.0[​](#6-8-0 \"Direct link to 6.8.0\")\n\n_Released 3/17/2021_\n\n**User Experience:**\n\n*   Improved the specs list user interface with a new icon set and accessibility features when in [Component Testing](https://docs.cypress.io/guides/component-testing/overview) mode (alpha). Addressed in [#15513](https://github.com/cypress-io/cypress/issues/15513)\n\n**Bugfixes:**\n\n*   Cypress will no longer exit with an error when recording a run to the Dashboard with empty specfiles. Fixes [#15512](https://github.com/cypress-io/cypress/issues/15512).\n*   When using `experimentalStudio`, [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) the icon to add commands will now fully display on long test titles. Fixes [#15182](https://github.com/cypress-io/cypress/issues/15182).\n\n## 6.7.1[​](#6-7-1 \"Direct link to 6.7.1\")\n\n_Released 3/15/2021_\n\n**Bugfixes:**\n\n*   Interacting with an element that requires scrolling within an element with `scroll-behavior: smooth` no longer fails Cypress's actionability check. Fixes [#15453](https://github.com/cypress-io/cypress/issues/15453).\n*   A regression in [6.7.0](#6-7-0) has been fixed so that the `projectId` will be written correctly to the `cypress.json` file on initial creation without an extra config object. Fixes [#15497](https://github.com/cypress-io/cypress/issues/15497).\n\n## 6.7.0[​](#6-7-0 \"Direct link to 6.7.0\")\n\n_Released 3/15/2021_\n\n**Features:**\n\n*   The `experimentalRunEvents` configuration flag has been removed. You can now listen to `before:run`, `after:run`, `before:spec` and `after:spec` events in the plugins file without needing the [experimentalRunEvents](https://docs.cypress.io/guides/references/experiments) configuration option. See the [`before:run`](https://docs.cypress.io/api/plugins/before-run-api), [`after:run`](https://docs.cypress.io/api/plugins/after-run-api), [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api) and [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) docs for more information. Addressed in [#15276](https://github.com/cypress-io/cypress/pull/15276).\n*   When canceling a run from the Dashboard, previously only parallelized runs would cancel correctly. Now all recorded runs will respect cancelation and exit early. Addresses [#1691](https://github.com/cypress-io/cypress/issues/1691).\n*   [Test configuration](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Configuration) is now captured and sent when recording to the Dashboard. Addresses [#15487](https://github.com/cypress-io/cypress/issues/15487).\n*   Cypress now sends test details to the Dashboard at the beginning of a recorded run, so historical test code and other data can be provided to the Dashboard upfront. Addressed in [#14925](https://github.com/cypress-io/cypress/issues/14925).\n*   The full stack trace from errors thrown in the preprocessor are now displayed. Addressed in [#15198](https://github.com/cypress-io/cypress/pull/15198).\n*   Configuration values which are changed at runtime prior to tests running are now properly shown as resolved from the spec code within the Module API to indicate where the change originated from. Addresses [#15486](https://github.com/cypress-io/cypress/issues/15486).\n\n**Bugfixes:**\n\n*   FFmpeg will no longer error (\"width not divisible by 2\") during video recording in Chromium-family browsers, including Chrome, Electron, and Edge. Fixes [#3491](https://github.com/cypress-io/cypress/issues/3491) and [#15300](https://github.com/cypress-io/cypress/issues/15300).\n*   [cy.wait()](https://docs.cypress.io/api/commands/wait) no longer falsely returns a timeout when the user aborts an XHR. Fixes [#9549](https://github.com/cypress-io/cypress/issues/9549).\n*   [.clear()](https://docs.cypress.io/api/commands/clear) and [`.type('{selectall}{del}')`](https://docs.cypress.io/api/commands/type) now behave the same when they're used against elements that contain text inputs. Fixes [#8447](https://github.com/cypress-io/cypress/issues/8447).\n*   When using `experimentalStudio`, [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) now records typing by using the value of the input rather than the keys that were pressed. Studio also no longer records pressing special keys (such as arrows or ctrl) except for Enter. Fixes [#15023](https://github.com/cypress-io/cypress/issues/15023).\n*   Empty jQuery objects are now properly shown in error messages in the Command Log. Fixes [#14279](https://github.com/cypress-io/cypress/issues/14279).\n*   Length assertions on DOM elements now properly show the user-defined assertion message if specified. Fixes [#14484](https://github.com/cypress-io/cypress/issues/14484).\n*   Cypress no longer scrolls on `mouse down` event, fixes [#8279](https://github.com/cypress-io/cypress/issues/8279).\n\n**Misc:**\n\n*   We updated the UI when connecting a project to the Dashboard. Addressed in [#14877](https://github.com/cypress-io/cypress/issues/14877).\n*   \"Test recordings\" recorded to the Cypress Dashboard are now referred to as recorded \"test results.\" Addresses [#15376](https://github.com/cypress-io/cypress/issues/15376).\n*   Errors shown from the plugins file now display top-aligned. Addressed in [#15347](https://github.com/cypress-io/cypress/issues/15347).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` from `11.2.3` to `11.3.0`. Addressed in [#15201](https://github.com/cypress-io/cypress/issues/15201).\n\n## 6.6.0[​](#6-6-0 \"Direct link to 6.6.0\")\n\n_Released 2/18/2021_\n\n**Features:**\n\n*   Cypress now extracts and sends CodeFresh CI default variables when recording to the Dashboard. Addresses [#4609](https://github.com/cypress-io/cypress/issues/4609)\n\n**Dependency Updates:**\n\n*   Upgraded `ramda` to version `0.27.1`. Addressed in [#14958](https://github.com/cypress-io/cypress/issues/14958).\n\n## 6.5.0[​](#6-5-0 \"Direct link to 6.5.0\")\n\n_Released 2/15/2021_\n\n**Performance:**\n\n*   Improved the startup time of `cypress open` and `cypress run`. Addresses [#15075](https://github.com/cypress-io/cypress/issues/15075).\n\n**Bugfixes:**\n\n*   Fixed an issue where tests would display as failed if an event (such as an XHR request) failed after the test was already completed. This only affects the display of the test and not what was reported in run mode, so it would not have had an effect on suites running in CI. Addresses [#14978](https://github.com/cypress-io/cypress/issues/14978).\n*   Fixed a regression introduced in 6.4.0 that caused Electron to crash when opening outside links in the Command Log. Addresses [#14912](https://github.com/cypress-io/cypress/issues/14912).\n*   Fixed an issue where browser paths with double backslashes would not work as expected on Windows. Addresses [#14719](https://github.com/cypress-io/cypress/issues/14719).\n*   Fixed Microsoft Edge browser detection when passing a path on Windows. Addresses [#14716](https://github.com/cypress-io/cypress/issues/14716).\n*   Fixed an issue where the types for `Cypress.on` did not support chaining. Addresses [#14991](https://github.com/cypress-io/cypress/issues/14991).\n*   Fixed an issue where, when installing two Cypress instances simultaneously, the downloaded `.zip` could become corrupted and break the install process. Addresses [#4595](https://github.com/cypress-io/cypress/issues/4595).\n\n**Misc:**\n\n*   Expanded search bar in desktop GUI to fill the entire width. Addresses [#14830](https://github.com/cypress-io/cypress/issues/14830).\n*   Added `autoEnd` to the types for `LogConfig`. Addresses [#9590](https://github.com/cypress-io/cypress/issues/9590).\n*   We collect more variables from Bitbucket pipelines to correctly display the pull request information in the Dashboard. Addresses [#15081](https://github.com/cypress-io/cypress/issues/15081).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` to version `11.2.3`. Addresses [#15056](https://github.com/cypress-io/cypress/issues/15056).\n\n## 6.4.0[​](#6-4-0 \"Direct link to 6.4.0\")\n\n_Released 2/1/2021_\n\n**Features:**\n\n*   There's now a [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) entry in the Test Runner for when a file is downloaded. Addresses [#14749](https://github.com/cypress-io/cypress/issues/14749).\n\n**Deprecations:**\n\n*   The `delayMs` option for [cy.intercept()](https://docs.cypress.io/api/commands/intercept) has been renamed to `delay`. `delayMs` will still work, but it is deprecated and will be removed in a future release. Addresses [#14822](https://github.com/cypress-io/cypress/issues/14822).\n\n**Bugfixes:**\n\n*   Fixed an issue causing a webpack compilation error when a `browserslist` is present in project root. Addresses [#8864](https://github.com/cypress-io/cypress/issues/8864).\n*   Fixed an issue with [cy.intercept()](https://docs.cypress.io/api/commands/intercept) where aliases set via `req.alias` containing a period character would not work as expected. Addresses [#14444](https://github.com/cypress-io/cypress/issues/14444).\n*   Fixed an issue where delays set using [cy.intercept()](https://docs.cypress.io/api/commands/intercept) would not work as expected. Addresses [#14446](https://github.com/cypress-io/cypress/issues/14446) and [#14511](https://github.com/cypress-io/cypress/issues/14511).\n*   Reverted a change to how the Chrome DevTools Protocol is established. Instead of using stdio and then falling back to TCP, Cypress now only uses TCP to try to connect to Chrome DevTools Protocol. Addresses [#14819](https://github.com/cypress-io/cypress/issues/14819).\n*   We now better handle spec paths containing special characters so they properly show in the code frame and work when interacting via your IDE. Addresses [#14659](https://github.com/cypress-io/cypress/issues/14659).\n*   We addressed several issues with the experimental [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio). To enable the Cypress Studio you can set `experimentalStudio` to `true` in your Cypress configuration. Issues addressed:\n    *   Cypress Studio now prompts to start adding commands after visiting an inputted url. Addresses [#14688](https://github.com/cypress-io/cypress/issues/14688).\n    *   Empty `.type()` commands will no longer be generated when tabbing through inputs. Addresses [#14684](https://github.com/cypress-io/cypress/issues/14684).\n    *   Cypress Studio no longer prompt to enter a URL if the test is in an errored state. Addresses [#14686](https://github.com/cypress-io/cypress/issues/14686).\n    *   Cypress Studio now reloads tests when `watchForFileChanges` is `false`. Addresses [#14744](https://github.com/cypress-io/cypress/issues/14744).\n    *   An empty `.click()` command will no longer be added before `.type()` in Cypress Studio when it is followed by typed characters. Addresses [#14685](https://github.com/cypress-io/cypress/issues/14685).\n    *   Cypress Studio will now use the correct selector for an element even if the click event changed the selectors. Addresses [#14658](https://github.com/cypress-io/cypress/issues/14658).\n    *   Multi-select `selects` are now supported in Cypress Studio. Addresses [#14743](https://github.com/cypress-io/cypress/issues/14743).\n    *   There's an improved UI for command failures within Cypress Studio. Addresses [#14691](https://github.com/cypress-io/cypress/issues/14691).\n    *   The Selector Playground is now closed automatically when Cypress Studio is opened. [#14689](https://github.com/cypress-io/cypress/issues/14689).\n\n**Misc:**\n\n*   The \"no specs found\" error now displays which directory it searched for specs. Addresses [#14532](https://github.com/cypress-io/cypress/issues/14532).\n*   More types for the resolved config property have been added. Addresses [#14392](https://github.com/cypress-io/cypress/issues/14392).\n\n**Dependency Updates:**\n\n*   Upgraded `@cypress/get-windows-proxy` to version `1.6.2`. Addressed in [#14711](https://github.com/cypress-io/cypress/issues/14711).\n*   Upgraded `electron` to version `11.2.1`. Addressed in [#14764](https://github.com/cypress-io/cypress/issues/14764).\n*   Upgraded `recast` to version `0.20.4`. Addressed in [#14623](https://github.com/cypress-io/cypress/issues/14623).\n*   Upgraded `registry-js` to version `1.13.0`. Addressed in [#14668](https://github.com/cypress-io/cypress/issues/14668).\n*   Upgraded `semantic-release` to version `17.2.3`. Addressed in [#14713](https://github.com/cypress-io/cypress/issues/14713).\n*   Upgraded `systeminformation` to version `4.31.1`. Addressed in [#14715](https://github.com/cypress-io/cypress/issues/14715).\n\n## 6.3.0[​](#6-3-0 \"Direct link to 6.3.0\")\n\n_Released 1/19/2021_\n\n**Features:**\n\n*   [**Cypress Studio**](https://docs.cypress.io/guides/references/cypress-studio) provides a visual way to generate tests within the Test Runner, by _recording interactions_ against the application under test. Cypress Studio is an experimental feature that can be enabled by adding the [experimentalStudio](https://docs.cypress.io/guides/references/experiments) attribute to your configuration, `cypress.json` by default. Address [#73](https://github.com/cypress-io/cypress/issues/73).\n*   **You can now test file downloads in Cypress** without the download prompt displaying. Any files downloaded while testing file downloads will be stored in the [downloadsFolder](https://docs.cypress.io/guides/references/configuration#Downloads) which is set to `cypress/downloads` by default. The `downloadsFolder` will be deleted before each run unless [trashAssetsBeforeRuns](https://docs.cypress.io/guides/references/configuration#Downloads) is set to `false`. Addresses [#949](https://github.com/cypress-io/cypress/issues/949).\n\n**Bugfixes:**\n\n*   When an uncaught exception is thrown outside a suite with an `.only`, the error will now correctly display in the Command Log. Fixes [#14455](https://github.com/cypress-io/cypress/issues/14455).\n*   Cypress will no longer crash when no record key is provided to the `--key` flag when followed by other CLI flags. Fixed [#14593](https://github.com/cypress-io/cypress/issues/14593).\n*   Extra screenshots will no longer be taken when tests are retried when there is a failure in an `afterEach` hook. Fixes [#9209](https://github.com/cypress-io/cypress/issues/9209).\n*   Having `waitForAnimations` set to `false` no longer affects whether Cypress fires actions on inner elements. Fixes [#14370](https://github.com/cypress-io/cypress/issues/14370).\n*   We fixed a regression in [5.0.0](#5-0-0) that would cause string `CYPRESS_` prefixed env variables containing commas to be parsed as multiple values. Fixes [#8818](https://github.com/cypress-io/cypress/issues/8818).\n*   We fixed a regression in [4.9.0](#4-9-0) where asserting `have.value` on an undefined subject would throw an error. Fixes [#14359](https://github.com/cypress-io/cypress/issues/14359).\n*   We updated the CDP connection to attempt to use the stdio transport first with Chrome 72 and above, before falling back to using TCP. This should remediate issues causing sporadic \"Cypress failed to make a connection to the Chrome DevTools Protocol after retrying\" errors. Fixes [#6540](https://github.com/cypress-io/cypress/issues/6540), [#7450](https://github.com/cypress-io/cypress/issues/7450), [#8674](https://github.com/cypress-io/cypress/issues/8674), and [#8986](https://github.com/cypress-io/cypress/issues/8986).\n\n**Misc:**\n\n*   We removed several Chrome flags that are no longer supported. Addressed in [#14582](https://github.com/cypress-io/cypress/issues/14582).\n*   You can now open the actively running spec file in your IDE. Addressed in [#14521](https://github.com/cypress-io/cypress/issues/14521).\n\n**Dependency Updates:**\n\n*   Replaced deprecated `node-sass` with `sass`. Addressed in [#14415](https://github.com/cypress-io/cypress/pull/14415).\n*   Upgraded `debug` from `4.1.1` to `4.3.1`. Addressed in [#14583](https://github.com/cypress-io/cypress/issues/14583).\n*   Upgraded `electron` from `11.0.3` to `11.2.0`. Addressed in [#14567](https://github.com/cypress-io/cypress/issues/14567).\n*   Upgraded `electron-builder` from `22.8.0` to `22.9.1`. Addressed in [#14493](https://github.com/cypress-io/cypress/issues/14493).\n*   Upgraded `shell-env` from `3.0.0` to `3.0.1`. Addressed in [#14622](https://github.com/cypress-io/cypress/issues/14622).\n*   Upgraded `uuid` from `8.2.0` to `8.3.2`. Addressed in [#14170](https://github.com/cypress-io/cypress/issues/14170).\n\n## 6.2.1[​](#6-2-1 \"Direct link to 6.2.1\")\n\n_Released 1/4/2021_\n\n**Bugfixes:**\n\n*   Test retries, when retrying on several failed tests, will no longer cause hanging during `cypress run`. Fixes [#9040](https://github.com/cypress-io/cypress/issues/9040).\n*   `multipart/form-data` is no longer wrongly encoded when using [cy.intercept()](https://docs.cypress.io/api/commands/intercept). This should prevent `Unexpected end of multipart data` errors on the back end service where the request was pointing to. Fixes [#9359](https://github.com/cypress-io/cypress/issues/9359).\n*   [cy.contains()](https://docs.cypress.io/api/commands/contains) no longer throws an error when a single quote is used inside its argument when RegExp. Fixes [#8626](https://github.com/cypress-io/cypress/issues/8626).\n*   Passing `capture: 'runner'` to a [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) command inside [.within()](https://docs.cypress.io/api/commands/within) now screenshots the entire Test Runner as expected. Fixes [#14253](https://github.com/cypress-io/cypress/issues/14253).\n*   [Cypress.dom.isJquery()](https://docs.cypress.io/api/cypress-api/dom#Is-jQuery) now always returns a boolean instead of `undefined` sometimes. Fixes [#14278](https://github.com/cypress-io/cypress/issues/14278).\n*   `calledOnceWith` and `calledOnceWithExactly` sinon matchers no longer throw an error when used within Cypress. Fixes [#9644](https://github.com/cypress-io/cypress/issues/9644).\n*   We now pass `--disable-backgrounding-occluded-windows` as a default flag to Chrome to prevent backgrounding rendering when the Cypress window is occluded. Fixes [#9604](https://github.com/cypress-io/cypress/issues/9604).\n\n**Misc:**\n\n*   After login, if a name is undefined on your profile, the Test Runner will show the profile's email and link to instructions to update the name. Addresses [#14288](https://github.com/cypress-io/cypress/issues/14288).\n\n**Dependency Updates:**\n\n*   Upgraded `devtools-protocol` from `0.0.734984` to `0.0.839267`. Addressed in [#14353](https://github.com/cypress-io/cypress/issues/14353).\n*   Upgraded `electron` from `11.0.3` to `11.1.1`. Addressed in [#14352](https://github.com/cypress-io/cypress/issues/14352).\n\n## 6.2.0[​](#6-2-0 \"Direct link to 6.2.0\")\n\n_Released 12/21/2020_\n\n**Features:**\n\n*   You can now listen to `before:run`, `after:run`, `before:spec` and `after:spec` events in the plugins file when setting the [experimentalRunEvents](https://docs.cypress.io/guides/references/experiments) configuration option to `true`. See the [`before:run`](https://docs.cypress.io/api/plugins/before-run-api), [`after:run`](https://docs.cypress.io/api/plugins/after-run-api), [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api) and [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) docs for more information. Addressed in [#9646](https://github.com/cypress-io/cypress/pull/9646), [#14178](https://github.com/cypress-io/cypress/pull/14178) [#14238](https://github.com/cypress-io/cypress/pull/14238) and [#14263](https://github.com/cypress-io/cypress/pull/14263).\n*   The `Timed out retrying` error message now displays the amount of time Cypress retried. Addresses [#5781](https://github.com/cypress-io/cypress/issues/5781).\n*   The RouteMatcher argument for [cy.intercept()](https://docs.cypress.io/api/commands/intercept) has a new `matchUrlAgainstPath` property. When set to `true`, Cypress will match the supplied `url` against incoming `path`s. Addressed in [#14241](https://github.com/cypress-io/cypress/issues/14241).\n\n**Bugfixes:**\n\n*   Passing a URL as a string or RegExp to [cy.intercept()](https://docs.cypress.io/api/commands/intercept) will automatically set `matchUrlAgainstPath` to `true`. This means that the supplied string or RegExp will be matched against the **path** if matching against the **URL** fails. Fixes [#9379](https://github.com/cypress-io/cypress/issues/9379) and [#14256](https://github.com/cypress-io/cypress/issues/14256).\n*   Getting an alias of [cy.intercept()](https://docs.cypress.io/api/commands/intercept) using [cy.get()](https://docs.cypress.io/api/commands/get) will no longer always yield `null`. Fixes [#9306](https://github.com/cypress-io/cypress/issues/9306).\n*   [cy.intercept()](https://docs.cypress.io/api/commands/intercept) will now automatically responds to CORS preflight requests (HTTP `OPTIONS` requests) that match defined routes. Fixes [#9599](https://github.com/cypress-io/cypress/issues/9599).\n*   Response errors from `forceNetworkError` can now be awaited using [cy.intercept()](https://docs.cypress.io/api/commands/intercept) and [cy.wait()](https://docs.cypress.io/api/commands/wait). Fixes [#9062](https://github.com/cypress-io/cypress/issues/9062).\n*   Using [cy.log()](https://docs.cypress.io/api/commands/log) inside [.then()](https://docs.cypress.io/api/commands/then) no longer breaks the subject value in the command chain. Fixes [#8084](https://github.com/cypress-io/cypress/issues/8084).\n*   Using [Cypress.Commands.overwrite](https://docs.cypress.io/api/cypress-api/custom-commands#Overwrite-Existing-Commands) to overwrite [.then()](https://docs.cypress.io/api/commands/then) now preserves the proper `this` context and sets aliases correctly. Fixes [#5101](https://github.com/cypress-io/cypress/issues/5101).\n*   Using [Cypress.Commands.overwrite](https://docs.cypress.io/api/cypress-api/custom-commands#Overwrite-Existing-Commands) to overwrite `cy.route()` or [cy.intercept()](https://docs.cypress.io/api/commands/intercept) and wait on its alias now properly works. Fixes [#3890](https://github.com/cypress-io/cypress/issues/3890) and [#9580](https://github.com/cypress-io/cypress/issues/9580).\n*   Cypress no longer fails to find specs if you set the fixtures folder to be the same as the integration folder. Fixes [#14226](https://github.com/cypress-io/cypress/issues/14226).\n*   Cypress no longer fails to show error code frames if the spec filename has a space in it, fixes [#7553](https://github.com/cypress-io/cypress/issues/7553).\n\n**Misc:**\n\n*   `scrollBehavior` is now an allowed type when passed as test configuration. Addresses [#9643](https://github.com/cypress-io/cypress/issues/9643).\n*   The `FileObject` type for the file argument of the `file:preprocessor` event now includes the `EventEmitter` type. Addresses [#9276](https://github.com/cypress-io/cypress/issues/9276).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` from `11.0.2` to `11.0.3`. Addressed in [#9409](https://github.com/cypress-io/cypress/issues/9409).\n\n## 6.1.0[​](#6-1-0 \"Direct link to 6.1.0\")\n\n_Released 12/07/2020_\n\n**Features:**\n\n*   There's a new `scrollBehavior` configuration option that controls the viewport position when an element is scrolled prior to action commands. Possible values are `'top'`, `'bottom'`, `'center'`, `'nearest'`, and `false`, with `'top'` being the default. `scrollBehavior: false` disables scrolling altogether. `scrollBehavior` can be specified in [global configuration](https://docs.cypress.io/guides/references/configuration#Actionability), [test configuration](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Configuration) or individual [action commands](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) via `options`. Addresses [#871](https://github.com/cypress-io/cypress/issues/871) and [#4356](https://github.com/cypress-io/cypress/issues/4356).\n*   The **Tests** tab in the Test Runner now orders folders before files. This matches the ordering of most IDEs' file explorers. Addresses [#7334](https://github.com/cypress-io/cypress/issues/7334).\n\n**Bugfixes:**\n\n*   Responses stubbed from [cy.intercept()](https://docs.cypress.io/api/commands/intercept) will now automatically set `Access-Control-Allow-Origin` and `Access-Control-Allow-Credentials` to permissive values unless explicitly overridden. Fixes [#9264](https://github.com/cypress-io/cypress/issues/9264).\n*   The `Cannot read property \"fireChangeEvent\" of undefined` error will no longer throw during a race condition when using [cy.intercept()](https://docs.cypress.io/api/commands/intercept). Fixes [#9170](https://github.com/cypress-io/cypress/issues/9170).\n*   HTTP responses that cannot have a body (like HTTP 304 and HTTP 204) can now be awaited using [cy.intercept()](https://docs.cypress.io/api/commands/intercept). Fixes [#8934](https://github.com/cypress-io/cypress/issues/8934) and [#8999](https://github.com/cypress-io/cypress/issues/8999).\n*   We fixed an issue where HTTP redirects could not be awaited using [cy.intercept()](https://docs.cypress.io/api/commands/intercept) unless dynamically intercepted. Addressed in [#9097](https://github.com/cypress-io/cypress/pull/9097).\n*   Tests will no longer hang in certain situations when there's an error in a `before()` hook. Fixes [#9162](https://github.com/cypress-io/cypress/issues/9162).\n*   We no longer strip `/` from URLs when they are explicitly passed with query parameters. Fixes [#9360](https://github.com/cypress-io/cypress/issues/9360).\n*   Fixed the regression in `Cypress.dom.isVisible` behavior for elements with `position: fixed`, addresses [#8998](https://github.com/cypress-io/cypress/issues/8998) and [#9031](https://github.com/cypress-io/cypress/issues/9031).\n\n**Deprecations:**\n\nDeprecations still work as before but will be removed from Cypress in a future release. We encourage you to update your code now to remove uses of deprecations.\n\n*   `Cypress.moment` has been deprecated and will be replaced in a future release. Consider migrating to a different datetime formatter. Addresses [#8714](https://github.com/cypress-io/cypress/issues/8714).\n\n**Misc:**\n\n*   We collect more environment variables from Bitbucket to better detect reruns. Addresses [#9309](https://github.com/cypress-io/cypress/issues/9309).\n*   `waitForAnimations` and `animationDistanceThreshold` types are now included for all actionable commands. Addresses [#8854](https://github.com/cypress-io/cypress/issues/8854).\n\n**Dependency Updates:**\n\n*   Upgraded `mocha-junit-reporter` from `1.23.1` to `2.0.0`. Addressed in [#9528](https://github.com/cypress-io/cypress/issues/9528).\n\n## 6.0.1[​](#6-0-1 \"Direct link to 6.0.1\")\n\n_Released 11/30/2020_\n\n**Bugfixes:**\n\n*   Chromium based browsers on version 87 will no longer show recorded videos as frozen or blank. Fixes [#9265](https://github.com/cypress-io/cypress/issues/9265).\n*   We fixed a regression introduced in [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) that would cause an `Option 'sourceMap' cannot be specified with option 'inlineSourceMap'` error to throw when setting `sourceMap` in your tsconfig. Fixes [#8477](https://github.com/cypress-io/cypress/issues/8477).\n*   [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) no longer throws an `\"offset\" is out of range` error when Cypress attempts to crop the image. Fixes [#2034](https://github.com/cypress-io/cypress/issues/2034).\n*   [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) types won't mistakenly display the command as deprecated. Fixes [#9303](https://github.com/cypress-io/cypress/issues/9303).\n*   Lower-cased HTTP methods can now be used with [cy.intercept()](https://docs.cypress.io/api/commands/intercept). Fixes [#9313](https://github.com/cypress-io/cypress/issues/9313).\n\n## 6.0.0[​](#6-0-0 \"Direct link to 6.0.0\")\n\n_Released 11/23/2020_\n\n**Summary:**\n\nCypress now offers full network stubbing support with the introduction of the [cy.intercept()](https://docs.cypress.io/api/commands/intercept) command (previously `cy.route2()`). With [cy.intercept()](https://docs.cypress.io/api/commands/intercept) your tests can intercept, modify and wait on any type of HTTP request originating from your app. See our guide on [Migrating `cy.route()` to `cy.intercept()`](https://docs.cypress.io/guides/references/migration-guide#Migrating-cyroute-to-cyintercept).\n\n**Breaking Changes:**\n\nPlease read our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide) which explains the changes in more detail and how to change your code to migrate to Cypress 6.0.\\*\\*\n\n*   Cypress now always throws an error when asserting on an element that doesn't exist in the DOM (unless you're asserting that the element should `not.exist`). Assertions such as `not.visible`, `not.contains`, `not.have.class`, etc will now fail when used on non-existent DOM elements. Addresses [#205](https://github.com/cypress-io/cypress/issues/205).\n*   DOM elements where the CSS style (or ancestors) are `opacity: 0` are no longer considered visible. However these are still considered [actionable](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) and [any action commands](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Actionability) used to interact with the element will perform the action. This matches browser's implementation on how they regard elements with `opacity: 0`. Addresses [#4474](https://github.com/cypress-io/cypress/issues/4474).\n*   The type yielded by [cy.wait(alias)](https://docs.cypress.io/api/commands/wait) has changed in order to support use of [cy.intercept()](https://docs.cypress.io/api/commands/intercept). Addressed in [#9266](https://github.com/cypress-io/cypress/issues/9266).\n*   The `experimentalNetworkStubbing` option has been removed and made the default behavior. You can safely removed this configuration option. Addressed in [#9185](https://github.com/cypress-io/cypress/issues/9185).\n*   When using [.type()](https://docs.cypress.io/api/commands/type) and [.click()](https://docs.cypress.io/api/commands/click) on elements inside a `contenteditable` element, the events are now properly triggered on the inside elements. This may cause unintended consequences if you were relying on the previous behavior. Addressed in [#9066](https://github.com/cypress-io/cypress/issues/9066).\n*   We removed several deprecation errors around APIs that were removed in versions of Cypress prior to 4.0.0. This will not cause any changes for anyone upgrading from a 4.0+ version of Cypress. For a full list of all APIs affected see [#8946](https://github.com/cypress-io/cypress/issues/8946).\n*   We updated our HTTP status codes and reason phrases to match Node.js `http.STATUS_CODES`. If you have code that relies on a reason phrase, then this could affect you. Addressed in [#8969](https://github.com/cypress-io/cypress/issues/8969).\n*   JSON request and response bodies captured by [cy.intercept()](https://docs.cypress.io/api/commands/intercept) are now automatically parsed, removing the need to manually do `JSON.parse`. Addressed in [#9280](https://github.com/cypress-io/cypress/issues/9280).\n\n**Deprecations:**\n\nDeprecations still work as before but will be removed from Cypress in a future release. We encourage you to update your code now to remove uses of deprecations.\n\n*   `cy.server()` and `cy.route()` have been deprecated. In a future release, support for `cy.server()` and `cy.route()` will be removed. We encourage you to use [cy.intercept()](https://docs.cypress.io/api/commands/intercept) instead. See our guide on [Migrating `cy.route()` to `cy.intercept()`](https://docs.cypress.io/guides/references/migration-guide#Migrating-cyroute-to-cyintercept). Addressed in [#9185](https://github.com/cypress-io/cypress/pull/9185).\n*   `experimentalFetchPolyfill` has been deprecated. We encourage you to use [cy.intercept()](https://docs.cypress.io/api/commands/intercept) to intercept requests using the Fetch API instead.\n*   `cy.route2()` was renamed to [cy.intercept()](https://docs.cypress.io/api/commands/intercept). We encourage you to update usages of `cy.route2()` to use [cy.intercept()](https://docs.cypress.io/api/commands/intercept). Addressed in [#9182](https://github.com/cypress-io/cypress/issues/9182).\n\n**Features:**\n\n*   The new [cy.intercept()](https://docs.cypress.io/api/commands/intercept) command can be used to manage the behavior of HTTP requests at the network layer. Addressed in [#9182](https://github.com/cypress-io/cypress/issues/9182).\n*   We now pass `—disable-dev-shm-usage` to the Chrome browser flags by default. This will write shared memory files into `/tmp` instead of `/dev/shm`. If you're passing this flag in your `plugins` file, you can now remove this code. Addresses [#5336](https://github.com/cypress-io/cypress/issues/5336).\n*   A warning is now displayed when passing invalid configuration keys through the CLI. Addresses [#428](https://github.com/cypress-io/cypress/issues/428).\n*   The `cypress version` command now also displays the current Electron and bundled Node versions. Addresses [#9180](https://github.com/cypress-io/cypress/issues/9180).\n*   The `cypress version` command now accepts a `--component` flag that allows you to print the version of specific components of Cypress. ie Electron, Node, etc. Addresses [#9214](https://github.com/cypress-io/cypress/issues/9214).\n\n**Bugfixes:**\n\n*   We fixed a regression introduced in [3.5.0](https://docs.cypress.io/guides/references/changelog#3-5-0) that would cause [.type()](https://docs.cypress.io/api/commands/type) to not type the entire string when focus was called away from the target element. Fixes [#9254](https://github.com/cypress-io/cypress/issues/9254).\n*   [.type()](https://docs.cypress.io/api/commands/type) and [.click()](https://docs.cypress.io/api/commands/click) now properly work on elements inside a `contenteditable` element. Fixes [#2717](https://github.com/cypress-io/cypress/issues/2717) and [#7721](https://github.com/cypress-io/cypress/issues/7721).\n*   We fixed a regression introduced in [5.6.0](https://docs.cypress.io/guides/references/changelog#5-6-0) that would cause the Test Runner to crashes and display a white page when switching tabs while tests are running. Fixes [#9151](https://github.com/cypress-io/cypress/issues/9151).\n*   Fixed an issue where `Content-Length` for `cy.route2` request bodies could be incorrectly recalculated. Fixes [#9166](https://github.com/cypress-io/cypress/issues/9166).\n\n**Documentation Changes:**\n\n*   Our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide) has a new section for 6.0 migration.\n*   Many of our docs examples have been updated to use [cy.intercept()](https://docs.cypress.io/api/commands/intercept) in place of `cy.route()` including our [Network Requests](https://docs.cypress.io/guides/guides/network-requests) doc.\n\n**Misc:**\n\n*   Added the type of `redirects` and changed `redirectedToUrl` optional for Response types. Addresses [#9275](https://github.com/cypress-io/cypress/issues/9275).\n\n**Dependency Updates**\n\n*   Upgraded Chrome browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `85` to `87`. Addressed in [#9222](https://github.com/cypress-io/cypress/pull/9222).\n*   Upgraded bundled Node.js version from `12.16.3` to `12.18.3`. Addressed in [#9222](https://github.com/cypress-io/cypress/pull/9222).\n*   Upgraded `electron` from `10.1.5` to `11.0.2`. Addressed in [#9222](https://github.com/cypress-io/cypress/pull/9222).\n\n## 5.6.0[​](#5-6-0 \"Direct link to 5.6.0\")\n\n_Released 11/09/2020_\n\n**Features:**\n\n*   You can now dynamically add aliases for requests intercepted via `cy.route2()`. See an example. Addresses [#387](https://github.com/cypress-io/cypress/issues/387).\n*   You can now run all integration specs or all component specs separately (or a filtered list of specs) by clicking the appropriate button in the Test Runner in the _Tests_ tab. Addresses [#8203](https://github.com/cypress-io/cypress/issues/8203).\n*   Added a new modifier syntax to [cy.type()](https://docs.cypress.io/api/commands/type). You can now type shortcuts like `{ctrl+z}`. Addressed in [#5694](https://github.com/cypress-io/cypress/issues/5694).\n*   We now show a modal with release notes when available when there is a new version of Cypress. Addressed in [#9006](https://github.com/cypress-io/cypress/issues/9006).\n*   In the Test Runner's _Settings_ and _Runs_ tab you can now quickly copy the project id configuration and record key using a copy to clipboard icon. Addresses [#9002](https://github.com/cypress-io/cypress/issues/9002).\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in [4.12.0](https://docs.cypress.io/guides/references/changelog#4-12-0) where snapshotting caused images to load too many times. Fixes [#8679](https://github.com/cypress-io/cypress/issues/8679).\n*   Using [cy.visit()](https://docs.cypress.io/api/commands/visit) on sites with `content-type` of `text-html` followed by parameters (like `text/html;charset=utf-8`) will no longer throw an error about visiting a site with an invalid content-type. Fixes [#8506](https://github.com/cypress-io/cypress/issues/8506)\n*   The `Cannot access 'continueSent' before initialization` error will no longer throw when using `cy.route2()`. Fixes [#8926](https://github.com/cypress-io/cypress/issues/8926).\n*   Awaiting a request body when providing a static response stub in `cy.route2()` should now work properly. Addressed in [#9059](https://github.com/cypress-io/cypress/issues/9059).\n*   The way that intercepted `cy.route2()` requests are displayed in the Command Log has been improved, including showing the progress bar correctly. Addresses [#9053](https://github.com/cypress-io/cypress/issues/9053).\n*   The `Cannot read property 'replace' of undefined` error will no longer throw when attempting to generate the stack trace from an error thrown in the application. Fixes [#7915](https://github.com/cypress-io/cypress/issues/7915).\n*   Stack traces in the Command Log originating from application errors where the location is unavailable will no longer show as a clickable link to open in IDE. Fixes [#9106](https://github.com/cypress-io/cypress/issues/9106).\n*   When using the `fixture:` prefix as a stubbed response to `cy.route()`, JSON fixtures containing only a number or boolean will no longer throw an error. Fixes [#4899](https://github.com/cypress-io/cypress/issues/4899).\n*   Fixed an issue causing failed subresource integrity checks for external scripts. Fixes [#8983](https://github.com/cypress-io/cypress/issues/8983), [#9049](https://github.com/cypress-io/cypress/issues/9049), and [#8992](https://github.com/cypress-io/cypress/issues/8992).\n\n**Misc:**\n\n*   Typings for [.invoke()](https://docs.cypress.io/api/commands/invoke) and [.its()](https://docs.cypress.io/api/commands/its) now allow for a `timeout` option. Addresses [#9079](https://github.com/cypress-io/cypress/issues/9079).\n*   Typings for `cy.task()` now allow for parameterizing the task return type. Addresses [#7136](https://github.com/cypress-io/cypress/issues/7136).\n*   A clearer error is printed during `cypress cache list` when no cached versions are found. Addresses [#6303](https://github.com/cypress-io/cypress/issues/6303).\n\n**Dependency Updates:**\n\n*   Upgraded `commander` from `^4.1.1` to `^5.1.0`. Addressed in [#8979](https://github.com/cypress-io/cypress/issues/8979).\n*   Upgraded `semver` from `6.3.0` to `7.3.2`. Addressed in [#9068](https://github.com/cypress-io/cypress/issues/9068).\n*   Upgraded `systeminformation` from `4.26.9` to `4.27.11`. Addressed in [#8979](https://github.com/cypress-io/cypress/issues/8979).\n*   Removed `node-webkit-updater`. This should remove some security warnings that were shown during install. Addresses [#8314](https://github.com/cypress-io/cypress/issues/8314).\n\n## 5.5.0[​](#5-5-0 \"Direct link to 5.5.0\")\n\n_Released 10/26/2020_\n\n**Features:**\n\n*   [cy.viewport()](https://docs.cypress.io/api/commands/viewport) has a new `macbook-16` preset. Addresses [#8889](https://github.com/cypress-io/cypress/issues/8889).\n*   [.type()](https://docs.cypress.io/api/commands/type) now fires the `beforeInput` event during typing. _Note: Firefox does not support the `beforeinput` event_. Addresses [#7088](https://github.com/cypress-io/cypress/issues/7088).\n\n**Bugfixes:**\n\n*   Updated the Cypress proxy layer to proxy HTTPS traffic from non-AUT origins. Addressed in [#8827](https://github.com/cypress-io/cypress/pull/8827).\n    *   This fixed an issue with `cy.route2()` where HTTPS requests to a non-AUT origin would not be intercepted as expected.\n*   `cy.route2()` now properly handles passing a method as its first argument. Fixes [#8729](https://github.com/cypress-io/cypress/issues/8729).\n*   Fixed an issue with `cy.route2()` where a \"Cannot set property response of undefined\" error would occasionally occur. Fixes [#8858](https://github.com/cypress-io/cypress/issues/8858).\n*   Headers field names passed to `cy.route2()` now case-insensitively match against the field names of incoming HTTP requests. Fixes [#8921](https://github.com/cypress-io/cypress/issues/8921).\n*   Routes that stub fixtures for binary resources (including images) made with `cy.route2()` now serve the correct mime-type and content. Fixes [#8623](https://github.com/cypress-io/cypress/issues/8623).\n*   When [experimentalNetworkStubbing](https://docs.cypress.io/guides/references/experiments) is enabled, using [cy.visit()](https://docs.cypress.io/api/commands/visit) to URLs that redirect and set Transfer-Encoding: chunked will no longer fail in Cypress with a \"Parse Error\". Fixes [#8497](https://github.com/cypress-io/cypress/issues/8497).\n*   `cypress.run()` through the [Module API](https://docs.cypress.io/guides/guides/module-api) now has a `status` property in the results matching the correct CLI types (`\"failed\"` or `\"finished\"`). Addresses [#8798](https://github.com/cypress-io/cypress/issues/8798).\n*   When a value containing an `e` character is passed to the `--ci-build-id` flag, Cypress now properly reads it as a string. Fixes [#8874](https://github.com/cypress-io/cypress/issues/8874).\n\n**Misc:**\n\n*   Updated type definitions to allow for passed either `runMode` or `openMode` to `retries` alone. Addresses [#8869](https://github.com/cypress-io/cypress/issues/8869).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` from `10.1.3` to `10.1.5`. Addressed in [#8927](https://github.com/cypress-io/cypress/issues/8927) and [#8975](https://github.com/cypress-io/cypress/issues/8975).\n    *   This addresses a Chrome security issue, CVE-2020-15999. Addresses [#8922](https://github.com/cypress-io/cypress/issues/8922).\n*   Upgraded `color-string` from `1.5.3` to `1.5.4`. Addressed in [#8945](https://github.com/cypress-io/cypress/issues/8945).\n*   Upgraded `pretty-bytes` from `^5.3.0` to `^5.4.1`. Addressed in [#8964](https://github.com/cypress-io/cypress/issues/8964).\n\n## 5.4.0[​](#5-4-0 \"Direct link to 5.4.0\")\n\n_Released 10/14/2020_\n\n**Features:**\n\n*   You can now run [cypress cache prune](https://docs.cypress.io/guides/guides/command-line#cypress-cache-prune) to delete all installed Cypress versions from the cache except for the currently-installed version. Addresses [#5972](https://github.com/cypress-io/cypress/issues/5972).\n*   There's a new `--size` option for the [cypress cache list](https://docs.cypress.io/guides/guides/command-line#cypress-cache-list) command that prints the sizes of the Cypress cache folders. Addresses [#6404](https://github.com/cypress-io/cypress/issues/6404).\n*   For video recordings of runs, there is now a video chapter key for each test. If your video player supports chapters, you can move to the start of each test right away. Addresses [#3626](https://github.com/cypress-io/cypress/issues/3626).\n*   In Windows, you can now append the browser type to the end of the path passed to the `--browser` flag, like `cypress open --browser C:/User/App/browser.exe:chrome`, to help detect the browser type. Addresses [#6389](https://github.com/cypress-io/cypress/issues/6389).\n*   [cy.viewport()](https://docs.cypress.io/api/commands/viewport) has new `iphone-7`, `iphone-8`, and `iphone-se2` presets. Addressed in [#8624](https://github.com/cypress-io/cypress/issues/8624)\n*   When there is a new version of Cypress available, the update modal has a new design with 'copy to clipboard' buttons to copy the upgrade commands. Addressed in [#8751](https://github.com/cypress-io/cypress/pull/8751).\n*   The [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) can be hidden by passing the `CYPRESS_NO_COMMAND_LOG=1` environment variable during `cypress open` or `cypress run` to be used as a tool to debug performance issues. Addressed in [#8689](https://github.com/cypress-io/cypress/issues/8689).\n\n**Bugfixes:**\n\n*   We fixed a regression in [5.0.0](#5-0-0) where the `chromeWebSecurity` option had no effect in Electron. Fixes [#8399](https://github.com/cypress-io/cypress/issues/8399).\n*   Tests will no longer hang and now properly throw when there is an error thrown from a `test:after:run` event listener. Fixes [#2271](https://github.com/cypress-io/cypress/issues/2271) and [#8701](https://github.com/cypress-io/cypress/issues/8701).\n*   When a command is chained after [.within()](https://docs.cypress.io/api/commands/within) and [`cy.get()`](https://docs.cypress.io/api/commands/get) is called inside it, the scope will no longer permanently change. Fixes [#2106](https://github.com/cypress-io/cypress/issues/2106), [#4672](https://github.com/cypress-io/cypress/issues/4672), [#4757](https://github.com/cypress-io/cypress/issues/4757), and [#5183](https://github.com/cypress-io/cypress/issues/5183).\n*   Dual commands like [cy.contains()](https://docs.cypress.io/api/commands/contains) when used after an [.each()](https://docs.cypress.io/api/commands/each) commands now query as expected. Fixes [#4921](https://github.com/cypress-io/cypress/issues/4921).\n*   `/` is no longer added to the URL when `baseUrl` has param(s). Fixes [#2101](https://github.com/cypress-io/cypress/issues/2101).\n*   When using `cy.route2()` the route handler timeouts will no longer leak into other tests and cause random failures. Addressed in [#8727](https://github.com/cypress-io/cypress/issues/8727).\n*   The `request.body` is now available when using [cy.wait()](https://docs.cypress.io/api/commands/wait) on an aliased `cy.route2()` route which had not been intercepted. Fixes [#8695](https://github.com/cypress-io/cypress/issues/8695).\n*   Re-running failed build steps in Bitbucket will no longer create a new run on the Cypress Dashboard. Fixes [#8720](https://github.com/cypress-io/cypress/issues/8720).\n*   The forced garbage collection timer will no longer display when using a version of Firefox newer than 80. Fixes [#8725](https://github.com/cypress-io/cypress/issues/8725).\n*   The browser dropdown is no longer covered when opened from the Runs tab in the Test Runner. Fixed in [#8745](https://github.com/cypress-io/cypress/issues/8745).\n*   Fixed an issue where preprocessor-related plugins would cause tests not to run and a duplicate instance of Cypress to be spawned. Fixes [#8634](https://github.com/cypress-io/cypress/issues/8634).\n\n**Misc:**\n\n*   Improved type definitions for `cy.route2()`. Addresses [#8694](https://github.com/cypress-io/cypress/issues/8694) and [#8782](https://github.com/cypress-io/cypress/issues/8782).\n*   The Test Runner now shows an indicator in the footer and a toast notification if there is a new version available. Addressed in [#8702](https://github.com/cypress-io/cypress/issues/8702) and [#8803](https://github.com/cypress-io/cypress/issues/8803).\n\n**Dependency Updates:**\n\n*   Upgraded Chrome browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `83` to `85`. Addressed in [#8406](https://github.com/cypress-io/cypress/pull/8406).\n*   Upgraded bundled Node.js version from `12.14.1` to `12.16.3`. Addressed in [#8406](https://github.com/cypress-io/cypress/pull/8406).\n*   Upgraded `electron` from `9.2.1` to `10.1.3`. Addressed in [#8406](https://github.com/cypress-io/cypress/pull/8406).\n*   Upgraded `firefox-profile` from `2.0.0` to `4.0.0`. Addressed in [#8786](https://github.com/cypress-io/cypress/pull/8786).\n*   Upgraded `node-forge` from `0.9.0` to `0.10.0`. Addressed in [#8800](https://github.com/cypress-io/cypress/pull/8800).\n\n## 5.3.0[​](#5-3-0 \"Direct link to 5.3.0\")\n\n_Released 9/28/2020_\n\n**Features:**\n\n*   Firefox support is now out of beta! 🎉 Firefox 80 and newer are now officially stable when used with Cypress. Addresses [#8241](https://github.com/cypress-io/cypress/issues/8241).\n    *   Versions of Firefox older than 80 can still be used, but will be subject to the `firefoxGcInterval` workaround. The desktop GUI will display a warning if such versions are used.\n\n**Bugfixes:**\n\n*   Fixed a bug where `cy.route2()` would not automatically JSONify an empty array handler. Addresses [#8532](https://github.com/cypress-io/cypress/issues/8532).\n*   Fixed a bug where objects yielded by using `cy.wait` on a `cy.route2()` alias would not always have a `response` property. Addresses [#8536](https://github.com/cypress-io/cypress/issues/8536).\n*   Fixed an issue where `cy.route2()` routes would not be able to intercept requests to HTTPS destinations on a different origin. Addresses [#8487](https://github.com/cypress-io/cypress/issues/8487).\n*   Fixed an issue where subjects became `undefined` after certain assertion failures. Addresses [#5763](https://github.com/cypress-io/cypress/issues/5763).\n*   Fixed an issue where a `cy.task` with no arguments passed would receive `null` as the first argument instead of `undefined`. Addresses [#5913](https://github.com/cypress-io/cypress/issues/5913).\n*   Fixed an issue preventing users from passing the config-file argument when starting cypress through the node module API. Addresses [#8632](https://github.com/cypress-io/cypress/issues/8632).\n*   Fixed an issue where `cy.visit()`s to a relative URL containing `..` would not work. Addresses [#5090](https://github.com/cypress-io/cypress/issues/5090).\n*   Fixed an issue where Mocha hooks could still be triggered after the Test Runner was manually stopped. Addresses [#8621](https://github.com/cypress-io/cypress/issues/8621).\n*   Fixed an issue where `cy.setCookie` failed when given a cookie name with a `__Host-` prefix. Addresses [#8261](https://github.com/cypress-io/cypress/issues/8261).\n*   Fixed an issue where a misleading error was displayed when test code threw an exception with a non-`Error` object. Addresses [#7870](https://github.com/cypress-io/cypress/issues/7870).\n\n**Misc:**\n\n*   The proxy now omits the `Content-Security-Policy-Report-Only` header the same way that it does for `Content-Security-Policy`. Addresses [#7936](https://github.com/cypress-io/cypress/issues/7936).\n*   Added a `status` property to `CypressRunResult` objects. Addresses [#8580](https://github.com/cypress-io/cypress/issues/8580).\n*   Updated types to no longer use deprecated Mocha interfaces. Addresses [#5795](https://github.com/cypress-io/cypress/issues/5795).\n*   Passing an empty string to `CYPRESS_INSTALL_BINARY` now takes precedence over npm config. Addresses [#8488](https://github.com/cypress-io/cypress/issues/8488).\n\n## 5.2.0[​](#5-2-0 \"Direct link to 5.2.0\")\n\n_Released 9/15/2020_\n\n**Features:**\n\n*   Added the configuration option `includeShadowDom` for enabling shadow DOM querying globally, per-suite, per-test, or programmatically. Addresses [#8442](https://github.com/cypress-io/cypress/issues/8442).\n*   Added a `followRedirect` option to request interception with `cy.route2()` , allowing redirects to be followed before continuing to response interception. Addresses [#7967](https://github.com/cypress-io/cypress/issues/7967).\n*   Added the capability to specify `delayMs` and `throttleKbps` when stubbing static responses with `cy.route2()` . Addresses [#7661](https://github.com/cypress-io/cypress/issues/7661).\n*   Installing Cypress pre-releases no longer requires setting the `CYPRESS_BINARY_INSTALL` environment variable. Addresses [#8482](https://github.com/cypress-io/cypress/issues/8482).\n\n**Performance Improvements:**\n\n*   Fixed a performance issue which led to CPU bottlenecking during Cypress runs. Addresses [#8012](https://github.com/cypress-io/cypress/issues/8012) and [#8297](https://github.com/cypress-io/cypress/issues/8297).\n\n**Bugfixes:**\n\n*   Fixed an issue where using TypeScript path aliases in the plugins file would error. Addresses [#8555](https://github.com/cypress-io/cypress/issues/8555).\n*   Fixed an issue where using `cy.contains()` within a shadow root would not yield the correct element. Addresses [#8494](https://github.com/cypress-io/cypress/issues/8494).\n*   Fixed an issue where querying the shadow DOM in a `cy.within()` callback would throw the error `root.getRootNode is not a function`. Addresses [#8478](https://github.com/cypress-io/cypress/issues/8478).\n*   Fixed an issue with `cy.type()` `{moveToStart}/{moveToEnd}` special characters moving the cursor to the current line instead of the entire text editable when typing in a `contenteditable` element. Addresses [#8465](https://github.com/cypress-io/cypress/issues/8465).\n*   Fixed an issue where typing into a manually-focused number input would prepend the number instead of appending it. Addresses [#7170](https://github.com/cypress-io/cypress/issues/7170).\n*   `cy.type()` now fires a `KeyboardEvent` event instead of an `Event` event. Addresses [#6125](https://github.com/cypress-io/cypress/issues/6125) and [#5650](https://github.com/cypress-io/cypress/issues/5650).\n*   Fixed long selectors in the selector playground text input overflowing other page elements. Addresses [#8247](https://github.com/cypress-io/cypress/issues/8247) and [#4184](https://github.com/cypress-io/cypress/issues/4184).\n*   Fixed an issue where assertions on `cy.getCookie()` would be called twice. Addresses [#6672](https://github.com/cypress-io/cypress/issues/6672).\n*   Fixed an issue that caused the \"Open in IDE\" button on hooks and tests not to appear in Firefox. Addresses [#8257](https://github.com/cypress-io/cypress/issues/8257).\n*   Fixed an issue causing Cypress to hang on test retry in run mode with certain assertions. Addresses [#8363](https://github.com/cypress-io/cypress/issues/8363).\n\n**Documentation Changes:**\n\n*   Fixed examples of delaying and throttling responses with `cy.route2()` . Addresses [#8489](https://github.com/cypress-io/cypress/issues/8489).\n*   Added examples of using a response function with `cy.route2()` . Addresses [#8468](https://github.com/cypress-io/cypress/issues/8468).\n*   Removed unmaintained languages. English docs is the only supported language by the Cypress team. We greatly appreciate the contributions from the community for other languages, but these docs are largely stale, unmaintained, and partial. The Cypress team will seek out more scalable docs internalization implementation in the future.\n\n**Misc:**\n\n*   The `experimentalShadowDomSupport` configuration flag has been removed. It is no longer necessary to enable shadow DOM testing.\n*   Improved the error message when the subject provided to `cy.shadow()` is not a shadow host. Addresses [#8530](https://github.com/cypress-io/cypress/issues/8530).\n*   Improved the error message when the Cypress binary is not executable. It now recommends trying to clear the cache and re-install. Addresses [#8397](https://github.com/cypress-io/cypress/issues/8397).\n*   Added missing type declarations for the `cy.route2()` command.\n*   Updated the type declaration for `Cypress.Commands.add()`, adding `Promise` to the list of allowed return types. Addresses [#7807](https://github.com/cypress-io/cypress/issues/7807).\n\n## 5.1.0[​](#5-1-0 \"Direct link to 5.1.0\")\n\n_Released 9/1/2020_\n\n**Features:**\n\n*   Introducing _experimental_ full network stubbing support 🎉.\n    *   With `experimentalNetworkStubbing` enabled, the `cy.route2` command is available. Addressed in [#4176](https://github.com/cypress-io/cypress/issues/4176).\n    *   By using `cy.route2()` , your tests can intercept, modify, and wait on any type of HTTP request originating from your app, including `XMLHttpRequest`s, `fetch` requests, beacons, and subresources (like iframes and scripts).\n    *   Outgoing HTTP requests can be modified before reaching the destination server, and the HTTP response can be intercepted as well before it reaches the browser.\n    *   See the `cy.route2()` docs for more information on how to enable this experiment.\n*   `cy.trigger()` now accepts an `eventConstructor` option for specifying the constructor with which to create the event to trigger. Addresses [#5650](https://github.com/cypress-io/cypress/issues/5650).\n\n**Bugfixes:**\n\n*   Improved warnings for when user is exceeding test limits of the free Dashboard plan. Addresses [#8409](https://github.com/cypress-io/cypress/issues/8409).\n*   Added `retries` to `TestOptions` types. Addresses [#8405](https://github.com/cypress-io/cypress/issues/8405).\n*   Added types for `specType` field on `Cypress.spec`. Addresses [#8256](https://github.com/cypress-io/cypress/issues/8256).\n*   Fixed a typo in type definitions. Addresses [#8417](https://github.com/cypress-io/cypress/issues/8417).\n*   Cypress now resolves and loads tsconfig.json for TypeScript projects starting from the plugins directory. Addresses [#8359](https://github.com/cypress-io/cypress/issues/8359).\n*   Fixed an issue where, if npm config's `noproxy` is set, unexpected behavior could occur. Addresses [#8287](https://github.com/cypress-io/cypress/issues/8287).\n*   Fixed an issue where nesting hooks within other hooks caused the test to never finish. Addresses [#8350](https://github.com/cypress-io/cypress/issues/8350).\n*   Fixed an issue in where tests would unexpectedly fail with a \"Can't resolve 'async\\_hooks'\" error. Addresses [#8375](https://github.com/cypress-io/cypress/issues/8375).\n*   Fixed an issue where return values from blob utils were mistaken for promises and could cause errors. Addresses [#8365](https://github.com/cypress-io/cypress/issues/8365).\n*   Fixed an issue with loading `.mjs` files. Addresses [#8361](https://github.com/cypress-io/cypress/issues/8361).\n*   Fixed an issue causing tests to run slowly in Electron. Addresses [#7930](https://github.com/cypress-io/cypress/issues/7930).\n*   Using `.should` with only chainer assertions will now throw an error. Addresses [#883](https://github.com/cypress-io/cypress/issues/883).\n*   `cy.trigger()` now includes the `view` property in the event object when appropriate. Addresses [#3686](https://github.com/cypress-io/cypress/issues/3686).\n*   Fixed an issue where Cypress would not detect newer 64-bit installations of Chrome on Windows. Addresses [#8425](https://github.com/cypress-io/cypress/issues/8425).\n*   Fixed an issue where Cypress would not detect per-user Firefox installations on Windows. Addresses [#8432](https://github.com/cypress-io/cypress/issues/8432).\n\n**Dependency Updates:**\n\n*   Updated dependency `iconv-lite` to version `0.6.2`. Addresses [#8387](https://github.com/cypress-io/cypress/issues/8387).\n*   Updated dependency `command-exists` to version `1.2.9`. Addresses [#8388](https://github.com/cypress-io/cypress/issues/8388).\n*   Updated dependency `electron` to version `9.2.1`. Addresses [#8436](https://github.com/cypress-io/cypress/issues/8436).\n\n## 5.0.0[​](#5-0-0 \"Direct link to 5.0.0\")\n\n_Released 8/19/2020_\n\n**Summary:**\n\nCypress now includes support for test retries! Similar to how Cypress will retry assertions when they fail, test retries will allow you to automatically retry a failed test prior to marking it as failed. Read our new guide on [Test Retries](https://docs.cypress.io/guides/guides/test-retries) for more details.\n\n**Breaking Changes:**\n\nPlease read our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide) which explains the changes in more detail and how to change your code to migrate to Cypress 5.0.\\*\\*\n\n*   The [`cypress-plugin-retries`](https://github.com/Bkucera/cypress-plugin-retries) plugin has been deprecated in favor of [test retries](https://docs.cypress.io/guides/guides/test-retries) built into Cypress. Addresses [#1313](https://github.com/cypress-io/cypress/issues/1313).\n*   The [Cypress.Cookies.defaults()](https://docs.cypress.io/api/cypress-api/cookies) `whitelist` option has been renamed to `preserve` to more closely reflect its behavior. Addressed in [#7782](https://github.com/cypress-io/cypress/issues/7782).\n*   The `blacklistHosts` configuration has been renamed to [blockHosts](https://docs.cypress.io/guides/references/configuration#Notes) to more closely reflect its behavior. Addressed in [#7622](https://github.com/cypress-io/cypress/issues/7622).\n*   The `cy.server()` `whitelist` option has been renamed to `ignore` to more closely reflect its behavior. Addresses [#6642](https://github.com/cypress-io/cypress/issues/6642).\n*   `libgbm-dev` is now a requirement to run Cypress on Linux. Addressed in [#7791](https://github.com/cypress-io/cypress/pull/7791).\n*   Values yielded by [cy.setCookie()](https://docs.cypress.io/api/commands/setcookie), [cy.getCookie()](https://docs.cypress.io/api/commands/getcookie), and [cy.getCookies()](https://docs.cypress.io/api/commands/getcookies) will now contain the `sameSite` property if specified. Addresses [#6892](https://github.com/cypress-io/cypress/issues/6892).\n*   The `experimentalGetCookiesSameSite` configuration flag has been removed, since this behavior is now the default. Addresses [#6892](https://github.com/cypress-io/cypress/issues/6892).\n*   The return type of the [Cypress.Blob](https://docs.cypress.io/api/utilities/blob) methods `arrayBufferToBlob`, `base64StringToBlob`, `binaryStringToBlob`, and `dataURLToBlob` have changed from `Promise<Blob>` to `Blob`. Addresses [#6001](https://github.com/cypress-io/cypress/issues/6001).\n*   Cypress no longer supports file paths with a question mark `?` or exclamation mark `!` in them. We now use the [webpack preprocessor](https://github.com/cypress-io/cypress/tree/master/npm/webpack-preprocessor) by default and it does not support files with question marks or exclamation marks. Addressed in [#7982](https://github.com/cypress-io/cypress/pull/7982).\n*   For TypeScript compilation of spec, support, and plugins files, the `esModuleInterop` option is no longer coerced to `true`. If you need to utilize `esModuleInterop`, set it in your `tsconfig.json`. Addresses [#7575](https://github.com/cypress-io/cypress/issues/7575).\n*   Cypress now requires TypeScript 3.4+. Addressed in [#7856](https://github.com/cypress-io/cypress/issues/7856).\n*   Installing Cypress on your system now requires Node.js 10+. Addresses [#6574](https://github.com/cypress-io/cypress/issues/6574).\n*   In spec files, the values for the globals `__dirname` and `__filename` no longer include leading slashes. Addressed in [#7982](https://github.com/cypress-io/cypress/pull/7982).\n\n**Features:**\n\n*   There's a new `retries` configuration option to configure the number of times to retry a failing test. Addresses [#1313](https://github.com/cypress-io/cypress/issues/1313).\n*   [.click()](https://docs.cypress.io/api/commands/click), [.dblclick()](https://docs.cypress.io/api/commands/dblclick), and [.rightclick()](https://docs.cypress.io/api/commands/rightclick) now accept options `altKey`, `ctrlKey`, `metaKey`, and `shiftKey` to hold down key combinations while clicking. Addresses [#486](https://github.com/cypress-io/cypress/issues/486).\n*   You can now chain `.snapshot()` off of `cy.stub()` and `cy.spy()` to disabled snapshots during those commands. For example: `cy.stub().snapshot(false)`. Addresses [#3849](https://github.com/cypress-io/cypress/issues/3849).\n\n**Bugfixes:**\n\n*   The error `Cannot set property 'err' of undefined` will no longer incorrectly throw when rerunning tests in the Test Runner. Fixes [#7874](https://github.com/cypress-io/cypress/issues/7874) and [#8193](https://github.com/cypress-io/cypress/issues/8193).\n*   Cypress will no longer throw a `Cannot read property 'isAttached' of undefined` error during `cypress run` on Firefox versions >= 75. Fixes [#6813](https://github.com/cypress-io/cypress/pull/6813).\n*   The error `Maximum call stack size exceeded` will no longer throw when calling `scrollIntoView` on an element in the shadow dom. Fixes [#7986](https://github.com/cypress-io/cypress/issues/7986).\n*   Cypress [environment variables](https://docs.cypress.io/guides/guides/environment-variables) that accept arrays as their value will now properly evaluate as arrays. Fixes [#6810](https://github.com/cypress-io/cypress/issues/6810).\n*   Elements having `display: inline` will no longer be considered hidden if it has child elements within it that are visible. Fixes [#6183](https://github.com/cypress-io/cypress/issues/6183).\n*   When [experimentalShadowDomSupport](https://docs.cypress.io/guides/references/experiments) is enabled, [.parent()](https://docs.cypress.io/api/commands/parent) and [.parentsUntil()](https://docs.cypress.io/api/commands/parentsuntil) commands now work correctly in shadow dom as well as passing a selector to [.parents()](https://docs.cypress.io/api/commands/parents) when the subject is in the shadow dom. Fixed in [#8202](https://github.com/cypress-io/cypress/pull/8202).\n*   Screenshots will now be correctly taken when a test fails in an `afterEach` or `beforeEach` hook after the hook has already passed. Fixes [#3744](https://github.com/cypress-io/cypress/issues/3744).\n*   Cypress will no longer report screenshots overwritten in a `cy.screenshot()` [onAfterScreenshot](https://docs.cypress.io/api/commands/screenshot#Get-screenshot-info-from-the-onAfterScreenshot-callback) option as a unique screenshot. Fixes [#8079](https://github.com/cypress-io/cypress/issues/8079).\n*   Taking screenshots will no longer fail when the screenshot names are too long for the filesystem to accept. Fixes [#2403](https://github.com/cypress-io/cypress/issues/2403).\n*   The \"last used browser\" will now be correctly remembered during `cypress open` if a non-default-channel browser was selected. Fixes [#8281](https://github.com/cypress-io/cypress/issues/8281).\n*   For TypeScript projects, `tsconfig.json` will now be loaded and used to configure TypeScript compilation of spec and support files. Fixes [#7006](https://github.com/cypress-io/cypress/issues/7006) and [#7503](https://github.com/cypress-io/cypress/issues/7503).\n*   `reporterStats` now correctly show the number of passed and failed tests when a test passes but the `afterEach` fails. Fixes [#7730](https://github.com/cypress-io/cypress/issues/7730).\n*   The Developer Tools menu will now always display in Electron when switching focus from Specs to the Test Runner. Fixes [#3559](https://github.com/cypress-io/cypress/pull/3559).\n\n**Documentation Changes:**\n\n*   We have a new guide on [Test Retries](https://docs.cypress.io/guides/guides/test-retries).\n*   Our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide) has a new section for 5.0 migration.\n\n**Misc:**\n\n*   Cypress now uses the [webpack preprocessor](https://github.com/cypress-io/cypress/tree/master/npm/webpack-preprocessor) by default to preprocess spec files.\n*   The **Runs** tab within the Test Runner has a new improved design when the project has not been set up or login is required. Addressed in [#8141](https://github.com/cypress-io/cypress/pull/8141).\n*   The type for the `Window` object returned from [cy.window()](https://docs.cypress.io/api/commands/window) is now correct. Addresses [#7856](https://github.com/cypress-io/cypress/issues/7856).\n*   The type definition for Cypress's `ApplicationWindow` can now be extended. Addresses [#7856](https://github.com/cypress-io/cypress/issues/7856).\n*   The type definition for `reporterOptions` has been added. Addresses [#7877](https://github.com/cypress-io/cypress/issues/7877).\n\n**Dependency Updates**\n\n*   Upgraded Chrome browser version used during cypress run and when selecting Electron browser in cypress open from `80` to `83`. Addressed in [#7791](https://github.com/cypress-io/cypress/pull/7791).\n*   Upgraded bundled Node.js version from `12.8.1` to `12.14.1`. Addressed in [#7791](https://github.com/cypress-io/cypress/pull/7791).\n*   Upgraded `chalk` from `2.4.2` to `4.1.0`. Addressed in [#7650](https://github.com/cypress-io/cypress/pull/7650).\n*   Upgraded `cli-table3` from `0.5.1` to `0.6.0`. Addressed in [#7650](https://github.com/cypress-io/cypress/pull/7650).\n*   Upgraded `electron` from `8.3.1` to `9.2.0`. Addressed in [#7791](https://github.com/cypress-io/cypress/pull/7791) and [#8235](https://github.com/cypress-io/cypress/pull/8235).\n*   Upgraded `execa` from `1.0.0` to `4.0.2`. Addressed in [#7650](https://github.com/cypress-io/cypress/pull/7650).\n*   Upgraded `express` from `4.16.4` to `4.17.1`. Addressed in [#8179](https://github.com/cypress-io/cypress/pull/8179).\n*   Upgraded `fs-extra` from `8.1.0` to `9.0.1`. Addressed in [#7650](https://github.com/cypress-io/cypress/pull/7650).\n*   Upgraded `log-symbols` from `3.0.0` to `4.0.0`. Addressed in [#7650](https://github.com/cypress-io/cypress/pull/7650).\n*   Upgraded `tmp` from `0.1.0` to `0.2.1`. Addressed in [#7650](https://github.com/cypress-io/cypress/pull/7650).\n\n## 4.12.1[​](#4-12-1 \"Direct link to 4.12.1\")\n\n_Released 8/5/2020_\n\n**Bugfixes:**\n\n*   The error `Cannot set property 'err' of undefined` will no longer incorrectly throw when rerunning tests in the Test Runner. Fixes [#7874](https://github.com/cypress-io/cypress/issues/7874).\n*   Skipping the last test before a nested suite with a `before` hook will now correctly run the tests in the suite following the skipped test. Fixes [#8086](https://github.com/cypress-io/cypress/issues/8086).\n\n**Dependency Updates:**\n\n*   Upgraded `md5` from `2.2.1` to `2.3.0`. Addressed in [#8161](https://github.com/cypress-io/cypress/pull/8161).\n*   Upgraded `electron-context-menu` from `0.15.1` to `2.2.0`. Addressed in [#8180](https://github.com/cypress-io/cypress/pull/8180).\n\n## 4.12.0[​](#4-12-0 \"Direct link to 4.12.0\")\n\n_Released 8/3/2020_\n\n**Features:**\n\n*   Now you can control whether screenshots are automatically taken on test failure during `cypress run` by setting [`screenshotOnRunFailure`](https://docs.cypress.io/guides/references/configuration#Screenshots) in your configuration. Addresses [#5029](https://github.com/cypress-io/cypress/issues/5029).\n*   The `pluginsFile` now has access to a readonly `version` property within the `config` object that returns the current Cypress version being run. This will allow plugins to better target specific Cypress versions. Addresses [#6352](https://github.com/cypress-io/cypress/issues/6352).\n*   During `cypress open`, you can now run a subset of all specs by entering a text search filter and clicking 'Run n tests' Addresses [#6581](https://github.com/cypress-io/cypress/issues/6581).\n\n**Bugfixes:**\n\n*   `position: fixed` elements that have a parent with `pointer-events: none` will now correctly evaluate as visible. Fixes [#6675](https://github.com/cypress-io/cypress/issues/6675).\n*   Applications using custom elements will no longer trigger infinite XHR request loops. Fixes [#1068](https://github.com/cypress-io/cypress/issues/1068).\n*   When snapshotting the DOM, Cypress no longer causes `attributeChangedCallback` to be triggered on custom elements. Fixes [#7187](https://github.com/cypress-io/cypress/issues/7187).\n*   Spec files containing `+` characters now properly run in Cypress. Fixes [#5909](https://github.com/cypress-io/cypress/issues/5909).\n*   When using the `fx` shortcut in `cy.route()`, an error is now thrown when the fixture file cannot be found. Fixes [#7818](https://github.com/cypress-io/cypress/issues/7818).\n*   Cypress no longer thrown `Cannot read property '__error' of null` error when passing a file containing `null` content to [cy.fixture()](https://docs.cypress.io/api/commands/fixture). Fixes [#8010](https://github.com/cypress-io/cypress/issues/8010).\n*   Values containing exponential operators passed to `--env` via the command line are now properly read. Fixes [#6891](https://github.com/cypress-io/cypress/issues/6891).\n*   The \"Open in IDE\" button no longer disappears from hooks when the tests are manually rerun. Fixes [#8094](https://github.com/cypress-io/cypress/issues/8094).\n*   When [experimentalSourceRewriting](https://docs.cypress.io/guides/references/experiments) is enabled, AST rewriting will no longer return an output before the body is done being written. This would happen when the response body was too large and the response would be sent while the body was still being modified. Fixes [#8043](https://github.com/cypress-io/cypress/issues/8043).\n*   When using [.type()](https://docs.cypress.io/api/commands/type), Cypress now properly types into an input within an iframe that auto focuses the input. Fixes [#8111](https://github.com/cypress-io/cypress/issues/8111).\n\n**Misc:**\n\n*   Dependencies for our `cypress` npm package are no longer pinned to a specific version. This allows the use of `npm audit fix` to fix security vulnerabilities without needing a patch release from Cypress. Addresses [#8046](https://github.com/cypress-io/cypress/issues/8046).\n*   We now collect environment variables for AWS CodeBuild when recording to the Dashboard. Addressed [#8101](https://github.com/cypress-io/cypress/issues/8101).\n*   Types inside Module API are now accessible via the `CypressCommandLine` namespace. Addresses [#7309](https://github.com/cypress-io/cypress/issues/7309).\n*   We added more type definitions for the [.should()](https://docs.cypress.io/api/commands/should) command. Addresses [#5573](https://github.com/cypress-io/cypress/issues/5573).\n*   Cookie command's `expiry` property type is now a Number instead of a String. Addresses [#8144](https://github.com/cypress-io/cypress/issues/8144).\n*   There are some minor visual improvements to the Test Runner's Command Log when hovering, focusing and clicking on hook titles and pending tests. Addressed in [#8153](https://github.com/cypress-io/cypress/pull/8153).\n\n**Dependency Updates:**\n\n*   Upgraded `jimp` from `0.13.0` to `0.14.0`. Addressed in [#8102](https://github.com/cypress-io/cypress/pull/8102).\n*   Upgraded `moment` from `2.26.0` to `2.27.0`. Addressed in [#8122](https://github.com/cypress-io/cypress/pull/8122).\n\n## 4.11.0[​](#4-11-0 \"Direct link to 4.11.0\")\n\n_Released 7/21/2020_\n\n**Features:**\n\n*   You can now pass an `ensureScrollability: false` option to [.scrollTo()](https://docs.cypress.io/api/commands/scrollTo) to skip checking whether the element is scrollable. Addresses [#1924](https://github.com/cypress-io/cypress/issues/1924).\n*   [cy.clock()](https://docs.cypress.io/api/commands/clock) now accepts Dates as well as a Number for now. Fixes [#7786](https://github.com/cypress-io/cypress/issues/7786).\n*   The [Module API](https://docs.cypress.io/guides/guides/module-api) has a new `cypress.cli.parseRunArguments` function to assist in parsing user-supplied command line arguments using the same logic as `cypress run` uses. Addresses [#7760](https://github.com/cypress-io/cypress/issues/7760).\n\n**Bugfixes:**\n\n*   Running multiple specs within Firefox during `cypress run` on Windows will no longer fail trying to make a connection to the browser. Fixes [#6392](https://github.com/cypress-io/cypress/issues/6392).\n*   Cypress will no longer throw a `Cannot read property 'isAttached' of undefined` error during `cypress run` on Firefox versions >= 75. Fixes [#6813](https://github.com/cypress-io/cypress/issues/6813).\n*   Fixed an issue where Cypress tests in Chromium-family browsers could randomly fail with the error \"WebSocket is already in CLOSING or CLOSED state.\" Fixes [#7180](https://github.com/cypress-io/cypress/issues/7180).\n*   Taking a screenshot of an element that changes height upon scroll will no longer throw an `invalid for option \"size\"` error. Fixes [#6099](https://github.com/cypress-io/cypress/issues/6099).\n*   Setting `viewportHeight` or `viewportWidth` from within the [test configuration](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Configuration) now properly changes the viewport size for the duration of the suite or test.\n*   Setting deep objects and arrays on `config` within the `pluginsFile` now sets the values correctly. Fixes [#7959](https://github.com/cypress-io/cypress/issues/7959).\n*   The progress bar for `cy.wait()` now reflects the correct `requestTimeout` and `responseTimeout` of the command. Fixes [#7881](https://github.com/cypress-io/cypress/issues/7881).\n*   The command's progress bar will not longer restart when its parent test is collapsed in the Command Log. Fixes [#7912](https://github.com/cypress-io/cypress/issues/7912).\n*   Key value pairs sent to `ELECTRON_EXTRA_LAUNCH_ARGS` as `key=value` will now be properly read in. Fixes [#7994](https://github.com/cypress-io/cypress/issues/7994).\n*   Stubbed responses responding with an empty string to `cy.route()` now correctly display as 'xhr stub' in the Test Runner's Command Log. Fixes [#8018](https://github.com/cypress-io/cypress/issues/8018).\n*   Quickly reclicking the \"Run All Tests\" button in the Test Runners' Command Log will no longer throw errors about undefined properties and the tests will no longer hang. Fixes [#7968](https://github.com/cypress-io/cypress/issues/7968).\n\n**Misc:**\n\n*   The error messages thrown from `pluginsFile` and `supportFile` now mention that `.ts` extensions are supported. Addresses [#7940](https://github.com/cypress-io/cypress/issues/7940).\n*   The style when focusing on tests in the Command Log has been updated. Addresses [#7855](https://github.com/cypress-io/cypress/issues/7855).\n\n**Dependency Updates:**\n\n*   Upgraded `@benmalka/foxdriver` from `0.4.0` to `0.4.1`. Addressed in [#8040](https://github.com/cypress-io/cypress/pull/8040).\n*   Upgraded `firefox-profile` from `1.3.1` to `2.0.0`. Addressed in [#8000](https://github.com/cypress-io/cypress/pull/8000).\n*   Upgraded `fix-path` from `2.1.0` to `3.0.0`. Addressed in [#8028](https://github.com/cypress-io/cypress/pull/8028).\n*   Upgraded `human-interval` from `0.1.6` to `1.0.0`. Addressed in [#8031](https://github.com/cypress-io/cypress/pull/8031).\n*   Upgraded `lodash` from `4.17.15` to `4.17.19`. Addressed in [#7954](https://github.com/cypress-io/cypress/pull/7954).\n*   Upgraded `plist` from `2.1.0` to `3.0.1`. Addressed in [#8045](https://github.com/cypress-io/cypress/pull/8045).\n*   Upgraded `proxy-from-env` from `1.0.0` to `1.1.0`. Addressed in [#7900](https://github.com/cypress-io/cypress/pull/7900).\n*   Upgraded `resolve` from `1.13.1` to `1.17.0`. Addressed in [#7989](https://github.com/cypress-io/cypress/pull/7989).\n*   Upgraded `systeminformation` from `4.21.1` to `4.26.9`. Addressed in [#7975](https://github.com/cypress-io/cypress/pull/7975).\n*   Upgraded `uuid` from `3.3.2` to `8.2.0`. Addressed in [#7976](https://github.com/cypress-io/cypress/pull/7976), [#8002](https://github.com/cypress-io/cypress/pull/8002), and [#8011](https://github.com/cypress-io/cypress/pull/8011).\n\n## 4.10.0[​](#4-10-0 \"Direct link to 4.10.0\")\n\n_Released 7/7/2020_\n\n**Features:**\n\n*   You can open a `before`, `beforeEach`, `after`, and `afterEach` hook definition in your IDE from the Test Runner's [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) by clicking the **Open in IDE** button. Addresses [#7793](https://github.com/cypress-io/cypress/issues/7793).\n*   `before`, `beforeEach`, `after`, and `afterEach` hook definitions now display separately in the Test Runner's [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) when defined in separate hook definitions. Addresses [#7779](https://github.com/cypress-io/cypress/issues/7779).\n*   You can now open a spec file directly from the **Tests** tab in the Test Runner by clicking the **Open in IDE** button. Addresses [#7713](https://github.com/cypress-io/cypress/issues/7713)\n\n**Bugfixes:**\n\n*   HTTP requests taking longer than the default `responseTimeout` will no longer be prematurely canceled by the Cypress proxy layer. Fixes [#6426](https://github.com/cypress-io/cypress/issues/6426).\n*   Using Cypress commands to traverse the DOM on an application with a global `parent` variable will no longer throw Illegal Invocation errors. Fixes [#6412](https://github.com/cypress-io/cypress/issues/6412).\n*   When `experimentalShadowDomSupport` is enabled, using [.type()](https://docs.cypress.io/api/commands/type) on an input in the Shadow DOM will not result in an error. Fixes [#7741](https://github.com/cypress-io/cypress/issues/7741).\n*   When `experimentalShadowDomSupport` is enabled, checking for visibility on a shadow dom host element will no longer hang if the host element was the foremost element and had an ancestor with fixed position. Fixes [#7893](https://github.com/cypress-io/cypress/issues/7893).\n*   Debug logs from the `@benmalka/foxdriver` module will no longer appear if any `DEBUG` environment variable was set. Fixed [#7723](https://github.com/cypress-io/cypress/issues/7723).\n\n**Misc:**\n\n*   We made some minor UI updates to the Test Runner. Addresses [#7732](https://github.com/cypress-io/cypress/issues/7732) and [#7803](https://github.com/cypress-io/cypress/issues/7803).\n\n**Dependency Updates:**\n\n*   Upgraded `recast` from `0.18.8` to `0.19.1`. Addressed in [#7898](https://github.com/cypress-io/cypress/pull/7898).\n\n## 4.9.0[​](#4-9-0 \"Direct link to 4.9.0\")\n\n_Released 6/23/2020_\n\n**Features:**\n\n*   An animated progress bar now displays on every command in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) indicating how long the command has left to run before reaching its command timeout. Addresses [#7642](https://github.com/cypress-io/cypress/issues/7642).\n*   There is now an [experimentalFetchPolyfill](https://docs.cypress.io/guides/references/experiments) configuration option. When this option is `true`, Cypress will automatically replace `window.fetch` with a polyfill that Cypress can spy on and stub. Addresses [#7710](https://github.com/cypress-io/cypress/issues/7710).\n*   You can now pass a `--quiet` flag to [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) to silence any Cypress specific output from stdout. Addresses [#7714](https://github.com/cypress-io/cypress/issues/7714).\n\n**Bugfixes:**\n\n*   [cy.wait()](https://docs.cypress.io/api/commands/wait) now correctly resolves when waiting for XHR requests that contain resource-like text in the XHR's query params or hash (like `.js`, .`html`, `.css`). [#7280](https://github.com/cypress-io/cypress/issues/7280).\n*   We fixed a regression in [4.6.0](#4-6-0) where errors thrown from the application under test as strings would not be correctly handled. Fixes [#7590](https://github.com/cypress-io/cypress/issues/7590).\n*   We fixed a regression in [4.8.0](#4-8-0) where [.click()](https://docs.cypress.io/api/commands/click) would hang if the subject had a shadow root and `experimentalShadowDomSupport` was not enabled. Fixes [#7679](https://github.com/cypress-io/cypress/issues/7679).\n*   We fixed a regression in [4.6.0](#4-6-0) so that [`.should('have.value')`](https://docs.cypress.io/api/commands/should) now properly asserts against `<progress>`, `<meter>` or `<li>` element's values. Fixes [#7603](https://github.com/cypress-io/cypress/issues/7603).\n*   Cypress no longer responds with 413 responses during a recorded `cypress run` when the stdout is too large. Fixes [#7548](https://github.com/cypress-io/cypress/issues/7548).\n*   We fixed an issue where Cypress could exit successfully even with failing tests when launched in global mode. Fixes [#7755](https://github.com/cypress-io/cypress/issues/7755).\n*   Assertion logs now properly display as parent commands in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) regardless of what is in the `beforeEach` hook. Fixes [#7731](https://github.com/cypress-io/cypress/issues/7731).\n*   When `experimentalShadowDomSupport` is enabled, querying shadow dom in certain situations will no longer cause the error `Cannot read property 'length' of undefined` during `cypress run`. Fixes [#7676](https://github.com/cypress-io/cypress/issues/7676).\n*   Highlighting of elements upon hover of a command in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) are now visible when targeting absolute positioned elements. Fixes [#7762](https://github.com/cypress-io/cypress/issues/7762).\n*   [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) will no longer crash when provided an empty string to the `--project` flag. Fixes [#7743](https://github.com/cypress-io/cypress/issues/7743).\n\n**Misc:**\n\n*   There is now a loading state to indicate when tests are loading in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log). Addresses [#7700](https://github.com/cypress-io/cypress/issues/7700).\n*   The type definitions for `fixturesFolder`, `pluginsFile`, `screenshotsFolders` and `videoCompression` have been updated to allow `false` TypeScript types. Addresses [#7654](https://github.com/cypress-io/cypress/issues/7654).\n*   The type definitions for `cy.wait(ms)` now correctly yield the type of the previous subject. Addresses [#7682](https://github.com/cypress-io/cypress/issues/7682).\n*   The type definitions now allow for the 'key' keyword when chaining off 'any' or 'all' assertion chainers. Addresses [#7665](https://github.com/cypress-io/cypress/issues/7665).\n\n**Dependency Updates:**\n\n*   Upgraded `arch` from `2.1.1` to `2.1.2`. Addressed in [#7672](https://github.com/cypress-io/cypress/pull/7672).\n*   Upgraded `eventemitter2` from `4.1.2` to `6.4.2`. Addressed in [#7705](https://github.com/cypress-io/cypress/pull/7705) and [#7707](https://github.com/cypress-io/cypress/pull/7707).\n*   Upgraded `getos` from `3.1.1` to `3.2.1`. Addressed in [#7685](https://github.com/cypress-io/cypress/pull/7685).\n*   Upgraded `is-installed-globally` from `0.1.0` to `0.3.2`. Addressed in [#7703](https://github.com/cypress-io/cypress/pull/7703).\n*   Upgraded `jimp` from `0.12.0` to `0.13.0`. Addressed in [#7618](https://github.com/cypress-io/cypress/pull/7618).\n*   Upgraded `moment` from `2.24.0` to `2.26.0`. Addressed in [#7718](https://github.com/cypress-io/cypress/pull/7718).\n*   Upgraded `signal-exit` from `3.0.2` to `3.0.3`. Addressed in [#7738](https://github.com/cypress-io/cypress/pull/7738).\n\n## 4.8.0[​](#4-8-0 \"Direct link to 4.8.0\")\n\n_Released 6/8/2020_\n\n**Features:**\n\n*   You can now apply certain [test configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration) for the duration of a suite or test by passing a configuration object to the test or suite as the second argument. Addresses [#7167](https://github.com/cypress-io/cypress/issues/7167).\n*   [Cypress.isBrowser()](https://docs.cypress.io/api/cypress-api/isbrowser) has been expanded to allow for new matcher arguments to assist in filtering matching browsers. Addresses [#7168](https://github.com/cypress-io/cypress/issues/7168).\n*   We now display the currently running file at the top of the Test Runner's Command Log. [That file can be opened](https://docs.cypress.io/guides/core-concepts/cypress-app#Open-files-in-your-IDE) in your [preferred file opener](https://docs.cypress.io/guides/tooling/IDE-integration#File-Opener-Preference) by clicking the file. Addresses [#7506](https://github.com/cypress-io/cypress/issues/7506).\n*   We added experimental shadow DOM support through the `experimentalShadowDomSupport` option. See the [Experiments page](https://docs.cypress.io/guides/references/experiments#History) for more information. Addresses [#144](https://github.com/cypress-io/cypress/issues/144).\n\n**Bugfixes:**\n\n*   Upon domain navigation, `before` and `after` hooks defined in completed suites no longer erroneously rerun. Fixes [#1987](https://github.com/cypress-io/cypress/issues/1987).\n*   Errors thrown within root level `after` hooks now correctly display in the Test Runner's Command Log. Fixes [#2296](https://github.com/cypress-io/cypress/issues/2296).\n*   We fixed a regression in [4.6.0](#4-6-0) where an XHR response without a body would cause Cypress to throw `Cannot read property '__error' of null`. Fixes [#7518](https://github.com/cypress-io/cypress/issues/7518).\n*   We fixed a regression in [4.6.0](#4-6-0) where using [cy.visit()](https://docs.cypress.io/api/commands/visit) to an authenticated URL would error with `Request cannot be constructed from a URL that includes credentials: /__cypress/runner/./wasm/mappings.wasm` Fixes [#7481](https://github.com/cypress-io/cypress/issues/7481).\n*   We now properly load code from the `pluginsFile` or `supportFile` when they are TypeScript files. Fixes [#7459](https://github.com/cypress-io/cypress/issues/7459).\n*   utf-8 characters now properly display within error code frames. Fixes [#7507](https://github.com/cypress-io/cypress/issues/7507).\n*   Errors thrown in a [`cy.on('fail', fn)`](https://docs.cypress.io/api/cypress-api/catalog-of-events#Cypress-Events) fail handler now display a stack trace and code frame pointing to the origin of the error. Fixes [#7512](https://github.com/cypress-io/cypress/issues/7512).\n*   [.click()](https://docs.cypress.io/api/commands/click) now properly clicks on wrapped inline elements when the first child element in the parent element has no width or height. Fixes [#7343](https://github.com/cypress-io/cypress/issues/7343) and [#7012](https://github.com/cypress-io/cypress/issues/7012).\n*   [cy.wrap()](https://docs.cypress.io/api/commands/wrap) now properly respects the `timeout` option. It also better handles situations when passed a promise that never resolves. Fixes [#5980](https://github.com/cypress-io/cypress/issues/5980).\n*   When [experimentalSourceRewriting](https://docs.cypress.io/guides/references/experiments) is enabled, Cypress will no longer exit with SIGABRT in certain situations. Fixes [#7572](https://github.com/cypress-io/cypress/issues/7572).\n*   We fixed a regression in [3.8.0](#3-8-0) where the \"Tests\" button in the Test Runner wouldn't take you back to the tests list in all browsers. Fixes [#5948](https://github.com/cypress-io/cypress/issues/5948).\n*   Using the `S` shortcut during [.pause()](https://docs.cypress.io/api/commands/pause) no longer does anything. This prevents the Test Runner from getting into a 'stuck' state. Fixes [#6867](https://github.com/cypress-io/cypress/issues/6867).\n\n**Misc:**\n\n*   The design of errors and some iconography displayed in the Test Runner's Command Log have been updated. Addresses [#7499](https://github.com/cypress-io/cypress/issues/7499), [#7542](https://github.com/cypress-io/cypress/issues/7542) and [#7563](https://github.com/cypress-io/cypress/issues/7563).\n*   The commands in the Test Runner's Command Log now display in the same casing as the original command. Addresses [#5773](https://github.com/cypress-io/cypress/issues/5773).\n*   The navigation links in the Test Runner now display the correct CSS styles when focused. Addresses [#7491](https://github.com/cypress-io/cypress/issues/7491).\n*   [Cypress.config()](https://docs.cypress.io/api/cypress-api/config) now has TypeScript types for the `taskTimeout` option. Addresses [#7531](https://github.com/cypress-io/cypress/issues/7531).\n*   TypeScript types for [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) options and [Cypress.log()](https://docs.cypress.io/api/cypress-api/cypress-log) have been updated to be more accurate. Addresses [#7445](https://github.com/cypress-io/cypress/issues/7445).\n*   TypeScript types for `Cypress.automation` have been added. Addresses [#7519](https://github.com/cypress-io/cypress/issues/7519).\n*   We now display a more accurate error message when passing a browser to the `--browser` flag that is not supported by Cypress. Addresses [#6979](https://github.com/cypress-io/cypress/issues/6979).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#7588](https://github.com/cypress-io/cypress/pull/7588) and [#7591](https://github.com/cypress-io/cypress/pull/7591).\n\n**Dependency Updates:**\n\n*   Upgraded `chrome-remote-interface` from `0.28.1` to `0.28.2`. Addressed in [#7615](https://github.com/cypress-io/cypress/pull/7615).\n*   Upgraded `electron` from `8.3.0` to `8.3.1`. Addressed in [#7599](https://github.com/cypress-io/cypress/pull/7599).\n\n## 4.7.0[​](#4-7-0 \"Direct link to 4.7.0\")\n\n_Released 5/26/2020_\n\n**Features:**\n\n*   [cy.request()](https://docs.cypress.io/api/commands/request) now supports an `encoding` option that can be used to set the encoding of the response body, defaulting to `utf-8`. Addresses [#2029](https://github.com/cypress-io/cypress/issues/2029) and [#3576](https://github.com/cypress-io/cypress/issues/3576).\n\n**Bugfixes:**\n\n*   We fixed a regression in [4.6.0](#4-6-0) where the address bar of the application under test would disappear when scrolling commands ran and the application under test would visually shift after taking screenshots. Fixes [#7443](https://github.com/cypress-io/cypress/issues/7443) and [#7466](https://github.com/cypress-io/cypress/issues/7466).\n*   We fixed a regression in [4.6.0](#4-6-0) where test runs could hang when loading spec files with source maps. Fixes [#7464](https://github.com/cypress-io/cypress/issues/7464).\n\n**Misc:**\n\n*   We now display a more descriptive error message when the plugins file does not export a function. Addresses [#6611](https://github.com/cypress-io/cypress/issues/6611).\n\n## 4.6.0[​](#4-6-0 \"Direct link to 4.6.0\")\n\n_Released 5/20/2020_\n\n**Features:**\n\n*   [Errors](https://docs.cypress.io/guides/guides/debugging#Errors) in the Test Runner now display a code frame to preview where the failure occurred with the relevant file, line number, and column number highlighted. Clicking on the file link will open the file in your [preferred file opener](https://docs.cypress.io/guides/tooling/IDE-integration#File-Opener-Preference) and highlight the line and column in editors that support it. Addresses [#3762](https://github.com/cypress-io/cypress/issues/3762).\n*   Cypress now utilizes [source maps](https://docs.cypress.io/guides/guides/debugging#Source-maps) to enhance the error experience. Stack traces are translated so that your source files are shown instead of the generated file that is loaded by the browser. Cypress will include an inline source map in your spec file. If you [modify the preprocessor](https://docs.cypress.io/api/plugins/preprocessors-api), ensure that inline source maps are enabled to get the same experience. Users of `@cypress/webpack-preprocessor` should upgrade to v5.4.1 or later of the package which will correctly inline source maps. Addresses [#881](https://github.com/cypress-io/cypress/issues/881), [#1761](https://github.com/cypress-io/cypress/issues/1761) and [#3966](https://github.com/cypress-io/cypress/issues/3966).\n*   Cypress now enables AST-based JS/HTML rewriting when setting the [experimentalSourceRewriting](https://docs.cypress.io/guides/references/experiments) configuration option to `true`. Addresses [#5273](https://github.com/cypress-io/cypress/issues/5273).\n*   Number arguments passed to `have.text`, `have.id`, `have.data`, `have.value`, and `have.attr` [assertions chainers](https://docs.cypress.io/guides/references/assertions#Chai-jQuery) are now automatically cast to strings for comparison. Addresses [#7314](https://github.com/cypress-io/cypress/issues/7314).\n\n**Bugfixes:**\n\n*   Default [TypeScript](https://docs.cypress.io/guides/tooling/typescript-support) options are now set to `module: commonJS` which Node.js and the browser expect. This fixes a situation where setting a different module in a `tsconfig.json` would cause errors to throw if you had `export`, `import` or `async` keywords in your code. Fixes [#7005](https://github.com/cypress-io/cypress/issues/7005), [#7011](https://github.com/cypress-io/cypress/issues/7011), [#7043](https://github.com/cypress-io/cypress/issues/7043), and [#7151](https://github.com/cypress-io/cypress/issues/7151).\n*   When [experimentalSourceRewriting](https://docs.cypress.io/guides/references/experiments) is enabled, setting `location` or `location.href` to a relative href, or using `location.replace` or `location.assign` with a relative href will no longer navigate the AUT to the wrong URL. Fixes [#3975](https://github.com/cypress-io/cypress/issues/3975) and [#3994](https://github.com/cypress-io/cypress/issues/3994).\n*   When [experimentalSourceRewriting](https://docs.cypress.io/guides/references/experiments) is enabled, the use of `window.top` and `window.parent` will no longer cause the AUT to break out of the Cypress iframe. Fixes [#5271](https://github.com/cypress-io/cypress/issues/5271) and [#1467](https://github.com/cypress-io/cypress/issues/1467).\n*   When [experimentalSourceRewriting](https://docs.cypress.io/guides/references/experiments) is enabled, calls to `window.frames`, `window.parent.frames`, and other `frames` will no longer point to the wrong reference after being proxied through Cypress. Fixes [#2664](https://github.com/cypress-io/cypress/issues/2664).\n*   When [experimentalSourceRewriting](https://docs.cypress.io/guides/references/experiments) is enabled, scripts using the `integrity` attribute for sub-resource integrity (SRI) will now load after being proxied through Cypress. Fixes [#2393](https://github.com/cypress-io/cypress/issues/2393).\n*   When [experimentalSourceRewriting](https://docs.cypress.io/guides/references/experiments) is enabled, the use of `document.location` to set the URL will no longer navigate the AUT to the wrong URL. Fixes [#7402](https://github.com/cypress-io/cypress/issues/7402).\n*   Type definitions will no longer conflict when running Cypress in a project with Jest. Fixes [#3536](https://github.com/cypress-io/cypress/issues/3536).\n*   We increased the timeout for launching Firefox from 2.5 seconds to 50 seconds. Previously, users hitting this limit would encounter a \"cannot open socket\" error; now, the error will be wrapped. Fixes [#7159](https://github.com/cypress-io/cypress/issues/7159).\n*   [.click](https://docs.cypress.io/api/commands/click) will now click in the correct coordinates when either x or y coordinate options are zero. Fixes [#7319](https://github.com/cypress-io/cypress/issues/7319).\n*   Cypress no longer displays `onError is not a function` when a browser can't connect. Fixes [#7217](https://github.com/cypress-io/cypress/issues/7217).\n*   You can now pass the `force: true` option to [.select()](https://docs.cypress.io/api/commands/select) to select options within a disabled `<select>`. Addresses [#107](https://github.com/cypress-io/cypress/issues/107).\n*   We now throw an error when attempting to [.select()](https://docs.cypress.io/api/commands/select) an `<option>` within a disabled `<optgroup>`. Fixes [#7226](https://github.com/cypress-io/cypress/issues/7226).\n*   We fixed a regression in [4.3.0](#4-3-0) where the message output during errors were not formatted correctly. Fixes [#6924](https://github.com/cypress-io/cypress/issues/6924).\n*   Using [Cypress.\\_.capitalize](https://docs.cypress.io/api/utilities/_) now correctly behaves the same as Lodash's capitalize method. Fixes [#7222](https://github.com/cypress-io/cypress/issues/7222).\n*   When `experimentalComponentTesting` is enabled, clicking on a component spec now watches the correct file without assuming it is an integration file. Fixes [#7244](https://github.com/cypress-io/cypress/issues/7244).\n*   Firefox video recording no longer crashes Cypress when running very short spec files. Fixes [#6408](https://github.com/cypress-io/cypress/issues/6408).\n*   Applications containing a DOM element with an id attribute containing 'jquery' will no longer throw an error during [cy.visit()](https://docs.cypress.io/api/commands/visit). Fixes [#6193](https://github.com/cypress-io/cypress/issues/6193).\n*   Long errors generated when compiling or bundling the test file are now horizontally scrollable. Fixes [#6898](https://github.com/cypress-io/cypress/issues/6898).\n\n**Misc:**\n\n*   Cypress no longer requires write access to the root of the project, it instead will display a warning when no write access is given. Addresses [#1281](https://github.com/cypress-io/cypress/issues/1281).\n*   We increased the timeout for launching Chrome from 20 seconds to 50 seconds. Addressed in [#7372](https://github.com/cypress-io/cypress/pull/7372).\n*   We increased the timeout for macOS or Linux to exit from a `--version` command when looking for available browsers from 5 seconds to 30 seconds. Addressed in [#7366](https://github.com/cypress-io/cypress/pull/7366).\n*   We improved error handling when Cypress launches Chromium-family browsers. Addresses [#6518](https://github.com/cypress-io/cypress/issues/6518).\n*   We now export `Cypress.ConfigOptions` types as a partial of the full options interface. Addresses [#7238](https://github.com/cypress-io/cypress/issues/7238).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#7162](https://github.com/cypress-io/cypress/pull/7162), [#7216](https://github.com/cypress-io/cypress/pull/7216), [#7227](https://github.com/cypress-io/cypress/pull/7227), [#7320](https://github.com/cypress-io/cypress/pull/7320), [#7232](https://github.com/cypress-io/cypress/pull/7232), and [#7345](https://github.com/cypress-io/cypress/pull/7345).\n\n**Dependency Updates:**\n\n*   Upgraded `@cypress/browserify-preprocessor` from `2.2.2` to `2.2.3`. Addressed in [#7291](https://github.com/cypress-io/cypress/pull/7291).\n*   Upgraded `cookie-parser` from `1.4.4` to `1.4.5`. Addressed in [#7389](https://github.com/cypress-io/cypress/pull/7389).\n*   Upgraded `cypress-multi-reporters` from `1.2.4` to `1.4.0`. Addressed in [#7431](https://github.com/cypress-io/cypress/pull/7431).\n*   Upgraded `electron` from `8.2.3` to `8.3.0`. Addressed in [#7236](https://github.com/cypress-io/cypress/pull/7236) and [#7387](https://github.com/cypress-io/cypress/pull/7387).\n*   Upgraded `image-size` from `0.7.4` to `0.8.3`. Addressed in [#7236](https://github.com/cypress-io/cypress/pull/7236).\n*   Upgraded `jimp` from `0.9.3` to `0.12.0`. Addressed in [#7408](https://github.com/cypress-io/cypress/pull/7408).\n*   Upgraded `return-deep-diff` from `0.3.0` to `0.4.0`. Addressed in [#7292](https://github.com/cypress-io/cypress/pull/7292).\n\n## 4.5.0[​](#4-5-0 \"Direct link to 4.5.0\")\n\n_Released 4/28/2020_\n\n**Features:**\n\n*   Cypress now supports the execution of component tests using framework-specific adaptors when setting the `experimentalComponentTesting` configuration option to `true`. For more details see the [@cypress/react](https://github.com/cypress-io/cypress/tree/master/npm/react) and [@cypress/vue](https://github.com/cypress-io/cypress/tree/master/npm/vue) repos. Addresses [#5922](https://github.com/cypress-io/cypress/issues/5922) and [#6968](https://github.com/cypress-io/cypress/issues/6968).\n\n**Bugfixes:**\n\n*   [Custom Mocha reporters](https://docs.cypress.io/guides/tooling/reporters) will now correctly use the version of Mocha bundled with Cypress. Fixes [#3537](https://github.com/cypress-io/cypress/issues/3537) and [#6984](https://github.com/cypress-io/cypress/issues/6984).\n*   We better account for word boundaries in application scripts when `modifyObstructiveCode` is `true`. Fixes [#7138](https://github.com/cypress-io/cypress/issues/7138).\n*   Fixed an issue where iterators in TypeScript were not properly transpiled. Fixes [#7098](https://github.com/cypress-io/cypress/issues/7098).\n\n**Misc:**\n\n*   The update window in the Test Runner now encourages yarn users to `yarn upgrade` Cypress instead of `yarn add` to help prevent installing 2 versions of Cypress when using yarn workspaces. Addressed in [#7101](https://github.com/cypress-io/cypress/pull/7101).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#7031](https://github.com/cypress-io/cypress/pull/7031) and [#7097](https://github.com/cypress-io/cypress/pull/7097).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` from `8.2.0` to `8.2.3`. Addressed in [#7079](https://github.com/cypress-io/cypress/pull/7079).\n\n## 4.4.1[​](#4-4-1 \"Direct link to 4.4.1\")\n\n_Released 4/20/2020_\n\n**Bugfixes:**\n\n*   Cypress can now launch on systems where Chromium is installed via Snapcraft. Fixes [#7020](https://github.com/cypress-io/cypress/issues/7020).\n*   We now check whether the `mouseup` event's target element is detached before issuing the `click` event during [.click()](https://docs.cypress.io/api/commands/click). Fixes [#6923](https://github.com/cypress-io/cypress/issues/6923).\n*   We fixed a regression in [3.8.1](#3-8-1) where the Test Runner could send an `undefined` organization ID during project setup when the default organization is preselected. Fixes [#7013](https://github.com/cypress-io/cypress/issues/7013).\n*   We fixed a regression in [4.4.0](#4-4-0) that caused projects to include bundled TypeScript. Fixes [#7036](https://github.com/cypress-io/cypress/issues/7036).\n*   Fixed an issue where sites that set `Feature-Policy: document-domain 'none'` headers would fail to load in Cypress. Fixes [#6480](https://github.com/cypress-io/cypress/issues/6480).\n\n**Misc:**\n\n*   We fixed some extra spacing displaying below the project nav in the Test Runner. Addresses [#7023](https://github.com/cypress-io/cypress/issues/7023)\n*   The typings for run results when using the [Module API](https://docs.cypress.io/guides/guides/module-api) now indicate they can be `null` or `undefined`. Addresses [#6126](https://github.com/cypress-io/cypress/issues/6126).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#7004](https://github.com/cypress-io/cypress/pull/7004).\n\n## 4.4.0[​](#4-4-0 \"Direct link to 4.4.0\")\n\n_Released 4/13/2020_\n\n**Features:**\n\n*   [TypeScript](https://docs.cypress.io/guides/tooling/typescript-support) test files are now supported without using special preprocessors plugins. Addresses [#1859](https://github.com/cypress-io/cypress/issues/1859).\n\n**Bugfixes:**\n\n*   We fixed an issue where Cypress could crash with a `This socket has been ended by the other party` error when testing applications that make use of WebSockets. Fixes [#6458](https://github.com/cypress-io/cypress/issues/6458).\n*   Uncaught errors thrown from within application or test code now display their proper stack trace. Fixes [#6964](https://github.com/cypress-io/cypress/issues/6964).\n*   Assertion errors now include a stack trace that includes the calling code. Fixes [#6969](https://github.com/cypress-io/cypress/issues/6969).\n*   We now clone the `options` object passed into Cypress commands so that they're not mutated and receive the proper `options`. Fixes [#3171](https://github.com/cypress-io/cypress/issues/3171).\n*   We fixed an issue where invalid `Set-Cookie` values could cause requests to fail with a `cannot read property key of undefined` error. Now, invalid `Set-Cookie` values will be ignored. Fixes [#6890](https://github.com/cypress-io/cypress/issues/6890).\n\n**Misc:**\n\n*   Cypress no longer hides output from `cypress --version`, `cypress version`, `cypress cache path`, or `cypress cache list` commands when npm log level is `silent` or `warn`. Addresses [#2705](https://github.com/cypress-io/cypress/issues/2705).\n*   The [cy.task()](https://docs.cypress.io/api/commands/task) error message is now more specific about the promise resolution value required. Addresses [#6241](https://github.com/cypress-io/cypress/issues/6241).\n\n**Dependency Updates:**\n\n*   Upgraded `http-proxy` from `1.17.0` to `1.18.0`. Addressed in [#6934](https://github.com/cypress-io/cypress/pull/6934).\n\n## 4.3.0[​](#4-3-0 \"Direct link to 4.3.0\")\n\n_Released 3/30/2020_\n\n**Features:**\n\n*   [Errors shown in the Test Runner](https://docs.cypress.io/guides/guides/debugging#Errors) have a new design including an expandable stack trace, better highlighting of code elements, and 'Learn more' links that link to relevant Cypress documentation. This is part of our larger improvements to error display with more exciting features to come. Addresses [#3762](https://github.com/cypress-io/cypress/issues/3762).\n*   When you open a Cypress project, clicking on the **Settings** tab and clicking into the **Experiments** panel will display the [experimental features](https://docs.cypress.io/guides/references/configuration#Experiments) that are available and whether they are enabled for your project.\n*   Added support for setting cookie `sameSite` values via `cy.setCookie()`. Addresses [#2437](https://github.com/cypress-io/cypress/issues/2437).\n*   Added experimental support for adding `sameSite` values to the objects yielded from [cy.setCookie()](https://docs.cypress.io/api/commands/setcookie), [cy.getCookie()](https://docs.cypress.io/api/commands/getcookie), and [cy.getCookies()](https://docs.cypress.io/api/commands/getcookies). Users can enable this by setting the [experimentalGetCookiesSameSite](https://docs.cypress.io/guides/references/configuration#Experiments) configuration value to `true`. In Cypress 5, this will be the default. Addresses [#2437](https://github.com/cypress-io/cypress/issues/2437).\n*   Added support for the `SameSite` cookie attribute in `cy.request()`, `cy.visit()`, and proxied HTTP requests. Addresses [#6757](https://github.com/cypress-io/cypress/issues/6757).\n*   When an assertion is retried (using [.should()](https://docs.cypress.io/api/commands/should)) and fails, it now shows the diff in the `stdout`. Addresses [#6722](https://github.com/cypress-io/cypress/issues/6722).\n\n**Bugfixes:**\n\n*   Fixed a regression in [4.2.0](#4-2-0) where cypress installation could fail if Git is not installed. Fixes [#6752](https://github.com/cypress-io/cypress/issues/6752).\n*   Fixed a regression in [3.5.0](#3-5-0) where certain HTTP requests could fail with `Parse Error: Invalid header value char` or `Parse Error: Header overflow`. Fixes [#5602](https://github.com/cypress-io/cypress/issues/5602).\n*   Fixed a regression in [4.2.0](#4-2-0) where Electron deprecation warnings were printed to stderr in open mode. Fixes [#6750](https://github.com/cypress-io/cypress/issues/6750).\n*   Cookies set with a Domain containing an unknown TLD are now sent along for all requests. For example, a cookie like `foo=bar; Domain=.cypress.test` will now be sent during [cy.request()](https://docs.cypress.io/api/commands/request) to `http://local.cypress.test`. Fixes [#6628](https://github.com/cypress-io/cypress/issues/6628).\n*   We fixed a situation where a cross-origin errors could incorrectly throw in Chrome. Fixes [#5270](https://github.com/cypress-io/cypress/issues/5270).\n*   Visibility checks against `vue-fragment` elements no longer throw an unexpected error. Fixes [#6745](https://github.com/cypress-io/cypress/issues/6745).\n*   The stack trace is now properly shown in the console when clicking the command for tests having an `.only` that throw an error. Fixes [#6744](https://github.com/cypress-io/cypress/issues/6744).\n*   `firefoxGcInterval` can now correctly be set to `null`. Fixes [#6825](https://github.com/cypress-io/cypress/issues/6825).\n*   Cypress will no longer crash the process if an empty video chunk is received. Addressed in [#6818](https://github.com/cypress-io/cypress/pull/6818).\n*   Assertions failures on DOM elements no longer show unexpected diffs when they weren't retried. Fixes [#6723](https://github.com/cypress-io/cypress/issues/6723).\n\n**Misc:**\n\n*   Security warnings no longer show in Mac OS when opening Cypress since our application now undergoes notarization from Apple. Addresses [#5791](https://github.com/cypress-io/cypress/issues/5791).\n*   The previously used spec filter in the Test Runner is now saved and restored for projects without an ID.Addresses [#6739](https://github.com/cypress-io/cypress/issues/6739).\n*   We collect more env information from Travis builds for potential use in the Cypress Dashboard. Addresses [#6808](https://github.com/cypress-io/cypress/issues/6808).\n*   We now collect env information from Netlify builds (for example when using [cypress-io/netlify-plugin-cypress](https://github.com/cypress-io/netlify-plugin-cypress)) to send along to the Cypress Dashboard. Addresses [#6780](https://github.com/cypress-io/cypress/issues/6780).\n*   Type added for `tag` property when using Module API. Addresses [#6795](https://github.com/cypress-io/cypress/issues/6795).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#6833](https://github.com/cypress-io/cypress/pull/6833).\n\n**Dependency Updates**\n\n*   Upgraded Chrome browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `80.0.3987.141` to `80.0.3987.158`. Addressed in [#6855](https://github.com/cypress-io/cypress/pull/6855).\n*   Upgraded `electron` from `8.1.1` to `8.2.0`. This bumps the bundled Chromium to `80.0.3987.158`. Addressed in [#6855](https://github.com/cypress-io/cypress/pull/6855).\n*   Upgraded `@benmalka/foxdriver` from `0.2.3` to `0.3.0`. Addressed in [#6592](https://github.com/cypress-io/cypress/pull/6592).\n*   Upgraded `@cypress/get-windows-proxy` from `1.6.0` to `1.6.1`. Addressed in [#6823](https://github.com/cypress-io/cypress/pull/6823).\n*   Upgraded `execa` from `1.0.0` to `4.0.0`. Addressed in [#6013](https://github.com/cypress-io/cypress/pull/6013).\n*   Upgraded `extract-zip` from `1.6.7` to `1.7.0`. Addresses [#6845](https://github.com/cypress-io/cypress/issues/6845) in [#6845](https://github.com/cypress-io/cypress/pull/6845).\n*   Upgraded `firefox-profile` from `1.3.0` to `1.3.1`. Addressed in [#6594](https://github.com/cypress-io/cypress/pull/6594).\n*   Upgraded `get-port` from `5.1.0` to `5.1.1`. Addressed in [#6854](https://github.com/cypress-io/cypress/pull/6854).\n*   Upgraded `mime` from `1.6.0` to `2.4.4`. Addressed in [#6764](https://github.com/cypress-io/cypress/pull/6764).\n*   Upgraded `minimist` from `1.2.2` to `1.2.5`. Addressed in [#6747](https://github.com/cypress-io/cypress/pull/6747).\n*   Upgraded `squirrelly` from `7.7.0` to `7.9.2`. Addressed in [#6735](https://github.com/cypress-io/cypress/pull/6735).\n\n## 4.2.0[​](#4-2-0 \"Direct link to 4.2.0\")\n\n_Released 3/16/2020_\n\n**Features:**\n\n*   Videos can now be recorded when running Electron in `--headed` mode. Addresses [#1767](https://github.com/cypress-io/cypress/issues/1767).\n*   [cypress cache list](https://docs.cypress.io/guides/guides/command-line#cypress-cache-list) now prints the last time the cached binary was accessed for each version present. Addresses [#6682](https://github.com/cypress-io/cypress/issues/6682).\n\n**Bugfixes:**\n\n*   We fixed a regression in [3.8.3](#3-8-3) where HTTPS requests could experience slowdown. Fixes [#6659](https://github.com/cypress-io/cypress/issues/6659).\n*   We now detect some installations of Firefox that were previously undetected. Fixes [#6669](https://github.com/cypress-io/cypress/issues/6669).\n*   We fixed a race condition where an asynchronous error could fail to be caught when running the plugins file process. Fixes [#6570](https://github.com/cypress-io/cypress/issues/6570).\n*   We now more thoroughly ensure the parent of an element exists when recursively calling actionability checks in order to prevent some maximum call stack errors. Fixes [#6707](https://github.com/cypress-io/cypress/issues/6707).\n*   Specfiles containing `&` or `%` characters now correctly run instead of erroring. Fixes [#4210](https://github.com/cypress-io/cypress/issues/4210).\n*   We added support for running tests on Jira plugins even when Jira scripts were not minified. Fixes [#1436](https://github.com/cypress-io/cypress/issues/1436).\n*   We fixed a bug causing specs to hang after rerunning tests during `cypress open` when there was an exception if thrown in an `after` hook. Fixes [#6619](https://github.com/cypress-io/cypress/issues/6619).\n*   [cypress verify](https://docs.cypress.io/guides/guides/command-line#cypress-verify) no longer incorrectly prints messaging about this being the first time using that Cypress version. Fixes [#6607](https://github.com/cypress-io/cypress/issues/6607).\n*   Screenshots no longer fail to be taken in Electron when Cypress `DEBUG` logs are enabled. Fixes [#6662](https://github.com/cypress-io/cypress/issues/6662).\n\n**Misc:**\n\n*   A warning is now printed when setting the reserved key `CYPRESS_INTERNAL_ENV` to a non-production value. Addresses [#6436](https://github.com/cypress-io/cypress/issues/6436).\n*   When DEBUG logs are printed from `cypress:launcher`, they now print a clearer log during browser detection for easier reading. Addresses [#6700](https://github.com/cypress-io/cypress/issues/6700).\n*   The Test Runner now renders ANSI colors when there is a syntax error in the spec file. Addresses [#6533](https://github.com/cypress-io/cypress/issues/6533).\n*   The Test Runner now has an icon indicating whether the specs list parent folder is collapsed. Addresses [#6277](https://github.com/cypress-io/cypress/issues/6277).\n*   There's better type information for [.click](https://docs.cypress.io/api/commands/click), [.dblclick](https://docs.cypress.io/api/commands/dblclick), and [.rightclick](https://docs.cypress.io/api/commands/rightclick) command's `position` argument. Addresses [#6341](https://github.com/cypress-io/cypress/issues/6341).\n*   There's a more robust type signature for [.its()](https://docs.cypress.io/api/commands/its) and [.invoke()](https://docs.cypress.io/api/commands/invoke). Addresses [#6431](https://github.com/cypress-io/cypress/issues/6431).\n*   Using [Cypress.dom.isDetached](https://docs.cypress.io/api/cypress-api/dom#Is-detached) no longer throws a type error in TypeScript projects. Addresses [#4408](https://github.com/cypress-io/cypress/issues/4408).\n*   Using [`cy.clearLocalStorage({ log:false })`](https://docs.cypress.io/api/commands/clearlocalstorage) no longer throws a type error in TypeScript projects. Addresses [#6615](https://github.com/cypress-io/cypress/issues/6615).\n*   We added types for [Cypress.sinon](https://docs.cypress.io/api/utilities/sinon). Addresses [#6720](https://github.com/cypress-io/cypress/issues/6720).\n*   We've added the foundational work required to support experimental features in the Test Runner. Addresses [#6257](https://github.com/cypress-io/cypress/issues/6257).\n\n**Dependency Updates**\n\n*   Upgraded Chrome browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `78` to `80`. Addressed in [#6555](https://github.com/cypress-io/cypress/pull/6555).\n*   Upgraded `electron` from `7.1.13` to `8.1.1`. This bumps the bundled Chromium to 80.0.3987.141 and the bundled Node to 12.13.0. Addressed in [#6555](https://github.com/cypress-io/cypress/pull/6555).\n*   Upgraded `@ffmpeg-installer/ffmpeg` from `1.0.19` to `1.0.20`. Addressed in [#6686](https://github.com/cypress-io/cypress/pull/6686).\n*   Upgraded `minimist` from `1.2.0` to `1.2.2`. Addressed in [#6726](https://github.com/cypress-io/cypress/pull/6726).\n*   Replaced deprecated `request` with `cypress-io/request`. Addressed in [#6679](https://github.com/cypress-io/cypress/pull/6679).\n\n## 4.1.0[​](#4-1-0 \"Direct link to 4.1.0\")\n\n_Released 2/28/2020_\n\n**Features:**\n\n*   There is a new `cypress info` command to see the locally detected browsers and other information related to Cypress. Addresses [#4540](https://github.com/cypress-io/cypress/issues/4540).\n*   You can now click a 'Try Again' button to recheck if the server at the designated `baseUrl` is running within the warning message during `cypress open`. Addresses [#3284](https://github.com/cypress-io/cypress/issues/3284).\n*   There are \"collapse all\" and \"expand all\" links in the Test Runner's \"Tests\" tab to collapse or expand all folders within the \"Integration Tests\". Addresses [#6282](https://github.com/cypress-io/cypress/issues/6282).\n*   The plugins file function's [config](https://docs.cypress.io/api/plugins/configuration-api) argument now includes `projectRoot` (absolute path to the root of the project) and `configFile` (absolute path to the configuration file). Addresses [#5941](https://github.com/cypress-io/cypress/issues/5941).\n\n**Bugfixes:**\n\n*   Fixed a regression in [4.0.2](#4-0-2) where Cypress could throw a \"Maximum call stack size exceeded\" error when transmitting a circular object over the internal WebSocket. Fixes [#6582](https://github.com/cypress-io/cypress/issues/6582).\n*   We fixed an issue where using Chromium-family browsers could cause Cypress to throw a \"WebSocket is not open: readyState 3\" error under certain conditions. Fixes [#5685](https://github.com/cypress-io/cypress/issues/5685).\n*   We now more thoroughly ensure the parent of an element exists when recursively calling visibility and existence checks in order to prevent some maximum call stack errors. Fixes [#4373](https://github.com/cypress-io/cypress/issues/4373).\n*   We fixed an issue where a maximum call stack error would throw in some circumstances when `xhr.onreadystatechange` is accessed. Fixes [#5864](https://github.com/cypress-io/cypress/issues/5864).\n*   We fixed a regression in [3.5.0](#3-5-0) where typing into an iframe with a body element with the contenteditable attribute would throw an error. Fixes [#5930](https://github.com/cypress-io/cypress/issues/5930).\n*   We now set the default window size when running Chrome headlessly to 1280x720. Fixes [#6210](https://github.com/cypress-io/cypress/issues/6210).\n*   We fixed an issue where `cypress install` would not complete on Node.js 8.0.0. Fixes [#6512](https://github.com/cypress-io/cypress/issues/6512) and [#6568](https://github.com/cypress-io/cypress/issues/6568).\n*   [cy.clearLocalStorage()](https://docs.cypress.io/api/commands/clearlocalstorage) now properly accepts the `log` option to disable logging. Fixes [#6342](https://github.com/cypress-io/cypress/issues/6342).\n\n**Misc:**\n\n*   The error messages displayed when rerouting to a non same-origin domain has been updated to more accurately reflect the rules around same-origin policy. Addresses [#6048](https://github.com/cypress-io/cypress/issues/6048).\n*   We fixed an error message that would display the wrong available browser families during validation. Addressed in [#6517](https://github.com/cypress-io/cypress/pull/6517).\n*   We fixed some typos in some of our error messages. Addressed in [#6508](https://github.com/cypress-io/cypress/pull/6508).\n*   We're collecting more environment variables when running Cypress with GitLab CI. Addresses [#6231](https://github.com/cypress-io/cypress/issues/6231).\n*   The typing of `cy.$$` has been updated to distinguish differences between it and `Cypress.$`. [More info here](https://docs.cypress.io/api/utilities/$#Cypress-vs-cy) Addresses [#2027](https://github.com/cypress-io/cypress/issues/2027).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#6552](https://github.com/cypress-io/cypress/pull/6552), [#6523](https://github.com/cypress-io/cypress/pull/6523), and [#6545](https://github.com/cypress-io/cypress/pull/6545).\n\n**Dependency Updates**\n\n*   Upgraded `electron` from `7.1.10` to `7.1.13`. Addressed in [#6566](https://github.com/cypress-io/cypress/pull/6566).\n\n## 4.0.2[​](#4-0-2 \"Direct link to 4.0.2\")\n\n_Released 2/14/2020_\n\n**Bugfixes:**\n\n*   We fixed a bug where tests in Firefox would not open on macOS if another instance of Firefox was open. Fixes [#6380](https://github.com/cypress-io/cypress/issues/6380).\n*   We fixed a regression in [4.0.0](#4-0-0) where using `.should('not.contain', ...)` chained after a [.contains()](https://docs.cypress.io/api/commands/contains) would produce unexpected results. Fixes [#6384](https://github.com/cypress-io/cypress/issues/6384).\n*   We fixed a regression in [4.0.0](#4-0-0) where non-top-level `require()`s in tests no longer worked. Fixes [#6403](https://github.com/cypress-io/cypress/issues/6403).\n*   Re-running a failed workflow in GitHub Actions now properly generates a new Dashboard run. Fixes [#6450](https://github.com/cypress-io/cypress/issues/6450).\n\n**Misc:**\n\n*   We fixed incorrect type definitions for [Cypress.isBrowser](https://docs.cypress.io/api/cypress-api/isbrowser). Addresses [#6447](https://github.com/cypress-io/cypress/issues/6447).\n*   We improved the error experience when launching a browser fails. Addresses [#6432](https://github.com/cypress-io/cypress/issues/6432).\n*   We improved the error experience when visiting the Cypress server outside of a Cypress-launched browser. Addresses [#6435](https://github.com/cypress-io/cypress/issues/6435).\n\n**Dependency Updates**\n\n*   Upgraded `@cypress/browserify-preprocessor` from `2.1.1` to `2.1.4`. Addressed in [#6419](https://github.com/cypress-io/cypress/pull/6419).\n\n## 4.0.1[​](#4-0-1 \"Direct link to 4.0.1\")\n\n_Released 2/7/2020_\n\n**Bugfixes:**\n\n*   Fixed a bug where Chromium could not be detected on macOS. Addresses [#6358](https://github.com/cypress-io/cypress/issues/6358).\n*   Fixed bugs where Edge and Firefox Nightly could not be detected on macOS. Addresses [#6354](https://github.com/cypress-io/cypress/issues/6354) and [#6345](https://github.com/cypress-io/cypress/issues/6345).\n*   Fixed a bug where 64-bit editions of Firefox could not be detected on Windows. Addresses [#6355](https://github.com/cypress-io/cypress/issues/6355).\n*   Fixed a bug where video recordings of Firefox would omit all frames from before the last cross-domain navigation of the test. Addresses [#6369](https://github.com/cypress-io/cypress/issues/6369).\n*   Fixed a bug where Cypress could crash with the message \"cannot read property 'on' of undefined\" while running Firefox. Addresses [#6356](https://github.com/cypress-io/cypress/issues/6356).\n*   Corrected a link to the screenshot API documentation in the type definitions. Addresses [#6359](https://github.com/cypress-io/cypress/issues/6359).\n\n**Misc:**\n\n*   Updated the default preferences set on Firefox to hide update notifications and otherwise improve the Firefox experience. Addresses [#6346](https://github.com/cypress-io/cypress/issues/6346).\n\n## 4.0.0[​](#4-0-0 \"Direct link to 4.0.0\")\n\n_Released 2/6/2020_\n\n**Summary:**\n\nCypress 4.0.0 includes support for [Mozilla Firefox](https://www.mozilla.org/firefox/) browsers (beta support) and [Microsoft Edge](https://www.microsoft.com/edge) (Chromium based) browsers which is a big step forward for [Cross Browser Testing](https://docs.cypress.io/guides/guides/cross-browser-testing) in Cypress. We've also updated many of the [underlying tools](https://docs.cypress.io/guides/references/bundled-libraries) behind Cypress that bring new powerful features.\n\n**Breaking Changes:**\n\nPlease read our [Migration Guide](https://docs.cypress.io/guides/references/migration-guide) which explains the changes in more detail and how to change your code to migrate to Cypress 4.0.\\*\\*\n\n*   Mocha, Chai, and Sinon.JS has been upgraded which includes a number of breaking changes and new features. Addresses [#2528](https://github.com/cypress-io/cypress/issues/2528), [#2529](https://github.com/cypress-io/cypress/issues/2529), [#2866](https://github.com/cypress-io/cypress/issues/2866).\n*   During `before:browser:launch`, we no longer yield the second argument as an array of browser arguments and instead yield an `options` object with an `args` property in order to support more advanced browser launch options. Addresses [#6306](https://github.com/cypress-io/cypress/issues/6306).\n*   We updated the [Cypress browser objects](https://docs.cypress.io/api/plugins/browser-launch-api) of all Chromium-based browsers, including Electron, to have `chromium` set as their `family` field. Addresses [#6243](https://github.com/cypress-io/cypress/issues/6243).\n*   The [`--browser` flag](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt) no longer accepts `canary` as its sole argument to run Chrome Canary. You now have to specify `chrome:canary` to use the Chrome Canary browser. Addresses [#6243](https://github.com/cypress-io/cypress/issues/6243).\n*   [.contains()](https://docs.cypress.io/api/commands/contains) now ignores leading, trailing, duplicate whitespaces. Addresses [#92](https://github.com/cypress-io/cypress/issues/92).\n*   [cy.writeFile()](https://docs.cypress.io/api/commands/writefile) now yields `null` instead of the contents written to the file in order to more align with the behavior of `fs`. Addresses [#2466](https://github.com/cypress-io/cypress/issues/2466).\n*   Installing Cypress on your system now requires Node.js 8+. Addresses [#5632](https://github.com/cypress-io/cypress/issues/5632).\n*   Cypress no longer support CJSX. Addresses [#3469](https://github.com/cypress-io/cypress/issues/3469).\n\n**Features:**\n\n*   [Mozilla Firefox](https://www.mozilla.org/firefox/) browsers now have beta support. Addresses [#1096](https://github.com/cypress-io/cypress/issues/1096).\n*   [Microsoft Edge](https://www.microsoft.com/edge) (Chromium based) browsers are now supported. Addresses [#5433](https://github.com/cypress-io/cypress/issues/5433).\n*   There is a new [Cypress.isBrowser()](https://docs.cypress.io/api/cypress-api/isbrowser) utility function. Addresses [#2023](https://github.com/cypress-io/cypress/issues/2023).\n*   We updated the [Cypress.browser](https://docs.cypress.io/api/cypress-api/browser) object with a new `channel` property which contains the release channel of the detected browser. Addresses [#6243](https://github.com/cypress-io/cypress/issues/6243).\n*   There is a new `matchCase` option for [.contains()](https://docs.cypress.io/api/commands/contains). Addresses [#2785](https://github.com/cypress-io/cypress/issues/2785).\n*   Appending `.only` to multiple tests or suites will now run all tests with the `.only` property. Addresses [#2828](https://github.com/cypress-io/cypress/issues/2828).\n*   The [`isFinite` assertion](https://docs.cypress.io/guides/references/assertions) is now supported. Addresses [#5669](https://github.com/cypress-io/cypress/issues/5669).\n*   The `empty` assertion is now supported when used against Map objects. Addresses [#6072](https://github.com/cypress-io/cypress/issues/6072).\n*   The `nested` assertion chainer property is now supported. Addresses [#3080](https://github.com/cypress-io/cypress/issues/3080) and [#5004](https://github.com/cypress-io/cypress/issues/5004).\n\n**Bugfixes:**\n\n*   A test or suite appended with an `.only` when multiple tests or suites contained the same title now run correctly. Fixes [#5345](https://github.com/cypress-io/cypress/issues/5345).\n*   The [.its()](https://docs.cypress.io/api/commands/its) command now properly supports 0 as a value for indexes or object keys. Fixes [#6216](https://github.com/cypress-io/cypress/issues/6216).\n\n**Documentation Changes:**\n\n*   Added [Cross Browser Testing Guide](https://docs.cypress.io/guides/guides/cross-browser-testing) with helpful CI strategies to consider when running tests across multiple browsers.\n*   Added [Cypress.isBrowser()](https://docs.cypress.io/api/cypress-api/isbrowser) doc.\n\n**Misc:**\n\n*   We now pass through errors caused when attempting to read arguments passed through [config](https://docs.cypress.io/api/plugins/configuration-api). Addresses [#6279](https://github.com/cypress-io/cypress/issues/6279).\n*   We fixed a broken 'Learn more' link within the Node.js Version panel of the Test Runner Settings. Addresses [#6237](https://github.com/cypress-io/cypress/issues/6237).\n*   The browser icons in the Test Runner now display as images with the proper branding. Addresses [#6188](https://github.com/cypress-io/cypress/issues/6188).\n*   We updated the styling of browser dropdown in the Test Runner to look more like a button. Addresses [#6298](https://github.com/cypress-io/cypress/issues/6298).\n*   The timer in the Test Runner now always displays at a consistent length. Addresses [#6168](https://github.com/cypress-io/cypress/issues/6168).\n*   You can print debug information about the memory & CPU usage of Cypress, which can be accessed by enabling the [`cypress:server:util:process_profiler` debug stream](https://docs.cypress.io/guides/references/troubleshooting#Log-memory-and-CPU-usage). Addresses [#6169](https://github.com/cypress-io/cypress/issues/6169).\n*   We added types for plugin events. Addresses [#6322](https://github.com/cypress-io/cypress/issues/6322).\n\n**Dependency Updates**\n\n*   Added `@benmalka/foxdriver`. Addressed in [#1359](https://github.com/cypress-io/cypress/pull/1359).\n*   Upgraded `@cypress/browserify-preprocessor` from `1.1.2` to `2.1.1`. Addressed in [#4308](https://github.com/cypress-io/cypress/pull/4308) and [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `bluebird` from `3.5.0` to `3.7.2`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `cachedir` from `1.3.0` to `2.3.0`. Addressed in [#4208](https://github.com/cypress-io/cypress/pull/4208) and [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `chai` from `3.5.0` to `4.2.0`. Addressed in [#2862](https://github.com/cypress-io/cypress/pull/2862) and [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `chai-as-promised` from `6.0.0` to `7.1.1`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `chalk` from `2.4.0` to `3.0.0`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `commander` from `2.15.1` to `4.0.1`. Addressed in [#4208](https://github.com/cypress-io/cypress/pull/4208) and [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `debug` from `2.15.1` to `4.0.1`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `execa` from `0.10.0` to `3.3.0`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Added `firefox-profiler`. Addressed in [#1359](https://github.com/cypress-io/cypress/pull/1359).\n*   Added `foxdriver`. Addressed in [#1359](https://github.com/cypress-io/cypress/pull/1359).\n*   Upgraded `fs-extra` from `5.0.0` to `8.1.0`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `getos` from `3.1.1` to `3.1.4`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `is-ci` from `1.2.1` to `2.0.0`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `mocha` from `2.5.3` to `7.0.1`. Addressed in [#2703](https://github.com/cypress-io/cypress/pull/2703) and [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `listr` from `0.12.0` to `0.14.3`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `log-symbols` from `2.2.0` to `3.0.0`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Added `marionette-client`. Addressed in [#1359](https://github.com/cypress-io/cypress/pull/1359).\n*   Upgraded `ramda` from `0.24.1` to `0.26.1`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `sinon` from `3.2.0` to `8.1.1`. Addressed in [#2881](https://github.com/cypress-io/cypress/pull/2881) and [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `strip-ansi` from `3.0.1` to `6.0.0`. Addressed in [#1359](https://github.com/cypress-io/cypress/pull/1359).\n*   Added `systeminformation`. Addressed in [#1359](https://github.com/cypress-io/cypress/pull/1359).\n*   Upgraded `support-colors` from `5.5.0` to `7.1.0`. Addressed in [#4208](https://github.com/cypress-io/cypress/pull/4208) and [#4226](https://github.com/cypress-io/cypress/pull/4226).\n*   Upgraded `untildify` from `3.0.3` to `4.0.0`. Addressed in [#4226](https://github.com/cypress-io/cypress/pull/4226).\n\n## 3.8.3[​](#3-8-3 \"Direct link to 3.8.3\")\n\n_Released 1/24/2020_\n\n**Bugfixes:**\n\n*   We fixed an error during `cypress run` indicating `could not find CRI target` when Cypress was unable to find the tab to control. Fixes [#6053](https://github.com/cypress-io/cypress/issues/6053).\n*   HTTP requests to sites using a TLS version lower than 1.2 now no longer fail. Fixes [#5446](https://github.com/cypress-io/cypress/issues/5446).\n*   `cypress verify` will no longer error on some systems when `-screen` is not defined. Fixes [#6184](https://github.com/cypress-io/cypress/issues/6184).\n*   We fixed a regression in [3.5.0](#3-5-0) causing [`cy.type({ force: true })`](https://docs.cypress.io/api/commands/type) to no longer forcibly type characters for readonly inputs. Fixes [#6116](https://github.com/cypress-io/cypress/issues/6116).\n*   Generated reports when using [custom reporters](https://docs.cypress.io/guides/tooling/reporters) now have a defined `file` property. Fixes [#1495](https://github.com/cypress-io/cypress/issues/1495).\n\n**Misc:**\n\n*   Messages from [cy.get()](https://docs.cypress.io/api/commands/get) are now truncated at 50 lines the Command Log instead of the 1 line. Addresses [#6145](https://github.com/cypress-io/cypress/issues/6145).\n*   We now collect more environment variables for Bamboo CI when recording for the Dashboard. Addresses [#4895](https://github.com/cypress-io/cypress/issues/4895).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` from `7.1.7` to `7.1.10`. Addressed in [#6180](https://github.com/cypress-io/cypress/pull/6180) and [#6242](https://github.com/cypress-io/cypress/pull/6242).\n*   Upgraded `http-status-codes` from `1.3.2` to `1.4.0`. Addressed in [#6134](https://github.com/cypress-io/cypress/pull/6134).\n*   Upgraded `socket.io` and `socket.io-client` from `2.2.0` to `2.3.0`. Addressed in [#6179](https://github.com/cypress-io/cypress/pull/6179).\n\n## 3.8.2[​](#3-8-2 \"Direct link to 3.8.2\")\n\n_Released 01/10/2020_\n\n**Bugfixes:**\n\n*   We fixed a regression in [3.8.0](#3-8-0) on Linux when `unzip` is not installed where the progress of `cypress install` would show up to 200%. Fixes [#5967](https://github.com/cypress-io/cypress/issues/5967).\n*   We fixed a regression in [3.7.0](#3-7-0) that would prevent [.type()](https://docs.cypress.io/api/commands/type) from typing valid characters after invalid characters were typed in `type=\"number\"` inputs. Fixes [#6055](https://github.com/cypress-io/cypress/issues/6055).\n*   Child elements of an element that uses both `transform` and `height` or `width` are now properly seen as visible during visibility checks. Addresses [#5974](https://github.com/cypress-io/cypress/issues/5974).\n*   We now properly check backface visibility when the parents of a target element have the CSS style `transform-style: preserve-3d`. Fixes [#5682](https://github.com/cypress-io/cypress/issues/5682).\n*   DOM elements with a width or height of 0 and `overflow: hidden` are now properly calculated as invisible during visibility checks. Fixes [#6093](https://github.com/cypress-io/cypress/issues/6093).\n*   [.should()](https://docs.cypress.io/api/commands/should) and [.and()](https://docs.cypress.io/api/commands/and) commands with function arguments can now be chained with multiple assertions without throwing an error. Fixes [#4981](https://github.com/cypress-io/cypress/issues/4981).\n\n**Misc:**\n\n*   We replaced the browser icons in the Test Runner with more official browser brand icons. Addresses [#5921](https://github.com/cypress-io/cypress/issues/5921).\n*   Messages from [cy.log()](https://docs.cypress.io/api/commands/log) are now truncated at 50 lines the Command Log instead of the 1 line. Addresses [#5625](https://github.com/cypress-io/cypress/issues/5625).\n*   We now capture GitLab CI's `CI_JOB_NAME` environment variable. Addressed in [#6111](https://github.com/cypress-io/cypress/pull/6111).\n*   Types for [event emitters](https://docs.cypress.io/api/cypress-api/catalog-of-events#Binding-to-Events) `removeListener` and `removeAllListeners` have been added to `Cypress` and `cy`. Addresses [#5228](https://github.com/cypress-io/cypress/issues/5228).\n*   Types for the `runUrl` property returned from `cypress.run()` has been added. Addresses [#6087](https://github.com/cypress-io/cypress/issues/6087).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#5947](https://github.com/cypress-io/cypress/pull/5947) and [#6075](https://github.com/cypress-io/cypress/pull/6075).\n\n**Dependency Updates:**\n\n*   Upgraded `ansi_up` from `4.0.3` to `4.0.4`. Addressed in [#6074](https://github.com/cypress-io/cypress/pull/6074).\n*   Upgraded `electron` from `7.1.4` to `7.1.7`. Addressed in [#6085](https://github.com/cypress-io/cypress/pull/6085).\n\n## 3.8.1[​](#3-8-1 \"Direct link to 3.8.1\")\n\n_Released 12/26/2019_\n\n**Bugfixes:**\n\n*   We fixed a bug where [cypress run --headless](https://docs.cypress.io/guides/guides/command-line#Options) would not run Chrome-family browsers headlessly. Fixes [#5949](https://github.com/cypress-io/cypress/issues/5949).\n*   We fixed an issue where, on some systems with IPv4 and IPv6 enabled, Cypress would fail to connect to the Chrome DevTools Protocol while launching Chrome, leading to test failures. Fixes [#5912](https://github.com/cypress-io/cypress/issues/5912).\n*   The strict cookie validation added in [3.5.0](#3-5-0) for [cy.setCookie()](https://docs.cypress.io/api/commands/setcookie), [cy.clearCookie()](https://docs.cypress.io/api/commands/clearcookie), and [cy.getCookie()](https://docs.cypress.io/api/commands/getcookie) has been removed. Fixes [#5642](https://github.com/cypress-io/cypress/issues/5642).\n*   We fixed a regression in [3.8.0](#3-8-0) where using [.type()](https://docs.cypress.io/api/commands/type) on number inputs to type non-number characters or the `{enter}` special character would not type the correct value. Fixes [#5968](https://github.com/cypress-io/cypress/issues/5968) and [#5997](https://github.com/cypress-io/cypress/issues/5997).\n*   Configuration values set from the plugins file now display with the correct background color in the Configuration panel in the Test Runner Settings. Fixes [#6024](https://github.com/cypress-io/cypress/issues/6024).\n*   We removed the 'Me' and 'An Organization' selections in the Test Runner when setting up a project to more closely match the Dashboard UI. This also fixes an edge case where a user with no default organizations could potentially be unable to set up a project. Fixes [#5954](https://github.com/cypress-io/cypress/issues/5954).\n\n**Misc:**\n\n*   We updated the fallback error message for visibility checks to be less confusing. Addresses [#5982](https://github.com/cypress-io/cypress/issues/5982).\n*   The type definitions for [cy.location()](https://docs.cypress.io/api/commands/location) have been improved. Addresses [#5574](https://github.com/cypress-io/cypress/issues/5574).\n\n**Dependency Updates:**\n\n*   Upgraded `get-port` from `5.0.0` to `5.1.0`. Addressed in [#6004](https://github.com/cypress-io/cypress/pull/6004).\n*   Upgraded `chrome-remote-interface` from `0.28.0` to `0.28.1`. Addressed in [#6008](https://github.com/cypress-io/cypress/pull/6008).\n*   Upgraded `which` from `1.3.1` to `2.0.2`. Addressed in [#6017](https://github.com/cypress-io/cypress/pull/6017).\n*   Upgraded `ansi_up` from `1.3.0` to `4.0.3`. Addressed in [#4331](https://github.com/cypress-io/cypress/pull/4331).\n*   Upgraded `jimp` from `0.6.4` to `0.9.3`. Addressed in [#4331](https://github.com/cypress-io/cypress/pull/4331).\n\n## 3.8.0[​](#3-8-0 \"Direct link to 3.8.0\")\n\n_Released 12/12/2019_\n\n**Features:**\n\n*   Chrome can now be run in headless mode by using `cypress run --headless --browser chrome`. Addresses [#832](https://github.com/cypress-io/cypress/issues/832).\n*   Cypress now accepts a [\\--tag](https://docs.cypress.io/guides/guides/command-line#cypress-run-tag-lt-tag-gt) argument to be used to identify separate runs. Any tags assigned will be shown on the run in the Cypress Dashboard. Addresses [#2561](https://github.com/cypress-io/cypress/issues/2561).\n*   The commands [.its()](https://docs.cypress.io/api/commands/its) and [.invoke()](https://docs.cypress.io/api/commands/invoke) now accept an `options` object to allow changing logging options. Addresses [#1450](https://github.com/cypress-io/cypress/issues/1450).\n*   Cypress will now attempt to use the `unzip` binary during `cypress install` before trying the slower, Node.js-based unzipping method. Addresses [#3803](https://github.com/cypress-io/cypress/issues/3803).\n\n**Bugfixes:**\n\n*   We fixed a regression in [3.5.0](#3-5-0) where Cypress would crash on Windows when trying to pass a url through `--config` or `--env` command line flags. Fixes [#5466](https://github.com/cypress-io/cypress/issues/5466).\n*   We fixed a regression in [3.5.0](#3-5-0) where a supplied `Cookie` header during [cy.visit()](https://docs.cypress.io/api/commands/visit) or [cy.request()](https://docs.cypress.io/api/commands/request) would be overwritten by the `Cookie` header generated from the browser's cookie store. Fixes [#5894](https://github.com/cypress-io/cypress/issues/5894).\n*   We fixed a regression in [3.5.0](#3-5-0) where [cy.getCookie()](https://docs.cypress.io/api/commands/getcookie) would incorrectly filter cookies by their domain, leading to unexpected results. Fixes [#5656](https://github.com/cypress-io/cypress/issues/5656).\n*   We fixed a regression in [3.5.0](#3-5-0) where calling `.type({ force: true })` on hidden inputs would not type the correct characters. Fixes [#5835](https://github.com/cypress-io/cypress/issues/5835).\n*   We fixed a regression in [3.5.0](#3-5-0) where [.type()](https://docs.cypress.io/api/commands/type) was not respecting previous selections if the current value of the input was the same as the key. This also fixed an where [.type()](https://docs.cypress.io/api/commands/type) would not respect previous selections in non-selectionRange inputs (like email or number inputs). Fixes [#5703](https://github.com/cypress-io/cypress/issues/5703).\n*   During visibility checks, Cypress now properly evaluates a DOM element transformed by `scale(0)` or `rotateY(90deg)` as not visible. Fixes [#723](https://github.com/cypress-io/cypress/issues/723).\n*   Fixed a bug where the specs list during `cypress open` would not refresh when files are changed on disk. Fixes [#5933](https://github.com/cypress-io/cypress/issues/5933).\n*   `env` configuration option displays properly within the settings panel. Previously, setting env options would incorrectly render `\"undefined\"` as the value. Fixes [#5859](https://github.com/cypress-io/cypress/issues/5859).\n\n**Misc:**\n\n*   We removed the max viewport size and lowered min viewport size to `0` for [cy.viewport()](https://docs.cypress.io/api/commands/viewport) Addresses [#5871](https://github.com/cypress-io/cypress/issues/5871) and [#5892](https://github.com/cypress-io/cypress/issues/5892).\n*   The Test Runner now shows a non-Chrome logo for [browsers passed in via `config.browser`](https://docs.cypress.io/guides/guides/launching-browsers#Customize-available-browsers) that are not of the Chrome family. It also supports showing the Firefox logo (in preparation for Firefox browser support). Fixes [#5745](https://github.com/cypress-io/cypress/issues/5745).\n*   We updated the look of some of our icons. Addressed in [#5822](https://github.com/cypress-io/cypress/pull/5822).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#5643](https://github.com/cypress-io/cypress/pull/5643).\n*   `cy.request` will now automatically encode special characters in the request URL, including Unicode. Addresses [#5274](https://github.com/cypress-io/cypress/issues/5274).\n*   You can pass additional Electron launch command line arguments using environment variable `ELECTRON_EXTRA_LAUNCH_ARGS`. Addresses [#5807](https://github.com/cypress-io/cypress/issues/5807).\n\n**Dependency Updates:**\n\n*   Upgraded `electron` from `5.0.10` to `7.1.4`. This bumps the internal Node version to 12.8.1 and the internal Chromium version to 78.0.3904.113. Addressed in [#5849](https://github.com/cypress-io/cypress/pull/5849).\n*   Upgraded `ansi-escapes` from `4.2.1` to `4.3.0`. Addressed in [#5815](https://github.com/cypress-io/cypress/pull/5815).\n*   Upgraded `electron-context-menu` from `0.11.0` to `0.15.1`. Addressed in [#5495](https://github.com/cypress-io/cypress/pull/5495).\n\n## 3.7.0[​](#3-7-0 \"Direct link to 3.7.0\")\n\n_Released 11/27/2019_\n\n**Features:**\n\n*   Cypress now includes the full list of browsers found and their properties within the Cypress configuration. This means that the `browsers` array is also [editable within plugins by accessing `config.browsers`](https://docs.cypress.io/guides/guides/launching-browsers#Customize-available-browsers) via the [Configuration API](https://docs.cypress.io/api/plugins/configuration-api). The currently available browsers are also displayed within the [configuration panel](https://docs.cypress.io/guides/references/configuration#Resolved-Configuration) under Settings in the Test Runner. Addresses [#5067](https://github.com/cypress-io/cypress/issues/5067).\n*   Environment variables within GitHub Actions are now detected and passed to the Dashboard in order to display the proper [git information](https://docs.cypress.io/guides/continuous-integration/introduction#Git-information) for recorded runs. Addresses [#5609](https://github.com/cypress-io/cypress/issues/5609).\n*   [.its()](https://docs.cypress.io/api/commands/its) and [.invoke()](https://docs.cypress.io/api/commands/invoke) now support a Number for its `propertyName` and `functionName` arguments respectively. Addresses [#5754](https://github.com/cypress-io/cypress/issues/5754).\n\n**Bugfixes:**\n\n*   We fixed a regression in [3.5.0](#3-5-0) where a [cy.visit()](https://docs.cypress.io/api/commands/visit) that changes superdomain would incorrectly clear cookies of other domains. Fixes [#5756](https://github.com/cypress-io/cypress/issues/5756).\n*   We fixed a regression in [3.5.0](#3-5-0) where cookies set in a redirect on a [cy.visit()](https://docs.cypress.io/api/commands/visit) or in a `cy.request` with a custom `Domain` that is not a subdomain of the current domain would fail to set. Fixes [#5656](https://github.com/cypress-io/cypress/issues/5656).\n*   We fixed a regression in [3.5.0](#3-5-0) which caused [.type()](https://docs.cypress.io/api/commands/type) to send duplicate modifier keys. Fixes [#5622](https://github.com/cypress-io/cypress/issues/5622).\n*   We fixed a regression in [3.6.1](#3-6-1) where [cy.request()](https://docs.cypress.io/api/commands/request) with `followRedirect: false` would fail if a `Set-Cookie` header was present in the response. Fixes [#5654](https://github.com/cypress-io/cypress/issues/5654).\n*   The context of `window` is no longer `undefined` within the application under test when called within a `setTimeout` during strict mode. Fixes [#5707](https://github.com/cypress-io/cypress/issues/5707).\n*   Cypress now captures the SHA of builds generated through Travis CI during pull requests. This should resolve issues with Cypress status checks sometimes not running within [GitHub Integration](https://docs.cypress.io/guides/cloud/integrations/source-control/github). Fixes [#5728](https://github.com/cypress-io/cypress/issues/5728).\n*   Cypress now automatically strips double quotes from [\\--ci-build-id](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt) and [group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) flag arguments during `cypress run`. Fixes [#5686](https://github.com/cypress-io/cypress/issues/5686).\n*   Assertions printed in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) now correctly identify integers from string integers. Fixes [#25](https://github.com/cypress-io/cypress/issues/25).\n*   Empty spaces are now accurately reflected in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) within assertions. Fixes [#1360](https://github.com/cypress-io/cypress/issues/1360).\n*   Keys printed in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) when using the `have.all.keys` assertion now correctly display. Fixes [#753](https://github.com/cypress-io/cypress/issues/753).\n*   We fixed an issue where Cypress would throw an error when using [cy.visit()](https://docs.cypress.io/api/commands/visit) on a `cleverapp.io` domain. Fixes [#5722](https://github.com/cypress-io/cypress/issues/5722).\n*   Fixed a bug where fixtures consisting only of `null` would cause an error. Fixes [#472](https://github.com/cypress-io/cypress/issues/472).\n*   Fixed a bug where, if the Test Runner child process is killed with a signal and does not exit normally, the npm CLI process would not exit with an error. Fixes [#5808](https://github.com/cypress-io/cypress/issues/5808).\n\n**Misc:**\n\n*   Added a new, more specific error message when an item is not visible because it has `position: fixed` and is being overflowed over. Addresses [#1379](https://github.com/cypress-io/cypress/issues/1379).\n*   `cy.visit`s that cause a superdomain change will now result in 2 requests to the origin server. This should not affect tests, as tests will still re-run on a superdomain change. This is a side-effect of the fix for [#5756](https://github.com/cypress-io/cypress/issues/5756).\n*   The configuration object returned from the plugins file is now validated and will throw a helpful error message when invalid. Addresses [#5712](https://github.com/cypress-io/cypress/issues/5712).\n*   The [configuration panel](https://docs.cypress.io/guides/references/configuration#Resolved-Configuration) under Settings in the Test Runner now has a white background for better readability. Also each configuration option with nested properties is now collapsible. Addressed in [#5068](https://github.com/cypress-io/cypress/pull/5068).\n\n**Documentation Changes:**\n\n*   Updated the [its()](https://docs.cypress.io/api/commands/its) and [invoke()](https://docs.cypress.io/api/commands/invoke) doc to allow for arguments of type Number for their first argument.\n*   Documented [how to pass in a custom list of browsers](https://docs.cypress.io/guides/guides/launching-browsers#Customize-available-browsers) using `config.browsers`.\n\n**Dependency Updates:**\n\n*   Upgraded `parse-domain` from `2.0.0` to `2.3.4`. Addressed in [#5726](https://github.com/cypress-io/cypress/pull/5726).\n\n## 3.6.1[​](#3-6-1 \"Direct link to 3.6.1\")\n\n_Released 11/08/2019_\n\n**Bugfixes:**\n\n*   The Electron browser no longer hangs when testing applications that have a prompt in a `beforeunload` handler. Fixes [#2118](https://github.com/cypress-io/cypress/issues/2118).\n*   We fixed a regression in [3.5.0](#3-5-0) where HTTP redirects could cause strange behavior, including cookies not being set as expected, leading to authentication issues and other problems. Fixes [#5436](https://github.com/cypress-io/cypress/issues/5436) and [#5432](https://github.com/cypress-io/cypress/issues/5432).\n*   When using [cy.setCookie()](https://docs.cypress.io/api/commands/setcookie) with the same `options` Object, Cypress now correctly sets the new cookie instead of the one passed into a previous [cy.setCookie()](https://docs.cypress.io/api/commands/setcookie). Fixes [#2701](https://github.com/cypress-io/cypress/issues/2701).\n*   We fixed a regression in [3.5.0](#3-5-0) where [cy.clearCookie()](https://docs.cypress.io/api/commands/clearcookie) would not act as expected when using certain `baseUrls`. Fixes [#5453](https://github.com/cypress-io/cypress/issues/5453).\n*   Cypress no longer crashes with the error `Failed to parse or set cookie named \"xxx\"` when loading certain websites. Fixes [#4990](https://github.com/cypress-io/cypress/issues/4990).\n*   Cypress now sends the expected headers or request body in a [cy.visit()](https://docs.cypress.io/api/commands/visit) to an HTTPS URL using the default port, 443. Fixes [#5367](https://github.com/cypress-io/cypress/issues/5367).\n*   We fixed a regression in [3.6.0](#3-6-0) where Cypress would crash with `TypeError: Cannot read property 'length' of null` on some network requests. Fixes [#5585](https://github.com/cypress-io/cypress/issues/5585).\n*   We fixed a regression in [3.5.0](#3-5-0) that caused the red target to be rendered incorrectly when specifying offset coordinates to [.click()](https://docs.cypress.io/api/commands/click). Fixes [#5635](https://github.com/cypress-io/cypress/issues/5635).\n*   We fixed a regression in [3.6.0](#3-6-0) that was causing an incorrect element to receive the `click` event during action commands. Fixes [#5578](https://github.com/cypress-io/cypress/issues/5578).\n*   We fixed a regression in [3.5.0](#3-5-0) causing text after using modifier keys in [.type()](https://docs.cypress.io/api/commands/type) to not be typed. Fixes [#5622](https://github.com/cypress-io/cypress/issues/5622).\n*   Elements with `backface-visibility: hidden;` are now accounted for when asserting on the elemtent's visibility. Fixes [#2985](https://github.com/cypress-io/cypress/issues/2985).\n*   We fixed a bug where a failed Cypress commands would incorrectly throw `cannot read property 'replace' of undefined` if the error's stack was `undefined`. Fixes [#1669](https://github.com/cypress-io/cypress/issues/1669).\n*   The 'Log In' modal within Cypress when setting up a project now correctly closes when manually closed. Fixes [#5631](https://github.com/cypress-io/cypress/issues/5631).\n\n**Misc:**\n\n*   We improved the user experience around inspecting events fired during [.click()](https://docs.cypress.io/api/commands/click) and [.type()](https://docs.cypress.io/api/commands/type) commands within the console. Addresses [#5553](https://github.com/cypress-io/cypress/issues/5553).\n*   We increased the timeout when connecting to the \"Developer Tools Protocol\" from 5 seconds to 20 seconds and also added logging for when the connection takes longer than 5 seconds. Addresses [#5610](https://github.com/cypress-io/cypress/issues/5610).\n*   There is no longer a warning about `Promise.defer` appearing in stderr when running with video recording enabled. Addresses [#5611](https://github.com/cypress-io/cypress/issues/5611).\n*   Types for [.rightclick()](https://docs.cypress.io/api/commands/rightclick) and [.dblclick()](https://docs.cypress.io/api/commands/dblclick) have been updated to correctly reflect their accepted options. Addresses [#5617](https://github.com/cypress-io/cypress/issues/5617).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#5556](https://github.com/cypress-io/cypress/pull/5556)\n\n## 3.6.0[​](#3-6-0 \"Direct link to 3.6.0\")\n\n_Released 10/31/2019_\n\n**Features:**\n\n*   [testFiles](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) now also accepts an Array of glob patterns when specifying what test files to load in configuration. Addresses [#5401](https://github.com/cypress-io/cypress/issues/5401).\n\n**Bugfixes:**\n\n*   We fixed a regression in [3.5.0](#3-5-0) where the maximum size of an HTTP header or body in a stubbed `cy.route()` was limited to 8kb causing requests to fail with a 431 HTTP error. Fixes [#5431](https://github.com/cypress-io/cypress/issues/5431).\n*   We fixed a bug where certain types of uncaught errors originating from the application under test would not route through the [uncaught:exception](https://docs.cypress.io/api/cypress-api/catalog-of-events#Uncaught-Exceptions) handler, and thus could not caught and ignored. These errors will also now correctly indicate that they came from application code. Fixes [#987](https://github.com/cypress-io/cypress/issues/987).\n*   We fixed a regression in [3.5.0](#3-5-0) that would throw an error during `cypress verify` when running as a non-root user on a non-Windows machine. We now always set the `--no-sandbox` flag when verifying in Electron, even when running as a non-root user. Fixes [#5434](https://github.com/cypress-io/cypress/issues/5434).\n*   We fixed a regression in [3.5.0](#3-5-0) where sometimes cookies were not set on the correct URL during a redirect inside of a [cy.visit()](https://docs.cypress.io/api/commands/visit) or [cy.request()](https://docs.cypress.io/api/commands/request). Fixes [#5432](https://github.com/cypress-io/cypress/issues/5432).\n*   We fixed a regression in [3.5.0](#3-5-0) causing environment variables containing unicode values to be incorrectly resolved when read via [Cypress.env()](https://docs.cypress.io/api/cypress-api/env). Fixes [#5435](https://github.com/cypress-io/cypress/issues/5435).\n*   We fixed a regression in [3.5.0](#3-5-0) that prevented use of `.click()` or `.type()` inside of an iframe element. Fixes [#5449](https://github.com/cypress-io/cypress/issues/5449). Fixes [#5435](https://github.com/cypress-io/cypress/issues/5435).\n*   We now throw the proper error message when an element cannot be interacted with due to being covered by an element with `position:fixed`. Fixes [#5430](https://github.com/cypress-io/cypress/issues/5430).\n*   We fixed a regression in [3.5.0](#3-5-0) that caused some `click` events to not be sent to the correct elements during `.click()`. Fixes [#5459](https://github.com/cypress-io/cypress/issues/5459).\n*   We updated `.type()` to properly respect focus selection changes during typing. Fixes [#5456](https://github.com/cypress-io/cypress/issues/5456).\n*   We fixed a regression in [3.5.0](#3-5-0) that caused selected text to be overwritten while typing a modifier key during `.type()`. Fixes [#5439](https://github.com/cypress-io/cypress/issues/5439).\n*   We now send all the proper events during `.type()` to input elements with type `date`, `time`, and `datetime-local` so that it now behaves as it did prior to [3.5.0](#3-5-0). Fixes [#5476](https://github.com/cypress-io/cypress/issues/5476).\n*   We now properly render iframe placeholder content when previewing DOM snapshots. Fixes [#5295](https://github.com/cypress-io/cypress/issues/5295).\n\n**Misc:**\n\n*   We no longer log the default option `{multiple: true}` in the Command Log or the console during [cy.dblclick()](https://docs.cypress.io/api/commands/dblclick). Addresses [#5406](https://github.com/cypress-io/cypress/issues/5406).\n*   The text color of inactive tabs within the Cypress Chrome browser has been set to white for better readability. Addresses [#1661](https://github.com/cypress-io/cypress/issues/1661).\n\n**Dependency Updates**\n\n*   Replaced `express-handlebars` with `squirrelly` to reduce dependency size. Addressed in [#5521](https://github.com/cypress-io/cypress/pull/5521).\n*   Upgraded `graceful-fs` from `4.2.0` to `4.2.3`. Addressed in [#5497](https://github.com/cypress-io/cypress/pull/5497).\n\n## 3.5.0[​](#3-5-0 \"Direct link to 3.5.0\")\n\n_Released 10/23/2019_\n\n**Features:**\n\n*   We now record video by default when you run Cypress in Chrome, Chromium, or Canary such as during [cypress run --browser chrome](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt). Addresses [#4608](https://github.com/cypress-io/cypress/issues/4608).\n*   There is a new [.rightclick()](https://docs.cypress.io/api/commands/rightclick) command to right click on DOM elements. Addresses [#53](https://github.com/cypress-io/cypress/issues/53).\n*   Cypress now accepts a [`--config-file` argument](https://docs.cypress.io/guides/guides/command-line#cypress-run-config-file-lt-configuration-file-gt) to specify a different file to be used for Cypress configuration. You can also pass `false` to the `--config-file` to not use any configuration file. Addresses [#1369](https://github.com/cypress-io/cypress/issues/1369).\n*   You can now use your system's Node version by setting the [nodeVersion](https://docs.cypress.io/guides/references/legacy-configuration#Node-version) to `system` in your configuration. This Node version will be used to build files in your [integrationFolder](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) and [supportFile](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) and also be used to execute code in your [pluginsFile](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files). If not set, Cypress will continue to use the Node version bundled with Cypress. Addresses [#4432](https://github.com/cypress-io/cypress/issues/4432).\n*   [.dblclick()](https://docs.cypress.io/api/commands/dblclick) now accepts `position`, `x`, and `y` arguments. Addresses [#116](https://github.com/cypress-io/cypress/issues/116).\n*   [.dblclick()](https://docs.cypress.io/api/commands/dblclick) now accepts `force` and `multiple` in its `options`. Addresses [#116](https://github.com/cypress-io/cypress/issues/116).\n*   [.screenshot()](https://docs.cypress.io/api/commands/screenshot) now accepts a `padding` argument when screenshotting elements that will alter the dimensions of the screenshot of the element. Addresses [#4440](https://github.com/cypress-io/cypress/issues/4440).\n*   [cy.visit()](https://docs.cypress.io/api/commands/visit) now accepts a `qs` option representing an object of query parameters to be used in the URL. Addresses [#5034](https://github.com/cypress-io/cypress/issues/5034).\n*   [cy.viewport()](https://docs.cypress.io/api/commands/viewport) now allows for viewport sizes up to 4,000 pixels. Addresses [#5181](https://github.com/cypress-io/cypress/issues/5181).\n*   [cy.viewport()](https://docs.cypress.io/api/commands/viewport) accepts new size presets for `iphone-xr`, `iphone-x`, `samsung-s10` and `samsung-note9`. Addresses [#4967](https://github.com/cypress-io/cypress/issues/4967).\n*   Passing a `~` to `CYPRESS_CACHE_FOLDER` will automatically resolve to the user's home directory. Addresses [#5386](https://github.com/cypress-io/cypress/issues/5386).\n\n**Bugfixes:**\n\n*   [.dblclick()](https://docs.cypress.io/api/commands/dblclick) and [.click()](https://docs.cypress.io/api/commands/click) now fire all appropriate mouse events including `mouseover`, `mousemove`, `mouseout`, `pointerdown`, `pointerup`, and `pointermove`. Fixes [#1016](https://github.com/cypress-io/cypress/issues/1016), [#1847](https://github.com/cypress-io/cypress/issues/1847), [#2045](https://github.com/cypress-io/cypress/issues/2045), [#2521](https://github.com/cypress-io/cypress/issues/2521), [#2768](https://github.com/cypress-io/cypress/issues/2768), [#2928](https://github.com/cypress-io/cypress/issues/2928), [#2957](https://github.com/cypress-io/cypress/issues/2957), and [#3224](https://github.com/cypress-io/cypress/issues/3224).\n*   We updated [.dblclick()](https://docs.cypress.io/api/commands/dblclick) to follow the same actionability checks as [.click()](https://docs.cypress.io/api/commands/click). Fixes [#3798](https://github.com/cypress-io/cypress/issues/3798).\n*   Coordinates clicked during [.click()](https://docs.cypress.io/api/commands/click) are now correct if the element being clicked is within an iframe. Fixes [#4347](https://github.com/cypress-io/cypress/issues/4347).\n*   We now allow [.type()](https://docs.cypress.io/api/commands/type) to be used on any DOM element. The element will receive all of the type events. Fixes [#2166](https://github.com/cypress-io/cypress/issues/2166) and [#3661](https://github.com/cypress-io/cypress/issues/3661).\n*   If a typeable element gains focus during [.type()](https://docs.cypress.io/api/commands/type), Cypress now continues typing into the newly focused element. Fixes [#2240](https://github.com/cypress-io/cypress/issues/2240).\n*   We now correctly borrow the property getter for `maxLength` when using [`.type()`](https://docs.cypress.io/api/commands/type) on an input. Fixes [#4587](https://github.com/cypress-io/cypress/issues/4587).\n*   We fixed an issue where `datetime-local` inputs would not have their `value` updated during [.type()](https://docs.cypress.io/api/commands/type). Fixes [#2613](https://github.com/cypress-io/cypress/issues/2613).\n*   [.type()](https://docs.cypress.io/api/commands/type) now allows you to type `-` into number inputs with text selection. Fixes [#4767](https://github.com/cypress-io/cypress/issues/4767).\n*   We now fire an `input` event when using [.type()](https://docs.cypress.io/api/commands/type) typing `{enter}` inserts a newline. Fixes [#4870](https://github.com/cypress-io/cypress/issues/4870).\n*   We no longer input text when non-`{shift}` modifier keys are typed in [.type()](https://docs.cypress.io/api/commands/type). Fixes [#5424](https://github.com/cypress-io/cypress/issues/5424).\n*   We now properly send the `code` property during keyboard events triggered during [.type()](https://docs.cypress.io/api/commands/type). Fixes [#3722](https://github.com/cypress-io/cypress/issues/3722)\n*   Cypress now sends `screenX` and `screenY` properties to events triggered using [.trigger()](https://docs.cypress.io/api/commands/trigger). Fixes [#3187](https://github.com/cypress-io/cypress/issues/3187).\n*   We fixed a bug where Cypress could not intercept traffic sent through [cy.visit()](https://docs.cypress.io/api/commands/visit) to IP addresses over HTTPS, leading to `ERR_SSL_VERSION_OR_CIPHER_MISMATCH` errors. Fixes [#771](https://github.com/cypress-io/cypress/issues/771).\n*   We fixed a bug introduced in [3.3.0](https://docs.cypress.io/guides/references/changelog#3-3-0) where some HTTPS sites failed to load during [cy.visit()](https://docs.cypress.io/api/commands/visit) and [cy.request()](https://docs.cypress.io/api/commands/request) with a \"handshake failed\" error. Fixes [#4394](https://github.com/cypress-io/cypress/issues/4394).\n*   We fixed a bug where ECC SSL Certificates were not supported during [cy.visit()](https://docs.cypress.io/api/commands/visit) that was introduced in [3.3.0](https://docs.cypress.io/guides/references/changelog#3-3-0). Fixes [#4368](https://github.com/cypress-io/cypress/issues/4368).\n*   We fixed an issue introduced in [3.4.0](https://docs.cypress.io/guides/references/changelog#3-4-0) that would cause the Selector Playground to not properly highlight the currently hovered element. Fixes [#4872](https://github.com/cypress-io/cypress/issues/4872).\n*   [Cypress.env()](https://docs.cypress.io/api/cypress-api/env) now escapes `<script>` tags in the configuration file. Fixes [#4952](https://github.com/cypress-io/cypress/issues/4952).\n*   Cypress now properly handles converting responses of `content-type` `application/vnd.api+json` to JSON. Fixes [#5165](https://github.com/cypress-io/cypress/issues/5165).\n*   XHR responses in `cy.route()` that exceed 80kb in size no longer fail with an `ERR_EMPTY_RESPONSE` error. Fixes [#76](https://github.com/cypress-io/cypress/issues/76).\n*   Cypress no longer crashes with `dest.end` errors on Windows machines. Fixes [#2181](https://github.com/cypress-io/cypress/issues/2181).\n*   The `onFocus` event no longer incorrectly fires on hidden elements. This fixes an issue introduced in [3.3.2](https://docs.cypress.io/guides/references/changelog#3-3-2). Fixes [#4898](https://github.com/cypress-io/cypress/issues/4898).\n*   You can now call [.click()](https://docs.cypress.io/api/commands/click) on inputs or textareas that are `readonly`. This fixes an issue introduced in [3.4.1](https://docs.cypress.io/guides/references/changelog#3-4-1). Fixes [#4874](https://github.com/cypress-io/cypress/issues/4874).\n*   Cypress no longer crashes with a `\"port\" option should be a number or string` error when receiving an erroneous HTTP CONNECT. Fixes [#3250](https://github.com/cypress-io/cypress/issues/3250).\n*   Cypress tests now timeout if there are no Cypress commands enqueue and the `done()` callback is not called within the `commandTimeout`. Fixes [#1075](https://github.com/cypress-io/cypress/issues/1075), [#2478](https://github.com/cypress-io/cypress/issues/2478), [#3349](https://github.com/cypress-io/cypress/issues/3349), and [#4790](https://github.com/cypress-io/cypress/issues/4790).\n*   We fixed a bug where Cypress would exit with an `ENOTCONN` error at the end of a test run when using Node >12.11.0 on Windows OS. Fixes [#5241](https://github.com/cypress-io/cypress/issues/5241).\n*   We fixed a bug where the Chrome policy warnings introduced in [3.4.0](https://docs.cypress.io/guides/references/changelog#3-4-0) would not appear. Fixes [#4986](https://github.com/cypress-io/cypress/issues/4986).\n*   We improved the way that cookies are handled for Chrome browsers. This fixes an issue when parsing cookies that were set with a domain beginning with a `.` in Chrome 77. Fixes [#5142](https://github.com/cypress-io/cypress/issues/5142) and [#5206](https://github.com/cypress-io/cypress/issues/5206).\n*   We fixed a bug when visiting an application that does an HTTP request to a `.js` file containing Unicode transferred using `Content-Encoding: gzip` that could cause the JavaScript file to become corrupted. Fixes [#1746](https://github.com/cypress-io/cypress/issues/1746).\n*   We now normalize the Cypress cache folder to resolve in the current folder and not with respect to the `node_modules/cypress` folder. Fixes [#2364](https://github.com/cypress-io/cypress/issues/2364).\n\n**Misc:**\n\n*   Cypress now displays a more precise error message when checking an element's visibility if an element is detached from the DOM. Addresses [#4946](https://github.com/cypress-io/cypress/issues/4946).\n*   We increased the timeout to wait for Xvfb to start from 5 seconds to 30 seconds. This should resolve some issues where the error `Could not start Xvfb` was being thrown because Xvfb could not start within the allowed time. Addresses [#5110](https://github.com/cypress-io/cypress/issues/5110).\n*   We now warn when using `cypress run` from the binary directly (not from an npm module) since this is not its intended use. Addresses [#1573](https://github.com/cypress-io/cypress/issues/1573).\n*   We now warn on [`cy.visit('file://...)`](https://docs.cypress.io/api/commands/visit) to explain that this url format is not supported and suggest visiting a relative HTML file. Addresses [#4452](https://github.com/cypress-io/cypress/issues/4452).\n*   Setting the reserved `CYPRESS_ENV` environment variable will now throw an error. Addresses [#1621](https://github.com/cypress-io/cypress/issues/1621).\n*   We now throw a better error when passing in an Object to the [browser](https://docs.cypress.io/api/plugins/browser-launch-api) argument of the Browser Launch API explaining that a String is expected instead. Addresses [#4966](https://github.com/cypress-io/cypress/issues/4966).\n*   An error will now be thrown if an invalid `name` or `value` is supplied to [cy.setCookie()](https://docs.cypress.io/api/commands/setcookie), matching the RFC 6265 compliant validation of cookie names and values. Addresses [#5206](https://github.com/cypress-io/cypress/issues/5206).\n*   Passing an invalid type to the 2nd argument of [cy.get()](https://docs.cypress.io/api/commands/get) now throws an error explaining that an `options` Object is expected. Addresses [#2953](https://github.com/cypress-io/cypress/issues/2953).\n*   We now throw a more helpful error message during [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) that would result in a screenshot with 0 width or height. Addresses [#5149](https://github.com/cypress-io/cypress/issues/5149).\n*   Stdout printed during `cypress run` no longer truncates text such a filenames and instead wraps the text to fit within the width of the terminal. Addresses [#4977](https://github.com/cypress-io/cypress/issues/4977).\n*   We now display up to 2,000 characters of HTTP property values within error messages during [cy.request()](https://docs.cypress.io/api/commands/request) errors. Addresses [#3145](https://github.com/cypress-io/cypress/issues/3145).\n*   Cypress now always considers `localhost` to be in `NO_PROXY`. To make Cypress send traffic for `localhost` through the proxy, you will now have to pass `<-loopback>` in `NO_PROXY`. Addresses [#4780](https://github.com/cypress-io/cypress/issues/4780).\n*   We changed the way cookies are set in [cy.visit()](https://docs.cypress.io/api/commands/visit) to more closely match the browser's behavior when setting cookies, particularly when using `fetch` with cookies. Addresses [#4433](https://github.com/cypress-io/cypress/issues/4433).\n*   We've added more flags to send to Chrome upon launch that should help with issues encountered during browser automation including `--disable-backgrounding-occluded-window`, `--disable-breakpad`, `--disable-ipc-flooding-protection`, `--password-store=basic`, and `--use-mock-keychain`. Addresses [#5132](https://github.com/cypress-io/cypress/issues/5132) and [#3633](https://github.com/cypress-io/cypress/issues/3633).\n*   Scrolling the specs list now only scrolls the list of spec files and no longer scrolls the search and filter bar. Addresses [#4904](https://github.com/cypress-io/cypress/issues/4904).\n*   We fixed some layout issues within the Test Runner that were introduced in [3.4.1](https://docs.cypress.io/guides/references/changelog#3-4-1). Addresses [#4888](https://github.com/cypress-io/cypress/issues/4888), [#4912](https://github.com/cypress-io/cypress/issues/4912), and [#4959](https://github.com/cypress-io/cypress/issues/4959).\n*   The counter badge for spies and stubs no longer appears visually cut off. Fixes [#4822](https://github.com/cypress-io/cypress/issues/4822).\n*   TypeScript 3.6.2 no longer errors due to outdated jQuery types. Addresses [#5065](https://github.com/cypress-io/cypress/issues/5065).\n*   We updated types for [Cypress.Commands.overwrite()](https://docs.cypress.io/api/cypress-api/custom-commands) to not allow an `options` object as an argument. Addresses [#5341](https://github.com/cypress-io/cypress/issues/5341).\n*   We added `failures` and `message` types when a run fails using the [Module API](https://docs.cypress.io/guides/guides/module-api). Addresses [#5335](https://github.com/cypress-io/cypress/issues/5335).\n*   We're continuing to make progress in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#4869](https://github.com/cypress-io/cypress/pull/4869), [#4906](https://github.com/cypress-io/cypress/pull/4906), [#5096](https://github.com/cypress-io/cypress/pull/5096), [#5107](https://github.com/cypress-io/cypress/pull/5107), [#5156](https://github.com/cypress-io/cypress/pull/5156), [#5173](https://github.com/cypress-io/cypress/pull/5173), and [#5352](https://github.com/cypress-io/cypress/pull/5352).\n\n**Documentation Changes:**\n\n*   Added a [.rightclick()](https://docs.cypress.io/api/commands/rightclick) doc.\n*   Added a [Webinars](https://docs.cypress.io/examples/media/webinars-media) doc containing videos of all of the official Cypress webcasts.\n*   Updated the [.dblclick()](https://docs.cypress.io/api/commands/dblclick) doc to include new `position`, `x`, and `y` arguments plus `force` and `multiple` options.\n*   Added the `--config-file` argument to [Command Line](https://docs.cypress.io/guides/guides/command-line) and [Module API](https://docs.cypress.io/guides/guides/module-api) doc.\n*   Added the `nodeVersion` argument to [Configuration](https://docs.cypress.io/guides/references/configuration) doc and mentioned its uses in the [Plugins Guide](https://docs.cypress.io/guides/tooling/plugins-guide) and [Writing a Plugin](https://docs.cypress.io/api/plugins/writing-a-plugin) doc.\n*   Updated all docs to mention 'configuration file' instead of static `cypress.json` file since this is not configurable via a `--config-file` argument.\n*   Added `qs` option to [cy.visit()](https://docs.cypress.io/api/commands/visit#Arguments) with examples.\n*   Added `padding` option to [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) with examples.\n*   Updated the [cy.viewport()](https://docs.cypress.io/api/commands/viewport) doc to have a max viewport size of `4000`.\n*   Added newly supported viewport sizes to the [cy.viewport()](https://docs.cypress.io/api/commands/viewport) doc.\n*   Documented new keyboard shortcuts in the [Cypress App](https://docs.cypress.io/guides/core-concepts/cypress-app) doc.\n*   Added a new section on troubleshooting problems with Xvfb to the [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction#Xvfb) doc.\n*   Added a section to our Debugging doc about our `cypress-fiddle` plugin used for playing around with small test cases.\n*   Added a section to our [Debugging](https://docs.cypress.io/guides/references/troubleshooting#Patch-Cypress) doc explaining how to patch an installed version of Cypress.\n*   Mention not needing to decode portions of the `url` in the `cy.route()` doc.\n*   Mention that the `file://` prefix is not supported in the [cy.visit()](https://docs.cypress.io/api/commands/visit) doc.\n*   Add a note about when passing `<-loopback>` in `NO_PROXY` is necessary in the Proxy Configuration doc.\n*   Updated our Dashboard docs to include screenshots containing our new Dashboard navigation design.\n*   We have some newly translated documentation in Portuguese. If you'd like to help in translating more, please open a pull request in our [documentation repo](https://github.com/cypress-io/cypress-documentation).\n\n**Dependency Updates**\n\n*   Upgraded Chrome browser version used during `cypress run` and when selecting Electron browser in `cypress open` from `61` to `73`. Addressed in [#4720](https://github.com/cypress-io/cypress/pull/4720).\n*   Upgraded `electron` from `2.0.18` to `5.0.10`. Addressed in [#4720](https://github.com/cypress-io/cypress/pull/4720).\n*   Upgraded `node` from `8.9.3` to `12.0.0`. Addressed in [#4720](https://github.com/cypress-io/cypress/pull/4720).\n*   Upgraded `jquery` from `2.2.4` to `3.1.1`. Addressed in [#1229](https://github.com/cypress-io/cypress/pull/1229).\n*   Upgraded `sanitize-filename` from `1.6.1` to `1.6.3`. Addressed in [#5216](https://github.com/cypress-io/cypress/pull/5216).\n*   Upgraded `@cypress/get-windows-proxy` from `1.5.4` to `1.6.0`. Addressed in [#5108](https://github.com/cypress-io/cypress/pull/5108).\n\n## 3.4.1[​](#3-4-1 \"Direct link to 3.4.1\")\n\n_Released 7/29/2019_\n\n**Dashboard Features:**\n\n*   We’re excited to announce [GitHub integration](https://docs.cypress.io/guides/cloud/integrations/source-control/github) for the [Cypress Dashboard](https://on.cypress.io/dashboard). You can now get timely and useful test run information within pull-requests via status checks and pull-request comments. Learn all about it on [our blog](https://www.cypress.io/blog/2019/07/29/github-integration-for-the-cypress-dashboard/). Addresses [#981](https://github.com/cypress-io/cypress/issues/981).\n\n**Bugfixes:**\n\n*   Fixed a bug where the content of pages using non-UTF-8 character encoding would become corrupted when opened in Cypress. Fixes [#3479](https://github.com/cypress-io/cypress/issues/3479), [#1543](https://github.com/cypress-io/cypress/issues/1543), and [#3650](https://github.com/cypress-io/cypress/issues/3650).\n*   Fixed a regression introduced in [3.4.0](https://docs.cypress.io/guides/references/changelog#3-4-0) that caused an error to be thrown when chaining together multiple assertions using the `and` chainable getter. Fixes [#4833](https://github.com/cypress-io/cypress/issues/4833).\n*   The `include` and `includes` assertion chainers now correctly work the same as `contain` and `contains` assertion chainers. Fixes [#4833](https://github.com/cypress-io/cypress/issues/4833).\n*   Cypress now correctly works offline on Windows when visiting a localhost URL. Fixes [#4763](https://github.com/cypress-io/cypress/issues/4763).\n*   [cy.type()](https://docs.cypress.io/api/commands/type) now factors in the `readonly` property of `<input />` elements, and will wait for this property to be `false` before attempting to type. Fixes [#1246](https://github.com/cypress-io/cypress/issues/1246).\n*   Variables beginning with `top` and `location` in your application code are no longer modified when `modifyObstructiveCode` is `true`. Fixes [#4794](https://github.com/cypress-io/cypress/issues/4794).\n*   We removed erroneous socket connections when the browser is initially launching. Fixes [#4776](https://github.com/cypress-io/cypress/issues/4776).\n*   Fixed a bug when dismissing pinned snapshots that would cause the page to be wiped with nothing rendered. Fixes [#4864](https://github.com/cypress-io/cypress/issues/4864).\n*   We upgraded the `mocha-teamcity-reporter` dependency so that it no longer errors in certain situations when trying to access duration on tests. Fixes [#4654](https://github.com/cypress-io/cypress/issues/4654).\n*   We upgraded the `lodash` dependency to fix a security vulnerability warning. Fixes [#4699](https://github.com/cypress-io/cypress/issues/4699), [#4730](https://github.com/cypress-io/cypress/issues/4730), [#4743](https://github.com/cypress-io/cypress/issues/4743).\n\n**Misc:**\n\n*   We now ensure we are shipping with production versions of dependencies such as `react`, `mobx`, etc. This should help to prevent conflicts with Developer Tools extensions and increase performance by reducing memory, heap allocation, and overall JS bundle size. Addresses [#4844](https://github.com/cypress-io/cypress/issues/4844).\n*   Video recordings now wait after all tests finish to ensure that the video captures the final rendered frames of the browser. This prevents the last few paints from being cut off. Fixes [#2370](https://github.com/cypress-io/cypress/issues/2370).\n*   Cypress now looks for any npm proxy configuration values as a fallback when no other system proxy configuration is found. This brings this feature into parity with how npm reads off proxy configuration values during an `npm install`. Addresses [#4719](https://github.com/cypress-io/cypress/issues/4719).\n*   We updated the messaging when there is a failure downloading Cypress to recommend checking your proxy settings. Addresses [#1662](https://github.com/cypress-io/cypress/issues/1662).\n*   A warning message now displays if you attempt to run the Cypress binary directly instead of going through the cypress `npm` package. Addresses [#1573](https://github.com/cypress-io/cypress/issues/1573).\n*   There are newly added examples in the TypeScript definitions for [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands), [cy.location()](https://docs.cypress.io/api/commands/location) and [.should()](https://docs.cypress.io/api/commands/should). Addresses [#3684](https://github.com/cypress-io/cypress/issues/3684) and [#4715](https://github.com/cypress-io/cypress/issues/4715).\n*   The types for the [`cy.contains(content, options)`](https://docs.cypress.io/api/commands/contains) syntax have been added. Addresses [#4727](https://github.com/cypress-io/cypress/issues/4727).\n*   Types for `cy.once()` have been added. Addressed in [#4788](https://github.com/cypress-io/cypress/pull/4788).\n*   There is now a `{ parseSpecialCharSequences: false }` option to [cy.type()](https://docs.cypress.io/api/commands/type) that disables parsing the special character sequences found between the `{}` characters. This will now type what you've provided literally without any special parsing. Fixes [#4287](https://github.com/cypress-io/cypress/issues/4287).\n*   You can now zoom in the main Test Runner window and also the Electron browser. Corresponding keyboard shortcuts for Zoom in, Zoom out and Actual Size are also available. Addresses [#1231](https://github.com/cypress-io/cypress/issues/1231).\n*   When viewing the Test Runner's main window at its smallest size, the header text no longer incorrectly wraps. Addresses [#86](https://github.com/cypress-io/cypress/issues/86).\n*   We're continuing to make process in converting our codebase from CoffeeScript to JavaScript. Addresses [#2690](https://github.com/cypress-io/cypress/issues/2690) in [#4781](https://github.com/cypress-io/cypress/pull/4781) and [#4817](https://github.com/cypress-io/cypress/pull/4817).\n*   We increased the cypress binary verification phase from 10 seconds to 30 seconds to accommodate underpowered or overwhelmed machines typically found in CI environments. Addresses [#4624](https://github.com/cypress-io/cypress/issues/4624).\n\n**Documentation Changes:**\n\n*   We have new instructions on how to set up [GitHub Integration](https://docs.cypress.io/guides/cloud/integrations/source-control/github) with the Cypress Dashboard.\n*   Updated instructions for adding types for custom commands in the [TypeScript Support](https://docs.cypress.io/guides/tooling/typescript-support#Types-for-Custom-Commands) doc. Addressed in [#1901](https://github.com/cypress-io/cypress-documentation/pull/1901)\n*   Added a section about video encoding and how to speed up the encoding time to [Screenshots and Videos](https://docs.cypress.io/guides/guides/screenshots-and-videos#Video-encoding) doc. Addressed in [#1880](https://github.com/cypress-io/cypress-documentation/pull/1880)\n\n**Dependency Updates**\n\n*   Upgraded `@ffmpeg-installer/ffmpeg` from `1.0.17` to `1.0.19`. Addressed in [#4792](https://github.com/cypress-io/cypress/pull/4792).\n*   Upgraded `browserify` from `13.3.0` to `16.3.0`. Addressed in [#4751](https://github.com/cypress-io/cypress/pull/4751), [#4825](https://github.com/cypress-io/cypress/pull/4825) and [#4826](https://github.com/cypress-io/cypress/pull/4826).\n*   Upgraded `data-uri-to-buffer` from `1.2.0` to `2.0.1`. Addressed in [#4622](https://github.com/cypress-io/cypress/pull/4622).\n*   Upgraded `duplexify` from `4.0.0` to `4.1.1`. Addressed in [#4853](https://github.com/cypress-io/cypress/pull/4853).\n*   Upgraded `graceful-fs` from `4.1.15` to `4.2.0`. Addressed in [#4818](https://github.com/cypress-io/cypress/pull/4818).\n*   Upgraded `lodash` from `4.17.11` to `4.17.15`. Addressed in [#4684](https://github.com/cypress-io/cypress/pull/4684), [#4709](https://github.com/cypress-io/cypress/pull/4709), [#4784](https://github.com/cypress-io/cypress/pull/4784).\n*   Upgraded `mocha-junit-reporter` from `1.23.0` to `1.23.1`. Addressed in [#4785](https://github.com/cypress-io/cypress/pull/4785).\n*   Upgraded `p-queue` from `1.2.0` to `6.1.0`. Addressed in [#4750](https://github.com/cypress-io/cypress/pull/4750).\n*   Upgraded `semver` from `6.0.0` to `6.3.0`. Addressed in [#4797](https://github.com/cypress-io/cypress/pull/4797).\n*   We also updated and removed some dependencies used for development.\n\n## 3.4.0[​](#3-4-0 \"Direct link to 3.4.0\")\n\n_Released 7/9/2019_\n\n**Features:**\n\n*   Users can now log in to the Test Runner through the browser installed on their system. This also allows for login via GitHub with U2F keys. Addresses [#3583](https://github.com/cypress-io/cypress/issues/3583), [#4337](https://github.com/cypress-io/cypress/issues/4337), and [#1162](https://github.com/cypress-io/cypress/issues/1162).\n*   Google or SSO (if configured) login is now supported in the Test Runner. Addresses [#3519](https://github.com/cypress-io/cypress/issues/3519).\n\n**Bugfixes:**\n\n*   Cypress now properly supports partial matching of string values for assertions `contain.text`, `contain.html`, and `contain.value`. Fixes [#1969](https://github.com/cypress-io/cypress/issues/1969).\n*   A form is now properly submitted when using `.type('{enter}')` on a form containing no buttons and only one input that allows implicit submission. Fixes [#4495](https://github.com/cypress-io/cypress/issues/4495).\n*   Extra whitespace and quotations are now stripped from the `CYPRESS_INSTALL_BINARY` environment variable to help prevent some unexpected results when set in Windows. Fixes [#4506](https://github.com/cypress-io/cypress/issues/4506).\n*   Electron rendering warnings are no longer printed to console output. Fixes [#4288](https://github.com/cypress-io/cypress/issues/4288).\n\n**Misc:**\n\n*   We now expose a downloadable binary for each commit made into the [develop branch](https://github.com/cypress-io/cypress/commits/develop) of the [cypress](https://github.com/cypress-io/cypress) repository so that pre-released versions can be installed. See [this commit](https://github.com/cypress-io/cypress/commit/52ca8ed8399c5ef467efbee7a2d00fe0863e7f36#commitcomment-34237047) for an example. Addresses [#4525](https://github.com/cypress-io/cypress/issues/4525).\n*   There are now a series of checks that are run during download of Cypress to verify that the zip file downloaded is the correct file. Addresses [#812](https://github.com/cypress-io/cypress/issues/812) and [#3515](https://github.com/cypress-io/cypress/issues/3515).\n*   A warning now displays for Windows' users who have Group Policy settings that may interfere with usage of Cypress. Addresses [#4391](https://github.com/cypress-io/cypress/issues/4391).\n*   There's a new warning when mouse interactions fail displaying that it failed due to the element having CSS `pointer-events: none`. Addresses [#3164](https://github.com/cypress-io/cypress/issues/3164).\n*   If a URL is passed to `cy.route()` containing percent-encoded characters, we now display a warning explaining that `cy.route()` expects a decoded URL. Addresses [#2372](https://github.com/cypress-io/cypress/issues/2372).\n*   Environment variables for Semaphore 2.0 are now captured when recording tests to the Dashboard. Fixes [#4671](https://github.com/cypress-io/cypress/issues/4671).\n*   We now capture environment variables set from Concourse CI when recording tests to the Dashboard. Fixes [#4376](https://github.com/cypress-io/cypress/issues/4376).\n*   We replaced capturing environment variables from SnapCI (which is no longer available) to instead capture ones set from GoCD when recording tests to the Dashboard. Fixes [#2680](https://github.com/cypress-io/cypress/issues/2680).\n*   The [JSON schema file](https://on.cypress.io/cypress.schema.json) used for [intelligent code completion](https://docs.cypress.io/guides/tooling/IDE-integration#Intelligent-Code-Completion) for the Cypress configuration file has been updated to match our documentation.\n\n**Documentation Changes:**\n\n*   New error message added about policy settings to our [Error Messages](https://docs.cypress.io/guides/references/error-messages) doc. Addressed in [#1567](https://github.com/cypress-io/cypress-documentation/pull/1754).\n*   [Real World](https://docs.cypress.io/examples/applications#Realworld) example tests were added to Example Applications doc. Addressed in [#1567](https://github.com/cypress-io/cypress-documentation/pull/1836).\n*   More content was added to our [Code Coverage](https://docs.cypress.io/guides/tooling/code-coverage) doc.\n\n**Dependency Updates**\n\n*   Removed `string-to-stream` since it was no longer being used. Addressed in [#4619](https://github.com/cypress-io/cypress/pull/4619).\n*   Upgraded `@cypress/commit-info` from `2.1.3` to `2.1.4`. Addressed in [#4597](https://github.com/cypress-io/cypress/pull/4597).\n*   Upgraded `@cypress/react-tooltip` from `0.4.0` to `0.5.0`. Addressed in [#4610](https://github.com/cypress-io/cypress/pull/4610).\n*   Upgraded `errorhandler` from `1.5.0` to `1.5.1`. Addressed in [#4618](https://github.com/cypress-io/cypress/pull/4618).\n*   Upgraded `fs-extra` from `8.0.1` to `8.1.0`. Addressed in [#4620](https://github.com/cypress-io/cypress/pull/4620).\n*   Upgraded `request-progress` from `0.4.0` to `3.0.0`. Addressed in [#4584](https://github.com/cypress-io/cypress/pull/4584).\n*   We also updated and removed some dependencies used for development.\n\n## 3.3.2[​](#3-3-2 \"Direct link to 3.3.2\")\n\n_Released 6/27/2019_\n\n**Performance Improvements:**\n\n*   We fixed a regression introduced in [3.3.0](https://docs.cypress.io/guides/references/changelog#3-3-0) that was causing the Test Runner to do extremely unnecessary re-renders of the Command Log on any command change - leading to exponential performance degradation on any run. This was the root cause behind many users experiencing a reduction in performance when upgrading to `3.3.0` or above. Fixes [#4411](https://github.com/cypress-io/cypress/issues/4411) and [#4313](https://github.com/cypress-io/cypress/issues/4313).\n*   We reduced memory consumption and improved the performance of running tests anytime you're inside of `cypress open`. Fixes [#2366](https://github.com/cypress-io/cypress/issues/2366).\n*   We no longer delay proxied responses with no body with status codes 1xx, 204, 304. This fixes a regression introduced in [3.2.0](https://docs.cypress.io/guides/references/changelog#3-2-0) where responses with these status codes were delayed when using a proxy. Fixes [#4298](https://github.com/cypress-io/cypress/issues/4298).\n*   Snapshots were previously being mistakenly stored then instantly deleted when `numTestsKeptInMemory` was set to 0. We now no longer record the snapshots at all when `numTestsKeptInMemory` is set to 0. This should slightly improve the performance of running tests with this setting. Fixes [#4104](https://github.com/cypress-io/cypress/issues/4104) and [#4164](https://github.com/cypress-io/cypress/issues/4164).\n\n**Bugfixes:**\n\n*   Cypress no longer watches files when run using `cypress run`. This will fix some runs that were crashing with an `ENOSPC` error. Fixes [#4283](https://github.com/cypress-io/cypress/issues/4283).\n*   Cypress now correctly handles `blur` and `focus` events in situations where the browser has lost focus. Fixes [#4039](https://github.com/cypress-io/cypress/issues/4039), [#1176](https://github.com/cypress-io/cypress/issues/1176), and [#1486](https://github.com/cypress-io/cypress/issues/1486).\n*   If the DOM element provided to [.type()](https://docs.cypress.io/api/commands/type) is already in focus, Cypress no longer attempts to click on the DOM element. This allows you to call `.focus()` on elements that are focusable, but not necessarily clickable and type into them using `.type()`. Fixes [#3001](https://github.com/cypress-io/cypress/issues/3001) and [#4420](https://github.com/cypress-io/cypress/issues/4420).\n*   Some elements inside of a parent with CSS `overflow: hidden` that flow outside of its parent are now properly considered hidden. [#4161](https://github.com/cypress-io/cypress/issues/4161)\n*   Elements that are inside a parent with CSS `position: absolute` which is itself inside of a parent element with `overflow: hidden` are now properly considered visible. Fixes [#4395](https://github.com/cypress-io/cypress/issues/4395) and [#755](https://github.com/cypress-io/cypress/issues/755).\n*   `<option>` and `<optgroup>` elements are now properly considered visible if it is contained within a visible `<select>`. Fixes [#4473](https://github.com/cypress-io/cypress/issues/4473).\n*   `<body>` and `<html>` elements are now properly always considered visible. Fixes [#4475](https://github.com/cypress-io/cypress/issues/4475).\n*   `<td>` and `<tr>` elements with CSS `visibility: collapse` are now properly considered hidden. Fixes [#4476](https://github.com/cypress-io/cypress/issues/4476).\n*   We now correctly handle form submission when using `.type('{enter}')` on a form containing a button of type `reset`. Fixes [#3909](https://github.com/cypress-io/cypress/issues/3909).\n*   If a site's `content-type` is `null`, `undefined` or cannot be determined during [`cy.visit()`](https://docs.cypress.io/api/commands/visit), we now look at the content of the site and evaluate whether it looks like HTML. If it does look like HTML we no longer error and continue as if it the site's `content-type` is `text/html`. [#1727](https://github.com/cypress-io/cypress/issues/1727) [#773](https://github.com/cypress-io/cypress/issues/773) [#3101](https://github.com/cypress-io/cypress/issues/3101).\n*   Previously Cypress would send the `auth` header to any URLs that match the CORS origin of the original `auth` header. We now correctly only send the `auth` headers when there is an exact match on the [protection space](https://tools.ietf.org/html/rfc7235#section-2.2). Fixes [#4267](https://github.com/cypress-io/cypress/issues/4267).\n*   Requests that go through [cy.visit()](https://docs.cypress.io/api/commands/visit) or [cy.request()](https://docs.cypress.io/api/commands/request) are now automatically retried on `ENOTFOUND` errors. Fixes [#4424](https://github.com/cypress-io/cypress/issues/4424) and [#1755](https://github.com/cypress-io/cypress/issues/1755).\n*   Cypress now errors when the `body` parameter passed to [cy.request()](https://docs.cypress.io/api/commands/request) contains a circular reference. Fixed in [#4407](https://github.com/cypress-io/cypress/pull/4407).\n*   We fixed an issue where the `ignoreTestFiles` configuration was being filtered out when passed via a command line flag, so in effect being ignored. Fixes [#1696](https://github.com/cypress-io/cypress/issues/1696).\n*   Setting `NO_PROXY` is now respected for HTTPS urls, as it should be. Fixes [#4303](https://github.com/cypress-io/cypress/issues/4303).\n*   When running tests with non-string test titles, the screenshots now automatically stringify the test titles instead of throwing an error. Fixes [#4310](https://github.com/cypress-io/cypress/issues/4310).\n*   Cypress no longer incorrectly errors when calling `cy.window().screenshot()`, `cy.window().scrollTo()` or `cy.window().trigger()` in an application with multiple iframes. Fixes [#4396](https://github.com/cypress-io/cypress/issues/4396).\n*   Fixed a regression in [3.3.0](https://docs.cypress.io/guides/references/changelog#3-3-0) causing some users using proxy to see the \"Browser was not launched through Cypress\" error during `cypress open`. This was caused by incorrectly routing requests for Cypress's internal server on `localhost` through the user's proxy. Fixes [#4410](https://github.com/cypress-io/cypress/issues/4410).\n*   We fixed situations during a test failure where the Test Runner would throw `RangeError: Maximum call stack size exceeded`. Fixes [#1958](https://github.com/cypress-io/cypress/issues/1958) and [#4346](https://github.com/cypress-io/cypress/issues/4346).\n*   Fixed issue where `window.performance.getEntriesByType` would return `undefined` instead of an array within application code when using [cy.clock()](https://docs.cypress.io/api/commands/clock). Fixes [#3625](https://github.com/cypress-io/cypress/issues/3625).\n*   Passing an array of strings to `ignoreTestFiles` no longer causes an error to throw. Fixes [#4312](https://github.com/cypress-io/cypress/issues/4312).\n*   Fixed a visual bug when aliasing a non-route subject multiple times that would cause the Test Runner to show 'undefined' alias with empty counts. Fixes [#4429](https://github.com/cypress-io/cypress/issues/4429).\n*   Fixed regression introduced in [3.2.0](https://docs.cypress.io/guides/references/changelog#3-2-0) where Cypress would error because it could not find a type definition file for '../sinon'. Fixes [#4272](https://github.com/cypress-io/cypress/issues/4272).\n*   [cy.writeFile()](https://docs.cypress.io/api/commands/writefile) no longer errors in TypeScript files when passing an `options` object as its third argument. Fixes [#4461](https://github.com/cypress-io/cypress/issues/4461).\n*   [cy.stub()](https://docs.cypress.io/api/commands/stub) no longer errors in TypeScript files when evaluating returns. Fixes [#4302](https://github.com/cypress-io/cypress/issues/4302).\n\n**Misc:**\n\n*   Warnings are now displayed when recording in `cypress run` to warn when a project is nearing its organization's usage limit. They also clearly explain any consequences of going over a plan's usage limit. Addresses [#4530](https://github.com/cypress-io/cypress/issues/4530).\n*   An warning icon with a tooltip is displayed in the Runs tab of the Test Runner when parallelization was disabled during the run due to being over the organization's usage limit. Addresses [#4489](https://github.com/cypress-io/cypress/issues/4489).\n*   You can now opt out of sending exceptions to `https://api.cypress.io` by setting `CYPRESS_CRASH_REPORTS=0` in your system environment variables. [#4386](https://github.com/cypress-io/cypress/issues/4386)\n*   We are now capturing Google Cloud build details when recording tests to the Cypress Dashboard. Addresses [#3582](https://github.com/cypress-io/cypress/issues/3582).\n*   The tests titles and headers in the Command Log no longer truncate with ellipsis when the text is longer than that width of the Command Log. Instead the text wraps so that all text is shown. Addresses [#3947](https://github.com/cypress-io/cypress/issues/3947).\n*   Special env vars are now truncated in `Cypress.env()` and the debug logs. Addresses [#4501](https://github.com/cypress-io/cypress/issues/4501).\n*   The `projectId` in now displayed in the configuration in the Test Runner settings like all other configuration values. Fixes [#4500](https://github.com/cypress-io/cypress/issues/4500).\n*   When recording to the Dashboard, unrecognized warnings coming from the API server are now displayed in stdout. Fixes [#4489](https://github.com/cypress-io/cypress/issues/4489).\n\n**Documentation Changes:**\n\n*   New [Code Coverage](https://docs.cypress.io/guides/tooling/code-coverage) doc. Addressed in [#1744](https://github.com/cypress-io/cypress-documentation/pull/1744).\n*   New [Visual Testing](https://docs.cypress.io/guides/tooling/visual-testing) doc. Addressed in [#1744](https://github.com/cypress-io/cypress-documentation/pull/1536).\n*   New [Courses](https://docs.cypress.io/examples/media/courses-media) doc to list online courses that teach end-to-end testing with Cypress. Addressed in [#1766](https://github.com/cypress-io/cypress-documentation/pull/1766).\n*   Added a section about [Hacking on Cypress](https://docs.cypress.io/guides/references/troubleshooting#Hacking-on-Cypress) in the Debugging doc. Addressed in [#1783](https://github.com/cypress-io/cypress-documentation/pull/1783).\n*   Added a section on how to [opt out of sending exception data to Cypress](https://docs.cypress.io/guides/references/advanced-installation#Opt-out-of-sending-exception-data-to-Cypress) in the Installing Cypress doc.\n\n**Dependency Updates**\n\n*   Removed `electron-positioner` since it was no longer being used. Addressed in [#4502](https://github.com/cypress-io/cypress/pull/4502).\n*   Upgraded `chokidar` from `1.7.0` to `3.0.1`. Addressed in [#4487](https://github.com/cypress-io/cypress/pull/4487).\n*   Upgraded `cookie` from `0.3.1` to `0.4.0`. Addressed in [#4329](https://github.com/cypress-io/cypress/pull/4329).\n*   Upgraded `dependency-tree` from `6.5.0` to `7.0.2`. Addressed in [#4364](https://github.com/cypress-io/cypress/pull/4364).\n*   Upgraded `fs-extra` from `0.30.0` to `8.0.1`. Upgraded in CLI package only to `5.0.0`. Addressed in [#4418](https://github.com/cypress-io/cypress/pull/4418), [#4419](https://github.com/cypress-io/cypress/pull/4419), [#4422](https://github.com/cypress-io/cypress/pull/4422), [#4437](https://github.com/cypress-io/cypress/pull/4437), [#4555](https://github.com/cypress-io/cypress/pull/4555), [#4559](https://github.com/cypress-io/cypress/pull/4559), [#4571](https://github.com/cypress-io/cypress/pull/4571), [#4581](https://github.com/cypress-io/cypress/pull/4581).\n*   Upgraded `mocha-junit-reporter` from `1.18.0` to `1.23.0`. Addressed in [#4417](https://github.com/cypress-io/cypress/pull/4417).\n*   Upgraded `pluralize` from `7.0.0` to `8.0.0`. Addressed in [#4438](https://github.com/cypress-io/cypress/pull/4438).\n*   Upgraded `shell-env` from `0.3.0` to `3.0.0`. Addressed in [#4466](https://github.com/cypress-io/cypress/pull/4466), [#4467](https://github.com/cypress-io/cypress/pull/4467), and [#4471](https://github.com/cypress-io/cypress/pull/4471).\n*   Upgraded `winston` from `0.9.0` to `2.4.4`. Addressed in [#4538](https://github.com/cypress-io/cypress/pull/4538).\n*   We updated and removed some dependencies used for development.\n\n## 3.3.1[​](#3-3-1 \"Direct link to 3.3.1\")\n\n_Released 5/23/2019_\n\n**News:**\n\n*   We've [written a blog post](https://www.cypress.io/blog/2019/05/22/how-we-improved-network-speed-by-300-in-cypress-3-3-0/) about the 300% increase in proxy performance delivered in [3.3.0](https://docs.cypress.io/guides/references/changelog#3-3-0).\n\n**Bugfixes:**\n\n*   Cypress no longer accidentally prints internal Electron logs when running `cypress run`. This bug would exhibit itself when verifying and running Cypress the first time after installation. You may have seen these logs when running in CI. Fixes [#4255](https://github.com/cypress-io/cypress/issues/4255).\n*   Fixed a bug for users running external network proxies that prevented requests from completing. Requests should now all work correctly. Fixes [#4257](https://github.com/cypress-io/cypress/issues/4257).\n*   Fixed a regression in [3.3.0](https://docs.cypress.io/guides/references/changelog#3-3-0) causing large requests such as `multipart/form-data` uploads to hang. Fixes [#4240](https://github.com/cypress-io/cypress/issues/4240), [#4252](https://github.com/cypress-io/cypress/issues/4252), and [#4253](https://github.com/cypress-io/cypress/issues/4253).\n*   Fixed issue where support for `have.focus`, `not.have.focus`, `be.focused` and `not.be.focused` [assertions](https://docs.cypress.io/guides/references/assertions) were not working. Fixes [#4265](https://github.com/cypress-io/cypress/issues/4265).\n*   Names given to [`.as()`](https://docs.cypress.io/api/commands/as) now work properly when they contain a `.` character. Fixes [#3512](https://github.com/cypress-io/cypress/issues/3512).\n*   The proper error is now thrown when passing `{log: false}` to a Cypress command that failed. Fixes [#3847](https://github.com/cypress-io/cypress/issues/3847).\n*   Fixed an issue where highlighting a command's snapshot would throw an error when no application was rendered in the AUT frame. Fixes [#4177](https://github.com/cypress-io/cypress/issues/4177).\n*   We now properly detect the branch name when running Cypress in AppVeyor. Fixed in [#4234](https://github.com/cypress-io/cypress/pull/4234).\n\n**Misc:**\n\n*   Fix capitalization of `Xvfb` in error messages. Addressed in [#4262](https://github.com/cypress-io/cypress/pull/4262).\n\n**Documentation Changes:**\n\n*   We have some newly translated documentation in [Chinese](http://on.cypress.io/zh-cn) and [Japanese](http://on.cypress.io/ja). If you'd like to help in translating more, please open a pull request in our [documentation repo](https://github.com/cypress-io/cypress-documentation).\n\n## 3.3.0[​](#3-3-0 \"Direct link to 3.3.0\")\n\n_Released 5/17/2019_\n\n**News:**\n\n*   We've [written a blog post](https://www.cypress.io/blog/2019/05/22/how-we-improved-network-speed-by-300-in-cypress-3-3-0/) about the 300% increase in proxy performance delivered in `3.3.0`.\n\n**Features:**\n\n*   Cypress now automatically reads from your system's `HTTP_PROXY`, `HTTPS_PROXY`, and `NO_PROXY` environment variables and proxies traffic accordingly through Cypress based on these values. This includes network traffic within your application under test, when downloading Cypress, and when accessing 'Runs' within the Test Runner. Please read our new [Proxy Configuration](https://docs.cypress.io/guides/references/proxy-configuration) doc to understand more about proxy configuration in Cypress. Fixes [#672](https://github.com/cypress-io/cypress/issues/672), [#733](https://github.com/cypress-io/cypress/issues/733), [#939](https://github.com/cypress-io/cypress/issues/939), [#1039](https://github.com/cypress-io/cypress/issues/1039), [#1459](https://github.com/cypress-io/cypress/issues/1459), [#1469](https://github.com/cypress-io/cypress/issues/1469), [#1470](https://github.com/cypress-io/cypress/issues/1470), [#1541](https://github.com/cypress-io/cypress/issues/1541), [#1608](https://github.com/cypress-io/cypress/issues/1608), [#2295](https://github.com/cypress-io/cypress/issues/2295), [#3855](https://github.com/cypress-io/cypress/issues/3855), [#3865](https://github.com/cypress-io/cypress/issues/3865), [#1401](https://github.com/cypress-io/cypress/issues/1401) and [#3857](https://github.com/cypress-io/cypress/issues/3857).\n*   Your project's current proxy settings now display in the [Settings of the Test Runner](https://docs.cypress.io/guides/references/proxy-configuration#View-proxy-settings-in-Cypress). Addresses [#3856](https://github.com/cypress-io/cypress/issues/3856).\n*   Support for `have.focus`, `not.have.focus`, `be.focused` and `not.be.focused` [assertions](https://docs.cypress.io/guides/references/assertions) have been added. Addresses [#97](https://github.com/cypress-io/cypress/issues/97).\n*   We now offer a separate 32bit and 64bit build for Windows. Addresses [#716](https://github.com/cypress-io/cypress/issues/716), [#787](https://github.com/cypress-io/cypress/issues/787), [#2095](https://github.com/cypress-io/cypress/issues/2095), [#706](https://github.com/cypress-io/cypress/issues/706), [#3706](https://github.com/cypress-io/cypress/issues/3706), and [#4016](https://github.com/cypress-io/cypress/issues/4016).\n*   Requests that go through [cy.visit()](https://docs.cypress.io/api/commands/visit) or [cy.request()](https://docs.cypress.io/api/commands/request) are now automatically retried under the hood when the request fails. This more closely reflects Chrome's default behavior on requests. Addresses [#4013](https://github.com/cypress-io/cypress/issues/4013), [#898](https://github.com/cypress-io/cypress/issues/898) and [#1013](https://github.com/cypress-io/cypress/issues/1013).\n*   [cy.visit()](https://docs.cypress.io/api/commands/visit) and [cy.request()](https://docs.cypress.io/api/commands/request) now support new options `retryOnStatusCodeFailure` and `retryOnNetworkFailure` to allow changing Cypress's automatic request retry on status codes and network errors. Addresses [#4013](https://github.com/cypress-io/cypress/issues/4013), [#898](https://github.com/cypress-io/cypress/issues/898) and [#1013](https://github.com/cypress-io/cypress/issues/1013).\n*   [.type()](https://docs.cypress.io/api/commands/type) now supports the special character sequences `{insert}`, `{pageup}`, and `{pagedown}`. Addresses [#3845](https://github.com/cypress-io/cypress/issues/3845).\n*   We now indicate which XHRs match which alias in the Command Log on [.wait()](https://docs.cypress.io/api/commands/wait) when they match an alias multiple times. Addresses [#477](https://github.com/cypress-io/cypress/issues/477).\n*   The console log when clicking on the [cy.visit()](https://docs.cypress.io/api/commands/visit) command now displays its resolved `options` arguments. Addresses [#3721](https://github.com/cypress-io/cypress/issues/3721).\n*   There's a new 'canceled' XHR status shown on the Command Log to indicate the difference between calling `xhr.abort()` and the browser canceling the request due to page navigation. Addresses [#3973](https://github.com/cypress-io/cypress/issues/3973).\n*   The Electron browser now runs Chrome Version 61. Addresses [#4000](https://github.com/cypress-io/cypress/issues/4000).\n*   Running Cypress via `cypress run` now supports scripts of `type=\"module\"`. Fixes [#3696](https://github.com/cypress-io/cypress/issues/3696).\n*   Exposed [Cypress.isCy()](https://docs.cypress.io/api/cypress-api/iscy) method to check if a value is a valid instance of `cy` or a `cy` chainable. Fixes [#3822](https://github.com/cypress-io/cypress/issues/3822).\n*   There is a new \"Download Chromium\" menu item in the \"Help\" menu of the Test Runner links to Cypress's [Chromium Download Tool](https://on.cypress.io/chromium-downloads). Addresses [#3977](https://github.com/cypress-io/cypress/issues/3977)\n\n**Bugfixes:**\n\n*   Fixed a regression introduced in [3.2.0](https://docs.cypress.io/guides/references/changelog#3-2-0) that caused an error to throw when visiting domains with certain public suffixes. Fixes [#3717](https://github.com/cypress-io/cypress/issues/3717).\n*   When running Cypress with `NODE_OPTIONS` environment variables set, Cypress no longer issues an incorrect 0 exit code. [#1676](https://github.com/cypress-io/cypress/issues/1676)\n*   Fixed a regression introduced in [3.2.0](https://docs.cypress.io/guides/references/changelog#3-2-0) that caused [.its()](https://docs.cypress.io/api/commands/its) to no longer retry when it yields `undefined`. [#3837](https://github.com/cypress-io/cypress/issues/3837)\n*   Fixed a regression introduced in [3.2.0](https://docs.cypress.io/guides/references/changelog#3-2-0) that caused [cy.fixture()](https://docs.cypress.io/api/commands/fixture) to throw a `EISDIR` error if a directory had the same name as a file within that same directory. Fixes [#3739](https://github.com/cypress-io/cypress/issues/3739).\n*   `user-agent` headers sent as arguments to [cy.request()](https://docs.cypress.io/api/commands/request) and [cy.visit()](https://docs.cypress.io/api/commands/visit) are now properly sent. Fixes [#3873](https://github.com/cypress-io/cypress/issues/3873) and [#3719](https://github.com/cypress-io/cypress/issues/3719).\n*   When a request is proxied through Cypress and there is a network error, we no longer send an HTML response with a 500 status code. We now kill the browser-facing socket and let the network error be handled by the application under test. Fixes [#4101](https://github.com/cypress-io/cypress/issues/4101), [#4231](https://github.com/cypress-io/cypress/issues/4231), [#1036](https://github.com/cypress-io/cypress/issues/1036), [#4231](https://github.com/cypress-io/cypress/issues/4231), and [#1398](https://github.com/cypress-io/cypress/issues/1398).\n*   We changed Cypress's implementation to no longer rely on internal XHR events when the browser navigates. This fixes a a bug in Chrome 71+ that could cause XHRs to pend forever. Fixes [#3973](https://github.com/cypress-io/cypress/issues/3973) and [#4130](https://github.com/cypress-io/cypress/issues/4130)\n*   We greatly improved the speed of proxied requests through our network layer. Fixes [#3192](https://github.com/cypress-io/cypress/issues/3192) and [#1469](https://github.com/cypress-io/cypress/issues/1469).\n*   If an error occurs during `cypress verify`, we now kill the verification process after 10 seconds and print the error message. This should prevent some situations where Cypress would hang during installation or verification and never exit. Fixes [#819](https://github.com/cypress-io/cypress/issues/819).\n*   Cypress automatically retries `cypress verify` and `cypress run` commands by starting its own Xvfb server on Linux if the first attempt fails due to possible `DISPLAY` misconfiguration. Addresses [#4034](https://github.com/cypress-io/cypress/issues/4034).\n*   Cypress now properly handles typing JavaScript object prototype methods (like `hasOwnProperty`) into [`.type()`](https://docs.cypress.io/api/commands/type). Fixes [#3423](https://github.com/cypress-io/cypress/issues/3423).\n*   We now set the `form` option to `true` if the `Content-Type` header equals `application/x-www-form-urlencoded` and `json` is not already set by a user. This fixes a situation where Cypress would try to parse the `body` as a string, resulting in a confusing error message. Fixes [#2923](https://github.com/cypress-io/cypress/issues/2923).\n*   [cy.contains()](https://docs.cypress.io/api/commands/contains) now correctly handles comma delimited arguments passed to the selector argument. Fixes [#2407](https://github.com/cypress-io/cypress/issues/2407).\n*   Passing a browser path containing spaces now works properly when passed to the `--browser` argument. Fixes [#3979](https://github.com/cypress-io/cypress/issues/3979)\n*   Fixed display of tooltips when selecting elements from the Selector Playground so that they display at the correct coordinates when scrolling. Fixes [#1351](https://github.com/cypress-io/cypress/issues/1351).\n*   The lists of spec files now display at the correct indentation level when they are nested more than 5 directories deep. Fixes [#3652](https://github.com/cypress-io/cypress/issues/3652).\n*   Cypress now properly parses environment variables with empty values. Fixes [#3742](https://github.com/cypress-io/cypress/issues/3742).\n*   Assertions running outside of a test are now properly handled in Cypress instead of throwing internal errors. Fixes [#3926](https://github.com/cypress-io/cypress/issues/3926).\n*   [Cypress.log()](https://docs.cypress.io/api/cypress-api/cypress-log) now throws an error when not properly passed an object as its argument. Addresses [#3658](https://github.com/cypress-io/cypress/issues/3658).\n*   [Cypress.log()](https://docs.cypress.io/api/cypress-api/cypress-log) no longer throws when called before any other Cypress commands. Fixes [#3658](https://github.com/cypress-io/cypress/issues/3658).\n\n**Misc:**\n\n*   We now better support capturing environment variables within Azure DevOps. Addresses [#3657](https://github.com/cypress-io/cypress/issues/3657).\n*   Cypress now only scans for spec changes when the watcher sees changes, rather than polling to scan. Addresses [#3069](https://github.com/cypress-io/cypress/issues/3069).\n*   The ability to open the context menu to see \"Inspect Element\" has been reenabled in the Electron browser. Addresses [#4002](https://github.com/cypress-io/cypress/issues/4002).\n*   We no longer package non-Windows FFmpeg builds with Windows builds, resulting in a 35-40% reduction in zipped size and a 36-43% reduction in unzipped size of download. Addresses [#3888](https://github.com/cypress-io/cypress/issues/3888).\n*   The warning messages when going over test recording limits have been updated to correctly display 'monthly tests' and 'private tests' where necessary. Addresses [#4024](https://github.com/cypress-io/cypress/issues/4024).\n*   When an HTTP request is received by the proxy layer, by default, we send it with a `Connection: keep-alive` header so that the connection will be reused if possible. Addresses [#3857](https://github.com/cypress-io/cypress/issues/3857).\n*   Improved accessibility of Test Runner for screen readers. Addresses [#3850](https://github.com/cypress-io/cypress/issues/3850).\n*   Cypress type definition now allow a `timeout` option in [cy.hash()](https://docs.cypress.io/api/commands/hash). Fixes [#3844](https://github.com/cypress-io/cypress/issues/3844).\n*   Fixed type definition for `match` assertion so that it now only accepts `RegExp` type arguments. Fixes [#2578](https://github.com/cypress-io/cypress/issues/2578).\n*   The [.trigger()](https://docs.cypress.io/api/commands/trigger) type definition now expects its `options` to be `ObjectLike`. Addressed in [#3809](https://github.com/cypress-io/cypress/pull/3809).\n*   The [cy.clock()](https://docs.cypress.io/api/commands/clock) type definition now allows for type `Date`. Fixed in [#4106](https://github.com/cypress-io/cypress/pull/4106).\n*   Added type definition for undocumented `Cypress.LocalStorage.clear` method. Fixes [#4070](https://github.com/cypress-io/cypress/issues/4070).\n*   Added type definition for [Cypress.isCy()](https://docs.cypress.io/api/cypress-api/iscy) method. Fixes [#3822](https://github.com/cypress-io/cypress/issues/3822).\n*   Added missing type definitions for some [cy.visit()](https://docs.cypress.io/api/commands/visit) options. Fixes [#3989](https://github.com/cypress-io/cypress/issues/3989).\n*   The spinner animation should more smoothly spin when a command is pending in the Test Runner. Addressed in [#4005](https://github.com/cypress-io/cypress/pull/4005).\n\n**Documentation Changes:**\n\n*   New [Proxy Configuration](https://docs.cypress.io/guides/references/proxy-configuration) doc. Addressed in [#1486](https://github.com/cypress-io/cypress-documentation/pull/1486).\n*   Added `{insert}`, `{pageup}`, and `{pagedown}` as supported special character sequences to [.type()](https://docs.cypress.io/api/commands/type#Arguments). Addressed in [#1567](https://github.com/cypress-io/cypress-documentation/pull/1567).\n*   Added newly supported `focus` assertion to [Assertions](https://docs.cypress.io/guides/references/assertions) doc. Addresses [#1372](https://github.com/cypress-io/cypress-documentation/pull/1372).\n*   Added new options `retryOnStatusCodeFailure` and `retryOnNetworkFailure` to [cy.visit()](https://docs.cypress.io/api/commands/visit) and [cy.request()](https://docs.cypress.io/api/commands/request).\n*   Updated [install instructions for Windows](https://docs.cypress.io/guides/references/advanced-installation#Download-URLs) on how to target 64bit and 32bit infrastructures. Addressed in [#1568](https://github.com/cypress-io/cypress-documentation/issues/1568).\n*   Updated [.its()](https://docs.cypress.io/api/commands/its) and [.invoke()](https://docs.cypress.io/api/commands/invoke) docs to better explain how default assertions are handled. Addresses [#1643](https://github.com/cypress-io/cypress-documentation/issues/1643).\n*   Updated our [Roadmap](https://docs.cypress.io/guides/references/roadmap) to more closely reflect the work we are doing. Addressed in [#1567](https://github.com/cypress-io/cypress-documentation/pull/1639).\n*   Added a section about how to request our new [Open Source Plan](https://docs.cypress.io/guides/cloud/account-management/billing-and-usage#Requesting-OSS-plan-for-an-Org) in the Dashboard Service doc. Addressed in [#1567](https://github.com/cypress-io/cypress-documentation/pull/1584).\n\n**Dependency Updates**\n\n*   Upgraded `commit-info` from `2.1.2` to `2.1.2`. Addressed in [#4045](https://github.com/cypress-io/cypress/pull/4045)\n*   Upgraded `data-uri-to-buffer` from `0.0.4` to `1.2.0`. Addresses [#4152](https://github.com/cypress-io/cypress/issues/4152).\n*   Upgraded `electron` from `1.8.2` to `2.0.18`. Addresses [#4000](https://github.com/cypress-io/cypress/issues/4000).\n*   Upgraded `electron-packager` from `9.1.0` to `13.1.1`. Addresses [#4155](https://github.com/cypress-io/cypress/issues/4155).\n*   Upgraded `express-handlebars` from `3.0.0` to `3.0.2`. Addressed in [#4086](https://github.com/cypress-io/cypress/pull/4086).\n*   Upgraded `find-process` from `1.2.1` to `1.4.1`. Addressed in [#4087](https://github.com/cypress-io/cypress/pull/4087).\n*   Upgraded `getos` from `2.8.4` to `3.1.1`. Addressed in [#4222](https://github.com/cypress-io/cypress/pull/4222).\n*   Upgraded `http-status-codes` from `1.3.0` to `1.3.2`. Addressed in [#3949](https://github.com/cypress-io/cypress/pull/3949).\n*   Upgraded `jimp` from `0.6.0` to `0.6.4`. Addressed in [#4097](https://github.com/cypress-io/cypress/pull/4097).\n*   Removed `method-override`. Addressed in [#4209](https://github.com/cypress-io/cypress/pull/4209).\n*   Upgraded `node` from `8.2.1` to `8.9.3`. Addressed in [#4001](https://github.com/cypress-io/cypress/pull/4001).\n*   Downgraded `parse-domain` from 2.1.7 to 2.0.0 to avoid a regression released in `parse-domain`. Addresses [#3717](https://github.com/cypress-io/cypress/issues/3717).\n*   Upgraded `pluralize` from `3.1.0` to `7.0.0`. Addressed in [#4205](https://github.com/cypress-io/cypress/pull/4205) and [#4206](https://github.com/cypress-io/cypress/pull/4206).\n*   Upgraded `semver` from `5.6.0` to `5.7.0`. Addressed in [#4112](https://github.com/cypress-io/cypress/pull/4112).\n*   Upgraded `send` from `0.16.2` to `0.17.0`. Addressed in [#4134](https://github.com/cypress-io/cypress/pull/4134).\n*   Upgraded `supports-color` from `5.5.0` to `6.1.0`. Addressed in [#4150](https://github.com/cypress-io/cypress/pull/4150).\n*   Removed `tar-fs`. Addressed in [#4148](https://github.com/cypress-io/cypress/pull/4148).\n*   Upgraded `term-size` from `1.2.0` to `2.0.0`. Addressed in [#4148](https://github.com/cypress-io/cypress/pull/4148).\n*   Upgraded `tmp` from `0.0.33` to `0.1.0`. Addressed in [#4111](https://github.com/cypress-io/cypress/pull/4111).\n*   Upgraded `trash` from `4.3.0` to `5.2.0`. Addressed in [#4140](https://github.com/cypress-io/cypress/pull/4140).\n*   Upgraded `url-parse` from `1.4.4` to `1.4.7`. Addressed in [#4110](https://github.com/cypress-io/cypress/pull/4110).\n*   Upgraded `widest-line` from `2.0.1` to `3.1.0`. Addressed in [#4139](https://github.com/cypress-io/cypress/pull/4139).\n*   We updated and removed some dependencies used for development.\n\n## 3.2.0[​](#3-2-0 \"Direct link to 3.2.0\")\n\n_Released 3/15/2019_\n\n**Features:**\n\n*   [cy.visit()](https://docs.cypress.io/api/commands/visit) has been expanded to allow options `url`, `method`, `body`, and `headers`. This allows [cy.visit()](https://docs.cypress.io/api/commands/visit) to be called with a `POST` method or with headers like `Accept-Language` or `Authorization`. Fixes [#1500](https://github.com/cypress-io/cypress/issues/1500), [#1904](https://github.com/cypress-io/cypress/issues/1904) and [#908](https://github.com/cypress-io/cypress/issues/908).\n*   [cy.request()](https://docs.cypress.io/api/commands/request) now allows any valid HTTP `method` to be used including `TRACE`, `COPY`, `LOCK`, `MKCOL`, `MOVE`, `PURGE`, `PROPFIND`, `PROPPATCH`, `UNLOCK`, `REPORT`, `MKACTIVITY`, `CHECKOUT`, `MERGE`, `M-SEARCH`, `NOTIFY`, `SUBSCRIBE`, `UNSUBSCRIBE`, `SEARCH`, and `CONNECT`. Addresses [#1302](https://github.com/cypress-io/cypress/issues/1302)\n*   The [`--browser` argument](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt) of the [Command Line](https://docs.cypress.io/guides/guides/command-line) and the [`browser` argument](https://docs.cypress.io/guides/guides/module-api#cypressrun) of the [Module API](https://docs.cypress.io/guides/guides/module-api) have been updated to allow passing a `<path>`. Addresses [#1026](https://github.com/cypress-io/cypress/issues/1026).\n*   [cy.type()](https://docs.cypress.io/api/commands/type) now accepts `{home}` and `{end}` special character sequences to move the cursor to the start or end of a line. Addresses [#2033](https://github.com/cypress-io/cypress/issues/2033).\n*   The Cypress Chrome extension now has a static ID of `caljajdfkjjjdehjdoimjkkakekklcck`. This allows Cypress to be added to your allowed extensions for those working under corporate policies that prohibit extensions. Addresses [#3673](https://github.com/cypress-io/cypress/issues/3673), [#1239](https://github.com/cypress-io/cypress/issues/1239) and [#2494](https://github.com/cypress-io/cypress/issues/2494).\n\n**Bugfixes:**\n\n*   Problems logging in through GitHub in the Test Runner have been fixed. The GitHub login window no longer shows the browser support banner and the \"Authorize cypress-io\" button is no longer disabled. Fixes [#1251](https://github.com/cypress-io/cypress/issues/1251).\n*   Fixed an issue when testing applications using older versions of jQuery. They now no longer throw `item.first is not a function`. Fixes [#2927](https://github.com/cypress-io/cypress/issues/2927).\n*   Cypress now detects more instances of `browser` installations. Fixes [#3183](https://github.com/cypress-io/cypress/issues/3183) and [#3218](https://github.com/cypress-io/cypress/issues/3218).\n*   Fixed issue with loading fixture files containing more than one `.` in their filename while not specifying the file extension. We are also displaying a clearer warning when a fixture file cannot be found. Fixes [#1402](https://github.com/cypress-io/cypress/issues/1402).\n*   All third party `@types` have been moved from Cypress `dependencies` into `devDependencies`. This should fix situations where user's type dependencies were conflicting with Cypress's third party type definitions. Fixes [#3371](https://github.com/cypress-io/cypress/issues/3371) and [#1227](https://github.com/cypress-io/cypress/issues/1227).\n*   `Cypress.config('baseUrl')` has been updated to no longer strip singular `/` at the end of urls and instead only strip instances of multiple `/`. Fixes [#3540](https://github.com/cypress-io/cypress/issues/3540).\n*   The prompt to \"Restore pages?\" is no longer displayed within Chrome upon restarting a crashed Chrome window. Addresses [#2048](https://github.com/cypress-io/cypress/issues/2048).\n*   [cy.wrap()](https://docs.cypress.io/api/commands/wrap) no longer throws an error when a non-jQuery wrapped DOM element is passed in as an argument. Fixes [#3549](https://github.com/cypress-io/cypress/issues/3549).\n*   Fixed issue where all arguments passed to `setTimeout` or `setInterval` were not properly passed on to the target function. Fixes [#3592](https://github.com/cypress-io/cypress/issues/3592).\n*   [.filter()](https://docs.cypress.io/api/commands/filter) has been updated so that when called with a function, the options are now properly read. Fixes [#3315](https://github.com/cypress-io/cypress/issues/3315).\n*   Cypress's recognition of websites attempting framebusting has been updated to include framebusting code wrapped within `()`. [#3267](https://github.com/cypress-io/cypress/issues/3267)\n*   When `.its()` returns `undefined` it no longer errors. It will now follow the same logic as all other commands and only fail when directly by a [.should()](https://docs.cypress.io/api/commands/should) command with an assertion that is not met. Fixes [#1531](https://github.com/cypress-io/cypress/issues/1531).\n*   When [cy.wrap()](https://docs.cypress.io/api/commands/wrap) is followed directly by a [.should()](https://docs.cypress.io/api/commands/should) command, `cy.wrap()` will now [retry](https://docs.cypress.io/guides/core-concepts/retry-ability) when its argument evaluates to `undefined` until it meets the requirements of the assertion or the `cy.wrap()` command times out. Fixes [#3241](https://github.com/cypress-io/cypress/issues/3241).\n\n**Misc:**\n\n*   We now display a warning when passing an argument to `--spec` that is not surrounded by quotes `\"\"` recommending that the argument instead be surrounded by quotes. In some cases, not providing quotes can cause the arguments to be read in a way that is likely not its intended use. Addresses [#3318](https://github.com/cypress-io/cypress/issues/3318) and [#2298](https://github.com/cypress-io/cypress/issues/2298).\n*   The number of logs printed when installing Cypress in docker has been reduced. Partially addresses [#1243](https://github.com/cypress-io/cypress/issues/1243).\n*   The seeded Kitchen Sink examples have some new examples showing how to add a message to assertions, how to compare the text content of two elements, and how to make assertions about `data` attributes. The examples also have some small typo fixes. Fixes [#502](https://github.com/cypress-io/cypress/issues/502). Addressed in [#3272](https://github.com/cypress-io/cypress/pull/3272), [#3287](https://github.com/cypress-io/cypress/pull/3287), and [#3700](https://github.com/cypress-io/cypress/pull/3700).\n*   We now only mount internal servers on `loopback`. Addresses [#3712](https://github.com/cypress-io/cypress/issues/3712).\n*   The instructions in Cypress's update window now include `yarn` update instructions alongside `npm`. Addresses [#2871](https://github.com/cypress-io/cypress/issues/2871).\n*   The spec file's font weight has been increased within the Test Runner for better readability. Addressed in [#3065](https://github.com/cypress-io/cypress/issues/3065).\n*   We improved the error message displayed when a record key is unrecognized during `cypress run`. Addresses [#1449](https://github.com/cypress-io/cypress/issues/1449).\n*   We improved the typings when using `Cypress.on` to listen for `window.alert` events to allow for `Sinon.stub`. Fixes [#3451](https://github.com/cypress-io/cypress/issues/3451).\n*   Fixed typo in typing for [.trigger](https://docs.cypress.io/api/commands/trigger) options. Addressed in [#3588](https://github.com/cypress-io/cypress/pull/3588).\n\n**Documentation Changes:**\n\n*   New [Retryability](https://docs.cypress.io/guides/core-concepts/retry-ability) doc [#1278](https://github.com/cypress-io/cypress-documentation/issues/1278)\n*   Updated `--browser` and `browser` args to accept `path` [#1419](https://github.com/cypress-io/cypress-documentation/issues/1419)\n*   Document how to accept or reject project transfers [#1474](https://github.com/cypress-io/cypress-documentation/issues/1474)\n*   Updated [docs](https://docs.cypress.io/guides/guides/launching-browsers) on explain how to run Chrome and Chromium browsers [#1339](https://github.com/cypress-io/cypress-documentation/issues/1339)\n*   Added `{home}` and `{end}` character sequences to [`cy.type()`](https://docs.cypress.io/api/commands/type) doc. Also wrote better description of what `{downarrow}` and `{uparrow}` character sequences actually do. [#1347](https://github.com/cypress-io/cypress-documentation/pull/1347)\n*   Added all newly supported HTTP methods to [cy.request()](https://docs.cypress.io/api/commands/request) doc.\n*   Add new section to [Troubleshooting](https://docs.cypress.io/guides/references/troubleshooting#Allow-the-Cypress-Chrome-extension) doc explaining how to allow the Cypress Chrome extension.\n*   Fixed code example for google analytics stubbing [#1454](https://github.com/cypress-io/cypress-documentation/issues/1454)\n\n**Dependency Updates**\n\n*   Upgraded `@cypress/commit-info` from `2.1.1` to `2.1.2`. [#3327](https://github.com/cypress-io/cypress/pull/3327).\n*   Upgraded `@cypress/xvfb` from `1.2.3` to `1.2.4`. [#3328](https://github.com/cypress-io/cypress/pull/3328).\n*   Upgraded `@ffmpeg-installer/ffmpeg` from `1.0.15` to `1.0.17`. [#3329](https://github.com/cypress-io/cypress/pull/3329).\n*   Upgraded `cachedir` from `1.3.0` to `2.1.0`. [#3660](https://github.com/cypress-io/cypress/pull/3660).\n*   Upgraded `chalk` from `2.4.1` to `2.4.2`. [#3362](https://github.com/cypress-io/cypress/pull/3362).\n*   Upgraded `chokidar` from `1.6.0` to `1.7.0`. [#3363](https://github.com/cypress-io/cypress/pull/3363).\n*   Upgraded `coffee-script` from `1.12.5` to `1.12.7`. [#3365](https://github.com/cypress-io/cypress/pull/3365).\n*   Upgraded `commander` from `2.11.0` to `2.19.0`. [#3366](https://github.com/cypress-io/cypress/pull/3366).\n*   Upgraded `common-tags` from `1.4.0` to `1.8.0`. [#3368](https://github.com/cypress-io/cypress/pull/3368).\n*   Upgraded `compression` from `1.7.2` to `1.7.3`. [#3379](https://github.com/cypress-io/cypress/pull/3379).\n*   Upgraded `cookie` from `0.2.4` to `0.3.1`. [#3380](https://github.com/cypress-io/cypress/pull/3380).\n*   Upgraded `cookie-parser` from `1.4.3` to `1.4.4`. [#3443](https://github.com/cypress-io/cypress/pull/3443).\n*   Upgraded `dependency-tree` from `6.4.0` to `6.5.0`. [#3381](https://github.com/cypress-io/cypress/pull/3381).\n*   Upgraded `electron-context-menu` from `0.8.0` to `0.11.0`. [#3383](https://github.com/cypress-io/cypress/pull/3383).\n*   Upgraded `electron-packager` from `9.0.1` to `9.1.0`. [#3384](https://github.com/cypress-io/cypress/pull/3384).\n*   Upgraded `electron-positioner` from `3.0.0` to `3.0.1`. [#3385](https://github.com/cypress-io/cypress/pull/3385).\n*   Upgraded `errorhandler` from `1.1.1` to `1.5.0`. [#3386](https://github.com/cypress-io/cypress/pull/3386).\n*   Upgraded `express` from `4.16.2` to `4.16.4`. [#3409](https://github.com/cypress-io/cypress/pull/3409).\n*   Upgraded `extract-zip` from `1.6.6` to `1.6.7`. [#3410](https://github.com/cypress-io/cypress/pull/3410).\n*   Upgraded `glob` from `7.1.2` to `7.1.3`. [#3412](https://github.com/cypress-io/cypress/pull/3412).\n*   Upgraded `image-size` from `0.5.5` to `0.7.2`. [#3413](https://github.com/cypress-io/cypress/pull/3413) and [#3500](https://github.com/cypress-io/cypress/pull/3500).\n*   Upgraded `is-ci` from `1.0.10` to `1.2.1`. [#3414](https://github.com/cypress-io/cypress/pull/3414).\n*   Upgraded `lodash` from `4.17.4` to `4.17.11`. [#3344](https://github.com/cypress-io/cypress/pull/3344).\n*   Upgraded `mocha-junit-reporter` from `1.17.0` to `1.18.0`. [#3417](https://github.com/cypress-io/cypress/pull/3417).\n*   Upgraded `moment` from `2.23.0` to `2.24.0`. [#3433](https://github.com/cypress-io/cypress/pull/3433).\n*   Upgraded `morgan` from `1.3.0` to `1.9.1`. [#3434](https://github.com/cypress-io/cypress/pull/3434).\n*   Upgraded `node-uuid` from `1.4.1` to `1.4.8`. [#3436](https://github.com/cypress-io/cypress/pull/3436).\n*   Upgraded `parse-domain` from `2.0.0` to `2.1.7`. [#3437](https://github.com/cypress-io/cypress/pull/3437).\n*   Upgraded `request` from `2.87.0` to `2.88.0`. [#3444](https://github.com/cypress-io/cypress/pull/3444).\n*   Upgraded `request-progress` from `0.3.1` to `0.4.0`. [#3445](https://github.com/cypress-io/cypress/pull/3445).\n*   Upgraded `request-promise` from `4.1.1` to `4.2.4`. [#3446](https://github.com/cypress-io/cypress/pull/3446) and [#3476](https://github.com/cypress-io/cypress/pull/3476).\n*   Upgraded `return-deep-diff` from `0.2.9` to `0.3.0`. [#3447](https://github.com/cypress-io/cypress/pull/3447).\n*   Upgraded `send` from `0.14.2` to `0.16.2`. [#3448](https://github.com/cypress-io/cypress/pull/3448).\n*   Upgraded `ssl-root-cas` from `1.2.5` to `1.3.1`. [#3449](https://github.com/cypress-io/cypress/pull/3449).\n*   Upgraded `supports-color` from `5.1.0` to `5.5.0`. [#3464](https://github.com/cypress-io/cypress/pull/3464).\n*   Upgraded `through` from `2.3.6` to `2.3.8`. [#3465](https://github.com/cypress-io/cypress/pull/3465).\n*   Upgraded `tmp` from `0.0.31` to `0.0.33`. [#3466](https://github.com/cypress-io/cypress/pull/3466).\n*   Upgraded `tough-cookie` from `2.4.3` to `3.0.1`. [#3477](https://github.com/cypress-io/cypress/pull/3477) and [#3659](https://github.com/cypress-io/cypress/pull/3659).\n*   Upgraded `trash` from `4.0.0` to `4.3.0`. [#3478](https://github.com/cypress-io/cypress/pull/3478).\n*   Upgraded `underscore.string` from `3.3.4` to `3.3.5`. [#3480](https://github.com/cypress-io/cypress/pull/3480).\n*   Upgraded `yauzl` from `2.8.0` to `2.10.0`. [#3481](https://github.com/cypress-io/cypress/pull/3481). Potentially fixes [#3515](https://github.com/cypress-io/cypress/issues/3515).\n*   We also updated many dependencies used for development and removed some unused dependencies.\n\n## 3.1.5[​](#3-1-5 \"Direct link to 3.1.5\")\n\n_Released 1/30/2019_\n\n**Bugfixes:**\n\n*   Fixed issue where the `onLoad` event was never being called when calling [cy.visit()](https://docs.cypress.io/api/commands/visit) on the url Cypress is currently navigated to. Fixes [#1311](https://github.com/cypress-io/cypress/issues/1311).\n*   Fixed regression introduced in `3.1.4` that caused an `InvalidStateError` when visiting a page with an XHR request with a `responseType` other than `text` or `''`. Fixes [#3008](https://github.com/cypress-io/cypress/issues/3008).\n*   Fixed several issues in Chrome\\* versions >= 72 in the Cypress proxy that caused using `cy.visit()` with `localhost` to fail, or using `localhost` inside of the `baseUrl` configuration option. Fixes [#1872](https://github.com/cypress-io/cypress/issues/1872) and [#3252](https://github.com/cypress-io/cypress/issues/3252) and [#1777](https://github.com/cypress-io/cypress/issues/1777).\n*   Fixed another issue in Chrome\\* versions >= 72 where a scrollable command log would cause the entire application to be scrollable. Fixes [#3253](https://github.com/cypress-io/cypress/issues/3253).\n*   Fixed not correctly passing the `timeout` option for [cy.request()](https://docs.cypress.io/api/commands/request). This should fix some instances where large `timeout` values would cause `ESOCKETTIMEDOUT` errors. Fixes [#2669](https://github.com/cypress-io/cypress/issues/2669).\n*   Fixed issue where Cypress would inject a script tag before the `<!DOCTYPE>` declaration when the document only contained the doctype declaration. Fixes [#2617](https://github.com/cypress-io/cypress/issues/2617).\n*   The error message when visiting a site with an invalid content-type now prints the correct content-type of the response Cypress received from the web server. Fixes [#3101](https://github.com/cypress-io/cypress/issues/3101).\n*   Fixed issue where an internal `layout.html` file would inadvertently get loaded instead of the spec file. Fixes [#2891](https://github.com/cypress-io/cypress/issues/2891).\n*   Fixed issue where the Chromium browser was not detected in Linux due to Cypress not distinguishing between Chrome and Chromium browsers with the same version. Fixes [#1400](https://github.com/cypress-io/cypress/issues/1400).\n*   Fixed issue of Cypress being unable to play videos with `autoplay`. We now pass the `--no-user-gesture-required` command line switch to Chrome. Fixes [#2376](https://github.com/cypress-io/cypress/issues/2376).\n*   We now pass the Chromium command line switches `--use-fake-ui-for-media-stream` and `--use-fake-device-for-media-stream` to Chrome by default in order to better support testing webcam functionality. Fixes [#2704](https://github.com/cypress-io/cypress/issues/2704).\n*   Updated filenames allowed for screenshots to allow more characters that are valid. Fixes [#3052](https://github.com/cypress-io/cypress/issues/3052).\n*   Fixed TypeScript error caused by `dtslint` dependency introduced in 3.1.4. Fixes [#3024](https://github.com/cypress-io/cypress/issues/3024) and [#3136](https://github.com/cypress-io/cypress/issues/3136).\n*   Improved error message displayed for `cypress cache` to not display `[object Object]` and made `--help` labels more descriptive. Fixes [#2589](https://github.com/cypress-io/cypress/issues/2589).\n*   Using [.clear()](https://docs.cypress.io/api/commands/clear) on inputs of type 'date' is now working. Fixes [#2738](https://github.com/cypress-io/cypress/issues/2738)\n*   Fixed issue where `event` was undefined when using an `onload` event handler. Fixed [#2859](https://github.com/cypress-io/cypress/issues/2859)\n\n**Misc:**\n\n*   Improved errors shown when opening a project in the Desktop Application. The design is more readable and the error's stack trace is now expandable. Addresses [#2955](https://github.com/cypress-io/cypress/issues/2955).\n*   Improved experience of search in Desktop Application when there are no results. Addresses [#3146](https://github.com/cypress-io/cypress/issues/3146).\n*   Updated tooltip content so that it no longer flows outside of the tooltip in the Test Runner when displaying longer routes. Fixes [#2980](https://github.com/cypress-io/cypress/issues/2980).\n*   Added word labels beside icons in Desktop Application for 'Support' and 'Docs' links. Addresses [#3091](https://github.com/cypress-io/cypress/issues/3091).\n*   Updated the CLI to no longer silence important stdout from `cypress version`, `cypress cache list` etc commands. Addresses [#2705](https://github.com/cypress-io/cypress/issues/2705).\n*   Fixed incorrect type definition for options usage for [.then()](https://docs.cypress.io/api/commands/then). Addresses [#3075](https://github.com/cypress-io/cypress/issues/3075).\n*   Fixed incorrect JSDoc comments in type definition for [.focus()](https://docs.cypress.io/api/commands/focus) and better formatted comments in type definitions. Addresses [#2975](https://github.com/cypress-io/cypress/issues/2975) and [#2954](https://github.com/cypress-io/cypress/issues/2954).\n*   Updated error messages to include single quotes when displaying written test code. Addresses [#2684](https://github.com/cypress-io/cypress/issues/2684)\n\n**Documentation Changes:**\n\n*   Added example on how to use a fake video for webcam testing to [Browser API doc](https://docs.cypress.io/api/plugins/browser-launch-api#Use-fake-video-for-webcam-testing).\n\n**Dependency Updates**\n\n*   We've begun automating our dependency update process in order to avoid accidental dependency updates. Addresses [#2990](https://github.com/cypress-io/cypress/issues/2990) and [#3025](https://github.com/cypress-io/cypress/issues/3025).\n*   Upgraded `sinon` from `3.2.0` to `3.3.0`. Addresses [#1328](https://github.com/cypress-io/cypress/issues/1328).\n\n## 3.1.4[​](#3-1-4 \"Direct link to 3.1.4\")\n\n_Released 12/25/2018_\n\nMerry Christmas everyone!\n\n**Bugfixes:**\n\n*   Fixed a very longstanding (!) issue where [.click()](https://docs.cypress.io/api/commands/click) would fail to click the center coordinates of elements with style `display: inline`. Cypress would instead report that the element was being covered causing the error: `cy.click() failed because this element is being covered by another element`. Fixes [#210](https://github.com/cypress-io/cypress/issues/210).\n*   We now no longer abort XHR's which have their `.abort()` method called but are already complete. This fixes an edge case where complete XHR's were having their `disposer` function called in frameworks like `rxJS` which lead to Cypress accidentally re-aborting the XHR's after they were complete. Fixes [#761](https://github.com/cypress-io/cypress/issues/761).\n*   Fixed issues involving XHRs displaying as 'aborted' in the Cypress Command Log when they were not actually aborted. Fixes [#1652](https://github.com/cypress-io/cypress/issues/1652).\n*   We no longer abort XHR request during the page's `unload` event and allow the browser to handle natively calling abort. Fixes [#2968](https://github.com/cypress-io/cypress/issues/2968).\n*   Fixed an issue where Cypress's `devDependencies` were being included in the Windows binary. Fixes [#2896](https://github.com/cypress-io/cypress/issues/2896).\n*   Fixed issue where XHR's `onreadystatechange` was not receiving the proper event arguments. Fixes [#2925](https://github.com/cypress-io/cypress/issues/2925).\n*   We now properly strip leading paths of files on uncaught errors from Windows OS. Fixes [#2936](https://github.com/cypress-io/cypress/issues/2936).\n\n**Misc:**\n\n*   Removed the word 'already' from the Cypress install message in order to be less confusing. Addresses [#2754](https://github.com/cypress-io/cypress/issues/2754).\n*   Fixed incomplete type definitions for [cy.request](https://docs.cypress.io/api/commands/request). Fixes [#2305](https://github.com/cypress-io/cypress/issues/2305).\n\n**Dependency Updates**\n\n*   Upgraded `commit-info` from `2.0.0` to `2.1.1`. Fixes [#2848](https://github.com/cypress-io/cypress/issues/2848).\n*   Upgraded `lodash` from `4.17.10` to `4.17.11`. Fixes [#2929](https://github.com/cypress-io/cypress/issues/2929).\n\n## 3.1.3[​](#3-1-3 \"Direct link to 3.1.3\")\n\n_Released 12/03/2018_\n\n**Bugfixes:**\n\n*   Fixed regression introduced in [3.1.1](https://docs.cypress.io/guides/references/changelog#3-1-1) with `requestAnimationFrame` that caused some animations not to run. Fixes [#2725](https://github.com/cypress-io/cypress/issues/2725).\n*   Fixed regression introduced in [3.1.2](https://docs.cypress.io/guides/references/changelog#3-1-2) that caused DOM elements passed to [cy.wrap()](https://docs.cypress.io/api/commands/wrap) to no longer yield the proper jQuery array instance. Fixes [#2820](https://github.com/cypress-io/cypress/issues/2820).\n*   Fixed regression causing invocations of [`cy.clock()`](https://docs.cypress.io/api/commands/clock) to error on subsequent tests. Fixes [#2850](https://github.com/cypress-io/cypress/issues/2850).\n*   Fixed issue where a fix included in [3.1.2](https://docs.cypress.io/guides/references/changelog#3-1-2) did not pass the `windowsHide` argument to the proper options. Fixes [#2667](https://github.com/cypress-io/cypress/issues/2667) and [#2809](https://github.com/cypress-io/cypress/issues/2809).\n*   Passing [`.check({ force: true })`](https://docs.cypress.io/api/commands/check) no longer requires the checkbox or radio to be visible. Fixes [#1376](https://github.com/cypress-io/cypress/issues/1376).\n\n**Misc**\n\n*   Updated types to support promises as arguments within [cy.wrap](https://docs.cypress.io/api/commands/wrap). Fixes [#2807](https://github.com/cypress-io/cypress/pull/2807).\n*   We now expose all jQuery methods and values onto [`Cypress.$`](https://docs.cypress.io/api/utilities/$). Fixes [#2830](https://github.com/cypress-io/cypress/issues/2830).\n*   [cy.wait()](https://docs.cypress.io/api/commands/wait) now accepts a separate timeout option for `requestTimeout` and `responseTimeout`. Fixes [#2446](https://github.com/cypress-io/cypress/issues/2446).\n\n**Documentation Changes:**\n\n*   Added `requestTimeout` and `responseTimeout` options to [cy.wait()](https://docs.cypress.io/api/commands/wait)\n*   Added 'History' table to [cy.wait()](https://docs.cypress.io/api/commands/wait)\n*   Added 'Alias' for assertions that are aliases of each other to [Assertions](https://docs.cypress.io/guides/references/assertions)\n\n**Dependency Updates**\n\n*   Upgraded nodemon from `^1.8.1` to `^1.8.7`. Fixes [#2864](https://github.com/cypress-io/cypress/pull/2864).\n*   Upgraded request from `^2.27.0` and `^2.28.0` to `^4.0.0`, Fixes [#2455](https://github.com/cypress-io/cypress/issues/2455).\n\n## 3.1.2[​](#3-1-2 \"Direct link to 3.1.2\")\n\n_Released 11/18/2018_\n\n**Bugfixes:**\n\n*   Fixed a regression caused in `3.1.1` where we attempted to set a property on an invalid cookie sent from a server. Fixes [#2724](https://github.com/cypress-io/cypress/issues/2724).\n*   Fixed Cypress not correctly aborting long running connections (such as server sent events) on proxied requests. Fixes [#2612](https://github.com/cypress-io/cypress/issues/2612).\n*   Fixed bug where tests were failing due to assertions causing Cypress to accidentally iterate through cross-origin iframes. If you were seeing \"random\" cross-origin errors, this likely fixes those issues. Fixes [#2784](https://github.com/cypress-io/cypress/issues/2784).\n*   Fixed incorrectly setting `charCode` and `keyCode` when using [`.type()`](https://docs.cypress.io/api/commands/type) on a few different special characters such as `{`. Fixes [#2105](https://github.com/cypress-io/cypress/issues/2105).\n*   Fixed another regression in `3.1.1` where passing `undefined` to a `setTimeout` caused Cypress to error. Fixes [#2719](https://github.com/cypress-io/cypress/issues/2719).\n*   Fixed a bug in node core where Cypress would not show up in `Windows` for users on `node >= 11`. Fixes [#2667](https://github.com/cypress-io/cypress/issues/2667).\n*   Fixed a bug with trashing assets in linux that caused recursive `.Trash` files to show up. We now have opted to actually `rm -rf` the files in linux because trashing is too inconsistent between linux distros. Fixes [#2742](https://github.com/cypress-io/cypress/issues/2742).\n\n**Misc**\n\n*   Added type definitions for `Cypress.moment()`. Fixes [#2746](https://github.com/cypress-io/cypress/issues/2746).\n*   We now display better error messages in the CLI when runs exceed billing limits. Fixes [#1689](https://github.com/cypress-io/cypress/issues/1689).\n\n**Dependency Updates**\n\n*   Removed `progress` [#2733](https://github.com/cypress-io/cypress/issues/2733).\n\n## 3.1.1[​](#3-1-1 \"Direct link to 3.1.1\")\n\n_Released 11/2/2018_\n\n**Features:**\n\n*   You can now pass a `flag` option to [cy.writeFile()](https://docs.cypress.io/api/commands/writefile). The [following flags](https://nodejs.org/api/fs.html#fs_file_system_flags) are available. Fixes [#1249](https://github.com/cypress-io/cypress/issues/1249).\n*   There is a new [CYPRESS\\_DOWNLOAD\\_MIRROR](https://docs.cypress.io/guides/references/advanced-installation#Mirroring) environment variable for installing Cypress at a mirror url. Fixes [#2609](https://github.com/cypress-io/cypress/pull/2609).\n*   The [Module API](https://docs.cypress.io/guides/guides/module-api) now returns the `runUrl` from `cypress.run()`. Fixes [#2596](https://github.com/cypress-io/cypress/issues/2596).\n*   Specs now properly display as focused when navigating through specs via the keyboard. Fixes [#2273](https://github.com/cypress-io/cypress/pull/2273).\n*   Tasks registered in the plugins file with the 'task' event are merged with any tasks registered by previous calls to `on('task')`, instead of overwriting the previous tasks. Fixes [#2284](https://github.com/cypress-io/cypress/issues/2284).\n\n**Bugfixes:**\n\n*   Fixed a bug where Cypress would error when a secure cookie flag was set and then expired from an HTTPS url without the subsequent secure flag. Due to the way Cypress was constructing the url, this would fail to actually remove the cookie. Fixes [#1264](https://github.com/cypress-io/cypress/issues/1264), [#1321](https://github.com/cypress-io/cypress/issues/1321), [#1799](https://github.com/cypress-io/cypress/issues/1799).\n*   We now truncate filenames for screenshots to not exceed 255 characters in length. Previously there were cases where the screenshot filename would exceed 255 characters and error. Fixes [#2403](https://github.com/cypress-io/cypress/issues/2403) and [#2665](https://github.com/cypress-io/cypress/issues/2665).\n*   Fixed issue when using [cy.writeFile()](https://docs.cypress.io/api/commands/writefile) and passing an object to a `.json` file. The object is now correctly written to the JSON file instead of a string. Fixes [#2373](https://github.com/cypress-io/cypress/pull/2373).\n*   We updated how we handle [trashAssetsBeforeRuns](https://docs.cypress.io/guides/references/configuration#Screenshots) behavior. We now trash the contents of the [screenshotsFolder](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) and [videosFolder](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) directories instead of trashing the directories themselves. This helps maintain any file access permissions for the directories. Fixes [#1943](https://github.com/cypress-io/cypress/issues/1943) and [#2600](https://github.com/cypress-io/cypress/issues/2600).\n*   Fixed bug where mocked Dates using [cy.clock()](https://docs.cypress.io/api/commands/clock) would not be an instance of `Date`. Fixes [#2570](https://github.com/cypress-io/cypress/issues/2570).\n*   Directories within specs whose names contain `.` are now correctly read as directories instead of spec files within the Test Runner. Fixes [#2423](https://github.com/cypress-io/cypress/issues/2423).\n*   Cypress no longer automatically takes screenshots of skipped tests. Fixes [#2368](https://github.com/cypress-io/cypress/issues/2368).\n*   Fixed an issue where returning/resolving `undefined` from a [cy.task()](https://docs.cypress.io/api/commands/task) handler resulted in an incorrect runtime error. Fixes [#2553](https://github.com/cypress-io/cypress/issues/2553).\n*   Update [modifyObstructiveCode](https://docs.cypress.io/guides/references/configuration#modifyObstructiveCode) to account for framebusting techniques that use `window.frameElement`, so that Applications using this technique will run properly in Cypress. Fixes [#2582](https://github.com/cypress-io/cypress/issues/2582).\n*   Fixed bug where only the first DOM element of an array of DOM elements would be blacked out after being passed as argument to `blackout` within [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot). Fixes [#2508](https://github.com/cypress-io/cypress/issues/2508).\n*   We fixed an issue involving timers after running [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot). Fixes [#2432](https://github.com/cypress-io/cypress/issues/2432).\n*   The Test Runner now retries node-originated errors from our internal API requests. Fixes [#2341](https://github.com/cypress-io/cypress/issues/2341)\n*   Fixed issue with multiple `readyStateChanges` with the same `readyState`. Fixes [#1150](https://github.com/cypress-io/cypress/issues/1150).\n*   Fixed Type error being thrown for users using TypeScript 3. Fixes [#2363](https://github.com/cypress-io/cypress/issues/2363).\n\n**Misc**\n\n*   We are now collecting more environment variables from runs when run in Semaphore, GitLab, Bitbucket, Team Foundation Server, Codeship, and Shippable. Fixes [#2460](https://github.com/cypress-io/cypress/issues/2460), [#2358](https://github.com/cypress-io/cypress/issues/2358), [#2343](https://github.com/cypress-io/cypress/issues/2343), and [#2453](https://github.com/cypress-io/cypress/issues/2453).\n*   The Test Runner's search now resets when switching between projects. Fixes [#2512](https://github.com/cypress-io/cypress/issues/2512).\n*   Fixed internal Cypress tests. Fixes [#2606](https://github.com/cypress-io/cypress/issues/2606).\n*   Replaced use of `new Buffer` with `Buffer.from`. Fixes [#2626](https://github.com/cypress-io/cypress/issues/2626).\n*   Allowed `autoScrollingEnabled` to be saved in `state.json`. Fixes [#2476](https://github.com/cypress-io/cypress/issues/2476).\n*   Fixed internal test error `beforeSpecRun is not a function`. Fixes [#2401](https://github.com/cypress-io/cypress/issues/2401).\n*   Switched our internal tests to use CircleCI workspaces. Fixes [#2398](https://github.com/cypress-io/cypress/issues/2398).\n*   Update TypeScript definition for [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) to include screenshot specific options. Fixes [#2654](https://github.com/cypress-io/cypress/issues/2654).\n*   URLs printed within the CLI will now display as the color blue. Fixes [#2493](https://github.com/cypress-io/cypress/issues/2493).\n*   We began bulk converting some of our codebase from CoffeeScript to JavaScript. Fixes [#2686](https://github.com/cypress-io/cypress/issues/2686) and [#2687](https://github.com/cypress-io/cypress/issues/2687).\n*   We updated some of our internal ESLint rules to be more strict and also to help with CoffeeScript to JavaScript conversions. Fixes [#2688](https://github.com/cypress-io/cypress/issues/2688).\n\n**Documentation Changes:**\n\n*   Added `flag` option to [`cy.writeFile()` doc](https://docs.cypress.io/api/commands/writefile).\n*   Added `runUrl` to returned run in [Module API doc](https://docs.cypress.io/guides/guides/module-api).\n*   Documented new `CYPRESS_DOWNLOAD_MIRROR` flag and rewrote advanced install instructions to be clearer in [Installing Cypress doc](https://docs.cypress.io/guides/references/advanced-installation).\n\n**Dependency Updates**\n\n*   Upgraded common-tags from `^1.4.0` to `^1.8.0` [#2415](https://github.com/cypress-io/cypress/pull/2415)\n*   Upgraded @cypress/browserify-preprocessor from `1.1.0` to `1.1.1` [#2513](https://github.com/cypress-io/cypress/issues/2513)\n*   Upgraded lolex from `^1.5.2` to `^3.0.0` [#2570](https://github.com/cypress-io/cypress/issues/2570)\n*   Upgraded @types/jquery from `3.2.16` to `3.3.6` [#2363](https://github.com/cypress-io/cypress/issues/2363)\n*   Upgraded zunder from `5.6.5` to `6.1.1` [#2541](https://github.com/cypress-io/cypress/issues/2541)\n\n## 3.1.0[​](#3-1-0 \"Direct link to 3.1.0\")\n\n_Released 8/13/2018_\n\n**Summary:**\n\n*   Cypress can now run tests in parallel across multiple virtual machines, or can be parallelized on a single machine. Cypress will automatically figure out, detect, and load balance all of your specs in the fastest and most efficient way possible. There is no configuration other than passing a `--parallel` flag and spinning up multiple machines on your CI provider. From our experiments you can expect to see approximately 40% reduction in overall run time **per machine** you add. However, attempting to run in parallel on a single machine requires server grade hardware with dozens (or even hundreds) of CPU's and GB of RAM to run efficiently. A much better and simpler approach is to use a cluster of docker containers that are all isolated from each other. Any standard CI service (CircleCI, TravisCI, etc) comes with the ability to do this. We automatically tap into their environment variables to make parallelization possible without you having to configure anything.\n*   Beyond parallelization, you now have the ability to group multiple runs with each other so that they show up together (grouped) in the Dashboard. This enables you to test different applications, groups of specs, or different environments (like development, staging, production) and see all of the results together. We know how important cross browser testing is to everyone, so we built this to lead directly into aggregating the results of multiple browsers into a single run.\n*   The Dashboard Service has been updated to show you more visual information about what happened during a run. You can see how specs were parallelized and you can calculate the effect of adding or removing machines to help reduce the overall run time.\n\n**Features:**\n\n*   `cypress run` accepts a new [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag to run specs in parallel. Fixes [#1690](https://github.com/cypress-io/cypress/issues/1690) and [#64](https://github.com/cypress-io/cypress/issues/64) and [#2297](https://github.com/cypress-io/cypress/issues/2297).\n*   `cypress run` accepts a new [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) flag to group multiple spec files within a single run. Fixes [#2169](https://github.com/cypress-io/cypress/issues/2169)\n*   `cypress run` accepts a new [`--ci-build-id`](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt) flag. Fixes [#2153](https://github.com/cypress-io/cypress/issues/2153).\n\n**Bugfixes:**\n\n*   We've finally tracked down the source of specs \"hanging\" and failing to start when running Electron. We finally tracked it down to a bug in Electron itself with setting `menu` when using offscreen rendering. Fixes [#2322](https://github.com/cypress-io/cypress/issues/2322) and [#2294](https://github.com/cypress-io/cypress/issues/2294) and [#1235](https://github.com/cypress-io/cypress/issues/1235) and [#1333](https://github.com/cypress-io/cypress/issues/1333).\n*   Clicking on svg elements is now working. 3.0.2 introduced a bug that would throw an 'illegal invocation' error. Fixes [#2245](https://github.com/cypress-io/cypress/issues/2245) and [#2252](https://github.com/cypress-io/cypress/issues/2252) and [#2258](https://github.com/cypress-io/cypress/issues/2258) and [#2277](https://github.com/cypress-io/cypress/issues/2277) and [#2288](https://github.com/cypress-io/cypress/issues/2288).\n*   Fixed a regression in `3.0.2` that caused typing `{enter}` not to submit a form when there were `<button>` elements other than `type='submit'`. Fixes [#2261](https://github.com/cypress-io/cypress/issues/2261) and [#2326](https://github.com/cypress-io/cypress/issues/2326).\n*   Fixed a small visual bug where failed commands were not aligned to other commands. Fixes [#2314](https://github.com/cypress-io/cypress/issues/2314).\n*   Fixes a race condition where async electron browser commands came in after the renderer had been destroyed, causing failures. Fixes [#2321](https://github.com/cypress-io/cypress/issues/2321).\n\n**Misc**\n\n*   When recording to the Dashboard Service, we now provide estimated durations per spec directly within the standard output, as long as the spec has had enough run history for this to be determined. Fixes [#2276](https://github.com/cypress-io/cypress/issues/2276).\n*   When using the new [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) or [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) feature, we now visually indicate that to you in the standard output when recording. Fixes [#2275](https://github.com/cypress-io/cypress/issues/2275).\n*   We have added support for more CI providers to automatically detect and show more relevant information in the Dashboard, instead of showing 'Unknown'. Fixes [#2146](https://github.com/cypress-io/cypress/issues/2146).\n*   We have added better checks and reliability for detecting runs in Jenkins. Fixes [#1990](https://github.com/cypress-io/cypress/issues/1990).\n*   The built in [`cypress-browserify-preprocessor`](https://github.com/cypress-io/cypress-browserify-preprocessor) was bumped to `1.1.0`. This supports more JavaScript features by default, including async/await, object rest spread, and class properties. Fixes [#2254](https://github.com/cypress-io/cypress/issues/2254).\n*   [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) now creates a new browser profile per run per browser, but keeps the same browser profile when run via [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open). This means you can run Cypress locally over multiple processes and the browser profiles will not conflict with each other. Fixes [#1566](https://github.com/cypress-io/cypress/issues/1566).\n*   The Desktop-GUI has been updated to get the new routes provided by the Cypress API for runs. Fixes [#2189](https://github.com/cypress-io/cypress/issues/2189).\n*   Cypress now retries multiple times (with a backoff strategy) when communicating with our API fails while recording runs. This will provide better feedback in situations when the API is temporarily unavailable. Fixes [#1590](https://github.com/cypress-io/cypress/issues/1590).\n*   When Cypress retries due to an API timeout or failure it now displays a very nice message indicating to you the delay and number of retries left. Fixes [#2280](https://github.com/cypress-io/cypress/issues/2280).\n*   We've added parallelization to our own internal tests for the driver and the desktop-gui. We've been able to reduce the number of concurrent instances our tests use by 4, and shaved about 6 minutes off of each build. Faster with less resources. Fixes [#2325](https://github.com/cypress-io/cypress/issues/2325).\n\n**Documentation Changes:**\n\n*   [Added `Parallelization` doc.](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization)\n*   [Update `Dashboard Service` doc with new screenshots and run sections.](https://docs.cypress.io/guides/cloud/introduction)\n*   [Update `Command Line` doc with new flags and alphabetized flags.](https://docs.cypress.io/guides/guides/command-line)\n\n## 3.0.3[​](#3-0-3 \"Direct link to 3.0.3\")\n\n_Released 7/30/2018_\n\n**Bugfixes:**\n\n*   Reverted the Chrome argument that disabled `RootLayerScrolling` which was used to prevent the application under test from \"shaking\" due to a bug in versions 66 and 67. This workaround inadvertently created a different and much more severe bug in Chrome 68 that would miscalculate pointer coordinates. This led to Cypress giving confusing errors about elements being covered up on action. This is still a bug in Chrome, and is fixed in Canary but has not yet been released to the stable Chrome 68 channel. Nevertheless, removing the `RootLayerScrolling` flag does fix it. We did several experiments to try to ensure that the \"shaking\" behavior does not exhibit itself in Chrome 68. We have limited the `--disable-blink-features=RootLayerScrolling` flag to Chrome 66 and Chrome 67. Fixes [#2223](https://github.com/cypress-io/cypress/issues/2223) and [#2215](https://github.com/cypress-io/cypress/issues/2215) and [#2037](https://github.com/cypress-io/cypress/issues/2037).\n*   Fixed another bug with Chrome that caused the `chromeWebSecurity: false` option to not be respected. This was due to Chrome progressively rolling out trials of a new option that attempts to isolate sites (and iframes) in their own child process if their origins are different. Fixes [#1951](https://github.com/cypress-io/cypress/issues/1951) and [#2001](https://github.com/cypress-io/cypress/issues/2001) and [#715](https://github.com/cypress-io/cypress/issues/715).\n*   Fixed Cypress hanging in CI due to excessive and unnecessary globbing. We finally tracked down this issue which made it appear as if Cypress was \"hanging\" after closing a spec file and then attempting to open the next one. Fixes [#2183](https://github.com/cypress-io/cypress/issues/2183) and [#1905](https://github.com/cypress-io/cypress/issues/1905) and [#1912](https://github.com/cypress-io/cypress/issues/1912).\n*   We are now properly serializing nested object arguments when using the [Module API](https://docs.cypress.io/guides/guides/module-api) via `cypress.open()` or `cypress.run()`. Passing nested objects in `reporterOptions` now works correctly. This is especially useful when using `mocha-multi-reporters`. In addition to fixing the [Module API](https://docs.cypress.io/guides/guides/module-api), we are now also properly handling nested arguments from the [Command Line](https://docs.cypress.io/guides/guides/command-line). In order to pass nested objects within CLI params you must pass stringified JSON. This is useful for properties such as `blacklistHosts`. Fixes [#1348](https://github.com/cypress-io/cypress/issues/1348) and [#1357](https://github.com/cypress-io/cypress/issues/1357) and [#2221](https://github.com/cypress-io/cypress/issues/2221).\n*   Fixed a bug causing screenshots saved via [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) to be in different folders when you ran using [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open) vs [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) . Fixes [#2091](https://github.com/cypress-io/cypress/issues/2091).\n*   Fixed bugs with Electron losing focus when running headlessly via [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) after navigation. Now the browser will always act as if it is focused no matter what and in all situations when running headlessly. If you were seeing focus related problems when running headlessly, this should fix them. Fixes issue [#2190](https://github.com/cypress-io/cypress/issues/2190).\n*   Fixed using when using [cy.click()](https://docs.cypress.io/api/commands/click) on an element that bound to the `focus` event while the browser was currently _out of focus_. We have now normalized **all focus and blur events** to behave the same as if the browser is always in focus. This should fix the other batch of `blur` and `focus` issues that users have been experiencing. Fixes [#549](https://github.com/cypress-io/cypress/issues/549) and [#2198](https://github.com/cypress-io/cypress/issues/2198).\n*   Fixed the vast majority of known issues with [.type()](https://docs.cypress.io/api/commands/type). Fixes [#1241](https://github.com/cypress-io/cypress/issues/1241).\n*   Using [.type()](https://docs.cypress.io/api/commands/type) on an input of type `email` or `number` will no longer fire unnecessary additional `blur` and `focus` events. Fixes [#2210](https://github.com/cypress-io/cypress/issues/2210).\n*   Fixed [.type()](https://docs.cypress.io/api/commands/type) breaking on chains when passing the same `options` references. Fixes [#365](https://github.com/cypress-io/cypress/issues/365).\n*   Fixed an issue with [.clear()](https://docs.cypress.io/api/commands/clear) not behaving the same as `cy.type('{selectall}{backspace}')`. Fixes [#420](https://github.com/cypress-io/cypress/issues/420).\n*   Fixed a bug with issuing an additional `blur` and `click` event when chaining `.clear().type(...)`. Fixes [#593](https://github.com/cypress-io/cypress/issues/593).\n*   Fixed many issues with typing into `[contenteditable]` elements. WYSIWYG, [Draft.js](https://draftjs.org/) based, and other HTML editors now work correctly. Fixes [#596](https://github.com/cypress-io/cypress/issues/596) and [#1686](https://github.com/cypress-io/cypress/issues/1686) and [#2096](https://github.com/cypress-io/cypress/issues/2096).\n*   The caret now correctly moves on `[contenteditable]` elements. Fixes [#1108](https://github.com/cypress-io/cypress/issues/1108).\n*   Fixed [.type()](https://docs.cypress.io/api/commands/type) inserting a rogue `<br>` tag after the first letter in `[contenteditable]` elements. Fixes [#1926](https://github.com/cypress-io/cypress/issues/1926).\n*   Fixed issue where change events with [.type()](https://docs.cypress.io/api/commands/type) would not fire correctly for many more situations and edge cases. Fixes [#651](https://github.com/cypress-io/cypress/issues/651).\n*   Fixed issues with typing into JS based text-mask plugins. Basically anything that would alter the `.value` in response to certain events now works correctly. Fixes [#940](https://github.com/cypress-io/cypress/issues/940) and [#1684](https://github.com/cypress-io/cypress/issues/1684).\n*   Using [.clear()](https://docs.cypress.io/api/commands/clear) on an input with a `maxlength` attribute now works. Fixes [#1002](https://github.com/cypress-io/cypress/issues/1002) and [#2056](https://github.com/cypress-io/cypress/issues/2056).\n*   Fixed issues with [.type()](https://docs.cypress.io/api/commands/type) not firing the `change` event on `input[type=number]`. Fixes [#1171](https://github.com/cypress-io/cypress/issues/1171).\n*   Fixed other event related issues with [.type()](https://docs.cypress.io/api/commands/type) that were not firing correctly. Fixes [#1209](https://github.com/cypress-io/cypress/issues/1209).\n*   Fixed even more issues with [.type()](https://docs.cypress.io/api/commands/type) not inserting characters on `input[type=number]`. Fixes [#1381](https://github.com/cypress-io/cypress/issues/1381).\n*   Fixed not being able to type negative numbers into `input[type=number]` elements. Fixes [#2173](https://github.com/cypress-io/cypress/issues/2173).\n*   Fixed `selectionStart` and `selectionEnd` with [.type()](https://docs.cypress.io/api/commands/type) when using `{leftarrow}` or `{rightarrow}`. Fixes [#1234](https://github.com/cypress-io/cypress/issues/1234).\n*   Fixed not being able to type into a `datetime-local` input. Fixes [#1366](https://github.com/cypress-io/cypress/issues/1366).\n*   Calling [.focus()](https://docs.cypress.io/api/commands/focus) or [.blur()](https://docs.cypress.io/api/commands/blur) on [cy.window()](https://docs.cypress.io/api/commands/window) no longer fires blur events on the `activeElement` or causes it to become `body`. Fixes [#2234](https://github.com/cypress-io/cypress/issues/2234).\n*   Using `cy.get('body').click()` now correctly changes the `activeElement` back to `body` and causes the existing `activeElement` to receive `blur`. Fixes [#2236](https://github.com/cypress-io/cypress/issues/2236).\n\n**Misc:**\n\n*   We've loosened up the restrictions surrounding what we consider a typeable element. You can now type into inputs with invalid `type` attributes because the browser does still consider them regular `text` inputs and allows you to type into them. Fixes [#586](https://github.com/cypress-io/cypress/issues/586).\n*   Using `{uparrow}` or `{downarrow}` with [.type()](https://docs.cypress.io/api/commands/type) on an `input[type=number]` element now increments or decrements the number configured via the `step` attribute. Fixes [#2110](https://github.com/cypress-io/cypress/issues/2110).\n*   Using `{uparrow}` or `{downarrow}` with [.type()](https://docs.cypress.io/api/commands/type) now correctly moves the cursor on `textarea` or `[contenteditable]` elements. Fixes [#2187](https://github.com/cypress-io/cypress/issues/2187).\n*   You can now use [.focus()](https://docs.cypress.io/api/commands/focus) or [.blur()](https://docs.cypress.io/api/commands/blur) on `cy.get('body')`. Fixes [#2235](https://github.com/cypress-io/cypress/issues/2235).\n*   Bumped the version in `junit` reporter dep from `1.12.1` to `1.17.0` which adds a few new features. Fixes [#2238](https://github.com/cypress-io/cypress/issues/2238).\n*   Bumped deps that `npm audit` was yelling about. Fixes [#1701](https://github.com/cypress-io/cypress/issues/1701).\n*   Runs showing up in the `Runs` tab now more closely match how they display in the Dashboard. Fixes [#2060](https://github.com/cypress-io/cypress/issues/2060).\n*   Added more debug logs. Fixes [#2108](https://github.com/cypress-io/cypress/issues/2108).\n*   When recording to the Dashboard we now more accurately collect commit details when it is missing from the local `git` data. Fixes [#2129](https://github.com/cypress-io/cypress/issues/2129) and [#2073](https://github.com/cypress-io/cypress/issues/2073).\n*   Updated build in example kitchen sink to `1.0.2`. Fixes [#2139](https://github.com/cypress-io/cypress/issues/2139).\n*   Updated the json-schema describing `videoCompression`. Allowing it to be a boolean. Fixes [#2140](https://github.com/cypress-io/cypress/issues/2140).\n\n**Documentation Changes:**\n\n*   [New \"Module API\" doc](https://docs.cypress.io/guides/guides/module-api)\n\n## 3.0.2[​](#3-0-2 \"Direct link to 3.0.2\")\n\n_Released 6/28/2018_\n\n**Bugfixes:**\n\n*   Screenshots taken with [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) on 2x DPI are now taken at the correct full size. Fixes [#1857](https://github.com/cypress-io/cypress/issues/1857) and [#2018](https://github.com/cypress-io/cypress/issues/2018).\n*   Windows users no longer exit with `EPIPE` errors when running `cypress run` in newer versions of Node. Fixes [#1841](https://github.com/cypress-io/cypress/issues/1841) and [#2044](https://github.com/cypress-io/cypress/issues/2044).\n*   Fixed issue where applications programmatically stealing focus would lead to slow runs in Electron when running via `cypress run`. [#1909](https://github.com/cypress-io/cypress/issues/1909) and [#1892](https://github.com/cypress-io/cypress/issues/1892).\n*   Electron no longer reports the browser as out of focus when running via `cypress run`. Fixes [#1939](https://github.com/cypress-io/cypress/issues/1939).\n*   Modified the `document.hasFocus()` method to return `true` if the top window (Cypress window) is in focus. This should now correctly match how your application behaves outside of Cypress. Fixes [#1940](https://github.com/cypress-io/cypress/issues/1940).\n*   Fixed issue where Cypress would unnecessarily scroll when attempting to locate elements with `position: sticky`. Fixes [#1475](https://github.com/cypress-io/cypress/issues/1475).\n*   Fixed a bug where changing the [integrationFolder](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) in Windows would lead to errors with plugins. Fixes [#1704](https://github.com/cypress-io/cypress/issues/1704).\n*   Cypress no longer crashes when a 3rd party server sends invalid `gzip` content. Also fixed issues with incorrectly gunzipping multibyte characters which would potentially lead to serving invalid HTML or JS. Fixes [#1396](https://github.com/cypress-io/cypress/issues/1396) and [#1756](https://github.com/cypress-io/cypress/issues/1756).\n*   The `--silent` flag should now be respected during `npm install cypress` on all OSes. Fixes [#817](https://github.com/cypress-io/cypress/issues/817).\n*   Corrected a typo in the CLI for a warning message. Fixes [#2038](https://github.com/cypress-io/cypress/issues/2038).\n*   Fixed some areas of the Desktop GUI that did not display path names correctly in Windows. Fixes [#1830](https://github.com/cypress-io/cypress/issues/1830).\n*   The `pluginsFile` now supports an absolute path instead of just a relative one. Fixes [#1837](https://github.com/cypress-io/cypress/issues/1837).\n*   Fixed a regression introduced in `3.x.x` where application code that used `setTimeout` with a string argument would see the error `fn.apply is not a function`. Fixes [#1854](https://github.com/cypress-io/cypress/issues/1854).\n*   Fixed issue where preprocessor errors were being swallowed. Fixes [#1877](https://github.com/cypress-io/cypress/issues/1877).\n*   Fixed issue where Cypress would hang indefinitely when starting a new spec when in `cypress run` mode. Additionally we have optimized the code path to not read in the local `state.json` unnecessarily. Fixes [#2013](https://github.com/cypress-io/cypress/issues/2013) and [#1912](https://github.com/cypress-io/cypress/issues/1912) and [#1905](https://github.com/cypress-io/cypress/issues/1905) and [#1890](https://github.com/cypress-io/cypress/issues/1890).\n*   Fixed a couple regressions in the Dashboard where timed out runs stayed \"Pending\" forever. Fixes [#1891](https://github.com/cypress-io/cypress/issues/1891) and [#1952](https://github.com/cypress-io/cypress/issues/1952).\n*   Fixed another Dashboard regression where an error would throw when recording tests and sending a large list of specs. Fixes [#1901](https://github.com/cypress-io/cypress/issues/1901).\n*   Fixed issue where videos would not be recorded when an object was returned from `before:browser:launch` when in the Electron browser. Fixes [#1992](https://github.com/cypress-io/cypress/issues/1992).\n*   Fixed an issue where Cypress would inject content into the `<header>` tag instead of the `<head>` tag. Fixes [#2026](https://github.com/cypress-io/cypress/issues/2026).\n*   Fixed an oversight where a specific framebusting check was not being properly stripped and removed by the default config option [modifyObstructiveCode](https://docs.cypress.io/guides/references/configuration#Browser). Fixes [#2030](https://github.com/cypress-io/cypress/issues/2030) and [#2059](https://github.com/cypress-io/cypress/issues/2059).\n*   Fixed icons visually shifting when tests were running in the Test Runner. Fixes [#1983](https://github.com/cypress-io/cypress/issues/1983).\n*   Server sent events now _finally_ work correctly in Cypress. Fixes [#1440](https://github.com/cypress-io/cypress/issues/1440) and [#1111](https://github.com/cypress-io/cypress/issues/1111).\n*   Time traveling snapshots now preserve the styles of empty `<style>` tags with programmatically inserted CSS rules. Fixes [#1226](https://github.com/cypress-io/cypress/issues/1226).\n\n**Misc:**\n\n*   There are now several new CLI commands for interacting with the binary cache: [cypress cache path](https://docs.cypress.io/guides/guides/command-line#cypress-cache-path), [cypress cache list](https://docs.cypress.io/guides/guides/command-line#cypress-cache-list), and [cypress cache clear](https://docs.cypress.io/guides/guides/command-line#cypress-cache-clear). Fixes [#1856](https://github.com/cypress-io/cypress/issues/1856).\n*   We've added a new CLI flag: `--no-exit` for [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) to keep the browser open after the tests finish running. Fixes [#1871](https://github.com/cypress-io/cypress/issues/1871).\n*   The [CLI](https://docs.cypress.io/guides/guides/command-line) now respects config values and environment variables put in your `.npmrc` file. Fixes [#1399](https://github.com/cypress-io/cypress/issues/1399) and [#1853](https://github.com/cypress-io/cypress/issues/1853).\n*   Significantly improved the performance of taking screenshots. [#1863](https://github.com/cypress-io/cypress/issues/1863).\n*   Node module dependencies updated. Fixes [#1674](https://github.com/cypress-io/cypress/issues/1674) and [#1942](https://github.com/cypress-io/cypress/issues/1942).\n*   The bundled version of FFmpeg has now been bumped from `3.x.x` to `4.x.x`. This may help with some issues users were experiencing when recording videos. Fixes [#1972](https://github.com/cypress-io/cypress/issues/1972).\n*   Added more debug logs to FFmpeg to determine why FFmpeg compression sometimes causes Cypress to crash (mostly while running in Travis CI). Fixes [#1971](https://github.com/cypress-io/cypress/issues/1971).\n*   Several improvements to TypeScript typings. Fixes [#1881](https://github.com/cypress-io/cypress/issues/1881) and [#2007](https://github.com/cypress-io/cypress/issues/2007) and [#1899](https://github.com/cypress-io/cypress/issues/1899) and [#1902](https://github.com/cypress-io/cypress/issues/1902) and [#1897](https://github.com/cypress-io/cypress/issues/1897) and [#1907](https://github.com/cypress-io/cypress/issues/1907).\n*   We improved error logging and the user experience around [cypress verify](https://docs.cypress.io/guides/guides/command-line#cypress-verify). Fixes [#1984](https://github.com/cypress-io/cypress/issues/1984).\n*   We no longer log the `skipping install` message if the Cypress binary is already installed locally. Fixes [#1985](https://github.com/cypress-io/cypress/issues/1985).\n*   Now, by default, screenshots are nested within a folder with the name of **the spec file** that is currently running. Example - the spec named `cypress/integration/foo/bar_spec.js` will save screenshots inside of this directory: `cypress/screenshots/foo/bar_spec.js/*`. Fixes [#1826](https://github.com/cypress-io/cypress/issues/1826).\n*   Passing `foo/bar/baz` as the fileName arg to [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot#Take-a-screenshot-and-save-in-a-specific-directory) inside a spec, `app.spec.js`, will now result in the screenshot being saved to a nested folder path such as: `cypress/screenshots/app.spec.js/foo/bar/baz.png`. Fixes [#1771](https://github.com/cypress-io/cypress/issues/1771) and [#668](https://github.com/cypress-io/cypress/issues/668).\n*   We now append `(failed)` to the screenshot filename of screenshots taken automatically during test failure. Fixes [#1923](https://github.com/cypress-io/cypress/issues/1923).\n*   If multiple screenshots are taken during a test that will result in the same filename, their file paths are now appended with a number, i.e. `test name (1).png`. This prevents screenshot files with the same name from being overwritten. Fixes [#1766](https://github.com/cypress-io/cypress/issues/1766).\n*   Screenshot `onAfterScreenshot` and `onBeforeScreenshot` callbacks ar enow invoked for failed tests. They include a `testFailure` property to distinguish between automatic ones and your own use of `cy.screenshot()`. Fixes [#2040](https://github.com/cypress-io/cypress/issues/2040).\n*   There's now an [`after:screenshot` plugin event](https://docs.cypress.io/api/plugins/after-screenshot-api) you can use in your `pluginsFile` to work with screenshots after they are taken. This enables you to rename them, move their location, resize them, send them to a service, etc. Fixes [#2039](https://github.com/cypress-io/cypress/issues/2039).\n*   Added `Cypress.browser` object which contains information about the currently running browser. Fixes [#1919](https://github.com/cypress-io/cypress/issues/1919) and [#1961](https://github.com/cypress-io/cypress/issues/1961).\n*   Added `Cypress.spec` object which contains information about the currently running spec. Fixes [#1918](https://github.com/cypress-io/cypress/issues/1918).\n*   URLs displayed in the Command Log during [cy.visit()](https://docs.cypress.io/api/commands/visit) are no longer arbitrarily truncated at a set width. Fixes [#1995](https://github.com/cypress-io/cypress/issues/1995).\n\n**Documentation Changes:**\n\n*   [Update `cy.screenshot()` doc to include new file naming behavior](https://docs.cypress.io/api/commands/screenshot)\n*   [Updated \"Command Line\" doc to include new cache commands](https://docs.cypress.io/guides/guides/command-line)\n*   [Added `Cypress.browser` doc.](https://docs.cypress.io/api/cypress-api/browser)\n*   [Added `Cypress.spec` doc.](https://docs.cypress.io/api/cypress-api/spec)\n*   [Added `after:screenshot` plugin event doc.](https://docs.cypress.io/api/plugins/after-screenshot-api)\n\n## 3.0.1[​](#3-0-1 \"Direct link to 3.0.1\")\n\n_Released 5/30/2018_\n\n**Bugfixes:**\n\n*   Seeded KitchenSink tests no longer fail. Fixes [#1812](https://github.com/cypress-io/cypress/issues/1812).\n*   The binary cache now correctly works and will not reinstall Cypress if an existing version is already installed. Fixes [#1813](https://github.com/cypress-io/cypress/issues/1813).\n*   Closing the `Electron` browser and then opening `Chrome` no longer causes `cy.screenshot()` to fail. Fixes [#1820](https://github.com/cypress-io/cypress/issues/1820).\n*   Fixed a bug with Windows users seeing crashes with `tty.getWindowSize is not a function`. Fixes [#1815](https://github.com/cypress-io/cypress/issues/1815) and [#1817](https://github.com/cypress-io/cypress/issues/1817).\n\n## 3.0.0[​](#3-0-0 \"Direct link to 3.0.0\")\n\n_Released 5/29/2018_\n\n**Summary:**\n\n*   There is a new [`cy.task()`](https://docs.cypress.io/api/commands/task) command that enables you to go outside the browser to perform tasks directly in `node`. This will make it easy to setup, scaffold, seed, talk to your database, or anything else useful on a back end.\n*   [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) has been rewritten from the ground up. It now takes a screenshot of **only** the application under test by default. It also can take full page screenshots or element only screenshots. This is the first step of Cypress Dashboard support for screenshot diffing.\n*   When running with `cypress run` we now run each spec file in isolation from others. We have rewritten our reporter to provide more details and provide a summary of the run at the bottom.\n*   The Dashboard has been upgraded to make it easier to understand the results of each spec run. This was done in anticipation of providing you the ability to parallelize and load balance your spec files automatically in CI.\n*   We are now capturing the performance and timings data of every test when using `--record` mode and are beginning to offer the first analytics and insights into the health of your tests on our Dashboard Service.\n*   Cypress now caches globally per version which prevents it from being installed multiple times across projects.\n\n**Breaking Changes:**\n\n*   We now run each spec file in isolation from one another. This _shouldn't_ technically break anything, but if you have set up your tests in a way that requires the state of a previous spec file, this could potentially break your tests. This will go a long ways towards reducing problems we were seeing with long runs in CI. Fixes [#431](https://github.com/cypress-io/cypress/issues/431), [#681](https://github.com/cypress-io/cypress/issues/681), [#1589](https://github.com/cypress-io/cypress/issues/1589), [#1539](https://github.com/cypress-io/cypress/issues/1539), and [#1692](https://github.com/cypress-io/cypress/issues/1692).\n*   The environment variable `CYPRESS_BINARY_VERSION` has been removed. You should use the equivalent environment variable `CYPRESS_INSTALL_BINARY` instead.\n*   The environment variable `CYPRESS_SKIP_BINARY_INSTALL` has been removed. To skip the binary install, set `CYPRESS_INSTALL_BINARY=0`.\n*   `screenshotOnHeadlessFailure` has been removed as an option in `cypress.json`. Instead you can now control this behavior directly with code by setting `screenshotOnRunFailure` to `false` within the new [Screenshot API](https://docs.cypress.io/api/cypress-api/screenshot-api). Fixes [#1140](https://github.com/cypress-io/cypress/issues/1140) and [#1754](https://github.com/cypress-io/cypress/issues/1754).\n*   `trashAssetsBeforeHeadlessRuns` has been renamed to `trashAssetsBeforeRuns` in our configuration. Fixes [#1754](https://github.com/cypress-io/cypress/issues/1754).\n*   `videoRecording` has been renamed to `video` in our configuration to be clearer and prevent confusion about recording to our Dashboard. Fixes [#562](https://github.com/cypress-io/cypress/issues/562).\n*   Cypress no longer copies screenshots and videos to artifacts for CircleCI. Copying artifacts should be left up to the user to [handle themselves in their `circle.yml` file](https://circleci.com/docs/2.0/artifacts/). Fixes [#1592](https://github.com/cypress-io/cypress/issues/1592).\n*   The standard output has been redesigned to better visualize spec files running in isolation and to be more visually appealing. This may break any specialized logic written that expected the standard output to be structured in a specific way or contain specific words. Fixes [#1588](https://github.com/cypress-io/cypress/issues/1588).\n*   [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) no longer takes a screenshot of the runner by default. Instead it will hide the runner, remove application scaling and then scroll to take a full page picture of your application.\n*   `before` and `after` hooks within a [support file](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file) now run before/after every spec file, instead of only once before/after the entire run. [#681](https://github.com/cypress-io/cypress/issues/681)\n\n**Features:**\n\n*   There is a new [`cy.task()`](https://docs.cypress.io/api/commands/task) command for executing any arbitrary `node` code.\n*   You can now run multiple specs by passing a glob to the `--spec` argument of `cypress run`. Fixes [#263](https://github.com/cypress-io/cypress/issues/263), [#416](https://github.com/cypress-io/cypress/issues/416) and [#681](https://github.com/cypress-io/cypress/issues/681).\n*   There is a new [Screenshot API](https://docs.cypress.io/api/cypress-api/screenshot-api) and new [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) options that allow you set defaults for how screenshots are captured, whether to scale your app, disable timers and animations, or which elements to black out in the screenshot. You can also set defaults for whether to automatically take screenshots when there are test failures or whether to wait for the Command Log to synchronize before taking the screenshot. Fixes [#1424](https://github.com/cypress-io/cypress/issues/1424).\n*   [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) can now be chained off of commands that yield a DOM element and will only take a screenshot that element.\n*   During install of cypress, the Cypress binary is now downloaded to a global cache. This prevents multiple projects from downloading the same Cypress version. Fixes [#1300](https://github.com/cypress-io/cypress/issues/1300).\n*   The seeded `example_spec.js` file has been replaced by an `examples` folder with several spec files. This more closely reflects the recommended use of Cypress - as smaller groups of tests split among many files that will now be run in isolation. The tests were also updated from ES5 to ES6. You can see all changes in the [`cypress-example-kitchensink` repo](https://github.com/cypress-io/cypress-example-kitchensink) Fixes [#1460](https://github.com/cypress-io/cypress/issues/1460).\n*   Cypress now watches all the `plugins file`'s entire dependency tree to make iterating on plugins easier. Fixes [#1407](https://github.com/cypress-io/cypress/issues/1407).\n*   Videos will now be saved locally with a filename named after the associated `spec` file that it represents. Fixes [#980](https://github.com/cypress-io/cypress/issues/980).\n*   The Test Runner now displays `skipped` tests differently than `pending` tests. [#244](https://github.com/cypress-io/cypress/issues/244).\n*   Standard output now displays the number of `skipped` tests within the summary output during `cypress run`. [#1559](https://github.com/cypress-io/cypress/issues/1559).\n*   The url to view the run in the Dashboard is now printed to output during `cypress run`. [#494](https://github.com/cypress-io/cypress/issues/494).\n*   We now print the browser and browser version run in the output during `cypress run`. [#833](https://github.com/cypress-io/cypress/issues/833).\n*   The build number and url to CI for tests run within [Drone](https://drone.io/) are now captured and displayed on the run within the Dashboard. [#1709](https://github.com/cypress-io/cypress/issues/1709).\n\n**Bugfixes:**\n\n*   Cypress no longer crashes when attempting to proxy a WebSocket connection that fails. Fixes [#556](https://github.com/cypress-io/cypress/issues/556).\n*   Asserting that an attribute equals a falsy value no longer fails when the value was falsy. Fixes [#831](https://github.com/cypress-io/cypress/issues/831) and [#1491](https://github.com/cypress-io/cypress/issues/1491).\n*   Snapshots now ignore stylesheets with `media=\"print\"`. Fixes [#1568](https://github.com/cypress-io/cypress/issues/1568).\n*   Fixed issue where the Cypress `window` was being returned instead of AUT's `window`. Fixes [#1436](https://github.com/cypress-io/cypress/issues/1436).\n*   The `close` event now properly fires on `file` when manually closing the browser. Fixes [#1560](https://github.com/cypress-io/cypress/issues/1560).\n*   `cypress.env.json` is now being watched for changes. Fixes [#1464](https://github.com/cypress-io/cypress/issues/1464).\n*   Fixed issue when using TypeScript that caused namespace errors to be thrown. Fixes [#1627](https://github.com/cypress-io/cypress/issues/1627).\n*   Fixed error message on [.type()](https://docs.cypress.io/api/commands/type) and [.clear()](https://docs.cypress.io/api/commands/clear) when typing into non-typeable elements or clearing non-clearable elements to accurately list the elements allowed. Fixes [#1650](https://github.com/cypress-io/cypress/issues/1650).\n*   Added Chrome flag `--disable-blink-features=RootLayerScrolling` to prevent the application under test from \"shaking\" in recent versions of Chrome. Fixes [#1620](https://github.com/cypress-io/cypress/issues/1620).\n*   Fixed issue where some TTY characters were not properly formatted in the terminal for Windows during `cypress run`. Fixes [#1143](https://github.com/cypress-io/cypress/issues/1143) and [#1550](https://github.com/cypress-io/cypress/issues/1550).\n*   Removed an extraneous error display from Electron during `cypress run` about a \"transparent titlebar\" setting. Fixes [#1745](https://github.com/cypress-io/cypress/issues/1745).\n\n**Misc:**\n\n*   We are now aggressively turning on colors when running in CI. If you're using Jenkins and **do not** have an ANSI color plugin installed, you can turn off colors with the `NO_COLOR=1` environment variable. Fixes [#1747](https://github.com/cypress-io/cypress/issues/1747) and [#1748](https://github.com/cypress-io/cypress/issues/1748).\n*   When running `cypress run --record` on forked PR's, we now detect that the Record Key is missing and do not fail the build. We will display a warning, but continue running the tests. Fixes [#1193](https://github.com/cypress-io/cypress/issues/1193).\n*   Searching in the Test Runner now filters out any non-matching folders. Fixes [#1706](https://github.com/cypress-io/cypress/issues/1706).\n*   Duplicate, subsequent logs in the Command Log are now collapsed and can be expanded to view all logs. Fixes [#1580](https://github.com/cypress-io/cypress/issues/1580).\n*   We now throw a descriptive error if an alias using [.as()](https://docs.cypress.io/api/commands/as) was defined starting with the `@` character. [#1643](https://github.com/cypress-io/cypress/issues/1643).\n*   We now pass the `--disable-device-discovery-notifications` flag automatically. This should prevent Chromium browser from automatically trying to communicate with devices in your network, such as printers, while running tests. Fixes [#1600](https://github.com/cypress-io/cypress/issues/1600).\n*   We now pass any reporter errors along and provide a stack if a custom reporter you've provided does not exist. Fixes [#1192](https://github.com/cypress-io/cypress/issues/1192).\n*   You can now pass a normal object to `cypress.open()` or `cypress.run()` through the [Module API](https://docs.cypress.io/guides/guides/module-api), just as you would from the command line. [#1442](https://github.com/cypress-io/cypress/issues/1442).\n*   Added type definitions for `Cypress.off` and `Cypress.log`. Fixes [#1110](https://github.com/cypress-io/cypress/issues/1110) and [#1591](https://github.com/cypress-io/cypress/issues/1591).\n*   Update type definitions for [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) to reflect new changes to command's options. Fixes [#1753](https://github.com/cypress-io/cypress/issues/1753).\n*   The type definition for [`.filter()`](https://docs.cypress.io/api/commands/filter) now correctly supports a function argument.\n*   The type definition for [`.scrollIntoView()`](https://docs.cypress.io/api/commands/scrollIntoView) no longer errors when passed a `duration` option. Fixes [#1606](https://github.com/cypress-io/cypress/issues/1606).\n*   `NODE_OPTIONS` environment variables now print within the `cypress:cli` logs when running in `DEBUG` mode. Although using `NODE_OPTIONS` themselves should not be used due to [#1676](https://github.com/cypress-io/cypress/issues/1676). Fixes [#1673](https://github.com/cypress-io/cypress/issues/1673).\n*   Cypress will error and exit with status 1 if no specs were found during `cypress run`. Fixes [#1585](https://github.com/cypress-io/cypress/issues/1585).\n*   We are now counting and aggregating the stats at the end of test runs separately from Mocha. Cypress considers a test to be the `it` and any accompanying `hooks` that run before or after a test. Cypress will correctly associate failures in those hooks to the test itself. We believe this more accurately models and just \"makes sense\". Fixes [#1163](https://github.com/cypress-io/cypress/issues/1163).\n*   The minimum viewport size has been lowered from `200` pixels to `20` pixels. Fixes [#1169](https://github.com/cypress-io/cypress/issues/1169) and [#1444](https://github.com/cypress-io/cypress/issues/1444).\n*   Internal changes to our API structure and communication. Fixes [#1170](https://github.com/cypress-io/cypress/issues/1170), [#1413](https://github.com/cypress-io/cypress/issues/1413), [#1415](https://github.com/cypress-io/cypress/issues/1415).\n*   We output a much more complete test results object when using cypress as a module. Fixes [#1248](https://github.com/cypress-io/cypress/issues/1248).\n*   Added keywords to Cypress npm package. Fixes [#1508](https://github.com/cypress-io/cypress/issues/1508).\n*   Centered the animating icon in the Test Runner when 'running'. Fixes [#1695](https://github.com/cypress-io/cypress/issues/1695).\n*   We made some changes to internal references of `headed` and `headless` to be more specific and instead reference `run mode` and `interactive mode`. Fixes [#1140](https://github.com/cypress-io/cypress/issues/1140).\n*   The test name text is now selectable inside the Command Log. Fixes [#1476](https://github.com/cypress-io/cypress/issues/1476).\n*   Minor improvements to contributing docs and scripts. Fixes [#1665](https://github.com/cypress-io/cypress/issues/1665).\n*   We now collect Semaphore CI params and provide URL's to click into the builds from the Dashboard. Fixes [#1785](https://github.com/cypress-io/cypress/issues/1785).\n*   Config overrides coming from the CLI or environment variables are now validated the same way as if they've been set in `cypress.json`. Fixes [#1783](https://github.com/cypress-io/cypress/issues/1783).\n*   There is a better / more helpful experience around passing unknown options to the CLI. Fixes [#837](https://github.com/cypress-io/cypress/issues/837).\n*   Display an empty message when there is no commit information on recorded runs. Fixes [#1809](https://github.com/cypress-io/cypress/issues/1809).\n\n**Documentation Changes:**\n\n*   [New `cy.task()` doc](https://docs.cypress.io/api/commands/task)\n*   [New `Screenshot API` doc](https://docs.cypress.io/api/cypress-api/screenshot-api)\n*   [Update `cy.screenshot()` doc to include new accepted usage and options](https://docs.cypress.io/api/commands/screenshot)\n*   [Update `Installing Cypress` doc to include new options for Cypress binary caching](https://docs.cypress.io/guides/getting-started/installing-cypress)\n*   [Updated `Writing and Organizing Tests` to include newly seeded `examples` folder](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests)\n*   [Updated `cypress run` spec args](https://docs.cypress.io/guides/guides/command-line#cypress-run)\n*   [Updated `Dashboard Service`](https://docs.cypress.io/guides/cloud/introduction)\n*   [Updated `Launching Browsers` to include our disabling of device discovery notifications](https://docs.cypress.io/guides/guides/launching-browsers)\n*   [Updated `Preprocessors` to reflect all ways `close` event could be triggered](https://docs.cypress.io/guides/cloud/introduction)\n*   Updated use of \"running headlessly\" to more accurate \"during `cypress run`\"\n\n## 2.1.0[​](#2-1-0 \"Direct link to 2.1.0\")\n\n_Released 3/1/2018_\n\n**Bugfixes:**\n\n*   Prevent a bug with `node-sass` on OSX + Windows when local `node` version does not match bundled `node` when importing components directly in spec files. The underlying issue was because we forgot to update `Buildkite` and `Appveyor` when we upgraded `Electron` in `2.0.0`. Fixes [#1387](https://github.com/cypress-io/cypress/issues/1387) and [#1390](https://github.com/cypress-io/cypress/issues/1390).\n\n**Features:**\n\n*   The [Selector Playground](https://docs.cypress.io/guides/core-concepts/cypress-app#Selector-Playground) has been updated to automatically prefer `data-cy`, `data-test` or `data-testid` attributes when providing the unique selector for an element. Additionally it now exposes a [public API](https://docs.cypress.io/api/cypress-api/selector-playground-api) that you can use to control how it determines which selector to use. Fixes [#1135](https://github.com/cypress-io/cypress/issues/1135).\n\n**Documentation Changes:**\n\n*   [Added `Selector Playground Guide`](https://docs.cypress.io/guides/core-concepts/cypress-app#Selector-Playground)\n*   [Added `Selector Playground API`](https://docs.cypress.io/api/cypress-api/selector-playground-api)\n*   [Updated `Best Practices`](https://docs.cypress.io/guides/references/best-practices)\n*   [Updated `FAQ`](https://docs.cypress.io/faq/questions/using-cypress-faq)\n*   [Updated `Introduction to Cypress`](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress)\n\n## 2.0.4[​](#2-0-4 \"Direct link to 2.0.4\")\n\n_Released 2/25/2018_\n\n**Bugfixes:**\n\n*   The `cypress` npm package now has the correct `engines` set in `package.json`. This was accidentally getting overwritten and caused errors when `engineStrict` was set in environments using `node` older than `8.2.1`. Fixes [#1373](https://github.com/cypress-io/cypress/issues/1373).\n\n## 2.0.3[​](#2-0-3 \"Direct link to 2.0.3\")\n\n_Released 2/21/2018_\n\n**Bugfixes:**\n\n*   The runner no longer appears to \"hang\" if a `before` hook fails in a test with siblings. Previously the test would never generate a `status` and look pending forever. This was a visual bug only. Fixes [#1343](https://github.com/cypress-io/cypress/issues/1343).\n*   The Desktop GUI properly renders folders that contain specs in Windows now. Fixes [#1335](https://github.com/cypress-io/cypress/issues/1335).\n\n**Misc:**\n\n*   The viewport dropdown helper in the Runner now displays string quoted JSON instead of an object literal. This better matches how you should write those options in `cypress.json`. Fixes [#1350](https://github.com/cypress-io/cypress/issues/1350).\n\n## 2.0.2[​](#2-0-2 \"Direct link to 2.0.2\")\n\n_Released 2/17/2018_\n\n**Bugfixes:**\n\n*   Fixed more edge cases where legitimate JavaScript code was being modified unexpectedly by the [modifyObstructiveCode](https://docs.cypress.io/guides/references/configuration#Browser) configuration. We've tightened up the RegExp even more and added 40 popular JS libraries to test against to ensure they are not modified. Fixes [#1334](https://github.com/cypress-io/cypress/issues/1334).\n*   Fixed an edge case when hooks such as `beforeEach` or `afterEach` threw an **identical** error message, Cypress would hang indefinitely and never finish running the tests. Fixes [#674](https://github.com/cypress-io/cypress/issues/674).\n*   Fixed bug when `Errors` that threw with no arguments: `throw new Error()` and had their messages appended would duplicate the message over and over again. Fixes [#1338](https://github.com/cypress-io/cypress/issues/1338).\n\n## 2.0.1[​](#2-0-1 \"Direct link to 2.0.1\")\n\n_Released 2/16/2018_\n\n**Bugfixes:**\n\n*   Using [cy.contains()](https://docs.cypress.io/api/commands/contains) with a RegExp argument is now properly escaped. Fixes [#1322](https://github.com/cypress-io/cypress/issues/1322).\n*   Fixed a runaway RegExp causing large `.js` files to take dozens of seconds to process. This was a regression caused by `2.0.0` with the new [modifyObstructiveCode](https://docs.cypress.io/guides/references/configuration#Browser) option. We've optimized the RegExp and the performance is back to being almost identical to transparently passing responses through. Fixes [#1330](https://github.com/cypress-io/cypress/issues/1330).\n\n## 2.0.0[​](#2-0-0 \"Direct link to 2.0.0\")\n\n_Released 2/15/2018_\n\n**Breaking Changes:**\n\n*   The built in default `Electron` browser has been bumped from version `53` to `59`. This version represents the version of `Chromium` that Electron is using. In other words, running `cypress run` (or via `Electron`) will be like running your tests in `Chrome 59` now. Although it is unlikely this would actually _break_ any of your tests - it is technically possible they could behave differently. Fixes [#895](https://github.com/cypress-io/cypress/issues/895) and [#891](https://github.com/cypress-io/cypress/issues/891) and [#823](https://github.com/cypress-io/cypress/issues/823) and [#860](https://github.com/cypress-io/cypress/issues/860) and [#1011](https://github.com/cypress-io/cypress/issues/1011) and [#1252](https://github.com/cypress-io/cypress/issues/1252) and [#1276](https://github.com/cypress-io/cypress/issues/1276).\n*   We are now detecting and automatically stripping code that obstructs Cypress from being able to test your application. Specifically, we are removing JavaScript code that tries to prevent **clickjacking** and **framebusting**. We have written very conservative rules that do their best to **only** strip these specific JS snippets, but it is technically possible that it may unintentionally rewrite valid JS if they match the RegExp patterns. There is a new configuration option called [modifyObstructiveCode](https://docs.cypress.io/guides/references/configuration#Browser) that is `true` by default. If you are experiencing problems after upgrading, you can turn this off and this will disable modifying your JS code. If you were using Cypress and upon visiting your website you would experience seemingly \"random\" redirects - these problems should now be eliminated. Fixes [#886](https://github.com/cypress-io/cypress/issues/886) and [#1245](https://github.com/cypress-io/cypress/issues/1245) and [#1064](https://github.com/cypress-io/cypress/issues/1064) and [#992](https://github.com/cypress-io/cypress/issues/992) and [#692](https://github.com/cypress-io/cypress/issues/692) and [#352](https://github.com/cypress-io/cypress/issues/352).\n*   We are now clearing the browser's disk cache each time it opens (before any tests run). This means that any files that have been cached from `Cache-Control` headers will be cleaned and removed. In the future, we will expose a new `cy.clearCache()` method to provide finer grained control of clearing the cache on a per test basis. But for now, this is an improvement. Fixes [#1124](https://github.com/cypress-io/cypress/issues/1124).\n*   The `--spec` option is now normalized against the current working directory `cwd` instead of the project that you are running Cypress in. That means passing a path from the command line to a spec file will now work even when the project path is not `cwd`. Fixes [#1159](https://github.com/cypress-io/cypress/issues/1159).\n\n**Bugfixes:**\n\n*   [blacklistHosts](https://docs.cypress.io/guides/references/configuration#Browser) would occasionally not work if you were blocking a host that had previously cached a file. In this case, the browser would serve it from disk and not make an actual HTTP request. This issue has been solved by clearing the cache when the browser opens. Fixes [#1154](https://github.com/cypress-io/cypress/issues/1154).\n*   [blacklistHosts](https://docs.cypress.io/guides/references/configuration#Browser) is now correctly accepted via the `--config` CLI flag.\n*   Spies and Stubs created with [cy.stub()](https://docs.cypress.io/api/commands/stub) and [cy.spy()](https://docs.cypress.io/api/commands/spy) will now retry their assertions when utilized from an [alias](https://docs.cypress.io/api/commands/as). Fixes [#1156](https://github.com/cypress-io/cypress/issues/1156).\n*   Basic auth is working again in Chrome 63 and Chrome 64. We \"for real\" fixed it this time by adding auth headers automatically at the network proxy layer and bypassed the browser altogether. We automatically apply auth headers if you provide a username/password in the URL of a `cy.visit(url)`. We also added a new `auth` option to specify the `username/password` using `cy.visit(url, options)`. All of the requests that match the origin of the URL will have the `Authorization: Basic <...>` headers added. Fixes [#1288](https://github.com/cypress-io/cypress/issues/1288).\n*   Fixed domain parsing failures when `local` or `localhost` was not used as a `tld`. Fixes [#1292](https://github.com/cypress-io/cypress/issues/1292) and [#1278](https://github.com/cypress-io/cypress/issues/1278).\n*   Removed the flag `--disable-background-networking` from the Chrome launch args to fix problems in CI that would throttle XHR callbacks by up to 20-30 seconds. Fixes [#1320](https://github.com/cypress-io/cypress/issues/1320).\n\n**Misc:**\n\n*   We now properly display nested objects and arrays that come from `cypress.json` in the Settings tab in the Desktop Application.\n*   There's now a proper \"empty view\" when you go to setup your project to record on our Dashboard and you have not created any Organizations. Fixes [#1306](https://github.com/cypress-io/cypress/issues/1306).\n*   Removed the message about private projects requiring a paid account in the future. There will be a free tier including private projects. Fixes [#827](https://github.com/cypress-io/cypress/issues/827).\n*   We moved the location of the browser's disk cache. That means that if you've been using Cypress for a really long time - you may have built up quite a large existing cache (in the hundreds of `mb`). Before upgrading, you should open the browser and then manually clear the Cache. Or - if you have already upgraded to `2.0.0` delete the following folders:\n    *   OSX: `~/Library/Caches/Cypress`\n    *   Linux: `~/.cache/Cypress`\n    *   Windows: `%APPDATA%\\Cypress\\cy\\production\\browsers`\n\n## 1.4.2[​](#1-4-2 \"Direct link to 1.4.2\")\n\n_Released 2/4/2018_\n\n**Bugfixes:**\n\n*   Fixed not being able to visit subdomains when using 2nd level sub domains. Fixes [#1175](https://github.com/cypress-io/cypress/issues/1175) and [#600](https://github.com/cypress-io/cypress/issues/600).\n*   Fixed not being able to visit private TLD's from the public suffix such as `github.io`, `gitlab.io` or `herokuapp.com`. These now all work correctly. Fixes [#380](https://github.com/cypress-io/cypress/issues/380) and [#402](https://github.com/cypress-io/cypress/issues/402) and [#802](https://github.com/cypress-io/cypress/issues/802) and [#493](https://github.com/cypress-io/cypress/issues/493) and [#1161](https://github.com/cypress-io/cypress/issues/1161).\n*   Fixed not being able to visit URLs that used `*localhost` such as `http://app.localhost:8080`. Fixes [#451](https://github.com/cypress-io/cypress/issues/451).\n*   Mochawesome now works correctly and outputs files in all versions. Fixes [#551](https://github.com/cypress-io/cypress/issues/551).\n*   Mochawesome will exit correctly with code `1` when a hook fails. [#1063](https://github.com/cypress-io/cypress/issues/1063).\n*   Fixed some incorrect typings with TypeScript. Fixes [#1219](https://github.com/cypress-io/cypress/issues/1219) and [#1186](https://github.com/cypress-io/cypress/issues/1186).\n*   Fixed bug with custom 3rd party Mocha reporters relying on `test.titlePath` being a function. Fixes [#1142](https://github.com/cypress-io/cypress/issues/1142).\n*   Fixed typo in `cypress.schema.json`. Fixes [#1167](https://github.com/cypress-io/cypress/issues/1167).\n*   Fixed typo in CLI deps error about Docker. Fixes [#1136](https://github.com/cypress-io/cypress/issues/1136).\n*   Prevent `NODE_ENV` from being set to `undefined` when parent process did not have it defined. Fixes [#1223](https://github.com/cypress-io/cypress/issues/1223).\n\n**Misc:**\n\n*   We have begun to aggregate failures and other stats ourselves instead of relying on Mocha reporters. Fixes [#1141](https://github.com/cypress-io/cypress/issues/1141).\n*   Added TypeScript `should/and` autocomplete and typings for Cypress events. Fixes [#1187](https://github.com/cypress-io/cypress/issues/1187) and [#1132](https://github.com/cypress-io/cypress/issues/1132).\n*   Upgrade deps. Fixes [#1174](https://github.com/cypress-io/cypress/issues/1174).\n\n## 1.4.1[​](#1-4-1 \"Direct link to 1.4.1\")\n\n_Released 12/26/2017_\n\n**Bugfixes:**\n\n*   Using `DEBUG=cypress:*` now correctly outputs all debugging information on OSX and Linux. Previously output other then `cypress:cli` was ignored due to the CLI ignoring `stderr` from the binary. Fixes [#921](https://github.com/cypress-io/cypress/issues/921).\n*   `stdout` is now captured correctly in Windows when recording to the Dashboard. Fixes [#977](https://github.com/cypress-io/cypress/issues/977) and issue [#711](https://github.com/cypress-io/cypress/issues/711).\n*   Windows now forcibly displays colors correctly to the terminal. Fixes [#1127](https://github.com/cypress-io/cypress/issues/1127).\n\n**Misc:**\n\n*   `TTY` is now handled correctly for Linux and OSX. This means that CI providers which turned off colors due to `TTY` being false will now display colors again such as TravisCI. Fixes [#1126](https://github.com/cypress-io/cypress/issues/1126).\n*   We now handle Xvfb exiting with a non zero status code and display that error to you. This should help with situations where Xvfb is misconfigured on the system. Fixes [#1113](https://github.com/cypress-io/cypress/issues/1113).\n*   We've added debug output for Xvfb when `DEBUG=cypress:xvfb` is enabled. Helpful when diagnosing problems with Xvfb. Fixes [#1128](https://github.com/cypress-io/cypress/issues/1128).\n*   We've added more TypeScript documentation for `cy.*` methods. Fixes [#1117](https://github.com/cypress-io/cypress/issues/1117).\n*   When developing on Cypress, we now start the process through the CLI to bring it into parity with how it works when used in production. Fixes [#838](https://github.com/cypress-io/cypress/issues/838).\n*   Upgraded various CLI dependencies that were flagged for security warnings. There wasn't an actual security problem - just static analyzers complaining. Fixes [#1103](https://github.com/cypress-io/cypress/issues/1103).\n\n## 1.4.0[​](#1-4-0 \"Direct link to 1.4.0\")\n\n_Released 12/19/2017_\n\n**Features:**\n\n*   There is now a Search Bar in the Desktop GUI that enables you to filter the list of specs. Helpful for projects with a ton of spec files. Fixes [#1098](https://github.com/cypress-io/cypress/issues/1098).\n\n**Bugfixes:**\n\n*   The seeded `example_spec.js` file no longer fails in Windows on the [cy.exec()](https://docs.cypress.io/api/commands/exec) test. It now conditionally runs a command appropriate for Windows. Fixes [#1097](https://github.com/cypress-io/cypress/issues/1097).\n*   Trying to log in to Cypress no longer causes the app to crash. This area has had many more tests added. Fixes [#1093](https://github.com/cypress-io/cypress/issues/1093).\n*   Some minor improvements to TypeScript definitions around [.then()](https://docs.cypress.io/api/commands/then). Fixes [#1084](https://github.com/cypress-io/cypress/issues/1084).\n*   The Selector Playground now works correctly in the Electron browser. Fixes [#1086](https://github.com/cypress-io/cypress/issues/1086).\n\n## 1.3.0[​](#1-3-0 \"Direct link to 1.3.0\")\n\n_Released 12/17/2017_\n\n**Features:**\n\n*   Plugins now emit a [before:browser:launch](https://docs.cypress.io/guides/tooling/plugins-guide#Browser-Launching) event exposing you the browser that will be launched and its launch arguments. This enables you to modify the arguments prior to launching the browser. You can also use these arguments to modify how Chrome runs and to also test Chrome extensions. Fixes [#691](https://github.com/cypress-io/cypress/issues/691) and [#298](https://github.com/cypress-io/cypress/issues/298).\n*   We have launched a \"CSS Selector Playground\", a new UI button in the Test Runner that enables you to highlight elements in your application and receive a unique selector. You can also find elements by their text content. These mimics [cy.get()](https://docs.cypress.io/api/commands/get) and [cy.contains()](https://docs.cypress.io/api/commands/contains) behavior. Additionally you can copy the generated Cypress command to your clipboard or output the generated selector to your console. This feature is in beta. It only works in Chrome (not in Electron). We are aware of some bugs in it, but it is good enough for use and feedback. Please check out issue [#917](https://github.com/cypress-io/cypress/issues/917), watch an animated gif demonstration, and leave any feedback you have there. Fixes [#917](https://github.com/cypress-io/cypress/issues/917).\n\nDocumentation Changes:\n\n*   [Added `Browser Launch API`](https://docs.cypress.io/api/plugins/browser-launch-api)\n*   [Updated `Plugins Guide`](https://docs.cypress.io/guides/tooling/plugins-guide)\n*   [Updated `Writing a Plugin API`](https://docs.cypress.io/api/plugins/writing-a-plugin)\n\n## 1.2.0[​](#1-2-0 \"Direct link to 1.2.0\")\n\n_Released 12/14/2017_\n\n**Features:**\n\n*   Plugins can now return a `Promise` and modify the yielded `config` to set new configuration values and environment variables. Fixes [#1042](https://github.com/cypress-io/cypress/issues/1042) and [#909](https://github.com/cypress-io/cypress/issues/909) and [#576](https://github.com/cypress-io/cypress/issues/576).\n*   There is a new [userAgent](https://docs.cypress.io/guides/references/configuration#Browser) option in `cypress.json`. This enables you to change the `userAgent` of the browser for the entire browsing session. Fixes [#364](https://github.com/cypress-io/cypress/issues/364).\n*   There is a new [blacklistHosts](https://docs.cypress.io/guides/references/configuration#Browser) option in `cypress.json` that allows you to block requests made to those hosts. Blocked requests will respond with a `503` status code. This is useful for blocking 3rd party domains like Google Analytics. We have added a [new 'Stubbing Google Analytics' recipe](https://docs.cypress.io/examples/recipes#Stubbing-and-spying) demonstrating this. Fixes [#442](https://github.com/cypress-io/cypress/issues/442).\n*   Added chai assertions in TypeScript to generate autocompletion. Fixes [#1073](https://github.com/cypress-io/cypress/issues/1073).\n\n**Bugfixes:**\n\n*   Updated TypeScript definitions to more accurately match the current Cypress API. Fixes [#1050](https://github.com/cypress-io/cypress/issues/1050). Also note that if you were extending Cypress in TypeScript the `Chainer` interface changed. Please read issue #1048 to understand what you will need to update.\n\n**Misc:**\n\n*   Renamed `environmentVariables` to `env` in the Desktop GUI. Fixes [#1052](https://github.com/cypress-io/cypress/issues/1052).\n*   [Cypress.config()](https://docs.cypress.io/api/cypress-api/config) now returns a complete set of configuration values. Fixes [#509](https://github.com/cypress-io/cypress/issues/509).\n*   Added TypeScript typings for bundled Cypress tools like `$`, `_`, etc. Fixes [#1046](https://github.com/cypress-io/cypress/issues/1046).\n*   Some error messages were made more passive. Fixes [#1025](https://github.com/cypress-io/cypress/issues/1025).\n\n**Documentation Changes:**\n\n*   [Added `Configuration API`](https://docs.cypress.io/api/plugins/configuration-api)\n*   [Added `Recipes`](https://docs.cypress.io/examples/recipes)\n*   [Updated `Configuration`](https://docs.cypress.io/guides/references/configuration)\n*   [Updated `Environment Variables`](https://docs.cypress.io/guides/guides/environment-variables)\n*   [Updated `Using Cypress FAQ`](https://docs.cypress.io/faq/questions/using-cypress-faq)\n*   [Updated `Plugins Guide`](https://docs.cypress.io/guides/tooling/plugins-guide)\n*   [Updated `Writing a Plugin API`](https://docs.cypress.io/api/plugins/writing-a-plugin)\n\n## 1.1.4[​](#1-1-4 \"Direct link to 1.1.4\")\n\n_Released 12/6/2017_\n\n**Bugfixes:**\n\n*   Fixed an issue causing `Chrome` to timeout when attempted to be run through our docker containers. Fixes [#1031](https://github.com/cypress-io/cypress/issues/1031).\n*   Several TypeScript typings were added, updated and fixed. Fixes [#1006](https://github.com/cypress-io/cypress/issues/1006).\n*   Using a regular `http://` URL now works when using the `CYPRESS_BINARY_VERSION` flag to point the binary at an external location. Fixes [#1001](https://github.com/cypress-io/cypress/issues/1001).\n*   File watching is fixed (again) when changing between specs. Fixes [#1018](https://github.com/cypress-io/cypress/issues/1018).\n\n**Misc:**\n\n*   There is now a new [`CYPRESS_SKIP_BINARY_INSTALL`](https://docs.cypress.io/guides/references/advanced-installation#Environment-variables) flag you can pass during `npm install` which skips the binary installation after the `cypress` npm module completes its installation. Fixes [#1005](https://github.com/cypress-io/cypress/issues/1005).\n*   We now launch Chrome with `--no-sandbox` and `--disable-gpu` options in Linux. We will soon release a new plugin event that enables you to modify the browser arguments we use by default. This _shouldn't_ cause issues with existing Linux users, and instead it should fix many CI setups that were using our Docker containers or your own home grown installed Chrome setup. Fixes [#1021](https://github.com/cypress-io/cypress/issues/1021) and [#1020](https://github.com/cypress-io/cypress/issues/1020).\n*   Removed several aliases from our browser detector. These were not implemented properly and not needed - and thus only caused indirection. Fixes [#1023](https://github.com/cypress-io/cypress/issues/1023).\n\n## 1.1.3[​](#1-1-3 \"Direct link to 1.1.3\")\n\n_Released 12/3/2017_\n\n**Bugfixes:**\n\n*   JSON fixtures with unicode escape sequences are now parsed correctly. Fixes [#964](https://github.com/cypress-io/cypress/issues/964).\n*   The default `browserify` plugin no longer fires `watched:file:changed` twice leading to an uncaught exception that was popping up in the console. Also fixed a minor state bug in the `browserify` package. Fixes [#968](https://github.com/cypress-io/cypress/issues/968).\n*   Cypress no longer reports `Electron` as the browser that ran in the Dashboard Service when a different browser was run. Fixes [#854](https://github.com/cypress-io/cypress/issues/854).\n*   Invalid cookie values no longer crash Cypress. Fixes [#962](https://github.com/cypress-io/cypress/issues/962).\n\n**Misc:**\n\n*   We are now bundling our own `TypeScript` definitions with the `cypress` npm module. You no longer have to install `@types/cypress` anymore. We'll continue to keep these updated with API changes. Fixes [#856](https://github.com/cypress-io/cypress/issues/856).\n*   Uncaught exceptions originating from **your** application code and/or test code are now **distinctly** and **clearly** indicated in the error message. We included a link to our docs to educate you on how you can optionally disable Cypress from catching these. Fixes [#825](https://github.com/cypress-io/cypress/issues/825).\n*   [cy.visit()](https://docs.cypress.io/api/commands/visit) now accepts `{ failOnStatusCode: false }` which enables you to visit pages that respond with a non `2xx` status code. This brings it into parity with [cy.request()](https://docs.cypress.io/api/commands/request). Fixes [#421](https://github.com/cypress-io/cypress/issues/421) and [#574](https://github.com/cypress-io/cypress/issues/574).\n*   The contributing Readme's have been updated and improved for each package. Fixes [#995](https://github.com/cypress-io/cypress/issues/995).\n*   Added utility methods [Cypress.platform](https://docs.cypress.io/api/cypress-api/platform) and [Cypress.arch](https://docs.cypress.io/api/cypress-api/arch) for returning the underlying OS information. Uses node's `os` module under the hood. Fixes [#824](https://github.com/cypress-io/cypress/issues/824) and [#675](https://github.com/cypress-io/cypress/issues/675).\n\n**Documentation Changes:**\n\n*   [Added `Cypress.version`](https://docs.cypress.io/api/cypress-api/version)\n*   [Added `Cypress.arch`](https://docs.cypress.io/api/cypress-api/arch)\n*   [Added `Cypress.platform`](https://docs.cypress.io/api/cypress-api/platform)\n\n## 1.1.2[​](#1-1-2 \"Direct link to 1.1.2\")\n\n_Released 11/26/2017_\n\n**Bugfixes:**\n\n*   Fixed a regression caused by [.type()](https://docs.cypress.io/api/commands/type) adhering to `maxlength` incorrectly. Special character sequences were not respected. Now [.type()](https://docs.cypress.io/api/commands/type) works with special characters and implements a complete fix for `maxlength`. In addition to it working, it now fires all applicable browser events without modifying the actual input value. Fixes [#955](https://github.com/cypress-io/cypress/issues/955).\n*   Errors coming from plugins now display correctly in the Test Runner. Fixes [#945](https://github.com/cypress-io/cypress/issues/945).\n\n**Documentation Changes:**\n\n*   [Added ESLint, Docker, and TypeScript to Plugins](https://docs.cypress.io/plugins)\n*   [Added recipe for TypeScript with Browserify](https://docs.cypress.io/examples/recipes)\n*   [Added recipe for TypeScript with webpack](https://docs.cypress.io/examples/recipes)\n*   [Added recipe for Direct Controlling AngularJS](https://docs.cypress.io/examples/recipes)\n*   [Added recipe for E2E API Testing](https://docs.cypress.io/examples/recipes)\n*   [Added more video tutorials](https://docs.cypress.io/examples/tutorials)\n*   [Improved displaying list of Tutorials, Recipes, Applications, and Docker examples](https://docs.cypress.io/examples/recipes)\n\n## 1.1.1[​](#1-1-1 \"Direct link to 1.1.1\")\n\n_Released 11/20/2017_\n\n**Bugfixes:**\n\n*   Fixed a bug swallowing plugin errors due to undefined `reject` function. Fixes [#934](https://github.com/cypress-io/cypress/issues/934).\n*   [.type()](https://docs.cypress.io/api/commands/type) now respects the `maxlength` attribute and will not type beyond it. Fixes [#928](https://github.com/cypress-io/cypress/issues/928).\n\n## 1.1.0[​](#1-1-0 \"Direct link to 1.1.0\")\n\n_Released 11/19/2017_\n\n**Summary:**\n\n*   We have officially launched the new **Plugins API** interface. This adds a `cypress/plugins/index.js` file to new and existing projects. Using this file will enable you to modify the internals of Cypress running in the background `node` process. This means you will be able to use `node` APIs that are executed outside of the browser.\n*   We have currently added only [one event](https://docs.cypress.io/api/plugins/writing-a-plugin#List-of-events) for modifying the test file preprocessor, but this paves the way for adding many more event types. You can now modify every aspect of how files are sent to the browser.\n*   We have extracted the default Browserify preprocessor into its own package - [`@cypress/browserify-preprocessor`](https://github.com/cypress-io/cypress-browserify-preprocessor). This is bundled with Cypress, but it is extracted so it can be used / modified by you to change the default options we pass to Browserify. Additionally, you can swap out this preprocessor for something else entirely.\n\n**Features:**\n\n*   There is now a [Plugins API interface](https://docs.cypress.io/guides/tooling/plugins-guide). Partially addresses [#684](https://github.com/cypress-io/cypress/issues/684).\n*   We have added the first Plugin API event called: [file:preprocessor](https://docs.cypress.io/api/plugins/writing-a-plugin#List-of-events). Fixes [#580](https://github.com/cypress-io/cypress/issues/580) and [#581](https://github.com/cypress-io/cypress/issues/581).\n*   You can now customize the default Babe; configuration options for the Browserify preprocessor. Fixes [#343](https://github.com/cypress-io/cypress/issues/343) and [#905](https://github.com/cypress-io/cypress/issues/905).\n*   CoffeeScript 2 is supported via modifying the default options for the Browserify preprocessor. Fixes [#663](https://github.com/cypress-io/cypress/issues/663).\n*   You can swap out or extend the default preprocessor to do exotic things like compile ClojureScript into JavaScript. Fixes [#533](https://github.com/cypress-io/cypress/issues/533).\n*   We have created a [`@cypress/webpack-preprocessor`](https://github.com/cypress-io/cypress/tree/master/npm/webpack-preprocessor) preprocessor npm package for you webpack users (because we are nice!). Fixes [#676](https://github.com/cypress-io/cypress/issues/676).\n\n**Bugfixes:**\n\n*   [`cy.contains(selector, regexp)`](https://docs.cypress.io/api/commands/contains) now works as intended. Fixes [#801](https://github.com/cypress-io/cypress/issues/801).\n*   We no longer format fixtures in any capacity. This fixes a bug with improperly formatting fixtures in Windows. You should handle formatting fixtures yourself. Fixes [#884](https://github.com/cypress-io/cypress/issues/884) and [#902](https://github.com/cypress-io/cypress/issues/902).\n*   [cy.viewport()](https://docs.cypress.io/api/commands/viewport) resolves if only width or only height changes. Fixes [#873](https://github.com/cypress-io/cypress/issues/873).\n*   Cypress now auto reloads when spec files are modified in Windows. Fixes [#712](https://github.com/cypress-io/cypress/issues/712).\n\n**Misc:**\n\n*   There is a new `--global` option useful with [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open) to force Cypress to open in global mode. This is helpful when you have multiple nested Cypress projects but only want to install Cypress once in the root project. Fixes [#889](https://github.com/cypress-io/cypress/issues/889).\n*   The [module API](https://docs.cypress.io/guides/guides/module-api) accepts `reporterOptions` as an object literal like it does for the `env` and `config` properties. Fixes [#899](https://github.com/cypress-io/cypress/issues/899).\n\n**Documentation Changes:**\n\n*   [Created \"Testing React TodoMVC\" tutorials](https://docs.cypress.io/examples/tutorials)\n*   [Created \"Variables and Aliases\" core concept](https://docs.cypress.io/guides/core-concepts/variables-and-aliases)\n*   [Created \"Conditional Testing\" core concept](https://docs.cypress.io/guides/core-concepts/conditional-testing)\n*   [Created \"Plugins\" guide](https://docs.cypress.io/guides/tooling/plugins-guide)\n*   [Created \"List of Plugins\"](https://docs.cypress.io/plugins)\n*   [Created \"Writing a Plugin\" API](https://docs.cypress.io/api/plugins/writing-a-plugin)\n*   [Created \"Preprocessors API\"](https://docs.cypress.io/api/plugins/preprocessors-api)\n*   [Updated \"Using Cypress FAQ\"](https://docs.cypress.io/faq/questions/using-cypress-faq)\n*   [Updated \"Best Practices\"](https://docs.cypress.io/guides/references/best-practices)\n\n## 1.0.3[​](#1-0-3 \"Direct link to 1.0.3\")\n\n_Released 10/29/2017_\n\n**Features:**\n\n*   The Test Runner now enables you to collapse folders when displaying a list of specs. Fixes [#760](https://github.com/cypress-io/cypress/issues/760).\n\n**Bugfixes**\n\n*   The `onChange` event callback for React now works (again) on `input` type `number` or `email`. Fixes [#816](https://github.com/cypress-io/cypress/issues/816) and [#770](https://github.com/cypress-io/cypress/issues/770).\n*   Fixed error when recording and failing to parse the git commit message. Fixes [#847](https://github.com/cypress-io/cypress/issues/847) and [#841](https://github.com/cypress-io/cypress/issues/841).\n*   Using a single space on: `cy.type(' ')` now works. Fixes [#807](https://github.com/cypress-io/cypress/issues/807).\n*   `cy.spread()` can now be used on a collection of DOM elements. Fixes [#735](https://github.com/cypress-io/cypress/issues/735).\n*   CLI shows help message when it is invoked with an unknown command like `$(npm bin)/cypress foo`. Fixes [#641](https://github.com/cypress-io/cypress/issues/641).\n\n**Misc:**\n\n*   Enable passing `CYPRESS_RECORD_KEY` without using the CLI by invoking the binary directly. Fixes [#820](https://github.com/cypress-io/cypress/issues/820).\n*   Cypress binaries can now be pointed to a staging environment with `CYPRESS_ENV=staging`. Fixes [#813](https://github.com/cypress-io/cypress/issues/813).\n*   The Test Runner displays the scrollbar correctly when the update banner is displayed. Fixes [#803](https://github.com/cypress-io/cypress/issues/803).\n*   The branch name is now properly collected when recording in Buildkite CI. Fixes [#777](https://github.com/cypress-io/cypress/issues/777).\n*   You can install the Cypress binary from any URL or file path using the [`CYPRESS_BINARY_VERSION` environment variable](https://docs.cypress.io/guides/references/advanced-installation). Closes [#701](https://github.com/cypress-io/cypress/issues/701).\n\n**Documentation Changes:**\n\n*   [Created \"Conditional Testing\" core concept](https://docs.cypress.io/guides/core-concepts/conditional-testing)\n*   [Created \"Key Differences\" core concept](https://docs.cypress.io/guides/overview/key-differences)\n*   [Updated \"Best Practices\"](https://docs.cypress.io/guides/references/best-practices)\n*   [Updated \"FAQ Usage\"](https://docs.cypress.io/faq/questions/using-cypress-faq)\n\n## 1.0.2[​](#1-0-2 \"Direct link to 1.0.2\")\n\n_Released 10/13/2017_\n\n**Bugfixes:**\n\n*   `cy.type` now correctly fires change events on React 16. Fixes [#647](https://github.com/cypress-io/cypress/issues/647).\n*   Fixed some problems serializing objects during domain change caused by circular references. In this case `zone.js` was the culprit. Fixes [#741](https://github.com/cypress-io/cypress/issues/741).\n\n**Misc:**\n\n*   `cy.scrollTo` now logs its coordinates when options are used. Fixes [#725](https://github.com/cypress-io/cypress/issues/725).\n*   You can now use environment variables that have a `=` character as values. Fixes [#620](https://github.com/cypress-io/cypress/issues/620).\n*   There is now a new `videoUploadOnPasses` configuration option in `cypress.json`. Turning this off will only compress and upload videos on failures. This only affects projects which are setup to record to the Dashboard. Fixes [#460](https://github.com/cypress-io/cypress/issues/460).\n\n**Documentation Changes:**\n\n*   [Added examples for \"Catalog of Events\"](https://docs.cypress.io/api/cypress-api/catalog-of-events)\n*   \\[Added\\](/ Updated FAQ for \"Using Cypress\"' using-cypress-faq)\n\n## 1.0.1[​](#1-0-1 \"Direct link to 1.0.1\")\n\n_Released 10/10/2017_\n\n**Bugfixes:**\n\n*   Prevent error during verification in the CLI on Linux / OSX. Also makes terminal colors work again. Fixes [#717](https://github.com/cypress-io/cypress/issues/717) and [#718](https://github.com/cypress-io/cypress/issues/718).\n\n## 1.0.0[​](#1-0-0 \"Direct link to 1.0.0\")\n\n_Released 10/09/2017_\n\n**Summary:**\n\n*   `1.0.0` marks our transition out of a **private** beta and into a **public** beta. We've lifted all the restrictions for using Cypress. It is now accessible to everyone. Until we are out of beta, the [Dashboard Service](https://docs.cypress.io/guides/cloud/introduction) will continue to be free.\n*   We will continue to follow `semver` from this point on (and also a bit more rigorously).\n*   Cypress is now [open source](https://github.com/cypress-io/cypress)! This project is licensed under the terms of the [MIT License](https://github.com/cypress-io/cypress/blob/develop/LICENSE.md).\n*   We have a [Contributing Guideline](https://on.cypress.io/contributing) to help contributors get started as well as [issues labeled `first-timers-only`](https://github.com/cypress-io/cypress/labels/first-timers-only) for those wanting to contribute right away.\n*   You can now use the Test Runner application without logging in. Some areas of the application still require logging in through GitHub, like the 'Runs' tab and viewing the project's 'Record Key'. The only places where login is required is when it interacts with our external servers. Naturally these places are optional and will not affect the local test writing + running experience.\n*   We've removed the requirement of filling out an early adopter form and approval for logging in with GitHub to Cypress.\n*   [www.cypress.io](https://www.cypress.io/) has an all new design to help new visitors get started quickly and understand our future pricing more clearly.\n*   We are still updating the docs to reflect the `1.0.0` release.\n\n**Features:**\n\n*   Windows is now supported. We have been running it successfully on EC2 and all of our example projects are also running in CI with AppVeyor. It is still super beta (we're aware of a couple issues already) and we're still updating our own infrastructure to manage and test it as comprehensively as we do OSX and Linux. We are only building a 32bit version of Windows, but will soon be building a 64bit as well. As of today the Windows binary is about 2x the size of what it will be. Unzipping takes a long time, we are sorry. Fixes [#74](https://github.com/cypress-io/cypress/issues/74) and [#444](https://github.com/cypress-io/cypress/issues/444).\n\n**Misc:**\n\n*   Added the `Beta` flag everywhere (since we are still technically in beta).\n*   Reduced the frequency the app checked for updates. Fixes [#713](https://github.com/cypress-io/cypress/issues/713).\n*   The CLI now sends `arch` parameter to the download server so we can build and serve multiple binaries for Windows + Linux.\n\n**Documentation Changes:**\n\n*   [Updated \"Installing Cypress\"](https://docs.cypress.io/guides/getting-started/installing-cypress)\n*   [Updated \"Writing your First Test\"](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test)\n*   Added a 10 minute Getting Started video that [Andrew Van Slaars](https://github.com/avanslaars) created.\n\n## 0.20.3[​](#0-20-3 \"Direct link to 0.20.3\")\n\n_Released 10/06/2017_\n\n*   Improved verifying the binary for the first time after an `npm install`. Fixes [#709](https://github.com/cypress-io/cypress/issues/709).\n\n## 0.20.2[​](#0-20-2 \"Direct link to 0.20.2\")\n\n_Released 10/06/2017_\n\n**Possibly Breaking Changes:**\n\n*   [cy.exec()](https://docs.cypress.io/api/commands/exec) now trims output by default. That means if you were using an `eq` assertion the output will no longer have a trailing newline character `\\n`. It's unlikely you are doing this, but it is possible you may need to update your assertions to remove this character. Fixes [#697](https://github.com/cypress-io/cypress/issues/697).\n\n**Bugfixes:**\n\n*   Handle errors gracefully when Electron window has been closed before paint events happen. Fixes [#705](https://github.com/cypress-io/cypress/issues/705).\n*   Basic auth now works _again_. Fixes [#573](https://github.com/cypress-io/cypress/issues/573).\n*   [cy.exec()](https://docs.cypress.io/api/commands/exec) now properly sources each time it is invoked instead of only once. Fixes [#694](https://github.com/cypress-io/cypress/issues/694).\n\n**Misc:**\n\n*   `cypress open` now accepts the `--project` flag which enables you to use a root level Cypress installation and point to multiple sub projects. Fixes [#661](https://github.com/cypress-io/cypress/issues/661).\n*   Prevent newer versions of Chrome from prompting you to save passwords and suppressed other extension related popups for Windows. Fixes [#704](https://github.com/cypress-io/cypress/issues/704).\n\n## 0.20.1[​](#0-20-1 \"Direct link to 0.20.1\")\n\n_Released 09/17/2017_\n\n**Features:**\n\n*   `cypress run` now supports a `--headed` option so the Electron browser will display instead of running headlessly. This matches what you can already do in the GUI. Fixes [#657](https://github.com/cypress-io/cypress/issues/657).\n\n**Bugfixes:**\n\n*   Using Cypress on nested projects now correctly works. Fixes [#635](https://github.com/cypress-io/cypress/issues/635).\n*   Using `cy.type` on Angular 2 apps now works. We're now firing the `key` property when typing. We've properly mapped all the special keys too.\n*   `onBeforeLoad` now gets invoked when overriding `cy.visit`. Fixes [#656](https://github.com/cypress-io/cypress/issues/656) and [#640](https://github.com/cypress-io/cypress/issues/640).\n*   Using multiple `cy.visit` back to back which only change the `hash` now properly wait for the `hashchange` event to occur before moving on. Fixes [#652](https://github.com/cypress-io/cypress/issues/652).\n*   CLI now displays the correct overridden `CYPRESS_BINARY_VERSION` on first open. Fixes [#659](https://github.com/cypress-io/cypress/issues/659).\n*   Fixed the incorrectly spelled chainer `descendents`. It is now correctly spelled as `descendants`. Fixes [#642](https://github.com/cypress-io/cypress/issues/642).\n*   The visibility algorithm has been considerably improved. Should fix most if not all visibility problems. We accounted for CSS transforms, translations, and added a new branch of logic for `position: fixed` elements which should be much more accurate. Fixes [#631](https://github.com/cypress-io/cypress/issues/631).\n*   The CLI now treats `-h` and `--help` and `help` as valid commands. Fixes [#645](https://github.com/cypress-io/cypress/issues/645).\n\n**Misc:**\n\n*   You can now pass an object literal as `config` when using Cypress as a node module. Fixes [#639](https://github.com/cypress-io/cypress/issues/639).\n*   Passing `--reporter` can now reference an absolute path instead of just relative. Fixes [#658](https://github.com/cypress-io/cypress/issues/658).\n*   The algorithm that ensures an element is not covered now calculates this at the center coordinates instead of the top left. This should yield more accurate results, be closer to the default expectations of users, and bypass fractional pixel problems we were having. Fixes [#655](https://github.com/cypress-io/cypress/issues/655).\n*   Improved crash reporting when the binary throws an uncaught error.\n\n**Documentation Changes:**\n\n*   [Updated \"Command Line\"](https://docs.cypress.io/guides/guides/command-line)\n*   [Updated \"Interacting with Elements\"](https://docs.cypress.io/guides/core-concepts/interacting-with-elements)\n\n## 0.20.0[​](#0-20-0 \"Direct link to 0.20.0\")\n\n_Released 09/10/2017_\n\n**Summary:**\n\n*   `0.20.0` is our biggest technical release ever. It accounts for more than 2,000 commits. It's full of breaking changes we wanted to land prior to having our public `1.0.0` release.\n*   You can now [install Cypress as a real `npm` module](https://docs.cypress.io/guides/getting-started/installing-cypress), and even `require` it in your node files.\n*   We rewrote the entire driver (we've all been there) and converted all 2,500+ tests to be run within Cypress itself.\n\n**CLI Changes:**\n\n*   You now use `npm` to manage Cypress versions like every other dev dependency.\n*   Running `npm install --save-dev cypress` will automatically download the CLI + binary.\n*   There is no longer a separate `cypress install` step, but this command still exists if you want to **reinstall** the binary for whatever reason.\n*   No need to use `cypress-cli` anymore to manage Cypress versions. **You will need to uninstall the `cypress-cli` by running `npm uninstall -g cypress-cli`**.\n*   The [`cypress` module can be `required`](https://docs.cypress.io/guides/guides/module-api) in your own node projects to programmatically control Cypress the same way you would from the command line.\n*   We've updated the installation experience to account for running locally and in CI so it doesn't generate a ton of logs in `stdout`.\n*   The `CYPRESS_VERSION` environment variable is gone because now the version of the binary is controlled by the npm module version. If for some reason you want to download the binary of a different version you can use the new `CYPRESS_BINARY_VERSION` environment variable - but you'll get a warning message when the versions don't match.\n*   If you install cypress globally using `npm install -g cypress` we will warn you that you should check this in as a `devDependency` but Cypress will continue to work in \"global mode\".\n*   Cypress now verifies it can run on your system prior to actually running. It'll do this for each new version the first time you try to use it. Errors it receives from attempting to run will bubble up nicely, so you'll get output for things like [missing linux dependencies](https://docs.cypress.io/guides/continuous-integration/introduction#Dependencies) instead of absolutely _nothing_ like before.\n*   We have better error handling and messaging around Xvfb failures.\n*   There is a new [`--browser` option](https://docs.cypress.io/guides/guides/command-line#cypress-run) that lets you change the browser that runs from the command line. This works the same way as changing the browser in the GUI, with the exception that any browser other than the default `electron` browser will **not** record a video. This is solvable but requires more work.\n*   Whenever you encounter errors in the CLI we'll output helpful debugging information at the bottom of each error.\n*   You can use the new environment variable [`DEBUG=cypress:cli`](https://docs.cypress.io/guides/guides/command-line#Debugging-commands) to see debugging output from the CLI.\n\n**Breaking Changes:**\n\n*   We've removed the undocumented `cy.chain()` command. You should be able to safely remove this from your code. Fixes [#456](https://github.com/cypress-io/cypress/issues/456).\n*   Updated [Cypress.\\_](https://docs.cypress.io/api/utilities/_) to use [lodash](https://lodash.com/) instead of [Underscore](http://underscorejs.org/). Fixes [#548](https://github.com/cypress-io/cypress/issues/548).\n*   If any of an element's parent's overflow is 'hidden', we now calculate if the element is outside of the boundaries of that parent element and validate visibility assertions accordingly. This may cause some tests that were previously passing to now accurately fail. Fixes [#410](https://github.com/cypress-io/cypress/issues/410).\n*   [`.select()`](https://docs.cypress.io/api/commands/select) should now look for the trimmed value inside of an `<option></option>`. This may change the content argument required to select the option you intended in your [`.select()`](https://docs.cypress.io/api/commands/select) command. Fixes [#175](https://github.com/cypress-io/cypress/issues/175).\n*   When passing the option `{ force: true }` to [`.click()`](https://docs.cypress.io/api/commands/click) and [`.type()`](https://docs.cypress.io/api/commands/type), we no longer attempt to scroll the element into view. We've also disabled the check that the element is in view before clicking or typing. Fixes [#553](https://github.com/cypress-io/cypress/issues/553) and [#537](https://github.com/cypress-io/cypress/issues/537).\n*   `Cypress.Dom` has been renamed to `Cypress.dom`.\n*   `Cypress.Log.command` has been renamed to [Cypress.log](https://docs.cypress.io/api/cypress-api/cypress-log).\n*   [`chai-jQuery` assertions](https://docs.cypress.io/guides/references/assertions#Chai-jQuery) no longer change the subject when using `prop`, `attr`, and `css` with the **3rd** argument (which acts as equality check). Fixes [#605](https://github.com/cypress-io/cypress/issues/605).\n*   We now throw when a value other than `cy` is returned from a test or command function. Fixes [#463](https://github.com/cypress-io/cypress/issues/463).\n*   Returning a promise in a custom command while also invoking cy commands now throws. Fixes [#435](https://github.com/cypress-io/cypress/issues/435).\n*   [cy.then()](https://docs.cypress.io/api/commands/then) will now only pass its subject through when its callback function returns `undefined`. Previous it would pass the subject on `null` values as well.\n*   [cy.contains()](https://docs.cypress.io/api/commands/contains) can no longer be chained on subjects which aren't `window`, `document` or `element`. This brings it into parity with the new custom command rules and makes it much less \"magical\". It enforces you to use it in a much clearer way when querying the entire document.\n*   Removed `Cypress.addParentCommand()`, `Cypress.addChildCommand()`, and `Cypress.addDualCommand()` in favor of the [new custom command interface](https://docs.cypress.io/api/cypress-api/custom-commands).\n\n**Features:**\n\n*   [`chai-jQuery` assertions](https://docs.cypress.io/guides/references/assertions#Chai-jQuery) have improved error messaging, and have had their internal double assertions removed, and can now be made on raw DOM objects. Fixes [#605](https://github.com/cypress-io/cypress/issues/605).\n*   [`chai-jQuery` assertions](https://docs.cypress.io/guides/references/assertions#Chai-jQuery) now throw a nice error message when you're asserting on a non DOM object. Fixes [#604](https://github.com/cypress-io/cypress/issues/604).\n*   New [.trigger()](https://docs.cypress.io/api/commands/trigger) command. Useful for triggering arbitrary events. Fixes [#406](https://github.com/cypress-io/cypress/issues/406).\n*   New [cy.scrollTo()](https://docs.cypress.io/api/commands/scrollTo) command. Useful for having a container scroll to a specific position. Fixes [#497](https://github.com/cypress-io/cypress/issues/497) & [#313](https://github.com/cypress-io/cypress/issues/313).\n*   New [.scrollIntoView()](https://docs.cypress.io/api/commands/scrollIntoView) command. Useful for scrolling an element into view. Fixes [#498](https://github.com/cypress-io/cypress/issues/498) & [#313](https://github.com/cypress-io/cypress/issues/313) & [#519](https://github.com/cypress-io/cypress/issues/519).\n*   Input ranges are now more easily testable using the new [.trigger()](https://docs.cypress.io/api/commands/trigger) command. See our [new recipe](https://docs.cypress.io/examples/recipes#Testing-the-DOM) for details on how. Fixes [#287](https://github.com/cypress-io/cypress/issues/287).\n*   Testing drag and drop is now possible using the new [.trigger()](https://docs.cypress.io/api/commands/trigger) command. See our [new recipe](https://docs.cypress.io/examples/recipes#Testing-the-DOM) for details on how. Fixes [#386](https://github.com/cypress-io/cypress/issues/386).\n*   Updated [.click()](https://docs.cypress.io/api/commands/click) command to accept more position arguments. Fixes [#499](https://github.com/cypress-io/cypress/issues/499).\n*   Added support to [`.type()`](https://docs.cypress.io/api/commands/type) for inputs of type `date`, `time`, `month`, and `week`. Fixes [#27](https://github.com/cypress-io/cypress/issues/27).\n*   You can now pass a browser option to [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) as `--browser <browser name>`. This enables you to run the same set of browsers when running from the CLI as when you're running from the GUI. Fixes [#462](https://github.com/cypress-io/cypress/issues/462) and [#531](https://github.com/cypress-io/cypress/issues/531).\n*   [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open) no longer opens a detached process by default. Instead `cypress open` now accepts a new flag `--detached`, which replicates this behavior. Fixes [#531](https://github.com/cypress-io/cypress/issues/531).\n*   We have all new [docker examples](https://docs.cypress.io/examples/docker) you can check out.\n*   The [`cypress` npm package](https://www.npmjs.com/package/cypress) now checks the currently installed version on `install` and [run](https://docs.cypress.io/guides/guides/command-line#cypress-run) and does not re-install Cypress if it is already installed. Fixes [#396](https://github.com/cypress-io/cypress/issues/396).\n*   We've added a new [Cypress.Commands](https://docs.cypress.io/api/cypress-api/custom-commands) interface to handle adding your own custom commands. Fixes [#436](https://github.com/cypress-io/cypress/issues/436).\n*   You can now overwrite existing commands with [Cypress.Commands.overwrite](https://docs.cypress.io/api/cypress-api/custom-commands).\n*   We removed an artificial delay that was being set in between commands. This means test commands now run faster.\n*   You can now [disable Cypress global exception handlers](https://docs.cypress.io/api/cypress-api/catalog-of-events) for your application. Fixes [#254](https://github.com/cypress-io/cypress/issues/254)\n*   Uncaught errors appearing in your spec files or support files are now properly caught, have the right exit code, and display correctly. Fixes [#345](https://github.com/cypress-io/cypress/issues/345)\n*   Cypress will now scroll past multiple elements that cover up an element to be interacted with. It also now factors in elements with `position: sticky`. Fixes [#571](https://github.com/cypress-io/cypress/issues/571) and [#565](https://github.com/cypress-io/cypress/issues/565).\n*   Cypress now scrolls all parent containers (not just `window`) when attempting to [check an element's actionability](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Actionability). Fixes [#569](https://github.com/cypress-io/cypress/issues/569).\n*   Using Chai.js's `assert` interface now works correctly in your specs.\n*   Screenshots are now taken during each runnable that fails. Errors in tests will happen there. Errors in hooks will also happen there. Previously a screenshot would only happen after everything (including hooks) ran. Fixes [#394](https://github.com/cypress-io/cypress/issues/394)\n*   [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) now synchronizes its state with the reporter. This means you should see error messages (on the left side) on automatic screenshot errors.\n*   Using mocha's async `done` callback now works properly.\n*   You can now programmatically [intercept and potentially turn off uncaught application errors](https://docs.cypress.io/api/cypress-api/catalog-of-events) from failing your tests.\n*   You can now programmatically control whether you accept or cancel [window.confirm()](https://docs.cypress.io/api/cypress-api/catalog-of-events) calls from your application.\n\n**Dependencies:**\n\n*   Updated [Cypress.Promise](https://docs.cypress.io/api/utilities/promise) (which is Bluebird) from version `2.9.25` to `3.5.0`\n*   Updated [chai](https://docs.cypress.io/guides/references/bundled-libraries#Chai) from version `1.9.2` to `3.5.0`\n*   Updated [sinon](https://docs.cypress.io/guides/references/bundled-libraries#Sinonjs) from version `1.x` to `3.2.0`\n*   Updated [jQuery](https://docs.cypress.io/api/utilities/$) from version `2.1.4` to `2.2.4`.\n*   Removed [chai-jQuery](https://docs.cypress.io/guides/references/bundled-libraries#Chai-jQuery) and rewrote it from scratch.\n\n**Deprecations:**\n\n*   The [`cypress-cli` npm package](https://www.npmjs.com/package/cypress-cli) has been deprecated. Fixes [#316](https://github.com/cypress-io/cypress/issues/316).\n*   The interface for writing custom commands has been deprecated. [Please read our docs on the new custom commands interface](https://docs.cypress.io/api/cypress-api/custom-commands). Fixes [#436](https://github.com/cypress-io/cypress/issues/436) and [#465](https://github.com/cypress-io/cypress/issues/465).\n*   There are no more global, in-app updates. Versioning should be primarily [controlled via `npm`](https://docs.cypress.io/guides/getting-started/installing-cypress) like every other package / dependency in your project. For users not using `npm` you can manually download new versions of Cypress when they're released.\n\n**Bugfixes:**\n\n*   Fixed busted internal timers that caused random timeouts, proxy errors, incorrect delays, and long pauses when loading the GUI. Fixes [#572](https://github.com/cypress-io/cypress/issues/572).\n*   `cy.route()` now matches requests opened with lowercase methods. Fixes [#607](https://github.com/cypress-io/cypress/issues/607).\n*   Fixed regression where multiple uses of `cy.server()` in a `before` hook was throwing an error. Fixes [#80](https://github.com/cypress-io/cypress/issues/80) and [#510](https://github.com/cypress-io/cypress/issues/510) and [#595](https://github.com/cypress-io/cypress/issues/595).\n*   When editing `cypress.json` file, the dead browser page no longer appears. Fixes [#492](https://github.com/cypress-io/cypress/issues/492).\n*   [`.type()`](https://docs.cypress.io/api/commands/type) should now work on inputs regardless of capitalization of `type` attribute. Fixes [#550](https://github.com/cypress-io/cypress/issues/550).\n*   Fixed issues where [`.type()`](https://docs.cypress.io/api/commands/type) was not appending text properly. Fixes [#503](https://github.com/cypress-io/cypress/issues/503) and [#568](https://github.com/cypress-io/cypress/issues/568).\n*   Fixed issue where [`.type()`](https://docs.cypress.io/api/commands/type) with `type=\"email\"` inputs were throwing an error. Fixes [#504](https://github.com/cypress-io/cypress/issues/504).\n*   Fixed issue where using [`.type()`](https://docs.cypress.io/api/commands/type) on an input with a `type` defined in uppercase (`input type=\"TEXT\"`) would throw an error and not type. Fixes [#550](https://github.com/cypress-io/cypress/issues/550).\n*   Fixed issue with [.clear()](https://docs.cypress.io/api/commands/clear) and `type=\"number\"` inputs. Fixes [#490](https://github.com/cypress-io/cypress/issues/490).\n*   Fixed issue where [`cy.exec()`](https://docs.cypress.io/api/commands/exec) was failing when running Cypress in docker. Fixes [#517](https://github.com/cypress-io/cypress/issues/517).\n*   Cypress CLI no longer requires `git` to install. Fixes [#124](https://github.com/cypress-io/cypress/issues/124)\n*   Improved the reporter's responsive design so controls still show at narrower widths. Fixes [#544](https://github.com/cypress-io/cypress/issues/544).\n*   Commands text will no long cut off into ellipses when the Command Log is set to a wider width. Fixes [#528](https://github.com/cypress-io/cypress/issues/528).\n*   Fixed issue where setting `fixturesFolder` to `false` would throw an error. Fixes [#450](https://github.com/cypress-io/cypress/issues/450).\n*   Fixed issue where Cypress hanged due to Xvfb permissions. More intuitive output is given during install failures. Fixes [#330](https://github.com/cypress-io/cypress/issues/330).\n*   [The checks used to determine an element's actionability](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Actionability) are now run synchronously. This solves some circumstances where the element could have moved or otherwise change between the checks. Fixes [#570](https://github.com/cypress-io/cypress/issues/570).\n*   Fixed issue where clipped elements with `overflow-y: hidden` were falsely passing as \"visible\". Fixes [#563](https://github.com/cypress-io/cypress/issues/563).\n*   When using [`.select()`](https://docs.cypress.io/api/commands/select) on a select with multiple options with the same value, we now properly set `selectedIndex` and `selectedOptions` on the `select`. Fixes [#554](https://github.com/cypress-io/cypress/issues/554).\n*   Fixed issue where changing any spec file (renaming, adding, deleting) would remove the highlighted styling of the currently active spec file in the Test Runner. Fixes [#547](https://github.com/cypress-io/cypress/issues/547).\n*   We now get the absolute paths of styles to use when displaying snapshots. This will fix situations where some stylesheets were improperly referenced during the snapshot, so did not display styles correctly. Fixes [#525](https://github.com/cypress-io/cypress/issues/525).\n*   Fixed issue where commands would retry and potentially exceed their timeout values during page transitions. Fixes [#594](https://github.com/cypress-io/cypress/issues/594)\n*   Fixed issue where server routes were lost after page load if not initiated by a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) command. Fixes [#177](https://github.com/cypress-io/cypress/issues/177)\n*   Using mocha's `done` callback now works correctly. We've improved mocha's handling of uncaught exceptions and properly associate them to test failures.\n*   [cy.viewport()](https://docs.cypress.io/api/commands/viewport) is now synchronized with the UI so that it does not resolve until the DOM has re-rendered using the dimensions.\n*   \"outer assertions\" now are correctly retried by previous commands. Fixes [#543](https://github.com/cypress-io/cypress/issues/543).\n*   The example\\_spec from the [kitchen-sink](https://github.com/cypress-io/cypress-example-kitchensink) will never accidentally be seeded when running [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) on a brand new project.\n\n**Misc:**\n\n*   We now display a warning in the console when returning a promise from a test and also invoking a Promise or cy commands. Fixes [#464](https://github.com/cypress-io/cypress/issues/464).\n*   Reduced the number of internal Cypress network requests in the \"Network Panel\" of Dev Tools. Fixes [#606](https://github.com/cypress-io/cypress/issues/606).\n*   We've moved our entire codebase into one into a private \"Monorepo\". This is in anticipation for going open source (making the GitHub repo public) and should make it easier for everyone to contribute to our code. Fixes [#256](https://github.com/cypress-io/cypress/issues/256).\n*   When element's are not visible due to being covered by another element, the error message now says what element is covering what element. [#611](https://github.com/cypress-io/cypress/issues/611)\n*   Improved the calculations to calculate an elements visibility. Additionally updated error messages to be clearer whenever an element isn't considered visible. Fixes [#613](https://github.com/cypress-io/cypress/issues/613)\n*   The \"Can't start server\" error displayed in the Desktop-GUI no longer prevents you from interacting in the Desktop App. It now displays as a warning. Fixes [#407](https://github.com/cypress-io/cypress/issues/407).\n*   [`cy.focused()`](https://docs.cypress.io/api/commands/focused) now automatically retries until the element exists in the DOM. This makes it behave the same as [cy.get()](https://docs.cypress.io/api/commands/get) Fixes [#564](https://github.com/cypress-io/cypress/issues/564) and [#409](https://github.com/cypress-io/cypress/issues/409).\n*   We now support per-project `state.json`. Fixes [#512](https://github.com/cypress-io/cypress/issues/512).\n*   We can now handle multiple projects per server. Fixes [#512](https://github.com/cypress-io/cypress/issues/512).\n*   The Test Runner can now have projects added by being 'dragged' in. Fixes .\n*   The Test Runner update window now has messaging about `package.json` versioning. Fixes [#513](https://github.com/cypress-io/cypress/issues/513).\n*   The Test Runner now accounts for cypress being installed per project as npm module. Fixes [#500](https://github.com/cypress-io/cypress/issues/500) and [#514](https://github.com/cypress-io/cypress/issues/514).\n*   [cypress install](https://docs.cypress.io/guides/guides/command-line) `-d` option. Fixes [#389](https://github.com/cypress-io/cypress/issues/389).\n*   Exposing Cypress Binary should no longer be necessary when cypress is locally installed. Fixes [#379](https://github.com/cypress-io/cypress/issues/379).\n*   Added an 'App Data' option in the Desktop App that displays app data. Fixes [#475](https://github.com/cypress-io/cypress/issues/475).\n*   When [`cy.spy()`](https://docs.cypress.io/api/commands/spy) or [`cy.stub()`](https://docs.cypress.io/api/commands/stub) are never called, the error now displays a clearer, grammatically correct error. Fixes [#520](https://github.com/cypress-io/cypress/issues/520).\n*   Detection of installed browsers has been improved. Fixes [#511](https://github.com/cypress-io/cypress/issues/511).\n*   When commands are clicked on and logged into the console from the Command Log, they now display their 'yield' instead of 'return', since they really yield instead of return. [#612](https://github.com/cypress-io/cypress/issues/612)\n*   The build process of the driver has been modernized. Fixes [#429](https://github.com/cypress-io/cypress/issues/429).\n*   XHR's from your application are no longer forcefully aborted between tests.\n*   Better error handling when running commands outside of a test.\n*   URL changes from navigation events or hashchanges now display more accurately.\n*   [cy.go()](https://docs.cypress.io/api/commands/go) now snapshots before and after the navigation event.\n*   Page load events no longer forcibly `null` out the current subject. This was very unexpected and difficult to debug. Now stale elements or other objects from previous pages are yielded to you.\n*   Using an array of the same alias in a [cy.wait()](https://docs.cypress.io/api/commands/wait) now yields you those XHR's in the order they were requested. Previously it was based on when the responses were returned.\n*   Returning `null` from a [.then()](https://docs.cypress.io/api/commands/then) will now change the subject to that. Previously returning `null` would not cause subject changes.\n*   We now no longer remove spies, stubs, or routes at the end of the very last test. This enables you to continue to manually use your app and have Cypress continue to instrument it.\n*   Updated a few things to more aggressively cause GC.\n*   Onboarding dialogs will never show up again once they are dismissed. Fixes [#522](https://github.com/cypress-io/cypress/issues/522).\n*   `window.alert()` and `window.confirm()` now generate a page event in the Command Log (including the message).\n*   [`cy.spy()`](https://docs.cypress.io/api/commands/spy) and [`cy.stub()`](https://docs.cypress.io/api/commands/stub) now have a `.log(bool)` method to disable their calls from generating a Command Log. Useful when your spies or stubs are called an excessive number of times.\n*   Improved command subject validation error messages.\n*   Improved the element detachment error messages (when you try to interact with an element that's become stale / detached from the document).\n*   We finally have _partial_ iframe support. You can at least now [cy.wrap()](https://docs.cypress.io/api/commands/wrap) iframe elements and interact with them using Cypress commands. More work needs to be done to \"switch into\" and back \"out of\" iframes. But we're getting there.\n*   Scaffolding new projects no longer generates a `default.js` file.\n*   Scaffolded `index.js` and `commands.js` have had their content updated to point to the custom commands API.\n*   You can now call [.focus()](https://docs.cypress.io/api/commands/focus) and [.blur()](https://docs.cypress.io/api/commands/blur) on [cy.window()](https://docs.cypress.io/api/commands/window).\n*   The `CYPRESS_DEBUG` env option has been removed in favor of the `debug` module and [`DEBUG=cypress:*`](https://docs.cypress.io/guides/guides/command-line#Debugging-commands) usage.\n*   Attempting to run [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) on a project without a `cypress.json` now errors instead of scaffolding and running the kitchen sink.\n\n**Documentation Changes:**\n\nNote: we are still updating all of the docs to reflect all the 0.20.0 changes.\n\n*   [New \"Catalog of Events\"](https://docs.cypress.io/api/cypress-api/catalog-of-events)\n*   [New \"Cypress.Commands\"](https://docs.cypress.io/api/cypress-api/custom-commands)\n*   [New \"Cypress.log\"](https://docs.cypress.io/api/cypress-api/cypress-log)\n*   [New \".trigger()\"](https://docs.cypress.io/api/commands/trigger)\n*   [New \"cy.scrollTo()\"](https://docs.cypress.io/api/commands/scrollTo)\n*   [New \".scrollIntoView()\"](https://docs.cypress.io/api/commands/scrollIntoView)\n*   [Updated \"Installing Cypress\"](https://docs.cypress.io/guides/getting-started/installing-cypress)\n*   [Updated \"Writing Your First Test\"](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test)\n*   [Updated \"Testing Your App\"](https://docs.cypress.io/guides/end-to-end-testing/testing-your-app)\n*   [Updated \"Command Line\"](https://docs.cypress.io/guides/guides/command-line)\n*   [Updated \"Debugging\"](https://docs.cypress.io/guides/guides/debugging)\n*   [Updated \"Assertions\"](https://docs.cypress.io/guides/references/assertions)\n*   [Updated \"Interacting with Elements\"](https://docs.cypress.io/guides/core-concepts/interacting-with-elements)\n\n## 0.19.4[​](#0-19-4 \"Direct link to 0.19.4\")\n\n_Released 06/18/2017_\n\n**Bugfixes:**\n\nFixed [.type()](https://docs.cypress.io/api/commands/type) not firing `input` event for [React](https://reactjs.org/) on versions 15.6.x. Fixes [#536](https://github.com/cypress-io/cypress/issues/536).\n\n## 0.19.3[​](#0-19-3 \"Direct link to 0.19.3\")\n\n_Released 06/14/2017_\n\n**Bugfixes:**\n\n*   Server's that send `Content-Encoding: br` no longer cause Cypress to fail due to incorrect decoding. Cypress now strips encodings it cannot accept. Fixes [#535](https://github.com/cypress-io/cypress/issues/535).\n\n## 0.19.2[​](#0-19-2 \"Direct link to 0.19.2\")\n\n_Released 04/16/2017_\n\n**Features:**\n\n*   You can now run your tests in the [Electron browser](https://docs.cypress.io/guides/guides/launching-browsers#Electron-Browser) that comes built with Cypress. You will see it as an option in the browser dropdown. This is the same browser that Cypress uses when running `cypress run`. This is useful for debugging issues that only occur during headless runs. Addresses [#452](https://github.com/cypress-io/cypress/issues/452).\n*   New traversal commands [`.nextAll()`](https://docs.cypress.io/api/commands/nextall), [`.nextUntil()`](https://docs.cypress.io/api/commands/nextuntil), [`.parentsUntil()`](https://docs.cypress.io/api/commands/parentsuntil), [`.prevAll()`](https://docs.cypress.io/api/commands/prevall), and [`.prevUntil()`](https://docs.cypress.io/api/commands/prevuntil) have been added. Addresses [#432](https://github.com/cypress-io/cypress/issues/432).\n\n**Bugfixes:**\n\n*   An error is now thrown if an `undefined` value is mistakenly passed into [`cy.wait()`](https://docs.cypress.io/api/commands/wait). Previously, it would set the command timeout to an unimaginably large number of ms. Fixes [#332](https://github.com/cypress-io/cypress/issues/332)\n*   Fixed issue where the contents of `state.json` were emptied, which would cause a crash and loss of state information. Fixes [#473](https://github.com/cypress-io/cypress/issues/473) and [#474](https://github.com/cypress-io/cypress/issues/474).\n*   We no longer write the chrome extension within `node_modules`, and instead write this to the proper OS specific `appData` folder. Fixes [#245](https://github.com/cypress-io/cypress/issues/245) and [#290](https://github.com/cypress-io/cypress/issues/290).\n\n**Misc:**\n\n*   Error handling for invalid arguments passed to [`cy.wait()`](https://docs.cypress.io/api/commands/wait) have been improved and will now suggest valid arguments that are acceptable.\n*   Browsers in the browser dropdown now have colored icons, which help visually distinguish the variants of Chrome.\n*   Increased timeout for browser to make a connection when running during `cypress run` from 10 seconds to 30 seconds.\n*   Internally refactored how browsers are added and spawned in preparation of us adding cross browser support.\n*   Switching specs in the GUI now closes the browser and respawns it and refocuses it.\n\n## 0.19.1[​](#0-19-1 \"Direct link to 0.19.1\")\n\n_Released 03/09/2017_\n\n**Features:**\n\n*   Added `Cypress.version` property. Fixes [#404](https://github.com/cypress-io/cypress/issues/404).\n*   Selecting `<option>` inside `<optgroup>` now works with [`.select()`](https://docs.cypress.io/api/commands/select). Fixes [#367](https://github.com/cypress-io/cypress/issues/367).\n\n**Bugfixes:**\n\n*   `EMFILE` errors have been fixed. These were being caused due to `ulimit` being too low on your OS. This should fix the file watching problems people were having. Essentially we just replaced `fs` with `graceful-fs` and crossed our fingers this works. (It did on our machines). Fixes [#369](https://github.com/cypress-io/cypress/issues/369).\n*   Now you can select the error text in the GUI. Fixes [#344](https://github.com/cypress-io/cypress/issues/344).\n*   Cypress now correctly re-bundles files even when `watchForFileChanges` is set to `false`. Fixes [#446](https://github.com/cypress-io/cypress/issues/446) and [#347](https://github.com/cypress-io/cypress/issues/347).\n*   Fixed file watching when changing the `integrationFolder` to something other than the default value. Fixes [#438](https://github.com/cypress-io/cypress/issues/438).\n*   [`.select()`](https://docs.cypress.io/api/commands/select) now works on options that have the same value. Fixes [#441](https://github.com/cypress-io/cypress/issues/441).\n*   Cypress no longer crashes when you click links in the on-boarding screen called \"To help you get started...\". Fixes [#227](https://github.com/cypress-io/cypress/issues/227).\n*   The `example_spec.js` file that gets seeded on a new project no longer fails on [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile). Fixes [#414](https://github.com/cypress-io/cypress/issues/414).\n\n**Misc:**\n\n*   We now preserve the Test Runner's position and sizing after it's closed + reopened. Fixes [#443](https://github.com/cypress-io/cypress/issues/443).\n*   We now ignore watching `node_modules`, `bower_components` and a few other folders to reduce the number of watched files. Fixes [#437](https://github.com/cypress-io/cypress/issues/437).\n\n## 0.19.0[​](#0-19-0 \"Direct link to 0.19.0\")\n\n_Released 02/11/2017_\n\n**Notes:**\n\n*   We have updated all of the docs related to these changes. The [CI Docs](https://docs.cypress.io/guides/continuous-integration/introduction) got a much needed facelift.\n*   There is a new docs section related to the [Dashboard](https://docs.cypress.io/guides/cloud/introduction) and the new features.\n\n**Overview:**\n\n*   We have officially released our [Dashboard](https://on.cypress.io/dashboard) which is our service that will display recorded runs.\n*   This service has now been fully integrated into the Desktop Application. There is a new on-boarding process that helps you setup projects for recording.\n\n**Breaking Changes:**\n\n*   We have done our very best to create as little breaking changes as possible.\n*   You will need to download a new [cypress-cli](https://docs.cypress.io/guides/guides/command-line) - version `0.13.1`.\n*   Older CLI versions will continue to work on `0.19.0` except for the [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open) command - and will we print a warning to nudge you to upgrade.\n*   Newer CLI versions will not work on versions of Cypress < `0.19.0` (but we don't know why this would ever even happen).\n\n**Features:**\n\n*   There is a new [Dashboard](https://on.cypress.io/dashboard) service that displays your recorded runs.\n*   The [Dashboard](https://on.cypress.io/dashboard) enables you to view your recorded runs, manage projects, create organizations, invite users and set permissions.\n*   Projects are either **public** with their runs being publicly viewable by anyone, or **private** which restricts their access to only users you've invited. All **existing** projects were set to **private** by default.\n*   When you invite users (from the Dashboard) we will **automatically** allow them. This means you can invite all of your teammates (or anyone else). They can start using Cypress without talking to us.\n*   We now list all of the recorded runs directly in the Test Runner under a new `Runs` tab. Fixes [#236](https://github.com/cypress-io/cypress/issues/236).\n*   Your list of projects in the Test Runner now displays their last recorded run status - passing, failing, pending, running, etc.\n*   We've changed the \"Config\" tab to now be called \"Settings\". We added two new sections to the \"Settings\" tab which displays your `projectId` and your Record Key. These sections do a much better job explaining what these are and how you use them.\n*   You no longer have to use `cypress get:key` to get your Record Key. We now display this in your \"Settings\" tab and also in the [Dashboard](https://on.cypress.io/dashboard).\n*   Projects will no longer automatically acquire a `projectId` when being added. There is now a very explicit **opt-in** process where you setup your project to record. This should make it much clearer what's going on behind the scenes.\n*   [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) now behaves likes `cypress ci` previously did and downloads + installs Cypress if it's not already installed.\n*   `cypress ci` now works in OSX, and also works in Linux in Desktop flavors (like Ubuntu).\n\n**Misc:**\n\n*   [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) will now download and install Cypress if it is not already installed.\n*   We renamed `CYPRESS_CI_KEY` TO `CYPRESS_RECORD_KEY`. This makes it clearer what this key actually does - and the fact that it can be run anywhere irrespective of CI. We still look for the old named key but will print a warning if we detect it.\n*   We print a warning when using an older CLI tool version. Fixes [#424](https://github.com/cypress-io/cypress/issues/424).\n*   We've improved many of the error messages related to recording runs. Fixes [#423](https://github.com/cypress-io/cypress/issues/423).\n*   `cypress ci` has been deprecated. You now use [`cypress run --record --key <record_key>`](https://docs.cypress.io/guides/guides/command-line#cypress-run). The key you used to pass to `cypress ci` is the same key. We've consolidated these commands into just [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) which makes it simpler and clearer. Their only difference is that passing `--record` to [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) will **record** the build to our Dashboard. Fixes [#417](https://github.com/cypress-io/cypress/issues/417).\n\n## 0.18.8[​](#0-18-8 \"Direct link to 0.18.8\")\n\n_Released 02/05/2017_\n\n**Overview:**\n\n*   We have officially implemented our [Sinon.JS](http://sinonjs.org/) integration: adding [`cy.stub()`](https://docs.cypress.io/api/commands/stub), [`cy.spy()`](https://docs.cypress.io/api/commands/spy), [`cy.clock()`](https://docs.cypress.io/api/commands/clock), and [`cy.tick()`](https://docs.cypress.io/api/commands/tick). We've matched Sinon's APIs and added `sinon-as-promised` and `chai-sinon`. In addition we've fixed Sinon performance issues, and improved the display of assertion passes and failures.\n*   These new APIs will work well in both `unit` tests and `integration` tests.\n\n**Features:**\n\n*   You can now use [`cy.stub()`](https://docs.cypress.io/api/commands/stub) and [`cy.spy()`](https://docs.cypress.io/api/commands/spy) synchronously. These both match the Sinon API identically. We will display `stub/spy` calls in the Command Log and provide the call count, arguments, context, and return values when you click on the log. Stubs are automatically reset between tests. Fixes [#377](https://github.com/cypress-io/cypress/issues/377).\n*   We've added our own special aliasing flavor to [`cy.stub()`](https://docs.cypress.io/api/commands/stub) and [`cy.spy()`](https://docs.cypress.io/api/commands/spy). You can use the [`.as()`](https://docs.cypress.io/api/commands/as) command and we will associate spy and stub invocations (the same way we do with XHR aliasing and route matching).\n*   We've added [`cy.clock()`](https://docs.cypress.io/api/commands/clock) and [`cy.tick()`](https://docs.cypress.io/api/commands/tick) which are both asynchronous methods to modify timers in your application under test. We automatically apply clock (even if you invoke it before your first [`cy.visit()`](https://docs.cypress.io/api/commands/visit)) and will automatically reapply it after page load. [`cy.tick()`](https://docs.cypress.io/api/commands/tick) will enable you to control the amount of time you want passed in your application. This is great for controlling _throttled_ or _debounced_ functions.\n*   `sinon-as-promised` is automatically applied under the hood which extends Sinon and provides the `.resolves(...)` and `.rejects(...)` APIs which makes it easy to stub promise returning functions.\n*   We support and display multiple sub spies when using Sinon's `.withArgs(...)` function.\n\n**Misc:**\n\n*   We've enhanced `chai-sinon` by improving the output during passes or failures. Fixes [#31](https://github.com/cypress-io/cypress/issues/31).\n*   We've ripped out Sinon's argument serialization in favor of our own.\n*   We no longer send Sinon to the remote application under test. In other words, you'll no longer see `sinon.js` being sent as a network request.\n*   Deprecated the undocumented `cy.agents` function, but it will continue to work and will be officially removed later.\n\n## 0.18.7[​](#0-18-7 \"Direct link to 0.18.7\")\n\n_Released 01/30/2017_\n\n**Bugfixes:**\n\n*   Fixed regression in `0.18.6` that caused Cypress to fail when switching spec files when `baseUrl` was set in `cypress.json`. Fixes [#403](https://github.com/cypress-io/cypress/issues/403).\n\n## 0.18.6[​](#0-18-6 \"Direct link to 0.18.6\")\n\n_Released 01/29/2017_\n\n**Features:**\n\n*   We now launch Cypress tests directly to the `baseUrl` to avoid an initial page refresh when encountering the first [`cy.visit()`](https://docs.cypress.io/api/commands/visit) command. This should help tests run faster. Fixes [#382](https://github.com/cypress-io/cypress/issues/382).\n\n**Bugfixes:**\n\n*   Uninstalling the last used browser no longer causes the Test Runner to error and hang. Fixes [#371](https://github.com/cypress-io/cypress/issues/371).\n*   Fixed issue where `stdout` would not be displayed on a completed `cypress ci` run. Fixes [#398](https://github.com/cypress-io/cypress/issues/398).\n*   Fixed a longstanding issue in Cypress where logging in from another computer would kill the session on all other computers, and prevent you from accessing `cypress get:key` (amongst other things). Fixes [#400](https://github.com/cypress-io/cypress/issues/400).\n\n**Misc:**\n\n*   We now validate all of the configuration options set in `cypress.json` to ensure it has valid types. Fixes [#399](https://github.com/cypress-io/cypress/issues/399).\n*   We now validate that `baseUrl` is accessible **prior** to running tests. This prevents a common situation where you may forget to boot your web server and have instantly failing tests. Fixes [#383](https://github.com/cypress-io/cypress/issues/383).\n*   We now show the entire scaffolded tree of files when adding a brand new project. Fixes [#401](https://github.com/cypress-io/cypress/issues/401).\n*   We display errors coming from `babel` with more helpful information now.\n*   Changed the [Test Runner](https://github.com/cypress-io/cypress/tree/develop/packages/desktop-gui) to use `JWT` for authorization. **You will have to log in again**.\n\n## 0.18.5[​](#0-18-5 \"Direct link to 0.18.5\")\n\n_Released 01/08/2017_\n\n**Features:**\n\n*   You can now disable `videoCompression` by passing `false` in `cypress.json` or env variables. In very long runs and on CPU throttled instances compression can take a considerable amount of time, possibly as much as 50% of the time spent running actual tests. Fixes [#372](https://github.com/cypress-io/cypress/issues/372).\n\n**Misc:**\n\n*   Improved performance when running `cypress run` by caching the last bundled spec. This prevents having the same spec file rebundled each time [`cy.visit()`](https://docs.cypress.io/api/commands/visit) caused a full page navigation. You should see a moderate improvement in test run time. Fixes [#370](https://github.com/cypress-io/cypress/issues/370).\n*   We are now capturing `stdout` and several other properties for use + display in our Dashboard on `cypress ci` runs.\n*   Enable [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) to send an encoding for images other than forcing the default encoding of `base64`. Fixes [#373](https://github.com/cypress-io/cypress/issues/373).\n*   Enable `cy.route()` to pass an `encoding` parameter when using `fx:fixture` syntax. Fixes [#374](https://github.com/cypress-io/cypress/issues/374).\n\n## 0.18.4[​](#0-18-4 \"Direct link to 0.18.4\")\n\n_Released 12/28/2016_\n\n**Bugfixes:**\n\n*   Prevent [`cy.url()`](https://docs.cypress.io/api/commands/url) from accessing the URL during transition phase and throwing an error. Fixes [#356](https://github.com/cypress-io/cypress/issues/356).\n*   Stubbed functions now serialize correctly when switching domains on a [`cy.visit()`](https://docs.cypress.io/api/commands/visit). Fixes [#354](https://github.com/cypress-io/cypress/issues/354).\n*   Fixed a handful of scenarios and edge cases where cookies were not properly synchronized between external requests and the browser. This led to situations where cookies were either duplicated on requests, or were not sent. Fixes [#357](https://github.com/cypress-io/cypress/issues/357) and [#361](https://github.com/cypress-io/cypress/issues/361) and [#362](https://github.com/cypress-io/cypress/issues/362).\n\n**Misc:**\n\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) now favors `baseUrl` config over remote origin when you do not pass a fully qualified URL. Fixes [#360](https://github.com/cypress-io/cypress/issues/360).\n\n## 0.18.3[​](#0-18-3 \"Direct link to 0.18.3\")\n\n_Released 12/18/2016_\n\n**Features:**\n\n*   There is now a [`cy.log()`](https://docs.cypress.io/api/commands/log) command for displaying an arbitrary message and args. Useful for providing context while testing and debugging long tests. Fixes [#342](https://github.com/cypress-io/cypress/issues/342).\n\n**Bugfixes:**\n\n*   [`cy.title()`](https://docs.cypress.io/api/commands/title) now uses the `document.title` property as opposed to querying for `<title>` elements in the `<head>`. Fixes [#351](https://github.com/cypress-io/cypress/issues/351) and [#331](https://github.com/cypress-io/cypress/issues/331).\n*   We now exit correctly (with status of 1) in the case of headless renderer crashes. Additionally we capture these errors properly, explain what happened, and link to external error document to suggest fixes. Fixes [#270](https://github.com/cypress-io/cypress/issues/270) and [#348](https://github.com/cypress-io/cypress/issues/348).\n\n**Misc:**\n\n*   Improved headless performance, and added optimizations for early and often GC.\n\n## 0.18.2[​](#0-18-2 \"Direct link to 0.18.2\")\n\n_Released 12/15/2016_\n\n**Bugfixes:**\n\n*   Under the hood [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now sets an `Accept: text/html,*/*` request header to prevent some web servers from sending back `404` in the case where they required this header. Only a small % of servers would ever do this, but `webpack-dev-server` was one of them. Fixes [#309](https://github.com/cypress-io/cypress/issues/309).\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) now sends an `Accept: */*` request header by default too. Fixes [#338](https://github.com/cypress-io/cypress/issues/338).\n\n**Misc:**\n\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) now includes more debugging information (related to headers) in the error output. Fixes [#341](https://github.com/cypress-io/cypress/issues/341).\n*   When [`cy.request()`](https://docs.cypress.io/api/commands/request) times out, we now output much better error messages including information about the request sent. Fixes [#340](https://github.com/cypress-io/cypress/issues/340).\n\n## 0.18.1[​](#0-18-1 \"Direct link to 0.18.1\")\n\n_Released 12/11/2016_\n\n**Notes:**\n\n*   There is a new [recipe showcasing these new features](https://github.com/cypress-io/cypress-example-recipes).\n*   We are adding several other recipes to show examples of all the ways you can use [`cy.request()`](https://docs.cypress.io/api/commands/request) to improve your tests.\n\n**Features:**\n\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) can now have its automatic redirect following turned off by passing `{followRedirect: false}`. Fixes [#308](https://github.com/cypress-io/cypress/issues/308).\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) now has a `qs` option that automatically appends query params to the `url` property. Fixes [#321](https://github.com/cypress-io/cypress/issues/321).\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) now follows redirects exactly like a real browser. Previously if you `POST`ed to an endpoint and it redirected to a `GET` then [`cy.request()`](https://docs.cypress.io/api/commands/request) would not follow it due to the `method` changing. It now follows method changing redirects by default. Fixes [#322](https://github.com/cypress-io/cypress/issues/322).\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) now accepts the `form` option which will convert the `body` values to urlencoded content and automatically set the `x-www-form-urlencoded` header. This means you can now use [`cy.request()`](https://docs.cypress.io/api/commands/request) to bypass your UI and login with standard form values. Fixes [#319](https://github.com/cypress-io/cypress/issues/319).\n*   When [`cy.request()`](https://docs.cypress.io/api/commands/request) fails, it now outputs the full request / response information. This behaves more similar to [`cy.visit()`](https://docs.cypress.io/api/commands/visit) failures. Fixes [#324](https://github.com/cypress-io/cypress/issues/324).\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) now prints **all** of the underlying HTTP request / response information into the Dev Tools' console (when clicking on the Command Log). This means that you will see everything you would normally see from the `Network` tab as if the request were made from the browser. We even print redirect information. Fixes [#325](https://github.com/cypress-io/cypress/issues/325).\n\n**Bugfixes:**\n\n*   Cypress' internal `babel` will no longer attempt to load your project's `.babelrc`. This helps avoid potential version conflicts. Fixes [#312](https://github.com/cypress-io/cypress/issues/312).\n*   We no longer watch the `supportFile` while running `cypress run`. Fixes [#329](https://github.com/cypress-io/cypress/issues/329).\n*   `watchForFileChanges` is now correctly respected in regards to watching all files, including the `supportFile`. Fixes [#336](https://github.com/cypress-io/cypress/issues/336).\n*   There is no longer an error when scaffolding a new Cypress project. Fixes [#326](https://github.com/cypress-io/cypress/issues/326).\n*   The Runner UI no longer appears to be \"running\" when there is a spec bundle error in the `supportFile`.\n*   Cypress now correctly exits during `cypress run` in `linux` when the browser fails to connect. Fixes [#333](https://github.com/cypress-io/cypress/issues/333).\n*   Cypress now correctly exits during `cypress run` in `linux` when there is a spec bundle error. Fixes [#337](https://github.com/cypress-io/cypress/issues/337).\n*   Cypress now retries up to 3 times for the browser to connect during `cypress run`. The warning / error messages were also updated to be clearer. Partially addresses [#334](https://github.com/cypress-io/cypress/issues/334).\n\n**Misc:**\n\n*   Deprecated `failOnStatus` property for [`cy.request()`](https://docs.cypress.io/api/commands/request) and renamed to `failOnStatusCode`. Fixes [#323](https://github.com/cypress-io/cypress/issues/323).\n*   Removed the `cookies` option from [`cy.request()`](https://docs.cypress.io/api/commands/request) because cookies are now _always_ get/set on requests. This option really never made any sense to have. Fixes [#320](https://github.com/cypress-io/cypress/issues/320).\n*   Better data reporting when recording builds in CI.\n*   We now collect \"global\" errors that may prevent any tests from running. We will be displaying these in our future CI platform.\n\n## 0.18.0[​](#0-18-0 \"Direct link to 0.18.0\")\n\n_Released 11/27/2016_\n\n**Notes:**\n\n*   We've created a new [example recipes repo](https://github.com/cypress-io/cypress-example-recipes) to show you common testing scenarios including how to use the new module support.\n\n**Summary:**\n\n*   We've added automatic ES2015+, module, JSX, and CJSX support to all test files. This means you can use `require`, `import`, or `export` declarations to load other files. You can also use this to import your own application specific JavaScript modules and write unit tests for them. More of these details are yet to come. [See this issue](https://github.com/cypress-io/cypress/issues/318).\n*   You can now use your regularly installed `node_modules` in your project to do things like utilizing [`lodash`](https://lodash.com/) for utility functions or extending [`chai`](http://www.chaijs.com/) with assertion plugins.\n*   Because we're now processing the spec files prior to handing them off to the browser, this means we will display problems like syntax errors when something in the processing goes wrong. Additionally, we print these out during `cypress run`, so you're not stuck wondering what went wrong.\n\n**Breaking Changes:**\n\n*   Previously, we auto-magically included all files within [`cypress/support`](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files). This has now [gone away](https://docs.cypress.io/guides/references/error-messages#Support-file-missing-or-invalid) and we've simplified this to automatically including a single `cypress/support/index.js` file. That single file acts as the entry point meaning you should `import` or `require` the other support files you'd like to include. Although this is still \"automatic\" it's much less magical and we'll be updating all of our docs to reflect this. The purpose of `cypress/support` hasn't really changed, just the implementation of it has. We will automatically seed a `cypress/support/index.js` file for you (even on existing projects). The file location of `cypress/support/index.js` can be changed with the new [`supportFile`](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) option in your `cypress.json`. This feature can also be turned off by specifying `supportFile: false`.\n\n**Features:**\n\n*   We now support ES2015+, modules, and JSX in all spec files. Fixes [#246](https://github.com/cypress-io/cypress/issues/246).\n*   Spec files may now be written as `.js`, `.jsx`, `.coffee`, or `cjsx` files.\n*   Test files with JS syntax errors are now [handled](https://docs.cypress.io/guides/references/error-messages) and we provide a GUI that points to the exact line/column number. Additionally we print these out during `cypress run` and exit the process with `code 1`. Fixes [#293](https://github.com/cypress-io/cypress/issues/293).\n\n**Misc:**\n\n*   We improved the logic around when and if we scaffold files on a new project. We're much smarter about this and not generating these forcibly every time. Fixes [#285](https://github.com/cypress-io/cypress/issues/285).\n*   Simplified handling of support files and made them less \"magical\". Fixes [#286](https://github.com/cypress-io/cypress/issues/286).\n*   Renamed `supportFolder` to [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) in `cypress.json`. We will automatically rename your `cypress.json` if this property was present on update.\n\n## 0.17.12[​](#0-17-12 \"Direct link to 0.17.12\")\n\n_Released 11/21/2016_\n\n**Bugfixes:**\n\n*   You no longer have to log in again after updating. Fixes [#305](https://github.com/cypress-io/cypress/issues/305).\n*   Updating in app now works again. Sorry about that. Fixes [#304](https://github.com/cypress-io/cypress/issues/304).\n*   Headless frame rate is now correctly set to `20` instead of resetting back to `60`. Fixes [#303](https://github.com/cypress-io/cypress/issues/303).\n*   We now automatically drop frames that the CPU cannot keep up with while video recording during `cypress run`. Previously we would buffer all frames in memory and it was possible to exhaust all memory due to the way that streaming backpressure works. Fixes [#302](https://github.com/cypress-io/cypress/issues/302).\n*   Fixed an edge case in the `driver` that could lead to memory leaks. This happened when Command Logs updated from previously run tests. Normally, in headless mode, we automatically remove references to purge memory after each test, but when logs were updated after this, their references were merged back in again and held onto forever. If you were seeing long Cypress runs die or eventually halt, this was likely the cause. We did extensive memory regression analysis on Cypress and could not find any more memory leaks. Fixes [#301](https://github.com/cypress-io/cypress/issues/301).\n\n**Misc:**\n\n*   Improved [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) and `cypress ci` headless output. Fixes [#306](https://github.com/cypress-io/cypress/issues/306).\n*   Improved performance by preventing `snapshots` from being taken during headless runs.\n\n## 0.17.11[​](#0-17-11 \"Direct link to 0.17.11\")\n\n_Released 11/16/2016_\n\n**Roadmap:**\n\n*   The changes in version `0.17.11` below are in preparation for Cypress platform service: a portal where screenshots, videos, config, and logs of your builds are accessible.\n\n**Overview:**\n\n*   `cypress ci` now uploads build assets to our servers after a test run completes. Additionally, it tracks the `config` settings used during the build and tracks each individual test failure.\n*   If you do _not_ want these assets to be tracked by Cypress, you need to switch to using [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run). We will happily remove any build assets that are accidentally uploaded to us during the update transition.\n\n**Features:**\n\n*   We now record videos during a headless run with both `cypress ci` and [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run). Fixes [#229](https://github.com/cypress-io/cypress/issues/229).\n*   After completing `cypress ci`, we now upload build assets (such as `screenshots` and `videos`) to be used in our upcoming admin interface. This will enable you to review assets without having to touch your CI server. Fixes [#292](https://github.com/cypress-io/cypress/issues/292).\n\n**Misc:**\n\n*   We've redesigned the headless run `stdout` to give you more details of the run, the stats after the run, what screenshots were taken, the video that was recorded, compression settings for the video, uploading asset progress, etc.\n*   Screenshot names now include their parent titles, and invalid file system characters are scrubbed. Fixes [#297](https://github.com/cypress-io/cypress/issues/297).\n*   We no longer artificially restrict the environment `cypress ci` can run in. It can now run _anywhere_. Fixes [#296](https://github.com/cypress-io/cypress/issues/296).\n*   We removed scaffolding any directories on a new project (during `cypress run`). Fixes [#295](https://github.com/cypress-io/cypress/issues/295).\n*   [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) no longer prompts the user for any kind of interaction, thus enabling you to use this in CI if you choose to do so. Fixes [#294](https://github.com/cypress-io/cypress/issues/294).\n*   There is a new [configuration](https://docs.cypress.io/guides/references/configuration) property called: `trashAssetsBeforeHeadlessRuns` (This was changed to `trashAssetsBeforeRuns` in [`3.0.0`](#3-0-0)) that is set to `true` by default and will automatically clear out screenshots + videos folders before each run. These files are not deleted, they are just moved to your trash.\n*   There are several new [configuration](https://docs.cypress.io/guides/references/configuration) properties for video recording: `videoRecording`, `videoCompression`, and `videosFolder`.\n\n## 0.17.10[​](#0-17-10 \"Direct link to 0.17.10\")\n\n_Released 11/07/2016_\n\n**Bugfixes:**\n\n*   Fixed switching between two different spec files from the desktop app causing `document.domain` to be wrong. Fixes [#276](https://github.com/cypress-io/cypress/issues/276).\n*   Fixed inserting the string `null` into [`cy.request()`](https://docs.cypress.io/api/commands/request) urls when providing a `baseUrl` in `cypress.json` while origin could not be determined. Fixes [#274](https://github.com/cypress-io/cypress/issues/274).\n*   Fixed incorrect error message on reverse visibility assertions. Fixes [#275](https://github.com/cypress-io/cypress/issues/275).\n\n**Misc:**\n\n*   We've improved the way we inject content into `<html>` responses by filtering the underlying HTTP request headers. We no longer inject content into templates which were loaded via XHR. Fixes [#257](https://github.com/cypress-io/cypress/issues/257) and [#288](https://github.com/cypress-io/cypress/issues/288).\n\n## 0.17.9[​](#0-17-9 \"Direct link to 0.17.9\")\n\n_Released 10/22/2016_\n\n**Bugfixes:**\n\n*   Cypress now applies cookies to the browser which were cleared between redirects. Fixes [#224](https://github.com/cypress-io/cypress/issues/224).\n*   Snapshots now work even when `<html>` tag has invalid attributes. Fixes [#271](https://github.com/cypress-io/cypress/issues/271).\n*   Cypress no longer crashes on initial [`cy.visit()`](https://docs.cypress.io/api/commands/visit) when the 3rd party web server never ends the response. Fixes [#272](https://github.com/cypress-io/cypress/issues/272).\n\n**Misc:**\n\n*   Changed default [`responseTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) from `20000` to `30000`.\n*   Changed default [`pageLoadTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) from `30000` to `60000`.\n*   The internal Cypress proxy now forcibly responds to requests taking longer than `responseTimeout`. Currently this sends back `text/html` with the `ETIMEDOUT` error, but this likely needs to be configurable. The reason we are now forcibly applying timeouts is to prevent `socket pooling exhaustion` where tests are running and a 3rd party server never responds to the request.\n\n## 0.17.8[​](#0-17-8 \"Direct link to 0.17.8\")\n\n_Released 10/13/2016_\n\n**Bugfixes:**\n\n*   Fixed `opener of undefined` errors due to `page load` events causing snapshots prior to the `load` event of the remote application. Thanks to everyone who helped pitched in on this one! Fixes [#258](https://github.com/cypress-io/cypress/issues/258).\n*   Cypress now correctly sets cookies with `expirationDate` in the past. Chrome did not handle these cookies as documented and our code did not take this into account. We also added a lot more `e2e` tests around this behavior. Fixes [#266](https://github.com/cypress-io/cypress/issues/266).\n*   We are now taking additional precautions to prevent Cypress from trashing the wrong folder during an upgrade (with an open project). This was actually fixed in `0.17.7` but the problem was is that during an update, the new version (which was fixed) was still being passed the wrong arguments from the older (broken) application. We've now upgraded `0.17.8` to detect this, and just use the expected default install location of Cypress. If you're concerned, just _close_ your currently open project before updating. Fixes [#265](https://github.com/cypress-io/cypress/issues/265).\n\n**Misc:**\n\n*   When an in app update fails in `linux` we now provide instructions on how to manually update Cypress.\n*   We now properly take the `maxAge` cookie flag into account and give it preference over the `expires` flag as per the cookie spec.\n\n## 0.17.7[​](#0-17-7 \"Direct link to 0.17.7\")\n\n_Released 10/12/2016_\n\n**Features:**\n\n*   There is now a new [`chromeWebSecurity`](https://docs.cypress.io/guides/references/configuration#Browser) option you can set in `cypress.json` to turn off Chrome's Web Security features. We've written a brand new reference that details why and how you could use this. [Cypress Web Security](https://docs.cypress.io/guides/guides/web-security). This option can be used for accessing `cross origin` `<iframes>` or if your application needs to test navigation across super domains. Fixes [#262](https://github.com/cypress-io/cypress/issues/262).\n\n**Bugfixes:**\n\n*   We now capture `cross origin` errors correctly instead of these showing as `Uncaught DOMExceptions` in the console. Fixes [#261](https://github.com/cypress-io/cypress/issues/261).\n*   We no longer trash the wrong folder on OSX in-app updates (when a project is open). Sorry about this! Fixes [#260](https://github.com/cypress-io/cypress/issues/260).\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) urls with domain-like segments (which weren't actually the domain) no longer cause Cypress to think you're trying to navigate to a different superdomain. Fixes [#255](https://github.com/cypress-io/cypress/issues/255).\n\n## 0.17.6[​](#0-17-6 \"Direct link to 0.17.6\")\n\n_Released 10/04/2016_\n\n**Features:**\n\n*   Snapshots will now be _pinned_ when clicking on a command in the Command Log. This enables you to inspect the state of the DOM when the snapshot was taken. We've given you a new series of controls for turning off the element highlighting and hitboxes. Additionally we've given you the ability to manually click through each named snapshot when there are multiple states (like before and after). Fixes [#247](https://github.com/cypress-io/cypress/issues/247).\n\n**Bugfixes:**\n\n*   Fixed a regression where tests that failed outside of a hook would incorrectly indicate themselves as a `before each` hook. In addition, in the default `spec`, reporter will now display the test name when a hook was the source of failure. Fixes [#253](https://github.com/cypress-io/cypress/issues/253).\n*   Fixed a deployment bug in the `core-desktop-gui`.\n*   We now prevent [`cy.visit()`](https://docs.cypress.io/api/commands/visit) from accidentally snapshotting twice.\n\n**Misc:**\n\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) and [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now correctly send `User-Agent` headers based on the current open browsing session. Fixes [#230](https://github.com/cypress-io/cypress/issues/230).\n\n## 0.17.5[​](#0-17-5 \"Direct link to 0.17.5\")\n\n_Released 10/02/2016_\n\n**Features:**\n\n*   We've added `JUnit` as a valid [built-in reporters](https://docs.cypress.io/guides/tooling/reporters). Fixes [#178](https://github.com/cypress-io/cypress/issues/178).\n*   You can now [add or write your own custom reporters](https://docs.cypress.io/guides/tooling/reporters). This means you can `npm install xyz-mocha-reporter` and we'll automatically correctly `require` that package. Alternatively you can write your own `xyz-custom_reporter.js` file. Fixes [#231](https://github.com/cypress-io/cypress/issues/231).\n*   The `reporter` can now be resized. We persist this state locally so it should \"stick\" between browser launches / app restarts. Fixes [#204](https://github.com/cypress-io/cypress/issues/204).\n*   Cypress now \"remembers\" the last browser you had open and will suggest opening that whenever a project is opened. Addresses [#193](https://github.com/cypress-io/cypress/issues/193).\n*   Instead of seeing `Script error.` - cross origins script errors are now handled specially and we throw a very long and exciting error explaining what just happened. Fixes [#241](https://github.com/cypress-io/cypress/issues/241).\n*   When uncaught errors are thrown in hooks we now indicate Mocha's behavior as part of the error - that it is skipping the remaining tests in the current suite. Fixes [#240](https://github.com/cypress-io/cypress/issues/240).\n\n**Bugfixes:**\n\n*   The reporter now more intelligently scrolls to prevent commands from being cut off. Useful in screenshots / video recording. Fixes [#228](https://github.com/cypress-io/cypress/issues/228).\n*   We've improved the logic of how snapshots are restored so that it does not break the CSS when there were full page navigations in the test and the CSS changed. Fixes [#223](https://github.com/cypress-io/cypress/issues/223).\n*   Iframes are now correctly handled when we restore snapshots. Previously, we removed iframes which would change the page layout and the hitboxes' coordinates we drew were wrong. Now we insert iframe placeholders that prevent the page layout from changing. Fixes [#234](https://github.com/cypress-io/cypress/issues/234).\n*   Snapshot hitboxes no longer incorrectly draw for elements that are hidden. Fixes [#251](https://github.com/cypress-io/cypress/issues/251).\n*   Fixed a bug that caused commands to time out on subsequent tests whenever there was an uncaught error + an assertion conflict. Fixes [#238](https://github.com/cypress-io/cypress/issues/238).\n*   Fixed an edge case where assertions would incorrectly associate to a previously run assertion. Fixes [#252](https://github.com/cypress-io/cypress/issues/252).\n*   Cypress commands now correctly execute in `after` and `afterEach` hooks on a failed test. Previously they would only run on passing tests. Fixes [#203](https://github.com/cypress-io/cypress/issues/203).\n\n**Misc:**\n\n*   We've bypassed Mocha's default uncaught error handling and replaced it with something much better - actually using the thrown error instances instead of creating a new arbitrary one. This means you'll see better stack traces on uncaught errors. Fixes [#193](https://github.com/cypress-io/cypress/issues/193).\n*   We've bypassed Mocha's default uncaught error handling in a `hook`. Normally this immediately ends the run. Instead we are skipping the remaining tests in the current suite. This prevents skipping potentially dozens or hundreds of tests downstream that are typically unrelated to the hook failure.\n*   We've updated `cypress-cli` package to `0.12.0`. You will need to download this new CLI version if you want to pass `--reporter-options`.\n*   Bumped the internal version of `mocha` from `2.2.1` to `2.4.5`.\n\n## 0.17.4[​](#0-17-4 \"Direct link to 0.17.4\")\n\n_Released 09/12/2016_\n\n**Breaking Changes:**\n\n*   Using subsequent [`cy.visit()`](https://docs.cypress.io/api/commands/visit)'s _in the same test_ will not necessarily force a full page refresh. If all that changed was the hash of a url, then the hash changes will take affect **without** a full page refresh. This matches the behavior of a real browser. Previously [`cy.visit()`](https://docs.cypress.io/api/commands/visit) always forced a full page refresh and this was not correct.\n\n**Features:**\n\n*   Using [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now acts _exactly_ how modifying the URL in a real browser works. This means that if you visit a url with a hash in it, instead of forcing a full page refresh, it will now modify the hash route as if you had manually changed it. This more accurately reflects real user behavior. Previously this was impossible to do with Cypress other than manually altering `window.location.hash`.\n\n**Bugfixes:**\n\n*   Fixed a regression in `0.17.2` which caused **separate** tests that were visiting the same URL not to actually visit the new URL and eventually time out. We've updated some of our internal QA processes around this because we rarely have regressions and they are a pretty big deal. Fixes [#225](https://github.com/cypress-io/cypress/issues/225).\n*   Fixed displaying `(null)` contentType when a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) returned a `404` status code. We now only display `contentType` when one exists.\n\n## 0.17.3[​](#0-17-3 \"Direct link to 0.17.3\")\n\n_Released 09/11/2016_\n\n**Features:**\n\n*   When `visible` assertions such as `should('be.visible')` fail we now print the reason Cypress thought the element was invisible. Matches what Cypress prints out when attempting to interact with invisible elements. Fixes [#221](https://github.com/cypress-io/cypress/issues/221).\n\n**Bugfixes:**\n\n*   Prevent `Host` header from having its port appended when request was for port `80` or `443` which lead to 3rd party reverse proxy problems such as with `zeit.co` hosting. Fixes [#222](https://github.com/cypress-io/cypress/issues/222).\n*   Send valid http response errors, and display new lines correctly. Fixes [#218](https://github.com/cypress-io/cypress/issues/218).\n*   Correctly inject on `5xx` http response codes. Fixes [#217](https://github.com/cypress-io/cypress/issues/217).\n*   Correctly inject on `4xx` and other bad http response codes when using Cypress as the file server. Fixes [#219](https://github.com/cypress-io/cypress/issues/219).\n*   Correctly inject on `gzip` errors from 3rd party servers doing unintended things. Fixes [#220](https://github.com/cypress-io/cypress/issues/220).\n\n## 0.17.2[​](#0-17-2 \"Direct link to 0.17.2\")\n\n_Released 09/06/2016_\n\n**Notes:**\n\n*   After this update if you are seeing `<iframe>` origin errors _please let us know_ by [opening an issue](https://github.com/cypress-io/cypress/issues/new). We will screen-share with you to diagnose the issue. We're no longer aware of any situation where this should happen, so if you're experiencing these bugs, please help us track them down.\n\n**Features:**\n\n*   Attempting to [`cy.visit()`](https://docs.cypress.io/api/commands/visit) a non `text/html` resource will now throw a specific error message instead of bombing on page injection with an `<iframe`\\> origin error. You have to visit actual `html`, you cannot visit something like a `.json` or `.png`. If you're wanting to visit an API route on your back end that does something like set cookies (thus avoiding loading your UI) you can just use [`cy.request()`](https://docs.cypress.io/api/commands/request) for this since it will now automatically get and set cookies under the hood. Fixes [#211](https://github.com/cypress-io/cypress/issues/211).\n\n**Bugfixes:**\n\n*   Fixed a regression in `0.17.1` that was incorrectly setting `Cache` headers. This _could_ cause a situation where you received an `<iframe>` origin error. Additionally we now set `No-Cache` headers whenever we inject content, but otherwise respect the headers coming from web servers. When using Cypress as the file server, we set `etags` but prevent caching.\n*   Most likely fixed a bug that was crashing Cypress due to `Cannot set headers after they've been sent`. We were unable to write a test for this since we could not recreate the error, but analyzed how it _may_ happen and fixed the code there. [open an issue](https://github.com/cypress-io/cypress/issues/new) if you see this error, it will be obvious since Cypress will literally crash.\n*   We stopped minifying `vendor.js` (for real this time). More optimizations to come around this.\n*   Prevented accidentally setting `domain` cookies when they were really `hostOnly` cookies, thus duplicating the number of cookies sent on requests. Kudos to [@bahmutov](https://github.com/bahmutov) for finding this one. Fixes [#207](https://github.com/cypress-io/cypress/issues/207).\n*   Fixed some edge cases in `cypress-core-extension` where it threw errors when attempting to `executeScript` on a tab with `about:blank` or `chrome://` urls.\n*   We've fixed some underlying issues with [`cy.go()`](https://docs.cypress.io/api/commands/go) during `cypress run`. It always worked fine in real Chrome. Previously there were some situations where it would not navigate forward / back correctly.\n\n**Misc:**\n\n*   No longer force [`cy.visit()`](https://docs.cypress.io/api/commands/visit) to navigate to `about:blank` prior to navigating to the real url. Fixes [#208](https://github.com/cypress-io/cypress/issues/208).\n*   [`cy.writeFile()`](https://docs.cypress.io/api/commands/writefile) can now accept an empty string. Fixes [#206](https://github.com/cypress-io/cypress/issues/206).\n*   Improved error messages for [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile) and [`cy.writeFile()`](https://docs.cypress.io/api/commands/writefile).\n*   The full file path is now included in console output for [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile) and [`cy.writeFile()`](https://docs.cypress.io/api/commands/writefile).\n*   The [Kitchen Sink](https://github.com/cypress-io/cypress-example-kitchensink) and `example_spec.js` have been updated to reflect the newest changes and features of `0.17.1`.\n\n## 0.17.1[​](#0-17-1 \"Direct link to 0.17.1\")\n\n_Released 08/31/2016_\n\n**Features:**\n\n*   You can now pass keyboard modifiers such as `ctrl`, `cmd`, `shift`, and `alt` to [`.type()`](https://docs.cypress.io/api/commands/type). In addition we've added support for not \"releasing\" these keys so they can affect other actions such as [`.click()`](https://docs.cypress.io/api/commands/click). Addresses [#196](https://github.com/cypress-io/cypress/issues/196).\n*   You can now type into the `<body>` or `document` as opposed to previously _having_ to target a valid focusable element. This is useful in situations where you're testing keyboard shortcuts and do not want to target a specific element. Addresses [#150](https://github.com/cypress-io/cypress/issues/150).\n*   There is a new command [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile) that reads files on your file system and changes the subject to the contents. Addresses [#179](https://github.com/cypress-io/cypress/issues/179).\n*   There is a new command [`cy.writeFile()`](https://docs.cypress.io/api/commands/writefile) that creates and/or writes contents to files on your file system. Addresses [#179](https://github.com/cypress-io/cypress/issues/179).\n\n**Bugfixes:**\n\n*   [`defaultCommandTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) now works correctly. The driver was still referencing the old `commandTimeout` value.\n*   The `__cypress.initial` cookie should now be removed during any [`cy.visit()`](https://docs.cypress.io/api/commands/visit), which should fix some edge cases with the proxy accidentally injecting content when it shouldn't. We also added a ton more e2e tests covering these edge cases and other behavior.\n*   The proxy now restricts its injection to only `Content-Type: text/html` headers so it will not accidentally inject into the wrong responses.\n\n**Misc:**\n\n*   All [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) extensions are now supported and Cypress will no longer throw on extensions it doesn't recognize. For known fixture extensions we'll continue to apply a default `encoding` and for everything else it will default to `utf8`. Fixes [#200](https://github.com/cypress-io/cypress/issues/200).\n*   [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) now accepts `encoding` as a 2nd optional argument.\n*   We now display a keyboard 'modifiers' column when clicking on a [`.type()`](https://docs.cypress.io/api/commands/type) in the Command Log.\n\n## 0.17.0[​](#0-17-0 \"Direct link to 0.17.0\")\n\n_Released 08/30/2016_\n\n**Overview:**\n\n*   The desktop application has been completely redesigned. We have moved from a tray application to a standard dock application. The list of projects is now in the same window as the list of tests in a project. As each test runs, the application highlights the currently running spec and displays the browser version running. The configuration of a project is now displayed in its own tab. There is now a Desktop Menu where you can logout, check for updates, or view help links.\n*   The test [runner](https://github.com/cypress-io/cypress/tree/develop/packages/runner) has been rebuilt from the ground up in [React.js](https://reactjs.org/). The left side of the runner called the [reporter](https://github.com/cypress-io/cypress/tree/develop/packages/reporter) is now a separate application. This, as well as other changes, markedly improved the performance of running tests. _Your tests will now run faster._ This will also enable you to test your application in full screen. Additionally this paves the way for being able to spawn multiple browsers at once and synchronize testing across them. This also means we'll be able to support mobile browsers. The UI for doing this hasn't been implemented but the vast majority of the work to accomplish this is done now.\n*   We have rewritten the entire proxy layer of the Cypress server to finally fix all the problems with CORS.\n\n**Breaking Changes:**\n\n*   You cannot [`cy.visit()`](https://docs.cypress.io/api/commands/visit) two different super domains within a single test. Example: `cy.visit('https://cypress.io').visit('https://anotherwebsite.com')`. There shouldn't be any reason you ever need to do this in a single test, if you do, you should make these two separate tests.\n\n**Features:**\n\n*   _All CORS related issues should finally be fixed now._ Cypress now internally switches to the domain that you used in your [`cy.visit()`](https://docs.cypress.io/api/commands/visit). This means that the correct domain will display in the URL based on the application currently under test. Your application's code will run under the current domain at all times. Previously we implemented an endless amount of hacks and internal translations to figure out the domain you were _supposed_ to be on without actually being on the domain. This caused code to behave different and caused subtle issues. Those issues should now be resolved. The entire proxy layer has been rewritten to handle all HTTPS certificates flawlessly, continue to inject (even on HTTPS pages), and still know when to automatically bypass injection so you can open other tabs while testing in Cypress. These new proxy changes also unlock the ability to do things like allowing or blocking specific 3rd party domains, or even be able to stub not just XHR's but any kind of HTTP request.\n*   `window.fetch` now works correctly. Stubbing these does not yet work but it is now possible for us to implement stubbing in a future version. Addresses [#95](https://github.com/cypress-io/cypress/issues/95).\n*   The list of tests now automatically refresh when test files are renamed, deleted, or added. In addition, because the list of tests is now displayed in the desktop application, we now synchronize the state of the current running spec.\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) has better error messages. Cypress now programmatically determines why a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) failed and gives you a ridiculously accurate error message. Addresses [#138](https://github.com/cypress-io/cypress/issues/138).\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now displays redirects and any cookies set.\n*   The currently running test is now scrolled into view. This behavior can be turned off by scrolling in the Command Log or selecting to disable auto-scroll at the top of the Command Log. Addresses [#194](https://github.com/cypress-io/cypress/issues/194)\n*   Tests in the Command Log now automatically expand when specific commands take longer than `1000ms` to run. Previously when running more than 1 test we did not expand commands until a test failed. Now they will be expanded and automatically collapsed whenever a single command is taking a long time to finish.\n*   We now have full blown subdomain support. This means you can now navigate to a subdomain either directly via a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) or by navigating in your application naturally (such as clicking an `<a>`).\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) now attaches and sets cookies transparently on the browser. Even though the browser will not physically make the request, we automatically apply outgoing cookies _as if_ the browser had made the request. Additionally we will automatically _set_ cookies on the browser based on the response. This means you can use [`cy.request()`](https://docs.cypress.io/api/commands/request) to bypass not just CORS but handle things like automatically logging in without having to manually perform these actions in the UI.\n*   We now handle HTTP request errors much better. Previously if your web server sent us back a `4xx` or `5xx` response we would automatically send back a `500`. Now we transparently pass these through.\n*   Improved dozens of error messages.\n*   [`.debug()`](https://docs.cypress.io/api/commands/debug) output has been improved, and you can now easily inspect the current command's subject.\n*   Clicking the URL in the header of the runner now opens that URL in a new tab.\n\n**Bugfixes:**\n\n*   Fixed URL proxy issue with subdomains. Fixes [#183](https://github.com/cypress-io/cypress/issues/183).\n*   Viewport size maximum has been decreased from `3001px` to `3000px` and minimum has been increased from `199px` to `200px` to match error messages. Fixes [#189](https://github.com/cypress-io/cypress/issues/189)\n*   WebSockets are now correctly proxied through HTTPS and through subdomains different than the current domain under test.\n*   Stopped [`.debug()`](https://docs.cypress.io/api/commands/debug) from accidentally mutating subjects.\n*   Cypress now correctly injects and handles pages which are missing a `<head>`, a `<body`\\>, or even an `<html>` tag. Previously it would bomb on pages missing these tags.\n*   All commands with a long message (such as assertions) are automatically scaled down in font size and truncated properly. In addition, assertions will correctly bold the `expected` and `actual` values.\n\n**Misc:**\n\n*   [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) no longer requires being logged in.\n*   Renamed configuration option `commandTimeout` to [`defaultCommandTimeout`](https://docs.cypress.io/guides/references/configuration). Cypress will transparently rewrite this if you have it in your `cypress.json`, so you don't have to do anything.\n*   Renamed `onConsole` and `onRender` Command Log options to `consoleProps` and `renderProps`. We still support the older property names for backwards compatibility.\n*   Added support for a command's `message` or `renderProps.message` to use markdown.\n*   The default value of `port` within a project's global [configuration](https://docs.cypress.io/guides/references/configuration) has changed from `2020` to now being a random open port. You can still configure a specific `port` if needed within the [configuration](https://docs.cypress.io/guides/references/configuration).\n*   We have upgraded the `Chromium` that runs headlessly on [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) to version `51`.\n*   The internal version of `node` which is built into Cypress is now `6.1.0`.\n*   Cypress `.js` files are no longer minified to make them easier to debug.\n*   We are cleaning up internal `__cypress` cookies more so they won't get in the way of testing your application.\n*   We now opt into `gzip` handling instead of forcing requests to omit it.\n*   The runner is now responsive. It will correctly scale down URLs on smaller screen sizes instead of looking completely broken in CSS. We also designed a much better loading indicator.\n*   Added button to the reporter that focuses the Test Runner and shows the list of tests.\n*   The reporter now updates the duration every `100ms` instead of only when a test changes.\n*   In the reporter, suites that are pending or contain only pending tests have the blue \"pending\" indicator on the left instead of the white \"processing\" indicator.\n\n## 0.16.5[​](#0-16-5 \"Direct link to 0.16.5\")\n\n_Released 07/31/2016_\n\n**Bugfixes:**\n\n*   Force exit codes that are `null` to `0`. Fixes [#184](https://github.com/cypress-io/cypress/issues/184).\n\n## 0.16.4[​](#0-16-4 \"Direct link to 0.16.4\")\n\n_Released 06/17/2016_\n\n**Bugfixes:**\n\n*   Fixed regression caused by `0.16.2` where a failed [`cy.contains()`](https://docs.cypress.io/api/commands/contains) would not be canceled and would continue to run and display failed assertions in between test runs (without a full page refresh). Fixes [#174](https://github.com/cypress-io/cypress/issues/174).\n\n## 0.16.3[​](#0-16-3 \"Direct link to 0.16.3\")\n\n_Released 06/17/2016_\n\n**Features:**\n\n*   `cy.route()` now accepts string glob patterns using [minimatch](https://github.com/isaacs/minimatch) under the hood. This means you can more easily route dynamic urls without using `regex`. Example: `cy.route('POST', '/users/*/comments', {})`.\n*   [`Cypress.minimatch`](https://docs.cypress.io/api/utilities/minimatch) is now exposed so you can easily test globbing patterns.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) can now be used on non-input elements that have a `tabindex` attribute. Key events will fire but no text content will change and no input based events fire. Fixes [#172](https://github.com/cypress-io/cypress/issues/172).\n*   There is now an [`ignoreTestFiles`](https://docs.cypress.io/guides/references/configuration) configuration option that accepts an array of `glob` patterns. This enables you to ignore extraneous spec files that may be created during a build process. The default pattern is `*.hot-update.js` which will ignore dynamically generated webpack hot module swapping files. Fixes [#159](https://github.com/cypress-io/cypress/issues/159).\n\n**Bugfixes:**\n\n*   Fixed a bug where Cypress could get into a weird state and continuously error due to the `before:log` event not being properly disposed. Fixes [#173](https://github.com/cypress-io/cypress/issues/173).\n*   Fixed a bug where invalid UTF-8 characters were being set in XHR headers which caused XHR's to fail. We now properly encode and decode all values. Fixes [#168](https://github.com/cypress-io/cypress/issues/168).\n*   Nested directories under `cypress/support` no longer cause a `500` when tests run. This was due to Cypress not ignoring directories and trying to serve them as regular files. Fixes [#163](https://github.com/cypress-io/cypress/issues/163).\n*   Fixed situations where 3rd party libraries (such as [New Relic](https://newrelic.com/) were instrumenting XHR's identical to Cypress' implementation. This caused an infinite loop which would crash the browser. We've updated how we instrument XHR's to take this into account and deployed multiple fallbacks and strategies to prevent this kind of thing from happening in the future. Fixes [#166](https://github.com/cypress-io/cypress/issues/166).\n\n**Misc:**\n\n*   `Cypress.Server.defaults()` now accepts a `urlMatchingOptions` option for passing options to [minimatch](https://github.com/isaacs/minimatch).\n*   [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) now exits with the number of test failures instead of always exiting with 0. This matches the same way `cypress ci` works. Fixes [#167](https://github.com/cypress-io/cypress/issues/167).\n*   In the [Cypress CLI tool](https://docs.cypress.io/guides/guides/command-line) package version `0.11.1`, you can now pass the `--spec` option to `cypress ci`. This enables you to run a specific spec file as opposed to all tests. Fixes [#161](https://github.com/cypress-io/cypress/issues/161).\n\n## 0.16.2[​](#0-16-2 \"Direct link to 0.16.2\")\n\n_Released 06/11/2016_\n\n**Features:**\n\n*   Added new [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) command which can take screenshots on demand.\n*   When running `cypress run` or in CI, Cypress will now automatically take a screenshot when a test fails. You can optionally turn this off by setting [`screenshotOnHeadlessFailure`](https://docs.cypress.io/guides/references/configuration#Screenshots) to `false` in your configuration.\n*   Added new [`screenshotsFolder`](https://docs.cypress.io/guides/references/configuration#Screenshots) configuration option with default of `cypress/screenshots`.\n*   When running in [Circle CI](https://circleci.com/), we automatically export screenshots as artifacts which makes them available directly in their web UI. If you're using Circle CI, you'll be able to see screenshots without doing anything. If you're using [Travis CI](https://travis-ci.org/), you'll need to upload artifacts to an `s3 bucket`. This is a small slice of what is coming to help diagnose and understand errors in CI. Also in `0.17.0` we will automatically scroll the tests and more intelligently and open / close test commands so you can visually see what happened. Currently you may not see the test command's failure in the Command Log due to the view not scrolling.\n*   Added new [`.each()`](https://docs.cypress.io/api/commands/each) command which iterates serially on a collection yielding the iteratee, the index, and the collection. Addresses [#156](https://github.com/cypress-io/cypress/issues/156).\n*   `cy.route()` can now accept a single function and/or you can pass a function to the `response` property. This allows you to lazily evaluate routing responses. Great for referencing fixtures. Addresses [#152](https://github.com/cypress-io/cypress/issues/152).\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) now accepts a regular expression. Addresses [#158](https://github.com/cypress-io/cypress/issues/158).\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now accepts `{downarrow}` and `{uparrow}`. We do not move the caret but do fire all the proper events. Addresses [#157](https://github.com/cypress-io/cypress/issues/157).\n\n**Bugfixes:**\n\n*   [`cy.exec()`](https://docs.cypress.io/api/commands/exec) now outputs additional `stderr` and `stdout` information. It additionally will automatically `source` your `$SHELL` which makes GUI apps behave as if they've been launched from your terminal. Fixes [#153](https://github.com/cypress-io/cypress/issues/153) and [#154](https://github.com/cypress-io/cypress/issues/154).\n*   [`.then()`](https://docs.cypress.io/api/commands/then) yielding nested subjects.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) no longer returns the last element found when siblings both contain the same content. Fixes [#158](https://github.com/cypress-io/cypress/issues/158).\n*   Cypress no longer errors when you return a raw DOM element. It now correctly wraps this as the new subject.\n\n**Misc:**\n\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) now provides an even more specific error message when it was scoped to a particular DOM element and contained a selector. Fixes [#160](https://github.com/cypress-io/cypress/issues/160).\n*   You will now see a very specific error message when we detect that you've mixed up `async` and `sync` code in a [`.then()`](https://docs.cypress.io/api/commands/then) callback function. An example would be queuing up a new cypress command but then synchronously returning a different value.\n\n## 0.16.1[​](#0-16-1 \"Direct link to 0.16.1\")\n\n_Released 05/22/2016_\n\n**Features:**\n\n*   [`Cypress.Cookies.debug()`](https://docs.cypress.io/api/cypress-api/cookies#Debug) now works again. Additionally it provides much more feedback than it used to.\n*   [`Cypress.Cookies.debug(true, {verbose: false})`](https://docs.cypress.io/api/cypress-api/cookies#Debug) option has been added to remove verbose cookie object logging.\n\n**Bugfixes:**\n\n*   Copy / Paste now works when logging in on OSX. Fixes [#145](https://github.com/cypress-io/cypress/issues/145).\n*   Grammar: 'Login -> Log in'. Fixes [#146](https://github.com/cypress-io/cypress/issues/146).\n*   Cypress now uses the body instead of headers to send external requests. Fixes [#148](https://github.com/cypress-io/cypress/issues/148).\n*   When [`.then()`](https://docs.cypress.io/api/commands/then) throws this no longer prevents the next test from issuing any commands. Fixes [#149](https://github.com/cypress-io/cypress/issues/149).\n\n**Misc:**\n\n*   Passing multiple arguments to [`.its()`](https://docs.cypress.io/api/commands/its) now throws and suggests you use [`.invoke()`](https://docs.cypress.io/api/commands/invoke). Fixes [#147](https://github.com/cypress-io/cypress/issues/147).\n\n## 0.16.0[​](#0-16-0 \"Direct link to 0.16.0\")\n\n_Released 05/17/2016_\n\n**Notes:**\n\n*   Updating through the Desktop App in **Linux** does not work. To update please run [cypress install](https://docs.cypress.io/guides/guides/command-line) from the command line.\n*   We are still updating the docs to reflect all of these changes.\n*   All users must _LOG IN AGAIN_ and re-add their projects. Sorry, we've changed the way we store local data.\n\n**Overview:**\n\n*   `0.16.0` marks a significant change for Cypress. Before this we only issued commands using regular JavaScript and coordinated these with the back end server which is running. As of `0.16.0` we are now tapping into the underlying browser automation libraries which enable us to exceed the limitations of the JavaScript sandbox. This means we have total control over the browser for more powerful automation tooling. The downside is that we have only implemented these APIs for Chrome, and therefore running on multiple browsers will no longer work. This is a temporary setback as we'll be adding driver support for all of the other browsers over a period of time. You can read more about our browser management [here](https://docs.cypress.io/guides/guides/launching-browsers).\n\n**Breaking Changes:**\n\n*   Running tests in Cypress now requires either Chrome, Chromium, or Canary to be installed on your OS environment. We intend to expand support for more browsers in the future, but for now, only these 3 are supported.\n*   Removed support for `Cypress.Cookies.get`, `Cypress.Cookies.set` and `Cypress.Cookies.remove`.\n*   Changed return of [`cy.getCookies()`](https://docs.cypress.io/api/commands/getcookies) to return an array of cookies, each with properties include name, value, etc.\n*   Changed return of [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies) to return null (previously was returning Cookie that was cleared).\n*   [`Cypress.Cookies.debug()`](https://docs.cypress.io/api/cypress-api/cookies#Debug) has been temporarily disabled and will be re-enabled later.\n*   Browsers are spawned in a Cypress specific profile so that we can maintain a clean state apart of your regular browsing usage. You will notice that your extensions are no longer installed. This is on purpose. 3rd party extensions can often get in the way of Cypress and cause failures. However, developer specific extensions for Angular, Ember, and React do not cause any issues but you'll want to reinstall them. You only have to install them once and they will persist.\n*   The `whitelist` callback function of [`Cypress.Cookies.defaults()`](https://docs.cypress.io/api/cypress-api/cookies#History) now receives a `cookie object` instead of just the `cookies name` as a string.\n\n**Features:**\n\n*   When a project is initially run from the desktop app, you can now choose to run Cypress in a select number of browsers including: Chrome, Chromium, or Canary (depending on what's installed on your OS).\n*   Browser sessions are spawned independently of your existing profiles and we've disabled things like password saving / prompting, JavaScript popup blocking, and other features which get in the way of testing. Read more [here](https://docs.cypress.io/guides/guides/launching-browsers)\n*   We automatically spawn Chrome in a **custom theme** so you can visually distinguish the difference between browser sessions spawned with Cypress vs your normal sessions. We know this may feel a little jarring because you're used to running Cypress alongside your other tabs. You will now see 2 chrome icons in your dock and you'll need to switch between them. We know this is problematic and confusing and we're looking into **changing the icon** of the Chrome running Cypress so it's easier to tell the Chrome sessions apart.\n*   Added new commands to handle getting, setting, and clearing cookies: [`cy.clearCookie()`](https://docs.cypress.io/api/commands/clearcookie), [`cy.getCookie()`](https://docs.cypress.io/api/commands/getcookie), and [`cy.setCookie()`](https://docs.cypress.io/api/commands/setcookie).\n*   All the `cy.cookie` commands have been upgraded to take new options and can do much more powerful things outside of the JavaScript sandbox.\n*   Upgraded the Chromium version running headlessly and in CI from `47` to `49`.\n*   There is a new [`cy.exec()`](https://docs.cypress.io/api/commands/exec) command that can execute any arbitrary system command. Additionally there is a new [`execTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) configuration option which is set to `60s` by default. Fixes [#126](https://github.com/cypress-io/cypress/issues/126).\n*   There is a new [`numTestsKeptInMemory`](https://docs.cypress.io/guides/references/configuration#Global) configuration option that controls how many test's snapshots and command data is kept in memory while tests are running. Reducing this number will reduce the memory used in the browser while tests are running. Whatever this number is - is how many tests you can walk back in time when inspecting their snapshots and return values. Addresses [#142](https://github.com/cypress-io/cypress/issues/142).\n\n**Bugfixes:**\n\n*   Cypress taskbar icon now displays correctly in OS X dark theme. Fixes [#132](https://github.com/cypress-io/cypress/issues/132).\n*   Fixed issue where server error's stack traces were being truncated in the Desktop app rendering them impossible to debug. Fixes [#133](https://github.com/cypress-io/cypress/issues/133).\n*   woff Fonts are now properly served from a local file system when using Cypress' web server. Fixes [#135](https://github.com/cypress-io/cypress/issues/135).\n*   When an element's center is not visible the error message now includes the stringified element in question, and not `undefined`.\n*   Typing into an `input[type=tel]` now works. Fixes [#141](https://github.com/cypress-io/cypress/issues/141).\n*   XHR's which have their `onload` handler replaced after `XHR#send` is called is now properly accounted for. Fixes [#143](https://github.com/cypress-io/cypress/issues/143).\n\n**Misc:**\n\n*   XHR requests for `.svg` files are no longer shown in the Command Log by default. Addresses [#131](https://github.com/cypress-io/cypress/issues/131).\n*   Improved error when [`cy.request()`](https://docs.cypress.io/api/commands/request) fails. The request parameters are now included in the error. Addresses [#134](https://github.com/cypress-io/cypress/issues/134).\n*   When running a project in the new Cypress browser environment, if a new tab is opened, a message now displays discouraging the use of multiple tabs while testing. Addresses [#9](https://github.com/cypress-io/cypress/issues/9).\n*   When navigating directly to `localhost:2020` outside of the new Cypress browser environment, a message now displays discouraging running tests outside of the new Cypress browser environment.\n*   If, for whatever reason, Cypress cannot communicate with the automation servers, your testing session will immediately end and you'll have the ability to re-spawn the browser.\n*   [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) now has a default timeout of `responseTimeout` which is `20s`.\n*   [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) can now properly time out and accepts an `options` argument that can override its default timeout.\n*   Improved initial Desktop Application startup performance by about `1.5s`.\n*   We now correctly store local data in each operating system's correct `Application Data` area. This will be more resilient to upgrades in the future.\n*   Running Cypress in a linux VM on VirtualBox no longer displays \"black screens\".\n*   Our internal proxy no longer strips `HttpOnly` cookie flags.\n*   Improved command errors and normalized many of them. Fixes [#137](https://github.com/cypress-io/cypress/issues/137).\n*   JavaScript popup blocking is now disabled and will not interfere with running tests. Fixes [#125](https://github.com/cypress-io/cypress/issues/125).\n*   We now capture synchronous errors from XHR `onreadystatechange` handlers.\n\n## 0.15.4[​](#0-15-4 \"Direct link to 0.15.4\")\n\n_Released 04/22/2016_\n\n**Notes:**\n\n*   The docs have not yet been updated to reflect the changes to [`.its()`](https://docs.cypress.io/api/commands/its) and [`.invoke()`](https://docs.cypress.io/api/commands/invoke).\n\n**Breaking Changes:**\n\n*   You can no longer improperly use [`.its()`](https://docs.cypress.io/api/commands/its) and [`.invoke()`](https://docs.cypress.io/api/commands/invoke). Using [`.invoke()`](https://docs.cypress.io/api/commands/invoke) on a non function property will result in an error that tells you how to write it properly using [`.its()`](https://docs.cypress.io/api/commands/its).\n\n**Features:**\n\n*   Our [chat](https://gitter.im/cypress-io/cypress) has now been directly integrated into Cypress's nav. Clicking on the `chat` icon will immediately display the current gitter chat log.\n*   Added a new link to Options dropdown in Desktop app for \"Chat\" that goes to our [chat](https://gitter.im/cypress-io/cypress).\n*   [`.its()`](https://docs.cypress.io/api/commands/its) and [`.invoke()`](https://docs.cypress.io/api/commands/invoke) now support **dot separated** nested properties.\n*   Using [`.its()`](https://docs.cypress.io/api/commands/its) on a function will now allow you to access its properties instead of automatically calling a function. Fixes [#122](https://github.com/cypress-io/cypress/issues/122).\n*   Error messages and command messages for [`.its()`](https://docs.cypress.io/api/commands/its) and [`.invoke()`](https://docs.cypress.io/api/commands/invoke) have been improved.\n*   Adding an attribute called `data-cypress-ignore` to an element will prevent the internal Cypress proxy from rewriting any of its content or attributes.\n\n**Bugfixes:**\n\n*   During `cypress run`, windows created with `window.open` will no longer physically display. They are now correctly headless. Fixes [#123](https://github.com/cypress-io/cypress/issues/123).\n*   The auto generated `example_spec.js` no longer errors on `cy.visit('app/index.html')` since that file would likely not locally exist.\n\n**Misc:**\n\n*   Better error handling of unauthorized users attempting to login to Cypress with improved [Login documentation](https://docs.cypress.io/guides/getting-started/installing-cypress).\n\n## 0.15.3[​](#0-15-3 \"Direct link to 0.15.3\")\n\n_Released 04/10/2016_\n\n**Features:**\n\n*   Cypress will now [display the **resolved** configuration values when you open a project](https://docs.cypress.io/guides/references/configuration#Resolved-Configuration). This tells you the source of all config values.\n*   The latest version of the [Cypress CLI](https://docs.cypress.io/guides/guides/command-line) now accepts passing arguments to [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open). Example: `cypress open --config waitForAnimations=false --env foo=bar,baz=quux`. This enables you to set and override local `cypress.json` configuration and additionally set environment variables.\n*   [Environment Variables](https://docs.cypress.io/guides/guides/environment-variables) that match any configuration keys (such as `pageLoadTimeout` or `watchForFileChanges`) now override their values. So, if you `export CYPRESS_WATCH_FOR_FILE_CHANGES=false` it will turn off this configuration option. Also note that we'll automatically normalize environment keys so: `CYPRESS_pageLoadTimeout=100000` and `CYPRESS_PAGE_LOAD_TIMEOUT=100000` will both be correctly handled. We'll also coerce values into `Boolean` or `Number` correctly.\n*   Cypress now correctly proxies WebSockets that are pointed at the local Cypress server (typically `localhost:2020`). Because most users use [Socket.io](http://socket.io/), when Socket.io could not correctly connect over WebSockets it would fall back to XHR polling. You may notice many less XHR requests in your command log (which is the intended behavior).\n*   The tray icon in OSX will now change colors. It will turn blue when you're running a Cypress project and red on any kind of failures such as syntax errors in `cypress.json`. It will turn back black when nothing is actively running.\n*   The title of your project is now the title of the browser tab (so you can easily tell Cypress tabs from one another).\n*   There is now a link to our [chat](https://gitter.im/cypress-io/cypress) in the navigation of the web app.\n\n**Bugfixes:**\n\n*   The `-s` or `--spec` option now works correctly. You now must pass a relative or absolute path to your spec file. This is much less confusing, allows you to easily autocomplete entries from bash, and will support `unitFolder` later when it's added. Assuming you want to run a spec file that is located in `cypress/integration/foo_spec.js` you would pass: `cypress run --spec 'cypress/integration/foo_spec.js'`. Previously you could just pass `--spec foo_spec.js` which now no longer works (and was broken anyway). Fixes [#120](https://github.com/cypress-io/cypress/issues/120).\n\n**Misc:**\n\n*   Open sourced another core repo: [Cypress Core Test Runner](https://github.com/cypress-io/cypress/tree/develop/packages/desktop-gui) which makes up the Cypress Desktop Application.\n*   Improved the [error message](https://github.com/cypress-io/cypress/issues/74#issuecomment-208422453) displayed to users on Windows attempting to download the Cypress Desktop app.\n\n## 0.15.2[​](#0-15-2 \"Direct link to 0.15.2\")\n\n_Released 04/03/2016_\n\n**Features:**\n\n*   The [error message when Cypress detects that a test has ended early](https://docs.cypress.io/guides/references/error-messages) (there are still commands left in the queue) now displays a list of these commands with a much improved explanation.\n*   There is now a new [configuration option](https://docs.cypress.io/guides/references/configuration): `watchForFileChanges` that, when set to `false` in the `cypress.json`, will prevent Cypress from attempting to watch for file changes and restart your tests.\n*   You can now set the default [`reporter`](https://docs.cypress.io/guides/references/configuration) in `cypress.json` for use during `cypress run` or in CI.\n\n**Bugfixes:**\n\n*   The [\\--reporter](https://docs.cypress.io/guides/guides/command-line#cypress-run) CLI option is now working again.\n*   the `teamcity` reporter is now also working again.\n\n**Misc:**\n\n*   Updated favicon + logo mark\n\n## 0.15.1[​](#0-15-1 \"Direct link to 0.15.1\")\n\n_Released 04/01/2016_\n\n**Features:**\n\n*   [`cy.go()`](https://docs.cypress.io/api/commands/go) and [`cy.reload()`](https://docs.cypress.io/api/commands/reload) now accept a timeout option. Also, these commands would previously time out after the default `commandTimeout` of `4000ms`, but now they will timeout after `pageLoadTimeout` of `30000ms`.\n\n**Bugfixes:**\n\n*   When an integration test file is unable to run and the `integrationFolder` is not the default path, the UI error now properly prints the integration test file's path by stripping off `integration` in the path. Fixes [#117](https://github.com/cypress-io/cypress/issues/117).\n*   `Cypress.Dom.isHidden()` will now throw error when it isn't passed a DOM element.\n\n**Misc:**\n\n*   Renamed [configuration](https://docs.cypress.io/guides/references/configuration) option `visitTimeout` to `pageLoadTimeout`. You don't need to change anything. If you were specifically setting `visitTimeout` in your `cypress.json` file it will be transparently rewritten `pageLoadTimeout` on the next server boot. This option was renamed because now multiple commands `cy.visit()`, `cy.go()`, and `cy.reload()` all depend on this timeout option.\n*   The Cypress tray icon has been updated. It's much better now.\n\n## 0.15.0[​](#0-15-0 \"Direct link to 0.15.0\")\n\n_Released 03/28/2016_\n\n**Overview:**\n\n*   As we get closer to a public release we've decided to focus on onboarding new users and new projects. We've made several breaking changes to help with this process.\n\n**Features:**\n\n*   There is now an `example_spec.js` file that is scaffolded on new projects. This allows new users to instantly see Cypress successfully running on an example project and will answer many questions on writing your first tests. This `example_spec.js` file contains every single Cypress command and has approximately 70 tests.\n*   Added a welcome dialog for new projects that explains how Cypress scaffolds out its folder structure. This dialog will only display if Cypress detects that you haven't written any tests or changed the initial `example_spec.js` file. The welcome dialog will no longer display after you've changed or added any tests.\n*   Added the ability to click on file/folder links from within the Cypress webapp that will spawn your OS file/folder finder and show you where the files are located in your project.\n*   There is now a default `cypress` folder that contains your test files, a `fixtures` folder with an example fixture, and a `support` folder with example support files. Inside `cypress` there is an `integration` folder that will contain your integration tests.\n*   You can now turn off `supportFolder` and `fixturesFolder` by passing `false` in `cypress.json`. This will automatically remove the folders the next time you open your project in Cypress. Fixes [#102](https://github.com/cypress-io/cypress/issues/102).\n*   Restyled the tests list.\n\n**Breaking Changes:**\n\n*   Cypress no longer looks at your `tests` directory for test files. Now, by default, it looks in the `cypress/integration` directory.\n*   We've removed the configuration option `testFolder` and renamed it to [`integrationFolder`](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) inside of the `cypress.json`.\n*   We've renamed the `cypress` npm package to be `cypress-cli`. You'll see a giant deprecation warning until your scripts have been updated to reference `cypress-cli`.. You can also uninstall the `cypress` npm package.\n*   Added new [`fileServerFolder`](https://docs.cypress.io/guides/references/legacy-configuration#Folders--Files) configuration option that can mount a directory other than your project root when using Cypress as a web server.\n\n**Misc:**\n\n*   Using [`.hover()`](https://docs.cypress.io/api/commands/hover) will provide a detailed error message with a link for working around hover constraints. Addresses [#10](https://github.com/cypress-io/cypress/issues/10)\n*   Internal routing errors in Cypress are now gracefully handled with `x-cypress-error` and `x-cypress-stack` set on response headers.\n*   Updated all of the repo names to be modular.\n\n**What you need to do**:\n\n*   We did not write an automatic migration from `tests` -> `cypress`\n*   You need to manually move your existing test files from `tests` into `cypress/integration`.\n*   [Come into the chat](https://gitter.im/cypress-io/cypress) if you have any problems or need help.\n\nMore Info:\n\n*   Why did you change the default test folder to be `cypress/integration`.\n*   We are adding support for unit testing in the near future and decided that there needs to be a separation between `unit` and `integration` tests. The actual runner will handle these two sets of specs very differently. It's important to make the change now so when we do add support for unit tests, you only have to create a `unit` folder inside of your `cypress` folder.\n\n## 0.14.3[​](#0-14-3 \"Direct link to 0.14.3\")\n\n_Released 03/20/2016_\n\n**Features:**\n\n*   Added [`cy.getCookies()`](https://docs.cypress.io/api/commands/getcookies) command for easy chain-ability. Fixes [#103](https://github.com/cypress-io/cypress/issues/103).\n*   Cypress now outputs its version when passed the `--version` argument\n*   If you are not logged in on OSX, Cypress now issues a native system notification indicating to you that Cypress is running in your tray (many users often complained they could not tell Cypress was actually running)\n\n**Bugfixes:**\n\n*   Handle clearing cookies better when they are created on a path other than `/`. Fixes [#104](https://github.com/cypress-io/cypress/issues/104).\n*   Issuing Cypress Commands inside of a Promise now works. Fixes [#111](https://github.com/cypress-io/cypress/issues/111).\n*   'Add Project' dialog is no longer lost on blur. Fixes [#115](https://github.com/cypress-io/cypress/issues/115).\n*   Desktop windows that are transparent no longer lose their box shadow.\n\n**Misc:**\n\n*   `cy.visit()` callback functions: `onBeforeLoad` and `onLoad` are now invoked with the current runnables context instead of with `cy`. This makes accessing properties in your tests much easier.\n\n## 0.14.2[​](#0-14-2 \"Direct link to 0.14.2\")\n\n_Released 03/14/2016_\n\n**Bugfixes:**\n\n*   Chaining more cy commands after using [`cy.wrap()`](https://docs.cypress.io/api/commands/wrap) now works. Fixes [#114](https://github.com/cypress-io/cypress/issues/114).\n*   Cypress now handles events property when a DOM element is removed during a `.click()` event. As per the spec, if `mousedown` causes element removal then `mouseup` and `click` and `focus` events will not be fired. Additionally if removal happens during `mouseup` then `click` event will not be fired. Also updated the `onConsole` groups to only display and indicate the events which actually fired. Fixes [#109](https://github.com/cypress-io/cypress/issues/109).\n\n**Misc:**\n\n*   Removed `fa-refresh` icons next to suites and tests until this behavior has been reimplemented due to ID removal.\n*   Removed resetting the runnable timeout when a `page load` event resolves. This prevents an edge case where the next test may show as timed out during `cypress run`.\n\n## 0.14.1[​](#0-14-1 \"Direct link to 0.14.1\")\n\n_Released 03/13/2016_\n\n**Features:**\n\n*   Project ID's and `cypress.json` are now only generated once you start your Cypress server. Previously they were created initially when you choose the project folder. This now means you won't have to cleanup excess files if you accidentally select the wrong folder. Additionally you can now use Cypress 100% offline. Previously the GUI would block until the project had an ID but this restriction has been lifted.\n\n**Bugfixes:**\n\n*   The proxy server can now correctly proxy content on a `ipv6` host only. We had to patch node core to get this in, as by default node prefers `ipv4`. We now concurrently test all hosts via `dns.lookup` to find the first one that responds. This updated behavior now matches how other clients, like `curl`, and browsers resolve hosts. Fixes [#112](https://github.com/cypress-io/cypress/issues/112).\n*   Simplified how Cypress stores projects and fixed some edge cases where Cypress would send an outdated Project ID.\n*   Prevent server from opening and immediately closing + re-opening when project is missing a Project ID and one is generated.\n*   Using Cypress as a file server and serving a file that's part of a folder that has a name containing a space now works. Fixes [#113](https://github.com/cypress-io/cypress/issues/113).\n*   The existing `.cy` cache and settings are now correctly copied again after an app update.\n\n**Misc:**\n\n*   Projects without an ID now error correctly when running in CI.\n*   When Cypress cannot proxy http content due to a software error it will attach a `x-cypress-error` and `x-cypress-stack` to the HTTP request for easy inspection and debugging.\n*   Cypress will now output its internal logger directly to the console when `CYPRESS_DEBUG` env var is set.\n*   Replaced Ruby / Compass with `node saas`.\n\n## 0.14.0[​](#0-14-0 \"Direct link to 0.14.0\")\n\n_Released 03/08/2016_\n\n**Summary:**\n\n*   This update represents mostly a lot of internal structure changes. We swapped out the underlying Desktop architecture and refactored all of the back end code to prepare for an open source release.\n*   If you choose to install Cypress from the [CLI Tool](https://docs.cypress.io/guides/guides/command-line) you must update to the latest version `0.9.1`. Just run `npm install -g cypress` and then you can run [cypress install](https://docs.cypress.io/guides/guides/command-line). You don't need to do anything if you update from within the Test Runner itself.\n\n**Features:**\n\n*   The Desktop App has been re-skinned with misc GUI enhancements such as help text, popovers, clearer errors, better loading indicators, etc.\n*   The Desktop App's file size is now much smaller and unzips much faster. In the next release there will be a special `CI` build which removes the need to run Xvfb.\n*   Test IDs have been removed. You will no longer see Cypress insert IDs into your test files. This was a feature we implemented on day 1 - the idea being we could track test performance and do regression analysis. Unfortunately, it will be a long time before we actually implement the data science to make this happen. For the time being, IDs presented unnecessary technical complexity and challenges with no real upside. We recommend you remove all of your existing IDs. We've added a new command to the CLI tool that can do this in one shot. `cypress remove:ids` You may see IDs be reintroduced at a later time when we provide analytics.\n*   [`.then()`](https://docs.cypress.io/api/commands/then) now supports a `timeout` option. Fixes [#110](https://github.com/cypress-io/cypress/issues/110).\n*   All error messages from using the CLI have been rewritten and improved.\n*   Cypress will now automatically prompt you to add a project when using [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) on a project that has not yet been added.\n*   Domain cookies are now proxied better. There's still more work to do before they are 100% fixed but now most typical domain cookie scenarios should 'just work'.\n*   We've put together a new example repo called [The Kitchen Sink](https://github.com/cypress-io/examples-kitchen-sink). It demonstrates usage of every single Cypress command.\n\n**Bugfixes:**\n\n*   Using [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) in OSX now works again.\n*   Added fs polling support to fix issues where Cypress would not detect file changes.\n*   Tests should reload inside of Cypress faster when they are changed.\n*   Better error messages when a command times out waiting for a promise to resolve. Fixes [#108](https://github.com/cypress-io/cypress/issues/108).\n*   [`cy.viewport('ipad-2')`](https://docs.cypress.io/api/commands/viewport) now displays by default in portrait. Landscape orientation is now properly landscape. Fixes [#100](https://github.com/cypress-io/cypress/issues/100).\n*   [`.click()`](https://docs.cypress.io/api/commands/click) will now properly click within an element's bounding box when a `position` option is passed and the calculated coordinates are a fraction. This previously forced the click to happen outside of the element. Fixes [#99](https://github.com/cypress-io/cypress/issues/99).\n*   `clientX` and `clientY` event properties are now correctly calculated for elements when the page is scrolled. Fixes [#98](https://github.com/cypress-io/cypress/issues/98).\n*   [`.check()`](https://docs.cypress.io/api/commands/check) and [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck) now correctly filter down the subject when a value is passed as an option. Fixes [#94](https://github.com/cypress-io/cypress/issues/94).\n*   The Test Runner will now display your email address when you have not set a name in GitHub.\n\n**Misc:**\n\n*   Improved element display in Command Log when multiple elements are part of an assertion. Fixes [#96](https://github.com/cypress-io/cypress/issues/96).\n*   [`cy.reload()`](https://docs.cypress.io/api/commands/reload) now returns the window object of the newly reloaded page. Fixes [#105](https://github.com/cypress-io/cypress/issues/105).\n\nKnown Issues:\n\n*   Clicking the 'reload' icon next to a test that does not have an ID will not work anymore. We're reworking this feature to work without the presence of IDs.\n\n## 0.13.9[​](#0-13-9 \"Direct link to 0.13.9\")\n\n_Released 01/28/2016_\n\n**Bugfixes:**\n\n*   Prevent regression with not automatically scaling the viewport to fit into the window size\n\n**Misc:**\n\n*   Update links to match new [documentation](https://docs.cypress.io/)\n*   [`.debug()`](https://docs.cypress.io/api/commands/debug) has been zipped up - it no longer logs confusing debugging information and now logs information about the previously run command.\n*   [`Cypress._`](https://docs.cypress.io/api/utilities/_), [`Cypress.$`](https://docs.cypress.io/api/utilities/$), [`Cypress.Promise`](https://docs.cypress.io/api/utilities/promise), [`Cypress.Blob`](https://docs.cypress.io/api/utilities/blob), `Cypress.moment` utilities have been moved off of `cy` and are now attached to `Cypress`. This is much more consistent with how the `cy` and `Cypress` APIs work. You can continue to use these objects off of `cy` but this has been deprecated and you will see a warning message.\n\n## 0.13.8[​](#0-13-8 \"Direct link to 0.13.8\")\n\n_Released 01/24/2016_\n\n**Features:**\n\n*   Added [`cy.reload()`](https://docs.cypress.io/api/commands/reload) command which does a full page refresh. This is the same as the user hitting the 'Reload' button. Additionally it matches the same argument signature as `window.location.reload`.\n\n**Bugfixes:**\n\n*   Fixed situation where [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) would not restore correctly between tests. Previously this would cause subsequent tests to be issued at the modified `cy.viewport()`. Now viewport is automatically restored to the settings in your `cypress.json` file.\n\n**Misc:**\n\n*   Using [`.its()`](https://docs.cypress.io/api/commands/its) on a function or [`.invoke()`](https://docs.cypress.io/api/commands/invoke) on a property now logs a deprecation warning. In the next major release this will become a full error. It is valuable to make a distinction whether you're operating on a property vs a function, and this change improves overall readability with less confusion.\n*   Cypress deprecations and warnings are now prefixed with: `Cypress Warning:` to indicate this message is coming from Cypress\n\n## 0.13.7[​](#0-13-7 \"Direct link to 0.13.7\")\n\n_Released 01/17/2016_\n\n**Bugfixes:**\n\n*   Prevent error during element stringification on `<svg>`. Fixes [#93](https://github.com/cypress-io/cypress/issues/93).\n*   Clarified on errors related to not being able to run in CI. Previously there was a \"catch all\" error indicating your Cypress API Key was invalid. This was oftentimes incorrect. More specific errors have been added.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) has been upgraded to handle current selection ranges. Previously if an `<input>` had a selection range as Cypress began to type, this would be ignored. Cypress now takes this into account and will type over any selected text (as native typing would do).\n\n**Misc:**\n\n*   All Cypress related services have been updated to use HTTPS. We are forcing HTTPS redirects for everything except for `api.cypress.io`, which would be a breaking change. By the next minor release we will force that as well. Once we make this change we will remove all versions below `0.13.7`. So make sure you **are not** locking the Cypress version when running in CI. We periodically remove old Cypress versions which have security flaws and this is an example of one.\n\n## 0.13.6[​](#0-13-6 \"Direct link to 0.13.6\")\n\n_Released 01/09/2016_\n\n**Features:**\n\n*   All commands now retry if the associated element is disabled until the element is no longer disabled. If the command times out a specific error message is now thrown.\n*   `cy.server()` and `cy.route()` now take an optional `onAbort` callback which fires anytime an XHR is aborted.\n\n**Bugfixes:**\n\n*   Fixed edge case where XHR's which were already aborted were aborted a 2nd time when tests end. Cypress now only aborts currently running XHR's which have not already been aborted.\n*   When passing an array of aliases to [`cy.wait()`](https://docs.cypress.io/api/commands/wait) there was an edge case where an incorrect error message was being thrown. The incorrect values were a combination of the wrong alias, the wrong timeout value, or the wrong request or response. Now Cypress correctly provides all 3 of these values.\n\n## 0.13.5[​](#0-13-5 \"Direct link to 0.13.5\")\n\n_Released 01/03/2016_\n\n**Features:**\n\n*   Added new command: [`cy.go()`](https://docs.cypress.io/api/commands/go) which accepts `back`, `forward`, or an arbitrary Number.\n*   [`cy.go()`](https://docs.cypress.io/api/commands/go) enables you to navigate back or forward in your history. Cypress intelligently handles situations where moving forward or back causing a full page refresh, and will wait for the new page to load before resolving and moving onto new commands. It additionally handles situations where a page load was not caused (such as hash routing) and will resolve immediately.\n\n**Misc:**\n\n*   Using `{force404: false}` will now output a warning explaining this is now the default option and can be removed safely.\n\n## 0.13.4[​](#0-13-4 \"Direct link to 0.13.4\")\n\n_Released 12/31/2015_\n\n**Features:**\n\n*   Added `waitForAnimations` and `animationDistanceThreshold` [configuration options](https://docs.cypress.io/guides/references/configuration#Actionability).\n*   Cypress now automatically detects and waits for an element which is animating to stop animating. The threshold that Cypress considers _animating_ is set to a distance of `5px` per `60fps`. In other words, if your element is moving too fast for a user to interact with, then Cypress considers the element animating and will wait until it finishes before attempting to interact with it. When we say 'interact' we mean apply command actions like [`.click()`](https://docs.cypress.io/api/commands/click), [`.select()`](https://docs.cypress.io/api/commands/select), [`.type()`](https://docs.cypress.io/api/commands/type), [`.check()`](https://docs.cypress.io/api/commands/check), etc. Waiting for animations prevents a series of edge cases and weird bugs where Cypress was interacting with elements **too** quickly which might cause undesired side effects in your application which are hard to track down. The downside to this implementation is that for every action Cypress must wait at least 2 run loops before applying actions. This slows down every action command by about `32ms`. If your app does not use animations you may wish to turn off this behavior in your `cypress.json` file.\n\n**Bugfixes:**\n\n*   Prevent `undefined` error when attempting to [`.click()`](https://docs.cypress.io/api/commands/click) an element which is fixed position when it is covered by another element. Cypress now correctly provides why it cannot click the element in question. Fixes [#90](https://github.com/cypress-io/cypress/issues/90).\n*   Prevent infinite loop in edge cases when checking whether an element was hidden.\n\n**Misc:**\n\n*   The default behavior of `cy.server()` has changed from `force404: true` to become `force404: false`. In other words, Cypress will no longer forcibly send XHR's to 404 status when these XHR's do not match any existing `cy.route()`. This change better aligns with predictable usage for most Cypress users.\n\n## 0.13.3[​](#0-13-3 \"Direct link to 0.13.3\")\n\n_Released 12/25/2015_\n\n**Notes:**\n\n*   Merry Christmas everyone ;-)\n\n**Features:**\n\n*   Overhauled the entire subsystem dealing with an element's visibility state. Previously we were using jQuery's `.is(\":visible\")` selector which was ineffective at truly determining when an element is \"visible\". Our changes now differ significantly from jQuery, but they match what a real user would consider visible, and the rules are fairly easy to explain. In other words these rules should just \"make sense\".\n*   An element is considered visible if it can be \"interactive\" with a user. In other words, if the user is able to click, type, drag, or otherwise physically interact with the element it is considered visible.\n*   Because of the additional complexities of how Cypress considers an element `visible`, we now have added the **exact** reason why an element is not visible when throwing an error. This means you'll see errors detailing whether an element or its parents have `display: none`, `visibility: hidden`, or whether an element is considered hidden because its effective `width` or `height` is zero. Whatever the reason, Cypress will indicate why your element is considered hidden.\n*   Exposed `Cypress.Dom.isHidden` which holds the logic for determining an element's visibility. Modify this to change the rules.\n*   Upgraded [`.select()`](https://docs.cypress.io/api/commands/select) to automatically retry when the `<select>` is disabled, its matching `<option>` is disabled, or when Cypress cannot find a matching `<option>`. This more correctly aligns with the behavior of other actions like [`.click()`](https://docs.cypress.io/api/commands/click), which automatically retry until the element is ready to receive the action.\n\n**Bugfixes:**\n\n*   Throw on [`.select()`](https://docs.cypress.io/api/commands/select) when it cannot find a matching `<option>`. Also throw when `<select>` or a matching `<option>` is disabled. Fixes [#91](https://github.com/cypress-io/cypress/issues/91).\n*   \"Hidden\" elements which actually displace height or width are now highlighted when restoring the DOM when a command is hovered.\n*   Margin on zero client width / client height is now displayed correctly on command hover and more accurately mimics the way Chrome Dev Tools highlights elements.\n*   Using `history.back`, `history.forward`, or `history.go` in CI or in headless mode now works again.\n\n**Misc:**\n\n*   The updated hidden rules apply to all assertions like `should(\"be.hidden\")`, and how Cypress indicates an element is hidden displays in the Command Log.\n*   Updated many error messages to be more explanatory and precise.\n*   Elements which are stringified during errors now indicate their text content (truncated to 10 characters) `<button>Save</button>` or whether they contain children elements by indicating an ellipsis `<div>...</div>`.\n*   The Routes instrument panel now displays the column: `Stubbed` instead of `Status`, which indicates whether a route is stubbing matching XHR's.\n\n## 0.13.2[​](#0-13-2 \"Direct link to 0.13.2\")\n\n_Released 12/20/2015_\n\n**Notes:**\n\n*   Docs have been updated for [`cy.wait()`](https://docs.cypress.io/api/commands/wait), `cy.route()` and `cy.server()` to reflect these changes.\n\n**Features:**\n\n*   Added `responseTimeout` [configuration](https://docs.cypress.io/guides/references/configuration) value.\n*   [`cy.wait()`](https://docs.cypress.io/api/commands/wait) has been upgraded to now use two separate `timeout` values. In previous versions [`cy.wait()`](https://docs.cypress.io/api/commands/wait) used the `commandTimeout` and would automatically time out if the XHR did not achieve a response in that time frame. Now [`cy.wait()`](https://docs.cypress.io/api/commands/wait) will go through two independent timeout phases. At first [`cy.wait()`](https://docs.cypress.io/api/commands/wait) will wait for an XHR to be requested which matches its route. It will wait up to the value configured with `requestTimeout` (default 5000ms). After it sees a matching request it will then go into `response` waiting mode. It will wait up to the value configured with `responseTimeout` (default 20000ms). When [`cy.wait()`](https://docs.cypress.io/api/commands/wait) fails you now receive a much better error message indicating exactly which phase failed. Whether a request was never sent out, or whether it timed out waiting for a response. This gives you the best of both worlds and prevents situations where Cypress was timing out on slow servers. By creating new configuration values: `requestTimeout` and `responseTimeout` you can now directly control this behavior without affecting other regular commands.\n\n**Bugfixes:**\n\n*   Prevent removing trailing new lines on fixtures after formatting.\n*   Added cache buster to test files which forces them to be reloaded in the `Sources` panel after making modifications. In previous versions when test files were live reloaded Chrome would not display their new contents due to a bug in Dev Tools. We've now worked around this issue.\n\n**Misc:**\n\n*   Removed `{stub: false}` option from `cy.server()` and `cy.route()`. Cypress will now log a deprecation warning when you use the this option. Removing this option helps simplify the API because now Cypress can figure out whether you really want to stub the route based on whether you've provided a response or not. If you have not provided a response, the default behavior will be to not stub. If you do provide a response, Cypress will stub the route.\n*   Repurposed `requestTimeout` to now mean the time we wait for an XHR to be requested. Changed [`cy.request()`](https://docs.cypress.io/api/commands/request) to now use `responseTimeout` configuration value.\n*   Updated many error messages to be more consistent.\n*   Added special error messages when elements cannot have actions applied to them with a suggestion to use `{force: true}`.\n\n## 0.13.1[​](#0-13-1 \"Direct link to 0.13.1\")\n\n_Released 12/11/2015_\n\n**Notes:**\n\n*   We are aware of issues running in CI with Linux builds, and are working through those issues.\n\n**Bugfixes:**\n\n*   Prevent headless / CI from throwing errors on `history.pushState` and `history.replaceState`.\n*   Prevent edge case where `aliasing` in the Command Log was aliasing the wrong command\n*   Prevent XHR's from throwing errors on `arraybuffer` content. Properly set `xhr.responseBody` for `XML`, `blob`, and `arraybuffer`.\n*   Headless running is now fixed in OSX. This was due to a bug with app signing + unzipping via the CLI.\n\n## 0.13.0[​](#0-13-0 \"Direct link to 0.13.0\")\n\n_Released 12/9/2015_\n\n**Summary:**\n\n*   Though it may not look like much, this upgrade was a long time in the making. There were limitations in the way we were currently handling headless / CI builds which restricted our ability to make updates or fix bugs. Additionally CI runs would randomly crash for no good reason. We decided to split out the headless / CI process into its own independent Chromium application which is now independently controlled, and is much more reliable. This upgrade enables us to handle CI features coming down the pipe and was necessary for moving forward.\n\n**Features:**\n\n*   Upgraded `Chromium` for headless and CI runs from `41` to `45`.\n*   You will now see better stack traces and errors during `cypress run` / in CI. No more `undefined is not a function` errors.\n*   Ported all links to use the new Cypress CDN.\n*   [Documentation to CLI](https://docs.cypress.io/guides/guides/command-line).\n\n**Bugfixes:**\n\n*   New chromium upgrade prevents synchronous XHR freezes.\n*   New chromium upgrade fixes situation where extremely long CI runs would sometimes randomly crash.\n*   Fixed problem with rewriting content on elements which contained `<svg>` elements.\n\n**Breaking Changes:**\n\n*   Temporarily ignoring the `--reporter` option for headless / CI runs. Currently it is locked to the `spec` reporter, which is the default. This will be fixed in the next few patch releases.\n*   Accessing `window.history.go()`, `window.history.back()`, `window.history.forward()` will throw an error during `cypress run` / CI. This is a regression that will be fixed - hopefully very soon. This is fixed in [`0.13.3`](#0-13-3)\n*   While this new Chromium application passes our internal tests, it may crop up other regressions we aren't aware of. If you're experiencing different behavior in CI vs running locally in Chrome, this may be an indication of these.\n\n## 0.12.8[​](#0-12-8 \"Direct link to 0.12.8\")\n\n_Released 12/2/2015_\n\n**Features:**\n\n*   There is now a new [Error Messages Page](https://docs.cypress.io/guides/references/error-messages) which will provide additional explanation when you are getting errors from Cypress. These errors will be directly linked to (like how Angular provides errors).\n*   Instead of hard coding external documentation, we now link everything through a redirection portal. This will prevent any links / documentation from ever breaking due to reorganization or renaming.\n*   Cypress now throws a specific error message (with a link to further explanation) if you attempt to run commands outside of a test. Usually this happens accidentally when you write `cy.commands` inside of a `describe` or `context` block instead of the `it`. I've wasted too much time and almost bombed entire presentations / demos so I've finally stopped this from ever happening again. If you ever see this error message, trust me, you will forever thank me.\n*   The error message: `Cannot call cy.method() because the current subject has been removed or detached from the DOM.` has been rewritten to provide much clearer information on why this is happening, including a string representation of your DOM element. Additionally it will have its own error page dedicated to explaining how this happens and what you can do to prevent it.\n\n**Misc:**\n\n*   Rewrote error message which is displayed when Cypress cannot parse your test / spec file. Now a list of suggestions are given and an external link is provided which further explains how this may happen.\n*   Clarified the \"Default Message\" page when you have not [`cy.visit()`](https://docs.cypress.io/api/commands/visit) your application yet.\n*   Ignored `.coffee`, `.scss`, `.less` XHR's from displaying in the Command Log.\n\n## 0.12.7[​](#0-12-7 \"Direct link to 0.12.7\")\n\n_Released 11/30/2015_\n\n**Bugfixes:**\n\n*   Prevent passing `{multiple: true}` incorrectly showing up in Command Log. Fixes [#88](https://github.com/cypress-io/cypress/issues/88).\n*   Properly allow resource like XHR's which have query params such as jquery's `{cache: false}` option.\n*   Correctly take into account `<base>` tag on XHR's. Fixes [#89](https://github.com/cypress-io/cypress/issues/89).\n\n## 0.12.6[​](#0-12-6 \"Direct link to 0.12.6\")\n\n_Released 11/29/2015_\n\n**Features:**\n\n*   There are now [Getting Started](https://docs.cypress.io/guides/getting-started/installing-cypress) docs including [configuration](https://docs.cypress.io/guides/references/configuration) for `cypress.json`\n*   Cypress now silently restarts the server whenever it detects a change to `cypress.json` - meaning you no longer have to manually reboot the server for changes to be picked up.\n*   There is a new [`Cypress.config`](https://docs.cypress.io/api/cypress-api/config) interface - akin to [`Cypress.env`](https://docs.cypress.io/api/cypress-api/env) which provides access to configuration values.\n\n**Bugfixes:**\n\n*   Setup/Teardown code was not properly running on nested Mocha `before`hooks which caused the error: `The XHR server is unavailable or missing...`. Fixes [#80](https://github.com/cypress-io/cypress/issues/80) and [#86](https://github.com/cypress-io/cypress/issues/86).\n*   Prevent accidental mutation of `cy.server()` options when `cy.route()` was provided options. Fixes [#84](https://github.com/cypress-io/cypress/issues/84) and [#85](https://github.com/cypress-io/cypress/issues/85).\n*   Using [`cy.title()`](https://docs.cypress.io/api/commands/title) would incorrectly search the `<body>` for title elements, and is now restricted to only searching in the `<head>`\n*   Cross-Origin requests are now proxied by Cypress. In other words their URL's are transparently rewritten which bypasses CORS problems. This is a quick fix which should satisfy most of the problems users were having with CORS requests. However there is a much bigger change coming in `0.14.0` where the entire proxy layer will be rewritten to accommodate CORS, `window.fetch` and `domain cookies` flawlessly. As it stands Cypress is prone to errors in complex setups.\n\n**Misc:**\n\n*   Exposed `visitTimeout` and `requestTimeout` [configuration](https://docs.cypress.io/guides/references/configuration).\n*   Increased `visitTimeout` from `20s` to `30s`.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) will now throw if you are attempting to click more than 1 element. Pass `{multiple: true}` to enable this behavior again. Each element will be clicked serially and inserted into the Command Log.\n\n## 0.12.5[​](#0-12-5 \"Direct link to 0.12.5\")\n\n_Released 11/22/2015_\n\n**Features:**\n\n*   Errors reading / writing `cypress.json` on project add are now displayed inline.\n\n**Bugfixes:**\n\n*   Prevent app crashing when `cypress.json` could not be read or written to when adding a project.\n\n**Misc:**\n\n*   App crashes now send a full stack trace (instead of 10 line truncation).\n*   Better error handling + error messages when trying to read / write from `cypress.json`.\n\n## 0.12.4[​](#0-12-4 \"Direct link to 0.12.4\")\n\n_Released 11/19/2015_\n\n**Features:**\n\n*   There is a new [`Cypress.Cookies`](https://docs.cypress.io/api/cypress-api/cookies) interface which enables you to `get`, `set`, and even `preserve` cookies throughout your test. Useful to preserve cookie-based sessions between your tests. [Documentation is written here](https://docs.cypress.io/api/cypress-api/cookies).\n\n**Bugfixes:**\n\n*   Removed problematic `content-security-policy` headers\n*   Fixed situation where Cypress was not injected correctly when `<head>` tag had attributes\n*   Prevent fixtures from being accidentally overwritten and having their content blanked out. There was a very subtle chance due to node's async file writing that as a file was being written with a formatted fixture, that another call to the same fixture would read in at that exact moment. If this happened the 2nd read would resolve with zero bytes, which would then end up rewriting the file back with zero bytes.\n\n**Misc:**\n\n*   `alerts` are automatically accepted now and a message logs to the console.\n*   Added retina favicon. Fixes [#83](https://github.com/cypress-io/cypress/issues/83).\n*   Removed nested `cypress` object in the `cypress.json`. Existing `cypress.json` files are transparently rewritten on the next server boot, so you can check in the modified `cypress.json` and all will be well. Fixes [#82](https://github.com/cypress-io/cypress/issues/82).\n*   Improved performance of formatting fixtures.\n\n## 0.12.3[​](#0-12-3 \"Direct link to 0.12.3\")\n\n_Released 11/04/2015_\n\n**Bugfixes:**\n\n*   Prevent [`.pause()`](https://docs.cypress.io/api/commands/pause) from actually pausing during `cypress run`.\n*   Fix for [`cy.request()`](https://docs.cypress.io/api/commands/request) SSL issues when host certificates were self signed.\n\n## 0.12.2[​](#0-12-2 \"Direct link to 0.12.2\")\n\n_Released 11/01/2015_\n\n**Features:**\n\n*   There is now a `cy.cmd` and `cy.command` method which enables you to invoke commands by their string name. This is most useful when using _namespaced_ custom commands. So `Cypress.addParentCommand(\"dashboard.setSlider\", ...)` can be accessed by `cy.cmd(\"dashboard.setSlider\", arg1, arg2)`. (Docs have not been written yet).\n*   `Environment Variable` support has been added and can be accessed in your tests with [`Cypress.env`](https://docs.cypress.io/api/cypress-api/env). The docs have been written [Environment Variable](https://docs.cypress.io/guides/guides/environment-variables) and [here](https://docs.cypress.io/api/cypress-api/env).\n\n**Misc:**\n\n*   The URL property on all XHR's is now completely decoded, even on URLs which were originally encoded. The reason is for easier assertions and debugging. This URL property is specific to Cypress and does not actually affect the underlying XHR.\n\n## 0.12.1[​](#0-12-1 \"Direct link to 0.12.1\")\n\n_Released 10/28/2015_\n\n**Bugfixes:**\n\n*   `cy.route()` will no longer throw that a response is needed when using `cy.server({stub: false})`.\n*   Applying server defaults to `Cypress.Server.defaults({})` now works as documented.\n*   `onRequest` and `onResponse` can now be correctly set as permanent server defaults.\n*   XHR URL is now decoded to make assertions easier. Fixes [#75](https://github.com/cypress-io/cypress/issues/75).\n\n## 0.12.0[​](#0-12-0 \"Direct link to 0.12.0\")\n\n_Released 10/23/2015_\n\n**Summary:**\n\n*   XHR handling has been rewritten to be much more flexible, extensible, and future-proof.\n\n**Breaking Changes:**\n\n*   The object you receive after waiting on an XHR alias is now different. Previously this was a `FakeXMLHttpRequest` object which came from Sinon.js. Now it is a special `XMLHttpRequest` object which comes from Cypress. You may need to rewrite some of your assertions but we've tried to keep the signatures as close as possible.\n*   The XHR's URL property will now always return you a `Fully Qualified Domain Name` including the origin, port, host, etc. Previously the URL property represented whatever the XHR was opened with. We've worked around this difference by when checking whether an XHR should be stubbed, the origin is tested both as present and omitted.\n\n**Deprecations:**\n\n*   Accessing `requestJSON` or `responseJSON` on XHR objects is deprecated, and will be removed in the next version. Accessing those properties will throw a warning which explains how to rewrite these.\n*   `cy.respond` is _temporarily_ deprecated because the semantics of how this works is completely different and will require more work (mentioned later on) before this can be re-enabled again.\n\n**Features:**\n\n*   All XHR's (regardless of whether they are stubbed or not) are now logged in the Command Log. Stubbed XHR's display as \"XHR Stub\" vs vanilla \"XHR\".\n*   Stubbed XHR's will now show up in the `Network Tab` in Dev Tools. In other words they will _really_ go out and you'll be able to inspect them just like regular XHRs.\n*   Regular XHR's can now be aliased and waited on without actually being stubbed by passing `{stub: false}` to the `cy.route()`.\n*   XHR's will continue to work correctly even _after_ a test ends. In previous versions, due to replacing the entire XHR object, your application would not work correctly after a test ended. This prevented you from \"navigating around\" and working with your app after the tests end.\n*   Servers can now be disabled in the middle of a test. Previously once a server was started all XHR's would be stubbed.\n*   You can now disable the force sending of `404` to all XHR's which are not stubbed. This allows you to mix and match, enabling some requests to be stubbed and others to hit your server and respond normally.\n*   The default XHR configuration can now be overwritten in a single area.\n*   Many new configuration options are available for controlling how XHR's are stubbed.\n*   XHR's now include an `Initiator` stack regardless of whether they're stubbed. The `Initiator` stack includes the stack which caused the XHR to be created and sent.\n*   The `onConsole` information related to an XHR has been updated to make it easier to understand why a route was or was not stubbed, and its associated request and response headers.\n*   Response headers on XHR stubs will now automatically set their `Content-Type` based on the stub response. Previously this would always set to the `Content-Type` to `application/json`. Now if you force a response to be text or html, the `Content-Type` response header will be set appropriately.\n*   You can now force other additional response headers to be sent on stubbed XHRs.\n*   XHR's now snapshot twice - when the request is made and when the response is returned.\n*   Removed sending `sinon` on every [`cy.visit()`](https://docs.cypress.io/api/commands/visit).\n*   The XHR object which is returned to you to via [`cy.wait()`](https://docs.cypress.io/api/commands/wait) is now more consistent with other return values such as [`cy.request()`](https://docs.cypress.io/api/commands/request). It should be much easier to work with `request body`, `request headers`, `response body` and `response headers`.\n\n**Bugfixes:**\n\n*   Routes no longer display as duplicated in between test runs when `cy.server()` is started prior to a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) and you cause a full page refresh, which caused all routes to be re-bound.\n*   Any issues related to `requestJSON` or `responseJSON` being duplicated are now fixed. Fixes [#65](https://github.com/cypress-io/cypress/issues/65).\n*   Fully Qualified XHR's which should be proxied are now correctly transparently rewritten to prevent CORS problems.\n*   `cy.route()` - `onRequest` and `onResponse` callbacks are now called with `cy` as the context.\n*   Filtering assets which should never be stubbed has been improved. Now `.jsx` templates pass-through correctly.\n*   CORS Network Errors are now correctly caught.\n\n**Misc:**\n\n*   All `ng` based commands now display in the Command Log.\n*   The built in XHR response delay has been removed since now all requests really go over the HTTP stack, which inherently has its own delay. You can still optionally force responses to be delayed by a set amount.\n\n**Almost there:**\n\n*   Support for the native `fetch` object.\n*   Configuration to automatically force Cypress to wait for outstanding XHR's (like it does for other Page Events). This would mean when testing more traditional apps without XHR stubbing, commands would automatically wait until all outstanding XHR's complete. The internal retry loop needs to be rewritten to make this possible, but the XHR architecture is now there.\n\n## 0.11.13[​](#0-11-13 \"Direct link to 0.11.13\")\n\n_Released 10/08/2015_\n\n**Bugfixes:**\n\n*   Prevent rejected promise from causing error about invalid API key during a CI run.\n\n**Misc:**\n\n*   Better error handling of rejected promises.\n\n## 0.11.12[​](#0-11-12 \"Direct link to 0.11.12\")\n\n_Released 10/07/2015_\n\n**Features:**\n\n*   Snapshots can now be named and a command can have multiple snapshots.\n*   Multiple snapshots are now cycled automatically on hover, and the name of the snapshot is displayed.\n*   Most of the action commands now take multiple snapshots (giving you a precise look at an action prior to it happening, and then afterwards).\n\n**Bugfixes:**\n\n*   Fixed situation where an `Uncaught Error` was not being properly handled. Cypress would incorrectly continue to retry commands instead of canceling them, which lead to incorrect errors downstream in other tests.\n*   Fixed situation where an error being thrown from an XHR was being improperly handled (in a slightly different way than the problem above).\n*   Stopped sending CI data when [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) was issued.\n\n**Misc:**\n\n*   CSS Improvements\n\n## 0.11.11[​](#0-11-11 \"Direct link to 0.11.11\")\n\n_Released 10/04/2015_\n\n**Bugfixes:**\n\n*   Snapshots of [`.type()`](https://docs.cypress.io/api/commands/type) and [`.select()`](https://docs.cypress.io/api/commands/select) are no longer incorrect due to taking snapshots too early. Fixes [#22](https://github.com/cypress-io/cypress/issues/22).\n*   Passing `{force: true}` to [`.blur()`](https://docs.cypress.io/api/commands/blur) now logs correctly in the Command Log.\n\n**Misc:**\n\n*   Added delays on some tooltips.\n*   The URL will now highlight in a yellow background during a revert DOM snapshot.\n*   Moved snapshot message to be affixed to the bottom of the remote app in preparation for cycling through multiple snapshots.\n*   Cleaned up the URL by removing some unused content.\n\n## 0.11.10[​](#0-11-10 \"Direct link to 0.11.10\")\n\n_Released 10/04/2015_\n\n**Features:**\n\n*   [`.blur()`](https://docs.cypress.io/api/commands/blur) now accepts `{force: true}` which removes error checking such as validating the element is currently in focus.\n\n**Bugfixes:**\n\n*   [`.pause()`](https://docs.cypress.io/api/commands/pause) is now noop during [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) or `cypress ci`.\n\n**Misc:**\n\n*   Removed `cy.inspect` command.\n*   Added Cypress logo to nav.\n*   CSS changes.\n\n## 0.11.9[​](#0-11-9 \"Direct link to 0.11.9\")\n\n_Released 10/03/2015_\n\n**Features:**\n\n*   Added `.zip` as acceptable fixture extension. Content is sent back as `base64`.\n*   Added docs to nav, consolidated `organize` into `tests`.\n*   Added favicon.\n*   Added tooltips everywhere.\n*   Created new debugging command: [`.pause()`](https://docs.cypress.io/api/commands/pause) which will pause executing commands and allow you to resume or step into the next command one at a time.\n*   You can now stop and restart tests from the UI.\n*   Added `cy.Blob` utilities for `blob` / `string` / `base64` conversion. Useful for manually handling uploads.\n\n**Bugfixes:**\n\n*   \"Cannot revert DOM while tests are running\" now removes itself correctly.\n*   Aliased DOM objects are now correctly stored on the test's `ctx` as instances of **your** jQuery (if one exists).\n\n**Misc:**\n\n*   Updated UI styles / tests list / run all.\n*   Fixed alt tray icon so it shows up correctly on click.\n\n## 0.11.8[​](#0-11-8 \"Direct link to 0.11.8\")\n\n_Released 09/25/2015_\n\n**Features:**\n\n*   Added [`cy.request()`](https://docs.cypress.io/api/commands/request) command which can issue XHR requests. The request is generated outside of the browser, and bypasses all CORS restrictions. Great for talking to an API for seeding, querying, building, etc.\n\n**Bugfixes:**\n\n*   Prevented edge case with [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) where it would not be able to be canceled without throwing an unhandled rejection error.\n\n## 0.11.7[​](#0-11-7 \"Direct link to 0.11.7\")\n\n_Released 09/25/2015_\n\n**Bugfixes:**\n\n*   The debug window now works again.\n*   Changed `Linux` build strategy which fixes not saving the internal `.cy cache`. Also fixes not being able to update from the GUI. Fixes [#66](https://github.com/cypress-io/cypress/issues/66).\n\n## 0.11.6[​](#0-11-6 \"Direct link to 0.11.6\")\n\n_Released 09/25/2015_\n\n**Bugfixes:**\n\n*   Viewport is now properly restored to the default width / height on subsequent runs. Previously it would retain the last viewport size used until there was a new viewport command.\n*   [`cy.should('contain', '...')`](https://docs.cypress.io/api/commands/should) now correctly escapes quotes and single quotes.\n*   Assertion messages are no longer truncated, and instead will scale down by reducing the `font-size` and `line-height` after they exceed 110 characters. So you'll now always see the full assertion message.\n*   Fixed some scenarios where assertions would not be logged as a child command.\n*   Assertions based around the `window` or `document` object no longer cause Chai to bomb on formatting their object structures (due to cyclic references) and instead now will show up as `<window>` and `<document>`.\n\n**Misc:**\n\n*   [`cy.window()`](https://docs.cypress.io/api/commands/window) now logs out to the `Command Log` and additionally verifies upcoming assertions.\n*   [`cy.document()`](https://docs.cypress.io/api/commands/document) now logs out to the `Command Log` and additionally verifies upcoming assertions.\n*   Removed `numElements` label on assertions which indicated the number of elements found if > 1. This was annoying and redundant since the inked command already had this number.\n\n## 0.11.5[​](#0-11-5 \"Direct link to 0.11.5\")\n\n_Released 09/20/2015_\n\n**Features:**\n\n*   The `Linux` version of Cypress now works correctly for GUI Desktop versions (tested on Ubuntu Desktop). Previously it would only worked during `cypress run` in server versions. The `tray` used in OSX does not work with the `Linux`, so in `Linux` we just use a standard window + menu.\n*   Added Desktop Icon.\n\n**Bugfixes:**\n\n*   Cypress now forces the initial [`cy.visit()`](https://docs.cypress.io/api/commands/visit) not to be cached by the browser. This was incorrectly being cached which meant when you changed the [`cy.visit()`](https://docs.cypress.io/api/commands/visit) it would not actually go out and fetch the new contents. Previously you had to check `Disable Cache` in the `Network Tab` inside of Chrome to prevent this bug. Unfortunately this has a significant performance drawback. If you use a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) before each test you will notice a degrade in performance because this request is no longer cached. This is a temporary problem until Cypress implements a more sophisticated caching strategy which optimizes these concerns. There is a lot to improve in this arena but it will take more time before it's implemented.\n*   [`.should()`](https://docs.cypress.io/api/commands/should) will no longer throw an error when it is used as a `parent command` and has a callback function signature, and that callback function throws outside of an assertion. Instead now it logs correctly, handles the error, and displays this error for you.\n\n**Misc:**\n\n*   Many additional tests added to the multi-os deployment process.\n*   When Cypress opens other windows they are now auto-focused.\n\n## 0.11.4[​](#0-11-4 \"Direct link to 0.11.4\")\n\n_Released 09/17/2015_\n\n**Features:**\n\n*   [`.should()`](https://docs.cypress.io/api/commands/should) now accepts a callback function which will be retried until it does not throw. The callback function will be retried in the exact same way as passing regular string-based chainers to [`.should()`](https://docs.cypress.io/api/commands/should). Having a callback function gives you an opportunity to _massage_ the expected subject such as comparing multiple elements, creating an array of text or classes, etc.\n\n**Deprecations:**\n\n*   `cy.wait(function)` has been deprecated and you can safely rename this command to [`.should()`](https://docs.cypress.io/api/commands/should).\n\n**Misc:**\n\n*   All of the docs surrounding [assertions](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions), [`.should()`](https://docs.cypress.io/api/commands/should), and [`.and()`](https://docs.cypress.io/api/commands/and) have been updated to reflect the new API.\n\n## 0.11.3[​](#0-11-3 \"Direct link to 0.11.3\")\n\n_Released 09/16/2015_\n\n**Features:**\n\n*   When XHR's are aborted Cypress will display the stack trace indicating where in your app the XHR was aborted. Additionally it will display as `(aborted)` in the Command Log.\n\n**Bugfixes:**\n\n*   XHR's will no longer be ended early and display no status as if there was no response. Fixes [#63](https://github.com/cypress-io/cypress/issues/63).\n*   XHR's which are aborted no longer cause an `INVALID_STATE_ERR` to be thrown. Fixes [#62](https://github.com/cypress-io/cypress/issues/62) and [#34](https://github.com/cypress-io/cypress/issues/34).\n*   Cypress will no longer incorrectly revert to a previous test run's snapshot when tests are re-run.\n\n## 0.11.2[​](#0-11-2 \"Direct link to 0.11.2\")\n\n_Released 09/14/2015_\n\n**Bugfixes:**\n\n*   Prevented bug where the assertion message: `expected <x> element to exist` would log over and over again when Cypress retried querying for a DOM element.\n\n**Misc:**\n\n*   [`.root()`](https://docs.cypress.io/api/commands/root) now outputs its subject when clicking on its command log. Fixes [#55](https://github.com/cypress-io/cypress/issues/55).\n\n## 0.11.1[​](#0-11-1 \"Direct link to 0.11.1\")\n\n_Released 09/14/2015_\n\n**Bugfixes:**\n\n*   Utilizing `cy.server()` across multiple tests before a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now works correctly. As a side effect now Cypress will rebind both the `server` and all `routes` **whenever** the remote window is reloaded (for whatever reason) - even during a test itself. This means you can navigate between pages without ever having to restart the server or routes (they will automatically rebind) when the window loads. Fixes [#59](https://github.com/cypress-io/cypress/issues/59).\n\n**Misc:**\n\n*   Providing a \"number-string\" as in: `should(\"have.length\", \"1\")` will no longer throw an error.\n*   Internal API changes for `$Commands`.\n\n## 0.11.0[​](#0-11-0 \"Direct link to 0.11.0\")\n\n_Released 09/13/2015_\n\n**Summary:**\n\n*   This release marks a major change in the underlying algorithms used to prevent testing flake. It is a major goal of Cypress to combat and prevent **all** test flake. These algorithm changes go a long way towards making this a reality, and have been months in the making.\n*   Cypress can now predict upcoming assertions and modifies its behavior until the intended state has been reached.\n*   Command options `exist` / `visible` / `length` have been deprecated, these were confusing and limiting, and the same result can now be achieved using normal assertions. The end result is much more robust and much easier to understand.\n\n**Features:**\n\n*   Commands which precede assertions will now look downstream at those assertions and not resolve until their subject's state passes all assertions. Previously this was **sort of** implemented using _Command Options_ and the `eventually` flag, but now this is the default behavior. _Command Options_ only worked on DOM-based subjects, and now the new assertion verification works on everything else (including RL-based commands, etc). What this means is that Cypress can predict what you are requesting and automatically modifies its behavior until this state is reached. This prevents test brittleness / random test flake. Additionally this removes ever having to use [`cy.wait(Number)`](https://docs.cypress.io/api/commands/wait) or `cy.wait(Function)` (though this is still a valid command). As a side effect, you will now see commands + their assertions in the spinning pending blue state. When assertions fail their associated command also fails at the same time. This visually represents the coupling between these two concepts. Another side effect is that `timeout` options do not need to be provided on the succeeding assertions, and can instead just be provided on the proceeding command. All of the coupled assertions will automatically be retried to the maximum `timeout` setting. Fixes [#43](https://github.com/cypress-io/cypress/issues/43).\n*   Action commands will now insert an artificial delay after resolving to enable modern JavaScript frameworks time to _flush_ their run loops. snapshots are delayed until after the action, resulting in more accurate snapshots because JavaScript frameworks would not process these DOM events until `N` milliseconds after they occurred. This has the unfortunate side effect of _decreasing_ performance by about _5-10%_ but the end result is that it is much easier to debug and Cypress is less prone to flake caused by modern JavaScript frameworks. This change comes after collecting many data points and this was one of the easiest changes that help reduce flake. For users that don't use the latest and greatest JavaScript frameworks, this action delay can be reduced through `cypress.json` which may speed up large test suites.\n*   Aliasing custom commands now intelligently figures out where to apply the alias without being specified inside of the actual custom command.\n*   The algorithm for replaying aliased commands is now much more accurate, handles stale element references better, and will not replay commands which have a side effect (like action commands). The end result is Cypress will now almost always find the desired element by determining the minimum number of re-queries and is not susceptible to stale element references. Additionally using assertions on aliased elements now works (where previously using a _Command Option_ on an alias would just be ignored. This was very difficult to implement but should be 100% solid. Fixes [#36](https://github.com/cypress-io/cypress/issues/36).\n*   Assertions which actually produced 2 assertions (under the hood) such as `should('have.attr', 'href', '/users/1')` will now only log the 2nd assertion, unless the first fails.\n*   Previously using `eventually.have.length` was impossible (and this would throw an error), but now this works as you'd expect with the default `should('have.length')`.\n\n**Bugfixes:**\n\n*   Aliased commands now correctly output a command log again when they are replayed.\n*   Assertions that involved an `{exp}` property are no longer incorrectly substituted with the `#{this}` subject.\n*   Removed special logic for _Angular_ which tapped into its digest cycle for queueing commands. This had unpredictable results when there was n `interval` set, and is now superseded by the new queueing system anyway (which is more performant).\n*   `Sinon's` formatting of failed `spy` or `stub` calls is horrendously non-performant and would sometimes choke the CPU for several seconds. This formatting has been completely removed and will be replaced by something less outrageous later on. At the moment you can still use the built in Cypress debugging (clicking on a command log, etc) to see what the actual values were. Fixes [#18](https://github.com/cypress-io/cypress/issues/18).\n\n**Misc:**\n\n*   The internal retry loop of Cypress now runs at `60fps`, instead of `20fps`.\n*   Cypress overrides chai's default inspection function for DOM elements meaning instead of seeing `{ Object (0, length, ...) }` you will now see the nicely formatted Cypress DOM element like: `<button#primary.btn-large>`.\n*   Cypress now overrides chai's `match` chainer and provides a specific error message when a non `regex` value is provided. Fixes [#58](https://github.com/cypress-io/cypress/issues/58).\n*   Cypress now handles `length` and `exist` assertion chainers in a very specific way, providing a detailed message on failure, and utomatically slices out any stale element references.\n*   The `contain` assertion chainer from `chai-jquery` has been extended to match the same selector logic as [`cy.contains()`](https://docs.cypress.io/api/commands/contains) - meaning it now checks the `value` of `input[type=submit]`.\n*   Tweaked the label for displaying the number of elements a command resolved with (now displays 0 differently than > 1).\n*   Removed the `eventually` flag in assertions as now this is the default behavior on normal assertions.\n*   Deprecated all _Command Options_. You will see a very nice and simple error message explaining how to convert these to assertions.\n*   [`.within()`](https://docs.cypress.io/api/commands/within) can now be silenced with `{log: false}`.\n*   Many error messages have been rewritten to be much more fluent and easier to understand.\n\n**Other News:**\n\n*   Cypress is currently seeking to raise a Series A. This will enable us to grow the team and speed up development but seeking it has come at a cost for current development speed. If you have any VC connections [please send them our way](https://docs.cypress.io/cdn-cgi/l/email-protection#a6d5d3d6d6c9d4d2e6c5dfd6d4c3d5d588cfc9).\n\n## 0.10.8[​](#0-10-8 \"Direct link to 0.10.8\")\n\n_Released 08/21/2015_\n\n**Features:**\n\n*   Reporters in CI can now be specified.\n*   Added `teamcity` reporter.\n\n## 0.10.7[​](#0-10-7 \"Direct link to 0.10.7\")\n\n_Released 08/16/2015_\n\n**Features:**\n\n*   `port` can now be specified as a CLI argument and will override any values stored in `cypress.json`.\n\n**Misc:**\n\n*   When running through the CLI, Cypress will now display an error if the server's port is currently in use. Previously this would not output an error and the process would just hang.\n\n## 0.10.6[​](#0-10-6 \"Direct link to 0.10.6\")\n\n_Released 08/15/2015_\n\n**Bugfixes:**\n\n*   Fixed edge case where Cypress would not correctly handle `POST` or `PUT` requests with a JSON body. These requests would just hang and eventually time out.\n\n**Misc:**\n\n*   Project ID's can be programmatically set now.\n\n## 0.10.5[​](#0-10-5 \"Direct link to 0.10.5\")\n\n_Released 08/13/2015_\n\n**Bugfixes:**\n\n*   Running a specific test won't open/close immediately when starting up (fixes weird flickering effect).\n*   [`.check()`](https://docs.cypress.io/api/commands/check) and [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck) commands will now correctly \"end\" even if they were `noop` due to the element already being in a checked or unchecked state.\n\n**Misc:**\n\n*   Currently running tests now displays a spinner to indicate they are currently running.\n*   Optimized performance of command lists.\n*   Commands which were silenced with `{log: false}` will now always display in the Command Log if they were part of a replayed chain of commands due to an alias reference becoming stale. Previously they would not display which was very confusing.\n*   Sinon.JS is no longer minified.\n\n## 0.10.4[​](#0-10-4 \"Direct link to 0.10.4\")\n\n_Released 08/11/2015_\n\n**Bugfixes:**\n\n*   The OSX Cypress App was not being properly signed (since 0.10.0) due to an oversight in our deployment process. This has been fixed now and additional checks have been added to ensure the deployed version is properly signed. Updating within the app was unaffected. This bug only effected fresh downloads from the internet.\n*   Errors / crashes encountered when updating to newer versions through the app should be fixed now.\n\n## 0.10.3[​](#0-10-3 \"Direct link to 0.10.3\")\n\n_Released 08/10/2015_\n\n**Bugfixes:**\n\n*   Cypress Errors in `hooks` (`beforeEach`, etc) will no longer cause Mocha to fire its `end` event thus ending the entire run. In CI, this would cause the test suite to end early. Uncaught Mocha errors will however continue this behavior. Cypress does not yet have a \"skipped\" visual state for tests which were skipped, so at the moment it may look a little strange and unpredictable.\n\n**Misc:**\n\n*   Tweaked clicking algorithm to re-verify an elements visibility anytime the click retries its `retry` logic. Previously this check only happened once at the beginning of the click.\n*   In CI, the window size (not the viewport) has been changed from `1024x768` to `1280x720`. This will only affect `screenshot` artifacts which are taken automatically with [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) (coming soon) or whenever a test fails (also coming soon).\n\n## 0.10.2[​](#0-10-2 \"Direct link to 0.10.2\")\n\n_Released 08/10/2015_\n\n**Bugfixes:**\n\n*   Memory optimizations in CI.\n*   Reduce noise in logs.\n*   Prevented external `NODE_ENV` mutations causing problems in CI.\n\n**Misc:**\n\n*   Better error tracing.\n\n## 0.10.1[​](#0-10-1 \"Direct link to 0.10.1\")\n\n_Released 08/07/2015_\n\n**Bugfixes:**\n\n*   Fixed missing dependency for CI.\n\n**Misc:**\n\n*   Cypress now logs out your project's API key on a failed CI run.\n\n## 0.10.0[​](#0-10-0 \"Direct link to 0.10.0\")\n\n_Released 08/06/2015_\n\n**Summary:**\n\n*   Cypress is now able to run all the tests, run in the terminal, and includes support for Linux and CI. Additionally, most of the functionality of he GUI Desktop App can now be accessed through command line arguments.\n*   Because each operating system requires a specific build of Cypress - a new CLI tool has been created which abstracts away these differences and orchestrates the Desktop App regardless of which OS you are running.\n*   This [CLI tool is now published on npm](https://www.npmjs.com/package/cypress), though the documentation still needs to be written.\n*   There is now a download service to access the latest version of Cypress and previous versions.\n*   Cypress aims not only to make it easier to write tests, but after you build a test harness, it will make it easier to dive into failed tests (hat run in CI). This release paves the way for providing after-run results and allowing you to dive into those failures.\n\n**Breaking Changes:**\n\n*   Due to security upgrades, adding projects in previous versions will no longer work. Upgrade and everything should be okay.\n\n**Features:**\n\n*   The latest version of Cypress can be downloaded here: [http://download.cypress.io/latest](http://download.cypress.io/latest).\n*   Cypress can alternatively be downloaded / installed / managed through the CLI utility.\n*   Cypress can now be run through the terminal.\n*   You can now run all of your tests inside of the GUI App.\n*   You can use the CLI tool to run Cypress in CI. The documentation for this needs to be written, but it will be very simple to do. You will probably only have to write 2 lines in your CI scripts to run Cypress.\n*   You can configure CI to use any reporter built into Mocha, and additionally we are adding JUnit XML output (for Jenkins) as a built in default.\n*   You can write your own custom reporter which Cypress can use in CI.\n*   Console output from your apps is suppressed while running in the terminal.\n\n**Bugfixes:**\n\n*   Several security problems with projects have been closed in preparation for running in CI.\n*   Extensive memory profiling has been done and Cypress has implemented several strategies for aggressively causing garbage collection. The debugging tools (which allow you to walk back in time through DOM snapshots, or access objects from previous tests) could exhaust all available memory in previous versions. This likely never affected most users, but if a user ran 1000's of tests (which have been written in Cypress) it would bomb. Now Cypress only stores data for up to 50 tests, and will begin purging data past that. When run in the terminal, Cypress doesn't apply any of its debugging tools, so CI will be unaffected.\n*   Several instances of memory leaks were plugged up.\n\n**Misc:**\n\n*   Everything except for the `cypress driver` is now minified.\n*   Some users have reported problems upgrading previous versions. This is because we changed the name from \"cypress\" to \"Cypress\" including some binaries. If your upgrade does not finish you can redownload the latest version of Cypress or use the CLI tool to reinstall it.\n*   Our build and testing processes have been upgraded to accommodate Linux builds.\n*   Sinon.JS object formatting during errors has been suppressed (when using spies/stubs) due to its horrendous performance when comparing deeply nested objects. This means you won't see the (mostly) useless error output from Sinon, but given Cypress debugging tools you can still inspect objects and figure out what went wrong.\n\n## 0.9.6[​](#0-9-6 \"Direct link to 0.9.6\")\n\n_Released 07/27/2015_\n\n**Bugfixes:**\n\n*   Fixed server crash on improperly handled proxy error.\n*   Upgraded logic to redirect back to the Cypress client app on manual URL changes.\n\n## 0.9.5[​](#0-9-5 \"Direct link to 0.9.5\")\n\n_Released 07/14/2015_\n\n**Features:**\n\n*   [`.click()`](https://docs.cypress.io/api/commands/click), [`.type()`](https://docs.cypress.io/api/commands/type), [`.clear()`](https://docs.cypress.io/api/commands/clear), [`.select()`](https://docs.cypress.io/api/commands/select), [`.check()`](https://docs.cypress.io/api/commands/check), [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck) now will wait for the subject to automatically become visible instead of throwing immediately if the element is not in a visible state.\n\n**Misc:**\n\n*   Swapped out ugly nonsense `refresh` icon to `square-o` to represent a test which has not run yet.\n\n## 0.9.4[​](#0-9-4 \"Direct link to 0.9.4\")\n\n_Released 07/06/2015_\n\n**Features:**\n\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains), [`cy.get()`](https://docs.cypress.io/api/commands/get), and `traversal commands` will now all log out heir last known `$el` on failure. This means the `$el` will be highlight during Command Log hovering, and will display in the console on click. his should make debugging failed DOM based commands much easier. Fixes [#52](https://github.com/cypress-io/cypress/issues/52).\n\n**Bugfixes:**\n\n*   Fixed edge case with [`cy.contains()`](https://docs.cypress.io/api/commands/contains) and command options `visible` and `exist` where it would always fail even though the matched element was in the correct state.\n\n**Misc:**\n\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) now throws when provided the command option: `length` because it will only ever return 1 element.\n\n## 0.9.3[​](#0-9-3 \"Direct link to 0.9.3\")\n\n_Released 07/06/2015_\n\n**Features:**\n\n*   Proxied jQuery: `$` onto `cy` as `cy.$` and specific class methods: `Event`, `Deferred`, `ajax`, `get`, `getJSON`, `getScript`, `post`.\n*   Proxied `moment` onto `cy` as `cy.moment`.\n*   The URL will now automatically be restored when hovering over the Command Log to indicate the state of the URL at the time the command ran.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) now accepts an optional: `position` argument (`center`, `topLeft`, `topRight`, `bottomLeft`, `bottomRight`). Center is still the default.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) now accepts an optional `x` and `y` coordinate argument, which is relative to the top left corner of the element. Fixes [#50](https://github.com/cypress-io/cypress/issues/50).\n*   [Click docs have been updated](https://docs.cypress.io/api/commands/click) to reflect these changes.\n\n**Bugfixes:**\n\n*   `onBeforeLoad` and `onLoad` callbacks to [`cy.visit()`](https://docs.cypress.io/api/commands/visit) are now invoked with `cy` as the context.\n*   Cypress logo now displays in `About Page`.\n\n**Misc:**\n\n*   Internal refactoring to `Cypress.Mouse`.\n\n## 0.9.2[​](#0-9-2 \"Direct link to 0.9.2\")\n\n_Released 07/04/2015_\n\n**Features:**\n\n*   Added `About` page in desktop application annotating the current version.\n*   [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) now supports these additional extensions: `.html`, `.txt`, `.png`, `.jpg`, `.jpeg`, `.gif`, `.tif`, `.tiff`.\n*   Image fixtures will be sent back as a `base64` string.\n*   HTML fixtures will be prettified and saved back over the original.\n\n**Misc:**\n\n*   Added more tests around various areas of the desktop application and ID generator.\n\n## 0.9.1[​](#0-9-1 \"Direct link to 0.9.1\")\n\n_Released 07/03/2015_\n\n**Features:**\n\n*   [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) can now accept an `orientation` when providing a `preset`. Valid orientations are `landscape` and `portrait`.\n\n**Bugfixes:**\n\n*   The scaffolded `spec_helper.js` now correctly returns its object literal in the `onConsole` callback.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now correctly logs its message to the Command Log when provided options.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) has been upgraded to handle situations where as it's typing, 3rd party code mutates the value either synchronously or asynchronously. The caret is automatically moved to the end position matching browser behavior.\n\n**Misc:**\n\n*   Deprecated `Cypress.command`, instead use `Cypress.Log.command` to output a Command Log. Updated scaffolding on new projects to reflect this change.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) now outputs much more explicit error messages when given command options. Fixes [#49](https://github.com/cypress-io/cypress/issues/49).\n*   `cy.route()` no longer validates `response` value when `{respond: false}` is passed in as options. Fixes [#48](https://github.com/cypress-io/cypress/issues/48).\n*   [`.invoke()`](https://docs.cypress.io/api/commands/invoke) and [`.its()`](https://docs.cypress.io/api/commands/its) will now log out the $el if it's a DOM object, which will now correctly highlight the $el during a command revert. Additionally if these commands have been called on a DOM object, their `onConsole` message will include the DOM objects.\n\n## 0.9.0[​](#0-9-0 \"Direct link to 0.9.0\")\n\n_Released 07/02/2015_\n\n**Summary:**\n\n*   [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) is a new command which will resize the viewport to a specified width and height. There is ow a default `viewport` size of `1000x660`.\n\n**Features:**\n\n*   Your application's viewport dimensions will now automatically scale to fit regardless of your screen's size. This enables you to test resolutions larger than what your screen is capable of displaying. Additionally this fixes edge cases caused when there was a difference in viewports between users.\n*   The viewport's dimensions will now dynamically display accurately as they are changed in the header area.\n*   The viewport's scale will now dynamically display accurately as it is changed.\n*   Each command will automatically restore the viewport to the dimensions at the time the command was issued. In other words, scrolling over each command will restore exactly what Cypress \"saw\" when it issued the command.\n*   Several common viewport presets have been added for convenience\n\n**Misc:**\n\n*   Cypress now requires a viewport to be issued at all times. By default it is `1000x660` but can be changed in your `cypress.json` file with he keys: `viewportWidth` and `viewportHeight`.\n\n**Bugfixes:**\n\n*   Scrollbar styling is no longer hijacked by Cypress.\n\n**Misc:**\n\n*   Updated remote application iframe styles.\n\n## 0.8.1[​](#0-8-1 \"Direct link to 0.8.1\")\n\n_Released 06/30/2015_\n\n**Bugfixes:**\n\n*   [`.select()`](https://docs.cypress.io/api/commands/select) will now fire a `focus` event on the `<select>` even if the window isn't in focus.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) has been upgraded to be more intelligent about firing `focus` events, and now takes into account the previously focused element.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) and [`.clear()`](https://docs.cypress.io/api/commands/clear) will not issue `change` events or `focus` events unnecessary when chaining together multiple actions which do not change the element or cause it to lose focus. Fixes [#47](https://github.com/cypress-io/cypress/issues/47).\n\n## 0.8.0[​](#0-8-0 \"Direct link to 0.8.0\")\n\n_Released 06/26/2015_\n\n**Summary:**\n\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now implements all DOM events to simulate every aspect of typing on a real keyboard.\n*   All of the [type docs have been updated](https://docs.cypress.io/api/commands/type) to reflect these changes.\n\n**Features:**\n\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now outputs \"Key Events Table\" which is a `console.table` of every key typed, the `charCode`, all vents that fired, and whether any were `preventedDefault`.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now accepts the following special character sequences: `{selectall}`, `{del}`, `{backspace}`, `{esc}`, `{{}`, `{enter}`, `{leftarrow}`, `{rightarrow}`.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) implements `cursor` and `selection` and `range` accurately like a real keyboard.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now fires change events exactly like real browsers when `{enter}` is used.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) will fire `textInput` and `input` events exactly like a real browser. Fixes [#7](https://github.com/cypress-io/cypress/issues/7).\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now follows all of the spec in regards to `preventingDefault` on any event that would insert a character such as `keydown`, `keypress`, `textInput`.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) events should be `100%` identical to real browser `KeyboardEvents` including `charCode`, `which`, `keyCode`, `data`, etc.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now inserts a small delay `10ms` between each keystroke to simulate a real user typing.\n*   `input` events are now correctly fired when [`.select()`](https://docs.cypress.io/api/commands/select) chooses an `<option>`.\n*   `change` events are now fired exactly how a browser does (when an input loses focus and its value has changed since its last focus event). You'll see these fire after you use [`.blur()`](https://docs.cypress.io/api/commands/blur) directly, or use another `action command` on another element.\n\n**Bugfixes:**\n\n*   Using [`.type()`](https://docs.cypress.io/api/commands/type) in an `input[type=number]` will no longer prepend the value. Fixes [#26](https://github.com/cypress-io/cypress/issues/26).\n*   `[contenteditable]` elements can now be focused and blurred.\n*   `aborting` during [`.click()`](https://docs.cypress.io/api/commands/click) / [`.dblclick()`](https://docs.cypress.io/api/commands/dblclick) now correctly cancels remaining queued click/dblclick events.\n\n**Misc:**\n\n*   `console.groups` are now collapsed by default.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now validates the chars and will throw on anything other than a string or finite number.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now throws on empty strings.\n*   Removed several libs that used to handle typing simulation and rewrote typing from scratch.\n\n## 0.7.6[​](#0-7-6 \"Direct link to 0.7.6\")\n\n_Released 06/23/2015_\n\n**Bugfixes:**\n\n*   Prevent infinite loop due to a trifecta of rare circumstances with [`.click()`](https://docs.cypress.io/api/commands/click). Clicking will now retry sync after it attempts to scroll past the element covering up the desired clickable element. Fixes [#46](https://github.com/cypress-io/cypress/issues/46).\n\n## 0.7.5[​](#0-7-5 \"Direct link to 0.7.5\")\n\n_Released 06/19/2015_\n\n**Bugfixes:**\n\n*   [`.click()`](https://docs.cypress.io/api/commands/click) now takes into account being covered by a fixed positioned element and will increase the window's scroll offset to account for this. There are still more improvements to be made before this is bulletproof though.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) could potentially resolve to a null subject if the matching content was split across multiple nested children elements. This has been fixed and contains will now return the first, deepest element which contains text potentially spread over multiple text nodes and/or children elements.\n\n## 0.7.4[​](#0-7-4 \"Direct link to 0.7.4\")\n\n_Released 06/18/2015_\n\n**Misc:**\n\n*   Attempting to [`.click()`](https://docs.cypress.io/api/commands/click) a select element will now throw an error. The error guides you to using the [`.select()`](https://docs.cypress.io/api/commands/select) command, as that is the command you should use to change a `<select>` value.\n*   `cy.route()` responses are now validated. If responses are `null` or `undefined` Cypress will throw a very specific error message.\n*   Cypress will now display `cypress.json` parse errors when attempting to boot a project when there is a syntax error in `cypress.json`.\n\n## 0.7.3[​](#0-7-3 \"Direct link to 0.7.3\")\n\n_Released 06/17/2015_\n\n**Features:**\n\n*   [`.select()`](https://docs.cypress.io/api/commands/select) will now output a command log.\n*   [`.select()`](https://docs.cypress.io/api/commands/select) will now have `click` / `focus` events fired on itself and the selected options (as per the pec).\n*   [`.select()`](https://docs.cypress.io/api/commands/select) is now inline with the other `Action` commands and will retry until the element naturally becomes selectable.\n\n**Bugfixes:**\n\n*   `Action` command options are now properly formatted, instead of saying `Object{4}` they will display the overridden default options - ie: `force`, `timeout`, `interval`.\n*   Sending `{force: true}` to `Action` commands will no longer error out if the element is not visible. Forcing the action to take place now correctly removes all error checking prior to issuing the action and events.\n\n**Misc:**\n\n*   Removed stack traces on `AssertionErrors` in the console since those come from `chai` and are basically useless.\n\n## 0.7.2[​](#0-7-2 \"Direct link to 0.7.2\")\n\n_Released 06/17/2015_\n\n**Bugfixes:**\n\n*   Removed factoring in the total time a test has been running when determining when its command timeout. This fixes a bug where commands down he chain would timeout earlier than their specified `{timeout: num}` option.\n\n## 0.7.1[​](#0-7-1 \"Direct link to 0.7.1\")\n\n_Released 06/16/2015_\n\n**Bugfixes:**\n\n*   DOM commands which can retry now correctly support `{timeout: num}` options which will raise the timeout beyond the standard `commandTimeout` rom `cypress.json`.\n*   `<script>`, `<img>`, `<video>` commands or any other element which supports `crossorigin` attribute now are proxied correctly. The `crossorigin` attribute removes sending cookies with the HTTP request and now there is a fallback to figure out the `remoteHost` even in this situation.\n\n**Misc:**\n\n*   Support for redirects with status code `303`.\n\n## 0.7.0[​](#0-7-0 \"Direct link to 0.7.0\")\n\n_Released 06/15/2015_\n\n**Features:**\n\n*   Cypress now has first class support for `fixtures` (official docs coming soon).\n*   Introduced new [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) command.\n*   Fixtures support `json`, `js`, and `coffee` files with image support coming soon.\n*   Fixtures are automatically validated, with error messages propagating up to the client.\n*   Fixtures are automatically formatted / indented for easy debugging.\n*   Example fixture is automatically created with every project.\n*   Example support files are now automatically created with every project.\n*   `cy.route()` now accepts an **alias** as its response.\n*   `cy.route()` additionally accepts a special `fixture:` or `fx:` keyword which automatically loads the fixture as the response.\n\n**Bugfixes:**\n\n*   Clicking giant yellow CypressError now displays associated XHR error in the console.\n\n**Misc:**\n\n*   RegExp arguments are now properly formatted in the Command Log.\n*   Update `bluebird` to `2.9.27`.\n*   Update `glob` to `5.0.10`.\n\n## 0.6.14[​](#0-6-14 \"Direct link to 0.6.14\")\n\n_Released 06/11/2015_\n\n**Features:**\n\n*   Command logging has been upgraded to support \"page events\", which are different than commands. Now events which happen (XHR/page load/url change/spies/stubs/mocks) log out visually differently and do not use a command number. This should be easier to parse what was a real command and what was a page event.\n*   When the url changes this is now logged as a page event, and its `onConsole` logs what caused it to change.\n\n**Misc:**\n\n*   Internal refactor / improvements to support long lived runnable objects to work with page events.\n*   Request Commands (now page events) have now been renamed to 'XHR'.\n*   [`cy.document()`](https://docs.cypress.io/api/commands/document) now returns the raw document object instead of a jQuery wrapped document object.\n*   When [`.its()`](https://docs.cypress.io/api/commands/its) or [`.invoke()`](https://docs.cypress.io/api/commands/invoke) fails it will include the current subject n the `onConsole` log.\n*   [`cy.wait()`](https://docs.cypress.io/api/commands/wait) now logs out when its referenced aliases, and its `onConsole` output displays the XHR return values.\n*   [`cy.hash()`](https://docs.cypress.io/api/commands/hash) and [`cy.url()`](https://docs.cypress.io/api/commands/url) no longer pass the return value as the command log's `message`, which made no sense and was unlike every other command.\n\n## 0.6.13[​](#0-6-13 \"Direct link to 0.6.13\")\n\n_Released 06/09/2015_\n\n**Bugfixes:**\n\n*   Traversal methods now correctly return their `$el` even when `{log: false}` option is passed.\n\n**Misc:**\n\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now works with `contenteditable` attributes.\n\n## 0.6.12[​](#0-6-12 \"Direct link to 0.6.12\")\n\n_Released 06/09/2015_\n\n**Bugfixes:**\n\n*   When Cypress detects a `page loading` event it will now clear out the subject so the next commands cannot reference previous page DOM elements.\n*   [`.check()`](https://docs.cypress.io/api/commands/check) and [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck) will no longer output additional error'd commands when their associated `click` fails.\n\n**Misc:**\n\n*   [`.type()`](https://docs.cypress.io/api/commands/type), [`.clear()`](https://docs.cypress.io/api/commands/clear), [`.check()`](https://docs.cypress.io/api/commands/check), [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck) now all take `{force: true}` options to force the click to happen and skip additional clickable checks.\n*   Now when you click the giant yellow failure messages if the error is a `CypressError` instead of logging nothing it will now find the command associated to that error and display the same message as if you clicked the failed command.\n\n## 0.6.11[​](#0-6-11 \"Direct link to 0.6.11\")\n\n_Released 06/08/2015_\n\n**Bugfixes:**\n\n*   [`.clear()`](https://docs.cypress.io/api/commands/clear) and [`.type()`](https://docs.cypress.io/api/commands/type) no longer output additional error'd commands hen their associated `click` fails.\n*   Changed scrolling elements into view to use top strategy instead of bottom which fixes times where the middle of an element was not yet in he viewport. Fixes [#42](https://github.com/cypress-io/cypress/issues/42).\n\n**Misc:**\n\n*   [`.submit()`](https://docs.cypress.io/api/commands/submit) now errors if it's been called on >1 form element. Fixes [#41](https://github.com/cypress-io/cypress/issues/41).\n*   Coordinates and hitboxes are now logged and displayed on [`.clear()`](https://docs.cypress.io/api/commands/clear) and [`.type()`](https://docs.cypress.io/api/commands/type).\n\n## 0.6.10[​](#0-6-10 \"Direct link to 0.6.10\")\n\n_Released 06/06/2015_\n\n**Bugfixes:**\n\n*   Improved clicking algorithm to reduce edge cases where element could not be clicked but should have been able to be clicked.\n\n**Misc:**\n\n*   [`.click()`](https://docs.cypress.io/api/commands/click) accepts `{force: true}` which will force it to issue the click event and bypass checking to ensure element is physically clickable.\n*   Elements which are children of a container with `overflow` are automatically scrolled prior to a click (which is an abstraction around real user behavior).\n*   Elements that are covering up an element you targeted for [`.click()`](https://docs.cypress.io/api/commands/click) are now logged out in the command console.\n*   All elements are now logged out as real DOM elements instead of jQuery wrapped elements. This has several upsides. Chrome will allow you to immediately interact with these elements, drilling into their contents, displaying the element box model on hover, etc. This prevents you from having to expand the jQuery elements and click \"Reveal in Elements Panel\".\n\n## 0.6.9[​](#0-6-9 \"Direct link to 0.6.9\")\n\n_Released 06/06/2015_\n\n**Bugfixes:**\n\n*   Custom commands no longer error out if they are the very first `cy` command.\n\n## 0.6.8[​](#0-6-8 \"Direct link to 0.6.8\")\n\n_Released 06/05/2015_\n\n**Features:**\n\n*   [`cy.clearCookie()`](https://docs.cypress.io/api/commands/clearcookie) and [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies) have been added as new commands.\n*   Cypress will automatically clear all cookies **before** each test run.\n*   Named the spec + app iframe so that inside of Chrome Dev Tools the iframe selector will clearly distinguish which iframe is your application versus Cypress.\n\n**Bugfixes:**\n\n*   Hitbox is no longer covered up by element layers on DOM revert.\n*   Finally tracked down and fixed edge case causing empty view to display when tests were not empty. Fixes [#13](https://github.com/cypress-io/cypress/issues/13)\n\n**Misc:**\n\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now accepts `{log: false}` to prevent logging out (useful in custom commands).\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) is now scoped by default to the `<body>` instead of `document` which prevents it from returning elements in the `head` like `title`.\n\n## 0.6.7[​](#0-6-7 \"Direct link to 0.6.7\")\n\n_Released 06/04/2015_\n\n**Features:**\n\n*   When reverting the DOM, associated command elements are now automatically scrolled into view.\n*   Hitboxes are now displayed on the screen based on the actual coordinates where an `action command` event took place.\n*   Click events now display event information about the `mousedown` / `mouseup` / `click` default action + propagation in the command console.\n*   Preventing default action on `mousedown` will no longer give focus as per the spec.\n*   Click events are now issued in the exact center of an element (taking into account 2d transforms) and provide the coordinates in the command console and in the actual event\n*   Click events now take into account whether the associated element is being covered up by another element, and will retry or fail with an exact error message if the click was unable to be issued due to this reason.\n*   Click events will now intelligently provide `focus` to the first focusable element on the stack at the click coordinates, or will give `focus` to the window.\n*   Click events will issue the click to the topmost element based on the click coordinates and not necessarily to the element you requested to e clicked (which simulates exactly how a real click works). If this happens it is noted in the command console and provides the `Actual Element Clicked`.\n\n**Bugfixes:**\n\n*   When hover over commands element layers (2d transforms like rotation) are now taken into account and displayed correctly.\n*   There was a bug when checking / unchecking `:checkbox` where it did not properly receive focus.\n\n**Misc:**\n\n*   Click events are now replicated _almost_ identically to the W3C click spec. They should behave for all intents and purposes, identically to real clicks in the browser.\n\n## 0.6.6[​](#0-6-6 \"Direct link to 0.6.6\")\n\n_Released 05/31/2015_\n\n**Bugfixes:**\n\n*   Fixed regression related to [`cy.visit()`](https://docs.cypress.io/api/commands/visit) not re-visiting when current match matches remote url.\n\n## 0.6.5[​](#0-6-5 \"Direct link to 0.6.5\")\n\n_Released 05/23/2015_\n\n**Features:**\n\n*   When Cypress detects a regular HTTP page loading event (where we're leaving the current page and requesting a new one) it will now insert a `loading` command which indicates to the user Cypress has stopped running commands until the new page loads.\n*   If for some reason this new page errors Cypress will display the initial 500 error messages just like [`cy.visit()`](https://docs.cypress.io/api/commands/visit).\n*   Cypress now waits `20s` (which matches [`cy.visit()`](https://docs.cypress.io/api/commands/visit)) for the new page to load instead of `4s` previously.\n\n**Bugfixes:**\n\n*   [`.submit()`](https://docs.cypress.io/api/commands/submit) will actually submit the form for real now, instead of just firing the submit event. Now it's been upgraded to be able to be canceled or have its returnValue set to false and will not submit the form. Don't ask how I missed this one. I as once a young naive programmer who trusted the DOM not to be the abomination it actually is.\n\n**Misc:**\n\n*   No longer send back a 500 message when initial response status code is 4xx.\n\n## 0.6.4[​](#0-6-4 \"Direct link to 0.6.4\")\n\n_Released 05/21/2015_\n\n**Bugfixes:**\n\n*   Host header HTTPS protocol handling fixed.\n*   Incorrectly handling query params on redirects fixed.\n*   Other header edge cases fixed.\n\n## 0.6.3[​](#0-6-3 \"Direct link to 0.6.3\")\n\n_Released 05/20/2015_\n\n**Misc:**\n\n*   Cypress should work with self signed SSL certificates now.\n\n## 0.6.2[​](#0-6-2 \"Direct link to 0.6.2\")\n\n_Released 05/20/2015_\n\n**Bugfixes:**\n\n*   Using the `length` option in `querying` or `traversal` commands now logs out in the Command Log. Fixes [#40](https://github.com/cypress-io/cypress/issues/40).\n*   Other scenarios are fixed where command options would show incorrect number of object keys due to a bug in underscore's `reduce` with an object that has a `length` key. Fixes [#35](https://github.com/cypress-io/cypress/issues/35).\n\n## 0.6.1[​](#0-6-1 \"Direct link to 0.6.1\")\n\n_Released 05/15/2015_\n\n**Bugfixes:**\n\n*   Using the `length` option in traversal commands works properly now. Fixes [#38](https://github.com/cypress-io/cypress/issues/38).\n*   Command logging now works even if no `cy` commands have been issued. Fixes [#37](https://github.com/cypress-io/cypress/issues/37).\n\n**Misc:**\n\n*   Removed cy proxy commands: `each`, `map`. These didn't really \"fit\" into the concept of a command, and with [`.invoke()`](https://docs.cypress.io/api/commands/invoke) or [`.its()`](https://docs.cypress.io/api/commands/its) they're accessible anyway, so nothing is really lost.\n\n## 0.6.0[​](#0-6-0 \"Direct link to 0.6.0\")\n\n_Released 05/14/2015_\n\n**Features:**\n\n*   Pushstate application routing now works 100% reliably with NO hacky overrides in all browsers.\n*   All incompatible `a` / `link` / `form` elements are transparently rewritten to be compatible including FQDN and protocol-less `href` / `src`.\n*   Cookies are automatically cleared between page refreshes, during app startup, and leaving the test page.\n*   3rd Party cookies are now additionally cleared. All cookies are now accessible to the client in preparation for [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies).\n*   Manual navigation after tests run now works reliably.\n*   Navigating between full page refreshes during tests now works reliably.\n\n**Bugfixes:**\n\n*   Server-side redirects are now completely transparently handled and supported.\n*   URLs are no longer altered in any weird way.\n*   Problematic `headers` are now automatically stripped from remote responses.\n*   3rd party `headers` are now properly proxied onto all responses.\n*   Custom headers and other headers \"of interest\" are rewritten for transparent compatibility.\n*   `gzip` compression now handled and proxied correctly.\n\n**Misc:**\n\n*   Completely overhauled the URL and proxy system used to serve remote applications.\n*   Drastically simplified the architecture required for proxying.\n*   Improved reliability for displaying the remote url.\n*   Namespaced all cypress internal routes.\n*   Many internal development / debugging processes improved.\n*   Added 100+ new tests surrounding serving remote content and processing requests.\n*   Renamed all remaining old references to `eclectus`.\n*   All responses are now streamed using `content-encoding: chunked`.\n\n## 0.5.15[​](#0-5-15 \"Direct link to 0.5.15\")\n\n_Released 05/07/2015_\n\n**Bugfixes:**\n\n*   Reverted `window.location` overrides. This broke things in unexpected ways and after further testing would not have worked on `Firefox` and `IE`. It's back to the drawing board (but I have some ideas). Apps using `pushState` routing are broken again.\n\n## 0.5.14[​](#0-5-14 \"Direct link to 0.5.14\")\n\n_Released 05/06/2015_\n\n**Features:**\n\n*   Cypress now works with JS applications that use `pushState` and `replaceState` routing (commonly known as `HTML5 History`) without having to change any application code.\n*   Cypress now always updates the remote URL whenever your application changes its URL through the vast variety of ways it can do this.\n\n**Bugfixes:**\n\n*   Removed `iframe` and `link[rel=stylesheet]` elements during DOM revert.\n*   Server instrument now correctly displays the number of responses their corresponding routes have had.\n*   Spies/Stubs/Mocks instrument now correctly displays the number of calls their corresponding methods have had.\n*   When users navigate between pages with commands, like [`.click()`](https://docs.cypress.io/api/commands/click), Cypress now correctly waits until the age has finished loading before running more commands. Previously this waited for the `unload` event, which did not fire synchronously, and ow we bind to `beforeunload` which does. Additionally Cypress checks to ensure `beforeunload` did not return a non-undefined value.\n\n**Misc:**\n\n*   More changes to prepare for server adapters,\n\n## 0.5.13[​](#0-5-13 \"Direct link to 0.5.13\")\n\n_Released 05/04/2015_\n\n**Features:**\n\n*   New `cy.message` and `cy.msg` commands in preparation for `cypress-ruby`, `cypress-node`, `cypress-*` packages/gem to talk directly to your back end.\n\n**Bugfixes:**\n\n*   Using `querying` or `traversal` commands will no longer throw a 2nd command error when using improper sizzle selectors.\n*   Argument formatting display for command messages is fixed. There were instances of leading commas, or no commas on some commands.\n\n**Misc:**\n\n*   Changed default port from `3000` to `2020` to avoid standard port conflicts with commonly used back ends. Afterall, using Cypress is testing with 2020 vision. ;-)\n*   Updated `bluebird` to `2.9.25`.\n*   Began implementation in preparation for **cross browser testing** coming sometime relatively soon.\n\n## 0.5.12[​](#0-5-12 \"Direct link to 0.5.12\")\n\n_Released 04/30/2015_\n\n**Features:**\n\n*   Introduced new **command option** `length` which cues Cypress into not resolving matched elements until their length matches the option provided.\n\n**Bugfixes:**\n\n*   `cy.respond` will not resolve until all of the queue'd XHR's have resolved.\n\n**Misc:**\n\n*   Cypress now throws on [`.should()`](https://docs.cypress.io/api/commands/should) if any DOM member isn't in the DOM, except for `exist` assertions.\n*   Cypress now throws on `eventually.have.length` assertions. Use implicit `{length: n}` command options instead.\n*   Cypress overrides chai `exist` assertion to really mean: \"does this subject exist in the document?\"\n\n## 0.5.11[​](#0-5-11 \"Direct link to 0.5.11\")\n\n_Released 04/29/2015_\n\n**Bugfixes:**\n\n*   Fixed missing `aliasType` from primitives and some DOM aliases, which prevent the background color from displaying in the UI.\n\n**Misc:**\n\n*   Optimized performance for hovering / exiting commands. Heavily reduced the CPU on revert / restore the DOM.\n\n## 0.5.10[​](#0-5-10 \"Direct link to 0.5.10\")\n\n_Released 04/28/2015_\n\n**Features:**\n\n*   `cy.server()` now accepts a `delay` option which will delay all responses to requests (including 404) based on the value in ms\n*   `cy.server()` now accepts a `respond` option which can turn off automatic responding to requests.\n*   `cy.route()` now accepts a `delay` option which overrides the delay option set in `cy.server()` to just matched requests.\n*   `cy.route()` now accepts a `respond` option which will turn off automatic responding to just matched requests.\n*   Fixes [#14](https://github.com/cypress-io/cypress/issues/14).\n*   [`cy.wait()`](https://docs.cypress.io/api/commands/wait) now accepts an alias property called `request`. Example: `cy.wait('@getUsers.request')` which ill resolve once the XHR is initially requested, before it is responded to. This allows you to test things when a request is in flight.\n*   Added `cy.respond` command which will respond to all pending requests when `{respond: false}` is set in the `server` or `route`.\n*   [`.debug()`](https://docs.cypress.io/api/commands/debug) now displays pending requests and completed requests.\n*   The command UI now displays pending requests as a `pending command`.\n\n**Misc:**\n\n*   Updated `sinon` to `1.14.1`.\n\n## 0.5.9[​](#0-5-9 \"Direct link to 0.5.9\")\n\n_Released 04/26/2015_\n\n**Features:**\n\n*   Added [`.spread()`](https://docs.cypress.io/api/commands/spread) method which spreads an array as individual arguments to a callback function,like [`.then()`](https://docs.cypress.io/api/commands/then).\n*   During an update Cypress will now display the updating message in the same coordinates as when the app was open by clicking the tray icon.\n*   After an update Cypress will now open back up and show itself in these same coordinates.\n*   [`cy.wait()`](https://docs.cypress.io/api/commands/wait) can now accept an array of route aliases which will wait until all have completed. This array of resolved XHRs will become the next subject.\n*   Each time an alias in used with a [`cy.wait()`](https://docs.cypress.io/api/commands/wait), Cypress will not resolve until the Nth request matching the outing alias responds. Fixes [#4](https://github.com/cypress-io/cypress/issues/4).\n*   [`cy.get()`](https://docs.cypress.io/api/commands/get) has been upgraded to accept a routing alias. By default it will yield the last matched request, but also supports special alias properties which return a different request or potentially an array of requests.\n\n## 0.5.8[​](#0-5-8 \"Direct link to 0.5.8\")\n\n_Released 04/24/2015_\n\n**Features:**\n\n*   [`.as()`](https://docs.cypress.io/api/commands/as) can now alias primitives and objects other than routes or DOM.\n*   [`.as()`](https://docs.cypress.io/api/commands/as) automatically assigns this alias to `runnable.ctx` which makes it available synchronously.\n*   [`.as()`](https://docs.cypress.io/api/commands/as) does not allow several reserved words and will throw if you attempt to alias as one of them.\n*   [`cy.get()`](https://docs.cypress.io/api/commands/get) can now accept all alias types and will display the labels in the UI differently based on the alias type.\n*   Cypress now displays a message when the Desktop App update is actually being applied instead of doing nothing and looking like it's crashed.\n\n**Bugfixes:**\n\n*   [`.as()`](https://docs.cypress.io/api/commands/as) now throws on empty strings or non string arguments.\n*   Desktop App debug logs no longer sort in the wrong direction.\n*   Permissions are now restored during a cypress update for the `logs` and `cache`.\n*   Prevent 3rd party windows from gaining focus over main window.\n\n**Misc:**\n\n*   Removed `cy.assign`, this has been folded into [`.as()`](https://docs.cypress.io/api/commands/as).\n*   Updated `chokidar` to `1.0.1`.\n\n## 0.5.7[​](#0-5-7 \"Direct link to 0.5.7\")\n\n_Released 04/23/2015_\n\n**Features:**\n\n*   The insanity that is URL parsing to figure out absolute, relative, absolute-path-relative, http, sub domains, and local files should work in most cases. In other words, Cypress has implemented the vast majority of url parsing based on the [w3c URL spec](https://url.spec.whatwg.org/).\n\n**Bugfixes:**\n\n*   Prevent reverting the DOM while tests are running. Fixes [#28](https://github.com/cypress-io/cypress/issues/28).\n*   Fix edge case with forced focusing / blurring an element when document is not in focus and the element is no longer in the DOM.\n*   Visiting relative paths which are served from your file system works again.\n*   Visiting absolute paths in the iframe now displays the correct URL in the address bar again.\n\n## 0.5.6[​](#0-5-6 \"Direct link to 0.5.6\")\n\n_Released 04/22/2015_\n\n**Features:**\n\n*   Cypress now detects the difference between a forced async `done` test timeout vs a regular command timeout, and will throw the appropriate message indicating whether the user forgot to invoke `done` or whether the timeout happened due to a command.\n\n**Bugfixes:**\n\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now properly times out when the `load` event does not occur within the time out window.\n*   If a page loads after a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) times out it will no longer cause an exception in the `onBeforeLoad` handler.\n\n**Misc:**\n\n*   Increased [`cy.visit()`](https://docs.cypress.io/api/commands/visit) timeout from **15s** to **20s**.\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now throws a custom error message when it times out (instead of an incorrect / confusing default Mocha timeout message).\n*   Using a `debugger` while running a test will no longer always cause the test to time out (yay!).\n*   Override default Mocha timeout handling, replaced with custom logic. Removes many bizarre edge cases.\n\n## 0.5.5[​](#0-5-5 \"Direct link to 0.5.5\")\n\n_Released 04/20/2015_\n\n**Features:**\n\n*   When main app window comes into focus, it will automatically focus other peripheral windows.\n*   Added explicit error message when using child commands on a subject which has been detached or removed from the DOM.\n*   Cypress now detects when an async test is passed and not all commands have finished running. It will throw an explicit error message in this situation.\n\n**Misc:**\n\n*   Error messages no longer break within words.\n\n## 0.5.4[​](#0-5-4 \"Direct link to 0.5.4\")\n\n_Released 04/20/2015_\n\n**Features:**\n\n*   Enhanced [`.should()`](https://docs.cypress.io/api/commands/should) to accept `eventually` flag to automatically retry assertions until timeout is reached.\n\n**Misc:**\n\n*   Repurposed [`.and()`](https://docs.cypress.io/api/commands/and) to be an alias of [`.should()`](https://docs.cypress.io/api/commands/should) for chainability.\n*   Removed `cy.to`.\n\n## 0.5.3[​](#0-5-3 \"Direct link to 0.5.3\")\n\n_Released 04/19/2015_\n\n**Bugfixes:**\n\n*   Handle relative path segments which walk up past the remote host `../../assets/app.css`.\n*   Throw explicit error for `null`, `undefined`, and `\"\"` arguments to [`cy.contains()`](https://docs.cypress.io/api/commands/contains). Fixes [#24](https://github.com/cypress-io/cypress/issues/24).\n\nMisc\n\n*   Improved `onConsole` message for [`cy.focused()`](https://docs.cypress.io/api/commands/focused) when no element was returned. Fixes [#23](https://github.com/cypress-io/cypress/issues/23).\n\n## 0.5.2[​](#0-5-2 \"Direct link to 0.5.2\")\n\n_Released 04/17/2015_\n\n**Bugfixes:**\n\n*   Fixed missing files from deployment. Added tests around this.\n\n## 0.5.1[​](#0-5-1 \"Direct link to 0.5.1\")\n\n_Released 04/16/2015_\n\n**Misc:**\n\n*   Updated dependencies: `bluebird`, `fs-extra`, `sinon-as-promised`.\n*   Updated `nw` to `0.12.1`.\n\n## 0.5.0[​](#0-5-0 \"Direct link to 0.5.0\")\n\n_Released 04/15/2015_\n\n**Misc:**\n\n*   Snapshot source code.\n\n## 0.4.7[​](#0-4-7 \"Direct link to 0.4.7\")\n\n_Released 04/15/2015_\n\n**Misc:**\n\n*   Added automated functional NW tests during deployment in preparation for `0.5.0` release.\n\n## 0.4.6[​](#0-4-6 \"Direct link to 0.4.6\")\n\n_Released 04/11/2015_\n\n**Features:**\n\n*   Added \"invisible\" icon to a command when its matched element(s) are invisible.\n*   Running a single test will now automatically expand to display its commands.\n*   Any failing test will now automatically expand to display its commands.\n*   Failing tests which become passing will automatically collapse again.\n\n## 0.4.5[​](#0-4-5 \"Direct link to 0.4.5\")\n\n_Released 04/10/2015_\n\n**Features:**\n\n*   Added [`cy.wrap()`](https://docs.cypress.io/api/commands/wrap) command.\n\n**Bugfixes:**\n\n*   Improved options logging and argument logging for all commands. Fixes [#8](https://github.com/cypress-io/cypress/issues/8).\n\n## 0.4.4[​](#0-4-4 \"Direct link to 0.4.4\")\n\n_Released 04/09/2015_\n\n**Features:**\n\n*   Added [`.not()`](https://docs.cypress.io/api/commands/not) traversal filtering method. Suggested in [#16](https://github.com/cypress-io/cypress/issues/16).\n\n**Misc:**\n\n*   Improved error messages for traversal failures. Errors now include the parent context DOM element. Fixes [#11](https://github.com/cypress-io/cypress/issues/11).\n*   Improved error messages for invalid `cy.route()` arguments. Fixes [#20](https://github.com/cypress-io/cypress/issues/20).\n\n## 0.4.3[​](#0-4-3 \"Direct link to 0.4.3\")\n\n_Released 04/09/2015_\n\n**Features:**\n\n*   Added functionality which enables `cy.server()` and `cy.route()` to be created prior to [`cy.visit()`](https://docs.cypress.io/api/commands/visit). The server and routes will apply to the next page which is visited. This allows you to stub requests which happen on page load. Suggested in [#17](https://github.com/cypress-io/cypress/issues/17).\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now takes an optional `onBeforeLoad` callback option which is invoked when your page begins to ender but prior to its load event.\n\n**Misc:**\n\n*   Improved error message when attempting to use `cy.agents` or anything else which requires a remote sandbox. Fixes [#12](https://github.com/cypress-io/cypress/issues/12).\n\n## 0.4.2[​](#0-4-2 \"Direct link to 0.4.2\")\n\n_Released 04/09/2015_\n\n**Bugfixes:**\n\n*   Remove accidental `debugger` left in `uncaught` overloads (used only in Dev).\n*   Prevent memory leak with Cypress helper listeners on every re-run of the tests.\n*   Prevent memory leak with custom 3rd party Cypress listeners in spec windows on every re-run of the tests.\n*   Prevent error from being thrown when `.only`'s are switched in between active test runs.\n\n## 0.4.1[​](#0-4-1 \"Direct link to 0.4.1\")\n\n_Released 04/08/2015_\n\n**Features:**\n\n*   `javascripts` files can now utilize `snockets`, `browserify`, or `requirejs`.\n\n**Bugfixes:**\n\n*   Handle `javascripts` and preprocess them as we do regular specs. Fixes: [#15](https://github.com/cypress-io/cypress/issues/15).\n*   Fixed an edge case when writing a test with a `done` callback alongside `cy` commands. This situation would always cause a timeout after 30 seconds even though the test would pass.\n\n**Misc:**\n\n*   Internally refactored Cypress for easier testability / debuggability.\n*   Organized files around in preparation for OS release.\n*   Added lightweight module system / optimized Cypress listeners to prevent duplicated events.\n*   Changed url strategy for sending down `spec` files.\n\n## 0.4.0[​](#0-4-0 \"Direct link to 0.4.0\")\n\n_Released 04/02/2015_\n\n**Features:**\n\n*   `sinon-as-promised` is now a bundled extension.\n*   tests without an `id` now run (with a random temporarily assigned id).\n*   tests with a duplicate `id` to another test will now run (with a random temporarily assigned id).\n*   tests or suites which are manually re-run from the UI now hide all of the other tests / suites.\n\n**Bugfixes:**\n\n*   Fixed hook failure associated to wrong failed current test when `grep` was set.\n*   Async tests which used a `cy` command and had a `done` callback was always undefined. Now it's back to real Mocha `function done(err)`.\n*   Fixed bug in Mocha where it incorrectly associates `hook.ctx.currentTest` to the wrong `test`. [Mocha Issue](https://github.com/mochajs/mocha/issues/1638).\n*   [`cy.title()`](https://docs.cypress.io/api/commands/title) no longer logs twice on a failure.\n*   Fixed putting an `.only` on a large list of tests that would sometimes not clear the previous runnables in the UI.\n\n**Misc:**\n\n*   Optimized first test run after hard refresh.\n*   Performance improvements on successive runnable iterations.\n*   Aborting currently running tests performance improvement.\n*   Live reload performance improvements when tests are changed.\n*   Added 100+ tests covering Runner + Reporter behavior.\n*   Aggressively cleaned up listeners after each test completion + run.\n*   Added additional `Cypress` events for 3rd party custom handling.\n\n## 0.3.15[​](#0-3-15 \"Direct link to 0.3.15\")\n\n_Released 03/28/2015_\n\n**Misc:**\n\n*   Drastically improved file watching on large projects with many tests. Instead of choking the CPU at nearly 100% indefinitely we now optimally watch the current working files for changes.\n\n## 0.3.14[​](#0-3-14 \"Direct link to 0.3.14\")\n\n_Released 03/27/2015_\n\n**Bugfixes:**\n\n*   `Socket.io` and `chokidar` are now being cleaned up when a project is closed. Previously `chokidar` file watchers would stick around indefinitely causing a memory leak each time any project is closed and reopened.\n\n## 0.3.13[​](#0-3-13 \"Direct link to 0.3.13\")\n\n_Released 03/27/2015_\n\n**Features:**\n\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now detects a local url. `localhost`, `0.0.0.0`, `127.0.0.1` can omit the `http://` protocol.\n\n**Bugfixes:**\n\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) now properly escape quotes in the text.\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now inserts a trailing slash intelligently into the correct `path` position (not after query params or hashes).\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) will no longer log 2 failed commands on error.\n*   Hovering on commands which delay resolving their $el will now properly highlight again.\n\n**Misc:**\n\n*   [`.debug()`](https://docs.cypress.io/api/commands/debug) returns the current subject now.\n*   upgraded jsUri to `1.3.0`.\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) now throws when url argument isn't a string.\n*   `Cypress.Log` instances now fire `attrs:changed` event. Removed `state:change` event.\n\n## 0.3.12[​](#0-3-12 \"Direct link to 0.3.12\")\n\n_Released 03/26/2015_\n\n**Bugfixes:**\n\n*   Aliases which replay their commands will no longer break the current chain and therefore not unintentionally null our their subject for the ext command.\n*   Highlighting $el's on DOM restore now works again.\n*   Asserting against [`cy.focused()`](https://docs.cypress.io/api/commands/focused) will indent command logs now.\n*   Prevent failed [`.should()`](https://docs.cypress.io/api/commands/should) and `cy.to` from outputting a second error'd command log.\n*   Removed memory leaks surrounding Mocha runner.\n*   Captured remote page uncaught errors again which fail corresponding tests.\n*   Captured spec iframe errors again and preserve their stack trace.\n\n**Misc:**\n\n*   [`cy.focused()`](https://docs.cypress.io/api/commands/focused) is now a parent command.\n*   Memory usage improvements.\n\n## 0.3.11[​](#0-3-11 \"Direct link to 0.3.11\")\n\n_Released 03/25/2015_\n\n**Bugfixes:**\n\n*   Automatic command errors now properly show as errored commands.\n*   [`.invoke()`](https://docs.cypress.io/api/commands/invoke) now correctly checks for a subject before running.\n\n**Misc:**\n\n*   `cy.Promise` (Bluebird) is now publicly available.\n\n## 0.3.10[​](#0-3-10 \"Direct link to 0.3.10\")\n\n_Released 03/24/2015_\n\n**Bugfixes:**\n\n*   Test duration is now correct and only updates when tests finish.\n*   Failing a hook will no longer continue to count the duration forever.\n\n**Misc:**\n\n*   Bumped Mocha to 2.2.1\n*   Users now see a specialized error message when Cypress could not serve static files from the file system.\n\n## 0.3.9[​](#0-3-9 \"Direct link to 0.3.9\")\n\n_Released 03/24/2015_\n\n**Features:**\n\n*   Instead of waiting until commands resolve, commands are immediately inserted with a `pending` status.\n*   Pending commands are now visually distinguishable.\n*   Created new `Cypress.Log` interface for greater control over the display of commands.\n*   Available aliases are now logged in the console on [`.debug()`](https://docs.cypress.io/api/commands/debug).\n\n**Bugfixes:**\n\n*   Allow projects to be scrolled when >4 are added.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) accepts remaining `input[type=*]` that users can type into.\n*   Cause + Effect commands are now logged in the correct order. IE, clicking something which causes another command to insert will be inserted correctly in the order they arrived\n*   `numRetries` is no longer shown in commands.\n*   [`.clear()`](https://docs.cypress.io/api/commands/clear) now logs a command.\n*   `Promise.reduce` bugs are now fixed, causing events on a collection of elements in the synchronous wrong order.\n*   `cy.chain` is now coercively returned instead of `cy` which prevents losing access to the subject in custom commands.\n*   Trailing slashes are removed when serving initial files from the file system directly.\n\n## 0.3.8[​](#0-3-8 \"Direct link to 0.3.8\")\n\n_Released 03/22/2015_\n\n**Features:**\n\n*   Added icons + tray icons.\n\n**Bugfixes:**\n\n*   Prevent cypress.app from showing in taskbar.\n*   Clicking on tray twice will toggle hide/show of app.\n\n## 0.3.7[​](#0-3-7 \"Direct link to 0.3.7\")\n\n_Released 03/21/2015_\n\n**Features:**\n\n*   Code Signed Mac App to prevent \"Unidentified Developer\" message on open.\n\n## 0.3.6[​](#0-3-6 \"Direct link to 0.3.6\")\n\n_Released 03/20/2015_\n\n**Features:**\n\n*   Added external link to changelog when checking for updates :-)\n\n**Bugfixes:**\n\n*   Force trailing slash on all [`cy.visit()`](https://docs.cypress.io/api/commands/visit) to fix relative links `href=\"assets/app.js\"`.\n*   Fix sourceMappingURL browser bug `http:/localhost:4200/app.css.map`.\n*   Fix test titles not being escaped due to refactoring.\n\n## 0.3.5[​](#0-3-5 \"Direct link to 0.3.5\")\n\n_Released 03/20/2015_\n\n**Bugfixes:**\n\n*   Fix missing `moment.js` from `bower.json`.\n*   Fix missing trailing slash from initial [`cy.visit()`](https://docs.cypress.io/api/commands/visit) requests.\n*   Fix missing `__initial=true` query param on initial redirects.\n\n**Misc:**\n\n*   Updated $.simulate to 1.0.1.\n\n## 0.3.4[​](#0-3-4 \"Direct link to 0.3.4\")\n\n_Released 03/19/2015_\n\n**Features:**\n\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now causes the subject to receive `focus` event.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) now causes previously `focused` elements to receive `blur` event/\n*   Typing `{enter}` now handles form submit logic as per the HTML spec.\n    *   Form with 1 input, no defaultButton.\n    *   Form with 2 inputs, no defaultButton.\n    *   Form with disabled defaultButton.\n    *   Form with multiple defaultButtons.\n    *   Correctly processes defaultButton click event, form submit event.\n    *   Intelligently handle defaultPrevented events from descendants.\n\n**Bugfixes:**\n\n*   [`.clear()`](https://docs.cypress.io/api/commands/clear) now returns a promise.\n\n**Misc:**\n\n*   Updated `bluebird` to `2.9.14`.\n\n## 0.3.3[​](#0-3-3 \"Direct link to 0.3.3\")\n\n_Released 03/18/2015_\n\n**Features:**\n\n*   Filtered out Ajax requests for `.js`, `.html`, `.css` files by default.\n*   `cy.server()` can configure whether this is turned on or off.\n\n**Bugfixes:**\n\n*   Prevent `cy.server()` from slurping up Angular async template GETs.\n\n**Misc:**\n\n*   Inlined Google Fonts into `vendor.css`.",
  "title": "Changelog | Cypress Documentation",
  "description": "13.13.0",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/end-to-end-testing/testing-your-app",
  "markdown": "# Effective E2E: Cypress App Testing\n\n## Testing Your App\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   The relationship between Cypress and your back end\n*   How to configure Cypress to fit your app\n*   Working with (or without!) your authentication mechanism\n*   Effectively leveraging test data\n\n## Step 1: Start your server[​](#Step-1-Start-your-server \"Direct link to Step-1-Start-your-server\")\n\nAssuming you've successfully [installed Cypress](https://docs.cypress.io/guides/getting-started/installing-cypress) and [opened Cypress](https://docs.cypress.io/guides/getting-started/opening-the-app) in your project, the first thing you'll want to do is start your local development server that hosts the application.\n\nIt should look something like **[http://localhost:8080](http://localhost:8080/)**.\n\ncaution\n\n**Anti-Pattern**\n\nDon't try to start a web server from within Cypress scripts. Read about [best practices](https://docs.cypress.io/guides/references/best-practices#Web-Servers) here.\n\ninfo\n\n**Why start a local development server?**\n\nYou may be wondering - why can't I just visit my application that's already in production?\n\nWhile you certainly _can_ test an application that's already deployed, that's not really the **sweet spot** of Cypress.\n\nCypress is built, and optimized around being a tool for your daily local development. In fact, after you start using Cypress for awhile, we believe that you may find it useful to even do **all of your development** in it.\n\nUltimately you'll not only be able to **test and develop** at the same time, but you'll actually be able to build your application **faster** while getting tests \"for free\".\n\nWhat's more - since Cypress enables you to do things like **stub network requests** you can build out your web application without even needing a server to provide valid JSON responses.\n\nLast but not least - trying to shoehorn tests to an already built application is much more difficult than building it as you write tests. You'll likely encounter a series of initial up front challenges / hurdles that would have otherwise been avoided writing tests from the start.\n\nThe last, and probably most important reason why you want to test against local servers, is the ability to **control them**. When your application is running in production you can't control it.\n\nWhen it's running in development you can:\n\n*   take shortcuts\n*   seed data by running executable scripts\n*   expose test environment specific routes\n*   disable security features which make automation difficult\n*   reset state on the server / database\n\nWith that said - you still have the option to have it **both ways**.\n\nMany of our users run the _majority_ of their integration tests against a local development server, but then reserve a smaller set of **smoke tests** that run only against a deployed production app.\n\n## Step 2: Visit your server[​](#Step-2-Visit-your-server \"Direct link to Step-2-Visit-your-server\")\n\nOnce your server is running, it's time to visit it.\n\nLet's delete the `spec.cy.js` file created in the previous tutorial now that it's no longer needed.\n\n```\nrm cypress/e2e/spec.cy.js\n```\n\nNow let's create our own spec file called `home_page.cy.js`.\n\n```\ntouch cypress/e2e/home_page.cy.js\n```\n\nOnce that file is created, you should see it in the list of spec files.\n\n![List of files including home_page.cy.js](https://docs.cypress.io/img/guides/getting-started/e2e/v10/testing-your-app-home-page-spec.png)\n\nNow you'll need to add in the following code in your test file to visit your server:\n\n```\ndescribe('The Home Page', () => {  it('successfully loads', () => {    cy.visit('http://localhost:8080') // change URL to match your dev URL  })})\n```\n\nNow click on the `home_page.cy.js` file and watch Cypress open your browser.\n\nIf you forgot to start your server you'll see the error below:\n\n![Error in Cypress showing cy.visit failed](https://docs.cypress.io/img/guides/getting-started/e2e/v10/testing-your-app-visit-fail.png)\n\nIf you've started your server, then you should see your application loaded and working.\n\n## Step 3: Configure Cypress[​](#Step-3-Configure-Cypress \"Direct link to Step-3-Configure-Cypress\")\n\nIf you think ahead, you'll quickly realize that you're going to be typing this URL a lot, since every test is going to need to visit some page of your application. Luckily, Cypress provides a [configuration option](https://docs.cypress.io/guides/references/configuration) for this. Let's leverage that now.\n\nOpen up your [configuration file](https://docs.cypress.io/guides/references/configuration). It starts out empty, but let's add the `baseUrl` option.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    baseUrl: 'http://localhost:8080',  },})\n```\n\nThis will automatically **prefix** [`cy.visit()`](https://docs.cypress.io/api/commands/visit) and [`cy.request()`](https://docs.cypress.io/api/commands/request) commands with this baseUrl.\n\ninfo\n\nWhenever you modify your configuration file, Cypress will automatically reboot itself and kill any open browsers. This is normal. Click on the spec file again to relaunch the browser.\n\nWe can now visit a relative path and omit the hostname and port.\n\n```\ndescribe('The Home Page', () => {  it('successfully loads', () => {    cy.visit('/')  })})\n```\n\nGreat! Everything should still be green.\n\ninfo\n\n**Configuration Options**\n\nCypress has many more configuration options you can use to customize its behavior. Things like where your tests live, default timeout periods, environment variables, which reporter to use, etc.\n\nCheck them out in [Configuration](https://docs.cypress.io/guides/references/configuration)!\n\n## Testing strategies[​](#Testing-strategies \"Direct link to Testing strategies\")\n\nYou're about to embark on writing tests for your application, and only _you_ know your application, so we don't have a lot of specific advice to give you.\n\n**What to test, where the edge cases and seams are, what regressions you're likely to run into, etc. are entirely up to you, your application, and your team.**\n\nThat said, modern web testing has a few wrinkles that every team experiences, so here are some quick tips on common situations you're likely to run into.\n\n### Seeding data[​](#Seeding-data \"Direct link to Seeding data\")\n\nDepending on how your application is built - it's likely that your web application is going to be affected and controlled by the server.\n\nTypically these days servers communicate with front end apps via JSON, but you could also be running a traditional server-side rendered HTML web application.\n\nGenerally the server is responsible for sending responses that reflect some kind of **state** it holds - generally in a database.\n\nTraditionally when writing `e2e` tests using Selenium, before you automate the browser you do some kind of **set up and tear down** on the server.\n\nPerhaps you'll need to generate a user, and seed them with associations and records. You may be familiar with using things such as fixtures or factories.\n\nTo test various page states - like an empty view, or a pagination view, you'd need to seed the server so that this state can be tested.\n\n**While there is a lot more to this strategy, you generally have three ways to facilitate this with Cypress:**\n\n*   [`cy.exec()`](https://docs.cypress.io/api/commands/exec) - to run system commands\n*   [`cy.task()`](https://docs.cypress.io/api/commands/task) - to run code in Node via the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) - to make HTTP requests\n\nIf you're running `node.js` on your server, you might add a `before` or `beforeEach` hook that executes an `npm` task.\n\n```\ndescribe('The Home Page', () => {  beforeEach(() => {    // reset and seed the database prior to every test    cy.exec('npm run db:reset && npm run db:seed')  })  it('successfully loads', () => {    cy.visit('/')  })})\n```\n\nInstead of just executing a system command, you may want more flexibility and could expose a series of routes only when running in a test environment.\n\n**For instance, you could compose several requests together to tell your server exactly the state you want to create.**\n\n```\ndescribe('The Home Page', () => {  beforeEach(() => {    // reset and seed the database prior to every test    cy.exec('npm run db:reset && npm run db:seed')    // seed a post in the DB that we control from our tests    cy.request('POST', '/test/seed/post', {      title: 'First Post',      authorId: 1,      body: '...',    })    // seed a user in the DB that we can control from our tests    cy.request('POST', '/test/seed/user', { name: 'Jane' })      .its('body')      .as('currentUser')  })  it('successfully loads', () => {    // this.currentUser will now point to the response    // body of the cy.request() that we could use    // to log in or work with in some way    cy.visit('/')  })})\n```\n\nWhile there's nothing really _wrong_ with this approach, it does add a lot of complexity. You will be battling synchronizing the state between your server and your browser - and you'll always need to set up / tear down this state before tests (which is slow).\n\nThe good news is that we aren't Selenium, nor are we a traditional e2e testing tool. That means we're not bound to the same restrictions.\n\n**With Cypress, there are several other approaches that can offer an arguably better and faster experience.**\n\n### Stubbing the server[​](#Stubbing-the-server \"Direct link to Stubbing the server\")\n\nAnother valid approach opposed to seeding and talking to your server is to bypass it altogether.\n\nWhile you'll still receive all of the regular HTML / JS / CSS assets from your server and you'll continue to [`cy.visit()`](https://docs.cypress.io/api/commands/visit) it in the same way - you can instead **stub** the JSON responses coming from it.\n\nThis means that instead of resetting the database, or seeding it with the state we want, you can force the server to respond with **whatever** you want it to. In this way, we not only prevent needing to synchronize the state between the server and browser, but we also prevent mutating state from our tests. That means tests won't build up state that may affect other tests.\n\nAnother upside is that this enables you to **build out your application** without needing the _contract_ of the server to exist. You can build it the way you want the data to be structured, and even test all of the edge cases, without needing a server.\n\nHowever - there is likely still a balance here where **both** strategies are valid (and you should likely do them).\n\nWhile stubbing is great, it means that you don't have the guarantees that these response payloads actually match what the server will send. However, there are still many valid ways to get around this:\n\n#### Generate the fixture stubs ahead of time[​](#Generate-the-fixture-stubs-ahead-of-time \"Direct link to Generate the fixture stubs ahead of time\")\n\nYou could have the server generate all of the fixture stubs for you ahead of time. This means their data will reflect what the server will actually send.\n\n#### Write a single e2e test without stubs, and then stub the rest[​](#Write-a-single-e2e-test-without-stubs-and-then-stub-the-rest \"Direct link to Write a single e2e test without stubs, and then stub the rest\")\n\nAnother more balanced approach is to integrate both strategies. You likely want to have a **single test** that takes a true `e2e` approach and stubs nothing. It'll use the feature for real - including seeding the database and setting up state.\n\nOnce you've established it's working you can then use stubs to test all of the edge cases and additional scenarios. There are no benefits to using real data in the vast majority of cases. We recommend that the vast majority of tests use stub data. They will be orders of magnitude faster, and much less complex.\n\ninfo\n\n**Guide: Network Requests**\n\nPlease read our [Guide on Network Requests](https://docs.cypress.io/guides/guides/network-requests) for a much more thorough analysis and approach to accomplishing this.\n\n### Logging in[​](#Logging-in \"Direct link to Logging in\")\n\nOne of the first (and arguably one of the hardest) hurdles you'll have to overcome in testing is logging into your application.\n\nNothing slows a test suite down like having to log in, but all the good parts of your application most likely require an authenticated user! Here are some tips.\n\n#### Fully test the login flow -- but only once![​](#Fully-test-the-login-flow----but-only-once \"Direct link to Fully test the login flow -- but only once!\")\n\nIt's a great idea to get your signup and login flow under test coverage since it is very important to all of your users and you never want it to break.\n\nLogging in is one of those features that are **mission critical** and should likely involve your server. We recommend you test signup and login using your UI as a real user would:\n\nHere's an example alongside seeding your database:\n\n```\ndescribe('The Login Page', () => {  beforeEach(() => {    // reset and seed the database prior to every test    cy.exec('npm run db:reset && npm run db:seed')    // seed a user in the DB that we can control from our tests    // assuming it generates a random password for us    cy.request('POST', '/test/seed/user', { username: 'jane.lane' })      .its('body')      .as('currentUser')  })  it('sets auth cookie when logging in via form submission', function () {    // destructuring assignment of the this.currentUser object    const { username, password } = this.currentUser    cy.visit('/login')    cy.get('input[name=username]').type(username)    // {enter} causes the form to submit    cy.get('input[name=password]').type(`${password}{enter}`)    // we should be redirected to /dashboard    cy.url().should('include', '/dashboard')    // our auth cookie should be present    cy.getCookie('your-session-cookie').should('exist')    // UI should reflect this user being logged in    cy.get('h1').should('contain', 'jane.lane')  })})\n```\n\nYou'll likely also want to test your login UI for:\n\n*   Invalid username / password\n*   Username taken\n*   Password complexity requirements\n*   Edge cases like locked / deleted accounts\n\nEach of these likely requires a full blown e2e test.\n\n#### Reusing the login code[​](#Reusing-the-login-code \"Direct link to Reusing the login code\")\n\nAt this point there's nothing stopping you copying and pasting the login code above into every one of your tests that needs an authenticated user. Or you could even put all your tests in one big spec file and put the login code in a `beforeEach` block. But neither of those approaches is particularly maintainable, and they're certainly not very elegant. A much better solution is to write a custom `cy.login()` [command](https://docs.cypress.io/api/cypress-api/custom-commands).\n\nCustom commands allow you to easily encapsulate and reuse Cypress test logic. They let you add your own functionality to your test suite and then use it with the same [chainable and asynchronous API](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#The-Cypress-Command-Queue) as the built-in Cypress commands. Lets make the above login example a custom command and add it to `cypress/support/commands.js` so it can be leveraged in any spec file:\n\n```\n// In cypress/support/commands.jsCypress.Commands.add('login', (username, password) => {  cy.visit('/login')  cy.get('input[name=username]').type(username)  // {enter} causes the form to submit  cy.get('input[name=password]').type(`${password}{enter}`, { log: false })  // we should be redirected to /dashboard  cy.url().should('include', '/dashboard')  // our auth cookie should be present  cy.getCookie('your-session-cookie').should('exist')  // UI should reflect this user being logged in  cy.get('h1').should('contain', username)})// In your spec fileit('does something on a secured page', function () {  const { username, password } = this.currentUser  cy.login(username, password)  // ...rest of test})\n```\n\n#### Improving performance[​](#Improving-performance \"Direct link to Improving performance\")\n\nYou're probably wondering what happened to our advice about logging in \"only once\". The custom command above will work just fine for testing your secured pages, but if you have more than a handful of tests, logging in before every test is going to increase the overall run time of your suite.\n\nLuckily, Cypress provides the [`cy.session()`](https://docs.cypress.io/api/commands/session) command, a powerful performance tool that lets you cache the browser context associated with your user and reuse it for multiple tests without going through multiple login flows! Let's modify the custom `cy.login()` command from our previous example to use `cy.session()`:\n\n```\nCypress.Commands.add('login', (username, password) => {  cy.session(    username,    () => {      cy.visit('/login')      cy.get('input[name=username]').type(username)      cy.get('input[name=password]').type(`${password}{enter}`, { log: false })      cy.url().should('include', '/dashboard')      cy.get('h1').should('contain', username)    },    {      validate: () => {        cy.getCookie('your-session-cookie').should('exist')      },    }  )})\n```\n\ninfo\n\n**Third-Party Login**\n\nIf your app implements login via a third-party authentication provider such as [Auth0](https://auth0.com/) or [Okta](https://www.okta.com/), you can use the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command to include their login pages as part of your authentication tests.\n\nThere's a lot going on here that's out of the scope for this introduction. Please check out the [`cy.session()`](https://docs.cypress.io/api/commands/session) documentation for a more in-depth explanation.\n\ninfo\n\n**Authentication Recipes**\n\nLogging in can be more complex than what we've just covered.\n\nWe've created several recipes covering additional scenarios like dealing with CSRF tokens or testing XHR based login forms.\n\nFeel free to [explore these additional logging in](https://docs.cypress.io/examples/recipes) recipes.\n\n## Get started[​](#Get-started \"Direct link to Get started\")\n\nOk, we're done talking. Now dive in and get started testing your app!\n\nFrom here you may want to explore some more of our guides:\n\n*   [Tutorial Videos](https://docs.cypress.io/examples/tutorials) to watch step-by-step tutorial videos\n*   [Cypress API](https://docs.cypress.io/api/table-of-contents) to learn what commands are available as you work\n*   [Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress) explains how Cypress _really_ works\n*   [Command Line](https://docs.cypress.io/guides/guides/command-line) for running all your tests outside via `cypress run`\n*   [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction) for running Cypress in CI\n*   [Cross Browser Testing](https://docs.cypress.io/guides/guides/cross-browser-testing) for optimally running tests in CI across Firefox and Chrome-family browsers\n*   [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) demonstrations of Cypress testing practices, configuration, and strategies in a real-world project.",
  "title": "Effective E2E: Cypress App Testing | Cypress Documentation",
  "description": "Discover effective end-to-end testing strategies in Cypress App Testing Guide. Elevate your testing proficiency",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/debugging",
  "markdown": "# Debugging | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress runs in the same event loop with your code, keeping debugging less demanding and more understandable\n*   How Cypress embraces the standard Developer Tools\n*   How and when to use `debugger` and the shorthand [`.debug()`](https://docs.cypress.io/api/commands/debug) command\n\n## Using `debugger`[​](#Using-debugger \"Direct link to Using-debugger\")\n\nYour Cypress test code runs in the same run loop as your application. This means you have access to the code running on the page, as well as the things the browser makes available to you, like `document`, `window`, and `debugger`.\n\n### Debug just like you always do[​](#Debug-just-like-you-always-do \"Direct link to Debug just like you always do\")\n\nBased on those statements, you might be tempted to throw a `debugger` into your test, like so:\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('let me debug like a fiend', () => {  cy.visit('/my/page/path')  cy.get('[data-testid=\"selector-in-question\"]')  debugger // Doesn't work})\n```\n\nThis may not work exactly as you are expecting. As you may remember from the [Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress), `cy` commands enqueue an action to be taken later. Can you see what the test above will do given that perspective?\n\nBoth [`cy.visit()`](https://docs.cypress.io/api/commands/visit) and [`cy.get()`](https://docs.cypress.io/api/commands/get) will return immediately, having enqueued their work to be done later, and `debugger` will be executed before any of the commands have actually run. The same behavior is expected in Component Tests when using [`cy.mount()`](https://docs.cypress.io/api/commands/mount).\n\nLet's use [`.then()`](https://docs.cypress.io/api/commands/then) to tap into the Cypress command during execution and add a `debugger` at the appropriate time:\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('let me debug when the after the command executes', () => {  cy.visit('/my/page/path')  cy.get('[data-testid=\"selector-in-question\"]').then(($selectedElement) => {    // Debugger is hit after the cy.visit    // and cy.get commands have completed    debugger  })})\n```\n\nNow we're in business! When you're visiting a page or mounting a component for the first time, (shown above with the [`cy.get()`](https://docs.cypress.io/api/commands/get)chain and its [`.then()`](https://docs.cypress.io/api/commands/then) attached) the commands are enqueued for Cypress to execute. The `it` block exits, and Cypress starts its work:\n\n1.  In an end-to-end test, the page is visited and Cypress waits for it to load. Alternatively, the component is mounted and rendered in a Component Test.\n2.  The element is queried, and Cypress automatically waits and retries for a few moments if it isn't found immediately.\n3.  The function passed to [`.then()`](https://docs.cypress.io/api/commands/then) is executed, with the found element yielded to it.\n4.  Within the context of the [`.then()`](https://docs.cypress.io/api/commands/then) function, the `debugger` is called, halting the browser and calling focus to the Developer Tools.\n5.  You're in! Inspect the state of your application like you normally would if you'd dropped the `debugger` into your application code.\n\n### Using [`.debug()`](https://docs.cypress.io/api/commands/debug)[​](#Using-debug \"Direct link to Using-debug\")\n\nCypress also exposes a shortcut for debugging commands, [`.debug()`](https://docs.cypress.io/api/commands/debug). Let's rewrite the test above using this helper method:\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('let me debug like a fiend', () => {  cy.visit('/my/page/path')  cy.get('[data-testid=\"selector-in-question\"]').debug()})\n```\n\nThe current subject that is yielded by the [`cy.get()`](https://docs.cypress.io/api/commands/get) is exposed as the variable `subject` within your Developer Tools so that you can interact with it in the console.\n\n![Debugging Subject](https://docs.cypress.io/img/guides/debugging/debugging-subject.png)\n\nUse [`.debug()`](https://docs.cypress.io/api/commands/debug) to quickly inspect any (or many!) part(s) of your application during the test. You can attach it to any Cypress chain of commands to have a look at the system's state at that moment.\n\n## Step through test commands[​](#Step-through-test-commands \"Direct link to Step through test commands\")\n\nYou can run the test command by command using the [`.pause()`](https://docs.cypress.io/api/commands/pause) command.\n\n```\nit('adds items', () => {  cy.pause()  cy.get('[data-testid=\"new-todo\"]')  // more commands})\n```\n\nThis allows you to inspect the web application, the DOM, the network, and any storage after each command to make sure everything happens as expected.\n\nThough Cypress has built out [an excellent application](https://docs.cypress.io/guides/core-concepts/cypress-app) to help you understand what is happening in your application and your tests, there's no replacing all the amazing work browser teams have done on their built-in development tools. Once again, we see that Cypress goes _with_ the flow of the modern ecosystem, opting to leverage these tools wherever possible.\n\n### Get console logs for commands[​](#Get-console-logs-for-commands \"Direct link to Get console logs for commands\")\n\nAll of Cypress's commands, when clicked on within the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log), print extra information about the command, its subject, and its yielded result. Try clicking around the Command Log with your Developer Tools open! You may find some useful information here.\n\n#### When clicking on `.type()` command, the Developer Tools console outputs the following:[​](#When-clicking-on-type-command-the-Developer-Tools-console-outputs-the-following \"Direct link to When-clicking-on-type-command-the-Developer-Tools-console-outputs-the-following\")\n\n![Console Log type](https://docs.cypress.io/img/api/type/console-log-of-typing-with-entire-key-events-table-for-each-character.png)\n\n## Errors[​](#Errors \"Direct link to Errors\")\n\nSometimes tests fail. Sometimes we want them to fail, just so we know they're testing the right thing when they pass. But other times, tests fail unintentionally and we need to figure out why. Cypress provides some tools to help make that process as easy as possible.\n\n### Anatomy of an error[​](#Anatomy-of-an-error \"Direct link to Anatomy of an error\")\n\nLet's take a look at the anatomy of an error and how it is displayed in Cypress, by way of a failing test.\n\n```\nit('reroutes on users page', () => {  cy.contains('Users').click()  cy.url().should('include', 'users')})\n```\n\nThe center of the `<li>Users</li>` element is hidden from view in our application under test, so the test above will fail.\n\nCypress prints several pieces of information when an error occurs during a Cypress test.\n\n1.  **Error name**: This is the type of error (e.g. `AssertionError`, `CypressError`)\n2.  **Error message**: This generally tells you what went wrong. It can vary in length. Some are short like in the example, while some are long, and may tell you exactly how to fix the error.\n3.  **Learn more:** Some error messages contain a **Learn more** link that will take you to relevant Cypress documentation.\n4.  **Code frame file**: This is usually the top line of the stack trace and it shows the file, line number, and column number that is highlighted in the code frame below. Clicking on this link will open the file in your [preferred file opener](https://on.cypress.io/IDE-integration#File-Opener-Preference) and highlight the line and column in editors that support it.\n5.  **Code frame**: This shows a snippet of code where the failure occurred, with the relevant line and column highlighted.\n6.  **View stack trace**: Clicking this toggles the visibility of the stack trace. Stack traces vary in length. Clicking on a blue file path will open the file in your [preferred file opener](https://on.cypress.io/IDE-integration#File-Opener-Preference).\n7.  **Print to console button**: Click this to print the full error to your DevTools console. This will usually allow you to click on lines in the stack trace and open files in your DevTools.\n\n![example command failure error](https://docs.cypress.io/img/guides/core-concepts/cypress-app/command-failure-error.png)\n\n### Source maps[​](#Source-maps \"Direct link to Source maps\")\n\nCypress utilizes source maps to enhance the error experience. Stack traces are translated so that your source files are shown instead of the generated file that is loaded by the browser. This also enables displaying code frames. Without inline source maps, you will not see code frames.\n\nBy default, Cypress will include an inline source map in your spec file, so you will get the most out of the error experience. If you [modify the preprocessor](https://docs.cypress.io/api/plugins/preprocessors-api), ensure that inline source maps are enabled to get the same experience. With webpack and the [webpack preprocessor](https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor), for example, set [the `devtool` option](https://webpack.js.org/configuration/devtool/) to `inline-source-map`.\n\n## Debugging flake[​](#Debugging-flake \"Direct link to Debugging flake\")\n\nWhile Cypress is [flake-resistant](https://docs.cypress.io/guides/overview/key-differences#Flake-resistant), some users do experience flake, particularly when running in CI versus locally. Most often in cases of flaky tests, we see that there are not enough assertions surrounding test actions or network requests before moving on to the next assertion.\n\nIf there is any variation in the speed of the network requests or responses when run locally versus in CI, then there can be failures in one over the other.\n\nBecause of this, we recommend asserting on as many required steps as possible before moving forward with the test. This also helps later to isolate where the exact failure is when debugging.\n\nFlake can also occur when there are differences between your local and CI environments. You can use the following methods troubleshoot tests that pass locally but fail in CI.\n\n*   Review your CI build process to ensure nothing is changing with your application that would result in failing tests.\n*   Remove time-sensitive variability in your tests. For example, ensure a network request has finished before looking for the DOM element that relies on the data from that network request. You can leverage [aliasing](https://docs.cypress.io/guides/core-concepts/variables-and-aliases#Aliases) for this.\n\nCypress Cloud also offers [Analytics](https://docs.cypress.io/guides/cloud/analytics/overview) that illustrate trends in your tests and can help identify the tests that fail most often. This could help narrow down what is causing the flake -- for example, seeing increased failures after a change to the test environment could indicate issues with the new environment.\n\nFor more advice on dealing with flake read a [series of our blog posts](https://cypress.io/blog/tag/flake/) and [Identifying Code Smells in Cypress](https://codingitwrong.com/2020/10/09/identifying-code-smells-in-cypress.html) by [Cypress Ambassador](https://www.cypress.io/ambassadors/) Josh Justice.\n\n## Log Cypress events[​](#Log-Cypress-events \"Direct link to Log Cypress events\")\n\nCypress emits multiple events you can listen to as shown below. [Read more about logging events in the browser here](https://docs.cypress.io/api/cypress-api/catalog-of-events#Logging-All-Events).\n\n![console log events for debugging](https://docs.cypress.io/img/api/catalog-of-events/console-log-events-debug.png)\n\n## Troubleshooting Cypress[​](#Troubleshooting-Cypress \"Direct link to Troubleshooting Cypress\")\n\nThere are times when you will encounter errors or unexpected behavior with Cypress itself. In this situation, we recommend checking out our [Troubleshooting Guide](https://docs.cypress.io/guides/references/troubleshooting).\n\n## More info[​](#More-info \"Direct link to More info\")\n\nOften debugging a failing Cypress test means understanding better how your own application works, and how the application might race against the test commands. We recommend reading these blog posts where we show common error scenarios and how to solve them:\n\n*   [When Can The Test Start?](https://www.cypress.io/blog/2018/02/05/when-can-the-test-start/)\n*   [When Can The Test Stop?](https://www.cypress.io/blog/2020/01/16/when-can-the-test-stop/)\n*   [When Can The Test Click?](https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/)\n*   [When Can The Test Log Out?](https://www.cypress.io/blog/2020/06/25/when-can-the-test-log-out/)\n*   [Do Not Get Too Detached](https://www.cypress.io/blog/2020/07/22/do-not-get-too-detached/)",
  "title": "Debugging | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/environment-variables",
  "markdown": "# Environment Variables | Cypress Documentation\n\nEnvironment variables are useful when:\n\n*   Values are different across developer machines.\n*   Values are different across multiple environments: _(dev, staging, qa, prod)_\n*   Values change frequently and are highly dynamic.\n\nEnvironment variables can be changed easily - especially when running in CI.\n\n#### Instead of hard coding this in your tests:[​](#Instead-of-hard-coding-this-in-your-tests \"Direct link to Instead of hard coding this in your tests:\")\n\n```\ncy.request('https://api.acme.corp') // this will break on other environments\n```\n\n#### We can move this into a Cypress environment variable:[​](#We-can-move-this-into-a-Cypress-environment-variable \"Direct link to We can move this into a Cypress environment variable:\")\n\n```\ncy.request(Cypress.env('EXTERNAL_API')) // points to a dynamic env var\n```\n\ninfo\n\n**Using 'baseUrl'**\n\nEnvironment variables are great at pointing to external services and servers, or storing password or other credentials.\n\nHowever, you **do not** need to use environment variables to point to the origin and domain under test. Use `baseUrl` instead of environment variables.\n\n[`cy.visit()`](https://docs.cypress.io/api/commands/visit) and [`cy.request()`](https://docs.cypress.io/api/commands/request) are automatically prefixed with this value - avoiding the need to specify them.\n\n`baseUrl` can be set in the Cypress configuration file - and then you can set an environment variable in your OS to override it like shown below.\n\n```\nCYPRESS_BASE_URL=https://staging.app.com cypress run\n```\n\n## Setting[​](#Setting \"Direct link to Setting\")\n\nThere are different ways to set environment variables. Each has a slightly different use case.\n\n**_To summarize you can:_**\n\n*   [Set in your configuration file](#Option-1-configuration-file)\n*   [Create a `cypress.env.json`](#Option-2-cypressenvjson)\n*   [Export as `CYPRESS_*`](#Option-3-CYPRESS_)\n*   [Pass in the CLI as `--env`](#Option-4---env)\n*   [Set an environment variable within test configuration.](#Option-5-Test-Configuration)\n\nDon't feel obligated to pick just one method. It is common to use one strategy for local development but another when running in [CI](https://docs.cypress.io/guides/continuous-integration/introduction).\n\nWhen your tests are running, you can use the [`Cypress.env`](https://docs.cypress.io/api/cypress-api/env) function to access the values of your environment variables.\n\n### Option #1: configuration file[​](#Option-1-configuration-file \"Direct link to Option #1: configuration file\")\n\nAny key/value you set in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration) under the `env` key will become an environment variable.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  projectId: '128076ed-9868-4e98-9cef-98dd8b705d75',  env: {    login_url: '/login',    products_url: '/products',  },})\n```\n\n#### Test file[​](#Test-file \"Direct link to Test file\")\n\n```\nCypress.env() // {login_url: '/login', products_url: '/products'}Cypress.env('login_url') // '/login'Cypress.env('products_url') // '/products'\n```\n\n#### Overview[​](#Overview \"Direct link to Overview\")\n\ntip\n\n**Benefits**\n\n*   Great for values that need to be checked into source control and remain the same on all machines.\n\ndanger\n\n**Downsides**\n\n*   Only works for values that should be the same on across all machines.\n\n### Option #2: `cypress.env.json`[​](#Option-2-cypressenvjson \"Direct link to Option-2-cypressenvjson\")\n\nYou can create your own `cypress.env.json` file that Cypress will automatically check. Values in here will overwrite conflicting environment variables in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n\nThis strategy is useful because if you add `cypress.env.json` to your `.gitignore` file, the values in here can be different for each developer machine.\n\n```\n{  \"host\": \"veronica.dev.local\",  \"api_server\": \"http://localhost:8888/api/v1/\"}\n```\n\n#### From test file[​](#From-test-file \"Direct link to From test file\")\n\n```\nCypress.env() // {host: 'veronica.dev.local', api_server: 'http://localhost:8888/api/v1'}Cypress.env('host') // 'veronica.dev.local'Cypress.env('api_server') // 'http://localhost:8888/api/v1/'\n```\n\n#### An Overview[​](#An-Overview \"Direct link to An Overview\")\n\ntip\n\n**Benefits**\n\n*   Dedicated file just for environment variables.\n*   Enables you to generate this file from other build processes.\n*   Values can be different on each machine (if not checked into source control).\n*   Supports nested fields (objects), e.g. `{ testUser: { name: '...', email: '...' } }`.\n\ndanger\n\n**Downsides**\n\n*   Another file you have to deal with.\n*   Overkill for 1 or 2 environment variables.\n\n### Option #3: `CYPRESS_*`[​](#Option-3-CYPRESS_ \"Direct link to Option-3-CYPRESS_\")\n\nAny exported environment variables set on the command line or in your CI provider that start with either `CYPRESS_` or `cypress_` will automatically be parsed by Cypress.\n\ndanger\n\nThe environment variable `CYPRESS_INTERNAL_ENV` is reserved and should not be set.\n\n#### Overriding configuration options[​](#Overriding-configuration-options \"Direct link to Overriding configuration options\")\n\nEnvironment variables that match a corresponding configuration option will override any value set in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n\ninfo\n\nCypress automatically normalizes both the key and the value. The leading `CYPRESS_` or `cypress_` is removed and the remaining name is camelCased, while values are converted to `Number` or `Boolean` wherever possible.\n\nFor example, these enviroment variables in the command line will override any `viewportWidth` or `viewportHeight` options set in the Cypress configuration:\n\n```\nexport CYPRESS_VIEWPORT_WIDTH=800export CYPRESS_VIEWPORT_HEIGHT=600\n```\n\n#### Overriding environment variables[​](#Overriding-environment-variables \"Direct link to Overriding environment variables\")\n\nEnvironment variables that do not match configuration options will be set as environment variables for use in tests with [`Cypress.env()`](https://docs.cypress.io/api/cypress-api/env), and will override any existing values in the Cypress configuration `env` object and `cypress.env.json` files.\n\ninfo\n\nCypress automatically removes the leading `CYPRESS_` or `cypress_` from any environment variable name specified in this way.\n\nFor example, these environment variables in the command line:\n\n```\nexport CYPRESS_HOST=laura.dev.localexport cypress_api_server=http://localhost:8888/api/v1/\n```\n\nWill yield these results inside a test file:\n\n```\nCypress.env() // {HOST: 'laura.dev.local', api_server: 'http://localhost:8888/api/v1'}Cypress.env('HOST') // 'laura.dev.local'Cypress.env('api_server') // 'http://localhost:8888/api/v1/'\n```\n\n#### Overview:[​](#Overview-1 \"Direct link to Overview:\")\n\ntip\n\n**Benefits**\n\n*   Quickly export some values.\n*   Can be stored in your `bash_profile`.\n*   Allows for dynamic values between different machines.\n*   Especially useful for CI environments.\n\ndanger\n\n**Downsides**\n\n*   Not as obvious where values come from versus the other options.\n*   No support for nested fields.\n\n### Option #4: `--env`[​](#Option-4---env \"Direct link to Option-4---env\")\n\nYou can pass in environment variables as options when [using the CLI tool](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\nValues here will overwrite all other conflicting environment variables.\n\nYou can use the `--env` argument for [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\ncaution\n\nMultiple values must be separated by a comma, not a space. In some shells, like Windows PowerShell, you may need to surround the key/value pair with quotes: `--env \"cyuser=dummyUser,cypassword=dummyPassword\"`.\n\n#### From the command line or CI[​](#From-the-command-line-or-CI \"Direct link to From the command line or CI\")\n\n```\ncypress run --env host=kevin.dev.local,api_server=http://localhost:8888/api/v1\n```\n\n#### Test file:[​](#Test-file-1 \"Direct link to Test file:\")\n\n```\nCypress.env() // {host: 'kevin.dev.local', api_server: 'http://localhost:8888/api/v1'}Cypress.env('host') // 'kevin.dev.local'Cypress.env('api_server') // 'http://localhost:8888/api/v1/'\n```\n\n#### Overview -[​](#Overview-- \"Direct link to Overview -\")\n\ntip\n\n**Benefits**\n\n*   Does not require any changes to files or configuration.\n*   More clear where environment variables come from.\n*   Allows for dynamic values between different machines.\n*   Overwrites all other forms of setting env variables.\n\ndanger\n\n**Downsides**\n\n*   Pain to write the `--env` options everywhere you use Cypress.\n*   No support for nested fields.\n\n### Option #5: Test Configuration[​](#Option-5-Test-Configuration \"Direct link to Option #5: Test Configuration\")\n\nYou can set environment variables for specific suites or tests by passing the `env` values to the [test configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration).\n\n#### Suite of test configuration[​](#Suite-of-test-configuration \"Direct link to Suite of test configuration\")\n\n*   End-to-End Test\n*   Component Test\n\n```\n// change environment variable for single suite of testsdescribe(  'test against Spanish content',  {    env: {      language: 'es',    },  },  () => {    it('displays Spanish', () => {      cy.visit(`https://docs.cypress.io/${Cypress.env('language')}/`)      cy.contains('¿Por qué Cypress?')    })  })\n```\n\n#### Single test configuration[​](#Single-test-configuration \"Direct link to Single test configuration\")\n\n```\n// change environment variable for single testit(  'smoke test develop api',  {    env: {      api: 'https://dev.myapi.com',    },  },  () => {    cy.request(Cypress.env('api')).its('status').should('eq', 200)  })// change environment variable for single testit(  'smoke test staging api',  {    env: {      api: 'https://staging.myapi.com',    },  },  () => {    cy.request(Cypress.env('api')).its('status').should('eq', 200)  })\n```\n\n#### Overview[​](#Overview-2 \"Direct link to Overview\")\n\ntip\n\n**Benefits**\n\n*   Only takes effect for duration of suite or test.\n*   More clear where environment variables come from.\n*   Allows for dynamic values between tests\n\n## Overriding Configuration[​](#Overriding-Configuration \"Direct link to Overriding Configuration\")\n\nIf your environment variables match a standard configuration key, then instead of setting an `environment variable` they will instead override the configuration value.\n\n**Change the `baseUrl` configuration value / not set env var in `Cypress.env()`**\n\n```\nexport CYPRESS_BASE_URL=http://localhost:8080\n```\n\n**'foo' does not match config / sets env var in `Cypress.env()`**\n\nYou can [read more about how environment variables can change configuration here](https://docs.cypress.io/guides/references/configuration).\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Cypress.env()](https://docs.cypress.io/api/cypress-api/env)\n*   [Configuration API](https://docs.cypress.io/api/plugins/configuration-api)\n*   [Environment Variables recipe](https://docs.cypress.io/examples/recipes#Fundamentals)\n*   [Test Configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration)\n*   [Pass environment variables: tips and tricks](https://glebbahmutov.com/blog/cypress-tips-and-tricks/#pass-the-environment-variables-correctly)\n*   [Keep passwords secret in E2E tests](https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests/)",
  "title": "Environment Variables | Cypress Documentation",
  "description": "Difference between OS-level and Cypress environment variables",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/cypress-studio",
  "markdown": "# Cypress Studio | Cypress Documentation\n\ncaution\n\n**Experimental**\n\nCypress Studio is an experimental feature and can be enabled by adding the [experimentalStudio](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing) attribute to your Cypress configuration.\n\n```\n{  e2e: {    experimentalStudio: true  }}\n```\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to extend tests interactively using the Cypress Studio\n*   How to add new tests interactively using the Cypress Studio\n\n## Limitations[​](#Limitations \"Direct link to Limitations\")\n\n*   Cypress Studio is currently only available for writing E2E tests, and doesn't yet work with Component Testing.\n*   Cypress Studio does not support writing tests that use domains of multiple origins.\n\n## Overview[​](#Overview \"Direct link to Overview\")\n\nCypress Studio provides a visual way to generate tests within Cypress, by _recording interactions_ against the application under test.\n\nThe [`.click()`](https://docs.cypress.io/api/commands/click), [`.type()`](https://docs.cypress.io/api/commands/type), [`.check()`](https://docs.cypress.io/api/commands/check), [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck), and [`.select()`](https://docs.cypress.io/api/commands/select) Cypress commands are supported and will generate test code when interacting with the DOM inside of the Cypress Studio. You can also generate assertions by right clicking on an element that you would like to assert on.\n\nThe Cypress [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) is an open source project implementing a payment application to demonstrate real-world usage of Cypress testing methods, patterns, and workflows. It will be used to demonstrate the functionality of Cypress Studio below.\n\n### Extending a Test[​](#Extending-a-Test \"Direct link to Extending a Test\")\n\nYou can extend any preexisting test or start by creating a new test with the following test scaffolding.\n\n```\n// Code from Real World App (RWA)describe('Cypress Studio Demo', () => {  beforeEach(() => {    // Seed database with test data    cy.task('db:seed')    // Login test user    cy.database('find', 'users').then((user) => {      cy.login(user.username, 's3cret', true)    })  })  it('create new transaction', () => {    // Extend test with Cypress Studio  })})\n```\n\n#### Step 1 - Run the spec[​](#Step-1---Run-the-spec \"Direct link to Step 1 - Run the spec\")\n\nWe will use Cypress Studio to perform a \"New Transaction\" user journey. First, launch Cypress and select End To End testing, then choose a browser to run specs in.\n\n![Cypress Studio](https://docs.cypress.io/img/guides/cypress-studio/run-spec-1.png)\n\nOnce the browser is open, run the spec created in the previous step.\n\n#### Step 2 - Launch Cypress Studio[​](#Step-2---Launch-Cypress-Studio \"Direct link to Step 2 - Launch Cypress Studio\")\n\nOnce the tests complete their run, hover over a test in the Command Log to reveal an \"Add Commands to Test\" button.\n\nClicking on \"Add Commands to Test\" will launch the Cypress Studio.\n\ninfo\n\nCypress Studio is directly integrated with the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log).\n\n![Activate Cypress Studio](https://docs.cypress.io/img/guides/cypress-studio/extend-activate-studio.png)\n\ntip\n\nCypress will automatically execute all hooks and currently present test code, and then the test can be extended from that point on (e.g. We are logged into the application inside the `beforeEach` block).\n\nNext, Cypress will execute the test in isolation and pause after the last command in the test.\n\n![Cypress Studio Ready](https://docs.cypress.io/img/guides/cypress-studio/extend-ready.png)\n\nNow, we can begin updating the test to create a new transaction between users.\n\n#### Step 3 - Interact with the Application[​](#Step-3---Interact-with-the-Application \"Direct link to Step 3 - Interact with the Application\")\n\nTo record actions, begin interacting with the application. Here we will click on the \"New\" button on the right side of the header and as a result we will see our click recorded in the Command Log.\n\n![Cypress Studio Recording Click](https://docs.cypress.io/img/guides/cypress-studio/extend-click-new-transaction.png)\n\nNext, we can start typing in the name of a user that we want to pay.\n\n![Cypress Studio Recording Type](https://docs.cypress.io/img/guides/cypress-studio/extend-type-user-name.png)\n\nOnce we see the name come up in the results, we want to add an assertion to ensure that our search function works correctly. Right clicking on the user's name will bring up a menu from which we can add an assertion to check that the element contains the correct text (the user's name).\n\n![Cypress Studio Add Assertion](https://docs.cypress.io/img/guides/cypress-studio/extend-assert-user-name.png)\n\nWe can then click on that user in order to progress to the next screen. We will complete the transaction form by clicking on and typing in the amount and description inputs.\n\n![Cypress Studio Recording Type](https://docs.cypress.io/img/guides/cypress-studio/extend-type-transaction-form.png)\n\ntip\n\nNotice the commands generated in the Command Log.\n\nNow it's time to complete the transaction. You might have noticed that the \"Pay\" button was disabled before we typed into the inputs. To make sure that our form validation works properly, let's add an assertion to make sure the \"Pay\" button is enabled.\n\n![Cypress Studio Add Assertion](https://docs.cypress.io/img/guides/cypress-studio/extend-assert-button-enabled.png)\n\nFinally, we will click the \"Pay\" button and get presented with a confirmation page of our new transaction.\n\n![Cypress Studio Save Commands](https://docs.cypress.io/img/guides/cypress-studio/extend-save-test.png)\n\nTo discard the interactions, click the \"Cancel\" button to exit Cypress Studio. If satisfied with the interactions with the application, click \"Save Commands\" and the test code will be saved to your spec file. Alternatively you can choose the \"copy\" button in order to copy the generated commands to your clipboard.\n\n#### Generated Test Code[​](#Generated-Test-Code \"Direct link to Generated Test Code\")\n\nViewing our test code, we can see that the test is updated after clicking \"Save Commands\" with the actions we recorded in Cypress Studio.\n\n```\n// Code from Real World App (RWA)describe('Cypress Studio Demo', () => {  beforeEach(() => {    // Seed database with test data    cy.task('db:seed')    // Login test user    cy.database('find', 'users').then((user) => {      cy.login(user.username, 's3cret', true)    })  })  it('create new transaction', () => {    /* ==== Generated with Cypress Studio ==== */    cy.get('[data-test=nav-top-new-transaction]').click()    cy.get('[data-test=user-list-search-input]').clear()    cy.get('[data-test=user-list-search-input]').type('dev')    cy.get(      '[data-test=user-list-item-tsHF6_D5oQ] > .MuiListItemText-root > .MuiListItemText-primary'    ).should('have.text', 'Devon Becker')    cy.get('[data-test=user-list-item-tsHF6_D5oQ]').click()    cy.get('#amount').clear()    cy.get('#amount').type('$25')    cy.get('#transaction-create-description-input').clear()    cy.get('#transaction-create-description-input').type('Sushi dinner')    cy.get('[data-test=transaction-create-submit-payment]').should('be.enabled')    cy.get('[data-test=transaction-create-submit-payment]').click()    /* ==== End Cypress Studio ==== */  })})\n```\n\nThe selectors are generated according to the [`Cypress.SelectorPlayground` selector priority](https://docs.cypress.io/api/cypress-api/selector-playground-api#Default-Selector-Priority).\n\n### Adding a New Test[​](#Adding-a-New-Test \"Direct link to Adding a New Test\")\n\nYou can add a new test to any existing `describe` or `context` block, by clicking \"Add New Test\" on our defined `describe` block.\n\n![Cypress Studio Add Test](https://docs.cypress.io/img/guides/cypress-studio/add-test-1.png)\n\nWe are launched into Cypress Studio and can begin interacting with our application to generate the test.\n\nFor this test, we will add a new bank account. Our interactions are as follows:\n\n1.  Click \"Bank Accounts\" in left hand navigation\n    \n    ![Cypress Studio Begin Add Test](https://docs.cypress.io/img/guides/cypress-studio/add-test-2.png)\n    \n2.  Click the \"Create\" button on Bank Accounts page\n    \n    ![Cypress Studio Add Test Create Bank Account](https://docs.cypress.io/img/guides/cypress-studio/add-test-create.png)\n    \n3.  Fill out the bank account information\n    \n    ![Cypress Studio Add Test Complete Bank Account Form](https://docs.cypress.io/img/guides/cypress-studio/add-test-form-complete.png)\n    \n4.  Click the \"Save\" button\n    \n    ![Cypress Studio Add Test Save Bank Account](https://docs.cypress.io/img/guides/cypress-studio/add-test-form-save.png)\n    \n\nTo discard the interactions, click the \"Cancel\" button to exit Cypress Studio.\n\nIf satisfied with the interactions with the application, click \"Save Commands\" and prompt will ask for the name of the test. Click \"Save Test\" and the test will be saved to the file.\n\n![Cypress Studio Add Test Completed Run](https://docs.cypress.io/img/guides/cypress-studio/add-test-save-test.png)\n\nOnce saved, the file will be run again in Cypress.\n\n![Cypress Studio Add Test Completed Run](https://docs.cypress.io/img/guides/cypress-studio/add-test-final.png)\n\nFinally, viewing our test code, we can see that the test is updated after clicking \"Save Commands\" with the actions we recorded in Cypress Studio.\n\n```\n// Code from Real World App (RWA)import { User } from 'models'describe('Cypress Studio Demo', () => {  beforeEach(() => {    cy.task('db:seed')    cy.database('find', 'users').then((user: User) => {      cy.login(user.username, 's3cret', true)    })  })  it('create new transaction', () => {    // Extend test with Cypress Studio  })  /* === Test Created with Cypress Studio === */  it('create bank account', function () {    /* ==== Generated with Cypress Studio ==== */    cy.get('[data-test=sidenav-bankaccounts]').click()    cy.get('[data-test=bankaccount-new] > .MuiButton-label').click()    cy.get('#bankaccount-bankName-input').click()    cy.get('#bankaccount-bankName-input').type('Test Bank Account')    cy.get('#bankaccount-routingNumber-input').click()    cy.get('#bankaccount-routingNumber-input').type('987654321')    cy.get('#bankaccount-accountNumber-input').click()    cy.get('#bankaccount-accountNumber-input').type('123456789')    cy.get('[data-test=bankaccount-submit] > .MuiButton-label').click()    /* ==== End Cypress Studio ==== */  })})\n```\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [10.7.0](https://docs.cypress.io/guides/references/changelog#10-7-0) | Re-introduced Cypress Studio into version 10 |\n| [8.1.0](https://docs.cypress.io/guides/references/changelog#8-1-0) | Added ability to generate assertions |\n| [6.3.0](https://docs.cypress.io/guides/references/changelog#6-3-0) | Added Cypress Studio as experimental |",
  "title": "Cypress Studio | Cypress Documentation",
  "description": "Experimental",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/launching-browsers",
  "markdown": "# Launching Browsers | Cypress Documentation\n\nWhen you run tests in Cypress, we launch a browser for you. This enables us to:\n\n1.  Create a clean, pristine testing environment.\n2.  Access the privileged browser APIs for automation.\n\ninfo\n\n**Cross Browser Support**\n\nCypress currently supports Firefox and Chrome-family browsers (including Edge and Electron). To run tests optimally across these browsers in CI, check out the strategies demonstrated in the [cross browser Testing](https://docs.cypress.io/guides/guides/cross-browser-testing) guide.\n\nWhen Cypress is initially launched, you can choose to test your application using number of browsers including:\n\n*   [Chrome](https://www.google.com/chrome/)\n*   [Chrome Beta](https://www.google.com/chrome/beta/)\n*   [Chrome Canary](https://www.google.com/chrome/canary/)\n*   [Chromium](https://www.chromium.org/Home)\n*   [Edge](https://www.microsoft.com/edge)\n*   [Edge Beta](https://www.microsoftedgeinsider.com/download)\n*   [Edge Canary](https://www.microsoftedgeinsider.com/download)\n*   [Edge Dev](https://www.microsoftedgeinsider.com/download)\n*   [Electron](https://electron.atom.io/)\n*   [Firefox](https://www.mozilla.org/firefox/)\n*   [Firefox Developer Edition](https://www.mozilla.org/firefox/developer/)\n*   [Firefox Nightly](https://www.mozilla.org/firefox/nightly/)\n*   [WebKit (Experimental)](#WebKit-Experimental)\n\nCypress automatically detects available browsers on your OS. You can switch the browser by using the drop down near the top right corner:\n\n![Select a different browser](https://docs.cypress.io/img/guides/launching-browsers/v10/browser-list-dropdown.png)\n\n### Browser versions supported[​](#Browser-versions-supported \"Direct link to Browser versions supported\")\n\nCypress supports the browser versions below:\n\n*   Chrome 80 and above.\n*   Edge 80 and above.\n*   Firefox 86 and above.\n\n### Download specific Chrome version[​](#Download-specific-Chrome-version \"Direct link to Download specific Chrome version\")\n\nThe Chrome browser is evergreen - meaning it will automatically update itself, sometimes causing a breaking change in your automated tests. You can use [https://vikyd.github.io/download-chromium-history-version](https://vikyd.github.io/download-chromium-history-version) to download a specific released version of Chromium for every platform.\n\n### Electron Browser[​](#Electron-Browser \"Direct link to Electron Browser\")\n\nIn addition to the browsers found on your system, you'll notice that Electron is an available browser. The Electron browser is a version of Chromium that comes with [Electron](https://electron.atom.io/).\n\nThe Electron browser has the advantage of coming baked into Cypress and does not need to be installed separately.\n\nBy default, when running [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) from the CLI, we will launch all browsers headlessly.\n\n#### You can also launch Electron headed:[​](#You-can-also-launch-Electron-headed \"Direct link to You can also launch Electron headed:\")\n\nBecause Electron is the default browser - it is typically run in CI. If you are seeing failures in CI, to easily debug them you may want to run locally with the `--headed` option.\n\n### Chrome Browsers[​](#Chrome-Browsers \"Direct link to Chrome Browsers\")\n\nAll Chrome\\* flavored browsers will be detected and are supported above Chrome 64.\n\nYou can launch Chrome like this:\n\n```\ncypress run --browser chrome\n```\n\nTo use this command in CI, you need to install the browser you want - or use one of our [docker images](https://docs.cypress.io/examples/docker).\n\nBy default, we will launch Chrome in headlessly during `cypress run`. To run Chrome headed, you can pass the `--headed` argument to `cypress run`.\n\nYou can also launch Chromium:\n\n```\ncypress run --browser chromium\n```\n\nOr Chrome Beta:\n\n```\ncypress run --browser chrome:beta\n```\n\nOr Chrome Canary:\n\n```\ncypress run --browser chrome:canary\n```\n\n### Edge Browsers[​](#Edge-Browsers \"Direct link to Edge Browsers\")\n\nMicrosoft Edge-family (Chromium-based) browsers are supported by Cypress.\n\nYou can launch Microsoft Edge like this:\n\n```\ncypress run --browser edge\n```\n\nOr Microsoft Edge Beta:\n\n```\ncypress run --browser edge:beta\n```\n\nOr Microsoft Edge Canary:\n\n```\ncypress run --browser edge:canary\n```\n\nOr Microsoft Edge Dev:\n\n```\ncypress run --browser edge:dev\n```\n\n### Firefox Browsers[​](#Firefox-Browsers \"Direct link to Firefox Browsers\")\n\nFirefox-family browsers are supported by Cypress.\n\nYou can launch Firefox like this:\n\n```\ncypress run --browser firefox\n```\n\nOr Firefox Developer/Nightly Edition:\n\n```\ncypress run --browser firefox:devcypress run --browser firefox:nightly\n```\n\nTo use this command in CI, you need to install these other browsers - or use one of our [docker images](https://docs.cypress.io/examples/docker).\n\nBy default, we will launch Firefox headlessly during `cypress run`. To run Firefox headed, you can pass the `--headed` argument to `cypress run`.\n\n### WebKit (Experimental)[​](#WebKit-Experimental \"Direct link to WebKit (Experimental)\")\n\nCypress has [experimental](https://docs.cypress.io/guides/references/experiments) support for WebKit, Safari's browser engine. Testing your app with WebKit is representative of how your app would run in Safari. To opt-in to `experimentalWebKitSupport`, follow these steps:\n\n1.  Add `experimentalWebKitSupport: true` to your [configuration](https://docs.cypress.io/guides/references/configuration) to enable the experiment.\n2.  Install the `playwright-webkit` npm package in your repo to acquire WebKit itself: `npm install [[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection) --save-dev`.\n    *   We built this experiment on top of the Playwright WebKit browser as a stepping stone towards creating a better UX with Cypress-provided browsers in the future. Thank you, Playwright contributors.\n3.  Now, you should be able to use WebKit like any other browser. For example, to record with WebKit in CI:\n    \n    ```\n    cypress run --browser webkit --record # ...\n    ```\n    \n\nWebKit support is _experimental_, so you may encounter issues. If you encounter an issue not on the \"Known Issues\" list, please [open an issue](https://github.com/cypress-io/cypress/issues/new/choose) on the GitHub repository.\n\n#### Known Issues with `experimentalWebKitSupport`[​](#Known-Issues-with-experimentalWebKitSupport \"Direct link to Known-Issues-with-experimentalWebKitSupport\")\n\n*   `cy.origin()` is not yet supported.\n*   `cy.intercept()`'s `forceNetworkError` option is disabled.\n*   When using `experimentalSingleTabRunMode` with video recording in WebKit, only the video for the first spec is recorded.\n*   Some differences in `cy.type()` behavior:\n    *   `textInput` events are missing the `data` property\n    *   `beforeinput` events are missing the `inputType` property\n    *   `cy.type('{uparrow}')` and `cy.type('{downarrow}')` on an `input[type=number]` do not round to the nearest `step` specified\n*   Stack traces may be missing some function names and location information.\n*   See issues labeled [`experiment: webkit`](https://github.com/cypress-io/cypress/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22experiment%3A+webkit%22) for a complete list.\n\n#### Linux Dependencies[​](#Linux-Dependencies \"Direct link to Linux Dependencies\")\n\nWebKit requires additional dependencies to run on Linux. To install the required dependencies, run this:\n\n```\nnpx playwright install-deps webkit\n```\n\n### Launching by a path[​](#Launching-by-a-path \"Direct link to Launching by a path\")\n\nYou can launch any supported browser by specifying a path to the binary:\n\n```\ncypress run --browser /usr/bin/chromium\n```\n\n```\ncypress open --browser /usr/bin/chromium\n```\n\nCypress will automatically detect the type of browser supplied and launch it for you.\n\n[See the Command Line guide for more information about the `--browser` arguments](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt)\n\n[Having trouble launching a browser? Check out our troubleshooting guide](https://docs.cypress.io/guides/references/troubleshooting#Launching-browsers)\n\n### Customize available browsers[​](#Customize-available-browsers \"Direct link to Customize available browsers\")\n\nSometimes you might want to modify the list of browsers found before running tests.\n\nFor example, your web application might _only_ be designed to work in a Chrome browser, and not inside the Electron browser.\n\nIn the [setupNodeEvents](https://docs.cypress.io/api/plugins/configuration-api) function, you can filter the list of browsers passed inside the `config` object and return the list of browsers you want available for selection during `cypress open`.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      // inside config.browsers array each object has information like      // {      //   name: 'chrome',      //   channel: 'canary',      //   family: 'chromium',      //   displayName: 'Canary',      //   version: '80.0.3966.0',      //   path:      //    '/Applications/Canary.app/Contents/MacOS/Canary',      //   majorVersion: 80      // }      return {        browsers: config.browsers.filter(          (b) => b.family === 'chromium' && b.name !== 'electron'        ),      }    },  },})\n```\n\nWhen you open Cypress in a project that uses the above modifications to the `setupNodeEvents` function, Electron will no longer display in the list of available browsers.\n\ninfo\n\nIf you return an empty list of browsers or `browsers: null`, the default list will be restored automatically.\n\nIf you have installed a Chromium-based browser like [Brave](https://brave.com/), [Vivaldi](https://vivaldi.com/) you can add them to the list of returned browsers. Here is a configuration that inserts a local Brave browser into the returned list.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const execa = require('execa')const findBrowser = () => {  // the path is hard-coded for simplicity  const browserPath =    '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'  return execa(browserPath, ['--version']).then((result) => {    // STDOUT will be like \"Brave Browser 77.0.69.135\"    const [, version] = /Brave Browser (\\d+\\.\\d+\\.\\d+\\.\\d+)/.exec(result.stdout)    const majorVersion = parseInt(version.split('.')[0])    return {      name: 'Brave',      channel: 'stable',      family: 'chromium',      displayName: 'Brave',      version,      path: browserPath,      majorVersion,    }  })}module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      return findBrowser().then((browser) => {        return {          browsers: config.browsers.concat(browser),        }      })    },  },})\n```\n\nOnce selected, the Brave browser is detected using the same approach as any other browser of the `chromium` family.\n\n![Brave browser executing end-to-end tests](https://docs.cypress.io/img/guides/launching-browsers/v10/brave-running-tests.png)\n\nIf you modify the list of browsers, you can see the [resolved configuration](https://docs.cypress.io/guides/references/configuration#Resolved-Configuration) in the **Settings** tab.\n\n### Unsupported Browsers[​](#Unsupported-Browsers \"Direct link to Unsupported Browsers\")\n\nSome browsers such as Safari and Internet Explorer are not currently supported. Support for more browsers is on our roadmap.\n\n## Browser Environment[​](#Browser-Environment \"Direct link to Browser Environment\")\n\nCypress launches the browser in a way that's different from a regular browser environment. But it launches in a way that we believe makes testing _more reliable_ and _accessible_.\n\n### Launching Browsers[​](#Launching-Browsers \"Direct link to Launching Browsers\")\n\nWhen Cypress goes to launch your browser it will give you an opportunity to modify the arguments used to launch the browser.\n\nThis enables you to do things like:\n\n*   Load your own extension\n*   Enable or disable experimental features\n\n[This part of the API is documented here.](https://docs.cypress.io/api/plugins/browser-launch-api)\n\n### Cypress Profile[​](#Cypress-Profile \"Direct link to Cypress Profile\")\n\nCypress generates its own isolated profile apart from your normal browser profile. This means things like `history` entries, `cookies`, and `3rd party extensions` from your regular browsing session will not affect your tests in Cypress.\n\ncaution\n\n**Wait, I need my developer extensions!**\n\nThat's no problem - you have to reinstall them **once** in the Cypress launched browser. We'll continue to use this Cypress testing profile on subsequent launches so all of your configuration will be preserved.\n\nAny extra tabs (i.e. tabs other than the one opened by Cypress) will be closed between tests. We recommend using your own browser instead of the one launched by Cypress for general-purpose browsing.\n\n### Disabled Barriers[​](#Disabled-Barriers \"Direct link to Disabled Barriers\")\n\nCypress automatically disables certain functionality in the Cypress launched browser that tend to get in the way of automated testing.\n\n#### The Cypress launched browser automatically:[​](#The-Cypress-launched-browser-automatically \"Direct link to The Cypress launched browser automatically:\")\n\n*   Ignores certificate errors.\n*   Allows blocked pop-ups.\n*   Disables 'Saving passwords'.\n*   Disables 'Autofill forms and passwords'.\n*   Disables asking to become your primary browser.\n*   Disables device discovery notifications.\n*   Disables language translations.\n*   Disables restoring sessions.\n*   Disables background network traffic.\n*   Disables background and renderer throttling.\n*   Disables prompts requesting permission to use devices like cameras or mics\n*   Disables user gesture requirements for autoplaying videos.\n\nYou can see all of the default chrome command line switches we send [here](https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/browsers/chrome.ts#L36).\n\n## Browser Icon[​](#Browser-Icon \"Direct link to Browser Icon\")\n\nYou might notice that if you already have the browser open you will see two of the same browser icons in your dock.\n\n![Cypress icon with 2 Google Chrome icons](https://docs.cypress.io/img/guides/launching-browsers/v10/multiple-chrome-icons.png)\n\nWe understand that when Cypress is running in its own profile it can be difficult to tell the difference between your normal browser and Cypress.\n\nFor this reason you may find downloading and using a browser's release channel versions (Dev, Canary, etc) useful. These browsers have different icons from the standard stable browser, making them more distinguishable. You can also use the bundled [Electron browser](#Electron-Browser), which does not have a dock icon.\n\nAdditionally, in Chrome-based browsers, we've made the browser spawned by Cypress look different than regular sessions. You'll see a darker theme around the chrome of the browser. You'll always be able to visually distinguish these.\n\n![Cypress Browser with darker chrome](https://docs.cypress.io/img/guides/launching-browsers/v10/cypress-browser-chrome.png)\n\n## Troubleshooting[​](#Troubleshooting \"Direct link to Troubleshooting\")\n\n[Having issues launching installed browsers? Read more about troubleshooting browser launching](https://docs.cypress.io/guides/references/troubleshooting#Launching-browsers)\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Browser Launch API](https://docs.cypress.io/api/plugins/browser-launch-api)\n*   [Cross browser Testing](https://docs.cypress.io/guides/guides/cross-browser-testing)",
  "title": "Launching Browsers | Cypress Documentation",
  "description": "When you run tests in Cypress, we launch a browser for you. This enables us to:",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/end-to-end-testing/auth0-authentication",
  "markdown": "# Auth0 Integration: Cypress Auth | Cypress Documentation\n\n## Auth0 Authentication\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   Log in to [Auth0](https://auth0.com/) through the UI with [`cy.origin()`](https://docs.cypress.io/api/commands/origin)\n*   Programmatically authenticate with [Auth0](https://auth0.com/) via a custom Cypress command\n*   Adapt your [Auth0](https://auth0.com/) application for programmatic authentication during testing\n\ncaution\n\nThis guide is setup for testing against an [Auth0](https://auth0.com/) Single Page Application using the [Classic Universal Login Experience](https://auth0.com/docs/universal-login/classic). This configuration is recommended for a \"Test Tenant\" and/or \"Test API\" setup for automated end-to-end testing.\n\ntip\n\n**Authenticate by visiting a different domain with [`cy.origin()`](https://docs.cypress.io/api/commands/origin)**\n\nTypically, logging in a user within your app by authenticating via a third-party provider requires visiting a login page hosted on a different domain. Before Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), Cypress tests were limited to visiting domains of the same origin, making programmatic login the only option for authenticating users with a third-party API. As of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), Cypress tests are no longer limited to visiting domains of a single origin, meaning you can easily authenticate with [Auth0](https://auth0.com/) via the UI!\n\n## Auth0 Application Setup[​](#Auth0-Application-Setup \"Direct link to Auth0 Application Setup\")\n\nTo get started with Auth0, an application needs to be setup within the [Auth0 Dashboard](https://auth0.com/docs/get-started/auth0-overview/dashboard) via the following steps:\n\n1.  Visit the [Auth0 Dashboard](https://auth0.com/docs/get-started/auth0-overview/dashboard) and click the \"Create Application\" button.\n2.  Enter the desired name for your application.\n3.  Select \"Single Page Application\"\n\nOnce your application is created, visit the [Application Settings](https://auth0.com/docs/dashboard/reference/settings-application) tab under your application, and add your local development URL and port (e.g `http://localhost:3000`) under the following sections:\n\n*   Allowed Callback URLs\n*   Allowed Logout URLs\n*   Allowed Web Origins\n*   Allowed Origins (CORS)\n\nIn the bottom of [Application Settings](https://auth0.com/docs/dashboard/reference/settings-application), click [Show Advanced Settings](https://auth0.com/docs/dashboard/reference/settings-application#advanced-settings), select \"Grant Types\" tab and check \"Password\" (unchecked by default).\n\nNext, click your Tenant icon (upper right avatar menu) to go to your [Tenant Settings](https://auth0.com/docs/get-started/tenant-settings). On the [General](https://auth0.com/docs/dashboard/reference/settings-tenant#general) tab go to the [API Authorization Settings](https://auth0.com/docs/dashboard/reference/settings-tenant#api-authorization-settings)\n\n*   Set \"Default Audience\" to the Audience URL for the Application you are testing (e.g. `https://your-api-id.auth0.com/api/v2/`)\n*   Set \"Default Directory\" to **\"Username-Password-Authentication\"**\n\nFinally, create a user in the [Auth0 User Store](https://auth0.com/docs/connections/database#using-the-auth0-user-store) for testing with Cypress. This testing-dedicated target user will be login to your application within your test specs. If required for your testing purposes, you can make as many users needed to test your specific application.\n\n## Setting Auth0 app credentials in Cypress[​](#Setting-Auth0-app-credentials-in-Cypress \"Direct link to Setting Auth0 app credentials in Cypress\")\n\nTo have access to test user credentials within our tests we need to configure Cypress to use the [Auth0](https://auth0.com/) environment variables set in the `.env` file.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')// Populate process.env with values from .env filerequire('dotenv').config()module.exports = defineConfig({  env: {    auth0_username: process.env.AUTH0_USERNAME,    auth0_password: process.env.AUTH0_PASSWORD,    auth0_domain: process.env.REACT_APP_AUTH0_DOMAIN,    auth0_audience: process.env.REACT_APP_AUTH0_AUDIENCE,    auth0_scope: process.env.REACT_APP_AUTH0_SCOPE,    auth0_client_id: process.env.REACT_APP_AUTH0_CLIENTID,    auth0_client_secret: process.env.AUTH0_CLIENT_SECRET,  },})\n```\n\nNote that `auth0_client_secret` is only needed for [programmatic login](#Programmatic-Login).\n\n## Custom Command for Auth0 Authentication[​](#Custom-Command-for-Auth0-Authentication \"Direct link to Custom Command for Auth0 Authentication\")\n\nThere are two ways you can authenticate to Auth0:\n\n*   [Login with `cy.origin()`](#Login-with-cyorigin)\n*   [Programmatic Login](#Programmatic-Login)\n\n### Login with [`cy.origin()`](https://docs.cypress.io/api/commands/origin)[​](#Login-with-cyorigin \"Direct link to Login-with-cyorigin\")\n\nNext, we'll write a custom command called `loginToAuth0` to perform a login to [Auth0](https://auth0.com/). This command will use [`cy.origin()`](https://docs.cypress.io/api/commands/origin) to\n\n1.  Navigate to the Auth0 login\n2.  Input user credentials\n3.  Sign in and redirect back to the [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app)\n4.  Cache the results with [`cy.session()`](https://docs.cypress.io/api/commands/session)\n\n```\n// cypress/support/auth-provider-commands/auth0.tsfunction loginViaAuth0Ui(username: string, password: string) {  // App landing page redirects to Auth0.  cy.visit('/')  // Login on Auth0.  cy.origin(    Cypress.env('auth0_domain'),    { args: { username, password } },    ({ username, password }) => {      cy.get('input#username').type(username)      cy.get('input#password').type(password, { log: false })      cy.contains('button[value=default]', 'Continue').click()    }  )  // Ensure Auth0 has redirected us back to the RWA.  cy.url().should('equal', 'http://localhost:3000/')}Cypress.Commands.add('loginToAuth0', (username: string, password: string) => {  const log = Cypress.log({    displayName: 'AUTH0 LOGIN',    message: [`🔐 Authenticating | ${username}`],    // @ts-ignore    autoEnd: false,  })  log.snapshot('before')  loginViaAuth0Ui(username, password)  log.snapshot('after')  log.end()})\n```\n\nNow, we can use our `loginToAuth0` command in the test. Below is our test to login as a user via Auth0 and run a basic sanity check.\n\n```\ndescribe('Auth0', function () {  beforeEach(function () {    cy.task('db:seed')    cy.intercept('POST', '/graphql').as('createBankAccount')    cy.loginToAuth0(      Cypress.env('auth0_username'),      Cypress.env('auth0_password')    )    cy.visit('/')  })  it('shows onboarding', function () {    cy.contains('Get Started').should('be.visible')  })})\n```\n\nLastly, we can refactor our login command to take advantage of [`cy.session()`](https://docs.cypress.io/api/commands/session) to store our logged in user so we don't have to reauthenticate before every test.\n\n```\nCypress.Commands.add('loginToAuth0', (username: string, password: string) => {  const log = Cypress.log({    displayName: 'AUTH0 LOGIN',    message: [`🔐 Authenticating | ${username}`],    // @ts-ignore    autoEnd: false,  })  log.snapshot('before')  cy.session(    `auth0-${username}`,    () => {      loginViaAuth0Ui(username, password)    },    {      validate: () => {        // Validate presence of access token in localStorage.        cy.wrap(localStorage)          .invoke('getItem', 'authAccessToken')          .should('exist')      },    }  )  log.snapshot('after')  log.end()})\n```\n\n### Programmatic Login[​](#Programmatic-Login \"Direct link to Programmatic Login\")\n\nBelow is a command to programmatically login into [Auth0](https://auth0.com/), using the [/oauth/token endpoint](https://auth0.com/docs/protocols/protocol-oauth2#token-endpoint) and set an item in `localStorage` with the authenticated users details, which we will use in our application code to verify we are authenticated under test.\n\nThe `loginByAuth0Api` command will execute the following steps:\n\n1.  Use the [/oauth/token endpoint](https://auth0.com/docs/protocols/protocol-oauth2#token-endpoint) to perform the programmatic login.\n2.  Finally the `auth0Cypress` `localStorage` item is set with the `access token`, `id_token` and user profile.\n\n```\n// cypress/support/commands.jsCypress.Commands.add(  'loginByAuth0Api',  (username: string, password: string) => {    cy.log(`Logging in as ${username}`)    const client_id = Cypress.env('auth0_client_id')    const client_secret = Cypress.env('auth0_client_secret')    const audience = Cypress.env('auth0_audience')    const scope = Cypress.env('auth0_scope')    cy.request({      method: 'POST',      url: `https://${Cypress.env('auth0_domain')}/oauth/token`,      body: {        grant_type: 'password',        username,        password,        audience,        scope,        client_id,        client_secret,      },    }).then(({ body }) => {      const claims = jwt.decode(body.id_token)      const {        nickname,        name,        picture,        updated_at,        email,        email_verified,        sub,        exp,      } = claims      const item = {        body: {          ...body,          decodedToken: {            claims,            user: {              nickname,              name,              picture,              updated_at,              email,              email_verified,              sub,            },            audience,            client_id,          },        },        expiresAt: exp,      }      window.localStorage.setItem('auth0Cypress', JSON.stringify(item))      cy.visit('/')    })  })\n```\n\nWith our Auth0 app setup properly in the Auth0 Developer console, necessary environment variables in place, and our `loginByAuth0Api` command implemented, we will be able to authenticate with Auth0 while our app is under test. Below is a test to login as a user via [Auth0](https://auth0.com/), complete the onboarding process and logout.\n\n```\ndescribe('Auth0', function () {  beforeEach(function () {    cy.task('db:seed')    cy.loginByAuth0Api(      Cypress.env('auth0_username'),      Cypress.env('auth0_password')    )  })  it('shows onboarding', function () {    cy.contains('Get Started').should('be.visible')  })})\n```\n\n## Adapting an Auth0 App for Testing[​](#Adapting-an-Auth0-App-for-Testing \"Direct link to Adapting an Auth0 App for Testing\")\n\ninfo\n\n**Note**\n\nThe previous sections focused on the recommended Auth0 authentication practice within Cypress tests. To use this practice it is assumed you are testing an app appropriately built or adapted to use Auth0.\n\nThe following sections provides guidance on building or adapting an app to use Auth0 authentication. Please note that if you are [logging in with `cy.origin()`](#Login-with-cyorigin) and your app is already successfully integrated with Auth0, you do not need to make any further changes to your app and the remainder of this guide should be regarded as purely informational.\n\nThe [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app) is used and provides configuration and runnable code for both the React SPA and the Express back end.\n\nThe front end uses the [auth0-react SDK](https://github.com/auth0/auth0-react) for React Single Page Applications (SPA), which uses the [auth0-spa-js SDK](https://github.com/auth0/auth0-spa-js) underneath. The back end uses [express-jwt](https://github.com/auth0/express-jwt) to validate JWT's against [Auth0](https://auth0.com/).\n\n### Adapting the back end[​](#Adapting-the-back-end \"Direct link to Adapting the back end\")\n\nIn order to validate API requests from the frontend, we install [express-jwt](https://github.com/auth0/express-jwt) and [jwks-rsa](https://github.com/auth0/node-jwks-rsa) and configure validation for JWT's from [Auth0](https://auth0.com/).\n\n```\n// backend/helpers.tsimport jwt from 'express-jwt'import jwksRsa from 'jwks-rsa'dotenv.config()const auth0JwtConfig = {  secret: jwksRsa.expressJwtSecret({    cache: true,    rateLimit: true,    jwksRequestsPerMinute: 5,    jwksUri: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/.well-known/jwks.json`,  }),  // Validate the audience and the issuer.  audience: process.env.REACT_APP_AUTH0_AUDIENCE,  issuer: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/`,  algorithms: ['RS256'],}\n```\n\nNext, we'll define an Express middleware function to be use in our routes to verify the [Auth0](https://auth0.com/) JWT sent by the front end API requests as the `Bearer` token.\n\n```\n// backend/helpers.ts// ...export const checkJwt = jwt(auth0JwtConfig).unless({ path: ['/testData/*'] })\n```\n\nOnce this helper is defined, we can use globally to apply to all routes:\n\n```\n// backend/app.ts// initial imports ...import { checkJwt } from './helpers'// ...if (process.env.REACT_APP_AUTH0) {  app.use(checkJwt)}// routes ...\n```\n\n### Adapting the front end[​](#Adapting-the-front-end \"Direct link to Adapting the front end\")\n\nWe need to update our front end React app to allow for authentication with [Auth0](https://auth0.com/). As mentioned above, the [auth0-react SDK](https://github.com/auth0/auth0-react) for React Single Page Applications (SPA) is used.\n\nFirst, we create a `AppAuth0.tsx` container to render our application as it is authenticated with [Auth0](https://auth0.com/). The component is identical to the `App.tsx` component, but uses the `useAuth0` React Hook, removes the need for the Sign Up and Sign In routes and wraps the component with the `withAuthenticationRequired` higher order function (HOC).\n\nA `useEffect` hook is added to get the access token for the authenticated user and send an `AUTH0` event with the `user` and `token` objects to work with the existing authentication layer (`authMachine.ts`).\n\n```\n// src/containers/AppAuth0.tsx// initial imports ...import { withAuthenticationRequired, useAuth0 } from '@auth0/auth0-react'// ...const AppAuth0 = () => {  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0()  // ...  useEffect(() => {    ;(async function waitForToken() {      const token = await getAccessTokenSilently()      authService.send('AUTH0', { user, token })    })()  }, [user, getAccessTokenSilently])  // ...  const isLoggedIn =    isAuthenticated &&    (authState.matches('authorized') ||      authState.matches('refreshing') ||      authState.matches('updating'))  return <div className={classes.root}>// ...</div>}export default withAuthenticationRequired(AppAuth0)\n```\n\nNote: The full [AppAuth0.tsx component](https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppAuth0.tsx) is in the [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app).\n\nNext, we update our entry point (`index.tsx`) to wrap our application with the `<Auth0Provider>` from the [auth0-react SDK](https://github.com/auth0/auth0-react) SDK providing a custom `onRedirectCallback`. We pass props for the Auth0 environment variables set in `.env` above, and render our `<AppAuth0>` component as the application.\n\n```\n// src/index.tsx// initial imports ...import AppAuth0 from \"./containers/AppAuth0\";// ..const onRedirectCallback = (appState: any) => {  history.replace((appState && appState.returnTo) || window.location.pathname);};if (process.env.REACT_APP_AUTH0) {  ReactDOM.render(    <Auth0Provider      domain={process.env.REACT_APP_AUTH0_DOMAIN!}      clientId={process.env.REACT_APP_AUTH0_CLIENTID!}      redirectUri={window.location.origin}      audience={process.env.REACT_APP_AUTH0_AUDIENCE}      scope={process.env.REACT_APP_AUTH0_SCOPE}      onRedirectCallback={onRedirectCallback}    >      <Router history={history}>        <ThemeProvider theme={theme}>          <AppAuth0 />        </ThemeProvider>      </Router>    </Auth0Provider>,    document.getElementById(\"root\")  );} else {  // render passport-local App.tsx}\n```\n\nAn update to our [AppAuth0.tsx component](https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppAuth0.tsx) is needed to conditionally use the `auth0Cypress` `localStorage` item.\n\nIn the code below, we conditionally apply a `useEffect` block based on being under test with Cypress (using `window.Cypress`).\n\nIn addition, we will update the export to be wrapped with `withAuthenticationRequired` if we are not under test in Cypress. This allows our application to work with the [Auth0](https://auth0.com/) redirect login flow in development/production but not when under test in Cypress.\n\n```\n// src/containers/AppAuth0.tsx// initial imports ...import { withAuthenticationRequired, useAuth0 } from \"@auth0/auth0-react\";// ...const AppAuth0 = () => {  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0();  // ...  useEffect(() => {      (async function waitForToken() {        const token = await getAccessTokenSilently();        authService.send(\"AUTH0\", { user, token });      })();    }, [user, getAccessTokenSilently]);  // If under test in Cypress, get credentials from \"auth0Cypress\" localstorage item and send event to our state management to log the user into the SPA  if (window.Cypress) {    useEffect(() => {      const auth0 = JSON.parse(localStorage.getItem(\"auth0Cypress\")!);      authService.send(\"AUTH0\", {        user: auth0.body.decodedToken.user,        token: auth0.body.access_token,      });    }, []);  } else {    useEffect(() => {      (async function waitForToken() {        const token = await getAccessTokenSilently();        authService.send(\"AUTH0\", { user, token });      })();    }, [isAuthenticated, user, getAccessTokenSilently]);  }  // ...  const isLoggedIn =    isAuthenticated &&    (authState.matches(\"authorized\") ||      authState.matches(\"refreshing\") ||      authState.matches(\"updating\"));  return (    <div className={classes.root}>      // ...    </div>  );};// Conditional export wrapped with `withAuthenticationRequired` if we are not under test in Cypress.let appAuth0 = window.Cypress ? AppAuth0 : withAuthenticationRequired(AppAuth0);export default appAuth0\n```\n\n## Auth0 Rate Limiting Logins[​](#Auth0-Rate-Limiting-Logins \"Direct link to Auth0 Rate Limiting Logins\")\n\nBe aware of the rate limit statement in the Auth0 documentation:\n\n[Auth0 Rate Limit](https://auth0.com/docs/connections/database/rate-limits) - \"If a user attempts to login 20 times per minute as the same user from the same location, regardless of having the correct credentials, the rate limit will come into effect. When this happens, the user can make 10 attempts per minute.\"\n\nThis limit can be reached as the size of a test suite grows along with enabling [parallelized runs](https://on.cypress.io/parallelization) to speed up test run duration.\n\nIf you run into this rate limit, a programmatic approach can be added to the `loginByAuth0` command to clear a blocked IP prior to the test run.\n\nNext you'll need to obtain a [API token](https://auth0.com/docs/api/management/v2/tokens) to interact with the [Auth0 Management API](https://auth0.com/docs/api/management/v2). This token is a JSON Web Token (JWT) and it contains specific granted permissions for the API.\n\nAdd this token as environment variable `AUTH0_MGMT_API_TOKEN` to our [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app) `.env` with your API token.\n\n```\n// .env// ... additional keysAUTH0_MGMT_API_TOKEN = 'YOUR-MANAGEMENT-API-TOKEN'\n```\n\nWith this token in place, we can add interaction with the [Auth0 Anomaly remove the blocked IP address endpoint](https://auth0.com/docs/api/management/v2#!/Anomaly/delete_ips_by_id) to our `loginByAuth0Api` command. This will send a delete request to [Auth0 Management API](https://auth0.com/docs/api/management/v2) anomaly endpoint to unblock an IP that may become blocked during the test run.\n\ninfo\n\n**Tip**\n\n[icanhazip.com](http://icanhazip.com/) is a free, hosted service to find a system's current external IP address.\n\n```\nCypress.Commands.add('loginByAuth0Api', (username, password) => {  // Useful when rate limited by Auth0  cy.exec('curl -4 icanhazip.com')    .its('stdout')    .then((ip) => {      cy.request({        method: 'DELETE',        url: `https://${Cypress.env(          'auth0_domain'        )}/api/v2/anomaly/blocks/ips/${ip}`,        auth: {          bearer: Cypress.env('auth0_mgmt_api_token'),        },      })    })  // ... remaining loginByAuth0Api command})\n```",
  "title": "Auth0 Integration: Cypress Auth | Cypress Documentation",
  "description": "Seamlessly implement Auth0 authentication with Cypress. Integrate Auth0 authentication for secure testing",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/module-api",
  "markdown": "# Module API | Cypress Documentation\n\nYou can require Cypress as a node module from your application under test and run Cypress via Node.js. This can be useful when you want access to the test results directly after the run. With this workflow, for example, you can:\n\n*   Send a notification about failing tests with included screenshot images\n*   Rerun a single failing spec file\n*   Kick off other builds or scripts\n\n## `cypress.run()`[​](#cypressrun \"Direct link to cypressrun\")\n\nRuns Cypress tests via Node.js and resolve with all test results. See the [Cypress Module API recipe](https://github.com/cypress-io/cypress-example-recipes#fundamentals).\n\n```\n// e2e-run-tests.jsconst cypress = require('cypress')cypress.run({  reporter: 'junit',  browser: 'chrome',  config: {    baseUrl: 'http://localhost:8080',    video: true,  },  env: {    login_url: '/login',    products_url: '/products',  },})\n```\n\nYou can then run Cypress by running the following in your terminal or an npm script:\n\n### Options[​](#Options \"Direct link to Options\")\n\nJust like the [Command Line options](https://docs.cypress.io/guides/guides/command-line) for `cypress run`, you can pass options that modify how Cypress runs.\n\n| Option | Type | Description |\n| --- | --- | --- |\n| `autoCancelAfterFailures` | _number_ \\| _false_ | Specify the number of failures to cancel a run being recorded to the Cloud or `false` to disable auto-cancellation. |\n| `browser` | _string_ | Specify different browser to run tests in, either by name or by filesystem path |\n| `ciBuildId` | _string_ | Specify a unique identifier for a run to enable [grouping](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) or [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) |\n| `config` | _object_ | Specify [configuration](https://docs.cypress.io/guides/references/configuration) |\n| `configFile` | _string_ | Path to the [configuration file](https://docs.cypress.io/guides/references/configuration#Configuration-File) to be used. |\n| `env` | _object_ | Specify [environment variables](https://docs.cypress.io/guides/guides/environment-variables) |\n| `group` | _string_ | [Group](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) recorded tests together under a single run |\n| `headed` | _boolean_ | Displays the browser instead of running headlessly |\n| `headless` | _boolean_ | Hide the browser instead of running headed (default during `cypress run`) |\n| `key` | _string_ | Specify your secret record key |\n| `exit` | _boolean_ | Whether to close Cypress after all tests run |\n| `parallel` | _boolean_ | Run recorded specs in [parallel](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) across multiple machines |\n| `port` | _number_ | Override default port |\n| `project` | _string_ | Path to a specific project |\n| `quiet` | _boolean_ | If passed, Cypress output will not be printed to `stdout`. Only output from the configured [Mocha reporter](https://docs.cypress.io/guides/tooling/reporters) will print. |\n| `record` | _boolean_ | Whether to record the test run |\n| `reporter` | _string_ | Specify a [Mocha reporter](https://docs.cypress.io/guides/tooling/reporters) |\n| `reporterOptions` | _object_ | Specify [Mocha reporter](https://docs.cypress.io/guides/tooling/reporters) options |\n| `runnerUi` | _boolean_ | Whether to display the Cypress Runner UI. Defaults to `false` when [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) is enabled. Otherwise defaults to `true`. |\n| `slowTestThreshold` | _number_ | Time, in milliseconds, to consider a test \"slow\" during `cypress run`. A slow test will display in orange text in the default reporter. |\n| `spec` | _string_ | Specify the specs to run, see examples below |\n| `tag` | _string_ | Identify a run with a tag or tags |\n| `testingType` | _string_ | Specify the type of tests to execute; either `e2e` or `component`. Defaults to `e2e` |\n\n### Examples[​](#Examples \"Direct link to Examples\")\n\n#### Run a single spec file[​](#Run-a-single-spec-file \"Direct link to Run a single spec file\")\n\nHere is an example of programmatically running a spec file. Note that the file path is relative to the current working directory.\n\n```\n// e2e-run-tests.jsconst cypress = require('cypress')cypress  .run({    // the path is relative to the current working directory    spec: './cypress/e2e/examples/actions.cy.js',  })  .then((results) => {    console.log(results)  })  .catch((err) => {    console.error(err)  })\n```\n\nYou can then run Cypress by running the following in your terminal or an npm script:\n\n#### Run specs using wildcard[​](#Run-specs-using-wildcard \"Direct link to Run specs using wildcard\")\n\nYou can pass a wildcard pattern to run all matching spec files\n\n```\nconst cypress = require('cypress')cypress.run({  // the wildcard path is relative to the current working directory  spec: './cypress/e2e/**/api*.js',})\n```\n\n#### Programmatically control which browser to run[​](#Programmatically-control-which-browser-to-run \"Direct link to Programmatically control which browser to run\")\n\nYou can pass a browser option to specify which browser to run tests in so that you can programmatically control which specs to run in each browser.\n\n```\n// run 'node cypress-chrome.js'const cypress = require('cypress')cypress.run({  spec: './cypress/e2e/**/chrome-test*.js',  browser: 'chrome',})\n```\n\n```\n// run 'node cypress-firefox.js'const cypress = require('cypress')cypress.run({  spec: './cypress/e2e/**/firefox-test*.js',  browser: 'firefox',})\n```\n\n#### Use modern syntax[​](#Use-modern-syntax \"Direct link to Use modern syntax\")\n\nIf your Node version allows you can use the modern `async / await` syntax to wait for the Promise returned by the `cypress.run` method.\n\n```\nconst cypress = require('cypress');(async () => {  const results = await cypress.run()  // use the results object})()\n```\n\n### Results[​](#Results \"Direct link to Results\")\n\n`cypress.run()` returns a `Promise` that resolves with an object containing the tests results. A typical run could return something like this:\n\n```\n{  \"cypressVersion\": \"3.0.2\",  \"endedTestsAt\": \"2018-07-11T17:53:35.675Z\",  \"browserName\": \"electron\",  \"browserPath\": \"path/to/browser\",  \"browserVersion\": \"59.0.3071.115\",  \"config\": {...},  \"osName\": \"darwin\",  \"osVersion\": \"14.5.0\",  \"runs\": [{    \"error\": null,    \"reporter\": \"spec\",    \"reporterStats\": {...},    \"spec\": {...},    \"stats\": {      \"suites\": 1,      \"tests\": 1,      \"passes\": 0,      \"pending\": 0,      \"skipped\": 0,      \"failures\": 1,      \"startedAt\": \"2020-08-05T08:38:37.589Z\",      \"endedAt\": \"2018-07-11T17:53:35.675Z\",      \"duration\": 1171    },    \"screenshots\": [{      \"name\": null,      \"takenAt\": \"2020-08-05T08:52:20.432Z\",      \"path\": \"User/janelane/my-app/cypress/screenshots/cy.js/test (failed).png\",      \"height\": 720,      \"width\": 1280    }],    \"tests\": [{      \"title\": [ \"test\" ],      \"state\": \"failed\",      \"displayError\": \"AssertionError: expected true to be false\\n' +      '    at Context.eval (...cypress/e2e/cy.js:5:21\",      \"attempts\": [{        \"state\": \"failed\",      }],    }],    \"video\": \"User/janelane/my-app/cypress/videos/abc123.mp4\"  }],  \"runUrl\": \"https://cloud.cypress.io/projects/def456/runs/12\",  \"startedTestsAt\": \"2018-07-11T17:53:35.463Z\",  \"totalDuration\": 212,  \"totalFailed\": 1,  \"totalPassed\": 0,  \"totalPending\": 0,  \"totalSkipped\": 0,  \"totalSuites\": 1,  \"totalTests\": 1,}\n```\n\nYou can find the TypeScript definition for the results object in the [`cypress/cli/types` folder](https://github.com/cypress-io/cypress/tree/develop/cli/types).\n\n### Handling errors[​](#Handling-errors \"Direct link to Handling errors\")\n\nEven when tests fail, the `Promise` resolves with the test results. The `Promise` is only rejected if Cypress cannot run for some reason (for example if a binary has not been installed or it cannot find a module dependency). In that case, the `Promise` will be rejected with a detailed error.\n\nThere is a third option - Cypress could run, but the tests could not start for some reason. In that case the resolved value is an object with two fields\n\n```\n{  \"failures\": 1,    // non-zero number  \"message\": \"...\"  // error message}\n```\n\nIn order to handle these possible errors, you can add a `catch` to `cypress.run()`:\n\n```\n// e2e-run-tests.jsconst cypress = require('cypress')cypress.run({...}).then(result => {  if (result.failures) {    console.error('Could not execute tests')    console.error(result.message)    process.exit(result.failures)  }  // print test results and exit  // with the number of failed tests as exit code  process.exit(result.totalFailed)}).catch(err => {  console.error(err.message)  process.exit(1)})\n```\n\n## `cypress.open()`[​](#cypressopen \"Direct link to cypressopen\")\n\nOpen Cypress tests via Node.js.\n\n```\n// e2e-open-tests.jsconst cypress = require('cypress')cypress.open({  config: {    baseUrl: 'http://localhost:8080',  },  env: {    login_url: '/login',    products_url: '/products',  },})\n```\n\nYou can then open Cypress by running the following in your terminal or an npm script:\n\n### Options[​](#Options-1 \"Direct link to Options\")\n\nJust like the [Command Line options](https://docs.cypress.io/guides/guides/command-line), you can pass options that modify how Cypress runs.\n\n| Option | Type | Description |\n| --- | --- | --- |\n| `browser` | _string_ | Specify a filesystem path to a custom browser |\n| `config` | _object_ | Specify [configuration](https://docs.cypress.io/guides/references/configuration) |\n| `configFile` | _string_ | Path to the [configuration file](https://docs.cypress.io/guides/references/configuration#Configuration-File) to be used. |\n| `detached` | _boolean_ | Open Cypress in detached mode |\n| `env` | _object_ | Specify [environment variables](https://docs.cypress.io/guides/guides/environment-variables) |\n| `global` | _boolean_ | Run in global mode |\n| `port` | _number_ | Override default port |\n| `project` | _string_ | Path to a specific project |\n| `testingType` | _string_ | Specify the type of tests to execute; either `e2e` or `component`. Defaults to `e2e` |\n\n### Example[​](#Example \"Direct link to Example\")\n\n```\n// e2e-open-tests.jsconst cypress = require('cypress')cypress.open({})\n```\n\nYou can then open Cypress by running the following in your terminal or an npm script:\n\n## `cypress.cli`[​](#cypresscli \"Direct link to cypresscli\")\n\n### `parseRunArguments()`[​](#parseRunArguments \"Direct link to parseRunArguments\")\n\nIf you are writing a tool that wraps around the `cypress.run()` command, you might want to parse user-supplied command line arguments using the same logic as `cypress run` uses. In that case, you can use the included `parseRunArguments` function.\n\n```\n// wrapper.jsconst cypress = require('cypress')const runOptions = await cypress.cli.parseRunArguments(process.argv.slice(2))const results = await cypress.run(runOptions)// process the \"cypress.run()\" results\n```\n\nAn example use running from your terminal could be:\n\n```\nnode ./wrapper cypress run --browser chrome --config ...\n```\n\n**Note:** the arguments passed to `parseRunArguments` should start with `cypress run`.\n\nWe use CLI parsing and calling `cypress.run` to [repeat tests to find flaky tests](https://github.com/bahmutov/cypress-repeat) and to [validate test numbers after a test run](https://github.com/bahmutov/cypress-expect). Read [Wrap Cypress Using npm Module API](https://glebbahmutov.com/blog/wrap-cypress-using-npm/) for more examples.\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [12.6.0](https://docs.cypress.io/guides/references/changelog#12-6-0) | Added `autoCancelAfterFailures` to run options. |\n| [10.0.0](https://docs.cypress.io/guides/references/changelog#10-0-0) | `slowTestThreshold` is now scoped to each testing type. |\n| [8.7.0](https://docs.cypress.io/guides/references/changelog#8-7-0) | Added `slowTestThreshold` configuration option. |\n| [7.3.0](https://docs.cypress.io/guides/references/changelog#7-3-0) | Added `testingType` configuration option. |\n| [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) | Test results returned from `cypress.run()` changed. |\n| [4.11.0](https://docs.cypress.io/guides/references/changelog#4-11-0) | Added `cypress.cli` with `parseRunArguments` function. |\n| [4.9.0](https://docs.cypress.io/guides/references/changelog#4-9-0) | Added `quiet` option to `cypress.run()` |",
  "title": "Module API | Cypress Documentation",
  "description": "You can require Cypress as a node module from your application under test and",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/error-messages",
  "markdown": "# Error Messages | Cypress Documentation\n\n*   [Test File Errors](#Test-File-Errors)\n    *   [No tests found](#No-tests-found)\n    *   [We found an error preparing your test file](#We-found-an-error-preparing-your-test-file)\n*   [Support File Errors](#Support-File-Errors)\n    *   [Support file missing or invalid](#Support-file-missing-or-invalid)\n    *   [Error Loading Config](#Error-Loading-Config)\n*   [Command Errors](#Command-Errors)\n    *   [Cypress cannot execute commands outside a running test](#Cypress-cannot-execute-commands-outside-a-running-test)\n    *   [`cy...()` failed because the page updated](#cy-failed-because-the-page-updated)\n    *   [`cy...()` failed because the element cannot be interacted with](#cy-failed-because-the-element-cannot-be-interacted-with)\n    *   [`cy...()` failed because the element is currently animating](#cy-failed-because-the-element-is-currently-animating)\n    *   [The test has finished but Cypress still has commands in its queue](#The-test-has-finished-but-Cypress-still-has-commands-in-its-queue)\n    *   [`cy.visit()` failed because you are attempting to visit a second unique domain](#cyvisit-failed-because-you-are-attempting-to-visit-a-second-unique-domain)\n    *   [`cy.visit()` failed because you are attempting to visit a different origin domain](#cyvisit-failed-because-you-are-attempting-to-visit-a-different-origin-domain)\n    *   [`cy.visit()` succeeded, but commands are timing out](#cyvisit-succeeded-but-commands-are-timing-out)\n    *   [`Cypress.addParentCommand()` / `Cypress.addDualCommand()` / `Cypress.addChildCommand()` has been removed and replaced by `Cypress.Commands.add()`](#CypressaddParentCommand--CypressaddDualCommand--CypressaddChildCommand-has-been-removed-and-replaced-by-CypressCommandsadd)\n    *   [Cypress detected that you invoked one or more `cy` commands in a custom command but returned a different value.](#Cypress-detected-that-you-invoked-one-or-more-cy-commands-in-a-custom-command-but-returned-a-different-value)\n    *   [Cypress detected that you invoked one or more `cy` commands but returned a different value.](#Cypress-detected-that-you-invoked-one-or-more-cy-commands-but-returned-a-different-value)\n    *   [Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.](#Cypress-detected-that-you-returned-a-promise-from-a-command-while-also-invoking-one-or-more-cy-commands-in-that-promise)\n    *   [Cypress detected that you returned a promise in a test, but also invoked one or more `cy` commands inside of that promise.](#Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-one-or-more-cy-commands-inside-of-that-promise)\n    *   [Cypress detected that you returned a promise in a test, but also invoked a done callback.](#Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-a-done-callback)\n    *   [CypressError: Timed out retrying: Expected to find element: ‘…’, but never found it. Queried from element: <…>](#CypressError-Timed-out-retrying-Expected-to-find-element--but-never-found-it-Queried-from-element-)\n*   [CLI Errors](#CLI-Errors)\n    *   [You passed the `--record` flag but did not provide us your Record Key.](#You-passed-the---record-flag-but-did-not-provide-us-your-Record-Key)\n    *   [The `cypress ci` command has been deprecated](#The-cypress-ci-command-has-been-deprecated)\n    *   [A Cached Cypress Binary Could not be found](#A-Cached-Cypress-Binary-Could-not-be-found)\n    *   [Incorrect usage of `--ci-build-id` flag](#Incorrect-usage-of---ci-build-id-flag)\n    *   [The `--ci-build-id`, `--group`, `--tag`, `--parallel`, or `--auto-cancel-after-failures` flags can only be used when recording](#The---ci-build-id---group---tag---parallel-or---auto-cancel-after-failures-flags-can-only-be-used-when-recording)\n    *   [We could not determine a unique CI build ID](#We-could-not-determine-a-unique-CI-build-ID)\n    *   [Group name has already been used for this run](#Group-name-has-already-been-used-for-this-run)\n    *   [Cannot parallelize tests across environments](#Cannot-parallelize-tests-across-environments)\n    *   [Cannot parallelize tests in this group](#Cannot-parallelize-tests-in-this-group)\n    *   [Run must pass `--parallel` flag](#Run-must-pass---parallel-flag)\n    *   [Cannot parallelize tests on a stale run](#Cannot-parallelize-tests-on-a-stale-run)\n    *   [Run is not accepting any new groups](#Run-is-not-accepting-any-new-groups)\n    *   [The Cypress App could not be unzipped. This is most likely because the maximum path length is being exceeded on your system.](#The-Cypress-App-could-not-be-unzipped-This-is-most-likely-because-the-maximum-path-length-is-being-exceeded-on-your-system)\n    *   [error: unknown option: --auto-cancel-after-failures](#error-unknown-option---auto-cancel-after-failures)\n    *   [\\--auto-cancel-after-failures must be a integer or false](#--auto-cancel-after-failures-must-be-a-integer-or-false)\n    *   [\\--auto-cancel-after-failures passed without a Business or Enterprise Cloud account](#--auto-cancel-after-failures-passed-without-a-Business-or-Enterprise-Cloud-account)\n    *   [You passed the --auto-cancel-after-failures flag for a run that is already in progress](#You-passed-the---auto-cancel-after-failures-flag-for-a-run-that-is-already-in-progress)\n*   [Page Load Errors](#Page-Load-Errors)\n    *   [Cypress detected a cross-origin error happened on page load](#Cypress-detected-a-cross-origin-error-happened-on-page-load)\n    *   [Cypress detected that an uncaught error was thrown from a cross-origin script.](#Cypress-detected-that-an-uncaught-error-was-thrown-from-a-cross-origin-script)\n*   [Browser Errors](#Browser-Errors)\n    *   [The browser process running your tests just exited unexpectedly](#The-browser-process-running-your-tests-just-exited-unexpectedly)\n*   [Cypress App errors](#Cypress-App-errors)\n    *   [Whoops, we can't run your tests](#Whoops-we-cant-run-your-tests)\n    *   [Cannot connect to API server](#Cannot-connect-to-API-server)\n    *   [Cypress detected policy settings on your computer that may cause issues](#Cypress-detected-policy-settings-on-your-computer-that-may-cause-issues)\n    *   [Uncaught exceptions from your application](#Uncaught-exceptions-from-your-application)\n\n## Test File Errors[​](#Test-File-Errors \"Direct link to Test File Errors\")\n\n### No tests found[​](#No-tests-found \"Direct link to No-tests-found\")\n\nThis message means that Cypress was unable to find tests in the specified file. You'll likely get this message if you have an empty test file and have not yet written any tests.\n\n![No tests found](https://docs.cypress.io/img/guides/references/no-tests-found.png)\n\n### We found an error preparing your test file[​](#We-found-an-error-preparing-your-test-file \"Direct link to We-found-an-error-preparing-your-test-file\")\n\nThis message means that Cypress encountered an error when compiling and/or bundling your test file. Cypress automatically compiles and bundles your test code so you can use ES2015, CoffeeScript, modules, etc.\n\n#### You'll typically receive this message due to:[​](#Youll-typically-receive-this-message-due-to \"Direct link to You'll typically receive this message due to:\")\n\n*   The file not existing\n*   A syntax error in the file or one of its dependencies\n*   A missing dependency\n\nWhen the error is fixed in your test file, your tests will automatically re-run.\n\n## Support File Errors[​](#Support-File-Errors \"Direct link to Support File Errors\")\n\n### Support file missing or invalid[​](#Support-file-missing-or-invalid \"Direct link to Support-file-missing-or-invalid\")\n\nThe `supportFolder` option was removed from Cypress in version [`0.18.0`](https://docs.cypress.io/guides/references/changelog#0-18-0) and was replaced by module support and the [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) configuration option.\n\nCypress used to automatically include any scripts in the `supportFolder` before your test files. However, automatically including all the files in a certain directory is somewhat magical and unintuitive, and requires creating globals for the purpose of utility functions.\n\n### Error Loading Config[​](#Error-Loading-Config \"Direct link to Error-Loading-Config\")\n\nThe `supportFile` configuration option was removed from the root configutation object in Cypress version `10.0.0`. Instead, it must be added within each testing type's configuration object as a separate property if you would like to use a file other than the default [supportFile](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) configuration.\n\n#### Use modules for utility functions[​](#Use-modules-for-utility-functions \"Direct link to Use modules for utility functions\")\n\nCypress supports both ES2015 modules and CommonJS modules. You can import/require npm modules as well as local modules:\n\n```\nimport _ from 'lodash'import util from './util'it('uses modules', () => {  expect(_.kebabCase('FooBar')).to.equal('foo-bar')  expect(util.secretCode()).to.equal('1-2-3-4')})\n```\n\n#### Use supportFile to load scripts before your test code[​](#Use-supportFile-to-load-scripts-before-your-test-code \"Direct link to Use supportFile to load scripts before your test code\")\n\nIt's still useful to load a setup file before your test code. If you are setting Cypress defaults or utilizing custom Cypress commands, instead of needing to import/require those defaults/commands in every test file, you can use the [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) configuration option within each testing type's configuration object.\n\ndanger\n\n⚠️ For a given testing type, multiple matching `supportFile` files will result in an error when Cypress loads.\n\nJust like with your test files, the [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) can use ES2015+, [TypeScript](https://docs.cypress.io/guides/tooling/typescript-support) or CoffeeScript and modules, so you can import/require other files as needed.\n\n## Command Errors[​](#Command-Errors \"Direct link to Command Errors\")\n\n### Cypress cannot execute commands outside a running test[​](#Cypress-cannot-execute-commands-outside-a-running-test \"Direct link to Cypress-cannot-execute-commands-outside-a-running-test\")\n\n![Cannot execute commands](https://docs.cypress.io/img/guides/references/cypress-cannot-execute.png)\n\nThis message means you tried to execute one or more Cypress commands outside of a currently running test. Cypress has to be able to associate commands to a specific test.\n\nTypically this happens accidentally, like in the following situation.\n\n```\ndescribe('Some Tests', () => {  it('is true', () => {    expect(true).to.be.true // yup, fine  })  it('is false', () => {    expect(false).to.be.false // yup, also fine  })  context('some nested tests', () => {    // oops you forgot to write an it(...) here!    // these cypress commands below    // are running outside of a test and cypress    // throws an error    cy.get('h1').should('contain', 'todos')  })})\n```\n\nMove those Cypress commands into an `it(...)` block and everything will work correctly.\n\nIf you are purposefully writing commands outside of a test, there is probably a better way to accomplish what you're trying to do. Read through the [Examples](https://docs.cypress.io/examples/recipes) or check out our [Support channels](https://docs.cypress.io/guides/references/troubleshooting#Support-channels) for more troubleshooting resources.\n\n### `cy...()` failed because the page updated[​](#cy-failed-because-the-page-updated \"Direct link to cy-failed-because-the-page-updated\")\n\nGetting this error means you've tried to interact with a \"dead\" DOM element - meaning the current subject has been removed from the DOM.\n\n![cy.method() failed because the page updated](https://docs.cypress.io/img/guides/references/cypress-method-failed-page-updated.png)\n\nCypress errors because after a command, the subject becomes 'fixed' to a specific element - since it can't retry commands, if the element becomes detached from the page, we can't assert or interact on it.\n\nLet's take a look at an example below.\n\n#### Application HTML[​](#Application-HTML \"Direct link to Application HTML\")\n\n```\n<body>  <div data-testid=\"parent\">    <button>Delete</button>  </div></body>\n```\n\n#### Application JavaScript[​](#Application-JavaScript \"Direct link to Application JavaScript\")\n\n```\n$('button').click(function () {  // when the <button> is clicked  // we remove the button from the DOM,  // and add a new, identical one.  $(this).replaceWith(this.outerHTML)})\n```\n\n#### Test Code causing error[​](#Test-Code-causing-error \"Direct link to Test Code causing error\")\n\n```\ncy.get('button').click().parent()\n```\n\nWe've programmed our application above so that as soon as the `click` event happens, the button is removed from the DOM. When Cypress begins processing the next query ([`.parent()`](https://docs.cypress.io/api/commands/parent)) in the test above, it detects that the yielded subject (the original button) is detached from the DOM and throws the error.\n\nFortunately, the error tells us exactly what to do:\n\n> You can typically solve this by breaking up a chain.\n\n#### Fixed Test Code[​](#Fixed-Test-Code \"Direct link to Fixed Test Code\")\n\n```\ncy.get('button').click()cy.get('button').parent()\n```\n\nThe above example is an oversimplification, but a representative one. In modern JavaScript frameworks, DOM elements are regularly re-rendered - meaning that the old element is thrown away and a new one is put in its place. Because this happens so fast, it may _appear_ as if nothing has visibly changed to the user. But if you are in the middle of executing test commands, it's possible the element you're interacting with has become \"dead\". To deal with this situation you must:\n\n*   Always start a new chain after each _command_.\n*   Use Cypress _queries_ to locate elements on the page, rather than using specific HTML elements as your subject\n\nQueries (`.get()`, `.as()` and`.parent()`, for example) and assertions (`.should()`, `.and()`) are safe to chain off of. Commands (such as `.click()`) are not.\n\n### `cy...()` failed because the element cannot be interacted with[​](#cy-failed-because-the-element-cannot-be-interacted-with \"Direct link to cy-failed-because-the-element-cannot-be-interacted-with\")\n\nYou may see a variation of this message for 4 different reasons:\n\n1.  The element is not visible\n2.  The element is being covered by another element\n3.  The element's center is hidden from view\n4.  The element is disabled\n\nCypress runs several calculations to ensure an element can _actually_ be interacted with like a real user would. If you're seeing this error, you may need to _guard_ your commands (due to a timing or an animation issue).\n\nThere have been situations where Cypress does not correctly allow you to interact with an element that should be interactable. If that's the case, [open an issue](https://github.com/cypress-io/cypress/issues/new/choose).\n\nIf you'd like to override these built-in checks, provide the `{force: true}` option to the action itself. Refer to each command for their available options, additional use cases, and argument usage.\n\n#### Ignore built-in error checking[​](#Ignore-built-in-error-checking \"Direct link to Ignore built-in error checking\")\n\n```\ncy.get('[disabled]').click({force: true}).\n```\n\n_Be careful with this option. It's possible to force your tests to pass when the element is actually not interactable in your application._\n\n### `cy...()` failed because the element is currently animating[​](#cy-failed-because-the-element-is-currently-animating \"Direct link to cy-failed-because-the-element-is-currently-animating\")\n\n![cy.method() failed because element is animating](https://docs.cypress.io/img/guides/references/cy-method-failed-element-is-animating.png)\n\nBy default Cypress detects if an element you're trying to interact with is animating. This check ensures that an element is not animating too quickly for a real user to interact with the element. This also prevents some edge cases where actions, such as [`.type()`](https://docs.cypress.io/api/commands/type) or [`.click()`](https://docs.cypress.io/api/commands/click), happened too fast during a transition.\n\nCypress will continuously attempt to interact with the element until it eventually times out. If you'd like to force Cypress to interact with the element there are a few options:\n\n*   Pass `{force: true}`. This disables _all_ error checking\n*   Pass `{waitForAnimations: false}` to disable animation error checking\n*   Pass `{animationDistanceThreshold: 20}` to decrease the sensitivity of detecting if an element is animating. By increasing the threshold this enables your element to move farther on the page without causing Cypress to continuously retry.\n\n```\ncy.get('[data-testid=\"modal-close\"]').click({ waitForAnimations: false })\n```\n\nYou can globally disable animation error checking, or increase the threshold by modifying the [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n\n#### Cypress configuration file[​](#Cypress-configuration-file \"Direct link to Cypress configuration file\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  waitForAnimations: false,  animationDistanceThreshold: 50,})\n```\n\n### The test has finished but Cypress still has commands in its queue[​](#The-test-has-finished-but-Cypress-still-has-commands-in-its-queue \"Direct link to The-test-has-finished-but-Cypress-still-has-commands-in-its-queue\")\n\nLet's examine several different ways you may get this error message. In every situation, you'll need to change something in your test code to prevent the error.\n\n![The test has finished but Cypress still has commands](https://docs.cypress.io/img/guides/references/the-test-has-finished.png)\n\ncaution\n\n**Flaky tests below!**\n\nSeveral of these tests are dependent on race conditions. You may have to run these tests multiple times before they will actually fail. You can also try tweaking some of the delays.\n\n#### Short Example[​](#Short-Example \"Direct link to Short Example\")\n\nThis first test below will pass and shows you that Cypress tries to prevent leaving commands behind in the queue in every test.\n\nEven though we return a string in our test, Cypress automatically figures out that you've queued commands above and does not end the test until all cy commands have finished.\n\n```\n// This test passes!it('Cypress is smart and this does not fail', () => {  cy.get('body').children().should('not.contain', 'foo') // <- no return here  return 'foobarbaz' // <- return here})\n```\n\nThe example below will fail because you've forcibly terminated the test early with mocha's `done`.\n\n```\n// This test errors!it('but you can forcibly end the test early which does fail', (done) => {  cy.get('body')    .then(() => {      done() // forcibly end test even though there are commands below    })    .children()    .should('not.contain', 'foo')})\n```\n\n#### Complex Async Example[​](#Complex-Async-Example \"Direct link to Complex Async Example\")\n\nWhat's happening in this example is that because we have _NOT_ told Mocha this is an asynchronous test, this test will pass _immediately_ then move onto the next test. Then, when the `setTimeout` callback function runs, new commands will get queued on the wrong test. Cypress will detect this and fail the _next_ test.\n\n```\ndescribe('a complex example with async code', function () {  it('you can cause commands to bleed into the next test', function () {    // This test passes...but...    setTimeout(() => {      cy.get('body').children().should('not.contain', 'foo')    }, 10)  })  it('this test will fail due to the previous poorly written test', () => {    // This test errors!    cy.wait(10)  })})\n```\n\nThe correct way to write the above test code is using Mocha's `done` to signify it is asynchronous.\n\n```\nit('does not cause commands to bleed into the next test', (done) => {  setTimeout(() => {    cy.get('body')      .children()      .should('not.contain', 'foo')      .then(() => {        done()      })  }, 10)})\n```\n\n#### Complex Promise Example[​](#Complex-Promise-Example \"Direct link to Complex Promise Example\")\n\nIn the example below, we forget to return the `Promise` in our test. This means the test passes synchronously but our `Promise` resolves in the next test. This also causes the commands to be queued on the wrong test. We will get the error in the next test that Cypress detected it had commands in its command queue.\n\n```\ndescribe('another complex example using a forgotten \"return\"', () => {  it('forgets to return a promise', () => {    // This test passes...but...    Cypress.Promise.delay(10).then(() => {      cy.get('body').children().should('not.contain', 'foo')    })  })  it('this test will fail due to the previous poorly written test', () => {    // This test errors!    cy.wait(10)  })})\n```\n\nThe correct way to write the above test code would be to return our `Promise`:\n\n```\nit('does not forget to return a promise', () => {  return Cypress.Promise.delay(10).then(() => {    return cy.get('body').children().should('not.contain', 'foo')  })})\n```\n\n### `cy.visit()` failed because you are attempting to visit a second unique domain[​](#cyvisit-failed-because-you-are-attempting-to-visit-a-second-unique-domain \"Direct link to cyvisit-failed-because-you-are-attempting-to-visit-a-second-unique-domain\")\n\ncaution\n\n**Note**\n\nThis error only pertains to Cypress version `v11.0.0` and under. As of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), users can navigate to multiple domains in a single test.\n\nSee our [Web Security](https://docs.cypress.io/guides/guides/web-security#Limitations) documentation.\n\n### `cy.visit()` failed because you are attempting to visit a different origin domain[​](#cyvisit-failed-because-you-are-attempting-to-visit-a-different-origin-domain \"Direct link to cyvisit-failed-because-you-are-attempting-to-visit-a-different-origin-domain\")\n\ncaution\n\n**Note**\n\nThis error only pertains to Cypress version `v11.0.0` and under. As of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), users can navigate to multiple domains in a single test.\n\nTwo URLs have the same origin if the `protocol`, `port` (if specified), and `host` are the same for both. You can only visit domains that are of the same-origin within a single test. You can read more about same-origin policy in general [here](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\n\nYou can visit urls that are of different origin across different tests, so you may consider splitting your `cy.visit()` of different origin domains into separate tests.\n\nSee our [Web Security](https://docs.cypress.io/guides/guides/web-security#Limitations) documentation for more information and workarounds.\n\n### `cy.visit()` succeeded, but commands are timing out[​](#cyvisit-succeeded-but-commands-are-timing-out \"Direct link to cyvisit-succeeded-but-commands-are-timing-out\")\n\nAs of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), users can navigate to multiple domains in a single test. The following test will succeed as-is:\n\n```\nit('navigates to docs.cypress.io', () => {  cy.visit('http://localhost:3000')  cy.visit('https://docs.cypress.io') // visit a different superdomain})\n```\n\nHowever, when the newly visited URL is not considered the same superdomain, the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command **must** be used to interact with the newly visited domain. The following test is incorrect:\n\n```\nit('navigates to docs.cypress.io and runs additional commands', () => {  cy.visit('http://localhost:3000')  cy.visit('https://docs.cypress.io') // visit a different superdomain  cy.get('h1').should('contain', 'Why Cypress?') // fails})\n```\n\nAnd will result in the following error:\n\n![cy.visit() subsequent commands timed out](https://docs.cypress.io/img/guides/references/cy-visit-subsequent-commands-timed-out.png)\n\nIn order to fix this, our `cy.get()` command **must** be wrapped with the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command, like so:\n\n```\nit('navigates to example.cypress.io and runs additional commands', () => {  cy.visit('http://localhost:3000')  cy.visit('https://example.cypress.io') // visit a different superdomain  cy.origin('https://example.cypress.io', () => {    cy.get('h1').should('contain', 'Why Cypress?') // now succeeds!  })})\n```\n\nSee our [Web Security](https://docs.cypress.io/guides/guides/web-security#Limitations) documentation for more information and workarounds.\n\n### `Cypress.addParentCommand()` / `Cypress.addDualCommand()` / `Cypress.addChildCommand()` has been removed and replaced by `Cypress.Commands.add()`[​](#CypressaddParentCommand--CypressaddDualCommand--CypressaddChildCommand-has-been-removed-and-replaced-by-CypressCommandsadd \"Direct link to CypressaddParentCommand--CypressaddDualCommand--CypressaddChildCommand-has-been-removed-and-replaced-by-CypressCommandsadd\")\n\nIn version [0.20.0](https://docs.cypress.io/guides/references/changelog), we removed the commands for adding custom commands and replaced them with, what we believe to be, a simpler interface.\n\nNow you can create parent, dual, and child commands using the same [Cypress.Commands.add()](https://docs.cypress.io/api/cypress-api/custom-commands) command.\n\nPlease read our [new documentation on writing custom commands](https://docs.cypress.io/api/cypress-api/custom-commands).\n\n### Cypress detected that you invoked one or more `cy` commands in a custom command but returned a different value.[​](#Cypress-detected-that-you-invoked-one-or-more-cy-commands-in-a-custom-command-but-returned-a-different-value \"Direct link to Cypress-detected-that-you-invoked-one-or-more-cy-commands-in-a-custom-command-but-returned-a-different-value\")\n\nBecause `cy` commands are asynchronous and are queued to be run later, it doesn't make sense to return anything else.\n\nFor convenience, you can also omit any return value or return `undefined` and Cypress will not error.\n\nIn versions before [0.20.0](https://docs.cypress.io/guides/references/changelog) of Cypress we automatically detected this and forced the `cy` commands to be returned. To make things less magical and clearer, we are now throwing an error.\n\n### Cypress detected that you invoked one or more `cy` commands but returned a different value.[​](#Cypress-detected-that-you-invoked-one-or-more-cy-commands-but-returned-a-different-value \"Direct link to Cypress-detected-that-you-invoked-one-or-more-cy-commands-but-returned-a-different-value\")\n\nBecause cy commands are asynchronous and are queued to be run later, it doesn't make sense to return anything else.\n\nFor convenience, you can also omit any return value or return `undefined` and Cypress will not error.\n\nIn versions before [0.20.0](https://docs.cypress.io/guides/references/changelog) of Cypress we automatically detected this and forced the `cy` commands to be returned. To make things less magical and clearer, we are now throwing an error.\n\n### Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.[​](#Cypress-detected-that-you-returned-a-promise-from-a-command-while-also-invoking-one-or-more-cy-commands-in-that-promise \"Direct link to Cypress-detected-that-you-returned-a-promise-from-a-command-while-also-invoking-one-or-more-cy-commands-in-that-promise\")\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n\n### Cypress detected that you returned a promise in a test, but also invoked one or more `cy` commands inside of that promise.[​](#Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-one-or-more-cy-commands-inside-of-that-promise \"Direct link to Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-one-or-more-cy-commands-inside-of-that-promise\")\n\nWhile this works in practice, it's often indicative of an anti-pattern. You almost never need to return both a promise and also invoke `cy` commands.\n\n`cy` commands themselves are already promise like, and you can likely avoid the use of the separate Promise.\n\n### Cypress detected that you returned a promise in a test, but also invoked a done callback.[​](#Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-a-done-callback \"Direct link to Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-a-done-callback\")\n\nThe version of Mocha was upgraded with Cypress 4.0. Mocha 3+ no longer allows returning a promise and invoking a done callback. Read more about it in the [4.0 migration guide](https://docs.cypress.io/guides/references/migration-guide#Mocha-upgrade).\n\n### CypressError: Timed out retrying: Expected to find element: ‘…’, but never found it. Queried from element: <…>[​](#CypressError-Timed-out-retrying-Expected-to-find-element--but-never-found-it-Queried-from-element- \"Direct link to CypressError-Timed-out-retrying-Expected-to-find-element--but-never-found-it-Queried-from-element-\")\n\nIf you get this error in a case where the element is definitely visible in the DOM, your document might contain malformed HTML. In such cases, `document.querySelector()` will not find any elements that appear after the point where the HTML is malformed. Even if you feel certain your HTML is not malformed anywhere, check it anyway (line by line in the dev tools). Especially if you've exhausted all other possibilities.\n\n## CLI Errors[​](#CLI-Errors \"Direct link to CLI Errors\")\n\n### You passed the `--record` flag but did not provide us your Record Key.[​](#You-passed-the---record-flag-but-did-not-provide-us-your-Record-Key \"Direct link to You-passed-the---record-flag-but-did-not-provide-us-your-Record-Key\")\n\nYou may receive this error when trying to run Cypress tests in [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction). This means that you did not pass a specific record key to: [cypress run --record](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\nSince no record key was passed, Cypress checks for any environment variable with the name `CYPRESS_RECORD_KEY`. In this case, that was also not found.\n\nYou can get your project's record key by locating it in your settings tab in the Cypress app or in [Cypress Cloud](https://on.cypress.io/cloud).\n\nYou will want to then [add the key to your config file or as an environment variable](https://docs.cypress.io/guides/continuous-integration/introduction#Record-tests).\n\n### The `cypress ci` command has been deprecated[​](#The-cypress-ci-command-has-been-deprecated \"Direct link to The-cypress-ci-command-has-been-deprecated\")\n\nAs of version [`0.19.0`](https://docs.cypress.io/guides/references/changelog#0-19-0) and CLI versions `0.13.0`, the `cypress ci` command has been deprecated. We did this to make it clearer what the difference was between a _regular test run_ and a _recorded test run_.\n\nPreviously to record runs you had the environment variable: `CYPRESS_CI_KEY` or you wrote:\n\nYou need to rewrite this as:\n\n```\ncypress run --record --key abc-key-123\n```\n\nIf you were using the environment variable `CYPRESS_CI_KEY`, rename it to`CYPRESS_RECORD_KEY`.\n\nYou can now run and omit the `--key` flag:\n\nWe will automatically apply the record key environment variable.\n\n### A Cached Cypress Binary Could not be found[​](#A-Cached-Cypress-Binary-Could-not-be-found \"Direct link to A-Cached-Cypress-Binary-Could-not-be-found\")\n\nThis error occurs in CI when using `cypress run` without a valid Cypress binary cache installed on the system (on linux that's `~/.cache/Cypress`).\n\nTo fix this error, follow instructions on [caching the cypress binary in CI](https://docs.cypress.io/guides/continuous-integration/introduction#Caching), then bump the version of your CI cache to ensure a clean build.\n\n### Incorrect usage of `--ci-build-id` flag[​](#Incorrect-usage-of---ci-build-id-flag \"Direct link to Incorrect-usage-of---ci-build-id-flag\")\n\nYou passed the `--ci-build-id` flag but did not provide either a [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) or [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag.\n\nThe `--ci-build-id` flag is used to either group or parallelize multiple runs together.\n\nCheck out our [guide on parallelizing runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) and when to use the [\\--ci-build-id](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt) option.\n\n### The `--ci-build-id`, `--group`, `--tag`, `--parallel`, or `--auto-cancel-after-failures` flags can only be used when recording[​](#The---ci-build-id---group---tag---parallel-or---auto-cancel-after-failures-flags-can-only-be-used-when-recording \"Direct link to The---ci-build-id---group---tag---parallel-or---auto-cancel-after-failures-flags-can-only-be-used-when-recording\")\n\nYou passed the `--ci-build-id`, [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt), [\\--tag](https://docs.cypress.io/guides/guides/command-line#cypress-run-tag-lt-tag-gt), [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel), or [\\--auto-cancel-after-failures](https://docs.cypress.io/guides/guides/command-line#auto-cancel-after-runs) flag without also passing the `--record` flag.\n\nThese flags can only be used when recording to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction).\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### We could not determine a unique CI build ID[​](#We-could-not-determine-a-unique-CI-build-ID \"Direct link to We-could-not-determine-a-unique-CI-build-ID\")\n\nYou passed the [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) or [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag but we could not automatically determine or generate a `ciBuildId`.\n\nIn order to use either of these parameters a `ciBuildId` must be determined.\n\nThe `ciBuildId` is automatically detected if you are running Cypress in most [CI providers](https://docs.cypress.io/guides/continuous-integration/ci-provider-examples). Please review the [natively recognized environment variables](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#CI-Build-ID-environment-variables-by-provider) for your CI provider.\n\nYou can avoid this check in the future by passing an ID to the [\\--ci-build-id](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt) flag manually.\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### Group name has already been used for this run[​](#Group-name-has-already-been-used-for-this-run \"Direct link to Group-name-has-already-been-used-for-this-run\")\n\nYou passed the [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) flag, but this group name has already been used for this run.\n\nIf you are trying to parallelize this run, then also pass the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag, else pass a different group name.\n\nPlease review [grouping test runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) documentation to learn more.\n\n### Cannot parallelize tests across environments[​](#Cannot-parallelize-tests-across-environments \"Direct link to Cannot-parallelize-tests-across-environments\")\n\nYou passed the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag, but we do not parallelize tests across different environments.\n\nThis machine is sending different environment parameters than the first machine that started this parallel run.\n\nIn order to run in parallel mode each machine must send identical environment parameters such as:\n\n*   Specs\n*   Operation system name\n*   Operating system version\n*   Browser name\n*   Major browser version\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### Cannot parallelize tests in this group[​](#Cannot-parallelize-tests-in-this-group \"Direct link to Cannot-parallelize-tests-in-this-group\")\n\nYou passed the `--parallel` flag, but this run group was originally created without the `--parallel` flag.\n\nYou cannot use the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag with this group.\n\nPlease review our [grouping test runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) documentation to learn more.\n\n### Run must pass `--parallel` flag[​](#Run-must-pass---parallel-flag \"Direct link to Run-must-pass---parallel-flag\")\n\nYou did not pass the `--parallel` flag, but this run's group was originally created with the `--parallel` flag.\n\nYou must use the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag with this group.\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### Cannot parallelize tests on a stale run[​](#Cannot-parallelize-tests-on-a-stale-run \"Direct link to Cannot-parallelize-tests-on-a-stale-run\")\n\nThis error is thrown when you are attempting to pass the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag to a run that Cypress detected was completed over 24 hours ago.\n\nIn order to uniquely identify each run during `cypress run`, Cypress attempts to read a unique identifier from your CI provider as described in our [parallelization doc](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#CI-Build-ID-environment-variables-by-provider).\n\nYou may encounter this error if Cypress is detecting the exact same CI Build ID matching a previous CI Build ID in a run that was completed over 24 hours ago. You cannot run tests on a run that has been complete for that long. ​ ​You can see the CI Build ID that is detected for each completed run by looking at the details section at the top of your run in [Cypress Cloud](https://on.cypress.io/cloud). ​ ​You can generate and pass in your own unique CI Build ID per run as described [here](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt).\n\nPlease also review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### Run is not accepting any new groups[​](#Run-is-not-accepting-any-new-groups \"Direct link to Run-is-not-accepting-any-new-groups\")\n\nThe run you are attempting access to is already complete and will not accept new groups.\n\nWhen a run finishes all of its groups, it waits for a configurable set of time, [a run completion delay](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Run-completion-delay), before completing. All `cypress run` calls with any new groups must be executed during that time period.\n\n#### Troubleshooting[​](#Troubleshooting \"Direct link to Troubleshooting\")\n\n*   If you are passing [`--ci-build-id`](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt), make sure it is generating a unique value for the run. If it is not unique and matches a previous run, you may see this error.\n*   If you are running `cypress run` calls in parallel and they are not completing within the default 60 second run completion delay, you can increase this delay. [See instructions](https://docs.cypress.io/guides/cloud/account-management/projects#Run-completion-delay).\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### The Cypress App could not be unzipped. This is most likely because the maximum path length is being exceeded on your system.[​](#The-Cypress-App-could-not-be-unzipped-This-is-most-likely-because-the-maximum-path-length-is-being-exceeded-on-your-system \"Direct link to The-Cypress-App-could-not-be-unzipped-This-is-most-likely-because-the-maximum-path-length-is-being-exceeded-on-your-system\")\n\nWhen Cypress is installed, it unzips to the designated cache location on your computer. This error means that Cypress detected that it has exceeded the maximum path length while unzipping Cypress.\n\nThis is common on Windows, where the maximum path length used to be 260 characters.\n\nTo fix this error, enable \"long paths\" on your Windows system:\n\n1.  Go to the Start Menu, and right click on PowerShell. Select \"Run as administrator.\"\n2.  Run this command:\n\n```\nNew-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" `  -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n```\n\n3.  Restart your computer.\n\nThis should get rid of the error. If you are still receiving this error, please [search for an open issue](https://github.com/cypress-io/cypress/issues) or [open a new one](https://github.com/cypress-io/cypress/issues/new/choose).\n\nIf you do not have Powershell available, you can also make this change via regedit or gpedit. [See Microsoft's documentation for details.](https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation)\n\n### error: unknown option: --auto-cancel-after-failures[​](#error-unknown-option---auto-cancel-after-failures \"Direct link to error-unknown-option---auto-cancel-after-failures\")\n\nThe `--auto-cancel-after-failures` flag is only available in Cypress 12.6.0 and later, and must be used with the `cypress run` command.\n\n### \\--auto-cancel-after-failures must be a integer or false[​](#--auto-cancel-after-failures-must-be-a-integer-or-false \"Direct link to --auto-cancel-after-failures-must-be-a-integer-or-false\")\n\nYou passed in an invalid value for the `--auto-cancel-after-failures` flag. It must be an integer or false.\n\n### \\--auto-cancel-after-failures passed without a Business or Enterprise Cloud account[​](#--auto-cancel-after-failures-passed-without-a-Business-or-Enterprise-Cloud-account \"Direct link to --auto-cancel-after-failures-passed-without-a-Business-or-Enterprise-Cloud-account\")\n\nAuto Cancellation is not included in your current billing plan. To enable this service, please visit your billing and upgrade to another plan with Auto Cancellation.\n\n[https://www.cypress.io/pricing/](https://www.cypress.io/pricing/)\n\n### You passed the --auto-cancel-after-failures flag for a run that is already in progress[​](#You-passed-the---auto-cancel-after-failures-flag-for-a-run-that-is-already-in-progress \"Direct link to You-passed-the---auto-cancel-after-failures-flag-for-a-run-that-is-already-in-progress\")\n\nYou passed the `--auto-cancel-after-failures` flag, but this run originally started with a different value on this `--auto-cancel-after-failures` flag.\n\nThe first setting of `--auto-cancel-after-failures` for any given run takes precedent.\n\n## Page Load Errors[​](#Page-Load-Errors \"Direct link to Page Load Errors\")\n\n### Cypress detected a cross-origin error happened on page load[​](#Cypress-detected-a-cross-origin-error-happened-on-page-load \"Direct link to Cypress-detected-a-cross-origin-error-happened-on-page-load\")\n\nThis error means that your application navigated to a superdomain that Cypress was not bound to. Initially when you [`cy.visit()`](https://docs.cypress.io/api/commands/visit), Cypress changes the browser's URL to match the `url` passed to [`cy.visit()`](https://docs.cypress.io/api/commands/visit). This enables Cypress to communicate with your application to bypass all same-origin security policies among other things.\n\nWhen your application navigates to a superdomain outside of the current origin-policy, Cypress is unable to communicate with it, and thus fails.\n\n#### There are a few workarounds to these common situations:[​](#There-are-a-few-workarounds-to-these-common-situations \"Direct link to There are a few workarounds to these common situations:\")\n\n1.  Don't click `<a>` links in your tests that navigate outside of your application. Likely this isn't worth testing anyway. You should ask yourself: _What's the point of clicking and going to another app?_ Likely all you care about is that the `href` attribute matches what you expect. So make an assertion about that. You can see more strategies on testing anchor links [in our \"Tab Handling and Links\" example recipe](https://docs.cypress.io/examples/recipes#Testing-the-DOM).\n    \n2.  You are testing a page that uses Single sign-on (SSO). In this case your web server is likely redirecting you between superdomains, so you receive this error message. You can likely get around this redirect problem by using [`cy.request()`](https://docs.cypress.io/api/commands/request) to manually handle the session yourself.\n    \n\nIf you find yourself stuck and can't work around these issues you can set `chromeWebSecurity` to `false` in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration) when running in Chrome family browsers (this setting will not work in other browsers). Before doing so you should really understand and [read about the reasoning here](https://docs.cypress.io/guides/guides/web-security).\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  chromeWebSecurity: false,})\n```\n\n### Cypress detected that an uncaught error was thrown from a cross-origin script.[​](#Cypress-detected-that-an-uncaught-error-was-thrown-from-a-cross-origin-script \"Direct link to Cypress-detected-that-an-uncaught-error-was-thrown-from-a-cross-origin-script\")\n\nCheck your Developer Tools Console for the actual error - it should be printed there.\n\nIt's possible to enable debugging these scripts by adding the `crossorigin` attribute and setting a `CORS` header.\n\n## Browser Errors[​](#Browser-Errors \"Direct link to Browser Errors\")\n\n### The browser process running your tests just exited unexpectedly[​](#The-browser-process-running-your-tests-just-exited-unexpectedly \"Direct link to The-browser-process-running-your-tests-just-exited-unexpectedly\")\n\nThis error can occur whenever Cypress detects that the launched browser has exited or crashed before the tests could finish running.\n\nThis can happen for a number of reasons, including:\n\n*   The browser was exited manually, by clicking the \"Quit\" button or otherwise\n*   Your test suite or application under test is starving the browser of resources.\n*   Cypress is running in a memory-starved environment\n*   The browser is testing a memory-heavy application\n*   There are problems with the GPU / GPU drivers\n*   There is a bug in the browser involving memory management\n*   There is a memory leak in Cypress\n\nFor Chromium-based browsers, you can try enabling [experimentalMemoryManagement](https://docs.cypress.io/guides/references/experiments).\n\nIf you are running in `open` mode, you can also try lowering [numTestsKeptInMemory](https://docs.cypress.io/guides/references/configuration#Global).\n\nIf the browser running Cypress tests crashes, Cypress will abort any remaining tests and print out this error.\n\n## Cypress App errors[​](#Cypress-App-errors \"Direct link to Cypress App errors\")\n\n### Whoops, we can't run your tests[​](#Whoops-we-cant-run-your-tests \"Direct link to Whoops-we-cant-run-your-tests\")\n\nThis error happens when Cypress detects that the browser automation is not connected, or that Cypress's internal proxy is being bypassed. This is caused by one of the following:\n\n**A policy setting blocks the Cypress proxy server or browser extension**\n\n*   See [Cypress detected policy settings on your computer that may cause issues](#Cypress-detected-policy-settings-on-your-computer-that-may-cause-issues).\n\n**The `--proxy-server` or `--load-extension` arguments have been changed**\n\n*   When adding a plugin with the [Browser Launch API](https://docs.cypress.io/api/plugins/browser-launch-api), it's possible for a necessary command-line argument to be changed. If you're running into this error, you can troubleshoot by inspecting `args` before and after the plugin runs, either by using `console.log()` or by [printing DEBUG logs](https://docs.cypress.io/guides/references/troubleshooting#Print-DEBUG-logs) with `DEBUG=cypress:server:plugins,cypress:server:plugins:*`.\n\n**You visit the Cypress proxy URL outside of a Cypress browser.**\n\n*   Don't copy the URL you see when launching a Cypress browser from the Cypress App and open it in a non-Cypress browser. If you want to run your tests in a different browser, follow the instructions in the [Cross Browser Testing](https://docs.cypress.io/guides/guides/cross-browser-testing) guide.\n\n### Cannot connect to API server[​](#Cannot-connect-to-API-server \"Direct link to Cannot-connect-to-API-server\")\n\nLogging in, viewing runs, and setting up new projects to record requires connecting to an external API server. This error displays when we failed to connect to the API server.\n\nThis error likely appeared because:\n\n1.  You do not have internet. Please ensure you have connectivity then try again.\n2.  You are a developer that has forked our codebase and do not have access to run our API locally. Please read more about this in our [contributing doc](https://on.cypress.io/contributing).\n\n### Cypress detected policy settings on your computer that may cause issues[​](#Cypress-detected-policy-settings-on-your-computer-that-may-cause-issues \"Direct link to Cypress-detected-policy-settings-on-your-computer-that-may-cause-issues\")\n\nWhen Cypress launches Chrome, it attempts to launch it with a custom proxy server and browser extension. Certain group policies (GPOs) on Windows can prevent this from working as intended, which can cause tests to break.\n\nIf your administrator has set any of the following Chrome GPOs, it can prevent your tests from running in Chrome:\n\n*   Proxy policies: `ProxySettings, ProxyMode, ProxyServerMode, ProxyServer, ProxyPacUrl, ProxyBypassList`\n*   Extension policies: `ExtensionInstallBlacklist, ExtensionInstallWhitelist, ExtensionInstallForcelist, ExtensionInstallSources, ExtensionAllowedTypes, ExtensionAllowInsecureUpdates, ExtensionSettings, UninstallBlacklistedExtensions`\n\nHere are some potential workarounds:\n\n1.  Ask your administrator to disable these policies so that you can use Cypress with Chrome.\n2.  Use the built-in Electron browser for tests, since it is not affected by these policies. [See the guide to launching browsers for more information.](https://docs.cypress.io/guides/guides/launching-browsers#Electron-Browser)\n3.  Try using Chromium instead of Google Chrome for your tests, since it may be unaffected by GPO. You can [download the latest Chromium build here.](https://download-chromium.appspot.com/)\n4.  If you have Local Administrator access to your computer, you may be able to delete the registry keys that are affecting Chrome. Here are some instructions:\n    1.  Open up Registry Editor by pressing WinKey+R and typing `regedit.exe`\n    2.  Look in the following locations for the policy settings listed above:\n        *   `HKEY_LOCAL_MACHINE\\Software\\Policies\\Google\\Chrome`\n        *   `HKEY_LOCAL_MACHINE\\Software\\Policies\\Google\\Chromium`\n        *   `HKEY_CURRENT_USER\\Software\\Policies\\Google\\Chrome`\n        *   `HKEY_CURRENT_USER\\Software\\Policies\\Google\\Chromium`\n    3.  Delete or rename any policy keys found. _Make sure to back up your registry before making any changes._\n\n### Uncaught exceptions from your application[​](#Uncaught-exceptions-from-your-application \"Direct link to Uncaught-exceptions-from-your-application\")\n\nWhen Cypress detects an uncaught exception in your application, it will fail the currently running test.\n\nYou can turn off this behavior globally or conditionally with the `uncaught:exception` event. Please see the [Catalog of Events](https://docs.cypress.io/api/cypress-api/catalog-of-events#Uncaught-Exceptions) for examples.\n\nOn a technical note, Cypress considers uncaught exceptions to be any error that is uncaught by your application, whether they are \"standard\" errors or unhandled promise rejections. If the error triggers the window's global `error` handler or its `unhandledrejection` handler, Cypress will detect it and fail the test.",
  "title": "Error Messages | Cypress Documentation",
  "description": "Test File Errors",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/experiments",
  "markdown": "# Experiments | Cypress Documentation\n\nIf you'd like to try out what we're working on in Cypress, you can enable specific experimental features for your project using the Cypress configuration options described below.\n\ncaution\n\n⚠️ The experimental features might change or ultimately be removed without making it into the core product. Our primary goal for experiments is to collect real-world feedback during their development. For more information, see the documentation for all [Cypress Release Stages](https://docs.cypress.io/guides/references/release-stages).\n\n## Configuration[​](#Configuration \"Direct link to Configuration\")\n\nYou can pass the [Cypress configuration](https://docs.cypress.io/guides/references/configuration) options below to enable or disable experiments. See our [Configuration Guide](https://docs.cypress.io/guides/references/configuration) on how to pass configuration to Cypress.\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `experimentalCspAllowList` | `false` | Indicates the Content-Security-Policy directives to be permitted during a test run. See [Content-Security-Policy](https://docs.cypress.io/guides/guides/content-security-policy) for more information. |\n| `experimentalFetchPolyfill` | `false` | Automatically replaces `window.fetch` with a polyfill that Cypress can spy on and stub. Note: `experimentalFetchPolyfill` has been deprecated in Cypress 6.0.0 and will be removed in a future release. Consider using [cy.intercept()](https://docs.cypress.io/api/commands/intercept) to intercept `fetch` requests instead. |\n| `experimentalInteractiveRunEvents` | `false` | Allows listening to the [`before:run`](https://docs.cypress.io/api/plugins/before-run-api), [`after:run`](https://docs.cypress.io/api/plugins/after-run-api), [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api), and [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) events in the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function during interactive mode. |\n| `experimentalMemoryManagement` | `false` | Enables support for improved memory management within Chromium-based browsers. |\n| `experimentalModifyObstructiveThirdPartyCode` | `false` | Whether Cypress will search for and replace obstructive code in third party `.js` or `.html` files. NOTE: Setting this flag removes [Subresource Integrity (SRI)](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity). |\n| `experimentalSourceRewriting` | `false` | Enables AST-based JS/HTML rewriting. This may fix issues caused by the existing regex-based JS/HTML replacement algorithm. See [#5273](https://github.com/cypress-io/cypress/issues/5273) for details. |\n| `experimentalWebKitSupport` | `false` | Enable experimental support for running tests in WebKit. When set, installs of `playwright-webkit` will be detected and available in Cypress. See [Launching Browsers](https://docs.cypress.io/guides/guides/launching-browsers#WebKit-Experimental) for more information. |\n| `retries.experimentalStrategy` | N/A | Applies a strategy for test retries according to your \"flake tolerance\"; options are detect-flake-but-always-fail or detect-flake-and-pass-on-threshold. See [Experimental Retries](https://docs.cypress.io/guides/references/experiments#Experimental-Flake-Detection-Features) for more details. |\n| `retries.experimentalOptions` | N/A | Sets retries strategy-specific options like maxRetries, passesRequired, and stopIfAnyPassed. See [Experimental Retries](https://docs.cypress.io/guides/references/experiments#Experimental-Flake-Detection-Features) for more details. |\n\n### Experimental CSP Allow List[​](#Experimental-CSP-Allow-List \"Direct link to Experimental CSP Allow List\")\n\nCypress by default strips all CSP headers (`Content-Security-Policy` and `Content-Security-Policy-Report-Only`) from the response before it is sent to the browser. The `experimentalCspAllowList` option allows for more granular control over which CSP directives are stripped from the CSP response headers, allowing you to test your application with CSP enabled. Valid values for this option are `false` (the default), `true`, or an array of CSP directive names.\n\n| Value | Example |\n| --- | --- |\n| [`false` (default)](#Strip-All-CSP-Headers) | `experimentalCspAllowList=false` |\n| [`true`](#Strip-Minimum-CSP-Directives) | `experimentalCspAllowList=true` |\n| [`<CspDirectives>[]`](#Allow-Specific-CSP-Directives) | `experimentalCspAllowList=[\"default-src\",\"script-src\"]` |\n\nThe value `experimentalCspAllowList=false` (default) will remove all CSP headers from the response before it is sent to the browser. This option should be used if you do not depend on CSP for any tests in your application.\n\n#### Strip Minimum CSP Directives[​](#Strip-Minimum-CSP-Directives \"Direct link to Strip Minimum CSP Directives\")\n\nIf you need to test your application with CSP enabled, setting the `experimentalCspAllowList` option will allow all CSP headers to be sent to the browser __except__ those that could prevent Cypress from functioning normally.\n\nThe following CSP directives will always be stripped:\n\n| Stripped Directive | Allowable | Reason |\n| --- | --- | --- |\n| `frame-ancestors` | No  | Prevents Cypress from loading a test application into an iframe. |\n| `navigate-to` | No  | Affects Cypress' ability to navigate to different URLs. |\n| `require-trusted-types-for` | No  | Might prevent Cypress from rewriting the DOM. |\n| `sandbox` | No  | Can restrict access to script and iframe functionality. |\n| `trusted-types` | No  | Could cause Cypress injections to be marked as untrusted. |\n\nWhen `experimentalCspAllowList=true` the following directives are also stripped in addition to the ones listed above, but can be configured to be allowed to be sent to the browser:\n\n| Stripped Directive | Allowable | Reason |\n| --- | --- | --- |\n| `child-src` | Yes | Could prevent iframes from loading in combination with other Cypress options. |\n| `default-src` | Yes | Conditionally prevents Cypress from loading scripts and running. |\n| `frame-src` | Yes | Could prevent iframes from loading in combination with other Cypress options. |\n| `form-action` | Yes | Can prevent Cypress from monitoring form events. |\n| `script-src` | Yes | Conditionally prevents Cypress from loading scripts and running. |\n| `script-src-elem` | Yes | Conditionally prevents Cypress from loading scripts and running. |\n\n#### Allow Specific CSP Directives[​](#Allow-Specific-CSP-Directives \"Direct link to Allow Specific CSP Directives\")\n\nSet the `experimentalCspAllowList` option to an array of directive names marked as \"Allowable\" from the list above. This will allow the specified CSP directives to be sent to the browser.\n\nThe following configuration would allow the `default-src`, `script-src`, and `script-src-elem` directives to be sent to the browser:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  experimentalCspAllowList: ['default-src', 'script-src', 'script-src-elem'],})\n```\n\ncaution\n\nDefining `experimentalCspAllowList` __may__ cause Cypress to be unable to run tests against your application. If you experience issues, reduce the directives specified in your allow list to identify which directive is causing issues.\n\nThere is a known issue when using certain directives containing hash algorithm values and the `modifyObstructiveCode` and/or `experimentalSourceRewriting` options. Using these options in combination with the `experimentalCspAllowList` option can cause a mismatch between the original hashed directive value, and the modified HTML or JS value.\n\n## Experimental Flake Detection Features[​](#Experimental-Flake-Detection-Features \"Direct link to Experimental Flake Detection Features\")\n\n### Experimental Test Retries[​](#Experimental-Test-Retries \"Direct link to Experimental Test Retries\")\n\n[Test retries](https://docs.cypress.io/guides/guides/test-retries) is a Cypress [Flake Detection](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Detection) feature that enables you to re-attempt any tests that initially fail. The failure may not be a \"true\" failure, i.e. flaky. The only way to determine this is to retry the test.\n\nNormally, test retries simply stop on the first passing attempt. And the final test result of any flaky test is always \"passing\", regardless of how many prior attempts failed. The following experimental settings for retries give you more control over the retries process.\n\nThere are two strategies for retries:\n\n*   `detect-flake-and-pass-on-threshold`\n*   `detect-flake-but-always-fail`\n\nThe `detect-flake-and-pass-on-threshold` strategy is most like the current implementation of retries, where failing tests have a \"chance\" to still pass, but still detect flake. But this new experimental strategy also enables you to now set a threshold of passing attempts to achieve a passing final result. And if you want to ensure flaky tests are treated with the same urgency as failing tests, then you will prefer to use the `detect-flake-but-always-fail` strategy, which assures that every flaky test is still marked as failing.\n\n#### `experimentalStrategy: 'detect-flake-and-pass-on-threshold'`[​](#experimentalStrategy-detect-flake-and-pass-on-threshold \"Direct link to experimentalStrategy-detect-flake-and-pass-on-threshold\")\n\nSetting `experimentalStrategy: 'detect-flake-and-pass-on-threshold'` within retries will give you ability to set how many passing attempts are required for the test result to be passing. There are two `experimentalOptions` that must be set with this strategy:\n\n*   `maxRetries` sets the maximum number of retries that can occur after the first attempt failed\n*   `passesRequired` sets the required number of passing attempts for the final test result to be passing. Cannot be greater than `maxRetries`.\n    *   `passesRequired` also determines how the retries may stop before `maxRetries` is reached; either if the number of passing attempts so far has met the `passesRequired` condition or if the number of failing attempts exceeds the difference between `maxRetries` and `passesRequired` (when it's impossible to achieve the passing result).\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  retries: {    experimentalStrategy: 'detect-flake-and-pass-on-threshold',    experimentalOptions: {      maxRetries: 2,      passesRequired: 2,    },    // you must also explicitly set openMode and runMode to    // either true or false when using experimental retries    openMode: true,    runMode: true,  },})\n```\n\nExamples of the above configuration's results:\n\n**Scenario 1:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Pass\n*   Attempt 3: Fail\n\nThe retries stop on attempt 3, since `maxRetries: 2` is now met and the test's final result is **failing** and **flaky**. Only one attempt passed, but two are needed to pass.\n\n**Scenario 2:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Pass\n*   Attempt 3: Pass\n\nRetries stop at attempt 3 again, and the test is **passing** and **flaky**, since there are now two passing attempts.\n\n**Scenario 3:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Fail\n\nRetries stop on attempt 2, and the test is **failing** , because the requisite two passing attempts for a passing result can no longer be achieved once the 1st retry failed. It's also **not flaky**, since there were no passing attempts.\n\n#### `experimentalStrategy: 'detect-flake-but-always-fail'`[​](#experimentalStrategy-detect-flake-but-always-fail \"Direct link to experimentalStrategy-detect-flake-but-always-fail\")\n\nSetting `experimentalStrategy: 'detect-flake-but-always-fail'` within retries ensures any test with any failed attempt will always end with a failing final result. There are two `experimentalOptions` that must be set in this strategy:\n\n*   `maxRetries` sets the maximum number of retries that can occur after the first attempt failed\n*   `stopIfAnyPassed` will stop the retries before `maxRetries` is reached when there is any passing attempt.\n    *   `stopIfAnyPassed` causes retries to exit as soon as any flake is detected (a test that is retrying after a failure only needs to pass once to exhibit flaky behavior). However it may help to see more retry attempts, such as when the failure mode is also non-deterministic and more of these different errors are revealed on more retries, in which case `stopIfAnyPassed: false` may be desirable.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  retries: {    experimentalStrategy: 'detect-flake-but-always-fail',    experimentalOptions: {      maxRetries: 2,      stopIfAnyPassed: true,    },    // you must also explicitly set openMode and runMode to    // either true or false when using experimental retries    openMode: true,    runMode: true,  },})\n```\n\nExamples of the above configuration's results:\n\n**Scenario 1:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Fail\n*   Attempt 3: Fail\n\nThe retries stop on attempt 3, since `maxRetries: 2` is now met and the test is **failing** , but also **not flaky**.\n\n**Scenario 2:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Pass\n\nRetries stop on the first retry, due to the passing attempt. The test is **failing** and **flaky**. If `stopIfAnyPassed` was `false`, then the retries would have proceeded once more.\n\ncaution\n\n**Note:** Experimental retries can only be configured at the global level and **not** per individual test, whereas non-experimental `retries` [can be configured per test](https://docs.cypress.io/guides/guides/test-retries#Individual-Tests). If you configure retries on a per-test basis while using experimental retries globally, that particular test's `retries` configuration will override the experimental retries and ignore it.\n\nAlso, while using experimental retries, you cannot set numeric values for `openMode` or `runMode` [at the global level](https://docs.cypress.io/guides/guides/test-retries#Global-Configuration). You can instead set `true` or `false` for each.\n\ninfo\n\nIf you have any feedback for the experimental retries feature, please use [this form](https://share.hsforms.com/1pCBMIbQjQwKY_f2qcdLVzw3a4za).\n\n## Testing Type-Specific Experiments[​](#Testing-Type-Specific-Experiments \"Direct link to Testing Type-Specific Experiments\")\n\nYou can provide configuration options for either E2E or Component Testing by creating `e2e` and `component` objects inside your Cypress configuration.\n\n### End-to-End Testing[​](#End-to-End-Testing \"Direct link to End-to-End Testing\")\n\nThese experiments are available to be specified inside the `e2e` configuration object:\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `experimentalStudio` | `false` | Generate and save commands directly to your test suite by interacting with your app as an end user would. |\n| `experimentalRunAllSpecs` | `false` | Enables the \"Run All Specs\" UI feature, allowing the execution of multiple specs sequentially. |\n| `experimentalOriginDependencies` | `false` | Enables support for `Cypress.require` within `cy.origin`. |\n| `experimentalSkipDomainInjection` | `null` | Removes injecting `document.domain` into `text/html` pages for any sites that match the provided patterns. |\n\n#### Experimental Skip Domain Injection[​](#Experimental-Skip-Domain-Injection \"Direct link to Experimental Skip Domain Injection\")\n\nUnder the hood, Cypress [injects document.domain](https://docs.cypress.io/guides/guides/web-security#Examples-of-what-Cypress-does-under-the-hood) into your test application to lessen the burden of navigation. This is well described in our [Cross Origin Testing](https://docs.cypress.io/guides/guides/cross-origin-testing) guide. However, some sites have compatibility issues with this feature.\n\nThe `experimentalSkipDomainInjection` option disables injecting `document.domain` inside Cypress. When enabled, all cross-origin/subdomain navigation must use `cy.origin()`, which may make tests a bit more verbose. We only recommend including your site pattern if you are having issues running Cypress out of the box and suspect setting `document.domain` is interfering with your site's ability to render properly.\n\nBefore enabling, verify your application is not implementing frame busting techniques, which you can mitigate with the [`modifyObstructiveCode`](https://docs.cypress.io/guides/references/configuration#modifyObstructiveCode) and [`experimentalModifyObstructiveThirdPartyCode`](https://docs.cypress.io/guides/guides/web-security#Modifying-Obstructive-Third-Party-Code) flags.\n\nAt this point in time, we are aware of the following sites that require the `experimentalSkipDomainInjection` option to be set to be tested properly:\n\n*   Google\n*   Salesforce\n\nThis flag can be enabled by passing an array of origin URLs or [minimatch](https://github.com/isaacs/minimatch) glob patterns:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    experimentalSkipDomainInjection: [      '*.salesforce.com',      '*.force.com',      '*.google.com',    ],  },})\n```\n\nIf using other Salesforce domains, such as [enhanced domains](https://help.salesforce.com/s/articleView?id=sf.domain_name_enhanced.htm&type=5), you will need to add the correct matching glob pattern.\n\n### Component Testing[​](#Component-Testing \"Direct link to Component Testing\")\n\nThese experiments are available to be specified inside the `component` configuration object:\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `experimentalSingleTabRunMode` | `false` | Run all specs in a single tab, instead of creating a new tab per spec. This can improve run mode performance, but can impact spec isolation and reliability on large test suites. |\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [13.4.0](https://docs.cypress.io/guides/references/changelog#13-4-0) | Added support for configuring the Experimental Flake Detection strategy via `retries.experimentalStrategy` and `retries.experimentalOptions`. |\n| [12.6.0](https://docs.cypress.io/guides/references/changelog#12-6-0) | Removed `require`/`import` and added `Cypress.require` for `experimentalOriginDependencies`. |\n| [12.4.0](https://docs.cypress.io/guides/references/changelog#12-4-0) | Added `experimentalSkipDomainInjection` and `experimentalMemoryManagement`. |\n| [12.0.0](https://docs.cypress.io/guides/references/changelog#12-0-0) | Removed `experimentalSessionAndOrigin` and made it the default behavior. Added `experimentalOriginDependencies`. |\n| [11.2.0](https://docs.cypress.io/guides/references/changelog#11-2-0) | Added `experimentalRunAllSpecs`. |\n| [10.8.0](https://docs.cypress.io/guides/references/changelog#10-8-0) | Added `experimentalWebKitSupport`. |\n| [10.6.0](https://docs.cypress.io/guides/references/changelog#10-6-0) | Added support for `experimentalSingleTabRunMode`. |\n| [10.4.0](https://docs.cypress.io/guides/references/changelog#10-4-0) | Added support for `experimentalModifyObstructiveThirdPartyCode`. |\n| [9.6.0](https://docs.cypress.io/guides/references/changelog#9-6-0) | Added support for `experimentalSessionAndOrigin` and removed `experimentalSessionSupport`. |\n| [8.2.0](https://docs.cypress.io/guides/references/changelog#8-2-0) | Added support for `experimentalSessionSupport`. |\n| [7.1.0](https://docs.cypress.io/guides/references/changelog#7-1-0) | Added support for `experimentalInteractiveRunEvents`. |\n| [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0) | Removed `experimentalComponentTesting` and made it the default behavior. |\n| [6.7.0](https://docs.cypress.io/guides/references/changelog#6-7-0) | Removed `experimentalRunEvents` and made it the default behavior. |\n| [6.3.0](https://docs.cypress.io/guides/references/changelog#6-3-0) | Added support for `experimentalStudio`. |\n| [6.2.0](https://docs.cypress.io/guides/references/changelog#6-2-0) | Added support for `experimentalRunEvents`. |\n| [6.0.0](https://docs.cypress.io/guides/references/changelog#6-0-0) | Removed `experimentalNetworkStubbing` and made it the default behavior when using [cy.intercept()](https://docs.cypress.io/api/commands/intercept). |\n| [6.0.0](https://docs.cypress.io/guides/references/changelog#6-0-0) | Deprecated `experimentalFetchPolyfill`. |\n| [5.2.0](https://docs.cypress.io/guides/references/changelog#5-2-0) | Removed `experimentalShadowDomSupport` and made it the default behavior. |\n| [5.1.0](https://docs.cypress.io/guides/references/changelog#5-1-0) | Added support for `experimentalNetworkStubbing`. |\n| [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) | Removed `experimentalGetCookiesSameSite` and made it the default behavior. |\n| [4.9.0](https://docs.cypress.io/guides/references/changelog#4-9-0) | Added support for `experimentalFetchPolyfill`. |\n| [4.8.0](https://docs.cypress.io/guides/references/changelog#4-8-0) | Added support for `experimentalShadowDomSupport`. |\n| [4.6.0](https://docs.cypress.io/guides/references/changelog#4-6-0) | Added support for `experimentalSourceRewriting`. |\n| [4.5.0](https://docs.cypress.io/guides/references/changelog#4-5-0) | Added support for `experimentalComponentTesting`. |\n| [4.3.0](https://docs.cypress.io/guides/references/changelog#4-3-0) | Added support for `experimentalGetCookiesSameSite`. |",
  "title": "Experiments | Cypress Documentation",
  "description": "If you'd like to try out what we're working on in Cypress, you can enable",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/overview",
  "markdown": "# Cypress Component Testing | Cypress Documentation\n\nCypress Component Testing provides a component workbench for you to quickly build and test components from multiple front-end UI libraries — no matter how simple or complex.\n\n## Quick Example[​](#Quick-Example \"Direct link to Quick Example\")\n\nBelow is a minimal test to assert that a button component has the correct text:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nimport Button from './Button'it('uses custom text for the button label', () => {  cy.mount(<Button>Click me!</Button>)  cy.get('button').should('contains.text', 'Click me!')})\n```\n\nLearn more about how to test components for [React](https://docs.cypress.io/guides/component-testing/react/overview), [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), [Vue](https://docs.cypress.io/guides/component-testing/vue/overview), and [Svelte](https://docs.cypress.io/guides/component-testing/svelte/overview).\n\nOur Test Runner is browser-based, allowing you to test not only your component's functionality but also styles and appearance. You can visually see your component in action and interact with it in the test runner:\n\nYou can use the browser developer tools to inspect the DOM, play around with styles, and use the debugger to step through your code.\n\nAnd since this is Cypress, you get the same APIs, plugins, and ecosystem you are used to with end-to-end testing to create component tests.\n\n## Supported Frameworks[​](#Supported-Frameworks \"Direct link to Supported Frameworks\")\n\nCypress currently has official mounting libraries for [React](https://docs.cypress.io/guides/component-testing/react/overview), [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), [Vue](https://docs.cypress.io/guides/component-testing/vue/overview), and [Svelte](https://docs.cypress.io/guides/component-testing/svelte/overview) and support for the following development servers and frameworks:\n\n| Framework | UI Library | Bundler |\n| --- | --- | --- |\n| [Create React App 4+](https://docs.cypress.io/guides/component-testing/react/overview#Create-React-App-CRA) | React 16+ | Webpack 4+ |\n| [Next.js 11+](https://docs.cypress.io/guides/component-testing/react/overview#Nextjs) | React 16+ | Webpack 5 |\n| [React with Vite](https://docs.cypress.io/guides/component-testing/react/overview#React-with-Vite) | React 16+ | Vite 2+ |\n| [React with Webpack](https://docs.cypress.io/guides/component-testing/react/overview#React-with-Webpack) | React 16+ | Webpack 4+ |\n| [Vue CLI](https://docs.cypress.io/guides/component-testing/vue/overview#Vue-CLI) | Vue 2+ | Webpack 4+ |\n| [Nuxt 2](https://docs.cypress.io/guides/component-testing/vue/overview#Nuxt) Alpha | Vue 2+ | Webpack 4+ |\n| [Vue with Vite](https://docs.cypress.io/guides/component-testing/vue/overview#Vue-with-Vite) | Vue 2+ | Vite 2+ |\n| [Vue with Webpack](https://docs.cypress.io/guides/component-testing/vue/overview#Vue-with-Webpack) | Vue 2+ | Webpack 4+ |\n| [Angular](https://docs.cypress.io/guides/component-testing/angular/overview#Framework-Configuration) | Angular 13+ | Webpack 5 |\n| [Svelte with Vite](https://docs.cypress.io/guides/component-testing/svelte/overview#Svelte-with-Vite) Alpha | Svelte 3+ | Vite 2+ |\n| [Svelte with Webpack](https://docs.cypress.io/guides/component-testing/svelte/overview#Svelte-with-Webpack) Alpha | Svelte 3+ | Webpack 4+ |\n\nThe following integrations are built and maintained by Cypress community members.\n\n| Framework | UI Library | Bundler |\n| --- | --- | --- |\n| [Qwik](https://github.com/qwikifiers/cypress-qwik) Community | Qwik | Vite |\n| [Lit](https://github.com/redfox-mx/cypress-lit) Community | Lit | Vite |\n\n## Component Testing vs. End-to-End Testing[​](#Component-Testing-vs-End-to-End-Testing \"Direct link to Component Testing vs. End-to-End Testing\")\n\nWe cover the differences between component and end-to-end testing in-depth in the [Choosing a Testing Type](https://docs.cypress.io/guides/core-concepts/testing-types) guide.\n\nBut in short, Cypress Component Testing uses the same test runner, commands, and API to test components instead of pages.\n\nThe primary difference is that Cypress Component Testing builds your components using a development server instead of rendering within a complete website, which results in faster tests and fewer dependencies on infrastructure than end-to-end tests covering the same code paths.\n\nCypress's API is user-centric and built for testing anything that renders on the web. Therefore, many of your tests will appear framework-agnostic and **approachable for developers coming from any background**.\n\nFor additional reading, we encourage folks to check out the [Component Driven](https://componentdriven.org/) organization, which talks about the pros of component-driven development and may aid you when trying to figure out if you should be taking a page-based or component-based approach to building and testing a given feature.",
  "title": "Cypress Component Testing | Cypress Documentation",
  "description": "Cypress Component Testing provides a component workbench for you to quickly",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/network-requests",
  "markdown": "# Network Requests | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress enables you to stub out the back end with [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept)\n*   What tradeoffs we make when we stub our network requests\n*   How Cypress visualizes network management in the Command Log\n*   How to use Aliases to refer back to requests and wait on them\n*   How to write declarative tests that resist flake\n\ninfo\n\n**Note:** If you're looking for a resource to make an HTTP request take a look at [cy.request()](https://docs.cypress.io/api/commands/request)\n\n## Testing Strategies[​](#Testing-Strategies \"Direct link to Testing Strategies\")\n\nCypress helps you test the entire lifecycle of HTTP requests within your application. Cypress provides you access to the objects with information about the request, enabling you to make assertions about its properties. Additionally you can even stub and mock a request's response.\n\n**_Common testing scenarios:_**\n\n*   Asserting on a request's body\n*   Asserting on a request's url\n*   Asserting on a request's headers\n*   Stubbing a response's body\n*   Stubbing a response's status code\n*   Stubbing a response's headers\n*   Delaying a response\n*   Waiting for a response to happen\n\nWithin Cypress, you have the ability to choose whether to stub responses or allow them to actually hit your server. You can also mix and match within the same test by choosing to stub certain requests, while allowing others to hit your server.\n\nLet's investigate both strategies, why you would use one versus the other, and why you should regularly use both.\n\n### Use Server Responses[​](#Use-Server-Responses \"Direct link to Use Server Responses\")\n\nRequests that are not stubbed actually reach your server. By _not_ stubbing your responses, you are writing true _end-to-end_ tests. This means you are driving your application the same way a real user would.\n\n> When requests are not stubbed, this guarantees that the _contract_ between your client and server is working correctly.\n\nIn other words, you can have confidence your server is sending the correct data in the correct structure to your client to consume. It is a good idea to have _end-to-end_ tests around your application's _critical paths_. These typically include user login, signup, or other critical paths such as billing.\n\n**_There are downsides to not stubbing responses you should be aware of:_**\n\n*   Since no responses are stubbed, that means **your server has to actually send real responses**. This can be problematic because you may have to _seed a database_ before every test to generate state. For instance, if you were testing _pagination_, you'd have to seed the database with every object that it takes to replicate this feature in your application.\n*   Since real responses go through every single layer of your server (controllers, models, views, etc) the tests are often **much slower** than stubbed responses.\n\nIf you are writing a traditional server-side application where most of the responses are HTML you will likely have few stubbed responses. However, most modern applications that serve JSON can take advantage of stubbing.\n\ntip\n\n**Benefits**\n\n*   More likely to work in production\n*   Test coverage around server endpoints\n*   Great for traditional server-side HTML rendering\n\ndanger\n\n**Downsides**\n\n*   Requires seeding data\n*   Much slower\n*   Harder to test edge cases\n\ninfo\n\n**Suggested Use**\n\n*   Use sparingly\n*   Great for the _critical paths_ of your application\n*   Helpful to have one test around the _happy path_ of a feature\n\n### Stub Responses[​](#Stub-Responses \"Direct link to Stub Responses\")\n\nStubbing responses enables you to control every aspect of the response, including the response `body`, the `status`, `headers`, and even network `delay`. Stubbing is extremely fast, most responses will be returned in less than 20ms.\n\nnote\n\nStubbing responses is a great way to control the data that is returned to your client.\n\nYou don't have to do any work on the server. Your application will have no idea its requests are being stubbed, so there are _no code changes_ needed.\n\ntip\n\n**Benefits**\n\n*   Control of response bodies, status, and headers\n*   Can force responses to take longer to simulate network delay\n*   No code changes to your server or client code\n*   Fast, < 20ms response times\n\ndanger\n\n**Downsides**\n\n*   No guarantee your stubbed responses match the actual data the server sends\n*   No test coverage on some server endpoints\n*   Not as useful if you're using traditional server side HTML rendering\n\ninfo\n\n**Suggested Use**\n\n*   Use for the vast majority of tests\n*   Mix and match, typically have one true end-to-end test, and then stub the rest\n*   Perfect for JSON APIs\n\ninfo\n\n### Real World Example[​](#Real-World-Example \"Direct link to Real-World-Example\")\n\nThe Cypress [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) end-to-end tests predominately rely on server responses, and only stub network responses [on a few occasions](https://github.com/cypress-io/cypress-realworld-app/blob/07a6483dfe7ee44823380832b0b23a4dacd72504/cypress/tests/ui/notifications.spec.ts#L250-L264) to conveniently **create edge-case** or **hard-to-create application states**.\n\nThis practice allows the project to achieve full [code-coverage](https://docs.cypress.io/guides/tooling/code-coverage) for the front end _and back end_ of the app, but this has also required creating intricate database seeding or test data factory scripts that can generate appropriate data in compliance with the business-logic of the app.\n\nCheck out any of the [Real World App test suites](https://github.com/cypress-io/cypress-realworld-app/tree/develop/cypress/tests/ui) to see Cypress network handling in action.\n\n## Stubbing[​](#Stubbing \"Direct link to Stubbing\")\n\nCypress enables you to stub a response and control the `body`, `status`, `headers`, or even delay.\n\n[`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) is used to control the behavior of HTTP requests. You can statically define the body, HTTP status code, headers, and other response characteristics.\n\ninfo\n\nSee [cy.intercept()](https://docs.cypress.io/api/commands/intercept) for more information and for examples on stubbing responses.\n\n## Routing[​](#Routing \"Direct link to Routing\")\n\n```\ncy.intercept(  {    method: 'GET', // Route all GET requests    url: '/users/*', // that have a URL that matches '/users/*'  },  [] // and force the response to be: []).as('getUsers') // and assign an alias\n```\n\nWhen you use [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) to define a route, Cypress displays this under \"Routes\" in the Command Log.\n\n![Routing Table](https://docs.cypress.io/img/guides/network-requests/v10/server-routing-table.png)\n\nWhen a new test runs, Cypress will restore the default behavior and remove all routes and stubs. For a complete reference of the API and options, refer to the documentation for [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept).\n\n## Fixtures[​](#Fixtures \"Direct link to Fixtures\")\n\nA fixture is a fixed set of data located in a file that is used in your tests. The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable. Fixtures are accessed within tests by calling the [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) command.\n\nWith Cypress, you can stub network requests and have it respond instantly with fixture data.\n\nWhen stubbing a response, you typically need to manage potentially large and complex JSON objects. Cypress allows you to integrate fixture syntax directly into responses.\n\n```\n// we set the response to be the activites.json fixturecy.intercept('GET', '/activities/*', { fixture: 'activities.json' })\n```\n\n### Organizing[​](#Organizing \"Direct link to Organizing\")\n\nCypress automatically scaffolds out a suggested folder structure for organizing your fixtures on every new project. By default it will create an `example.json` file when you add your project to Cypress.\n\n```\n/cypress/fixtures/example.json\n```\n\nYour fixtures can be further organized within additional folders. For instance, you could create another folder called `images` and add images:\n\n```\n/cypress/fixtures/images/cats.png/cypress/fixtures/images/dogs.png/cypress/fixtures/images/birds.png\n```\n\nTo access the fixtures nested within the `images` folder, include the folder in your [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) command.\n\n```\ncy.fixture('images/dogs.png') // yields dogs.png as Base64\n```\n\n## Waiting[​](#Waiting \"Direct link to Waiting\")\n\nWhether or not you choose to stub responses, Cypress enables you to declaratively [`cy.wait()`](https://docs.cypress.io/api/commands/wait) for requests and their responses.\n\ninfo\n\nThis following section utilizes a concept known as [Aliasing](https://docs.cypress.io/guides/core-concepts/variables-and-aliases). If you're new to Cypress you might want to check that out first.\n\nHere is an example of aliasing requests and then subsequently waiting on them:\n\n*   End-to-End Test\n*   Component Test\n\n```\ncy.intercept('/activities/*', { fixture: 'activities' }).as('getActivities')cy.intercept('/messages/*', { fixture: 'messages' }).as('getMessages')// visiting the dashboard should make requests that match// the two routes abovecy.visit('http://localhost:8888/dashboard')// pass an array of Route Aliases that forces Cypress to wait// until it sees a response for each request that matches// each of these aliasescy.wait(['@getActivities', '@getMessages'])// these commands will not run until the wait command resolves abovecy.get('h1').should('contain', 'Dashboard')\n```\n\nIf you would like to check the response data of each response of an aliased route, you can use several `cy.wait()` calls.\n\n```\ncy.intercept({  method: 'POST',  url: '/myApi',}).as('apiCheck')cy.visit('/')cy.wait('@apiCheck').then((interception) => {  assert.isNotNull(interception.response.body, '1st API call has data')})cy.wait('@apiCheck').then((interception) => {  assert.isNotNull(interception.response.body, '2nd API call has data')})cy.wait('@apiCheck').then((interception) => {  assert.isNotNull(interception.response.body, '3rd API call has data')})\n```\n\nWaiting on an aliased route has big advantages:\n\n1.  Tests are more robust with much less flake.\n2.  Failure messages are much more precise.\n3.  You can assert about the underlying request object.\n\nLet's investigate each benefit.\n\n### Flake[​](#Flake \"Direct link to Flake\")\n\nOne advantage of declaratively waiting for responses is that it decreases test flake. You can think of [`cy.wait()`](https://docs.cypress.io/api/commands/wait) as a guard that indicates to Cypress when you expect a request to be made that matches a specific routing alias. This prevents the next commands from running until responses come back and it guards against situations where your requests are initially delayed.\n\n**_Auto-complete Example:_**\n\nWhat makes this example below so powerful is that Cypress will automatically wait for a request that matches the `getSearch` alias. Instead of forcing Cypress to test the _side effect_ of a successful request (the display of the Book results), you can test the actual _cause_ of the results.\n\n```\ncy.intercept('/search*', [{ item: 'Book 1' }, { item: 'Book 2' }]).as(  'getSearch')// our autocomplete field is throttled// meaning it only makes a request after// 500ms from the last keyPresscy.get('[data-testid=\"autocomplete\"]').type('Book')// wait for the request + response// thus insulating us from the// throttled requestcy.wait('@getSearch')cy.get('[data-testid=\"results\"]')  .should('contain', 'Book 1')  .and('contain', 'Book 2')\n```\n\n### Failures[​](#Failures \"Direct link to Failures\")\n\nIn our example above, we added an assertion to the display of the search results.\n\n**_The search results working are coupled to a few things in our application:_**\n\n1.  Our application making a request to the correct URL.\n2.  Our application correctly processing the response.\n3.  Our application inserting the results into the DOM.\n\nIn this example, there are many possible sources of failure. In most testing tools, if our request failed to go out, we would normally only ever get an error once we attempt to find the results in the DOM and see that there is no matching element. This is problematic because it's unknown _why_ the results failed to be displayed. Was there a problem with our rendering code? Did we modify or change an attribute such as an `id` or `class` on an element? Perhaps our server sent us different Book items.\n\nWith Cypress, by adding a [`cy.wait()`](https://docs.cypress.io/api/commands/wait), you can more easily pinpoint your specific problem. If the response never came back, you'll receive an error like this:\n\n![Wait Failure](https://docs.cypress.io/img/guides/network-requests/v10/clear-source-of-failure.png)\n\nNow we know exactly why our test failed. It had nothing to do with the DOM. Instead we can see that either our request never went out or a request went out to the wrong URL.\n\n### Assertions[​](#Assertions \"Direct link to Assertions\")\n\nAnother benefit of using [`cy.wait()`](https://docs.cypress.io/api/commands/wait) on requests is that it allows you to access the actual request object. This is useful when you want to make assertions about this object.\n\nIn our example above we can assert about the request object to verify that it sent data as a query string in the URL. Although we're mocking the response, we can still verify that our application sends the correct request.\n\n```\n// any request to \"/search/*\" endpoint will// automatically receive an array with two book objectscy.intercept('/search/*', [{ item: 'Book 1' }, { item: 'Book 2' }]).as(  'getSearch')cy.get('[data-testid=\"autocomplete\"]').type('Book')// this yields us the interception cycle object// which includes fields for the request and responsecy.wait('@getSearch').its('request.url').should('include', '/search?query=Book')cy.get('[data-testid=\"results\"]')  .should('contain', 'Book 1')  .and('contain', 'Book 2')\n```\n\n**_The interception object that [`cy.wait()`](https://docs.cypress.io/api/commands/wait) yields you has everything you need to make assertions including:_**\n\n*   URL\n*   Method\n*   Status Code\n*   Request Body\n*   Request Headers\n*   Response Body\n*   Response Headers\n\n**Examples**\n\n```\n// spy on POST requests to /users endpointcy.intercept('POST', '/users').as('new-user')// trigger network calls by manipulating web app's// user interface, thency.wait('@new-user').should('have.property', 'response.statusCode', 201)// we can grab the completed interception object// again to run more assertions using cy.get(<alias>)cy.get('@new-user') // yields the same interception object  .its('request.body')  .should(    'deep.equal',    JSON.stringify({      id: '101',      firstName: 'Joe',      lastName: 'Black',    })  )// and we can place multiple assertions in a// single \"should\" callbackcy.get('@new-user').should(({ request, response }) => {  expect(request.url).to.match(/\\/users$/)  expect(request.method).to.equal('POST')  // it is a good practice to add assertion messages  // as the 2nd argument to expect()  expect(response.headers, 'response headers').to.include({    'cache-control': 'no-cache',    expires: '-1',    'content-type': 'application/json; charset=utf-8',    location: '<domain>/users/101',  })})\n```\n\n**Tip:** you can inspect the full request cycle object by logging it to the console\n\n```\ncy.wait('@new-user').then(console.log)\n```\n\n## Command Log[​](#Command-Log \"Direct link to Command Log\")\n\nBy default, Cypress logs all `XMLHttpRequest`s and `fetch`es made by the application under test in the Command Log. Here is an example of what this looks like:\n\n![Screenshot of fetch and XHR requests](https://docs.cypress.io/img/guides/network-requests/command-log-requests.png)\n\ninfo\n\n**Note:** Logging can be disabled by passing `{ log: false }` with the static response.\n\n```\ncy.intercept('/users*', { body: ['user1', 'user2'], log: false }).as('getUsers')\n```\n\nTo disable logs for all xhr/fetch requests, checkout our [example](https://docs.cypress.io/api/commands/intercept#Disabling-logs-for-a-request) on the intercept api page.\n\nThe circular indicator on the left side indicates if the request went to the destination server or not. If the circle is solid, the request went to the destination server; if it is outlined, the response was stubbed by `cy.intercept()` and not sent outbound.\n\nIf we re-run our previous test to make the same requests, but this time, add a `cy.intercept()` to stub the response to `/users`, we can see that the indicator changes. After adding the following line:\n\n```\ncy.intercept('/users*', ['user1', 'user2']).as('getUsers')\n```\n\nThe Command Log will look like this:\n\n![Screenshot of stubbed fetch and unstubbed XHR requests](https://docs.cypress.io/img/guides/network-requests/command-log-stubbed.png)\n\nThe `fetch` request now has an open circle, to indicate that it has been stubbed. Also, note that the alias for the `cy.intercept()` is now displayed on the right-hand side of the Command Log. If you mouse over the alias, you can see more information about how the request was handled:\n\n![Screenshot of stubbed fetch request with tooltip and unstubbed XHR request](https://docs.cypress.io/img/guides/network-requests/command-log-stubbed-tooltip.png)\n\nAdditionally, the request will be flagged if the request and/or response was modified by a `cy.intercept()` handler function. If we add this code to modify outgoing requests to `/users`:\n\n```\ncy.intercept('/users*', (req) => {  req.headers['authorization'] = 'bearer my-bearer-auth-token'}).as('addAuthHeader')\n```\n\nThe request log for `/users` will reflect that the `req` object was modified, but the request was still fulfilled from the destination (filled indicator):\n\n![Screenshot of request that has had the req modified](https://docs.cypress.io/img/guides/network-requests/command-log-req-modified.png)\n\nAs you can see, \"req modified\" is displayed in the badge, to indicate the request object was modified. \"res modified\" and \"req + res modified\" can also be displayed, depending on if `res` was modified inside of a `req.continue()` callback.\n\nAs with all command logs, logs for network requests can be clicked to display additional information in the Console. For example, after clicking the previous request for `/users?limit=100` and opening Developer Tools, we can see the following:\n\n![Screenshot of request that has had the req modified](https://docs.cypress.io/img/guides/network-requests/request-console-props.png)\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [`cy.intercept()` docs](https://docs.cypress.io/api/commands/intercept)\n*   [Network requests in Kitchen Sink example](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/cypress/e2e/2-advanced-examples/network_requests.cy.js)\n*   [See how to make a request with `cy.request()`](https://docs.cypress.io/api/commands/request)\n*   [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) test suites to see Cypress network handling in action.\n*   Read the blog post [Asserting Network Calls from Cypress Tests](https://www.cypress.io/blog/2019/12/23/asserting-network-calls-from-cypress-tests/)\n*   If you want to test the application in offline mode, read [Testing an Application in Offline Network Mode](https://www.cypress.io/blog/2020/11/12/testing-application-in-offline-network-mode/)",
  "title": "Network Requests | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/getting-started",
  "markdown": "# Cypress Component Testing | Cypress Documentation\n\nGetting started with Component Testing is super simple. Follow the guide below for a step by step guide on how to configure your project and quickly begin writing your first tests in just a few seconds.\n\n## Getting Started[​](#Getting-Started \"Direct link to Getting Started\")\n\n### Install Cypress[​](#Install-Cypress \"Direct link to Install Cypress\")\n\nTo begin we need to install Cypress in your project if you have not already done so.\n\n```\nnpm install cypress --save-dev\n```\n\n### Open Cypress[​](#Open-Cypress \"Direct link to Open Cypress\")\n\nOnce Cypress has been installed you can launch Cypress using the following command:\n\ninfo\n\nYou can also launch Cypress for a specific [Testing Type](https://docs.cypress.io/guides/core-concepts/testing-types) using either `--e2e` or in this case the `--component` [CLI Option](https://docs.cypress.io/guides/guides/command-line#Options).\n\nNext, the Cypress Launchpad will guide you through configuring your project.\n\n## Configuring Component Testing[​](#Configuring-Component-Testing \"Direct link to Configuring Component Testing\")\n\n### Select Testing Type[​](#Select-Testing-Type \"Direct link to Select Testing Type\")\n\nWhenever you run Cypress for the first time, the app will prompt you to set up either E2E Testing or Component Testing. Click on \"Component Testing\" to start the configuration wizard.\n\ninfo\n\nFor more information on how to choose a testing type, we recommend this [Testing Types Guide](https://docs.cypress.io/guides/core-concepts/testing-types)\n\n![Choose Component Testing](https://docs.cypress.io/img/guides/component-testing/select-test-type.jpg)\n\nChoose Component Testing\n\n### Project Setup[​](#Project-Setup \"Direct link to Project Setup\")\n\nThe Project Setup screen will automatically detect your framework and bundler. In this example we will use [React](https://react.dev/) and [Vite](https://vitejs.dev/). Click \"Next Step\" to continue.\n\n![React and Vite are automatically detected](https://docs.cypress.io/img/guides/component-testing/project-setup-react.jpg)\n\nReact and Vite are automatically detected\n\n### Installing Dependencies[​](#Installing-Dependencies \"Direct link to Installing Dependencies\")\n\nThe next screen checks that all the required dependencies are installed. All the items should have green checkboxes on them, indicating everything is good, so click \"Continue\".\n\n![All necessary dependencies are installed](https://docs.cypress.io/img/guides/component-testing/dependency-detection-react.jpg)\n\nAll necessary dependencies are installed\n\n### Config Files[​](#Config-Files \"Direct link to Config Files\")\n\nNext, Cypress generates all the necessary configuration files and gives you a list of all the changes it made to your project. Click \"Continue\".\n\n![The Cypress launchpad will scaffold all of these files for you](https://docs.cypress.io/img/guides/component-testing/scaffolded-files.jpg)\n\nThe Cypress launchpad will scaffold all of these files for you\n\n### Choose A Browser[​](#Choose-A-Browser \"Direct link to Choose A Browser\")\n\nAfter setting up component testing, you will be at the browser selection screen.\n\nPick the browser of your choice and click the \"Start Component Testing\" button to open the Cypress App.\n\n![Choose your browser](https://docs.cypress.io/img/guides/component-testing/select-browser.jpg)\n\nChoose your browser\n\n## Writing Your First Test[​](#Writing-Your-First-Test \"Direct link to Writing Your First Test\")\n\nAt this point, your project is configured to use Cypress Component Testing. However, when the test runner appears, it won't find any specs because we haven't created any yet. Now we need write our first Component Test.\n\n![](https://docs.cypress.io/img/guides/component-testing/create-your-first-spec-cfc.png)\n\n### Frameworks[​](#Frameworks \"Direct link to Frameworks\")\n\nCypress currently has official mounting libraries for [React](https://docs.cypress.io/guides/component-testing/react/overview), [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), [Vue](https://docs.cypress.io/guides/component-testing/vue/overview), and [Svelte](https://docs.cypress.io/guides/component-testing/svelte/overview). In addition to our official framework support there are many community plugins such as [Qwik](https://github.com/qwikifiers/cypress-qwik) and [Lit](https://github.com/redfox-mx/cypress-lit).\n\n### Your First Component Test[​](#Your-First-Component-Test \"Direct link to Your First Component Test\")\n\nThough every framework is different and has its own unique nuances, in general, writing tests is very similar. Let's look at how a basic test is written for a `StepperComponent`.\n\nLet's assume the Stepper Component consists of two `buttons`, one used to **decrement** the counter and one to **increment** it as well as a `span` tag that sits in the middle of the buttons to show the current value of the counter.\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nimport React from 'react'import Stepper from './Stepper'describe('<Stepper />', () => {  it('mounts', () => {    // see: https://on.cypress.io/mounting-react    cy.mount(<Stepper />)  })})\n```\n\n### Test Explanation[​](#Test-Explanation \"Direct link to Test Explanation\")\n\nLet's break down the spec. First, we import the `Stepper` component. Then, we organize our tests using the functions `describe` and `it`, which allows us to group tests into sections by using method blocks. These are global functions provided by Cypress, which means you don't have to import them directly to use them. The top-level `describe` block will be the container for all our tests in a file, and each `it` represents an individual test. The `describe` function takes two parameters, the first of which is the name of the test suite, and the second is a function that will execute the tests.\n\nWe defined a test using the `it` function inside `describe`. The first parameter to `it` is a brief description of the spec, and the second parameter is a function that contains the test code. In our example above, we only have one test, but soon we'll see how we can add multiple `it` blocks inside of a `describe` for a series of tests.\n\ninfo\n\nThe [cy.mount()](https://docs.cypress.io/api/commands/mount) method will mount our component into the test app so we can begin running tests against it.\n\nNow it's time to see the test in action.\n\n## Running the Test[​](#Running-the-Test \"Direct link to Running the Test\")\n\nSwitch back to the browser you opened for testing, and you should now see the `Stepper` Component in the spec list. Click it to see the spec execute.\n\nOur first test verifies the component can mount in its default state without any errors. If there is a runtime error during test execution, the test will fail, and you will see a stack trace pointing to the source of the problem.\n\nA basic test like the one above is an excellent way to start testing a component. Cypress renders your component in a real browser, and you can use all the techniques/tools you would normally during development, such as interacting with the component in the test runner, and using the browser dev tools to inspect and debug both your tests and the component's code.\n\nFeel free to play around with the `Stepper` component by interacting with the increment and decrement buttons.\n\nNow that the component is mounted, our next step is to test that the behavior of the component is correct.\n\n### Selectors & Assertions[​](#Selectors--Assertions \"Direct link to Selectors & Assertions\")\n\nBy default, the Stepper's counter is initialized to \"0\". We can override that value by specifying an initial count. Let's write a couple of tests that will verify both these states.\n\nTo do so, we will use a selector to access the `span` element that contains the counter, and then assert that the text value of the element is what we expect it to be.\n\nThere are various ways to select items from the DOM using Cypress. We will use [cy.get()](https://docs.cypress.io/api/commands/get), which allows us to pass in a CSS-like selector.\n\nAfter we \"get\" the element, we use the [should](https://docs.cypress.io/api/commands/should) assertion method to verify it has the correct text value.\n\nAdd the following test inside the `describe` block, right below the first test:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('stepper should default to 0', () => {  cy.mount(<Stepper />)  cy.get('span').should('have.text', '0')})\n```\n\nWhen you go back to the test runner, you should see the test pass.\n\nIn the above test, we select the element by passing in \"span\" to `cy.get()`, which will select all `span` tags in our component. We only have one `span` currently, so this works. However, if our component evolves and we add another `span`, then this test could start to fail. We should use a selector that will be less brittle to future changes.\n\nIn the `Stepper` component, the `span` tag has a `data-cy` attribute on it:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\n<span data-cy=\"counter\">{count}</span>\n```\n\nWe assign a unique id to the `data-cy` attribute that we can use for testing purposes. Update the test to use a CSS attribute selector to `cy.get()`:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('stepper should default to 0', () => {  cy.mount(<Stepper />)  cy.get('[data-cy=counter]').should('have.text', '0')})\n```\n\nThe test will still pass as expected, and our selector is now future-proof. For more info on writing good selectors, see our guide [Selector Best Practices](https://docs.cypress.io/guides/references/best-practices#Selecting-Elements).\n\n### Passing Props to Components[​](#Passing-Props-to-Components \"Direct link to Passing Props to Components\")\n\nWe should also have a test to ensure the `count` prop sets the count to something else besides its default value of \"0\". We can pass in props to the `Stepper` component like so:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('supports a \"count\" prop to set the value', () => {  cy.mount(<Stepper count={100} />)  cy.get('[data-cy=counter]').should('have.text', '100')})\n```\n\n### Testing Interactions[​](#Testing-Interactions \"Direct link to Testing Interactions\")\n\nWe mounted and selected the element in the above tests but didn't interact with it. We should also test that the value of the counter changes when a user clicks the \"increment\" and \"decrement\" buttons.\n\nTo do so, we will interact with the component by using the [click()](https://docs.cypress.io/api/commands/click) command, which clicks a DOM element just like a real user would.\n\nAdd the following tests:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('when the increment button is pressed, the counter is incremented', () => {  cy.mount(<Stepper />)  cy.get('[data-cy=increment]').click()  cy.get('[data-cy=counter]').should('have.text', '1')})it('when the decrement button is pressed, the counter is decremented', () => {  cy.mount(<Stepper />)  cy.get('[data-cy=decrement]').click()  cy.get('[data-cy=counter]').should('have.text', '-1')})\n```\n\nWhen you view the results of each of the tests, you will see that the counter is now \"1\" in the **increment** test, and \"-1\" in the **decrement** test. Not only did our tests pass, but we can visually see the results in a browser!\n\n## Testing Components with Events[​](#Testing-Components-with-Events \"Direct link to Testing Components with Events\")\n\nAll the state of the `Stepper` Component (ie: the count) is handled internally in the component and then consumers are then alerted to changes to the state.\n\nAs the developer of the `Stepper` Component, you want to make sure when the end-user clicks the **increment** and **decrement** buttons, that the appropriate event is triggered with the proper values in the consuming component.\n\n### Using Spies[​](#Using-Spies \"Direct link to Using Spies\")\n\nWe can use [Cypress Spies](https://docs.cypress.io/guides/guides/stubs-spies-and-clocks#Spies) to validate these events are being called correctly. A spy is a special function that keeps track of how many times it was called and any parameters that it was called with. We can then assign a spy to our event, interact with the component, and then query the spy to validate it was called with the parameters we expect.\n\nLet's set up the spies and bind them to the component:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('clicking + fires a change event with the incremented value', () => {  const onChangeSpy = cy.spy().as('onChangeSpy')  cy.mount(<Stepper onChange={onChangeSpy} />)  cy.get('[data-cy=increment]').click()  cy.get('@onChangeSpy').should('have.been.calledWith', 1)})\n```\n\nFirst, we create a new spy by calling the `cy.spy()` method. We pass in a string that gives the spy an [alias](https://docs.cypress.io/guides/core-concepts/variables-and-aliases), which assigns the spy a name by which we can reference it later. In `cy.mount()`, we initialize the component and pass the spy into it. After that, we click the increment button.\n\nThe next line is a bit different. We've seen how we can use the `cy.get()` method to select elements, but we can also use it to grab any aliases we've set up previously. We use `cy.get()` to grab the alias to the spy (by prepending an \"@\" to the alias name). We assert that the method was called with the expected value.\n\nWith that, the `Stepper` component is well tested. Nice job!\n\n## What's Next?[​](#Whats-Next \"Direct link to What's Next?\")\n\nCongratulations, you covered the basics for Component Testing with Cypress!\n\nTo learn more about testing with Cypress, check out the [Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress) guide.",
  "title": "Cypress Component Testing | Cypress Documentation",
  "description": "Getting started with Component Testing is super simple. Follow the guide below for a step by step guide on how to configure your project and quickly begin writing your first tests in just a few seconds.",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/migration-guide",
  "markdown": "# Migration Guide | Cypress Documentation\n\n## Migrating to Cypress 13.0[​](#Migrating-to-Cypress-130 \"Direct link to Migrating to Cypress 13.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress version 13. [See the full changelog for version v13.0](https://docs.cypress.io/guides/references/changelog#13-0-0).\n\n### Cypress Cloud Test Replay[​](#Cypress-Cloud-Test-Replay \"Direct link to Cypress Cloud Test Replay\")\n\n[Test Replay](https://docs.cypress.io/guides/cloud/test-replay) is enabled by default in `v13` of the Cypress App.\n\nYou may need to allowlist `capture.cypress.io` if you work with a strict VPN. See our FAQ section about [VPN subdomain allowlisting](https://docs.cypress.io/faq/questions/cloud-faq#Im-working-with-a-restrictive-VPN-Which-subdomains-do-I-have-to-allow-on-my-VPN-for-Cypress-Cloud-to-work-properly).\n\nWith Test Replay enabled, the Cypress Runner UI is hidden by default when recording a run to the Cloud. If the Runner UI is needed during the run, you can enable it by passing [`--runner-ui`](https://docs.cypress.io/guides/guides/command-line#cypress-run-runner-ui) to the [`cypress run`](https://docs.cypress.io/guides/guides/command-line#cypress-run) command.\n\nYou can [opt-out](https://docs.cypress.io/guides/cloud/test-replay#Opt-out-of-Test-Replay) of this feature in Cloud project-level settings.\n\n### Video updates[​](#Video-updates \"Direct link to Video updates\")\n\n#### `video` is set to `false` by default[​](#video-is-set-to-false-by-default \"Direct link to video-is-set-to-false-by-default\")\n\nYou can continue recording video by setting `video` to `true` either in your Cypress configuration or via [overriding options](https://docs.cypress.io/guides/references/configuration#Overriding-Options). This can be useful if you want video locally or want video for some other reason, like in non-Chromium browsers where [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) is not available.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  video: true,})\n```\n\n#### `videoUploadOnPasses` configuration option has been removed[​](#videoUploadOnPasses-configuration-option-has-been-removed \"Direct link to videoUploadOnPasses-configuration-option-has-been-removed\")\n\nMost users used `videoUploadOnPasses` as a way to skip the time to compress and upload videos to the Cloud. Since we're turning off `videoCompression` by default, this configuration option does not offer the time saving value that it once would.\n\nIf you want to prevent a passing test from uploading to the Cloud, we recommend deleting the video using our [guide with code examples to discard captured video of passing tests](https://docs.cypress.io/guides/guides/screenshots-and-videos#Control-which-videos-to-keep-and-upload-to-Cypress-Cloud).\n\n#### `videoCompression` is set to `false` by default[​](#videoCompression-is-set-to-false-by-default \"Direct link to videoCompression-is-set-to-false-by-default\")\n\nCypress has the capability to compress recorded videos after a run to reduce the video file size. By default, compression is now turned off. This results in a reduced run time by removing the time to compress the video, a larger video file size and better video quality.\n\nYou can enable this with the `videoCompression` [configuration](https://docs.cypress.io/guides/references/configuration#Videos) option if you'd like to reduce the video file size for any reason. This will also reduce the video quality and take slightly longer to process and complete the run.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // value can be true/false -or- an integer between 0 and 51  videoCompression: true,})\n```\n\n### `cy.readFile()` is now a query command[​](#cyreadFile-is-now-a-query-command \"Direct link to cyreadFile-is-now-a-query-command\")\n\nIn Cypress `v13`, the [`.readFile()`](https://docs.cypress.io/api/commands/readfile) command is now a query. Tests written using it should continue to operate exactly as before; no changes are necessary.\n\n`readFile()` will re-read the file from disk if any upcoming command in the same chain fails. Assertions no longer have to be directly attached.\n\n```\ncy.readFile(`users.json`).its('users.123.fullName').should('eq', 'John Doe')\n```\n\nBeginning with Cypress `v13`, the above test will re-read the file until the file exists, it has the requested property, and it passes the assertion.\n\nIn previous versions of Cypress, the above command would retry until the file existed, but would _not_ re-read it from disk if the file didn't have the requested property or the contents didn't match.\n\n#### `.readFile()` can no longer be overwritten with `Cypress.Commands.overwrite()`[​](#readFile-can-no-longer-be-overwritten-with-CypressCommandsoverwrite \"Direct link to readFile-can-no-longer-be-overwritten-with-CypressCommandsoverwrite\")\n\nQueries must be overwritten using `Cypress.Commands.overwriteQuery()`. If you were previously overwriting `cy.readFile()`, you will need to update your code to use `Cypress.Commands.overwriteQuery('readFile', function() { ... })` rather than `Cypress.Commands.overwrite('readFile', () => { ... })`. For more details on overwriting queries, see the [Overwriting Existing Queries](https://docs.cypress.io/api/cypress-api/custom-queries#Overwriting-Existing-Queries).\n\n## Migrating to Cypress 12.0[​](#Migrating-to-Cypress-120 \"Direct link to Migrating to Cypress 12.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress version 12.0. [See the full changelog for version 12.0](https://docs.cypress.io/guides/references/changelog#12-0-0).\n\nThe Session and Origin experiment has been released as General Availability (GA), meaning that we have deemed this experiment to be feature complete and free of issues in the majority of use cases. With releasing this as GA, the `experimentalSessionAndOrigin` flag has been removed, the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) and [`cy.session()`](https://docs.cypress.io/api/commands/session) commands are generally available and [Test Isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) is enabled by default.\n\n### Node.js 14+ support[​](#Nodejs-14-support \"Direct link to Node.js 14+ support\")\n\nCypress comes bundled with its own [Node.js version](https://github.com/cypress-io/cypress/blob/develop/.node-version). However, installing the `cypress` npm package uses the Node.js version installed on your system.\n\nNode.js 12 reached its end of life on April 30, 2022. [See Node's release schedule](https://github.com/nodejs/Release). This Node.js version will no longer be supported when installing Cypress. The minimum Node.js version supported to install Cypress is Node.js 14+.\n\n### Test Isolation[​](#Test-Isolation \"Direct link to Test Isolation\")\n\nThe [`testIsolation`](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) config option is enabled by default. This means Cypress resets the browser context _before_ each test by:\n\n*   clearing the dom state by visiting `about:blank`\n*   clearing [cookies](https://docs.cypress.io/api/cypress-api/cookies) in all domains\n*   clearing [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) in all domains\n*   clearing [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) in all domains\n\nTest suites that relied on the application to persist between tests may have to be updated to revisit their application and rebuild the browser state for each test that needs it.\n\nBefore this change, it was possible to write tests such that you could rely on the application (i.e. DOM state) to persist between tests. For example you could log in to a CMS in the first test, change some content in the second test, verify the new version is displayed on a different URL in the third, and log out in the fourth.\n\nHere's a simplified example of such a test strategy.\n\nBefore Multiple small tests against different origins\n\n```\nit('logs in', () => {  cy.visit('https://example.cypress.io')  cy.get('input#password').type('Password123!')  cy.get('button#submit').click()})it('updates the content', () => {  // already on page redirect from clicking button#submit  cy.get('#current-user').contains('logged in')  cy.get('button#edit-1').click()  cy.get('input#title').type('Updated title')  cy.get('button#submit').click()  cy.get('.toast').contains('Changes saved!')})it('validates the change', () => {  cy.visit('/items/1')  cy.get('h1').contains('Updated title')})\n```\n\nAfter migrating, when `testIsolation=true` by default, this flow would need to be contained within a single test. While the above practice has always been [discouraged](https://docs.cypress.io/guides/references/best-practices#Having-Tests-Rely-On-The-State-Of-Previous-Tests) we know some users have historically written tests this way, often to get around the `same-origin` restrictions. But with [`cy.origin()`](https://docs.cypress.io/api/commands/origin) you no longer need these kind of brittle hacks, as your multi-origin logic can all reside in a single test, like the following.\n\nAfter One big test using `cy.origin()`\n\n```\nit('securely edits content', () => {  cy.origin('cypress.io', () => {    cy.visit('https://example.cypress.io')    cy.get('input#password').type('Password123!')    cy.get('button#submit').click()  })  cy.origin('cypress-dx.com', () => {    cy.url().should('contain', 'cms')    cy.get('#current-user').contains('logged in')    cy.get('button#edit-1').click()    cy.get('input#title').type('Updated title')    cy.get('button#submit').click()    cy.get('.toast').contains('Changes saved!')  })  cy.visit('/items/1')  cy.get('h1').contains('Updated title')})\n```\n\nThe just-released `cy.session()` command can be used to setup and cache cookies, local storage and session storage between tests to easily re-establish the previous (or common) browser contexts needed in a suite. This command will run setup on its initial execution and will restore the saved browser state on each sequential command execution. This command reduces the need for repeated application logins, while users also benefit from the test isolation guardrails to write independent, reliable and deterministic tests from the start.\n\nIf for whatever reason you still need to persist the dom and browser context between tests, you can disable test isolation by setting `testIsolation=false` on the root configuration or at the suite-level. For example:\n\n```\ndescribe('workflow', { testIsolation: false }, () => {  ...})\n```\n\nIt is important to note that while disabling test isolation may improve the overall performance of end-to-end tests, it can cause state to \"leak\" between tests. This can make later tests dependent on the results of earlier tests, and potentially cause misleading test failures. It is important to be extremely mindful of how tests are written when using this mode, and ensure that tests continue to run independently of one another.\n\nFor example the following tests are not independent nor deterministic:\n\n```\ndescribe('workflow', { testIsolation: false }, () => {  it('logs in', () => {    cy.visit('https://example.cypress.io/log-in')    cy.get('username').type('User1')    cy.get('password').type(Cypress.env('User1_password'))    cy.get('button#login').click()    cy.contains('User1')  })  it('clicks user profile', () => {    cy.get('User1').find('#profile_avatar').click()    cy.contains('Email Preferences')  })  it('updates profile', () => {    cy.get('button#edit')    cy.get('email').type('[email protected]')    cy.get('button#save').click()  })})\n```\n\nIn the above example, each test is relying on the previous test to be _successful_ to correctly execute. If at any point, the first or second test fails, the sequential test(s) will automatically fail and provide unreliable debugging errors since the errors are representative of the previous test.\n\nThe best way to ensure your tests are independent is to add a `.only()` to your test and verify it can run successfully without the test before it.\n\n#### Simulating Pre-Test Isolation Behavior[​](#Simulating-Pre-Test-Isolation-Behavior \"Direct link to Simulating Pre-Test Isolation Behavior\")\n\nTest isolation did not truly exist pre-12. Pre-Cypress 12, the behavior was a hybrid of both `testIsolation` enabled and disabled. All local storage and cookies on the current domain were cleared, but Cypress did not clear session storage and the page always persisted.\n\nIn Cypress 12+ when `testIsolation` is enabled, local storage, session storage and cookies in **all** domains are cleared and the page is cleared. When `testIsolation` is disabled, nothing is cleared before the next test so all local storage, session storage and cookies & the page persists.\n\nIf you wanted to match pre-Cypress 12 behavior, you need to disable `testIsolation`, then run `cy.clearLocalStorage()` and `cy.clearCookies()` in a beforeEach hook to clear the local storage and cookies in the current domain.\n\n```\ndescribe('match pre-12 behavior', { testIsolation: false }, () => {  beforeEach(() => {    cy.clearLocalStorage()    cy.clearCookies()    // other beforeEach logic to restore the expected local storage or cookies needed on the client.  })})\n```\n\nMany of the issues test isolation solved were around cookie management with tests trying to save and persist cookies because the page was still available, but the cookies on the domain were unexpectedly cleared which broke interactions with the application. It wasn’t obvious Cypress was doing a partial browser clean up. Explicitly setting test isolation to enabled or disabled allows you to choose what is right for your tests.\n\n### Behavior Changes in Alias Resolution[​](#Behavior-Changes-in-Alias-Resolution \"Direct link to Behavior Changes in Alias Resolution\")\n\nCypress always re-queries aliases when they are referenced. This can result in certain tests that used to pass could start to fail. For example,\n\n```\ncy.findByTestId('popover')  .findByRole('button', { expanded: true })  .as('button')  .click()cy.get('@button').should('have.attr', 'aria-expanded', 'false')\n```\n\npreviously passed, because the initial button was collapsed when first queried, and then later expanded. However, in Cypress 12, this test fails because the alias is always re-queried from the DOM, effectively resulting in the following execution:\n\n```\ncy.findByTestId('popover').findByRole('button', { expanded: true }).click()cy.findByTestId('popover')  .findByRole('button', { expanded: true }) // A button which matches here (is expanded)...  .should('have.attr', 'aria-expanded', 'false') // ...will never pass this assertion.\n```\n\nYou can rewrite tests like this to be more specific; in our case, we changed the alias to be the first button rather than the unexpanded button.\n\n```\ncy.findByTestId('popover').findAllByRole('button').first().as('button')\n```\n\nIf you want to alias a static value, such that it is never re-queried, you will need Cypress [12.3.0](https://docs.cypress.io/guides/references/changelog#12-3-0) or later, which introduced the `type` option for [`.as()`](https://docs.cypress.io/api/commands/as) to opt into the old behavior.\n\n```\ncy.get('.username').invoke('val').as('username', { type: 'static' })\n```\n\nSee [`.as()`](https://docs.cypress.io/api/commands/as) for more details.\n\n### Command / Cypress API Changes[​](#Command--Cypress-API-Changes \"Direct link to Command / Cypress API Changes\")\n\n#### `Cypress.Cookies.defaults` and `Cypress.Cookies.preserveOnce`[​](#CypressCookiesdefaults-and-CypressCookiespreserveOnce \"Direct link to CypressCookiesdefaults-and-CypressCookiespreserveOnce\")\n\nThe `Cypress.Cookies.defaults` and `Cypress.Cookies.preserveOnce` APIs been removed. Use the [`cy.session()`](https://docs.cypress.io/api/commands/session) command to preserve cookies (and local and session storage) between tests.\n\nIf you were using `Cypress.Cookies.preserveOnce` to preserve a specific cookie within a single spec, this might look like the following:\n\n```\ndescribe('Dashboard', () => {  beforeEach(() => {-    cy.login()-    Cypress.Cookies.preserveOnce('session_id', 'remember_token')+    cy.session('unique_identifier', cy.login, {+       validate () {+        cy.getCookies().should('have.length', 2)+       },+    })  })\n```\n\nIf you were using `Cypress.Cookies.defaults` to preserve a cookie or set of cookies across test, this might look like the following:\n\n```\ndescribe('Dashboard', () => {  beforeEach(() => {-    cy.login()-    Cypress.Cookies.defaults({-       preserve: ['session_id', 'remember_token']-    })+    cy.session('unique_identifier', cy.login, {+       validate () {+        cy.getCookies().should('have.length', 2)+       },+       cacheAcrossSpecs: true+    })  })\n```\n\n#### `cy.server()`, `cy.route()` and `Cypress.Server.defaults`[​](#cyserver-cyroute-and-CypressServerdefaults \"Direct link to cyserver-cyroute-and-CypressServerdefaults\")\n\nThe `cy.server()` and `cy.route()` commands and the `Cypress.server.defaults` API has been removed. Use the [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) command instead.\n\n```\n  it('can encode + decode headers', () => {-   Cypress.Server.defaults({-     delay: 500,-     method: 'GET',-   })-   cy.server()-   cy.route(/api/, () => {-      return {-        'test': 'We’ll',-      }-    }).as('getApi')+   cy.intercept('GET', /api/, (req) => {+      req.on('response', (res) => {+        res.setDelay(500)+      })+      req.body.'test': 'We’ll'+    }).as('getApi')    cy.visit('/index.html')    cy.window().then((win) => {      const xhr = new win.XMLHttpRequest      xhr.open('GET', '/api/v1/foo/bar?a=42')      xhr.send()    })    cy.wait('@getApi')-   .its('url').should('include', 'api/v1')+   .its('request.url').should('include', 'api/v1')  })\n```\n\n#### `.invoke()`[​](#invoke \"Direct link to invoke\")\n\nThe [`.invoke()`](https://docs.cypress.io/api/commands/invoke) command now throws an error if the function returns a promise. If you wish to call a method that returns a promise and wait for it to resolve, use [`.then()`](https://docs.cypress.io/api/commands/then) instead of `.invoke()`.\n\n```\ncy.wrap(myAPI)-  .invoke('makeARequest', 'http://example.com')+  .then(api => api.makeARequest('http://example.com'))   .then(res => { ...handle response... })\n```\n\nIf `.invoke()` is followed by additional commands or assertions, it will call the named function multiple times. This has the benefit that the chained assertions can more reliably use the function's return value.\n\nIf this behavior is undesirable because you expect the function to be invoked only once, break the command chain and move the chained commands and/or assertions to their own chain. For example, rewrite\n\n```\n- cy.get('input').invoke('val', 'text').type('newText')+ cy.get('input').invoke('val', 'text')+ cy.get('input').type('newText')\n```\n\n#### `.should()`[​](#should \"Direct link to should\")\n\nThe [`.should()`](https://docs.cypress.io/api/commands/should) assertion now throws an error if Cypress commands are invoked from inside a `.should()` callback. This previously resulted in unusual and undefined behavior. If you wish to execute a series of commands on the yielded value, use`.then()` instead.\n\n```\ncy.get('button')-  .should(($button) => {    })+  .then(api => api.makeARequest('http://example.com'))   .then(res => { ...handle response... })\n```\n\n#### `.within()`[​](#within \"Direct link to within\")\n\nThe [`.within()`](https://docs.cypress.io/api/commands/within) command now throws an error if it is passed multiple elements as the subject. This previously resulted in inconsistent behavior, where some commands would use all passed in elements, some would use only the first and ignore the rest, and [`.screenshot()`](https://docs.cypress.io/api/commands/screenshot) would throw an error if used inside a `.within()` block with multiple elements.\n\nIf you were relying on the old behavior, you have several options depending on the desired result.\n\nThe simplest option is to reduce the subject to a single element.\n\n```\ncy.get('tr')+  .first() // Limit the subject to a single element before calling .within()  .within(() => {    cy.contains('Edit').click()  })\n```\n\nIf you have multiple subjects and wish to run commands over the collection as a whole, you can alias the subject rather than use `.within()`.\n\n```\ncy.get('tr')-  .within(() => {-    cy.get('td').should('have.class', 'foo')-    cy.get('td').should('have.class', 'bar')-  })+  .as('rows') // Store multiple elements as an alias+cy.get('@rows').find('td').should('have.class', 'foo')+cy.get('@rows').find('td').should('have.class', 'bar')\n```\n\nOr if you have a collection and want to run commands over every element, use `.each()` in conjunction with `.within()`.\n\n```\ncy.get('tr')-  .within(() => {-    cy.contains('Edit').should('have.attr', 'disabled')-  })+  .each($tr => {+    cy.wrap($tr).within(() => {+      cy.contains('Edit').should('have.attr', 'disabled')+    })+  })\n```\n\n#### `Cypress.Commands.overwrite()`[​](#CypressCommandsoverwrite \"Direct link to CypressCommandsoverwrite\")\n\nIn Cypress 12.0.0, we introduced a new command type, called queries. A query is a small and fast command for getting data from the window or DOM. This distinction is important because Cypress can retry chains of queries, keeping the yielded subject up-to-date as a page rerenders.\n\nWith the introduction of query commands, the following commands have been re-categorized and can no longer be overwritten with [`Cypress.Commands.overwrite()`](https://docs.cypress.io/api/cypress-api/custom-commands#Overwrite-Existing-Commands):\n\n*   [`.as()`](https://docs.cypress.io/api/commands/as)\n*   [`.children()`](https://docs.cypress.io/api/commands/children)\n*   [`.closest()`](https://docs.cypress.io/api/commands/closest)\n*   [`.contains()`](https://docs.cypress.io/api/commands/contains)\n*   [`cy.debug()`](https://docs.cypress.io/api/commands/debug)\n*   [`cy.document()`](https://docs.cypress.io/api/commands/document)\n*   [`.eq()`](https://docs.cypress.io/api/commands/eq)\n*   [`.filter()`](https://docs.cypress.io/api/commands/filter)\n*   [`.find()`](https://docs.cypress.io/api/commands/find)\n*   [`.first()`](https://docs.cypress.io/api/commands/first)\n*   [`.focused()`](https://docs.cypress.io/api/commands/focused)\n*   [`.get()`](https://docs.cypress.io/api/commands/get)\n*   [`.hash()`](https://docs.cypress.io/api/commands/hash)\n*   [`.its()`](https://docs.cypress.io/api/commands/its)\n*   [`.last()`](https://docs.cypress.io/api/commands/last)\n*   [`cy.location()`](https://docs.cypress.io/api/commands/location)\n*   [`.next()`](https://docs.cypress.io/api/commands/next)\n*   [`.nextAll()`](https://docs.cypress.io/api/commands/nextall)\n*   [`.not()`](https://docs.cypress.io/api/commands/not)\n*   [`.parent()`](https://docs.cypress.io/api/commands/parent)\n*   [`.parents()`](https://docs.cypress.io/api/commands/parents)\n*   [`.parentsUntil()`](https://docs.cypress.io/api/commands/parentsuntil)\n*   [`.prev()`](https://docs.cypress.io/api/commands/prev)\n*   [`.prevUntil()`](https://docs.cypress.io/api/commands/prevuntil)\n*   [`cy.root()`](https://docs.cypress.io/api/commands/root)\n*   [`.shadow()`](https://docs.cypress.io/api/commands/shadow)\n*   [`.siblings()`](https://docs.cypress.io/api/commands/siblings)\n*   [`cy.title()`](https://docs.cypress.io/api/commands/title)\n*   [`cy.url()`](https://docs.cypress.io/api/commands/url)\n*   [`cy.window()`](https://docs.cypress.io/api/commands/window)\n\nIf you were previously overwriting one of the above commands, try adding your version as a new command using [`Cypress.Commands.add()`](https://docs.cypress.io/api/cypress-api/custom-commands) under a different name.\n\n## Migrating to Cypress 11.0[​](#Migrating-to-Cypress-110 \"Direct link to Migrating to Cypress 11.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress version 11.0. [See the full changelog for version 11.0](https://docs.cypress.io/guides/references/changelog#11-0-0).\n\n### Component Testing Updates[​](#Component-Testing-Updates \"Direct link to Component Testing Updates\")\n\nAs of Cypress 11, Component Testing is now generally available. There are some minor breaking changes. Most projects should be able to migrate without any code modifications.\n\n#### Changes to Mounting Options[​](#Changes-to-Mounting-Options \"Direct link to Changes to Mounting Options\")\n\nEach major library we support has a `mount` function with two arguments:\n\n1.  The component\n2.  Mounting Options\n\nMounting options previously had several properties that are now removed:\n\n*   cssFile, cssFiles\n*   style, styles\n*   stylesheet, stylesheets\n\nRead more about the rationale [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/). We recommend writing test-specific styles in a separate `css` file you import in your test, or in your `supportFile`.\n\n#### Before (Cypress 10)[​](#Before-Cypress-10 \"Direct link to Before (Cypress 10)\")\n\n```\nimport { mount } from 'cypress/react'import { Card } from './Card'it('renders some content', () => {  cy.mount(<Card title=\"title\" />, {    styles: `      .card { width: 100px; }    `,    stylesheets: [      'https://cdn.jsdelivr.net/npm/[email protected]/dist/css/bootstrap.min.css',    ],  })})\n```\n\n#### After (Cypress 11)[​](#After-Cypress-11 \"Direct link to After (Cypress 11)\")\n\n```\n/** style.css */@import \"https://cdn.jsdelivr.net/npm/[email protected]/dist/css/bootstrap.min.css\";.card { width: 100px }/** Card.cy.jsx */import { mount } from 'cypress/react'import { Card } from './Card'import './styles.css' // contains CDN link and custom styling.it('renders some content', () => {  cy.mount(<Card title=\"title\" />)})\n```\n\n### React - `mountHook` Removed[​](#React---mountHook-Removed \"Direct link to React---mountHook-Removed\")\n\n`mountHook` from `cypress/react` has been removed. Read more about the rationale [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/).\n\nWe recommend simply replacing it with `mount` and a component.\n\nConsider the following `useCounter` hook:\n\n```\nimport { useState, useCallback } from 'react'function useCounter() {  const [count, setCount] = useState(0)  const increment = useCallback(() => setCount((x) => x + 1), [])  return { count, increment }}\n```\n\n#### Before - Cypress 10 and `mountHook`[​](#Before---Cypress-10-and-mountHook \"Direct link to Before---Cypress-10-and-mountHook\")\n\n```\nimport { mountHook } from 'cypress/react'import { useCounter } from './useCounter'it('increments the count', () => {  mountHook(() => useCounter()).then((result) => {    expect(result.current.count).to.equal(0)    result.current.increment()    expect(result.current.count).to.equal(1)    result.current.increment()    expect(result.current.count).to.equal(2)  })})\n```\n\n#### After - Cypress 11 and `mount`[​](#After---Cypress-11-and-mount \"Direct link to After---Cypress-11-and-mount\")\n\n```\nimport { useCounter } from './useCounter'it('increments the count', () => {  function Counter() {    const { count, increment } = useCounter()    return (      <>        <h1 name=\"count\">Count is {{ count }}</h1>        <button onClick={increment}>Increment</button>      </>    )  }  cy.mount(<Counter />).then(() => {    cy.get('[name=\"count\"]')      .should('contain', 0)      .get('button')      .click()      .get('[name=\"count\"]')      .should('contain', 1)  })})\n```\n\n### React - `unmount` Removed[​](#React---unmount-Removed \"Direct link to React---unmount-Removed\")\n\n`unmount` from `cypress/react` has been removed. Read more about the rationale [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/). We recommend using the API React provides for unmounting components, [unmountComponentAtNode](https://reactjs.org/docs/react-dom.html#unmountcomponentatnode).\n\n#### Before - Cypress 10 and `unmount`[​](#Before---Cypress-10-and-unmount \"Direct link to Before---Cypress-10-and-unmount\")\n\n```\nimport { unmount } from 'cypress/react'it('calls the prop', () => {  cy.mount(<Comp onUnmount={cy.stub().as('onUnmount')} />)  cy.contains('My component')  unmount()  // the component is gone from the DOM  cy.contains('My component').should('not.exist')  cy.get('@onUnmount').should('have.been.calledOnce')})\n```\n\n#### After - Cypress 11 and `unmountComponentAtNode`[​](#After---Cypress-11-and-unmountComponentAtNode \"Direct link to After---Cypress-11-and-unmountComponentAtNode\")\n\n```\nimport { getContainerEl } from 'cypress/react'import ReactDom from 'react-dom'it('calls the prop', () => {  cy.mount(<Comp onUnmount={cy.stub().as('onUnmount')} />)  cy.contains('My component')  cy.then(() => ReactDom.unmountComponentAtNode(getContainerEl()))  // the component is gone from the DOM  cy.contains('My component').should('not.exist')  cy.get('@onUnmount').should('have.been.calledOnce')})\n```\n\n### Vue - `mountCallback` Removed[​](#Vue---mountCallback-Removed \"Direct link to Vue---mountCallback-Removed\")\n\n`mountCallback` from `cypress/vue` has been removed. Read more about the rationale [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/). We recommend using `mount`.\n\n#### Before - Cypress 10 and `mountCallback`[​](#Before---Cypress-10-and-mountCallback \"Direct link to Before---Cypress-10-and-mountCallback\")\n\n```\nimport { mountCallback } from 'cypress/vue'beforeEach(mountCallback(MessageList))it('shows no messages', () => {  getItems().should('not.exist')})\n```\n\n#### After - Cypress 11 and `mount`[​](#After---Cypress-11-and-mount-1 \"Direct link to After---Cypress-11-and-mount-1\")\n\n```\nbeforeEach(() => cy.mount(MessageList))it('shows no messages', () => {  getItems().should('not.exist')})\n```\n\n### Angular - Providers Mounting Options Change[​](#Angular---Providers-Mounting-Options-Change \"Direct link to Angular - Providers Mounting Options Change\")\n\nThere is one breaking change for Angular users in regards to providers. In Cypress 10, we took any providers passed as part of the Mounting Options and overrode the component providers via the `TestBed.overrideComponent` API.\n\nIn Cypress 11, providers passed as part of the Mounting Options will be assigned at the module level using the `TestBed.configureTestingModule` API.\n\nThis means that module-level providers (resolved from imports or `@Injectable({ providedIn: 'root' })` can be overridden, but providers specified in `@Component({ providers: [...] })` will not be overridden when using `cy.mount(MyComponent, { providers: [...] })`.\n\nTo override component-level providers, use the `TestBed.overrideComponent` API.\n\nSee a concrete example [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/#angularproviders-priority).\n\n### Vite Dev Server (`cypress/vite-dev-server`)[​](#Vite-Dev-Server-cypressvite-dev-server \"Direct link to Vite-Dev-Server-cypressvite-dev-server\")\n\nWhen providing an inline `viteConfig` inside of `cypress.config`, any `vite.config.js` file is not automatically merged.\n\n#### Before - Cypress 10 and `viteConfig`[​](#Before---Cypress-10-and-viteConfig \"Direct link to Before---Cypress-10-and-viteConfig\")\n\n```\nimport { defineConfig } from 'cypress'export default defineConfig({  component: {    devServer: {      framework: 'react',      bundler: 'vite',      viteConfig: {        // ... custom vite config ...        // result merged with `vite.config` file if present      },    },  },})\n```\n\n#### After - Cypress 11 and `viteConfig`[​](#After---Cypress-11-and-viteConfig \"Direct link to After---Cypress-11-and-viteConfig\")\n\n```\nimport { defineConfig } from 'cypress'import viteConfig from './vite.config'export default defineConfig({  component: {    devServer: {      framework: 'react',      bundler: 'vite',      viteConfig: {        ...viteConfig,        // ... other overrides ...      },    },  },})\n```\n\nVite 3+ users could make use of the [`mergeConfig`](https://vitejs.dev/guide/api-javascript.html#mergeconfig) API.\n\n## Migrating to Cypress 10.0[​](#Migrating-to-Cypress-100 \"Direct link to Migrating to Cypress 10.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress version 10.0. [See the full changelog for version 10.0](https://docs.cypress.io/guides/references/changelog#10-0-0).\n\n### Cypress Changes[​](#Cypress-Changes \"Direct link to Cypress Changes\")\n\n*   The \"Run all specs\" and \"Run filtered specs\" functionality have been removed.\n*   The experimental \"Cypress Studio\" has been removed and will be rethought/revisited in a later release.\n*   Unsupported browser versions can no longer be run via `cypress run` or `cypress open`. Instead, an error will display.\n*   In 9.x and earlier versions, `cypress open` would bring you directly to the project specs list. In 10.0.0, you must pass `--browser` and `--e2e` or `--component` as well to launch Cypress directly to the specs list.\n\n### Configuration File Changes[​](#Configuration-File-Changes \"Direct link to Configuration File Changes\")\n\nCypress now supports JavaScript and TypeScript configuration files. By default, Cypress will automatically load a `cypress.config.js` or `cypress.config.ts` file in the project root if one exists. The [Configuration guide](https://docs.cypress.io/guides/references/configuration) has been updated to reflect these changes, and explains them in greater detail.\n\nBecause of this, support for `cypress.json` has been removed. Documentation for `cypress.json` has been moved to the [Legacy Configuration guide](https://docs.cypress.io/guides/references/legacy-configuration).\n\nRelated notes:\n\n*   If no config file exists when you open Cypress, the automatic set up process will begin and either a JavaScript or TypeScript config file will be created depending on what your project uses.\n*   You may use the `--config-file` command line flag or the `configFile` [module API](https://docs.cypress.io/guides/guides/module-api) option to specify a `.js` or `.ts` file. JSON config files are no longer supported.\n*   Cypress now requires a config file, so specifying `--config-file false` on the command line or a `configFile` value of `false` in the module API is no longer valid.\n*   You can't have both `cypress.config.js` _and_ `cypress.config.ts` files. This will result in an error when Cypress loads.\n*   A [`defineConfig()`](https://docs.cypress.io/guides/references/configuration#Intelligent-Code-Completion) helper function is now exported by Cypress, which provides automatic code completion for configuration in many popular code editors. For TypeScript users, the `defineConfig` function will ensure the configuration object passed into it satisfies the type definition of the configuration file.\n*   Many pages and examples throughout the documentation have been updated to show configuration using `cypress.config.js` and `cypress.config.ts` vs the older `cypress.json`. For example:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    baseUrl: 'http://localhost:1234',  },})\n```\n\n### Plugins File Removed[​](#Plugins-File-Removed \"Direct link to Plugins File Removed\")\n\nBecause Cypress now supports JavaScript and TypeScript configuration files, a separate \"plugins file\" (which used to default to `cypress/plugins/index.js`) is no longer needed.\n\nSupport for the plugins file has been removed, and it has been replaced with the new [`setupNodeEvents()`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) and [`devServer`](https://docs.cypress.io/guides/references/configuration#devServer) config options.\n\nRelated notes:\n\n*   The `cypress/plugins/index.js` plugins file is no longer automatically loaded by Cypress.\n*   The [`setupNodeEvents()`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) config option is functionally equivalent to the function exported from the plugins file; it takes the same `on` and `config` arguments, and should return the same value. See the [Config option changes section](#setupNodeEvents) of this migration guide for more details.\n*   The [`devServer`](https://docs.cypress.io/guides/references/configuration#devServer) config option is specific to component testing, and offers a much more streamlined and consistent way to configure a component testing dev server than using the plugins file. See the [Config option changes section](#devServer) of this migration guide for more details.\n*   Many pages and examples throughout the documentation have been updated to show configuration in `setupNodeEvents` as well as the legacy plugins file. For example:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      // bind to the event we care about      on('<event>', (arg1, arg2) => {        // plugin stuff here      })    },  },})\n```\n\n### Config Option Changes[​](#Config-Option-Changes \"Direct link to Config Option Changes\")\n\n#### `baseUrl`[​](#baseUrl \"Direct link to baseUrl\")\n\nThe `baseUrl` config option is no longer valid at the top level of the configuration, and may only be defined inside the [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) configuration object.\n\ncaution\n\nAttempting to set the `baseUrl` config option at the top level of the configuration will result in an error when Cypress loads.\n\n#### `componentFolder`[​](#componentFolder \"Direct link to componentFolder\")\n\nThe `componentFolder` config option is no longer used, as it has been replaced by the `specPattern` [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\ncaution\n\nAttempting to set the `componentFolder` config option will result in an error when Cypress loads.\n\n#### `devServer`[​](#devServer \"Direct link to devServer\")\n\nAll functionality related to starting a component testing dev server previously in the `pluginsFile` has moved here. These options are not valid at the top-level, and may only be defined in the [`component`](https://docs.cypress.io/guides/references/configuration#component) configuration object.\n\nRelated notes:\n\n*   Do not configure your dev server inside `setupNodeEvents()`, use the `devServer` config option instead.\n\ninfo\n\nSee the dev server documentation for the UI framework you're using for more specific instructions on what the `devServer` should be for that framework. Some examples can be found in our [framework documentation](https://docs.cypress.io/guides/component-testing/component-framework-configuration).\n\n**Variant 1 (webpack & vite dev servers)**\n\nBefore\n\ncypress/plugins/index.js\n\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')const webpackConfig = require('../../webpack.config.js')module.exports = (on, config) => {  if (config.testingType === 'component') {    on('dev-server:start', async (options) =>      startDevServer({ options, webpackConfig })    )  }}\n```\n\nAfter\n\n*   cypress.config.js\n*   cypress.config.js (verbose)\n*   cypress.config.ts\n*   cypress.config.ts (verbose)\n\n```\nconst { defineConfig } = require('cypress')const webpackConfig = require('./webpack.config.js')module.exports = defineConfig({  component: {    devServer: {      framework: 'react', // or vue      bundler: 'webpack',      webpackConfig,    },  },})\n```\n\n**Variant 2 (react plugin dev servers)**\n\nBefore\n\n```\nconst devServer = require('@cypress/react/plugins/react-scripts')module.exports = (on, config) => {  if (config.testingType === 'component') {    injectDevServer(on, config, {})  }}\n```\n\nAfter\n\n*   cypress.config.js\n*   more verbose\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer: {      framework: 'react', // or vue      bundler: 'webpack',    },  },})\n```\n\n#### `experimentalStudio`[​](#experimentalStudio \"Direct link to experimentalStudio\")\n\nThis option is no longer used. The experimental \"Cypress Studio\" has been removed and will be rethought/revisited in a later release.\n\ncaution\n\nAttempting to set the `experimentalStudio` config option will result in an error when Cypress loads.\n\n#### `ignoreTestFiles` → `excludeSpecPattern`[​](#ignoreTestFiles--excludeSpecPattern \"Direct link to ignoreTestFiles--excludeSpecPattern\")\n\nThe `ignoreTestFiles` option is no longer used, and has been replaced with the `excludeSpecPattern` [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\nDefault values\n\n*   `e2e.excludeSpecPattern` default value is `*.hot-update.js` (same as pervious ignore value)\n*   `component.excludeSpecPattern` default value is `['/snapshots/*', '/image_snapshots/*']` updated from `*.hot-update.js`\n*   The `**/node_modules/**` pattern is automatically added to both `e2e.specExcludePattern` and `component.specExcludePattern`, and does not need to be specified (and can't be overridden).\n\nBefore\n\n```\n{  \"ignoreTestFiles\": \"path/to/**/*.js\"}\n```\n\nAfter\n\n```\n{  component: {    excludeSpecPattern: \"path/to/**/*.js\"  },  e2e: {    excludeSpecPattern: \"other/path/to/**/*.js\"  }}\n```\n\ncaution\n\nAttempting to set the `ignoreTestFiles` config option will result in an error when Cypress loads.\n\nAlso, attempting to set the `excludeSpecPattern` config option at the top level of the configuration will result in an error when Cypress loads.\n\n#### `integrationFolder`[​](#integrationFolder \"Direct link to integrationFolder\")\n\nThis option is no longer used, as it has been replaced by the `specPattern` [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\ncaution\n\nAttempting to set the `integrationFolder` config option will result in an error when Cypress loads.\n\n#### `pluginsFile`[​](#pluginsFile \"Direct link to pluginsFile\")\n\nThis option is no longer used, and all plugin file functionality has moved into the [`setupNodeEvents()`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) and [`devServer`](https://docs.cypress.io/guides/references/configuration#devServer) options. See the [Plugins file removed](#Plugins-File-Removed) section of this migration guide for more details.\n\ncaution\n\nAttempting to set the `pluginsFile` config option will result in an error when Cypress loads.\n\n#### `setupNodeEvents()`[​](#setupNodeEvents \"Direct link to setupNodeEvents\")\n\nAll functionality related to setting up events or modifying the config, previously done in the plugins file, has moved into the `setupNodeEvents()` config options. This option is not valid at the top level of the config, and may only be defined inside the `component` or `e2e` [configuration objects](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\nMore information can be found in the [Plugins API documentation](https://docs.cypress.io/api/plugins/writing-a-plugin#Plugins-API) and the [Configuration API documentation](https://docs.cypress.io/api/plugins/configuration-api#Usage).\n\nBefore `cypress/plugins/index.js`\n\n```\nmodule.exports = (on, config) => {  if (config.testingType === 'component') {    // component testing dev server setup code    // component testing node events setup code  } else {    // e2e testing node events setup code  }}\n```\n\nAfter\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer(cypressConfig) {      // component testing dev server setup code    },    setupNodeEvents(on, config) {      // component testing node events setup code    },  },  e2e: {    setupNodeEvents(on, config) {      // e2e testing node events setup code    },  },})\n```\n\nAlternately, you can continue to use an external plugins file, but you will need to load that file explicitly, and also update it to move any component testing dev server code into the [`devServer`](#devServer) config option.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const setupNodeEvents = require('./cypress/plugins/index.js')module.exports = defineConfig({  component: {    devServer(cypressConfig) {      // component testing dev server setup code    },    setupNodeEvents,  },  e2e: {    setupNodeEvents,  },})\n```\n\n#### `slowTestThreshold`[​](#slowTestThreshold \"Direct link to slowTestThreshold\")\n\nThe `slowTestThreshold` configuration option is no longer valid at the top level of the configuration, and is now a [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\nNote that the default values are unchanged (`10000` for `e2e` and `250` for `component`).\n\ncaution\n\nAttempting to set the `slowTestThreshold` config option at the top level of the configuration will result in an error when Cypress loads.\n\n#### `supportFile`[​](#supportFile \"Direct link to supportFile\")\n\nThe `supportFile` configuration option is no longer valid at the top level of the configuration, and is now a [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options). More information can be found in the [support file docs](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file).\n\nBefore\n\n```\n{  \"supportFile\": \"cypress/support/index.js\"}\n```\n\nAfter\n\n```\n{  component: {    supportFile: 'cypress/support/component.js'  },  e2e: {    supportFile: 'cypress/support/e2e.js'  }}\n```\n\ncaution\n\nAttempting to set the `supportFile` config option at the top level of the configuration will result in an error when Cypress loads.\n\nAlso, for a given testing type, multiple matching `supportFile` files will result in an error when Cypress loads.\n\n#### `testFiles` → `specPattern`[​](#testFiles--specPattern \"Direct link to testFiles--specPattern\")\n\nThe `testFiles` option is no longer used, and has been replaced with the `specPattern` option, which must be defined inside the [`component`](https://docs.cypress.io/guides/references/configuration#component) and [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) configuration objects.\n\nDefault values:\n\n*   No longer matches with `.coffee` or `.cjsx`.\n*   `e2e.specPattern` default value is `cypress/e2e/**/*.cy.{js,jsx,ts,tsx}`.\n*   `component.specPattern` default value is `**/*.cy.{js,jsx,ts,tsx}`.\n\nImportant note about matching:\n\n*   E2E tests will be found using the `e2e.specPattern` value.\n*   Component tests will be found using the `component.specPattern` value but any tests found matching the `e2e.specPattern` value will be automatically excluded.\n\ncaution\n\nAttempting to set the `testFiles` config option will result in an error when Cypress loads.\n\nAlso, attempting to set the `specPattern` config option at the top level of the configuration will result in an error when Cypress loads.\n\n### Updated Test File Locations[​](#Updated-Test-File-Locations \"Direct link to Updated Test File Locations\")\n\nPreviously, you could specify the locations of test files and folders using the configuration options: `componentFolder`, or `integrationFolder`, and `testFiles`. These options have been replaced with `specPattern`, which is not valid at the top-level, but within the [`component`](https://docs.cypress.io/guides/references/configuration#component) or [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) configuration objects. For example:\n\nBefore\n\n```\n{  \"componentFolder\": \"src\",  \"integrationFolder\": \"cypress/integration\",  \"testFiles\": \"**/*.cy.js\"}\n```\n\nAfter\n\n```\n{  component: {    specPattern: 'src/**/*.cy.js'  },  e2e: {    specPattern: 'cypress/integration/**/*.cy.js'  }}\n```\n\ncaution\n\nAttempting to set `componentFolder`, `integrationFolder`, or `testFiles` in the config will result in an error when Cypress loads.\n\ndanger\n\nFor Cypress Cloud users, changing your `specPattern` and files names or extensions of your spec files will result in a loss of data in Cypress Cloud. Because of this, if we detect your project is using Cypress Cloud during automatic migration, we won't suggest changing your spec files. We also don't recommend doing it manually if you are a Cypress Cloud user.\n\n### Generated Files[​](#Generated-Files \"Direct link to Generated Files\")\n\nGenerated screenshots and videos will still be created inside their respective [folders](https://docs.cypress.io/guides/references/configuration#Folders--Files) (`screenshotsFolder`, `videosFolder`). However, the paths of generated files inside those folders will be stripped of any common ancestor paths shared between all spec files found by the `specPattern` option (or via the `--spec` command line option or `spec` module API option, if specified).\n\nHere are a few examples, assuming the value of `videosFolder` is `cypress/videos`, `screenshotsFolder` is `cypress/screenshots` and `cy.screenshot('my-screenshot')` is called once per spec file:\n\n**Example 1**\n\n*   Spec file found\n    *   `cypress/e2e/path/to/file/one.cy.js`\n*   Common ancestor paths (calculated at runtime)\n    *   `cypress/e2e/path/to/file`\n*   Generated screenshot file\n    *   `cypress/screenshots/one.cy.js/my-screenshot.png`\n*   Generated video file\n    *   `cypress/videos/one.cy.js.mp4`\n\n**Example 2**\n\n*   Spec files found\n    *   `cypress/e2e/path/to/file/one.cy.js`\n    *   `cypress/e2e/path/to/two.cy.js`\n*   Common ancestor paths (calculated at runtime)\n    *   `cypress/e2e/path/to`\n*   Generated screenshot files\n    *   `cypress/screenshots/file/one.cy.js/my-screenshot.png`\n    *   `cypress/screenshots/two.cy.js/my-screenshot.png`\n*   Generated video files\n    *   `cypress/videos/file/one.cy.js.mp4`\n    *   `cypress/videos/two.cy.js.mp4`\n\n### Command / Cypress API Changes[​](#Command--Cypress-API-Changes-1 \"Direct link to Command / Cypress API Changes\")\n\n#### `cy.mount()`[​](#cymount \"Direct link to cymount\")\n\nIf you set up your app using the automatic configuration wizard, a basic [`cy.mount()`](https://docs.cypress.io/api/commands/mount) command will be imported for you in your support file from one our supported frameworks.\n\n#### `Cypress.Commands.add()`[​](#CypressCommandsadd \"Direct link to CypressCommandsadd\")\n\n[`Cypress.Commands.add()`](https://docs.cypress.io/api/cypress-api/custom-commands) has been updated to allow the built-in \"placeholder\" custom `mount` and `hover` commands to be overwritten without needing to use `Cypress.Commands.overwrite()`.\n\n### Component Testing Changes[​](#Component-Testing-Changes \"Direct link to Component Testing Changes\")\n\nComponent Testing has moved from experimental to beta status in 10.0.0.\n\nComponent Testing can now be ran from the main app, and launching into component testing via the command `cypress open-ct` is now deprecated. To launch directly into component testing, use the `cypress open --component` command instead.\n\nAll the Component Testing dev servers are now included in the main `cypress` npm package. Configuring them is done via specifying a framework and bundler in the `devServer` config option, and the packages are no longer directly importable. See [Framework Configuration](https://docs.cypress.io/guides/component-testing/component-framework-configuration) for more info.\n\nThe mount libraries for React and Vue have also been included in the main `cypress` package and can be imported from `cypress/react` and `cypress/vue` respectively.\n\nAny previous dev servers or mounting libraries from the `@cypress` namespace should be uninstalled in Cypress 10.\n\n### Clashing Types with Jest[​](#Clashing-Types-with-Jest \"Direct link to Clashing Types with Jest\")\n\nYou may want to consider configuring your app with a separate `tsconfig.json` to solve [clashing types with jest](https://docs.cypress.io/guides/tooling/typescript-support#Clashing-types-with-Jest). You will need to exclude `cypress.config.ts`, `cypress`, `node_modules` in your root `tsconfig.json` file.\n\n```\n{  \"exclude\": [\"cypress.config.ts\", \"cypress\", \"node_modules\"]}\n```\n\n### Code Coverage Plugin[​](#Code-Coverage-Plugin \"Direct link to Code Coverage Plugin\")\n\nThe [Cypress Code Coverage](https://github.com/cypress-io/code-coverage#readme) plugin will need to be updated to version >= 3.10 to work with Cypress 10. Using a previous version will result in an error when tests are ran with code coverage enabled.\n\n## Migrating from `cypress-file-upload` to [`.selectFile()`](https://docs.cypress.io/api/commands/selectfile)[​](#Migrating-from-cypress-file-upload-to-selectFile \"Direct link to Migrating-from-cypress-file-upload-to-selectFile\")\n\nSelecting files with input elements or dropping them over the page is available in Cypress 9.3. Read the [`.selectFile()` API docs](https://docs.cypress.io/api/commands/selectfile) for more information on how this works and how to use it. This guide details how to change your test code to migrate from the [`cypress-file-upload`](https://github.com/abramenal/cypress-file-upload) plugin to `.selectFile()`.\n\n### Quick guide[​](#Quick-guide \"Direct link to Quick guide\")\n\nThe argument signature is different for Cypress' builtin `.selectFile()` command than the `.attachFile` command the `cypress-file-upload` plugin provided. You can follow the steps below for each argument in order to migrate:\n\nWhen the first argument is a file path:\n\n*   Prefix the path with `cypress/fixtures/`.\n\nWhen the first argument is an object:\n\n*   `filePath`: Rename the property to `contents`. Prefix the value with `cypress/fixtures/`.\n*   `fileContent`: Rename the property to `contents`. Use [`Cypress.Buffer.from()`](https://docs.cypress.io/api/utilities/buffer) or other Buffer methods, rather than `Cypress.Blob`.\n*   `encoding`: Remove this property. It is no longer needed due to improved binary file handling in Cypress 9.0.\n*   `mimeType`: No change necessary. In most cases you do not need to give a mimeType explicitly. Cypress will attempt to infer the MIME type [based on the extension](https://github.com/jshttp/mime-types#mimelookuppath) of the fileName if none is provided.\n\nIn the second argument:\n\n*   `subjectType`: Rename this property to `action`. Change the value from `drag-n-drop` to `drag-drop` or from `input` to `select`.\n*   `allowEmpty`: Remove this property. `.selectFile()` does not check the length of a file read from disk, only its existence.\n*   `force`: Works the same with `.selectFile()` as it did in `cypress-file-upload`. No change necessary.\n\n### Examples[​](#Examples \"Direct link to Examples\")\n\nBelow are several examples of migrating various commands from `cypress-file-upload` to the builtin `.selectFile()` command.\n\n#### Read and attach a fixture[​](#Read-and-attach-a-fixture \"Direct link to Read and attach a fixture\")\n\nBefore Attaching a fixture from disk with `cypress-file-upload`\n\n```\ncy.get('[data-cy=\"file-input\"]').attachFile('myfixture.json')\n```\n\nAfter Selecting a fixture from disk with `.selectFile()`. Cypress follows paths from your project root (same as [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile)).\n\n```\ncy.get('[data-cy=\"file-input\"]').selectFile('cypress/fixtures/myfixture.json')// Orcy.fixture('myfixture.json', { encoding: null }).as('myfixture')cy.get('[data-cy=\"file-input\"]').selectFile('@myfixture')\n```\n\n#### Using drag-n-drop[​](#Using-drag-n-drop \"Direct link to Using drag-n-drop\")\n\nBefore Dragging and dropping a file with `cypress-file-upload`\n\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile('myfixture.json', {  subjectType: 'drag-n-drop',})\n```\n\nAfter Selecting a fixture from disk with `.selectFile()`. Cypress follows paths from the root of your test folder (same as [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile)).\n\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile('fixtures/myfixture.json', {  action: 'drag-drop',})\n```\n\n#### Overriding the file name[​](#Overriding-the-file-name \"Direct link to Overriding the file name\")\n\nBefore Dragging and dropping a file with `cypress-file-upload`\n\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile({  filePath: 'myfixture.json',  fileName: 'customFileName.json',})\n```\n\nAfter Selecting a fixture from disk with `.selectFile()`. Cypress follows paths from the root of your test folder (same as [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile)).\n\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile({  contents: 'fixtures/myfixture.json',  fileName: 'customFileName.json',})\n```\n\n#### Working with file contents[​](#Working-with-file-contents \"Direct link to Working with file contents\")\n\nBefore Working with file contents before using using `cypress-file-upload`\n\n```\nconst special = 'file.spss'cy.fixture(special, 'binary')  .then(Cypress.Blob.binaryStringToBlob)  .then((fileContent) => {    // ...process file contents    cy.get('[data-cy=\"file-input\"]').attachFile({      fileContent,      filePath: special,      encoding: 'utf-8',      lastModified: new Date().getTime(),    })  })\n```\n\nAfter Working with file contents before using with `.selectFile()`. The `null` encoding introduced in Cypress 9.0 makes working with binary data simpler, and is the preferred encoding for use with `.selectFile()`.\n\n```\nconst special = 'file.spss'cy.fixture(special, { encoding: null }).then((contents) => {  // ...process file contents  cy.get('[data-cy=\"file-input\"]').selectFile({    contents,    fileName: special,    lastModified: new Date().getTime(),  })})// Orcy.fixture(special, { encoding: null })  .then((contents) => {    // ...process file contents  })  .as('special')cy.get('[data-cy=\"file-input\"]').selectFile('@special')\n```\n\n#### Specifying a custom mimeType[​](#Specifying-a-custom-mimeType \"Direct link to Specifying a custom mimeType\")\n\nBefore Specifying the MIME type with `cypress-file-upload`\n\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile({  filePath: 'myfixture.json',  fileName: 'customFileName.json',})\n```\n\nAfter Specifying a MIME type with `.selectFile()`.\n\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile({  contents: 'fixtures/myfixture.json',  mimeType: 'text/plain',})\n```\n\n## Migrating to Cypress 8.0[​](#Migrating-to-Cypress-80 \"Direct link to Migrating to Cypress 8.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 8.0. [See the full changelog for 8.0](https://docs.cypress.io/guides/references/changelog#8-0-0).\n\n### `cypress run` runs all browsers `--headless`[​](#cypress-run-runs-all-browsers---headless \"Direct link to cypress-run-runs-all-browsers---headless\")\n\nWhen running `cypress run` previous to 8.0, some browsers would launch headed while others were launched headless by default. In 8.0, we've normalized all browsers to launch as headless by default.\n\nThis could cause a couple of changes to your existing runs:\n\n*   You may see the screenshot or video resolution of runs during `cypress run` change to the default of 1280x720. This is because headless browsers use the set screen size as opposed to the browser's size when opening headed.\n*   Chrome extensions will not load during a `--headless` run. If your run depends on a Chrome extension being loaded during `cypress run`, you should explicitly pass the `--headed` flag.\n\nYou can now remove the use of the `--headless` flag during `cypress run` as this is the default for all browsers.\n\nYou should also update any use of the `isHeaded` or `isHeadless` property on [`Cypress.browser`](https://docs.cypress.io/api/cypress-api/browser) or the [browser launch API](https://docs.cypress.io/api/plugins/browser-launch-api) accordingly.\n\nBefore run headless browser\n\n```\ncypress run --browser=chrome --headless\n```\n\n```\ncypress run --browser=firefox --headless\n```\n\nAfter All browsers headless by default, so you can remove the `--headless` flag during `cypress run`.\n\n```\ncypress run --browser=chrome\n```\n\n```\ncypress run --browser=firefox\n```\n\n### Default screen size during `--headless`[​](#Default-screen-size-during---headless \"Direct link to Default-screen-size-during---headless\")\n\nThe default screen size when running a headless browser has been reverted back to 1280x720 pixels. If you have any code in the [browser launch API](https://docs.cypress.io/api/plugins/browser-launch-api) to set the screen size to 1280x720, this can be removed.\n\nBefore set screen size to 1280x720\n\n```\n// cypress/plugins/index.jsmodule.exports = (on, config) => {  on('before:browser:launch', (browser, launchOptions) => {    if (browser.name === 'chrome' && browser.isHeadless) {      launchOptions.args.push('--window-size=1280,720')    }    if (browser.name === 'electron' && browser.isHeadless) {      launchOptions.preferences.width = 1280      launchOptions.preferences.height = 720    }    if (browser.name === 'firefox' && browser.isHeadless) {      launchOptions.args.push('--width=1280')      launchOptions.args.push('--height=720')    }    return launchOptions  })}\n```\n\nAfter no longer need overrides\n\n```\n// cypress/plugins/index.jsmodule.exports = (on, config) => {  // the default screen size is 1280x720 in all headless browsers}\n```\n\n## Migrating to Cypress 7.0[​](#Migrating-to-Cypress-70 \"Direct link to Migrating to Cypress 7.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 7.0. [See the full changelog for 7.0](https://docs.cypress.io/guides/references/changelog#7-0-0).\n\n### [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) changes[​](#cyintercept-changes \"Direct link to cyintercept-changes\")\n\n[Cypress 7.0](https://docs.cypress.io/guides/references/changelog#7-0-0) comes with some breaking changes to [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept):\n\n#### Handler ordering is reversed[​](#Handler-ordering-is-reversed \"Direct link to Handler ordering is reversed\")\n\nPrevious to Cypress 7.0, [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) handlers were run in the order that they are defined, stopping after the first handler to call `req.reply()`, or once all handlers are complete.\n\nWith Cypress 7.0, [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) handlers are now run in reverse order of definition, stopping after the first handler to call `req.reply()`, or once all handlers are complete.\n\nThis change was done so that users can override previously declared [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) handlers by calling [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) again. See [#9302](https://github.com/cypress-io/cypress/issues/9302) for more details.\n\nBefore\n\n```\ncy.intercept(url, (req) => {  /* This will be called first! */})cy.intercept(url, (req) => {  /* This will be called second! */})\n```\n\nAfter\n\n```\ncy.intercept(url, (req) => {  /* This will be called second! */})cy.intercept(url, (req) => {  /* This will be called first! */})\n```\n\n[Read more about the `cy.intercept()` interception lifecycle.](https://docs.cypress.io/api/commands/intercept#Interception-lifecycle)\n\n#### URL matching is stricter[​](#URL-matching-is-stricter \"Direct link to URL matching is stricter\")\n\nBefore Cypress 7.0, [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) would match URLs against strings by using `minimatch`, substring match, or by equality.\n\nWith Cypress 7.0, this behavior is being tightened - URLs are matched against strings only by `minimatch` or by equality. The substring match has been removed.\n\nThis more closely matches the URL matching behavior shown by `cy.route()`. However, some intercepts will not match, even though they did before.\n\nFor example, requests with querystrings may no longer match:\n\n```\n// will this intercept match a request for `/items?page=1`?cy.intercept('/items')// ✅ before 7.0.0, this will match, because it is a substring// ❌ after 7.0.0, this will not match, because of the querystring// solution: update the intercept to match the querystring with a wildcard:cy.intercept('/items?*')\n```\n\nAlso, requests for paths in nested directories may be affected:\n\n```\n// will this intercept match a request for `/some/items`?cy.intercept('/items')// ✅ before 7.0.0, this will match, because it is a substring// ❌ after 7.0.0, this will not match, because of the leading directory// solution: update the intercept to include the directory:cy.intercept('/some/items')\n```\n\nAdditionally, the `matchUrlAgainstPath` `RouteMatcher` option that was added in Cypress 6.2.0 has been removed in Cypress 7.0. It can be safely removed from tests.\n\n#### Deprecated `cy.route2()` command removed[​](#Deprecated-cyroute2-command-removed \"Direct link to Deprecated-cyroute2-command-removed\")\n\n`cy.route2()` was the original name for `cy.intercept()` during the experimental phase of the feature. It was deprecated in Cypress 6.0. In Cypress 7.0, it has been removed entirely. Please update existing usages of `cy.route2()` to call `cy.intercept()` instead.\n\nBefore\n\n```\ncy.route2('/widgets/*', { fixture: 'widget.json' }).as('widget')\n```\n\nAfter\n\n```\ncy.intercept('/widgets/*', { fixture: 'widget.json' }).as('widget')\n```\n\n#### `res.delay()` and `res.throttle()` have been renamed[​](#resdelay-and-resthrottle-have-been-renamed \"Direct link to resdelay-and-resthrottle-have-been-renamed\")\n\nThe `res.delay()` and `res.throttle()` functions that exist on responses yielded to response handlers have been renamed.\n\nThe new names are `res.setDelay()` and `res.setThrottle()`, respectively.\n\nBefore\n\n```\ncy.intercept('/slow', (req) => {  req.continue((res) => {    // apply a delay of 1 second and a throttle of 56kbps    res.delay(1000).throttle(56)  })})\n```\n\nAfter\n\n```\ncy.intercept('/slow', (req) => {  req.continue((res) => {    // apply a delay of 1 second and a throttle of 56kbps    res.setDelay(1000).setThrottle(56)  })})\n```\n\n[Read more about available functions on `res`.](https://docs.cypress.io/api/commands/intercept#Intercepted-responses)\n\n#### Falsy values are no longer dropped in `StaticResponse` bodies[​](#Falsy-values-are-no-longer-dropped-in-StaticResponse-bodies \"Direct link to Falsy-values-are-no-longer-dropped-in-StaticResponse-bodies\")\n\nPreviously, falsy values supplied as the `body` of a `StaticResponse` would get dropped (the same as if no body was supplied). Now, the bodies are properly encoded in the response.\n\nBefore\n\n```\ncy.intercept('/does-it-exist', { body: false })// Requests to `/does-it-exist` receive an empty response body\n```\n\nAfter\n\n```\ncy.intercept('/does-it-exist', { body: false })// Requests to `/does-it-exist` receive a response body of `false`\n```\n\n#### Errors thrown by request and response handlers are no longer wrapped[​](#Errors-thrown-by-request-and-response-handlers-are-no-longer-wrapped \"Direct link to Errors thrown by request and response handlers are no longer wrapped\")\n\nPreviously, errors thrown inside of `req` and `res` handlers would be wrapped by a `CypressError`. In 7.0.0, errors thrown inside of these handlers are not wrapped before failing the test.\n\nThis should only affect users who are explicitly asserting on global errors. See [#15189](https://github.com/cypress-io/cypress/issues/15189) for more details.\n\n### Component Testing[​](#Component-Testing \"Direct link to Component Testing\")\n\nIn 7.0, component testing is no longer experimental. Cypress now ships with a dedicated component test runner with a new UI and dedicated commands to launch it.\n\n**Changes are required for all existing projects**. The required changes are limited to configuration and there are no breaking changes to the `mount` API. The migration guide contains the following steps:\n\n1.  [Update your Cypress configuration to remove `experimentalComponentTesting`](#1-Remove-experimentalComponentTesting-config)\n2.  [Install updated dependencies](#2-Install-component-testing-dependencies)\n3.  [Update the plugins file](#3-Update-plugins-file-to-use-dev-serverstart)\n4.  [Use CLI commands to launch](#4-Use-CLI-commands-to-launch)\n5.  [Update the support file (optionally)](#5-Update-the-support-file-optionally)\n\n#### 1\\. Remove `experimentalComponentTesting` config[​](#1-Remove-experimentalComponentTesting-config \"Direct link to 1-Remove-experimentalComponentTesting-config\")\n\nThe `experimentalComponentTesting` configuration is no longer needed to run component tests. Remove this flag in order to run Cypress tests without erroring.\n\nBefore experimentalComponentTesting flag is required for component testing\n\n```\n{  \"experimentalComponentTesting\": true,  \"componentFolder\": \"src\",  \"testFiles\": \"**/*spec.{js,jsx,ts,tsx}\"}\n```\n\nAfter experimentalComponentTesting flag must be removed\n\n```\n{  \"componentFolder\": \"src\",  \"testFiles\": \"**/*spec.{js,jsx,ts,tsx}\"}\n```\n\n#### 2\\. Install component testing dependencies[​](#2-Install-component-testing-dependencies \"Direct link to 2. Install component testing dependencies\")\n\nThe Component Test Runner requires the following dependencies:\n\n*   Framework-specific bindings such as [`@cypress/react`](https://www.npmjs.com/package/@cypress/react).\n*   Development server adapter such as [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n*   Peer dependencies such as [`webpack-dev-server`](https://www.npmjs.com/package/webpack-dev-server), [`vue`](https://www.npmjs.org/package/vue), or [`react`](https://www.npmjs.org/package/react).\n\n**Install React dependencies**\n\n1.  Upgrade to [`@cypress/react`](https://www.npmjs.com/package/@cypress/react) 5.X.\n2.  Install [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n3.  (Optional) Install [`cypress-react-selector`](https://www.npmjs.com/package/cypress-react-selector) if any tests use `cy.react()`.\n4.  (Optional) Install code coverage, see [installation steps](https://docs.cypress.io/guides/tooling/code-coverage)).\n\n```\nnpm install cypress @cypress/react @cypress/webpack-dev-server --save-dev\n```\n\n**Install Vue 3 dependencies**\n\n1.  Upgrade to [`@cypress/vue@next`](https://www.npmjs.com/package/@cypress/vue) (3.X and above).\n2.  Install [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n\n```\nnpm install cypress @cypress/vue@next @cypress/webpack-dev-server --save-dev\n```\n\n**Install Vue 2 dependencies**\n\n1.  Upgrade to [`@cypress/vue@2`](https://www.npmjs.com/package/@cypress/vue) (2.X only).\n2.  Install [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n\n```\nnpm install cypress @cypress/vue @cypress/webpack-dev-server --save-dev\n```\n\n#### 3\\. Update plugins file to use `dev-server:start`[​](#3-Update-plugins-file-to-use-dev-serverstart \"Direct link to 3-Update-plugins-file-to-use-dev-serverstart\")\n\n**Re-using a project's local development server instead of file preprocessors**\n\nIn 7.0 Cypress component tests require that code is bundled with your local development server, via a new `dev-server:start` event. This event replaces the previous `file:preprocessor` event.\n\nBefore Plugins file registers the file:preprocessor event\n\n```\nconst webpackPreprocessor = require('@cypress/webpack-preprocessor')const webpackConfig = require('../webpack.config.js')module.exports = (on, config) => {  on('file:preprocessor', webpackPreprocessor(options))}\n```\n\nAfter Plugins file registers the dev-server:start event\n\n```\n// The @cypress/webpack-dev-server package replaces @cypress/webpack-preprocessorconst { startDevServer } = require('@cypress/webpack-dev-server')const webpackConfig = require('../webpack.config.js')module.exports = (on, config) => {  // You must use the dev-server:start event instead of the file:preprocessor event  on('dev-server:start', (options) => {    return startDevServer({ options, webpackConfig })  })}\n```\n\n**Configure `plugins.js` for React projects**\n\nProjects using React may not need to update their plugins file. If your project is using a webpack scaffold or boilerplate, it is recommended to use a preset plugin imported from [`@cypress/react/plugins`](https://github.com/cypress-io/cypress/tree/v7.7.0/npm/react/plugins).\n\n**Preset Plugins for React**\n\nIf you are using a preset plugin within [`@cypress/react`](https://www.npmjs.com/package/@cypress/react), you should not need to update your plugins file. To check if you are using a preset, check to see if your plugins file contains an import to a file inside of `@cypress/react/plugins`.\n\nAfter An example plugins file to configure component testing in a React Scripts project\n\n```\n// The @cypress/react project exposes preset plugin configurations// These presets automatically register the events to bundle the project properlyconst injectReactScriptsDevServer = require('@cypress/react/plugins/react-scripts')module.exports = (on, config) => {  // Internally, this method registers `dev-server:start` with the proper webpack configuration  // Previously, it registered the `file:preprocessor` event.  injectReactScriptsDevServer(on, config)  return config}\n```\n\n**Configure `plugins.js` for Vue**\n\nProjects using Vue will likely be using either [`@vue/cli`](https://cli.vuejs.org/) or manually defining webpack configuration. These steps are identical to the manual setup steps, with the exception of how you resolve the webpack configuration. To access the resolved webpack configuration that contains any `vue.config.js` setup or the default [`@vue/cli`](https://cli.vuejs.org/) webpack setup, you must import the configuration and pass it into [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n\nAfter An example plugins file to configure component testing in a Vue CLI project\n\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')// The resolved configuration, which contains any `vue.config.js` setupconst webpackConfig = require('@vue/cli-service/webpack.config.js')module.exports = (on, config) => {  on('dev-server:start', (options) => {    return startDevServer({ options, webpackConfig })  })}\n```\n\n**Configuring a project with vanilla webpack**\n\nFor projects with manually defined or ejected webpack configurations, the webpack configuration must be passed in.\n\nAfter An example plugins file to configure component testing in a project with vanilla webpack\n\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')const webpackConfig = require('../webpack.config.js')module.exports = (on, config) => {  on('dev-server:start', (options) => {    return startDevServer({ options, webpackConfig })  })}\n```\n\n#### 4\\. Use CLI commands to launch[​](#4-Use-CLI-commands-to-launch \"Direct link to 4. Use CLI commands to launch\")\n\nTo run your component tests you _must_ use the dedicated component testing subcommands.\n\n*   `cypress open-ct`\n*   `cypress run-ct`\n\ninfo\n\nComponent tests will no longer be picked up when launching Cypress from `cypress open` or `cypress run`. Please use `cypress open-ct` or `cypress run-ct`.\n\nBefore Commands launches both end-to-end and component tests.\n\nAfter Command launches Cypress Component Test Runner and executes component tests. End-to-end tests are run separately.\n\n```\n# open component testing runnercypress open-ct# run all component testscypress run-ct# e2e testscypress opencypress run\n```\n\n#### 5\\. Update the support file (optionally)[​](#5-Update-the-support-file-optionally \"Direct link to 5. Update the support file (optionally)\")\n\nPreviously, a support file was required to set up the component testing target node. This is no longer necessary.\n\nSpecifically for React users, if the support file contains the following line, please remove it. The import will fail in the future. We have left it in to avoid a breaking change, but the file does nothing.\n\nBefore The support file was required to import a script from [@cypress/react](https://www.npmjs.com/package/@cypress/react)\n\n```\n// support.js// This import should be removed, it will error in a future updateimport '@cypress/react/hooks'\n```\n\n#### Expanded stylesheet support[​](#Expanded-stylesheet-support \"Direct link to Expanded stylesheet support\")\n\nStylesheets are now bundled and imported within spec and support files. Previously, many of `mount`'s mounting options such as `stylesheets`, `cssFiles`, and `styles` were required to import stylesheets into your component tests. This often involved pre-compiling the stylesheets before launching the component tests, which affected performance. Migrating to imports for these styles is optional, but recommended.\n\nNow, stylesheets should be loaded into the `document` the same way they are in your application. It is recommended you update your code like so:\n\nBefore Stylesheets were loaded using the filesystem\n\n```\nconst { mount } = require('@cypress/react')const Button = require('./Button')it('renders a Button', () => {  // Mounting a button and loading the Tailwind CSS library  mount(<Button />, {    stylesheets: [      // Paths are relative to the project root directory and must be pre-compiled      // Because they are static, they do not watch for file updates      '/dist/index.css',      '/node_modules/tailwindcss/dist/tailwind.min.css',    ],  })})\n```\n\nAfter Stylesheets are supported via an import and `mountingOptions.stylesheets` is not recommended\n\n```\n// In the majority of modern style-loaders,// these styles will be injected into document.head when they're imported belowrequire('./index.scss')require('tailwindcss/dist/tailwind.min.css')const { mount } = require('@cypress/react')const Button = require('./Button')it('renders a Button', () => {  // This button will render with the Tailwind CSS styles  // as well as the application's index.scss styles  mount(<Button />)})\n```\n\n#### Desktop GUI no longer displays component tests[​](#Desktop-GUI-no-longer-displays-component-tests \"Direct link to Desktop GUI no longer displays component tests\")\n\nPreviously, the Desktop GUI displayed _both_ end-to-end and component tests. Now, component tests are only displayed when launching via the component testing-specific subcommands. `cypress open-ct` (or `run-ct` in CI)\n\n#### Executing all or some component tests[​](#Executing-all-or-some-component-tests \"Direct link to Executing all or some component tests\")\n\nIn 6.X, the Desktop GUI had support for finding and executing a subset of component tests. In 7.0, this is possible with the `--headed` command and a spec glob, like so:\n\n```\ncypress run-ct --headed --spec **/some-folder/*spec.*\n```\n\n#### Coverage[​](#Coverage \"Direct link to Coverage\")\n\nPreviously, the [`@cypress/react`](https://www.npmjs.com/package/@cypress/vue) 4.X package embedded code coverage in your tests automatically.\n\nIf you still wish to record code coverage in your tests, you must manually install it. Please see our [code coverage guide](https://docs.cypress.io/guides/tooling/code-coverage) for the latest steps.\n\n#### cypress-react-selector[​](#cypress-react-selector \"Direct link to cypress-react-selector\")\n\nIf you use `cy.react()` in your tests, you must manually install [`cypress-react-selector`](https://www.npmjs.com/package/cypress-react-selector) with `npm install cypress-react-selector --save-dev`. You do not need to update your support file.\n\n#### HTML Side effects[​](#HTML-Side-effects \"Direct link to HTML Side effects\")\n\nAs of 7.0, we only clean up components mounted by Cypress via [`@cypress/react`](https://www.npmjs.com/package/@cypress/react) or [`@cypress/vue`](https://www.npmjs.com/package/@cypress/vue).\n\nWe no longer automatically reset the `document.body` between tests. Any HTML side effects of your component tests will carry over.\n\nBefore All HTML content was cleared between spec files\n\n```\nconst { mount } = require('@cypress/react')describe('Component teardown behavior', () => {  it('modifies the document and mounts a component', () => {    // HTML unrelated to the component is mounted    Cypress.$('body').append('<div data-cy=\"some-html\"/>')    // A component is mounted    mount(<Button data-cy=\"my-button\"></Button>)    cy.get('[data-cy=\"some-html\"]').should('exist')    cy.get('[data-cy=\"my-button\"]').should('exist')  })  it('cleans up any HTML', () => {    // The component is automatically unmounted by Cypress    cy.get('[data-cy=\"my-button\"]').should('not.exist')    // The HTML left over from the previous test has been cleaned up    // This was done automatically by Cypress    cy.get('[data-cy=\"some-html\"]').should('not.exist')  })})\n```\n\nAfter Only the components are cleaned up between spec files\n\n```\nconst { mount } = require('@cypress/react')describe('Component teardown behavior', () => {  it('modifies the document and mounts a component', () => {    // HTML unrelated to the component is mounted    Cypress.$('body').append('<div data-cy=\"some-html\"/>')    // A component is mounted    mount(<Button data-cy=\"my-button\"></Button>)    cy.get('[data-cy=\"some-html\"]').should('exist')    cy.get('[data-cy=\"my-button\"]').should('exist')  })  it('only cleans up *components* between tests', () => {    // The component is automatically unmounted by Cypress    cy.get('[data-cy=\"my-button\"]').should('not.exist')    // The HTML left over from the previous test should be manually cleared    cy.get('[data-cy=\"some-html\"]').should('not.exist')  })})\n```\n\n#### Legacy `cypress-react-unit-test` and `cypress-vue-unit-test` packages[​](#Legacy-cypress-react-unit-test-and-cypress-vue-unit-test-packages \"Direct link to Legacy-cypress-react-unit-test-and-cypress-vue-unit-test-packages\")\n\nFor users upgrading from [`cypress-react-unit-tests`](https://www.npmjs.com/package/cypress-react-unit-test) or [`cypress-vue-unit-tests`](https://www.npmjs.com/package/cypress-vue-unit-test), please update all references to use [`@cypress/react`](https://www.npmjs.com/package/@cypress/react) or [`@cypress/vue`](https://www.npmjs.com/package/@cypress/vue). These packages have been deprecated and moved to the Cypress scope on npm.\n\n### Uncaught exception and unhandled rejections[​](#Uncaught-exception-and-unhandled-rejections \"Direct link to Uncaught exception and unhandled rejections\")\n\nIn 7.0, Cypress now fails tests in more situations where there is an uncaught exception and also if there is an unhandled promise rejection in the application under test.\n\nYou can ignore these situations and not fail the Cypress test with the code below.\n\n#### Turn off all uncaught exception handling[​](#Turn-off-all-uncaught-exception-handling \"Direct link to Turn off all uncaught exception handling\")\n\n```\nCypress.on('uncaught:exception', (err, runnable) => {  // returning false here prevents Cypress from  // failing the test  return false})\n```\n\n#### Turn off uncaught exception handling unhandled promise rejections[​](#Turn-off-uncaught-exception-handling-unhandled-promise-rejections \"Direct link to Turn off uncaught exception handling unhandled promise rejections\")\n\n```\nCypress.on('uncaught:exception', (err, runnable, promise) => {  // when the exception originated from an unhandled promise  // rejection, the promise is provided as a third argument  // you can turn off failing the test in this case  if (promise) {    // returning false here prevents Cypress from    // failing the test    return false  }})\n```\n\n### Node.js 12+ support[​](#Nodejs-12-support \"Direct link to Node.js 12+ support\")\n\nCypress comes bundled with its own [Node.js version](https://github.com/cypress-io/cypress/blob/develop/.node-version). However, installing the `cypress` npm package uses the Node.js version installed on your system.\n\nNode.js 10 reached its end of life on Dec 31, 2019 and Node.js 13 reached its end of life on June 1, 2019. [See Node's release schedule](https://github.com/nodejs/Release). These Node.js versions will no longer be supported when installing Cypress. The minimum Node.js version supported to install Cypress is Node.js 12 or Node.js 14+.\n\n## Migrating `cy.route()` to [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept)[​](#Migrating-cyroute-to-cyintercept \"Direct link to Migrating-cyroute-to-cyintercept\")\n\nThis guide details how to change your test code to migrate from `cy.route()` to [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept). `cy.server()` and `cy.route()` are deprecated in Cypress 6.0.0. In a future release, support for `cy.server()` and `cy.route()` will be removed.\n\nPlease also refer to the full documentation for [cy.intercept()](https://docs.cypress.io/api/commands/intercept).\n\n### Match simple route[​](#Match-simple-route \"Direct link to Match simple route\")\n\nIn many use cases, you can replace `cy.route()` with [cy.intercept()](https://docs.cypress.io/api/commands/intercept) and remove the call to `cy.server()` (which is no longer necessary).\n\nBefore\n\n```\n// Set up XHR listeners using cy.route()cy.server()cy.route('/users').as('getUsers')cy.route('POST', '/project').as('createProject')cy.route('PATCH', '/projects/*').as('updateProject')\n```\n\nAfter\n\n```\n// Intercept HTTP requestscy.intercept('/users').as('getUsers')cy.intercept('POST', '/project').as('createProject')cy.intercept('PATCH', '/projects/*').as('updateProject')\n```\n\n### Match against `url` and `path`[​](#Match-against-url-and-path \"Direct link to Match-against-url-and-path\")\n\nThe `url` argument to [cy.intercept()](https://docs.cypress.io/api/commands/intercept) matches against the full url, as opposed to the `url` or `path` in `cy.route()`. If you're using the `url` argument in [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept), you may need to update your code depending on the route you're trying to match.\n\nBefore\n\n```\n// Match XHRs with a path or url of /userscy.server()cy.route({  method: 'POST',  url: '/users',}).as('getUsers')\n```\n\nAfter\n\n```\n// Match HTTP requests with a path of /userscy.intercept({  method: 'POST',  path: '/users',}).as('getUsers')// OR// Match HTTP requests with an exact url of https://example.cypress.io/userscy.intercept({  method: 'POST',  url: 'https://example.cypress.io/users',}).as('getUsers')\n```\n\n### `cy.wait()` object[​](#cywait-object \"Direct link to cywait-object\")\n\nThe object returned by `cy.wait()` is different from intercepted HTTP requests using [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) than the object returned from an awaited `cy.route()` XHR.\n\nBefore\n\n```\n// Wait for XHR from cy.route()cy.route('POST', '/users').as('createUser')// ...cy.wait('@createUser').then(({ requestBody, responseBody, status }) => {  expect(status).to.eq(200)  expect(requestBody.firstName).to.eq('Jane')  expect(responseBody.firstName).to.eq('Jane')})\n```\n\nAfter\n\n```\n// Wait for intercepted HTTP requestcy.intercept('POST', '/users').as('createUser')// ...cy.wait('@createUser').then(({ request, response }) => {  expect(response.statusCode).to.eq(200)  expect(request.body.name).to.eq('Jane')  expect(response.body.name).to.eq('Jane')})\n```\n\n### Fixtures[​](#Fixtures \"Direct link to Fixtures\")\n\nYou can stub requests and response with fixture data by defining a `fixture` property in the `routeHandler` argument for [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept).\n\nBefore\n\n```\n// Stub response with fixture data using cy.route()cy.route('GET', '/projects', 'fx:projects')\n```\n\nAfter\n\n```\n// Stub response with fixture data using cy.intercept()cy.intercept('GET', '/projects', {  fixture: 'projects',})\n```\n\n### Override intercepts[​](#Override-intercepts \"Direct link to Override intercepts\")\n\nAs of 7.0, newer intercepts are called before older intercepts, allowing users to override intercepts. [See \"Handler ordering is reversed\" for more details](#Handler-ordering-is-reversed).\n\nBefore 7.0, intercepts could not be overridden. See [#9302](https://github.com/cypress-io/cypress/issues/9302) for more details.\n\n## Migrating to Cypress 6.0[​](#Migrating-to-Cypress-60 \"Direct link to Migrating to Cypress 6.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 6.0. [See the full changelog for 6.0](https://docs.cypress.io/guides/references/changelog#6-0-0).\n\n### Non-existent element assertions[​](#Non-existent-element-assertions \"Direct link to Non-existent element assertions\")\n\ninfo\n\n**Key takeway:** Use `.should('not.exist')` to assert that an element does not exist in the DOM (not `.should('not.be.visible')`, etc).\n\nIn previous versions of Cypress, there was a possibility for tests to falsely pass when asserting a negative state on non-existent elements.\n\nFor example, in the tests below we want to test that the search dropdown is no longer visible when the search input is blurred because we hide the element in CSS styles. Except in this test, we've mistakenly misspelled one of our selectors.\n\n```\ncy.get('input[type=search]').type('Cypress')cy.get('#dropdown').should('be.visible')cy.get('input[type=search]').blur()// below we misspelled \"dropdown\" in the selector 😞// the assertions falsely pass in Cypress < 6.0// and will correctly fail in Cypress 6.0 +cy.get('#dropdon').should('not.be.visible')cy.get('#dropdon').should('not.have.class', 'open')cy.get('#dropdon').should('not.contain', 'Cypress')\n```\n\n![non-existent element before 6.0](https://docs.cypress.io/img/guides/migration-guide/el-incorrectly-passes-existence-check.png)\n\nIn 6.0, these assertions will now correctly fail, telling us that the `#dropdon` element doesn't exist in the DOM.\n\n![non-existent element in 6.0](https://docs.cypress.io/img/guides/migration-guide/el-correctly-fails-existence-check.png)\n\n#### Assertions on non-existent elements[​](#Assertions-on-non-existent-elements \"Direct link to Assertions on non-existent elements\")\n\nThis fix may cause some breaking changes in your tests if you are relying on assertions such as `not.be.visible` or `not.contains` to test that the DOM element did not _exist_ in the DOM. This means you'll need to update your test code to be more specific about your assertions on non-existent elements.\n\nBefore Assert that non existent element was not visible\n\n```\nit('test', () => {  // the modal element is removed from the DOM on click  cy.get('[data-cy=\"modal\"]').find('.close').click()  // assertions below pass in Cypress < 6.0, but properly fail in 6.0+  cy.get('[data-cy=\"modal\"]').should('not.be.visible')  cy.get('[data-cy=\"modal\"]').should('not.contain', 'Upgrade')})\n```\n\nAfter Assert that non existent element does not exist\n\n```\nit('test', () => {  // the modal element is removed from the DOM on click  cy.get('data-cy=\"modal\"').find('.close').click()  // we should instead assert that the element doesn't exist  cy.get('data-cy=\"modal\"').should('not.exist')})\n```\n\n### Opacity visibility[​](#Opacity-visibility \"Direct link to Opacity visibility\")\n\nDOM elements with `opacity: 0` style are no longer considered to be visible. This includes elements with an ancestor that has `opacity: 0` since a child element can never have a computed opacity greater than that of an ancestor.\n\nElements where the CSS property (or ancestors) is `opacity: 0` are still considered [actionable](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) however and [any action commands](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Actionability) used to interact with the element will perform the action. This matches browser's implementation on how they regard elements with `opacity: 0`.\n\n#### Assert visibility of `opacity: 0` element[​](#Assert-visibility-of-opacity-0-element \"Direct link to Assert-visibility-of-opacity-0-element\")\n\nBefore Failed assertion that `opacity: 0` element is not visible.\n\n```\nit('test', () => {  // '.hidden' has 'opacity: 0' style.  // In < 5.0 this assertion would fail  cy.get('.hidden').should('not.be.visible')})\n```\n\nAfter Passed assertion that `opacity: 0` element is not visible.\n\n```\nit('test', () => {  // '.hidden' has 'opacity: 0' style.  // In 6.0 this assertion will pass  cy.get('.hidden').should('not.be.visible')})\n```\n\n#### Perform actions on `opacity: 0` element[​](#Perform-actions-on-opacity-0-element \"Direct link to Perform-actions-on-opacity-0-element\")\n\nIn all versions of Cypress, you can interact with elements that have `opacity: 0` style.\n\n```\nit('test', () => {  // '.hidden' has 'opacity: 0' style.  cy.get('.hidden').click() // ✅ clicks on element  cy.get('.hidden').type('hi') // ✅ types into element  cy.get('.hidden').check() // ✅ checks element  cy.get('.hidden').select('yes') // ✅ selects element})\n```\n\n### `cy.wait(alias)` type[​](#cywaitalias-type \"Direct link to cywaitalias-type\")\n\n`cy.route()` is deprecated in 6.0.0. We encourage the use of [cy.intercept()](https://docs.cypress.io/api/commands/intercept) instead. Due to this deprecation, the type yielded by [cy.wait(alias)](https://docs.cypress.io/api/commands/wait) has changed.\n\nBefore Before 6.0.0, [cy.wait(alias)](https://docs.cypress.io/api/commands/wait) would yield an object of type `WaitXHR`.\n\nAfter In 6.0.0 and onwards, [cy.wait(alias)](https://docs.cypress.io/api/commands/wait) will yield an object of type `Interception`. This matches the new interception object type used for [cy.intercept()](https://docs.cypress.io/api/commands/intercept).\n\n#### Restore old behavior[​](#Restore-old-behavior \"Direct link to Restore old behavior\")\n\nIf you need to restore the type behavior prior to 6.0.0 for [cy.wait(alias)](https://docs.cypress.io/api/commands/wait), you can declare a global override for [cy.wait()](https://docs.cypress.io/api/commands/wait) like so:\n\n```\ndeclare global {  namespace Cypress {    interface Chainable<Subject = any> {      wait(alias: string): Chainable<Cypress.WaitXHR>    }  }}\n```\n\n### `—disable-dev-shm-usage`[​](#disable-dev-shm-usage \"Direct link to disable-dev-shm-usage\")\n\nWe now pass `—disable-dev-shm-usage` to the Chrome browser flags by default. If you're passing this flag in your `plugins` file, you can now remove this code.\n\nBefore Passing flag in plugins file.\n\n```\n// cypress/plugins/index.jsmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, launchOptions) => {    if (browser.family === 'chromium' && browser.name !== 'electron') {      launchOptions.args.push('--disable-dev-shm-usage')    }    return launchOptions  })}\n```\n\nAfter Remove flag from plugins file.\n\n```\n// cypress/plugins/index.jsmodule.exports = (on, config) => {}\n```\n\n#### Restore old behavior[​](#Restore-old-behavior-1 \"Direct link to Restore old behavior\")\n\nIf you need to remove the flag in 6.0.0+, you can follow the workaround documented here: [#9242](https://github.com/cypress-io/cypress/issues/9242).\n\n## Migrating to Cypress 5.0[​](#Migrating-to-Cypress-50 \"Direct link to Migrating to Cypress 5.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 5.0. [See the full changelog for 5.0](https://docs.cypress.io/guides/references/changelog#5-0-0).\n\n### Tests retries[​](#Tests-retries \"Direct link to Tests retries\")\n\nTest retries are available in Cypress 5.0. This means that tests can be re-run a number of times before potentially being marked as a failed test. Read the [Test Retries](https://docs.cypress.io/guides/guides/test-retries) doc for more information on how this works and how to turn on test retries.\n\nWhen test retries are turned on, there will now be a screenshot taken for every failed attempt, so there could potentially be more than 1 screenshot per test failure. Read the [Test Retries](https://docs.cypress.io/guides/guides/test-retries) doc for more information on how this works.\n\nThe [`cypress-plugin-retries`](https://github.com/Bkucera/cypress-plugin-retries) plugin has been deprecated in favor of test retries built into Cypress. There's guidance below on how to migrate from the [`cypress-plugin-retries`](https://github.com/Bkucera/cypress-plugin-retries) plugin to Cypress's built-in test retries.\n\n#### Configure test retries via the CLI[​](#Configure-test-retries-via-the-CLI \"Direct link to Configure test retries via the CLI\")\n\nBefore Setting retries with `cypress-plugin-retries` via env vars\n\n```\nCYPRESS_RETRIES=2 cypress run\n```\n\nAfter Setting test retries in Cypress 5.0 via env vars\n\n```\nCYPRESS_RETRIES=2 cypress run\n```\n\n#### Configure test retries in the configuration file[​](#Configure-test-retries-in-the-configuration-file \"Direct link to Configure test retries in the configuration file\")\n\nBefore Setting retries with `cypress-plugin-retries` via configuration\n\n```\n{  \"env\": {    \"RETRIES\": 2  }}\n```\n\nAfter Setting test retries in Cypress 5.0 via configuration\n\n*   `runMode` allows you to define the number of test retries when running `cypress run`\n*   `openMode` allows you to define the number of test retries when running `cypress open`\n\n```\n{  \"retries\": {    \"runMode\": 1,    \"openMode\": 3  }}\n```\n\n#### Configure test retries per test[​](#Configure-test-retries-per-test \"Direct link to Configure test retries per test\")\n\nBefore Setting retries with `cypress-plugin-retries` via the test\n\n```\nit('test', () => {  Cypress.currentTest.retries(2)})\n```\n\nAfter Setting test retries in Cypress 5.0 via test options\n\n```\nit(  'allows user to login',  {    retries: 2,  },  () => {    // ...  })\n```\n\n*   `runMode` allows you to define the number of test retries when running `cypress run`\n*   `openMode` allows you to define the number of test retries when running `cypress open`\n\n```\nit(  'allows user to login',  {    retries: {      runMode: 2,      openMode: 3,    },  },  () => {    // ...  })\n```\n\n### Module API results[​](#Module-API-results \"Direct link to Module API results\")\n\nTo more accurately reflect result data for runs with [test retries](https://docs.cypress.io/guides/guides/test-retries), the structure of each run's `runs` array resolved from the `Promise` returned from `cypress.run()` of the Module API has changed.\n\nMainly there is a new `attempts` Array on each `test` which will reflect the result of each test retry.\n\nBefore `results.runs` Module API results\n\n```\n{  // ...  \"runs\": [{    // ...    \"hooks\": [{      \"hookId\": \"h1\",      \"hookName\": \"before each\",      \"title\": [ \"before each hook\" ],      \"body\": \"function () {\\n  expect(true).to.be[\"true\"];\\n}\"    }],    // ...    \"screenshots\": [{      \"screenshotId\": \"8ddmk\",      \"name\": null,      \"testId\": \"r2\",      \"takenAt\": \"2020-08-05T08:52:20.432Z\",      \"path\": \"User/janelane/my-app/cypress/screenshots/spec.js/test (failed).png\",      \"height\": 720,      \"width\": 1280    }],    \"stats\": {      // ...      \"wallClockStartedAt\": \"2020-08-05T08:38:37.589Z\",      \"wallClockEndedAt\": \"2018-07-11T17:53:35.675Z\",      \"wallClockDuration\": 1171    },    \"tests\": [{      \"testId\": \"r2\",      \"title\": [ \"test\" ],      \"state\": \"failed\",      \"body\": \"function () {\\n  expect(true).to.be[\"false\"];\\n}\",      \"stack\": \"AssertionError: expected true to be false\\n' +        '    at Context.eval (...cypress/integration/spec.js:5:21\",      \"error\": \"expected true to be false\",      \"timings\": {        \"lifecycle\": 16,        \"test\": {...}      },      \"failedFromHookId\": null,      \"wallClockStartedAt\": \"2020-08-05T08:38:37.589Z\",      \"wallClockDuration\": 1171,      \"videoTimestamp\": 4486    }],  }],  // ...}\n```\n\nAfter `results.runs` Module API results\n\n```\n{  // ...  \"runs\": [{    // ...    \"hooks\": [{      \"hookName\": \"before each\",      \"title\": [ \"before each hook\" ],      \"body\": \"function () {\\n  expect(true).to.be[\"true\"];\\n}\"    }],    // ...    \"stats\": {      // ...      \"startedAt\": \"2020-08-05T08:38:37.589Z\",      \"endedAt\": \"2018-07-11T17:53:35.675Z\",      \"duration\": 1171    },    \"tests\": [{      \"title\": [ \"test\" ],      \"state\": \"failed\",      \"body\": \"function () {\\n  expect(true).to.be[\"false\"];\\n}\",      \"displayError\": \"AssertionError: expected true to be false\\n' +      '    at Context.eval (...cypress/integration/spec.js:5:21\",      \"attempts\": [{        \"state\": \"failed\",        \"error\": {          \"message\": \"expected true to be false\",          \"name\": \"AssertionError\",          \"stack\": \"AssertionError: expected true to be false\\n' +      '    at Context.eval (...cypress/integration/spec.js:5:21\"        },        \"screenshots\": [{          \"name\": null,          \"takenAt\": \"2020-08-05T08:52:20.432Z\",          \"path\": \"User/janelane/my-app/cypress/screenshots/spec.js/test (failed).png\",          \"height\": 720,          \"width\": 1280        }],        \"startedAt\": \"2020-08-05T08:38:37.589Z\",        \"duration\": 1171,        \"videoTimestamp\": 4486      }]    }],  }],  // ...}\n```\n\n### Cookies `whitelist` option renamed[​](#Cookies-whitelist-option-renamed \"Direct link to Cookies-whitelist-option-renamed\")\n\nThe [Cypress.Cookies.defaults()](https://docs.cypress.io/api/cypress-api/cookies) `whitelist` option has been renamed to `preserve` to more closely reflect its behavior.\n\nBefore `whitelist` option\n\n```\nCypress.Cookies.defaults({  whitelist: 'session_id',})\n```\n\nAfter `preserve` option\n\n```\nCypress.Cookies.defaults({  preserve: 'session_id',})\n```\n\n### `blacklistHosts` configuration renamed[​](#blacklistHosts-configuration-renamed \"Direct link to blacklistHosts-configuration-renamed\")\n\nThe `blacklistHosts` configuration has been renamed to [blockHosts](https://docs.cypress.io/guides/references/configuration#Notes) to more closely reflect its behavior.\n\nThis should be updated in all places where Cypress configuration can be set including via the Cypress configuration file, command line arguments, the `pluginsFile`, `Cypress.config()` or environment variables.\n\nBefore `blacklistHosts` configuration\n\n```\n{  \"blacklistHosts\": \"www.google-analytics.com\"}\n```\n\nAfter `blockHosts` configuration\n\n```\n{  \"blockHosts\": \"www.google-analytics.com\"}\n```\n\n### Return type of `Cypress.Blob` changed[​](#Return-type-of-CypressBlob-changed \"Direct link to Return-type-of-CypressBlob-changed\")\n\nWe updated the [Blob](https://github.com/nolanlawson/blob-util) library used behind [Cypress.Blob](https://docs.cypress.io/api/utilities/blob) from `1.3.3` to `2.0.2`.\n\nThe return type of the [Cypress.Blob](https://docs.cypress.io/api/utilities/blob) methods `arrayBufferToBlob`, `base64StringToBlob`, `binaryStringToBlob`, and `dataURLToBlob` have changed from `Promise<Blob>` to `Blob`.\n\nBefore `Cypress.Blob` methods returned a Promise\n\n```\nCypress.Blob.base64StringToBlob(this.logo, 'image/png').then((blob) => {  // work with the returned blob})\n```\n\nAfter `Cypress.Blob` methods return a Blob\n\n```\nconst blob = Cypress.Blob.base64StringToBlob(this.logo, 'image/png')// work with the returned blob\n```\n\n### `cy.server()` `whitelist` option renamed[​](#cyserver-whitelist-option-renamed \"Direct link to cyserver-whitelist-option-renamed\")\n\nThe `cy.server()` `whitelist` option has been renamed to `ignore` to more closely reflect its behavior.\n\nBefore `whitelist` option\n\n```\ncy.server({  whitelist: (xhr) => {    return xhr.method === 'GET' && /\\.(jsx?|html|css)(\\?.*)?$/.test(xhr.url)  },})\n```\n\nAfter `ignore` option\n\n```\ncy.server({  ignore: (xhr) => {    return xhr.method === 'GET' && /\\.(jsx?|html|css)(\\?.*)?$/.test(xhr.url)  },})\n```\n\n### Cookies `sameSite` property[​](#Cookies-sameSite-property \"Direct link to Cookies-sameSite-property\")\n\nValues yielded by [cy.setCookie()](https://docs.cypress.io/api/commands/setcookie), [cy.getCookie()](https://docs.cypress.io/api/commands/getcookie), and [cy.getCookies()](https://docs.cypress.io/api/commands/getcookies) will now contain the `sameSite` property if specified.\n\nIf you were using the `experimentalGetCookiesSameSite` configuration to get the `sameSite` property previously, this should be removed.\n\nBefore Cookies yielded before had no `sameSite` property.\n\n```\ncy.getCookie('token').then((cookie) => {  // cy.getCookie() yields a cookie object  // {  //   domain: \"localhost\",  //   expiry: 1593551644,  //   httpOnly: false,  //   name: \"token\",  //   path: \"/commands\",  //   secure: false,  //   value: \"123ABC\"  // }})\n```\n\nAfter Cookies yielded now have `sameSite` property if specified.\n\n```\ncy.getCookie('token').then((cookie) => {  // cy.getCookie() yields a cookie object  // {  //   domain: \"localhost\",  //   expiry: 1593551644,  //   httpOnly: false,  //   name: \"token\",  //   path: \"/commands\",  //   sameSite: \"strict\",  //   secure: false,  //   value: \"123ABC\"  // }})\n```\n\n### dirname / filename[​](#dirname--filename \"Direct link to dirname / filename\")\n\nThe globals `__dirname` and `__filename` no longer include a leading slash.\n\nBefore `__dirname` / `__filename`\n\n```\n// cypress/integration/app_spec.jsit('include leading slash < 5.0', () => {  expect(__dirname).to.equal('/cypress/integration')  expect(__filename).to.equal('/cypress/integration/app_spec.js')})\n```\n\nAfter `__dirname` / `__filename`\n\n```\n// cypress/integration/app_spec.jsit('do not include leading slash >= 5.0', () => {  expect(__dirname).to.equal('cypress/integration')  expect(__filename).to.equal('cypress/integration/app_spec.js')})\n```\n\n### Linux dependencies[​](#Linux-dependencies \"Direct link to Linux dependencies\")\n\nRunning Cypress on Linux now requires the `libgbm` dependency (on Debian-based systems, this is available as `libgbm-dev`). To install all required dependencies on Ubuntu/Debian, you can run the script below:\n\n```\napt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb\n```\n\n### TypeScript esModuleInterop[​](#TypeScript-esModuleInterop \"Direct link to TypeScript esModuleInterop\")\n\nCypress no longer forces the `esModuleInterop` compiler option for TypeScript to be `true` for spec, support, and plugins files. We recommend setting it in your project's `tsconfig.json` instead if you need to.\n\n```\n// tsconfig.json{  \"compilerOptions\": {    \"esModuleInterop\": true    /* ... other compiler options ... */  }}\n```\n\n### TypeScript 3.4+ support[​](#TypeScript-34-support \"Direct link to TypeScript 3.4+ support\")\n\nCypress 5.0 raises minimum required TypeScript version from 2.9+ to 3.4+. You'll need to have TypeScript 3.4+ installed within your project to have TypeScript support within Cypress.\n\n### Node.js 10+ support[​](#Nodejs-10-support \"Direct link to Node.js 10+ support\")\n\nCypress comes bundled with its own [Node.js version](https://github.com/cypress-io/cypress/blob/develop/.node-version). However, installing the `cypress` npm package uses the Node.js version installed on your system.\n\nNode.js 8 reached its end of life on Dec 31, 2019 and Node.js 11 reached its end of life on June 1, 2019. [See Node's release schedule](https://github.com/nodejs/Release). These Node.js versions will no longer be supported when installing Cypress. The minimum Node.js version supported to install Cypress is Node.js 10 or Node.js 12+.\n\n## Migrating to Cypress 4.0[​](#Migrating-to-Cypress-40 \"Direct link to Migrating to Cypress 4.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 4.0. [See the full changelog for 4.0](https://docs.cypress.io/guides/references/changelog#4-0-0).\n\n### Mocha upgrade[​](#Mocha-upgrade \"Direct link to Mocha upgrade\")\n\nMocha was upgraded from `2.5.3` to `7.0.1`, which includes a number of breaking changes and new features outlined in their [changelog](https://github.com/mochajs/mocha/blob/master/CHANGELOG.md). Some changes you might notice are described below.\n\n#### Breaking Change: invoke `done` callback and return a promise[​](#Breaking-Change-invoke-done-callback-and-return-a-promise \"Direct link to Breaking-Change-invoke-done-callback-and-return-a-promise\")\n\nStarting with [Mocha 3.0.0](https://github.com/mochajs/mocha/blob/master/CHANGELOG.md#300--2016-07-31), invoking a `done` callback _and_ returning a promise in a test results in an error.\n\nThis error originates from Mocha and is discussed at length [here](https://github.com/mochajs/mocha/pull/1320) and [here](https://github.com/mochajs/mocha/issues/2407).\n\nThe reason is that using two different ways to signal that a test is finished is usually a mistake and there is always a way to only use one. There is a [proposal to handle this situation without erroring](https://github.com/mochajs/mocha/issues/2509) that may be released in a future version of Mocha.\n\nIn the meantime, you can fix the error by choosing a single way to signal the end of your test's execution.\n\n##### Example #1[​](#Example-1 \"Direct link to Example #1\")\n\nBefore This test has a done callback and a promise\n\n```\nit('uses invokes done and returns promise', (done) => {  return codeUnderTest.doSomethingThatReturnsPromise().then((result) => {    // assertions here    done()  })})\n```\n\nAfter You can remove the `done` callback and return the promise instead:\n\n```\nit('uses invokes done and returns promise', () => {  return codeUnderTest.doSomethingThatReturnsPromise().then((result) => {    // assertions here  })})\n```\n\n##### Example #2[​](#Example-2 \"Direct link to Example #2\")\n\nBefore Sometimes it might make more sense to use the `done` callback and not return a promise:\n\n```\nit('uses invokes done and returns promise', (done) => {  eventEmitter.on('change', () => {    // assertions    done()  })  return eventEmitter.doSomethingThatEmitsChange()})\n```\n\nAfter In this case, you don't need to return the promise:\n\n```\nit('uses invokes done and returns promise', (done) => {  eventEmitter.on('change', () => {    // assertions    done()  })  eventEmitter.doSomethingThatEmitsChange()})\n```\n\n##### Example #3[​](#Example-3 \"Direct link to Example #3\")\n\nTest functions using `async/await` automatically return a promise, so they need to be refactored to not use a `done` callback.\n\nBefore This will cause an overspecified error.\n\n```\nit('uses async/await', async (done) => {  const eventEmitter = await getEventEmitter()  eventEmitter.on('change', () => done())  eventEmitter.doSomethingThatEmitsChange()})\n```\n\nAfter Update to the test code below.\n\n```\nit('uses async/await', async () => {  const eventEmitter = await getEventEmitter()  return new Promise((resolve) => {    eventEmitter.on('change', () => resolve())    eventEmitter.doSomethingThatEmitsChange()  })})\n```\n\n#### Tests require a title[​](#Tests-require-a-title \"Direct link to Tests-require-a-title\")\n\nTests now require a title and will error when not provided one.\n\n```\n// Would show as pending in Cypress 3// Will throw type error in Cypress 4:it() // Test argument \"title\" should be a string. Received type \"undefined\"\n```\n\n### Chai upgrade[​](#Chai-upgrade \"Direct link to Chai upgrade\")\n\nChai was upgraded from `3.5.0` to `4.2.0`, which includes a number of breaking changes and new features outlined in [Chai's migration guide](https://github.com/chaijs/chai/issues/781). Some changes you might notice are described below.\n\n#### Breaking Change: assertions expecting numbers[​](#Breaking-Change-assertions-expecting-numbers \"Direct link to Breaking-Change-assertions-expecting-numbers\")\n\nSome assertions will now throw an error if the assertion's target or arguments are not numbers, including `within`, `above`, `least`, `below`, `most`, `increase` and `decrease`.\n\n```\n// These will now throw errors:expect(null).to.be.within(0, 1)expect(null).to.be.above(10)// This will not throw errors:expect('string').to.have.a.length.of.at.least(3)\n```\n\n#### Breaking Change: `empty` assertions[​](#Breaking-Change-empty-assertions \"Direct link to Breaking-Change-empty-assertions\")\n\nThe `.empty` assertion will now throw when it is passed non-string primitives and functions.\n\n```\n// These will now throw TypeErrorsexpect(Symbol()).to.be.emptyexpect(() => {}).to.be.empty\n```\n\n#### Breaking Change: non-existent properties[​](#Breaking-Change-non-existent-properties \"Direct link to Breaking-Change-non-existent-properties\")\n\nAn error will throw when a non-existent property is read. If there are typos in property assertions, they will now appear as failures.\n\n```\n// Would pass in Cypress 3 but will fail correctly in 4expect(true).to.be.ture\n```\n\n#### Breaking Change: `include` checks strict equality[​](#Breaking-Change-include-checks-strict-equality \"Direct link to Breaking-Change-include-checks-strict-equality\")\n\n`include` now always use strict equality unless the `deep` property is set.\n\nBefore `include` would always use deep equality\n\n```\n// Would pass in Cypress 3 but will fail correctly in 4cy.wrap([  {    first: 'Jane',    last: 'Lane',  },]).should('include', {  first: 'Jane',  last: 'Lane',})\n```\n\nAfter Need to specificy `deep.include` for deep equality\n\n```\n// Specifically check for deep.include to pass in Cypress 4cy.wrap([  {    first: 'Jane',    last: 'Lane',  },]).should('deep.include', {  first: 'Jane',  last: 'Lane',})\n```\n\n### Sinon.JS upgrade[​](#SinonJS-upgrade \"Direct link to Sinon.JS upgrade\")\n\nSinon.JS was upgraded from `3.2.0` to `8.1.1`, which includes a number of breaking changes and new features outlined in [Sinon.JS's migration guide](https://sinonjs.org/releases/latest/#migration-guides). Some changes you might notice are described below.\n\n#### Breaking Change: stub non-existent properties[​](#Breaking-Change-stub-non-existent-properties \"Direct link to Breaking-Change-stub-non-existent-properties\")\n\nAn error will throw when trying to stub a non-existent property.\n\n```\n// Would pass in Cypress 3 but will fail in 4cy.stub(obj, 'nonExistingProperty')\n```\n\n#### Breaking Change: `reset()` replaced by `resetHistory()`[​](#Breaking-Change-reset-replaced-by-resetHistory \"Direct link to Breaking-Change-reset-replaced-by-resetHistory\")\n\nFor spies and stubs, the `reset()` method was replaced by `resetHistory()`.\n\nBefore Spies and stubs using `reset()`.\n\n```\nconst spy = cy.spy()const stub = cy.stub()spy.reset()stub.reset()\n```\n\nAfter Update spies and stubs should now use `resetHistory()`.\n\n```\nconst spy = cy.spy()const stub = cy.stub()spy.resetHistory()stub.resetHistory()\n```\n\n### Plugin Event `before:browser:launch`[​](#Plugin-Event-beforebrowserlaunch \"Direct link to Plugin-Event-beforebrowserlaunch\")\n\nSince we now support more advanced browser launch options, during `before:browser:launch` we no longer yield the second argument as an array of browser arguments and instead yield a `launchOptions` object with an `args` property.\n\nYou can see more examples of the new `launchOptions` in use in the [Browser Launch API doc](https://docs.cypress.io/api/plugins/browser-launch-api).\n\nBefore The second argument is no longer an array.\n\n```\non('before:browser:launch', (browser, args) => {  // will print a deprecation warning telling you  // to change your code to the new signature  args.push('--another-arg')  return args})\n```\n\nAfter Access the `args` property off `launchOptions`\n\n```\non('before:browser:launch', (browser, launchOptions) => {  launchOptions.args.push('--another-arg')  return launchOptions})\n```\n\n### Electron options in `before:browser:launch`[​](#Electron-options-in-beforebrowserlaunch \"Direct link to Electron-options-in-beforebrowserlaunch\")\n\nPreviously, you could pass options to the launched Electron [BrowserWindow](https://www.electronjs.org/docs/api/browser-window#new-browserwindowoptions) in `before:browser:launch` by modifying the `launchOptions` object.\n\nNow, you must pass those options as `launchOptions.preferences`:\n\nBefore Passing BrowserWindow options on the `launchOptions` object is no longer supported.\n\n```\non('before:browser:launch', (browser, args) => {  args.darkTheme = true  return args})\n```\n\nAfter Pass BrowserWindow options on the `options.preferences` object instead.\n\n```\non('before:browser:launch', (browser, launchOptions) => {  launchOptions.preferences.darkTheme = true  return launchOptions})\n```\n\n### Launching Chrome Canary with `--browser`[​](#Launching-Chrome-Canary-with---browser \"Direct link to Launching-Chrome-Canary-with---browser\")\n\nBefore 4.0, `cypress run --browser canary` would run tests in Chrome Canary.\n\nNow, you must pass `--browser chrome:canary` to select Chrome Canary.\n\nSee the [docs for `cypress run --browser`](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt) for more information.\n\nBefore Passing `canary` will no longer find a browser\n\n```\ncypress run --browser canary\n```\n\nAfter Pass `chrome:canary` to launch Chrome Canary\n\n```\ncypress run --browser chrome:canary\n```\n\n### Chromium-based browser `family`[​](#Chromium-based-browser-family \"Direct link to Chromium-based-browser-family\")\n\nWe updated the [Cypress browser objects](https://docs.cypress.io/api/plugins/browser-launch-api) of all Chromium-based browsers, including Electron, to have `chromium` set as their `family` field.\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, launchOptions) => {    if (browser.family === 'electron') {      // would match Electron in 3.x      // will match no browsers in 4.0.0      return launchOptions    }    if (browser.family === 'chromium') {      // would match no browsers in 3.x      // will match any Chromium-based browser in 4.0.0      // ie Chrome, Canary, Chromium, Electron, Edge (Chromium-based)      return launchOptions    }  })}\n```\n\n#### Example #1 (Finding Electron)[​](#Example-1-Finding-Electron \"Direct link to Example #1 (Finding Electron)\")\n\nBefore This will no longer find the Electron browser.\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, args) => {    if (browser.family === 'electron') {      // run code for Electron browser in 3.x      return args    }  })}\n```\n\nAfter Use `browser.name` to check for Electron\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, launchOptions) => {    if (browser.name === 'electron') {      // run code for Electron browser in 4.0.0      return launchOptions    }  })}\n```\n\n#### Example #2 (Finding Chromium-based browsers)[​](#Example-2-Finding-Chromium-based-browsers \"Direct link to Example #2 (Finding Chromium-based browsers)\")\n\nBefore This will no longer find any browsers.\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, args) => {    if (browser.family === 'chrome') {      // in 4.x, `family` was changed to 'chromium' for all Chromium-based browsers      return args    }  })}\n```\n\nAfter Use `browser.name` and `browser.family` to select non-Electron Chromium-based browsers\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, launchOptions) => {    if (browser.family === 'chromium' && browser.name !== 'electron') {      // pass launchOptions to Chromium-based browsers in 4.0      return launchOptions    }  })}\n```\n\n### `cy.writeFile()` yields `null`[​](#cywriteFile-yields-null \"Direct link to cywriteFile-yields-null\")\n\n`cy.writeFile()` now yields `null` instead of the `contents` written to the file. This change was made to more closely align with the behavior of Node.js [`fs.writeFile`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback).\n\nBefore This assertion will no longer pass\n\n```\ncy.writeFile('path/to/message.txt', 'Hello World').then((text) => {  // Would pass in Cypress 3 but will fail in 4  expect(text).to.equal('Hello World') // false})\n```\n\nAfter Instead read the contents of the file\n\n```\ncy.writeFile('path/to/message.txt', 'Hello World')cy.readFile('path/to/message.txt').then((text) => {  expect(text).to.equal('Hello World') // true})\n```\n\n### cy.contains() ignores invisible whitespaces[​](#cycontains-ignores-invisible-whitespaces \"Direct link to cy.contains() ignores invisible whitespaces\")\n\nBrowsers ignore leading, trailing, duplicate whitespaces. And Cypress now does that, too.\n\n```\ncy.get('p').contains('hello world') // Fail in 3.x. Pass in 4.0.0.cy.get('p').contains('hello\\nworld') // Pass in 3.x. Fail in 4.0.0.\n```\n\n### Node.js 8+ support[​](#Nodejs-8-support \"Direct link to Node.js 8+ support\")\n\nCypress comes bundled with its own [Node.js version](https://github.com/cypress-io/cypress/blob/develop/.node-version). However, installing the `cypress` npm package uses the Node.js version installed on your system.\n\nNode.js 4 reached its end of life on April 30, 2018 and Node.js 6 reached its end of life on April 30, 2019. [See Node's release schedule](https://github.com/nodejs/Release). These Node.js versions will no longer be supported when installing Cypress. The minimum Node.js version supported to install Cypress is Node.js 8.\n\n### CJSX is no longer supported[​](#CJSX-is-no-longer-supported \"Direct link to CJSX is no longer supported\")\n\nCypress no longer supports CJSX (CoffeeScript + JSX), because the library used to transpile it is no longer maintained.\n\nIf you need CJSX support, you can use a pre-2.x version of the Browserify preprocessor.\n\n```\n// cypress/plugins/index.jsconst browserify = require('@cypress/browserify-preprocessor')module.exports = (on) => {  on('file:preprocessor', browserify())}\n```",
  "title": "Migration Guide | Cypress Documentation",
  "description": "Migrating to Cypress 13.0",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/screenshots-and-videos",
  "markdown": "# Screenshots and Videos | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress captures screenshots of test failures automatically\n*   How to manually capture your own screenshot\n*   How Cypress can record a video of the entire run\n*   Some options of what to do with screenshot and video artifacts\n\ntip\n\n**Debugging Cypress Cloud Test Runs?**\n\nDon't rely on artifact representations or reproducing failing conditions locally. Replay the test as it executed during the recorded run with full debug capability using [![](https://docs.cypress.io/img/guides/cloud/test-replay/replay-icon.svg) Test Replay](https://docs.cypress.io/guides/cloud/test-replay).\n\nCypress comes with the ability to take screenshots, whether you are running via `cypress open` or `cypress run`, even in CI.\n\nTo take a manual screenshot you can use the [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) command.\n\nAdditionally, Cypress will automatically capture screenshots when a failure happens during `cypress run`. Screenshots on failure are _not_ automatically taken during `cypress open`.\n\nCapturing of screenshots when a test fails can be turned off entirely by setting [`screenshotOnRunFailure`](https://docs.cypress.io/guides/references/configuration#Screenshots) to `false` from within the [Cypress configuration](https://docs.cypress.io/guides/references/configuration) or by setting `screenshotOnRunFailure` to `false` in the [Cypress.Screenshot.defaults()](https://docs.cypress.io/api/cypress-api/screenshot-api).\n\nScreenshots are stored in the [`screenshotsFolder`](https://docs.cypress.io/guides/references/configuration#Screenshots) which is set to `cypress/screenshots` by default.\n\nCypress clears any existing screenshots before `cypress run`. If you do not want to clear your screenshots folder before a run, you can set [`trashAssetsBeforeRuns`](https://docs.cypress.io/guides/references/configuration#Screenshots) to `false`.\n\n## Videos[​](#Videos \"Direct link to Videos\")\n\nVideo recording is disabled by default, but can be turned on by setting [`video`](https://docs.cypress.io/guides/references/configuration#Videos) to `true` from within your configuration.\n\nIf enabled, Cypress records a video for each spec file when running tests during `cypress run`. Videos are _not_ recorded during `cypress open`.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  video: true,})\n```\n\nVideos are stored in the [`videosFolder`](https://docs.cypress.io/guides/references/configuration#Videos) which is set to `cypress/videos` by default.\n\nWhen using the `--record` flag while running your tests, videos are processed, compressed, and uploaded to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) after every spec file runs, successful or not. To change this behavior to only process videos in the case that tests fail, see how to [delete videos for specs without failing or retried tests](https://docs.cypress.io/guides/guides/screenshots-and-videos#Delete-videos-for-specs-without-failing-or-retried-tests). Deleting the video will cause the video to not be uploaded to Cypress Cloud.\n\nCypress clears any existing videos before a `cypress run`. If you do not want to clear your videos folder before a run, you can set [`trashAssetsBeforeRuns`](https://docs.cypress.io/guides/references/configuration#Videos) to `false`.\n\n### Video encoding[​](#Video-encoding \"Direct link to Video encoding\")\n\nAfter a video is recorded, Cypress encodes the video to a commonly digestable format. Part of this encoding process includes video compression.\n\nCompression is disabled by default, meaning this step will be skipped completely, so the file size of the video will be larger, but the encoding process is faster. Setting [`videoCompression`](https://docs.cypress.io/guides/references/configuration#Videos) to `true` will coerce the video compression value to 32 Constant Rate Factor (CRF), which takes longer to process, but results in a smaller video.\n\n**Enabling compression**\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  videoCompression: true,})\n```\n\nIf your spec files have a long run duration and [`videoCompression`](https://docs.cypress.io/guides/references/configuration#Videos) is enabled, you might notice a time gap between a finished spec and a new spec starting during `cypress run`. During this time, Cypress is encoding the captured video and possibly uploading it to Cypress Cloud.\n\n**Change compression value from 32**\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  videoCompression: 15,})\n```\n\nIn addition to enabling or disabling video compress, you can specify the CRF value used to compress the video. Here are some common scenarios:\n\n*   If the machine is encoding the video slowly (which is often the case for virtual machines that use less CPU cores), try increasing the CRF value.\n    \n*   If your videos are extremely low quality, try decreasing the CRF value.\n    \n\nA lower `videoCompression` value will spend less time compressing and result in a bigger video file size and higher quality video.\n\ninfo\n\nIf you are an FFmpeg pro and want to see all the settings and debug messages during the encoding, run Cypress with the following environment variable: `DEBUG=cypress:server:video cypress run`\n\n### Control which videos to keep and upload to Cypress Cloud[​](#Control-which-videos-to-keep-and-upload-to-Cypress-Cloud \"Direct link to Control which videos to keep and upload to Cypress Cloud\")\n\nYou may want to have more control over which videos you want to keep and upload to Cypress Cloud. Deleting videos after the run can save resource space on the machine as well as skip the time used to process, compress, and upload the video to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction).\n\nTo only process videos in the case that a test fails, you can [delete videos for specs without failing or retried tests](https://docs.cypress.io/guides/guides/screenshots-and-videos#Delete-videos-for-specs-without-failing-or-retried-tests), which will not upload the video of passed runs to Cypress Cloud.\n\nFor more fine grained control, you can use Cypress's [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) event listener that fires after each spec file is run and delete the video when certain conditions are met.\n\n### Delete videos for specs without failing or retried tests[​](#Delete-videos-for-specs-without-failing-or-retried-tests \"Direct link to Delete videos for specs without failing or retried tests\")\n\nThe example below shows how to delete the recorded video for specs that had no retry attempts or failures when using Cypress [test retries](https://docs.cypress.io/guides/guides/test-retries).\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const fs = require('fs')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      on('after:spec', (spec, results) => {        if (results && results.video) {          // Do we have failures for any retry attempts?          const failures = results.tests.some((test) =>            test.attempts.some((attempt) => attempt.state === 'failed')          )          if (!failures) {            // delete the video if the spec passed and no tests retried            fs.unlinkSync(results.video)          }        }      })    },  },})\n```\n\n## Now What?[​](#Now-What \"Direct link to Now What?\")\n\nSo you are capturing screenshots and recording videos of your test runs, now what?\n\nSomething you can take advantage of today is [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction): our companion enterprise service that stores your artifacts for you and lets you view them from any web browser, as well as share them with your team.\n\n### Visual Regression Test / Screenshot Diffing[​](#Visual-Regression-Test--Screenshot-Diffing \"Direct link to Visual Regression Test / Screenshot Diffing\")\n\nAnother possibility is visual regression testing: comparing screenshots of past runs with the current run to ensure that nothing changed. [Read about how to implement visual testing.](https://docs.cypress.io/guides/tooling/visual-testing)\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [After Screenshot API](https://docs.cypress.io/api/plugins/after-screenshot-api)\n*   [Cypress.Screenshot](https://docs.cypress.io/api/cypress-api/screenshot-api)\n*   [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot)\n*   [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction)\n*   [Test Replay](https://docs.cypress.io/guides/cloud/test-replay)\n*   [Visual Testing](https://docs.cypress.io/guides/tooling/visual-testing)",
  "title": "Screenshots and Videos | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/proxy-configuration",
  "markdown": "# Proxy Configuration | Cypress Documentation\n\nCypress needs Internet access to work. Many companies require the use of a corporate proxy to access the Internet. If your company does this, many functions of Cypress will not work until you've configured Cypress to use your proxy:\n\n*   Cypress won't be able to load web pages besides `localhost`.\n*   Cypress won't be able to warn you if your [baseUrl](https://docs.cypress.io/guides/references/configuration#Global) isn't available.\n*   Cypress won't be able to connect to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) to log in or record test runs.\n*   `npm install cypress` may fail while downloading the Cypress binary.\n\nIf you are experiencing any or all of these issues, you may need to configure Cypress with your proxy. Instructions are available for [macOS](#Set-a-proxy-on-Linux-or-macOS), [Linux](#Set-a-proxy-on-Linux-or-macOS), and [Windows](#Set-a-proxy-on-Windows).\n\ncaution\n\nProxy Auto-Configuration (PAC) files are not currently supported. If your organization uses a PAC file, contact a network administrator to ask what HTTP proxy you should be using to access the general Internet, then use that proxy with Cypress.\n\n## Set a proxy on Linux or macOS[​](#Set-a-proxy-on-Linux-or-macOS \"Direct link to Set a proxy on Linux or macOS\")\n\nTo set your proxy on Linux or macOS, run the following command in a terminal before running Cypress:\n\n```\nexport HTTP_PROXY=http://my-company-proxy.com\n```\n\nYou can also set `NO_PROXY` to bypass the proxy for certain domains (by default, only `localhost` will be bypassed):\n\n```\nexport NO_PROXY=localhost,google.com,apple.com\n```\n\nTo make these changes permanent, you can add these commands to your shell's `~/.profile` (`~/.zsh_profile`, `~/.bash_profile`, etc.) to run them on every login.\n\n## Set a proxy on Windows[​](#Set-a-proxy-on-Windows \"Direct link to Set a proxy on Windows\")\n\nWhen starting up after being installed, Cypress will attempt to load the proxy configured in the Windows registry by default. [Learn how to set your proxy settings system-wide in Windows.](https://www.howtogeek.com/tips/how-to-set-your-proxy-settings-in-windows-8.1/)\n\ninfo\n\nWhen downloading Cypress for the first time, the `cypress` command line tool _does not_ read proxy settings from the Windows registry. If you need to configure a proxy for the installation to work, you must set the appropriate environment variables as described below.\n\nYou can also set proxy environment variables before running Cypress to override the Windows registry. This is also the only way to define a proxy for `cypress install`. In Command Prompt, defining the required environment variables looks like this:\n\n```\nset HTTP_PROXY=http://my-company-proxy.com\n```\n\nTo accomplish the same thing in PowerShell:\n\n```\n$env:HTTP_PROXY = \"http://my-company-proxy.com\"\n```\n\nTo save the `HTTP_PROXY` variable and use your proxy for all new shells, use `setx`:\n\n```\nsetx HTTP_PROXY http://my-company-proxy.com\n```\n\n## Proxy environment variables[​](#Proxy-environment-variables \"Direct link to Proxy environment variables\")\n\nCypress automatically reads from your system's `HTTP_PROXY` environment variable and uses that proxy for all HTTP and HTTPS traffic. If an `HTTPS_PROXY` environment variable is set, HTTPS traffic will use that proxy instead.\n\nTo bypass the proxy for certain domains, a `NO_PROXY` environment variable can be set to a comma-separated list of domain names to not proxy traffic for. By default, traffic to `localhost` will not be proxied. To make Cypress send traffic for `localhost` through the proxy, pass `<-loopback>` in `NO_PROXY`.\n\nIf an uppercase and a lowercase version of the proxy settings are supplied (for example, `HTTP_PROXY` and `http_proxy` are both set), the lowercase variable will be preferred.\n\nCypress needs to be able to authenticate properly when communicating to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction). When connecting through a proxy, oftentimes a self signed certificate is used as a CA. In order to handle this configuration, Cypress automatically reads from npm config's [`cafile`](https://docs.npmjs.com/cli/v8/using-npm/config#cafile) and [`ca`](https://docs.npmjs.com/cli/v8/using-npm/config#ca) options and the [`NODE_EXTRA_CA_CERTS`](https://nodejs.org/api/cli.html#node_extra_ca_certsfile) node environment variable.\n\nTo mimic the behavior of npm and node, Cypress looks at `cafile` first and then `ca` and uses the corresponding certificate(s) as a replacement for the CA. For example, to use the CA at `/home/person/certs/ca.crt`, add the following to your `.npmrc`:\n\n```\ncafile=/home/person/certs/ca.crt\n```\n\nIf neither `cafile` nor `ca` are set, Cypress looks at the system environment variable `NODE_EXTRA_CA_CERTS` and uses the corresponding certificate(s) as an extension for the trusted CA.\n\nNote that the npm config is used as a replacement, and the node environment variable is used as an extension.\n\n## View, unset, and set environment variables[​](#View-unset-and-set-environment-variables \"Direct link to View, unset, and set environment variables\")\n\nIn order to properly configure your proxy configuration, it can be helpful to know how to view currently set environment variables, unset unwanted environment variables, and set environment variables depending on your operating system.\n\n### Linux or macOS[​](#Linux-or-macOS \"Direct link to Linux or macOS\")\n\n#### Set an environment variable for the current session[​](#Set-an-environment-variable-for-the-current-session \"Direct link to Set an environment variable for the current session\")\n\n```\nexport SOME_VARIABLE=some-value\n```\n\n#### Unset an environment variable[​](#Unset-an-environment-variable \"Direct link to Unset an environment variable\")\n\n`echo` will print nothing after `unset`:\n\n#### See all the currently set environment variables[​](#See-all-the-currently-set-environment-variables \"Direct link to See all the currently set environment variables\")\n\nPrint all env vars:\n\nPrint environment variables with `proxy` (case insensitive) in the name:\n\n### Windows[​](#Windows \"Direct link to Windows\")\n\nSetting environment variables in Windows is different depending on if you're using _command prompt_ or _PowerShell_.\n\n#### Set an environment variable for current session[​](#Set-an-environment-variable-for-current-session \"Direct link to Set an environment variable for current session\")\n\n_Command prompt:_\n\n```\nset SOME_VARIABLE=some-value\n```\n\n_PowerShell:_\n\n```\n$env:SOME_VARIABLE = \"some-value\"\n```\n\n#### Set environment variable globally for all future sessions[​](#Set-environment-variable-globally-for-all-future-sessions \"Direct link to Set environment variable globally for all future sessions\")\n\n```\nsetx SOME_VARIABLE some-value\n```\n\n#### Unset an environment variable in the current session[​](#Unset-an-environment-variable-in-the-current-session \"Direct link to Unset an environment variable in the current session\")\n\n_Command prompt:_\n\n_PowerShell:_\n\n```\nRemove-Item Env:\\SOME_VARIABLE\n```\n\n#### See all currently set environment variables[​](#See-all-currently-set-environment-variables \"Direct link to See all currently set environment variables\")\n\n_Command prompt:_\n\n_PowerShell:_\n\n## View proxy settings in Cypress[​](#View-proxy-settings-in-Cypress \"Direct link to View proxy settings in Cypress\")\n\nYour current proxy settings can be viewed from within Cypress. Follow these steps:\n\n1.  Open up your project in Cypress via `cypress open`.\n2.  Click the \"Settings\" tab.\n3.  Click the \"Proxy Settings\" section to expand it and view the proxy settings that Cypress is currently using.\n\n![Proxy configuration in the Desktop app](https://docs.cypress.io/img/guides/configuration/test-runner-settings-proxy-configuration.jpg)",
  "title": "Proxy Configuration | Cypress Documentation",
  "description": "Cypress needs Internet access to work. Many companies require the use of a",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/styling-components",
  "markdown": "# Styling Components | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to load CSS libraries like Tailwind or Bootstrap\n*   How to render icon fonts like Font Awesome\n*   Where to import your application's global stylesheets\n*   How to use `indexHtmlFile` to define a custom DOM mounting point\n\n## Rendering Components Correctly\n\nThe first time you mount _any_ new component, you may notice that the component doesn't look like it should. Unless your application is written _exclusively_ using Component-scoped CSS (e.g. Styled Components or Vue's Scoped Styles) you will need to follow this guide in order to get your component looking **and behaving** like it will in production.\n\ntip\n\nEnsure that whatever you're doing in production is happening within either the Component HTML file or the Component Support File.\n\n## Component Support File[​](#Component-Support-File \"Direct link to Component Support File\")\n\nWhen you load a component or end-to-end spec file, it will first load something called a supportFile. By default, this is created for you during first-time setup of Cypress Component Testing and is located at `cypress/support/component.js`. This file gives you the opportunity to set up your spec's environment.\n\nFor component specs, you use this file to set up page-level concerns that would usually exist by the time you mount the component. Some examples include:\n\n1.  Run-time JavaScript code (state management, routers, UI libraries)\n2.  Global styles (style resets, Tailwind)\n\nAs a rule, your Component Support File should look **very similar** to your application's main JavaScript (ie: main.js, index.js) and main CSS (ie: main.css, index.css) files.\n\n## 3rd Party CSS Libraries (Tailwind, Bootstrap, PopperJS)[​](#3rd-Party-CSS-Libraries-Tailwind-Bootstrap-PopperJS \"Direct link to 3rd Party CSS Libraries (Tailwind, Bootstrap, PopperJS)\")\n\nComponents can have three parts: markup, styles, and script logic. All three of these work together in order to deliver a working component.\n\nStyles are business logic, too.\n\n1.  Tailwind\n2.  CSS Modules\n3.  Scoped Styled\n4.  Styled Components\n5.  Regular Stylesheets\n6.  UI Libraries\n\nThis guide will help you setup your test infrastructure to render your component's styles properly.\n\nDepending on how your application is built, the first time you mount a new component, it may be completely or somewhat unstyled.\n\nThis makes sense. Many applications have some amount of one-time setup that is run outside of the component file.\n\nWe build our applications within the context that they're supposed to run in, and we make assumptions that our components will always be rendered within a root-level component (such as an `<App>`) or a top-level selector with style rules (such as `#app { /* styles in here */ }` )\n\nWhen we attempt to isolate our component to put it under test, we need to put that environment back together. We'll go into that in a moment. First, let's talk about stylesheets, testing, and one of Cypress's biggest differences in contrast to other component testing tools.\n\n## Why Test Your Component's Styles?[​](#Why-Test-Your-Components-Styles \"Direct link to Why Test Your Component's Styles?\")\n\nStylesheets are a critical part of your component's business logic. One of the best examples of this is a modal component. Common modal bugs include: z-index issues, inability to dismiss the overlay, and inability to interact with the parent page _after_ dismissing the modal.\n\nNode-based test runners like Jest or Vitest can't catch these kinds of issues because they render your styles in **emulated DOM environments** like JSDom. JSDom doesn't have a box model and certain kinds of assertions, such as if a parent is covering a child and preventing clicks, are not possible to test without a more realistic environment.\n\nOn the other hand, browser-based runners like Cypress allow you to render your application's styles and components and allow Cypress's Driver to take advantage of the real box-model and style rendering engine. Cypress's commands like `cy.click` and assertions like `should('be.visible')` have business logic that makes sure the UI you're trying to assert on and interact with is visible and interactible for your end users. This is a benefit unique to browser-based test runners.\n\n## Importing Stylesheets[​](#Importing-Stylesheets \"Direct link to Importing Stylesheets\")\n\nEach application or component library imports styles a little differently. We'll go over a few methods and describe how you can quickly restructure your components to become more testable.\n\nIf you do not follow this guide, your components will mount, but they won't look correct and you may not be able to benefit from some of the most valuable parts of Cypress. Namely, implicit checks for width, height, and overflow to ensure that your components not only exist in the page's HTML but are also visible.\n\n## Rules for Setting Up Your Styles[​](#Rules-for-Setting-Up-Your-Styles \"Direct link to Rules for Setting Up Your Styles\")\n\nAll of your application's styles need to end up in Cypress so that when your component mounts, it looks right.\n\nWe expose two hooks for you to configure your styles:\n\n1.  An HTML file called `cypress/support/component-index.html`\n2.  A JavaScript support file called `cypress/support/component.js`\n\nWhen creating a production-like test environment, you should _always_ mimic your own application's setup. If your application has multiple `<link>` tags to load fonts or other stylesheets within the `head`, ensure that the `cypress/support/component-index.html` file contains the same `<link>` tags. The same logic follows for any styles loaded in your Application's `main.js` file. If you import a `./styles.css` at the top of your `main.js` file, make sure to import it in your `cypress/support/component.js` file.\n\nFor this reason, it's strongly suggested to make a `src/setup.js` file that will be re-used in your `main.js` entrypoint as well as in your test setup. An example project structure would look like so:\n\n```\n> /cypress>   /support>    /component.js> /src>  /main.js>  /main.css>  /setup.js\n```\n\nThe contents of **setup.js** may look like so:\n\n```\nimport '~normalize/normalize.css'import 'font-awesome'import './main.css'export const createStore = () => {  return /* store */}export const createRouter = () => {  return /* router */}export const createApp = () => {  return <App router={createRouter()} store={createStore()}></App>}\n```\n\nand its usage in `main.js` could look like so:\n\n```\nimport { createApp } from './setup.js'ReactDOM.render(createApp())\n```\n\nand Cypress would re-use it in its support file\n\n```\n/* And that's it! */import '../../src/setup.js'\n```\n\nThe rest of this section is dedicated to discussing specific style problems you may have, including: Fonts, Icon Fonts, Style Resets, Global App Styles, and 3rd party component library styles.\n\n### Global App Styles[​](#Global-App-Styles \"Direct link to Global App Styles\")\n\nYour global application styles are usually in one of the following places:\n\n1.  A `styles.css` file you import within the `head` of your application.\n\nThis should be loaded within your Cypress Index HTML file.\n\n2.  Within a root-level component like `App.jsx`, `App.vue`, `App.svelte`, etc.\n\nDecouple your Root CSS from your App or Entrypoint component by pulling out these global styles into a top-level stylesheet. Both Vue and Svelte embed global application styles into the main entry point components. The rest of your application expects to be rendered _within_ those components, and so any assumptions you made when writing those components must be replicated in your test environment or else your components won't look right.\n\n```\n<style>  /* In certain scaffolds, the App.vue file does not have a separate styles file */  #app {    font-family: Sans-serif;  }</style>\n```\n\nShould become\n\n```\n/* App.vue */ <style src=\"./app.css\" />\n```\n\nand\n\n```\n/* cypress/support/component.js */ import '../../src/app.css'\n```\n\n3.  Within the `main.js` file of your application (which subsequently mounts your root-level component).\n\nRe-using stylesheets that are imported in the beginning of your application was covered in the last section.\n\n4.  Within a configuration file like `next.config.js` or `nuxt.config.js`.\n\nYou're usually providing public paths to these stylesheets. You can import the same paths within your `cypress/support/component-index.html` file.\n\n### CSS Reset or Normalize isn't applied[​](#CSS-Reset-or-Normalize-isnt-applied \"Direct link to CSS Reset or Normalize isn't applied\")\n\nAre you importing your normalize file within `cypress/support/component-index.html` or within `cypress/support/component.js`?\n\n### Fonts: Everything is rendering in Times New Roman[​](#Fonts-Everything-is-rendering-in-Times-New-Roman \"Direct link to Fonts: Everything is rendering in Times New Roman\")\n\nMost applications handle fonts in one of two ways.\n\n1.  Your `index.html` loads external fonts in the `head` tag.\n\n```\n<head>  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />  <link    href=\"https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;300;400;500;600;700&family=Roboto&display=swap\"    rel=\"stylesheet\"  /></head>\n```\n\nOr via an `@import` statement\n\n```\n<head>  <style>    @import url('https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;300;400;500;600;700&family=Roboto&display=swap');  </style></head>\n```\n\n2.  Your main stylesheet loads fonts\n\n```\n/* main.css */@font-face {  font-family: 'Fira Sans';  src: url('fonts/fira/eot/FiraSans-Regular.eot');  src:    url('fonts/fira/eot/FiraSans-Regular.eot') format('embedded-opentype'),    url('fonts/fira/woff2/FiraSans-Regular.woff2') format('woff2'),    url('fonts/fira/woff/FiraSans-Regular.woff') format('woff'),    url('fonts/fira/woff2/FiraSans-Regular.ttf') format('truetype');  font-weight: normal;  font-style: normal;}\n```\n\n### Icon Fonts: None of my icons are rendering[​](#Icon-Fonts-None-of-my-icons-are-rendering \"Direct link to Icon Fonts: None of my icons are rendering\")\n\n### Theme Providers: My components don't look right/compile because they can't access providers[​](#Theme-Providers-My-components-dont-look-rightcompile-because-they-cant-access-providers \"Direct link to Theme Providers: My components don't look right/compile because they can't access providers\")\n\nTheme Provider or other application-level wrappers like I18n or Material UI work by injecting themselves around your application. When you're component testing, you haven't rendered the component hierarchy surrounding your component.\n\nTo solve issues like these, people review the Custom Commands and Wrappers\n\nTo first explain why it's not right, you first have to explain what production-like even means.\n\nSo we have this before & after up, and now our job is to step through the component under test and try to figure out where the differences between Production and Test are.\n\nSometimes these are as simple as colors or fonts not lining up. Other times, the entire component or sections of it may not compile.\n\nThe reason this doesn't look right is because:\n\n1.  My browser supports dark mode\n2.  The `<App>` component provides its own styles",
  "title": "Styling Components | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/trade-offs",
  "markdown": "# Trade-offs | Cypress Documentation\n\nCypress automates the browser with its own unique architecture. While this unlocks the power to do things you will not find anywhere else, there are specific trade-offs that are made. There is no free lunch!\n\nIn this guide we will lay out what some of the trade-offs are - and specifically how you can work around them.\n\nWhile at first it may seem like these are strict limitations in Cypress - we think you will soon realize that many of these boundaries are actually **good** to have. In a sense they prevent you from writing bad, slow, or flaky tests.\n\n#### Permanent trade-offs:[​](#Permanent-trade-offs \"Direct link to Permanent trade-offs:\")\n\n*   Cypress is not a general purpose [automation tool](#Automation-restrictions).\n*   Cypress commands run [inside of a browser](#Inside-the-browser).\n*   You cannot use Cypress to drive [two browsers at the same time](#Multiple-browsers-open-at-the-same-time).\n*   Each test is bound to a single superdomain. Cross-origin navigation inside tests can be enabled by using the [`cy.origin`](https://docs.cypress.io/api/commands/origin) command. Please read our [Cross Origin Testing Guide](https://docs.cypress.io/guides/guides/cross-origin-testing).\n\n#### Temporary trade-offs:[​](#Temporary-trade-offs \"Direct link to Temporary trade-offs:\")\n\nWe have [open issues](https://github.com/cypress-io/cypress/issues) where you can find a full list of things Cypress will eventually address, we wanted to highlight some of the more important _temporary_ restrictions that Cypress will eventually address. [PRs are welcome ;-)](https://on.cypress.io/contributing)\n\nMany of these issues are currently being worked on or are on our [Roadmap](https://docs.cypress.io/guides/references/roadmap).\n\n*   [Workarounds for the lack of a `cy.hover()` command.](https://docs.cypress.io/api/commands/hover)\n*   [`cy.tab()` command.](https://github.com/cypress-io/cypress/issues/299)\n*   [There is not any native or mobile events support.](https://github.com/cypress-io/cypress/issues/311#issuecomment-339824191)\n*   [iframe support is somewhat limited, but does work.](https://github.com/cypress-io/cypress/issues/136)\n\n## Permanent trade-offs[​](#Permanent-trade-offs-1 \"Direct link to Permanent trade-offs\")\n\n### Automation restrictions[​](#Automation-restrictions \"Direct link to Automation restrictions\")\n\nCypress is a specialized tool that does one thing really well: end-to-end testing web applications while they are under development. You should not use Cypress for things it is not designed for such as:\n\n*   Indexing the web\n*   Spidering links\n*   Performance testing\n*   Scripting 3rd party sites\n\nThere are other excellent tools that are optimized for doing each item listed above.\n\nThe **sweet spot** of Cypress is to be used as a tool to test your own application **as you build it**. It is built for developers and QA engineers, not manual testers or exploratory testing.\n\n### Inside the browser[​](#Inside-the-browser \"Direct link to Inside the browser\")\n\nIn case you missed it before - Cypress tests run inside of the browser! This means we can do things nobody else can. There is no object serialization or JSON wire protocols. You have real, native access to everything in your application under test. It is impossible for Cypress to 'miss' elements and it always knows the moment your application fires any kind of event.\n\nBut what this also means is that your test code **is being evaluated inside the browser**. Test code is not evaluated in Node, or any other server side language. The **only** language we will ever support is the language of the web: JavaScript.\n\nThis trade-off means it makes it a little bit harder to communicate with the back end - like your server or database. You will not be able to connect or import those server-side libraries or modules directly. Although you can require `node_modules` which can be used in the browser. Additionally, you have the ability to use Node to import or talk directly to your back end scripts using [our Plugins API](https://docs.cypress.io/api/plugins/writing-a-plugin) or [cy.task()](https://docs.cypress.io/api/commands/task).\n\nTo talk to your database or server you need to use the [`cy.exec()`](https://docs.cypress.io/api/commands/exec), [`cy.task()`](https://docs.cypress.io/api/commands/task), or [`cy.request()`](https://docs.cypress.io/api/commands/request) commands. That means you will need to expose a way to seed and setup your database. This really is not that hard, but it might take a bit more elbow grease than other testing tools written in your back end language.\n\nThe trade-off here is that doing everything in the browser (basically all of your tests) is a much better experience in Cypress. But doing things outside of the browser may take a little extra work.\n\nIn the future we **do** have plans to release back end adapters for other languages.\n\n### Multiple browsers open at the same time[​](#Multiple-browsers-open-at-the-same-time \"Direct link to Multiple browsers open at the same time\")\n\nCypress does not support controlling more than 1 open browser at a time.\n\nWith that said, except in the most unusual and rare circumstances, you can still test most application behavior without opening multiple browsers at the same time.\n\nYou may ask about this functionality like this:\n\n> I'm trying to test a chat application. Can I run more than one browser at a time with Cypress?\n\nWhether you are testing a chat application or anything else - what you are really asking about is testing collaboration. But, **you don't need to recreate the entire environment in order to test collaboration with 100% coverage**.\n\nDoing it this way can be faster, more accurate, and more scalable.\n\nWhile outside the scope of this article, you could test a chat application using the following principles. Each one will incrementally introduce more collaboration:\n\n#### 1\\. Use only the browser:[​](#1-Use-only-the-browser \"Direct link to 1. Use only the browser:\")\n\nAvoid the server, invoke your JavaScript callbacks manually thereby simulating what happens when \"notifications come in\", or \"users leave the chat\" purely in the browser.\n\nYou can [stub](https://docs.cypress.io/api/commands/stub) everything and simulate every single scenario. Chat messages, offline messages, connections, reconnections, disconnections, group chat, etc. Everything that happens inside of the browser can be fully tested. Requests leaving the browser could also be stubbed and you could assert that the request bodies were correct.\n\n#### 2\\. Stub the other connection:[​](#2-Stub-the-other-connection \"Direct link to 2. Stub the other connection:\")\n\n```\nserver → browser            ↓server ← browser  ↓(other connections stubbed)  ↓server → browser\n```\n\nUse your server to receive messages from the browser, and simulate \"the other participant\" by sending messages as that participant. This is certainly application specific, but generally you could insert records into the database or do whatever it takes for your server to act as if a message of one client needs to be sent back to the browser.\n\nTypically this pattern enables you to avoid making a secondary WebSocket connection and yet still fulfills the bidirectional browser and server contract. This means you could also test edge cases (disconnections, etc) without actually handling real connections.\n\n#### 3: Introduce another connection:[​](#3-Introduce-another-connection \"Direct link to 3: Introduce another connection:\")\n\n```\nserver → browser            ↓server ← browser  ↓server → other connection            ↓server ← other connection  ↓server → browser\n```\n\nTo do this - you would need a background process outside of the browser to make the underlying WebSocket connection that you can then communicate with and control.\n\nYou can do this in many ways and here is an example of using an HTTP server to act as the client and exposing a REST interface that enables us to control it.\n\n```\n// Cypress tests// tell the http server at 8081 to connect to 8080cy.request('http://localhost:8081/connect?url=http://localhost:8080')// tell the http server at 8081 to send a messagecy.request('http://localhost:8081/message?m=hello')// tell the http server at 8081 to disconnectcy.request('http://localhost:8081/disconnect')\n```\n\nAnd the HTTP server code would look something like this...\n\n```\nconst client = require('socket.io:client')const express = require('express')const app = express()let socketapp.get('/connect', (req, res) => {  const url = req.query.url  socket = client(url)  socket.on('connect', () => {    res.sendStatus(200)  })})app.get('/message', (req, res) => {  const msg = req.query.m  socket.send(msg, () => {    res.sendStatus(200)  })})app.get('/disconnect', (req, res) => {  socket.on('disconnect', () => {    res.sendStatus(200)  })  socket.disconnect()})app.listen(8081, () => {})\n```\n\nThis avoids ever needing a second open browser, but still gives you an end-to-end test that provides 100% confidence that the two clients can communicate with each other.",
  "title": "Trade-offs | Cypress Documentation",
  "description": "Cypress automates the browser with its own unique architecture. While this",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/component-framework-configuration",
  "markdown": "# Component Testing Config | Cypress Documentation\n\nWhen you launch Cypress for the first time in a project, the app will automatically guide you through setup and configuration. You don't need to do anything additional to get started.\n\nRefer to the \"Framework Configuration\" guide in each UI framework's overview guide for a list of supported development servers and how they are configured.\n\nBelow are more advanced configuration options you can customize to fit your project.\n\n## Custom Index File[​](#Custom-Index-File \"Direct link to Custom Index File\")\n\nBy default, Cypress renders your components into an HTML file located at `cypress/support/component-index.html`.\n\nThe index file allows you to add in global assets, such as styles, fonts, and external scripts.\n\nYou can provide an alternative path to the file using the `indexHtmlFile` option in the [component config](https://docs.cypress.io/guides/references/configuration#component) options:\n\n```\n{  component: {    devServer,    indexHtmlFile: '/custom/path/to/component-index.html'  }}\n```\n\n## Custom Dev Server[​](#Custom-Dev-Server \"Direct link to Custom Dev Server\")\n\nA custom function can be passed into the `devServer` option, which allows the use of build systems not provided by Cypress out of the box. These can be from the Cypress community, preview builds not included with the app, or a custom one you create.\n\nThe function's signature takes in an object with the following properties as its only parameter and needs to resolve an object containing the port of your dev server and a callback to shut it down.\n\n```\ninterface DevServerOptions {  specs: Cypress.Spec[]  cypressConfig: Cypress.PluginConfigOptions  devServerEvents: NodeJS.EventEmitter}\n```\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    async devServer({ specs, cypressConfig, devServerEvents }) {      const { port, close } = await startDevServer(        specs,        cypressConfig,        devServerEvents      )      return {        port,        close,      }    },  },})\n```\n\nAny requests triggered during a test using the `devServerPublicPathRoute` as defined in the `cypressConfig` will be forwarded to your server. Cypress will trigger a request for `[devServerPublicPathRoute]/index.html` when a test is started. Your server needs to reply with the html-file referenced in `cypressConfig.indexHtmlFile` and inject a script to load the support files and the actual test.\n\n```\nfunction createServer(cypressConfig, bundleDir, port = 1234) {  const app = express()  // read kickstart script - see below for an example  const clientScript = readFileSync(    path.join(__dirname, './client-script.js'),    'utf8'  )  app.get(    cypressConfig.devServerPublicPathRoute + '/index.html',    async (_req, res) => {      // read custom index.html file      const html = await fs.readFile(        path.join(cypressConfig.repoRoot, cypressConfig.indexHtmlFile),        { encoding: 'utf8' }      )      // inject kickstart-script      const output = html.replace(        '</head>',        `<script type=\"module\">${clientScript}</script></head>`      )      res.send(output)    }  )  // you need to establish some url-to-path-mapping, if your bundler outputs  // the full directory structure you can map this one to one  app.use(cypressConfig.devServerPublicPathRoute, express.static(bundleDir))  app.listen(port)}\n```\n\nFor a real-world example, you can refer to [this loader](https://github.com/cypress-io/cypress/blob/466155c2125476374d9f9549530f67d0c6354a41/npm/vite-dev-server/src/plugins/cypress.ts#L82-L92) used by the Vite Dev Server.\n\nThe client script must retrieve information on the currently active test from the Cypress instance of the parent frame and load the corresponding bundle. If a support file is defined, it should be injected at the top of your test bundle or loaded before the test script.\n\n```\nconst CypressInstance = (window.Cypress = parent.Cypress)const devServerPublicPathRoute = CypressInstance.config(  'devServerPublicPathRoute')let importPromise = Promise.resolve()// If you do not bundle your support file along with the tests,// you need to add a separate import statement for the support file.const supportFilePath = CypressInstance.config('supportFile')if (supportFilePath) {  const relative = supportFilePath.replace(    CypressInstance.config('projectRoot'),    ''  )  importPromise = importPromise.then(    () => import(`${devServerPublicPathRoute}${relative}`)  )}// load the spec - you can extend the load function to also load cssconst { relative } = CypressInstance.specimportPromise = importPromise.then(  () => import(`${devServerPublicPathRoute}/${relative}`))// trigger loading the importsCypressInstance.onSpecWindow(window, importPromise)// then start the test processCypressInstance.action('app:window:before:load', window)\n```\n\nFor a more complete example you can check out the [kickstart script used in the vite-devserver.](https://github.com/cypress-io/cypress/blob/develop/npm/vite-dev-server/client/initCypressTests.js)\n\nThe `devServerEvents` event emitter should be used to notify cypress about finished builds by emitting a `dev-server:compile:success` event and to listen for the `dev-server:specs:changed` event that will notify you about changed entry points.\n\n## Spec Pattern for Component Tests[​](#Spec-Pattern-for-Component-Tests \"Direct link to Spec Pattern for Component Tests\")\n\nBy default, Cypress looks for spec files anywhere in your project with an extension of `.cy.js`, `.cy.jsx`, `.cy.ts`, or `.cy.tsx`. However, you can change this behavior for component tests with a custom `specPattern` value. In the following example, we've configured Cypress to look for spec files with those same extensions, but only in the `src` folder or any of its subdirectories.\n\n```\n{  component: {    specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}'  }}\n```\n\n## Additional Config[​](#Additional-Config \"Direct link to Additional Config\")\n\nFor more information on all the available configuration options, see the [configuration reference](https://docs.cypress.io/guides/references/configuration).",
  "title": "Component Testing Config | Cypress Documentation",
  "description": "When you launch Cypress for the first time in a project, the app will",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/stubs-spies-and-clocks",
  "markdown": "# Stubs, Spies, and Clocks | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   Which libraries Cypress includes to provide typical testing functionality\n*   How to use stubs for asserting that code was called but preventing it from executing\n*   How to use spies for asserting that code was called without interfering with its execution\n*   How to control time for deterministically testing code that is time-dependent\n*   How Cypress improves and extends the included libraries\n\n## Capabilities[​](#Capabilities \"Direct link to Capabilities\")\n\nCypress comes built in with the ability to stub and spy with [`cy.stub()`](https://docs.cypress.io/api/commands/stub), [`cy.spy()`](https://docs.cypress.io/api/commands/spy) or modify your application's time with [`cy.clock()`](https://docs.cypress.io/api/commands/clock) - which lets you manipulate `Date`, `setTimeout`, `clearTimeout`, `setInterval`, or `clearInterval`.\n\nThese commands are useful when writing both **unit tests** and **integration tests**.\n\nCypress automatically bundles and wraps these libraries:\n\n| Name | What it does |\n| --- | --- |\n| [`sinon`](http://sinonjs.org/) | provides the [`cy.stub()`](https://docs.cypress.io/api/commands/stub) and [`cy.spy()`](https://docs.cypress.io/api/commands/spy) APIs |\n| [`lolex`](https://github.com/sinonjs/lolex) | provides the [`cy.clock()`](https://docs.cypress.io/api/commands/clock) and [`cy.tick()`](https://docs.cypress.io/api/commands/tick) APIs |\n| [`sinon-chai`](https://github.com/domenic/sinon-chai) | adds `chai` assertions for stubs and spies |\n\nYou can refer to each of these libraries' documentation for more examples and explanations.\n\n## Common Scenarios[​](#Common-Scenarios \"Direct link to Common Scenarios\")\n\n### Stubs[​](#Stubs \"Direct link to Stubs\")\n\nA stub is a way to modify a function and delegate control over its behavior to you (the programmer).\n\nA stub is most commonly used in a unit test but is still useful during some integration/e2e tests.\n\n```\n// create a standalone stub (generally for use in unit test)cy.stub()// replace obj.method() with a stubbed functioncy.stub(obj, 'method')// force obj.method() to return \"foo\"cy.stub(obj, 'method').returns('foo')// force obj.method() when called with \"bar\" argument to return \"foo\"cy.stub(obj, 'method').withArgs('bar').returns('foo')// force obj.method() to return a promise which resolves to \"foo\"cy.stub(obj, 'method').resolves('foo')// force obj.method() to return a promise rejected with an errorcy.stub(obj, 'method').rejects(new Error('foo'))\n```\n\nYou generally stub a function when it has side effects you are trying to control.\n\n#### Common Scenarios:[​](#Common-Scenarios-1 \"Direct link to Common Scenarios:\")\n\n*   You have a function that accepts a callback, and want to invoke the callback.\n*   Your function returns a `Promise`, and you want to automatically resolve or reject it.\n*   You have a function that wraps `window.location` and don't want your application to be navigated.\n*   You're trying to test your application's \"failure path\" by forcing things to fail.\n*   You're trying to test your application's \"happy path\" by forcing things to pass.\n*   You want to \"trick\" your application into thinking it's logged in or logged out.\n*   You're using `oauth` and want to stub login methods.\n\n### Spies[​](#Spies \"Direct link to Spies\")\n\nA spy gives you the ability to \"spy\" on a function, by letting you capture and then assert that the function was called with the right arguments, or that the function was called a certain number of times, or even what the return value was or what context the function was called with.\n\nA spy does **not** modify the behavior of the function - it is left perfectly intact. A spy is most useful when you are testing the contract between multiple functions and you don't care about the side effects the real function may create (if any).\n\n### Clock[​](#Clock \"Direct link to Clock\")\n\nThere are situations when it is useful to control your application's `date` and `time` in order to override its behavior or avoid slow tests.\n\nWith [cy.clock()](https://docs.cypress.io/api/commands/clock) you can control:\n\n*   `Date`\n*   `setTimeout`\n*   `setInterval`\n\n#### Common Scenarios[​](#Common-Scenarios-2 \"Direct link to Common Scenarios\")\n\n##### Control `setInterval`[​](#Control-setInterval \"Direct link to Control-setInterval\")\n\n*   You're polling something in your application with `setInterval` and want to control that.\n*   You have **throttled** or **debounced** functions which you want to control.\n\nOnce you've enabled [`cy.clock()`](https://docs.cypress.io/api/commands/clock) you can control time by **ticking** it ahead by milliseconds.\n\n```\ncy.clock()cy.visit('http://localhost:3333')cy.get('#search').type('Acme Company')cy.tick(1000)\n```\n\nYou can call [`cy.clock()`](https://docs.cypress.io/api/commands/clock) **prior** to visiting your application and we will automatically bind it to the application on the next [`cy.visit()`](https://docs.cypress.io/api/commands/visit). The same concept applies to mounting a component with [`cy.mount()`](https://docs.cypress.io/api/commands/mount). We bind **before** any timers from your code can be invoked.\n\n##### Restore the clock[​](#Restore-the-clock \"Direct link to Restore the clock\")\n\nYou can restore the clock and allow your application to resume normally without manipulating native global functions related to time. This is automatically called between tests.\n\n```\ncy.clock()cy.visit('http://localhost:3333')cy.get('#search').type('Acme Company')cy.tick(1000)// more test code here// restore the clockcy.clock().then((clock) => {  clock.restore()})// more test code here\n```\n\nYou could also restore by using [.invoke()](https://docs.cypress.io/api/commands/invoke) to invoke the `restore` function.\n\n```\ncy.clock().invoke('restore')\n```\n\n### Assertions[​](#Assertions \"Direct link to Assertions\")\n\nOnce you have a `stub` or a `spy` in hand, you can then create assertions about them.\n\n```\nconst user = {  getName: (arg) => {    return arg  },  updateEmail: (arg) => {    return arg  },  fail: () => {    throw new Error('fail whale')  },}// force user.getName() to return \"Jane\"cy.stub(user, 'getName').returns('Jane Lane')// spy on updateEmail but do not change its behaviorcy.spy(user, 'updateEmail')// spy on fail but do not change its behaviorcy.spy(user, 'fail')// invoke getNameconst name = user.getName(123)// invoke updateEmailconst email = user.updateEmail('[email protected]')try {  // invoke fail  user.fail()} catch (e) {}expect(name).to.eq('Jane Lane') // trueexpect(user.getName).to.be.calledOnce // trueexpect(user.getName).not.to.be.calledTwice // trueexpect(user.getName).to.be.calledWith(123)expect(user.getName).to.be.calledWithExactly(123) // trueexpect(user.getName).to.be.calledOn(user) // trueexpect(email).to.eq('[email protected]') // trueexpect(user.updateEmail).to.be.calledWith('[email protected]') // trueexpect(user.updateEmail).to.have.returned('[email protected]') // trueexpect(user.fail).to.have.thrown('Error') // true\n```\n\n## Integration and Extensions[​](#Integration-and-Extensions \"Direct link to Integration and Extensions\")\n\nBeyond integrating these tools together, we have also extended and improved collaboration between these tools.\n\n**Some examples:**\n\n*   We replaced Sinon's argument stringifier for a much less noisy, more performant, custom version.\n*   We improved the `sinon-chai` assertion output by changing what is displayed during a passing vs. failing test.\n*   We added aliasing support to `stub` and `spy` APIs.\n*   We automatically restore and tear down `stub`, `spy`, and `clock` between tests.\n\nWe also integrated all of these APIs directly into the Command Log, so you can visually see what's happening in your application.\n\nWe visually indicate when:\n\n*   A `stub` is called\n*   A `spy` is called\n*   A `clock` is ticked\n\nWhen you use aliasing with the [`.as()`](https://docs.cypress.io/api/commands/as) command, we also correlate those aliases with the calls. This works identically to aliasing [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept).\n\nWhen stubs are created by calling the method `.withArgs(...)` we also visually link these together.\n\nWhen you click on a stub or spy, we also output **remarkably** helpful debugging information.\n\nFor instance we automatically display:\n\n*   The call count (and the total number of calls)\n*   The arguments, without transforming them (they are the real arguments)\n*   The return value of the function\n*   The context the function was invoked with\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Spies, stubs, and clocks](https://example.cypress.io/commands/spies-stubs-clocks) examples\n*   [Stub navigator API in end-to-end tests](https://glebbahmutov.com/blog/stub-navigator-api/)\n*   [Shrink the Untestable Code With App Actions And Effects](https://www.cypress.io/blog/2019/02/28/shrink-the-untestable-code-with-app-actions-and-effects/)\n*   [Testing periodic network requests with cy.intercept and cy.clock combination](https://www.cypress.io/blog/2021/02/23/cy-intercept-and-cy-clock/)",
  "title": "Stubs, Spies, and Clocks | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/faq",
  "markdown": "# Component Testing FAQ | Cypress Documentation\n\n## General Questions[​](#General-Questions \"Direct link to General Questions\")\n\n### What is component testing?[​](#What-is-component-testing \"Direct link to What is component testing?\")\n\nMany modern front-end UI libraries encourage writing applications using small, reusable building blocks known as components. Components start small (think buttons, images, inputs, etc.) and can be composed into larger components (order forms, date pickers, menus, etc.) and even entire pages.\n\nComponent testing is about testing an individual component in isolation from the rest of the app. This allows only having to worry about the component's functionality and not how it fits into an entire page.\n\n### What frameworks does component testing support?[​](#What-frameworks-does-component-testing-support \"Direct link to What frameworks does component testing support?\")\n\nWe support [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), [React](https://docs.cypress.io/guides/component-testing/react/overview), [Svelte](https://docs.cypress.io/guides/component-testing/svelte/overview), and [Vue](https://docs.cypress.io/guides/component-testing/vue/overview) currently for component testing.\n\nWe also support several meta-frameworks like Next.js, Create React App, and Nuxt, as well as Webpack and Vite for bundling. Check each framework's overview guide for more info.\n\n### How does Cypress do component testing?[​](#How-does-Cypress-do-component-testing \"Direct link to How does Cypress do component testing?\")\n\nCypress will take a component and mount it into a blank canvas. When doing so, you have direct access to the component's API, making it easier to pass in props or data and put a component in a certain state. From there, you can use the same Cypress commands, selectors, and assertions to write your tests.\n\nCypress supports multiple frameworks and development servers for component testing.\n\n### When should I use component testing vs end-to-end testing?[​](#When-should-I-use-component-testing-vs-end-to-end-testing \"Direct link to When should I use component testing vs end-to-end testing?\")\n\nThe biggest difference between end-to-end testing and component testing is that an end-to-end test \"visits\" an entire page, and a component test \"mounts\" individual components. You set up a component test by passing any data/props/events to the component directly versus trying to manipulate a page UI. Because of this, component tests are typically easier to write, have less setup, and execute faster.\n\nUse component testing during development to help build out a component's functionality in a test-driven manner. Feel free to write many tests and cover all the edge cases.\n\nUse end-to-end testing to validate user journey's through your application as a whole. Don't repeat the same tests in the component tests; instead, focus on how an actual user will use the application.\n\n### How does Cypress component testing compare to other options?[​](#How-does-Cypress-component-testing-compare-to-other-options \"Direct link to How does Cypress component testing compare to other options?\")\n\nWhen Cypress mounts a component, it does so in an actual browser and not a simulated environment like jsdom. This allows you to visually see and interact with the component as you work on it. You can use the same browser-based developer tools that you are used to when building web applications, such as element inspectors, modifying CSS, and source debugging.\n\nCypress Component Testing is built around the same tools and APIs that end-to-end testing uses. Anyone familiar with Cypress can immediately hop in and feel productive writing component tests without a large learning curve. Component tests can also use the vast Cypress ecosystem, plugins, and services (like [Cypress Cloud](https://www.cypress.io/cloud) already available to complement your component tests.\n\n## Technical Questions[​](#Technical-Questions \"Direct link to Technical Questions\")\n\n### What is the Mount Function?[​](#What-is-the-Mount-Function \"Direct link to What is the Mount Function?\")\n\nWe ship a `mount` function for each UI library that is imported from the `cypress` package. It is responsible for rendering components within Cypress's sandboxed iframe and handling any framework-specific cleanup.\n\n```\n// example showing importing mount command in reactimport { mount } from 'cypress/react'\n```\n\nWhile you can use the `mount` function in your tests, we recommend using [`cy.mount()`](https://docs.cypress.io/api/commands/mount), which is added as a [custom command](https://docs.cypress.io/api/cypress-api/custom-commands) in the **cypress/support/component.js** file:\n\n```\nimport { mount } from 'cypress/react'Cypress.Commands.add('mount', mount)\n```\n\nThis allows you to use `cy.mount()` in any component test without having to import the framework-specific mount command, as well as customizing it to fit your needs. See the examples guide for each framework for info on creating a custom `cy.mount()` command.\n\n### Why isn't my component rendering as it should?[​](#Why-isnt-my-component-rendering-as-it-should \"Direct link to Why isn't my component rendering as it should?\")\n\nAny global styles and fonts must be imported and made available to your component, just like in the application. See our guide on [Styling Components](https://docs.cypress.io/guides/component-testing/styling-components) for more information on doing so.\n\n### Why doesn't my spec show in the Specs page?[​](#Why-doesnt-my-spec-show-in-the-Specs-page \"Direct link to Why doesn't my spec show in the Specs page?\")\n\nIf something appears missing from the spec list, make sure the files have the [proper extension and the `specPattern` is correctly defined](https://docs.cypress.io/guides/component-testing/component-framework-configuration#Spec-Pattern-for-Component-Tests).\n\n### How do I fix ESLint errors for things like using the global Cypress objects?[​](#How-do-I-fix-ESLint-errors-for-things-like-using-the-global-Cypress-objects \"Direct link to How do I fix ESLint errors for things like using the global Cypress objects?\")\n\nIf you experience ESLint errors in your code editor around Cypress globals, install the [`eslint-plugin-cypress`](https://www.npmjs.com/package/eslint-plugin-cypress) ESLint plugin.\n\n### Why isn't TypeScript recognizing the global Cypress objects or custom cypress commands (eg: `cy.mount`)?[​](#Why-isnt-TypeScript-recognizing-the-global-Cypress-objects-or-custom-cypress-commands-eg-cymount \"Direct link to Why-isnt-TypeScript-recognizing-the-global-Cypress-objects-or-custom-cypress-commands-eg-cymount\")\n\nIn some instances, TypeScript might not recognize the custom `cy.mount()` command in Cypress spec files not located in the **cypress** directory. You will get a compiler error specifying that the type is not found in this case.\n\nA quick way to fix this is to include the **cypress** directory in your **tsconfig.json** options like so:\n\n```\n\"include\": [  \"src\",  \"cypress\"]\n```\n\nTypeScript will monitor all files in the **cypress** folder and pick up the typings defined in the **cypress/support/component.ts** file.\n\nAlternatively, you can move your typings to an external file and include that file in your **tsconfig.json** file. See our [TypeScript Configuration](https://docs.cypress.io/guides/tooling/typescript-support#Using-an-External-Typings-File) guide for more info on doing this.\n\n### How do I get TypeScript to recognize Cypress types and not Jest types?[​](#How-do-I-get-TypeScript-to-recognize-Cypress-types-and-not-Jest-types \"Direct link to How do I get TypeScript to recognize Cypress types and not Jest types?\")\n\nFor frameworks that include Jest out of the box (like Create React App), you might run into issues where the Cypress global types for TypeScript conflict with Jest global types (`describe`, `test`, `it`, etc..). In this case, other Cypress globals like `Cypress` and `cy` might not be working properly either.\n\nWe are currently investigating better ways to handle this, but for the time being, we recommend using a [triple slash references directive](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-) to instruct the TypeScript compiler to look at the Cypress global types in each of your affected spec files:\n\n```\n/// <reference types=\"cypress\" />\n```\n\n**Alternatively, Relocate Component Specs**\n\nYou can also group your Cypress and Jest tests inside separate folders (not co-located with components).\n\nYou will need to add a `tsconfig.json` to the folder and specify the types the files inside that folder should use.\n\nDon't forget to update your [`specPattern`](https://docs.cypress.io/guides/references/configuration#component) to include the new file location.",
  "title": "Component Testing FAQ | Cypress Documentation",
  "description": "General Questions",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/troubleshooting",
  "markdown": "# Troubleshooting | Cypress Documentation\n\nThere are times when you will encounter errors or unexpected behavior with Cypress itself. This guide recommends some resources and steps to take to troubleshoot those problems.\n\n## Update Cypress[​](#Update-Cypress \"Direct link to Update Cypress\")\n\nWe always recommend using the latest version of Cypress. If you're not using the latest version, upgrade to the latest version. Your issue may already be resolved.\n\n## Support channels[​](#Support-channels \"Direct link to Support channels\")\n\nCheck these support resources:\n\n*   Connect with our community in [Discord](https://on.cypress.io/discord)\n*   Search existing [GitHub issues](https://github.com/cypress-io/cypress/issues)\n*   Search this documentation (search is in the top right) 😉\n*   Search [Stack Overflow](https://stackoverflow.com/questions/tagged/cypress) for relevant answers\n*   If your organization signs up for one of our [paid plans](https://www.cypress.io/pricing/), you can get dedicated email support, which gives you one-on-one help from our team.\n*   If you still haven't found a solution, [open an issue](https://github.com/cypress-io/cypress/issues/new/choose) _with a reproducible example_.\n\n### Common GitHub issues[​](#Common-GitHub-issues \"Direct link to Common GitHub issues\")\n\nBelow are some of common problem topics users experience with a link to the main issue(s) and links to the open and closed issues in the topic. Maybe you can find an open or closed issue matching your problem. Even open issues might suggest a workaround or shed more information on the problem.\n\n| Label | Description | Issues |\n| --- | --- | --- |\n| browser detection | Local browser is not detected | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20browser%20detection), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+browser+detection%22+is%3Aclosed) |\n| cross-origin | Getting cross-origin error | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20cross-origin%20%E2%A4%AD), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+cross-origin+%E2%A4%AD%22+is%3Aclosed) |\n| cy.request | Issues related to [`cy.request()`](https://docs.cypress.io/api/commands/request) command | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20cy.request), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+cy.request%22+is%3Aclosed) |\n| fixtures | Fixture loading and usage | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20fixtures), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+fixtures%22+is%3Aclosed) |\n| hooks | Issues related to hooks | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20hooks%20%E2%86%AA), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+hooks+%E2%86%AA%22+is%3Aclosed) |\n| iframes | Working with iframes | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20iframes), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+iframes%22+is%3Aclosed) |\n| installation | Cypress cannot be downloaded or installed | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20installation), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+installation%22+is%3Aclosed) |\n| network | Controlling network requests | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20network), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+network%22+is%3Aclosed) |\n| performance | Slow loading, slow network, etc | [open](https://github.com/cypress-io/cypress/labels/type%3A%20performance%20%F0%9F%8F%83%E2%80%8D%E2%99%80%EF%B8%8F), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22type%3A+performance+%F0%9F%8F%83%E2%80%8D%E2%99%80%EF%B8%8F%22+is%3Aclosed) |\n| screenshots | Taking image screenshots | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20screenshots%20%F0%9F%93%B8), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+screenshots+%F0%9F%93%B8%22+is%3Aclosed) |\n| scrolling | Scrolling elements into view | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20scrolling%20%E2%86%95%EF%B8%8F), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+scrolling+%E2%86%95%EF%B8%8F%22+is%3Aclosed) |\n| spec execution | Running all or filtered specs | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20spec%20execution), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+spec+execution%22+is%3Aclosed) |\n| test execution | Running tests inside a single spec | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20test%20execution), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+test+execution%22+is%3Aclosed) |\n| TypeScript | Transpiling or bundling TypeScript | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20typescript), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+typescript%22+is%3Aclosed) |\n| video | Problems with video recordings | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20video%20%F0%9F%93%B9), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+video+%F0%9F%93%B9%22+is%3Aclosed) |\n| file downloads | File downloads are not working | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20downloads%20%E2%AC%87%EF%B8%8F), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+downloads+%E2%AC%87%EF%B8%8F%22+is%3Aclosed) |\n| intercept | Network stubbing using [cy.intercept](https://docs.cypress.io/api/commands/intercept) | [open](https://github.com/cypress-io/cypress/labels/pkg%2Fnet-stubbing), [closed](https://github.com/cypress-io/cypress/issues?q=label%3Apkg%2Fnet-stubbing+is%3Aclosed) |\n| SIG\\* errors | Crashes with errors like `SIGSEGV` | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20SIG%20errors), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+SIG+errors%22+is%3Aclosed) |\n| environment variables | Parsing and using environment variables | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20environment%20variables), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+environment+variables%22+is%3Aclosed) |\n\n## Isolate the Problem[​](#Isolate-the-Problem \"Direct link to Isolate the Problem\")\n\nWhen debugging a failing test, follow these general principles to isolate the problem:\n\n*   Look at the [video recordings and screenshots](https://docs.cypress.io/guides/guides/screenshots-and-videos).\n*   Split large spec files into smaller ones.\n*   Split long tests into smaller tests.\n*   Run the same test using [\\--browser chrome](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt). The problem might be isolated to the Electron browser.\n*   If isolated to the Electron browser. Run the same tests in both Electron and Chrome, then compare the screenshots/videos. Look for and isolate any differences in the Command Log.\n\n## Download specific Chrome version[​](#Download-specific-Chrome-version \"Direct link to Download specific Chrome version\")\n\nThe Chrome browser is evergreen - meaning it will automatically update itself, sometimes causing a breaking change in your automated tests. You can use [https://vikyd.github.io/download-chromium-history-version](https://vikyd.github.io/download-chromium-history-version) to download a specific released version of Chromium for every platform.\n\n## Clear Cypress cache[​](#Clear-Cypress-cache \"Direct link to Clear Cypress cache\")\n\nIf you're having an issue during installation of Cypress, try removing the contents of the Cypress cache.\n\nThis will clear out all installed versions of Cypress that may be cached on your machine.\n\nAfter running this command, you will need to run `cypress install` before running Cypress again.\n\n```\nnpm install cypress --save-dev\n```\n\n## Launching browsers[​](#Launching-browsers \"Direct link to Launching browsers\")\n\nCypress attempts to [automatically find installed Chrome versions for you](https://docs.cypress.io/guides/guides/launching-browsers). However, probing for browsers across different environments can be error-prone. If Cypress cannot find a browser but you know you have it installed, there are ways to ensure that Cypress can \"see\" it.\n\ninfo\n\n**Using the `--browser` command line argument**\n\nYou can also supply the `--browser` command line argument to launch a browser from a known filesystem path to bypass browser auto detection. [See 'Launching Browsers' for more information](https://docs.cypress.io/guides/guides/launching-browsers#Launching-by-a-path)\n\nYou can see the full list of found browsers and their properties within the [resolved configuration](https://docs.cypress.io/guides/references/configuration#Resolved-Configuration) in the **Settings** tab of Cypress.\n\nAnother way to log what is found by Cypress is to run Cypress with the [DEBUG environment variable](#Print-DEBUG-logs) set to `cypress:launcher`. This will print information about the found browsers and their properties to the terminal.\n\n**Tip:** use the [cypress info](https://docs.cypress.io/guides/guides/command-line#cypress-info) command to see all locally detected browsers.\n\n### Mac[​](#Mac \"Direct link to Mac\")\n\nOn Mac, Cypress attempts to find installed browsers by their bundle identifier. If this does not succeed, it will fall back to the Linux browser detection method.\n\n| Browser Name | Expected Bundle Identifier | Expected Executable |\n| --- | --- | --- |\n| `chrome` | `com.google.Chrome` | `Contents/MacOS/Google Chrome` |\n| `chromium` | `org.chromium.Chromium` | `Contents/MacOS/Chromium` |\n| `chrome:canary` | `com.google.Chrome.canary` | `Contents/MacOS/Google Chrome Canary` |\n\nFor the current list, see [packages/launcher](https://github.com/cypress-io/cypress/blob/develop/packages/launcher/lib/darwin/index.ts) files.\n\n### Linux[​](#Linux \"Direct link to Linux\")\n\nOn Linux, Cypress scans your `PATH` for a number of different binary names. If the browser you are trying to use does not exist under one of the expected binary names, Cypress will not be able to find it.\n\n| Browser Name | Expected Binary Name(s) |\n| --- | --- |\n| `chrome` | `google-chrome`, `chrome`, or `google-chrome-stable` |\n| `chromium` | `chromium-browser` or `chromium` |\n| `chrome:canary` | `google-chrome-canary` |\n\nThese binary names should work for most Linux distributions. If your distribution packages browsers under a different binary name, you can add a symlink using the expected binary name so that Cypress can detect it.\n\nFor example, if your distribution packages Google Chrome as `chrome`, you could add a symlink to `google-chrome` like this:\n\n```\nsudo ln `which chrome` /usr/local/bin/google-chrome\n```\n\n### Windows[​](#Windows \"Direct link to Windows\")\n\nOn Windows, Cypress scans the following locations to try to find each browser:\n\n| Browser Name | Expected Path |\n| --- | --- |\n| `chrome` | `C:/Program Files (x86)/Google/Chrome/Application/chrome.exe` |\n| `chromium` | `C:/Program Files (x86)/Google/chrome-win32/chrome.exe` |\n| `chrome:canary` | `%APPDATA%/../Local/Google/Chrome SxS/Application/chrome.exe` |\n\nFor the current list, see [packages/launcher](https://github.com/cypress-io/cypress/blob/develop/packages/launcher/lib/windows/index.ts) files.\n\nTo make a browser installed at a different path be auto-detected, create a symbolic link using `mklink` in the location that Cypress expects to find your browser.\n\n[Read more about creating symbolic links on Windows](https://www.howtogeek.com/howto/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/)\n\nOccasionally Cypress will have issues detecting the type of browser in Windows environments. To manually detect the browser type, append the browser type to the end of the path:\n\n```\ncypress open --browser C:/User/Application/browser.exe:chrome\n```\n\n## Allow the Cypress Chrome extension[​](#Allow-the-Cypress-Chrome-extension \"Direct link to Allow the Cypress Chrome extension\")\n\nCypress utilizes a Chrome extension in order to run properly. If you or your company block specific Chrome extensions, this may cause problems with running Cypress. You will want to ask your administrator to allow the Cypress extension ID below:\n\n```\ncaljajdfkjjjdehjdoimjkkakekklcck\n```\n\nYou can check the current company policies for your Chrome installation by typing `chrome://policy` into the address bar and pressing Enter.\n\n## Allow Cypress URLs on VPNs[​](#Allow-Cypress-URLs-on-VPNs \"Direct link to Allow Cypress URLs on VPNs\")\n\nTo send the data and results of your tests to [Cypress Cloud](https://on.cypress.io/cloud-introduction), Cypress needs free access to some URLs.\n\nIf you are running the tests from within a restrictive VPN you will need to allow some URLs so that Cypress can have effective communication with Cypress Cloud.\n\n**The URLs are the following:**\n\n*   `https://api.cypress.io` - **Cypress API**\n*   `https://assets.cypress.io` - **Asset CDN** (Org logos, icons, videos, screenshots, etc.)\n*   `https://authenticate.cypress.io` - **Authentication API**\n*   `https://capture.cypress.io` - **Cypress Test Replay**\n*   `https://s3.amazonaws.com/capture.cypress.io` - **Uploading Cypress Test Replay from Test Runner**\n*   `https://cloud.cypress.io` - **Cypress Cloud**\n*   `https://docs.cypress.io` - **Cypress documentation**\n*   `https://download.cypress.io` - **CDN download of Cypress binary**\n*   `https://on.cypress.io` - **URL shortener for link redirects**\n\n**If you are using GitHub Enterprise or GitLab for Enterprise (Self-managed), you may also need to add the following to the version control IP allowlist:**\n\n*   `3.211.102.119` - **Dedicated IP**\n*   `18.213.72.78` - **Dedicated IP**\n*   `35.169.145.173` - **Dedicated IP**\n*   `44.199.152.70` - **Dedicated IP**\n*   `52.70.95.89` - **Dedicated IP**\n\n## Clear App Data[​](#Clear-App-Data \"Direct link to Clear App Data\")\n\nCypress maintains some local application data in order to save user preferences and more quickly start up. Sometimes this data can become corrupted. You may fix an issue you have by clearing this app data.\n\n### To clear App Data[​](#To-clear-App-Data \"Direct link to To clear App Data\")\n\n1.  Open Cypress via `cypress open`\n2.  Go to `Developer Tools` -> `View App Data`\n3.  This will take you to the directory in your file system where your App Data is stored. If you cannot open Cypress, search your file system for a directory named `cy` whose content should look something like this:\n\n```\n📂 production  📄 all.log  📁 browsers  📁 bundles  📄 cache  📁 projects  📁 proxy  📄 state.json\n```\n\n4.  Delete everything in the `cy` folder\n5.  Close Cypress and open it up again\n\n## Print DEBUG logs[​](#Print-DEBUG-logs \"Direct link to Print DEBUG logs\")\n\nCypress is built using the [debug](https://github.com/visionmedia/debug) module. That means you can receive helpful debugging output by running Cypress with this turned on. **Note:** you will see a LOT of messages when running with `DEBUG=...` setting.\n\n**On Mac or Linux:**\n\n```\nDEBUG=cypress:* cypress run\n```\n\n**On Windows:**\n\nOn Windows, you'll need to run the command in a command prompt terminal (not PowerShell).\n\n```\nset DEBUG=cypress:*cypress run\n```\n\nIf you have issues with the logs not printing, it may be a permissions issue with setting the environment variable in your terminal. You may need to run your terminal in administrative mode or review your permission settings.\n\nRead more [about the CLI options here](https://docs.cypress.io/guides/guides/command-line#Debugging-commands) and [Good Logging](https://glebbahmutov.com/blog/good-logging/) blog post.\n\n### Detailed Logs[​](#Detailed-Logs \"Direct link to Detailed Logs\")\n\nThere are several levels of `DEBUG` messages\n\n```\n## prints very few top-level messagesDEBUG=cypress:server ...## prints ALL messages from server packageDEBUG=cypress:server* ...## prints messages only from config parsingDEBUG=cypress:server:config ...\n```\n\nThis allows you to isolate the problem a little better\n\n### Log sources[​](#Log-sources \"Direct link to Log sources\")\n\nCypress is built from multiple packages, each responsible for its own logging: server, reporter, driver, command line, etc. Each package writes debug logs under a different source. Here are a few common log sources and when you might want to enable them\n\n| Set `DEBUG` to value | To enable debugging |\n| --- | --- |\n| `cypress:cli` | The top-level command line parsing problems |\n| `cypress:server:args` | Incorrect parsed command line arguments |\n| `cypress:server:specs` | Not finding the expected specs |\n| `cypress:server:project` | Opening the project |\n| `cypress:server:browsers` | Finding installed browsers |\n| `cypress:launcher` | Launching the found browser |\n| `cypress:server:video` | Video recording |\n| `cypress:network:*` | Adding network interceptors |\n| `cypress:net-stubbing*` | Network interception in the proxy layer |\n| `cypress:server:reporter` | Problems with test reporters |\n| `cypress:server:preprocessor` | Processing specs |\n| `cypress:server:socket-e2e` | Watching spec files |\n| `cypress:server:task` | Invoking the `cy.task()` command |\n| `cypress:server:socket-base` | Debugging `cy.request()` command |\n| `cypress:webpack` | Bundling specs using webpack |\n| `cypress:server:fixture` | Loading fixture files |\n| `cypress:server:record:ci-info` | Git commit and CI information when recording to Cypress Cloud |\n\nYou can combine several areas together using the comma character. For example, to debug specs not being found, use:\n\n```\n## see how CLI arguments were parsed## and how Cypress tried to locate spec filesDEBUG=cypress:cli,cypress:server:specs npx cypress run --spec ...\n```\n\nYou can also exclude a log source using `-` character. For example, to see all `cypress:server*` messages without noisy browser messages use:\n\n```\nDEBUG=cypress:server*,-cypress:server:browsers* npx cypress run\n```\n\n#### Debug log depth[​](#Debug-log-depth \"Direct link to Debug log depth\")\n\nSometimes the logged object has deeply nested properties and is shown as `[Object]` instead of the full serialization.\n\n```\nDEBUG=cypress:server:socket-base npx cypress runcypress:server:socket-base backend:request { eventName: 'http:request', args:  [ { url: 'http://localhost:7065/echo', method: 'POST', body: [Object], auth: [Object],  json: true, encoding: 'utf8', gzip: true, timeout: 30000, followRedirect: true,  failOnStatusCode: true, retryOnNetworkFailure: true,  retryOnStatusCodeFailure: false } ] } +5ms\n```\n\nYou can increase the printed object depth using the `DEBUG_DEPTH` environment variable\n\n```\nDEBUG=cypress:server:socket-base DEBUG_DEPTH=3 npx cypress runcypress:server:socket-base backend:request { eventName: 'http:request', args:  [ { url: 'http://localhost:7065/echo', method: 'POST', body: { text: 'ping!' },  auth: { username: 'jane.lane', password: 'password123' }, json: true, encoding: 'utf8',  gzip: true, timeout: 30000, followRedirect: true, failOnStatusCode: true,  retryOnNetworkFailure: true, retryOnStatusCodeFailure: false } ] } +4ms\n```\n\n#### 3rd party modules[​](#3rd-party-modules \"Direct link to 3rd party modules\")\n\nSome 3rd party modules like [@cypress/request](https://github.com/cypress-io/request) output additional log messages by inspecting the `NODE_DEBUG` environment variable. For example to debug the network interception and the requests made by the `@cypress/request` use:\n\n```\nDEBUG=cypress:net-stubbing:server:intercept-request \\  NODE_DEBUG=request npx cypress run\n```\n\n### Debug logs in the browser[​](#Debug-logs-in-the-browser \"Direct link to Debug logs in the browser\")\n\nIf the problem is seen during `cypress open` you can print debug logs in the browser too. Open the browser's Developer Tools and set a `localStorage` property:\n\n```\nlocalStorage.debug = 'cypress*'// to disable debug messagesdelete localStorage.debug\n```\n\nReload the browser and turn on 'Verbose' logs to see debug messages within the Developer Tools console. You will only see the **cypress:driver** package logs that run in the browser, as you can see below.\n\n![Debug logs in browser](https://docs.cypress.io/img/api/debug/debug-driver.jpg)\n\n## Log memory and CPU usage[​](#Log-memory-and-CPU-usage \"Direct link to Log memory and CPU usage\")\n\nYou can tell Cypress to log out a summary of the memory and CPU usage of itself and any subprocesses at a regular interval by enabling the `cypress:server:util:process_profiler` debug stream, like so:\n\n**On Mac or Linux:**\n\n```\nDEBUG=cypress:server:util:process_profiler cypress run\n```\n\n**On Windows:**\n\n```\nset DEBUG=cypress:server:util:process_profilercypress run\n```\n\nIn the resulting output, processes are grouped by their name.\n\n![Process printout of Cypress in CLI](https://docs.cypress.io/img/guides/troubleshooting/troubleshooting-cypress-process-profiler-cli.jpg)\n\nBy default, process information is collected and summarized is printed once every 10 seconds. You can override this interval by setting the `CYPRESS_PROCESS_PROFILER_INTERVAL` environment variable to the desired interval in milliseconds.\n\nYou can also obtain more detailed per-process information by enabling the verbose `cypress-verbose:server:util:process_profiler` debug stream.\n\n## Disable the Command Log[​](#Disable-the-Command-Log \"Direct link to Disable the Command Log\")\n\nIn some cases the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log), responsible for displaying test commands, assertions, and statuses in the Cypress Test Runner, may cause performance issues resulting in slower tests or the browser crashing.\n\nIn order to isolate these issues, you can hide the Command Log by passing the environment variable below during `cypress open` or `cypress run`.\n\n```\nCYPRESS_NO_COMMAND_LOG=1 cypress run\n```\n\nYou can also hide the entire Cypress Runner UI in `cypress run` by passing the [`--no-runner-ui`](https://docs.cypress.io/guides/guides/command-line#cypress-run-no-runner-ui) command line flag.\n\n```\ncypress run --no-runner-ui\n```\n\nWith this variable set, Cypress will skip rendering the Command Log entirely, and perform none of the usual DOM updates to display information about commands and statuses as the test runs.\n\n**Note:** With this variable set, screenshots and videos will not include the Command Log.\n\n## Additional information[​](#Additional-information \"Direct link to Additional information\")\n\n### Write command log to the terminal[​](#Write-command-log-to-the-terminal \"Direct link to Write command log to the terminal\")\n\nYou can include the plugin [cypress-failed-log](https://github.com/bahmutov/cypress-failed-log) in your tests. This plugin writes the list of Cypress commands to the terminal as well as a JSON file if a test fails.\n\n![cypress-failed-log terminal output](https://docs.cypress.io/img/api/debug/failed-log.png)\n\n## Hacking on Cypress[​](#Hacking-on-Cypress \"Direct link to Hacking on Cypress\")\n\nIf you want to dive into Cypress and edit the code yourself, you can do that. The Cypress code is open source and licensed under an [MIT license](https://github.com/cypress-io/cypress/blob/develop/LICENSE). There are a few tips on getting started that we've outlined below.\n\n### Contribute[​](#Contribute \"Direct link to Contribute\")\n\nIf you'd like to contribute directly to the Cypress code, we'd love to have your help! Please check out our [contributing guide](https://github.com/cypress-io/cypress/blob/develop/CONTRIBUTING.md) to learn about the many ways you can contribute.\n\n### Run Cypress by itself[​](#Run-Cypress-by-itself \"Direct link to Run Cypress by itself\")\n\nCypress comes with an npm CLI module that parses the arguments, starts the Xvfb server (if necessary), and then opens Cypress.\n\nSome common situations on why you would want to run Cypress by itself are to:\n\n*   debug Cypress not starting or hanging\n*   debug problems related to the way CLI arguments are parsed by the npm CLI module\n\nHere is how you can launch Cypress directly without the npm CLI module. First, find where the binary is installed using the [cypress cache path](https://docs.cypress.io/guides/guides/command-line#cypress-cache-path) command.\n\nFor example, on a Linux machine:\n\n```\nnpx cypress cache path/root/.cache/Cypress\n```\n\nSecond, try a smoke test that verifies that the application has all its required dependencies present on the host machine:\n\n```\n/root/.cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=101101\n```\n\nIf there is a missing dependency, the application should print an error message. You can see the Electron verbose log messages by setting an [environment variable ELECTRON\\_ENABLE\\_LOGGING](https://www.electronjs.org/docs/api/command-line-switches):\n\n```\nELECTRON_ENABLE_LOGGING=true DISPLAY=10.130.4.201:0 /root/.cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=101[809:0617/151243.281369:ERROR:bus.cc(395)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory101\n```\n\nIf the smoke test fails to execute, check if a shared library is missing (a common problem on Linux machines without all of the Cypress dependencies present).\n\n```\nldd /home/person/.cache/Cypress/3.3.1/Cypress/Cypress  linux-vdso.so.1 (0x00007ffe9eda0000)  libnode.so => /home/person/.cache/Cypress/3.3.1/Cypress/libnode.so (0x00007fecb43c8000)  libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fecb41ab000)  libgtk-3.so.0 => not found  libgdk-3.so.0 => not found  ...\n```\n\n**Tip:** use [Cypress Docker image](https://docs.cypress.io/examples/docker) or install dependencies by copying them from one of our official Docker images.\n\n**Note:** verbose Electron logging might show warnings that still allow Cypress to work normally. For example, Cypress opens normally despite the scary output below:\n\n```\nELECTRON_ENABLE_LOGGING=true DISPLAY=10.130.4.201:0 /root/.cache/Cypress/3.3.1/Cypress/Cypress[475:0617/150421.326986:ERROR:bus.cc(395)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory[475:0617/150425.061526:ERROR:bus.cc(395)] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are \"tcp\" and on UNIX \"unix\")[475:0617/150425.079819:ERROR:bus.cc(395)] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are \"tcp\" and on UNIX \"unix\")[475:0617/150425.371013:INFO:CONSOLE(73292)] \"%cDownload the React DevTools for a better development experience: https://fb.me/react-devtoolsYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq\", source: file:///root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/desktop-gui/dist/app.js (73292)\n```\n\nYou can also see verbose Cypress logs when running the Cypress binary\n\n```\nDEBUG=cypress* DISPLAY=10.130.4.201:0 /root/.cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=101cypress:ts Running without ts-node hook in environment \"production\" +0mscypress:server:cypress starting cypress with argv [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=101' ] +0mscypress:server:args argv array: [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=101' ] +0mscypress:server:args argv parsed: { _: [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 101, cwd: '/root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server' } +7mscypress:server:args options { _: [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 101, cwd: '/root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {} } +2mscypress:server:args argv options: { _: [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 101, cwd: '/root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {}, pong: 101 } +1mscypress:server:appdata path: /root/.config/Cypress/cy/production +0mscypress:server:cypress starting in mode smokeTest +356ms101cypress:server:cypress about to exit with code 0 +4ms\n```\n\nIf the smoke test does not show a specific error yet fails, try printing the Electron crash stack to maybe pinpoint the problem better:\n\n```\nELECTRON_ENABLE_STACK_DUMPING=1 npx cypress verify...Received signal 11 SEGV_MAPERR ffffffb27e8955bb#0 0x55c6389f83d9 (/root/.cache/Cypress/3.8.2/Cypress/Cypress+0x35d13d8)r8: 0000000000000000  r9: 00007ffcf0387c80 r10: 00007ffcf0387bd8 r11: 000000000000000er12: 00007ffcf0387d2c r13: 00007f3ea737b720 r14: ffffffb27e89558b r15: 00007f3ea8974200di: 0000000000000000  si: 0000000000000020  bp: 0000000000000000  bx: 0000004f2f375580dx: 0000000000000001  ax: 0000000000000030  cx: 0000000000000001  sp: 00007ffcf0387d00ip: 00007f3ea89582dd efl: 0000000000010246 cgf: 002b000000000033 erf: 0000000000000005trp: 000000000000000e msk: 0000000000000000 cr2: ffffffb27e8955bb[end of stack trace]Calling _exit(1). Core file will not be generated.\n```\n\n### Patch Cypress[​](#Patch-Cypress \"Direct link to Patch Cypress\")\n\nCypress comes with an npm CLI module that parses the arguments, starts the Xvfb server (if necessary), and then opens Cypress.\n\nIf you're encountering a bug in the current version of Cypress, you can implement a temporary fix by patching Cypress in your own project. Here is an example of how to do this.\n\n1.  Install [patch-package](https://github.com/ds300/patch-package).\n2.  Add a patch step to your CI configuration after installing your npm packages.\n\n```\n- run: npm ci- run: npx patch-package\n```\n\nAlternatively, you can apply the patch during a post-install phase. In your `package.json`, for example, you could add the following:\n\n```\n{  \"scripts\": {    \"postinstall\": \"patch-package\"  }}\n```\n\n3.  Edit the line causing the problem _in your local node\\_modules folder_ within `node_modules/cypress`.\n4.  Run the `npx patch-package cypress` command. This command will create a new file `patches/cypress+3.4.1.patch`.\n\n```\nnpx patch-package cypresspatch-package 6.1.2• Creating temporary folder• Installing cypress@3.4.1 with npm• Diffing your files with clean files✔ Created file patches/cypress+3.4.1.patch\n```\n\n5.  Commit the new `patches` folder to git.\n\ninfo\n\nIf you find a patch for an error, please add a comment explaining your workaround to the relevant Cypress GitHub issue. It will help us release an official fix faster.",
  "title": "Troubleshooting | Cypress Documentation",
  "description": "There are times when you will encounter errors or unexpected behavior with",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/test-retries",
  "markdown": "# Test Retries | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   What are test retries?\n*   Why are test retries important?\n*   How to configure test retries\n\n## Introduction[​](#Introduction \"Direct link to Introduction\")\n\nEnd-to-end (E2E) tests excel at testing complex systems. However, there are still behaviors that are hard to verify and make tests flaky (i.e., unreliable) and fail sometimes due to unpredictable conditions (eg., temporary outages in external dependencies, random network errors, etc.). Some other common race conditions that could result in unreliable tests include:\n\n*   Animations\n*   API calls\n*   Test server / database availability\n*   Resource dependencies availability\n*   Network issues\n\nWith test retries, Cypress is able to retry failed tests to help [detect test flakiness](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Detection) and continuous integration (CI) build failures. By doing so, this will save your team valuable time and resources so you can focus on what matters most to you.\n\n## How It Works[​](#How-It-Works \"Direct link to How It Works\")\n\ninfo\n\nYou may want to use the [experimental test retries](https://docs.cypress.io/guides/references/experiments#Experimental-Test-Retries) feature which offers more options for [detecting flaky tests](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Detection). This experimental feature is available as of Cypress `13.4.0`.\n\nTest retries were originally intended to give failing tests more chances to \"pass\" (for instance, if CI environments for testing are unreliable), while still being determined as flaky if they do eventually pass. However this may not be the desired result in all cases. Experimental retries give you control over the conditions of the pass or fail result.\n\nBy default, tests will not retry when they fail. You will need to [enable test retries in your configuration](#Configure-Test-Retries) to use this feature.\n\nOnce test retries are enabled, tests can be configured to have X number of retry attempts. For example, if test retries has been configured with `2` retry attempts, Cypress will retry tests up to 2 additional times (for a total of 3 attempts) before potentially being marked as a failed test.\n\nWhen each test is run again, the following [hooks](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Hooks) will be re-run also:\n\n*   `beforeEach`\n*   `afterEach`\n\ncaution\n\nHowever, failures in `before` and `after` hooks will not trigger a retry.\n\n**The following is a detailed step-by-step example of how test retries works:**\n\nAssuming we have configured test retries with `2` retry attempts (for a total of 3 attempts), here is how the tests might run:\n\n1.  A test runs for the first time. If the\n    \n    test passes, Cypress will move forward with any remaining tests as usual.\n    \n2.  If the test fails, Cypress will tell you that the first attempt failed and will attempt to run the test a second time.\n    \n\n![](https://docs.cypress.io/img/guides/test-retries/v10/attempt-2-start.png)\n\n3.  If the test passes after the second attempt, Cypress will continue with any remaining tests.\n    \n4.  If the test fails a second time, Cypress will make the final third attempt to re-run the test.\n    \n\n![](https://docs.cypress.io/img/guides/test-retries/v10/attempt-3-start.png)\n\n5.  If the test fails a third time, Cypress will mark the test as failed and then move on to run any remaining tests.\n\n![](https://docs.cypress.io/img/guides/test-retries/v10/attempt-3-fail.png)\n\nThe following is a screen capture of what test retries looks like on the same failed test when run via [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\n![](https://docs.cypress.io/img/guides/test-retries/cli-error-message.png)\n\nDuring [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open) you will be able to see the number of attempts made in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) and expand each attempt for review and debugging if desired.\n\n## Configure Test Retries[​](#Configure-Test-Retries \"Direct link to Configure Test Retries\")\n\n### Global Configuration[​](#Global-Configuration \"Direct link to Global Configuration\")\n\nTypically you will want to define different retry attempts for `cypress run` versus `cypress open`. You can configure this in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Global) by passing the `retries` option an object with the following options:\n\n*   `runMode` allows you to define the number of test retries when running `cypress run`\n*   `openMode` allows you to define the number of test retries when running `cypress open`\n\n```\n{  retries: {    // Configure retry attempts for `cypress run`    // Default is 0    runMode: 2,    // Configure retry attempts for `cypress open`    // Default is 0    openMode: 0  }}\n```\n\n#### Configure retry attempts for all modes[​](#Configure-retry-attempts-for-all-modes \"Direct link to Configure retry attempts for all modes\")\n\nIf you want to configure the retry attempts for all tests run in both `cypress run` and `cypress open`, you can configure this in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Global) by defining the `retries` property and setting the desired number of retries.\n\n### Custom Configurations[​](#Custom-Configurations \"Direct link to Custom Configurations\")\n\n#### Individual Test(s)[​](#Individual-Tests \"Direct link to Individual Test(s)\")\n\nIf you want to configure retry attempts on a specific test, you can set this by using the [test's configuration](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Configuration).\n\n```\n// Customize retry attempts for an individual testdescribe('User sign-up and login', () => {  // `it` test block with no custom configuration  it('should redirect unauthenticated user to sign-in page', () => {    // ...  })  // `it` test block with custom configuration  it(    'allows user to login',    {      retries: {        runMode: 2,        openMode: 1,      },    },    () => {      // ...    }  )})\n```\n\n#### Test Suite(s)[​](#Test-Suites \"Direct link to Test Suite(s)\")\n\nIf you want to configure try attempts for a suite of tests, you can do this by setting the suite's configuration.\n\n```\n// Customizing retry attempts for a suite of testsdescribe(  'User bank accounts',  {    retries: {      runMode: 2,      openMode: 1,    },  },  () => {    // The per-suite configuration is applied to each test    // If a test fails, it will be retried    it('allows a user to view their transactions', () => {      // ...    })    it('allows a user to edit their transactions', () => {      // ...    })  })\n```\n\nYou can find more information about custom configurations here: [Test Configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration)\n\n## Screenshots[​](#Screenshots \"Direct link to Screenshots\")\n\nWhen a test retries, Cypress will continue to take screenshots for each failed attempt or [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) and suffix each new screenshot with `(attempt n)`, corresponding to the current retry attempt number.\n\nWith the following test code, you would see the below screenshot filenames when all 3 attempts fail:\n\n*   End-to-End Test\n*   Component Test\n\n```\ndescribe('User Login', () => {  it('displays login errors', () => {    cy.visit('/')    cy.screenshot('user-login-errors')    // ...  })})\n```\n\n```\n// screenshot filename from cy.screenshot() on 1st attempt'user-login-errors.png'// screenshot filename on 1st failed attempt'user-login-errors (failed).png'// screenshot filename from cy.screenshot() on 2nd attempt'user-login-errors (attempt 2).png'// screenshot filename on 2nd failed attempt'user-login-errors (failed) (attempt 2).png'// screenshot filename from cy.screenshot() on 3rd attempt'user-login-errors (attempt 3).png'// screenshot filename on 3rd failed attempt'user-login-errors (failed) (attempt 3).png'\n```\n\n## Videos[​](#Videos \"Direct link to Videos\")\n\nYou can use Cypress's [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) event listener that fires after each spec file is run to delete the recorded video for specs that had no retry attempts or failures. Deleting passing and non-retried videos after the run can save resource space on the machine as well as skip the time used to process, compress, and upload the video to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction).\n\n### Only upload videos for specs with failing or retried tests[​](#Only-upload-videos-for-specs-with-failing-or-retried-tests \"Direct link to Only upload videos for specs with failing or retried tests\")\n\nThe example below shows how to delete the recorded video for specs that had no retry attempts or failures when using Cypress test retries.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')// need to install these dependencies// npm install lodash del --save-devconst _ = require('lodash')const del = require('del')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      on('after:spec', (spec, results) => {        if (results && results.video) {          // Do we have failures for any retry attempts?          const failures = _.some(results.tests, (test) => {            return _.some(test.attempts, { state: 'failed' })          })          if (!failures) {            // delete the video if the spec passed and no tests retried            return del(results.video)          }        }      })    },  },})\n```\n\n## Cypress Cloud[​](#Cypress-Cloud \"Direct link to Cypress Cloud\")\n\nIf you are using [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction), information related to test retries is displayed on the Test Results tab for a run. Selecting the Flaky filter will show tests that retried and then passed during the run.\n\nThese tests are also indicated with a \"Flaky\" badge on the Latest Runs page and Test Results tab on the Run Details page.\n\nClicking on a Test Result will open the Test Case History screen. This demonstrates the number of failed attempts, the screenshots and/or videos of failed attempts, and the error for failed attempts.\n\n![Flake artifacts and errors](https://docs.cypress.io/img/guides/test-retries/flake-artifacts-and-errors.png)\n\nYou can also see the Flaky Rate for a given test.\n\n![Flaky rate](https://docs.cypress.io/img/guides/test-retries/flaky-rate.png)\n\nFor a comprehensive view of how flake is affecting your overall test suite, you can review the [Flake Detection](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Detection) and [Flake Alerting](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Alerting) features highlighted in the Test Flake Management Guide.\n\ntip\n\n**Debugging Cypress Cloud Test Runs?**\n\nDon't rely on artifact representations or reproducing failing conditions locally. Replay the test as it executed during the recorded run with full debug capability using [![](https://docs.cypress.io/img/guides/cloud/test-replay/replay-icon.svg) Test Replay](https://docs.cypress.io/guides/cloud/test-replay).\n\n## Frequently Asked Questions (FAQs)[​](#Frequently-Asked-Questions-FAQs \"Direct link to Frequently Asked Questions (FAQs)\")\n\n### Will retried tests be counted as more than one test result in my billing?[​](#Will-retried-tests-be-counted-as-more-than-one-test-result-in-my-billing \"Direct link to Will retried tests be counted as more than one test result in my billing?\")\n\nNo. Tests recorded during `cypress run` with the `--record` flag will be counted the same with or without test retries.\n\nWe consider each time the `it()` function is called to be a single test for billing purposes. The test retrying will not count as extra test results in your billing.\n\nYou can always see how many tests you've recorded from your organization's Billing & Usage page within [Cypress Cloud](https://on.cypress.io/cloud).\n\n### Can I access the current attempt counter from the test?[​](#Can-I-access-the-current-attempt-counter-from-the-test \"Direct link to Can I access the current attempt counter from the test?\")\n\nYes, although ordinarily you would not have to, since this is a low-level detail. But if you want to use the current attempt number, you can use [`Cypress.currentRetry`](https://docs.cypress.io/api/cypress-api/currentretry). If you want to determine the total allowed attempts you can do the following:\n\n```\nit('does something differently on retry', { retries: 3 }, () => {  // Cypress.currentRetry returns the current test retry count  const attempt = Cypress.currentRetry  // cy.state('runnable') returns the current test object  // we can grab the total allowed attempts from its properties  const retries = cy.state('runnable')._retries  // use the \"attempt\" and \"retries\" values somehow})\n```\n\nThe above `attempt` variable will have values 0 through 3 (the first default test execution plus three allowed retries). The `retries` constant in this case is always 3.\n\n**Tip:** Cypress [bundles Lodash](https://docs.cypress.io/api/utilities/_) library. Use its helper methods to safely access a property of an object. Let's make sure the function supports different Cypress versions by falling back to the default values.\n\n```\nit('does something differently on retry', { retries: 3 }, () => {  // _.get: if the object or property is missing use the provided default value  const attempt = Cypress.currentRetry  const retries = Cypress._.get(cy.state('runnable'), '_retries', 0)  // use the \"attempt\" and \"retries\" values somehow})\n```",
  "title": "Test Retries | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/examples/docker",
  "markdown": "# Docker | Cypress Documentation\n\n## Images[​](#Images \"Direct link to Images\")\n\n[https://github.com/cypress-io/cypress-docker-images](https://github.com/cypress-io/cypress-docker-images)\n\nThis repo holds the documentation, build and publish code for various Docker images for running Cypress locally and in CI.\n\nThe following types of Cypress Docker images are available:\n\n*   [cypress/base](https://github.com/cypress-io/cypress-docker-images/tree/master/base)`:<Node version>` has the operating system dependencies required to run Cypress.\n*   [cypress/browsers](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers)`:<tag>` extends the base images with pre-installed browsers.\n*   [cypress/included](https://github.com/cypress-io/cypress-docker-images/tree/master/included)`:<Cypress version>` extends the browsers images with pre-installed Cypress versions.\n*   [cypress/factory](https://github.com/cypress-io/cypress-docker-images/tree/master/factory)`:<Factory version>` is a Docker image that can be used with [`ARG`](https://docs.docker.com/reference/dockerfile/#arg) instructions in a custom-built [`Dockerfile`](https://docs.docker.com/reference/dockerfile/) to generate a new Docker image with specific versions of Node.js, Yarn v1 Classic, Chrome, Firefox, Edge and Cypress. It's used to create the above Docker images and can be used by you to create a custom Docker image with versions of your choice.\n\n## Examples[​](#Examples \"Direct link to Examples\")\n\n*   See [CI Docker examples](https://docs.cypress.io/guides/continuous-integration/introduction#CI-Docker-examples) for examples of using Cypress Docker images in Continuous Integration (CI)\n*   See [Docker usage examples](https://github.com/cypress-io/cypress-docker-images/blob/master/README.md#examples) in the [cypress-io/cypress-docker-images](https://github.com/cypress-io/cypress-docker-images) repo",
  "title": "Docker | Cypress Documentation",
  "description": "Images",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/react/overview",
  "markdown": "# React Component Testing | Cypress Documentation\n\n## Framework Support[​](#Framework-Support \"Direct link to Framework Support\")\n\nCypress Component Testing currently supports React 16+ with the following frameworks:\n\n*   [Create React App](#Create-React-App-CRA)\n*   [Next.js](#Nextjs)\n*   [React with Vite](#React-with-Vite)\n*   [React with Webpack](#React-with-Webpack)\n\n## Tutorial[​](#Tutorial \"Direct link to Tutorial\")\n\nVisit the [Getting Started Guide](https://docs.cypress.io/guides/component-testing/getting-started) for a step-by-step tutorial on adding component testing to any project and how to write your first tests.\n\n## Installation[​](#Installation \"Direct link to Installation\")\n\nTo get up and running with Cypress Component Testing in React, install Cypress into your project:\n\n```\nnpm install cypress --save-dev\n```\n\nOpen Cypress:\n\n![Choose Component Testing](https://docs.cypress.io/img/guides/component-testing/select-test-type.jpg)\n\nChoose Component Testing\n\nThe Cypress Launchpad will guide you through configuring your project.\n\ninfo\n\nFor a step-by-step guide on how to create a component test, refer to the [Getting Started](https://docs.cypress.io/guides/component-testing/getting-started) guide.\n\nFor usage and examples, visit the [React Examples](https://docs.cypress.io/guides/component-testing/react/examples) guide.\n\n## Framework Configuration[​](#Framework-Configuration \"Direct link to Framework Configuration\")\n\nCypress Component Testing works out of the box with [Create React App](https://create-react-app.dev/), [Next.js](https://nextjs.org/), [Vite](https://vitejs.dev/), and a custom [Webpack](https://webpack.js.org/) config. Cypress will automatically detect one of these frameworks during setup and configure them properly. The examples below are for reference purposes.\n\n### Create React App (CRA)[​](#Create-React-App-CRA \"Direct link to Create React App (CRA)\")\n\nCypress Component Testing works with CRA 4+.\n\n#### CRA Configuration[​](#CRA-Configuration \"Direct link to CRA Configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer: {      framework: 'create-react-app',      bundler: 'webpack',    },  },})\n```\n\n#### Sample Create React Apps[​](#Sample-Create-React-Apps \"Direct link to Sample Create React Apps\")\n\n*   [CRA 4 with JavaScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-cra4-js)\n*   [CRA 5 with TypeScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-cra5-ts)\n\n### Next.js[​](#Nextjs \"Direct link to Next.js\")\n\nCypress Component Testing works with Next.js 11+.\n\n#### Next.js Configuration[​](#Nextjs-Configuration \"Direct link to Next.js Configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer: {      framework: 'next',      bundler: 'webpack',    },  },})\n```\n\n#### Next.js Caveats[​](#Nextjs-Caveats \"Direct link to Next.js Caveats\")\n\nThere are some specific caveats to consider when testing Next.js [Pages](https://nextjs.org/docs/basic-features/pages) in component testing.\n\nA page component could have additional logic in its `getServerSideProps` or `getStaticProps` methods. These methods only run on the server, so they are not available to run inside a component test. Trying to test a page in a component test would result in the props being passed into the page to be undefined.\n\nWhile you could pass in props directly to the page component in a component test, that would leave these server-side methods untested. However, an end-to-end test would execute and test a page entirely.\n\nBecause of this, we recommend using E2E Testing over Component Testing for Next.js pages and Component Testing for individual components in a Next.js app.\n\n#### Sample Next.js Apps[​](#Sample-Nextjs-Apps \"Direct link to Sample Next.js Apps\")\n\n*   [Next.js 13 with TypeScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-next13-ts)\n\n### React with Vite[​](#React-with-Vite \"Direct link to React with Vite\")\n\nCypress Component Testing works with React apps that use Vite 2+ as the bundler.\n\n#### Vite Configuration[​](#Vite-Configuration \"Direct link to Vite Configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const customViteConfig = require('./customConfig')module.exports = defineConfig({  component: {    devServer: {      framework: 'react',      bundler: 'vite',      // optionally pass in vite config      viteConfig: customViteConfig,      // or a function - the result is merged with      // any `vite.config` file that is detected      viteConfig: async () => {        // ... do things ...        const modifiedConfig = await injectCustomConfig(baseConfig)        return modifiedConfig      },    },  },})\n```\n\n#### Sample React Vite Apps[​](#Sample-React-Vite-Apps \"Direct link to Sample React Vite Apps\")\n\n*   [React Vite with TypeScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-vite-ts)\n\n### React with Webpack[​](#React-with-Webpack \"Direct link to React with Webpack\")\n\nCypress Component Testing works with React apps that use Webpack 4+ as the bundler.\n\n#### Webpack Configuration[​](#Webpack-Configuration \"Direct link to Webpack Configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const webpackConfig = require('./webpack.config')module.exports = defineConfig({  component: {    devServer: {      framework: 'react',      bundler: 'webpack',      // optionally pass in webpack config      webpackConfig,      // or a function - the result is merged with any      // webpack.config that is found      webpackConfig: async () => {        // ... do things ...        const modifiedConfig = await injectCustomConfig(baseConfig)        return modifiedConfig      },    },  },})\n```\n\nIf you don't provide a webpack config, Cypress will try to infer it. If Cypress cannot do so, or you want to make modifications to your config, you can specify it via the `webpackConfig` option.\n\n#### Sample React Webpack Apps[​](#Sample-React-Webpack-Apps \"Direct link to Sample React Webpack Apps\")\n\n*   [React Webpack 5 with JavaScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-webpack5-js)\n\n*   [Cypress Component Test Driven Design](https://muratkerem.gitbook.io/cctdd/)\n*   [Cypress React Component Test Examples](https://github.com/muratkeremozcan/cypress-react-component-test-examples)",
  "title": "React Component Testing | Cypress Documentation",
  "description": "Framework Support",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/guides/web-security",
  "markdown": "# Web Security | Cypress Documentation\n\nBrowsers adhere to a strict [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). This means that browsers restrict access between `<iframes>` when their origin policies do not match.\n\nBecause Cypress works from within the browser, Cypress must be able to directly communicate with your remote application at all times. Unfortunately, browsers naturally try to prevent Cypress from doing this.\n\nTo get around these restrictions, Cypress implements some strategies involving JavaScript code, the browser's internal APIs, and network proxying to _play by the rules_ of same-origin policy. It is our goal to fully automate the application under test without you needing to modify your application's code - and we are _mostly_ able to do this.\n\n#### Examples of what Cypress does under the hood:[​](#Examples-of-what-Cypress-does-under-the-hood \"Direct link to Examples of what Cypress does under the hood:\")\n\n*   Injects [`document.domain`](https://developer.mozilla.org/en-US/docs/Web/API/Document/domain) into `text/html` pages.\n*   Proxies all HTTP / HTTPS traffic.\n*   Changes the hosted URL to match that of the application under test.\n*   Uses the browser's internal APIs for network level traffic.\n\nWhen Cypress first loads, the internal Cypress web application is hosted on a random port: something like `http://localhost:64874/__/`.\n\nAfter the first [`cy.visit()`](https://docs.cypress.io/api/commands/visit) command is issued in a test, Cypress changes its URL to match the origin of your remote application, thereby solving the first major hurdle of same-origin policy. Your application's code executes the same as it does outside of Cypress, and everything works as expected.\n\ninfo\n\n**How is HTTPS supported?**\n\nCypress does some pretty interesting things under the hood to make testing HTTPS sites work. Cypress enables you to control and stub at the network level. Therefore, Cypress must assign and manage browser certificates to be able to modify the traffic in real time.\n\nYou'll notice Chrome display a warning that the 'SSL certificate does not match'. This is normal and correct. Under the hood we act as our own CA authority and issue certificates dynamically in order to intercept requests otherwise impossible to access. We only do this for the superdomain currently under test, and bypass other traffic. That's why if you open a tab in Cypress to another host, the certificates match as expected.\n\nNote, that Cypress allows you to optionally specify CA / client certificate information for use with HTTPS sites. See [Configuring client certificates](https://docs.cypress.io/guides/references/client-certificates). If the remote server requests a client certificate for a configured URL, Cypress will supply it.\n\n## Limitations[​](#Limitations \"Direct link to Limitations\")\n\nIt's important to note that although we do our **very best** to ensure your application works normally inside of Cypress, there _are_ some limitations you need to be aware of.\n\n### Different superdomain per test requires `cy.origin` command[​](#Different-superdomain-per-test-requires-cyorigin-command \"Direct link to Different-superdomain-per-test-requires-cyorigin-command\")\n\nCypress changes its own host URL to match that of your applications. With the exception of `cy.origin`, Cypress requires that the URLs navigated to have the [same superdomain](https://docs.cypress.io/guides/guides/cross-origin-testing#Parts-of-a-URL) for the entirety of a single test.\n\nIf you attempt to visit two different superdomains, the `cy.origin` command must be used to wrap Cypress commands of the second visited domain. Otherwise, Cypress commands will timeout after the navigation and will eventually error. This is because the commands that were expected to run on the second domain are actually being run on the first domain.\n\nWithout `cy.origin`, you can visit different superdomains in _different_ tests, but not in the _same_ test. Please read our [Cross Origin Testing Guide](https://docs.cypress.io/guides/guides/cross-origin-testing) for more information.\n\nAlthough Cypress tries to enforce this limitation, it is possible for your application to bypass Cypress's ability to detect this.\n\n#### Examples of test cases that will error without the use of `cy.origin`[​](#Examples-of-test-cases-that-will-error-without-the-use-of-cyorigin \"Direct link to Examples-of-test-cases-that-will-error-without-the-use-of-cyorigin\")\n\n1.  [`.click()`](https://docs.cypress.io/api/commands/click) an `<a>` with an `href` to a different superdomain with subsequent Cypress commands being run.\n2.  [`.submit()`](https://docs.cypress.io/api/commands/submit) a `<form>` that causes your web server to redirect to you a different superdomain where additional Cypress commands are run.\n3.  Issue a JavaScript redirect in your application, such as `window.location.href = '...'`, to a different superdomain where additional Cypress commands are run.\n\nIn each of these situations, Cypress will lose the ability to automate your application and will error via command timeout unless the `cy.origin` command is used.\n\nRead on to learn about [working around these common problems](https://docs.cypress.io/guides/guides/web-security#Common-Workarounds).\n\n### Cross-origin iframes[​](#Cross-origin-iframes \"Direct link to Cross-origin iframes\")\n\nIf your site embeds an `<iframe>` that is a cross-origin frame, Cypress will not be able to automate or communicate with this `<iframe>`.\n\n#### Examples of uses for cross-origin iframes[​](#Examples-of-uses-for-cross-origin-iframes \"Direct link to Examples of uses for cross-origin iframes\")\n\n*   Embedding a Vimeo or YouTube video.\n*   Displaying a credit card form from Stripe or Braintree.\n*   Displaying an embedded login form from Auth0.\n*   Showing comments from Disqus.\n\nIt's actually _possible_ for Cypress to accommodate these situations the same way Selenium does, but you will never have _native_ access to these iframes from inside of Cypress.\n\nAs a workaround, you may be able to use [`window.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to directly communicate with these iframes and control them (if the 3rd party iframe supports it).\n\nOther than that, you'll have to wait for us to implement APIs to support this (check our [open issue](https://github.com/cypress-io/cypress/issues/136)), or you can [disable web security](https://docs.cypress.io/guides/guides/web-security#Disabling-Web-Security).\n\n### Insecure Content[​](#Insecure-Content \"Direct link to Insecure Content\")\n\nBecause of the way Cypress is designed, if you are testing an HTTPS site, Cypress will error anytime you attempt to navigate back to an HTTP site. This behavior helps highlight a _pretty serious security problem_ with your application.\n\n#### Example of accessing insecure content[​](#Example-of-accessing-insecure-content \"Direct link to Example of accessing insecure content\")\n\n```\n// Test codecy.visit('https://example.cypress.io')\n```\n\nIn your application code, you set `cookies` and store a session on the browser. Now let's imagine you have a single `insecure` link (or JavaScript redirect) in your application code.\n\n```\n{/* Application code */}<html>  <a href=\"http://example.cypress.io/page2\">Page 2</a></html>\n```\n\nCypress will immediately fail with the following test code:\n\n```\n// Test codecy.visit('https://example.cypress.io')cy.get('a').click() // will fail\n```\n\nBrowsers refuse to display insecure content on a secure page. Because Cypress initially changed its URL to match `https://example.cypress.io` when the browser followed the `href` to `http://example.cypress.io/page2`, the browser will refuse to display the contents.\n\nNow you may be thinking, _This sounds like a problem with Cypress because when I work with my application outside of Cypress it works just fine._\n\nHowever, the truth is, Cypress is exposing a _security vulnerability_ in your application, and you _want_ it to fail in Cypress.\n\n`cookies` that do not have their `secure` flag set to `true` will be sent as clear text to the insecure URL. This leaves your application vulnerable to session hijacking.\n\nThis security vulnerability exists **even if** your web server forces a `301 redirect` back to the HTTPS site. The original HTTP request was still made once, exposing insecure session information.\n\n#### The solution[​](#The-solution \"Direct link to The solution\")\n\nUpdate your HTML or JavaScript code to not navigate to an insecure HTTP page and instead only use HTTPS. Additionally make sure that cookies have their `secure` flag set to `true`.\n\nIf you're in a situation where you don't control the code, or otherwise cannot work around this, you can bypass this restriction in Cypress by [disabling web security](https://docs.cypress.io/guides/guides/web-security#Disabling-Web-Security).\n\n### Same port per test[​](#Same-port-per-test \"Direct link to Same port per test\")\n\nCypress requires that the URLs navigated to have the same port (if specified) for the entirety of a single test. This matches the behavior of the browser's normal [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\n\n## Common Workarounds[​](#Common-Workarounds \"Direct link to Common Workarounds\")\n\nLet's investigate how you might encounter cross-origin errors in your test code and break down how to work around them in Cypress.\n\n### External Navigation[​](#External-Navigation \"Direct link to External Navigation\")\n\nThe most common situation where you might encounter this error is when you click on an `<a>` that navigates to another superdomain.\n\n```\n{/* Application code that is served at `localhost:8080` */}<html>  <a href=\"https://example.cypress.io\">Cypress</a></html>\n```\n\n```\n// Test codecy.visit('http://localhost:8080') // where your web server + HTML is hostedcy.get('a').click() // browser navigates to https://cypress.iocy.get('selector').should('exist') // Cypress errors\n```\n\nWe do not recommend visiting a superdomain that you don't control in your tests which you can read more about [here](https://docs.cypress.io/guides/references/best-practices#Visiting-External-Sites)\n\nHowever, if you control this superdomain, either by owning the hosted instance or by other means, we recommend testing this superdomain with `cy.origin`.\n\n```\n// Test codecy.visit('http://localhost:8080') // where your web server + HTML is hostedcy.get('a').click() // browser navigates to https://example.cypress.iocy.origin('https://example.cypress.io', () => {  // declare cy.origin command on expected domain  cy.get('selector').should('exist') // Yup all good})\n```\n\nIf not in control of this superdomain, we recommend you test that the `href` property is correct instead of performing the navigation. This will help lead to more deterministic tests.\n\n```\n// this test verifies the behavior and will run considerably fastercy.visit('http://localhost:8080')cy.get('a').should('have.attr', 'href', 'https://example.cypress.io') // no page load!\n```\n\nIf for any reason the two above methods cannot be leveraged, [`cy.request()`](https://docs.cypress.io/api/commands/request) may be an option to verify content as [`cy.request()`](https://docs.cypress.io/api/commands/request) is _NOT bound to CORS or same-origin policy_.\n\n```\ncy.visit('http://localhost:8080')cy.get('a').then(($a) => {  // pull off the fully qualified href from the <a>  const url = $a.prop('href')  // make a cy.request to it  cy.request(url).its('body').should('include', '</html>')})\n```\n\n### Form Submission Redirects[​](#Form-Submission-Redirects \"Direct link to Form Submission Redirects\")\n\nWhen you submit a regular HTML form, the browser will follow the HTTP(s) request.\n\n```\n<!-- Application code that is served at `localhost:8080`--><html>  <form method=\"POST\" action=\"/submit\">    <input type=\"text\" name=\"email\" />    <input type=\"submit\" value=\"Submit\" />  </form></html>\n```\n\n```\ncy.visit('http://localhost:8080')cy.get('form').submit() // submit the form!\n```\n\nIf your back end server handling the `/submit` route does a `30x` redirect to a different superdomain, you will need to use the `cy.origin` command if running additional Cypress commands after submitting the form.\n\n```\n// imagine this is some node / express code// on your localhost:8080 serverapp.post('/submit', (req, res) => {  // redirect the browser to cypress.io  res.redirect('https://example.cypress.io')})\n```\n\nYou can test this with `cy.origin`, which may look like the following test case:\n\n```\ncy.visit('http://localhost:8080')cy.get('form').submit() // submit the form!cy.origin('cypress.io', () => {  cy.url().should('contain', 'cypress.io')})\n```\n\nA common use case for this is Single sign-on (SSO), OAuth, Open ID Connect (OIDC), or Authentication as a Service platforms, such as Auth0, Okta, Amazon Cognito, and others.\n\nIn these situations, if controlling the domain under test, we recommend that you test these with `cy.origin`.\n\n```\ncy.visit('http://localhost:8080')cy.get('#login').click() // click a login button, which takes us to our authentication page.cy.origin('cypress.io', () => {  cy.get('#username').type('User1')  cy.get('#password').type('Password123')  // prompts a sign in that redirects to http://localhost:8080 with a token, cookie, or other means of acknowledgement  cy.get('button').contains('Sign In').click()})cy.get('#user-name-welcome').should('equal', 'Welcome, User1!')\n```\n\nIf for any reason you cannot leverage `cy.origin`, programmatic authentication is still an option. In this situation you may `POST` to a different server and are redirected elsewhere (typically with the session token in the URL). If that's the case, you can still test this behavior with [`cy.request()`](https://docs.cypress.io/api/commands/request).\n\nIn fact we can likely bypass the initial visit altogether and `POST` directly to your SSO server.\n\n```\ncy.request('POST', 'https://sso.corp.com/auth', {  username: 'foo',  password: 'bar',}).then((response) => {  // pull out the location redirect  const loc = response.headers['Location']  // parse out the token from the url (assuming its in there)  const token = parseOutMyToken(loc)  // do something with the token that your web application expects  // likely the same behavior as what your SSO does under the hood  // assuming it handles query string tokens like this  cy.visit('http://localhost:8080?token=' + token)  // if you don't need to work with the token you can sometimes  // visit the location header directly  cy.visit(loc)})\n```\n\n### JavaScript Redirects[​](#JavaScript-Redirects \"Direct link to JavaScript Redirects\")\n\nWhen we say JavaScript Redirects we are talking about any kind of code that does something like this:\n\n```\n{/* Application code that is served at `localhost:8080` */}<html>  <button id=\"nav\">Navigate to Cypress example</button>  <script>    document.querySelector('#nav').addEventListener('click', () => {      window.location.href = 'https://example.cypress.io'    })  </script></html>\n```\n\nYou can test this with `cy.origin`, which may look like the following test case:\n\n```\ncy.visit('http://localhost:8080')cy.get('#nav').submit() // trigger a javascript redirect!cy.origin('https://example.cypress.io', () => {  cy.url().should('contain', 'cypress.io')})\n```\n\n### Cross-Origin Errors with `cy.origin`[​](#Cross-Origin-Errors-with-cyorigin \"Direct link to Cross-Origin-Errors-with-cyorigin\")\n\nSometimes, when using `cy.origin` and especially with websites that are not under your immediate test control, cross-origin errors may still tend to creep up. We don't recommend visiting or interacting with sites you [do not control](https://docs.cypress.io/guides/references/best-practices#Visiting-External-Sites). However, if this is necessary, most of these issues can usually be remedied by applying\\` the [modify obstructive third-party code](https://docs.cypress.io/guides/references/experiments#Configuration) experimental flag or by [disabling web security](https://docs.cypress.io/guides/guides/web-security#Disabling-Web-Security).\n\n## Disabling Web Security[​](#Disabling-Web-Security \"Direct link to Disabling Web Security\")\n\nSo if you cannot work around any of the issues using the suggested workarounds above, including [modifying obstructive third-party code](https://docs.cypress.io/guides/guides/web-security#Modifying-Obstructive-Third-Party-Code) with `cy.origin`, you may want to disable web security.\n\nOne last thing to consider here is that every once in a while we discover bugs in Cypress that lead to cross-origin errors that can otherwise be fixed. If you think you're experiencing a bug, [open an issue](https://github.com/cypress-io/cypress/issues/new/choose).\n\ncaution\n\n**Chrome only**\n\nDisabling web security is only supported in Chrome-based browsers. Settings in `chromeWebSecurity` will have no effect in other browsers. We will log a warning in this case.\n\n![chromeWebSecurity warning in stdout](https://docs.cypress.io/img/guides/web-security/chrome-web-security-stdout-warning.jpg)\n\nIf you rely on disabling web security, you will not be able to run tests on browsers that do not support this feature.\n\n### Set `chromeWebSecurity` to `false`[​](#Set-chromeWebSecurity-to-false \"Direct link to Set-chromeWebSecurity-to-false\")\n\nSetting `chromeWebSecurity` to `false` in Chrome-based browsers allows you to do the following:\n\n*   Display insecure content\n*   Navigate to any superdomain without cross-origin errors with or without `cy.origin`\n*   Access cross-origin iframes that are embedded in your application\n\nStill here? That's cool, let's disable web security!\n\n#### Set `chromeWebSecurity` to `false` in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration)[​](#Set-chromeWebSecurity-to-false-in-the-Cypress-configuration \"Direct link to Set-chromeWebSecurity-to-false-in-the-Cypress-configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  chromeWebSecurity: false,})\n```\n\n## Modifying Obstructive Third Party Code[​](#Modifying-Obstructive-Third-Party-Code \"Direct link to Modifying Obstructive Third Party Code\")\n\nCypress today has the concept of [modifying obstructive code](https://docs.cypress.io/guides/references/configuration#modifyObstructiveCode), which is code that may interfere with Cypress being able to run your web application. The `experimentalModifyObstructiveThirdPartyCode` flag provides the same benefits of the [modifyObstructiveCode](https://docs.cypress.io/guides/references/configuration#modifyObstructiveCode) flag, but additionally applies it to third-party `.js` and `.html` that is being either loaded or navigated to inside your application. In addition to this, this flag also does the following:\n\n*   Adjusts the User Agent in Electron to appear more chrome-like. This option can be overridden with the [userAgent](https://docs.cypress.io/guides/references/configuration#Browser) config option.\n*   Removes [Subresource Integrity (SRI)](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity) from modified scripts as they will not execute otherwise.\n*   Updates the `Sec-Fetch-Dest` Metadata header from `iframe` to `document` in cases where requests come from the application under test.\n\nWant to enable `experimentalModifyObstructiveThirdPartyCode`? Let's do it!\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  experimentalModifyObstructiveThirdPartyCode: true,})\n```",
  "title": "Web Security | Cypress Documentation",
  "description": "Browsers adhere to a strict",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/react/examples",
  "markdown": "# React Examples | Cypress Documentation\n\n## Mounting Components[​](#Mounting-Components \"Direct link to Mounting Components\")\n\n### Mounting a Component[​](#Mounting-a-Component \"Direct link to Mounting a Component\")\n\nThe first step in testing a component is to mount it. This renders the component into a testbed and enable's the use of the Cypress API to select elements, interact with them, and run assertions.\n\nTo mount a React component, import the component into your spec and pass the component to the `cy.mount` command:\n\n```\nimport { Stepper } from './stepper'it('mounts', () => {  cy.mount(<Stepper />)  //Stepper should have initial count of 0 (default)  cy.get('[data-cy=counter]').should('have.text', '0')})\n```\n\n### Passing Data to a Component[​](#Passing-Data-to-a-Component \"Direct link to Passing Data to a Component\")\n\nYou can pass props to a component by setting them on the JSX passed into `cy.mount()`:\n\n```\nit('mounts', () => {  cy.mount(<Stepper initial={100} />)  //Stepper should have initial count of 100  cy.get('[data-cy=counter]').should('have.text', '100')})\n```\n\n### Testing Event Handlers[​](#Testing-Event-Handlers \"Direct link to Testing Event Handlers\")\n\nPass a Cypress [spy](https://docs.cypress.io/guides/guides/stubs-spies-and-clocks#Spies) to an event prop and validate it was called:\n\n```\nit('clicking + fires a change event with the incremented value', () => {  const onChangeSpy = cy.spy().as('onChangeSpy')  cy.mount(<Stepper onChange={onChangeSpy} />)  cy.get('[data-cy=increment]').click()  cy.get('@onChangeSpy').should('have.been.calledWith', 1)})\n```\n\n## Custom Mount Commands[​](#Custom-Mount-Commands \"Direct link to Custom Mount Commands\")\n\n### Customizing `cy.mount()`[​](#Customizing-cymount \"Direct link to Customizing-cymount\")\n\nBy default, `cy.mount()` is a simple passthrough to `mount()`, however, you can customize `cy.mount()` to fit your needs. For instance, if you are using providers or other global app-level setups in your React app, you can configure them here.\n\nBelow are a few examples that demonstrate using a custom mount command. These examples can be adjusted for most other providers that you will need to support.\n\n### React Router[​](#React-Router \"Direct link to React Router\")\n\nIf you have a component that consumes a hook or component from [React Router](https://reactrouter.com/), make sure the component has access to a React Router provider. Below is a sample mount command that uses `MemoryRouter` to wrap the component.\n\n*   cypress/support/component.jsx\n*   Typings\n\n```\nimport { mount } from 'cypress/react'import { MemoryRouter } from 'react-router-dom'Cypress.Commands.add('mount', (component, options = {}) => {  const { routerProps = { initialEntries: ['/'] }, ...mountOptions } = options  const wrapped = <MemoryRouter {...routerProps}>{component}</MemoryRouter>  return mount(wrapped, mountOptions)})\n```\n\nTo set up certain scenarios, pass in props that will get passed to `MemoryRouter` in the options. Below is an example test that ensures an active link has the correct class applied to it by initializing the router with `initialEntries` pointed to a particular route:\n\n```\nimport { Navigation } from './Navigation'it('home link should be active when url is \"/\"', () => {  // No need to pass in custom initialEntries as default url is '/'  cy.mount(<Navigation />)  cy.get('a').contains('Home').should('have.class', 'active')})it('login link should be active when url is \"/login\"', () => {  cy.mount(<Navigation />, {    routerProps: {      initialEntries: ['/login'],    },  })  cy.get('a').contains('Login').should('have.class', 'active')})\n```\n\n### Redux[​](#Redux \"Direct link to Redux\")\n\nTo use a component that consumes state or actions from a [Redux](https://react-redux.js.org/) store, create a `mount` command that will wrap your component in a Redux Provider:\n\n*   cypress/support/component.jsx\n*   Typings\n\n```\nimport { mount } from 'cypress/react'import { Provider } from 'react-redux'import { getStore } from '../../src/store'Cypress.Commands.add('mount', (component, options = {}) => {  // Use the default store if one is not provided  const { reduxStore = getStore(), ...mountOptions } = options  const wrapped = <Provider store={reduxStore}>{component}</Provider>  return mount(wrapped, mountOptions)})\n```\n\nThe options param can have a store that is already initialized with data:\n\n```\nimport { getStore } from '../redux/store'import { setUser } from '../redux/userSlice'import { UserProfile } from './UserProfile'it('User profile should display user name', () => {  const user = { name: 'test person' }  // getStore is a factory method that creates a new store  const store = getStore()  // setUser is an action exported from the user slice  store.dispatch(setUser(user))  cy.mount(<UserProfile />, { reduxStore: store })  cy.get('div.name').should('have.text', user.name)})\n```\n\ninfo\n\nThe `getStore` method is a factory method that initializes a new Redux store. It is important that the store be initialized with each new test to ensure changes to the store don't affect other tests.",
  "title": "React Examples | Cypress Documentation",
  "description": "Mounting Components",
  "languageCode": "en"
},
{
  "url": "https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command",
  "markdown": "# How to Run Cypress in Docker With a Single Command\n\nIf you are a Node.js developer, [installing Cypress](https://on.cypress.io/installing-cypress?ref=cypress-io.ghost.io) as a dev dependency in your `package.json` file or even via direct download seems simple enough. Yet for developers working in other languages like Python or Go, using npm can be an obstacle. We often hear this question from developers:\n\n> Why don’t you have a Docker image with Cypress pre-installed?\n\nHaving an image with both OS dependencies and the Cypress test runner ready to go seems to be very convenient. **We have listened and created a Docker image with Cypress installed.** It is called `cypress/included` and is tagged with the version of Cypress installed in the image. For now, we'll use the image for the current Cypress version as of this writing - the `cypress/included:3.2.0` image. We create new images for every Cypress version released. The image is built on top of the `cypress/base:12.1.0` image with Node 12.1.0 included. You can find our official Docker images in the [cypress-docker-images](https://github.com/cypress-io/cypress-docker-images?ref=cypress-io.ghost.io) repository and on [Docker hub](https://hub.docker.com/u/cypress?ref=cypress-io.ghost.io).\n\nYou can find the examples below in the repo [demo-docker-cypress-included](https://github.com/bahmutov/demo-docker-cypress-included?ref=cypress-io.ghost.io).\n\n## [](#Running-headless-tests \"Running headless tests\")Running headless tests\n\nIf you have Cypress end-to-end tests, you can run them using the complete image. For example, if your project structure looks like this:\n\n```\ncypress/\n  integration/\n    spec.js\ncypress.json\n```\n\nThen you can execute your Cypress tests using the following shell command:\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e cypress/included:3.2.0\n\n==============================================================================\n\n  (Run Starting)\n\n  ┌──────────────────────────────────────────────────────────────────────────┐\n  │ Cypress:    3.2.0                                                        │\n  │ Browser:    Electron 59 (headless)                                       │\n  │ Specs:      1 found (spec.js)                                            │\n  └──────────────────────────────────────────────────────────────────────────┘\n\n──────────────────────────────────────────────────────────────────────────────\n\n  Running: spec.js...                                                 (1 of 1)\n\n\n  Cypress TodoMVC test\n    ✓ adds 2 todos (1351ms)\n\n  ...\n```\n\n```\nExplanation of the \"docker run\" command line arguments\n\n -it          = interactive terminal\n -v $PWD:/e2e = map current folder to /e2e inside the container\n -w /e2e      = set working directy to /e2e\n```\n\nNothing to install, just write your spec files using your favorite editor and run them.\n\n## [](#Commands-and-options \"Commands and options\")Commands and options\n\nThe image `cypress/included:3.2.0` has the entrypoint set to `cypress run`, so you don’t need to type it when running our Docker image. If you want a different command, you can change the entrypoint and then pass any additional arguments after the image name.\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e --entrypoint=cypress cypress/included:3.2.0 help\n\n  Usage: cypress [options] [command]\n\n  Options:\n\n    -v, --version      prints Cypress version\n    -h, --help         output usage information\n\n  Commands:\n\n    help               Shows CLI help and exits\n    version            prints Cypress version\n    run [options]      Runs Cypress tests from the CLI without the GUI\n    open [options]     Opens Cypress in the interactive GUI.\n    install [options]  Installs the Cypress executable matching this package's version\n    verify             Verifies that Cypress is installed correctly and executable\n    cache [options]    Manages the Cypress binary cache\n```\n\nYou can also pass environment variables into the container to control Cypress behavior. For example, the boolean config option `video` controls if the video of the run is recorded. It is `true` by default, but you can disable it via an environment variable.\n\n```\n$ CYPRESS_VIDEO=false\n$ docker run -it -v $PWD:/e2e -w /e2e -e CYPRESS_VIDEO cypress/included:3.2.0\n```\n\nIf you want to record the test run on the [Cypress Dashboard](https://on.cypress.io/dashboard-service?ref=cypress-io.ghost.io) to review later, you need to pass the record key and the `--record` CLI flag.\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e \\\n  -e CYPRESS_RECORD_KEY cypress/included:3.2.0 --record\n```\n\n## Container info\n\nTo show the information about the operating system and pre-installed browsers, you can execute [cypress info](https://on.cypress.io/command-line?ref=cypress-io.ghost.io#cypress-info) command:\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e --entrypoint=cypress cypress/included:6.2.1 info\nDisplaying Cypress info...\n\nDetected 2 browsers installed:\n\n1. Chrome\n  - Name: chrome\n  - Channel: stable\n  - Version: 87.0.4280.66\n  - Executable: google-chrome\n\n2. Firefox\n  - Name: firefox\n  - Channel: stable\n  - Version: 82.0\n  - Executable: firefox\n\nNote: to run these browsers, pass <name>:<channel> to the '--browser' field\n\nExamples:\n- cypress run --browser firefox\n- cypress run --browser chrome\n\nLearn More: https://on.cypress.io/launching-browsers\n\nProxy Settings: none detected\nEnvironment Variables:\nCYPRESS_CACHE_FOLDER: /root/.cache/Cypress\n\nApplication Data: /root/.config/cypress/cy/development\nBrowser Profiles: /root/.config/cypress/cy/development/browsers\nBinary Caches: /root/.cache/Cypress\n\nCypress Version: 6.2.1\nSystem Platform: linux (Debian - 10.5)\nSystem Memory: 2.09 GB free 534 MB\n```\n\nWe can see both Chrome and Firefox browsers pre-installed in the `cypress/included:6.2.1` image. Let's run our tests using Firefox browser for example:\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e cypress/included:6.2.1 --browser firefox\n\n========================================================================\n\n  (Run Starting)\n\n  ┌──────────────────────────────────────────────────────────────────────┐\n  │ Cypress:    6.2.1                                                    │\n  │ Browser:    Firefox 82                                               │\n  │ Specs:      1 found (spec.js)                                        │\n  └──────────────────────────────────────────────────────────────────────┘\n  ...\n```\n\n## [](#Interactive-mode \"Interactive mode\")Interactive mode\n\nRunning the tests inside a Docker container is nice, but it is missing my favorite Cypress feature: its interactive [Test Runner](https://on.cypress.io/test-runner?ref=cypress-io.ghost.io) with the Command Log, time-traveling debugger and live view of what is going on during the test! Typically, you would execute `cypress open` to open the Test Runner in interactive mode, but how do we see it if Cypress opens inside a Docker container?\n\nIf you want to see Cypress in interactive mode, you need to forward the XVFB messages from Cypress out of the Docker container into an X11 server running on the host machine. I have done this on my Mac; other operating systems might require different commands.\n\nI have installed an [XQuartz](https://www.xquartz.org/?ref=cypress-io.ghost.io) X11 server following the instructions at [Running GUI applications using Docker for Mac](https://sourabhbajaj.com/blog/2017/02/07/gui-applications-docker-mac/?ref=cypress-io.ghost.io).\n\nThen I grabbed the IP of the host machine and added it to the allowed X11 hosts.\n\n```\n$ IP=$(ipconfig getifaddr en0)\n$ /usr/X11/bin/xhost + $IP\n10.0.0.124 being added to access control list\n```\n\nNow you can execute a `cypress open` command passing `DISPLAY` and the X11 socket file to the container:\n\n```\nDISPLAY=$IP:0\ndocker run -it \\\n  -v $PWD:/e2e \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  -w /e2e \\\n  -e DISPLAY \\\n  --entrypoint cypress \\\n  cypress/included:3.2.0 open --project .\n```\n\n```\nExplanation of the \"docker run\" command line arguments:\n\n -it                  = interactive terminal\n -v $PWD:/e2e         = map current folder to /e2e inside the container\n -v /tmp/.X11-unix:/tmp/.X11-unix = map X11 socket file to communicate\n -w /e2e              = set working directy to /e2e\n -e DISPLAY           = pass environment variable DISPLAY to the container\n --entrypoint cypress = run \"cypress\" command\n    with arguments AFTER Docker image name\n    in our case they are \"--project .\" to point globally installed Cypress\n    at the current working directory /e2e inside the container\n```\n\nThe Docker container starts and you can see the full interactive Cypress Test Runner open. You can watch the test run, interact with the Command Log, open DevTools, etc. Even spec file watching is working - if you edit and save the `cypress/integration/spec.js` file, the Test Runner picks up the change and reruns the tests.\n\n![](https://cypress-io.ghost.io/blog/content/images/2019/05/cy-open.6a6565c4-1.png)\n\n**Debugging tip:** if Cypress shows an error `Gtk-WARNING **: cannot open display:...` make sure X11 server allows connections over the network from the Docker container. Run `xhost` command in the terminal to see if it has the IP address you have added previous with `xhost + $IP`.\n\n## [](#Docker-compose \"Docker compose\")Docker compose\n\nUsing [docker-compose](https://docs.docker.com/compose/?ref=cypress-io.ghost.io) to spawn services and run end-to-end tests is very convenient. We have coded several examples that show how to run a web application and Cypress tests in two Docker containers:\n\n*   [cypress-example-docker-compose](https://github.com/cypress-io/cypress-example-docker-compose?ref=cypress-io.ghost.io)\n*   [cypress-open-from-docker-compose](https://github.com/bahmutov/cypress-open-from-docker-compose?ref=cypress-io.ghost.io) which is a fork of [mtlynch/hello-world-cypress](https://github.com/mtlynch/hello-world-cypress?ref=cypress-io.ghost.io)\n\nTo support both `cypress run` and `cypress open` settings we recommend:\n\n*   placing the default settings for `cypress run` into `docker-compose.yml` file, for example, like this\n\n```\n# e2e/docker-compose.yml from repo\n# https://github.com/bahmutov/cypress-open-from-docker-compose\nversion: '3.2'\nservices:\n  # this is the web application we are going to test\n  sentimentalyzer:\n    build: ../\n    environment:\n      - PORT=8123\n  # Cypress container\n  cypress:\n    # the Docker image to use from https://github.com/cypress-io/cypress-docker-images\n    image: \"cypress/included:3.2.0\"\n    depends_on:\n      - sentimentalyzer\n    environment:\n      # pass base url to test pointing at the web application\n      - CYPRESS_baseUrl=http://sentimentalyzer:8123\n    # share the current folder as volume to avoid copying\n    working_dir: /e2e\n    volumes:\n      - ./:/e2e\n```\n\nYou can start the application, run the headless tests and close the services with command:\n\n```\ndocker-compose up --exit-code-from cypress\n```\n\n*   place the X11 configuration that enables `cypress open` Test Runner to show on the host machine in a separate YAML file that _extends_ the above file. The second file only has additional environment variables and volumes\n\n```\nversion: '3.2'\n# e2e/cy-open.yml from repo\n# https://github.com/bahmutov/cypress-open-from-docker-compose\nservices:\n  cypress:\n    # pass custom command to start Cypress otherwise it will use the entrypoint\n    # specified in the Cypress Docker image.\n    # also pass \"--project <folder>\" so that when Cypress opens\n    # it can find file \"cypress.json\" and show integration specs\n    # https://on.cypress.io/command-line#cypress-open\n    entrypoint: cypress open --project /e2e\n    environment:\n      # get the IP address of the host machine and allow X11 to accept\n      # incoming connections from that IP address\n      #   IP=$(ipconfig getifaddr en0)\n      #   /usr/X11/bin/xhost + $IP\n      # then pass the environment variable DISPLAY to show Cypress GUI on the host system\n      #   DISPLAY=$IP:0\n      - DISPLAY\n    volumes:\n      # for Cypress to communicate with the X11 server pass this socket file\n      # in addition to any other mapped volumes\n      - /tmp/.X11-unix:/tmp/.X11-unix\n```\n\nTo start in the interactive mode we need to pass both filenames to the docker\n\n```\ndocker-compose -f docker-compose.yml -f cy-open.yml up --exit-code-from cypress\n```\n\nYou should see the Test Runner and be able to run tests\n\n![](https://cypress-io.ghost.io/blog/content/images/2019/05/compose.bda19c6f-1.png)\n\n## Testing site on host\n\nLet's consider another common situation: running the Test Runner inside a Docker container, while running the website on the host outside the container. First, start the website on the host machine\n\n```\n$ npm start\n# website is running at http://localhost:2222\n```\n\nNow start the Test Runner but instead of `localhost` use a special Docker domain that points back at the host machine:\n\n```\nDISPLAY=$IP:0\ndocker run -it \\\n  -v $PWD:/e2e \\\n  -w /e2e \\\n  -e DISPLAY \\\n  --entrypoint cypress \\\n  cypress/included:3.2.0 open --project . \\\n  --config baseUrl=http://host.docker.internal:2222\n```\n\n```\nExplanation of the \"docker run\" command line arguments:\n\n -it                  = interactive terminal\n -v $PWD:/e2e         = map current folder to /e2e inside the container\n -w /e2e              = set working directy to /e2e\n -e DISPLAY           = pass environment variable DISPLAY to the container\n --entrypoint cypress = run \"cypress\" command\n    with arguments AFTER Docker image name\n    in our case they are \"--project .\" to point globally installed Cypress\n    at the current working directory /e2e inside the container\n--config baseUrl=...  = replace the default \"baseUrl\" with \n    special domain pointing to the website running on the host machine\n```\n\nRunning the Test Runner in a Docker container allows us to debug font and encoding issues. For example the problem of [missing Chinese characters](https://github.com/cypress-io/cypress-docker-images/issues/109?ref=cypress-io.ghost.io) in the `cypress-documentation` translation is only visible on CI or inside a Docker container.\n\n![](https://cypress-io.ghost.io/blog/content/images/2019/05/Screen-Shot-2019-05-16-at-11.52.02-AM.png)\n\nMissing Chinese characters when running the Test Runner inside the Docker container\n\n## Start testing\n\nThat should give you all you need to start using Cypress in Docker for all your testing needs. If you were on the fence before due to compatibility concerns, worry no more, and download the Cypress app [here](https://www.cypress.io/install/?ref=cypress-io.ghost.io).\n\n## [](#More-information \"More information\")More information\n\n*   [Cypress Docker documentation page](https://on.cypress.io/docker?ref=cypress-io.ghost.io)\n*   Official [cypress-docker-images](https://github.com/cypress-io/cypress-docker-images?ref=cypress-io.ghost.io)\n*   [demo-docker-cypress-included](https://github.com/bahmutov/demo-docker-cypress-included?ref=cypress-io.ghost.io)\n*   [cypress-open-from-docker-compose](https://github.com/bahmutov/cypress-open-from-docker-compose?ref=cypress-io.ghost.io) example\n\nIf you have any feedback for this approach or suggestions on how to make running Cypress even simpler for your team, please let us know. Open an issue in the [cypress-io/cypress-docker-images](https://github.com/cypress-io/cypress-docker-images/issues?ref=cypress-io.ghost.io) repo or in the main [cypress-io/cypress](https://github.com/cypress-io/cypress/issues?ref=cypress-io.ghost.io) repo (and do not forget to give it a ⭐️!)\n\n### Bonus\n\nIf you want to run Cypress Test Runner inside a Docker container, while the web application is running on the host machine, read how to do this in [\"Run Cypress included from Docker container\"](https://glebbahmutov.com/blog/run-cypress-included-from-docker-container/?ref=cypress-io.ghost.io)\n\n### Bonus 2\n\nYou can use `cypress/included` Docker image to run tests without installing any dependencies on GH Actions CI. See repository [](https://github.com/bahmutov/cypress-gh-action-included?ref=cypress-io.ghost.io)[cypress-gh-action-included](https://github.com/bahmutov/cypress-gh-action-included?ref=cypress-io.ghost.io) and its workflow file:\n\n```\nname: included\non: [push]\njobs:\n  cypress-run:\n    runs-on: ubuntu-latest\n    # Docker image with Cypress pre-installed\n    # https://github.com/cypress-io/cypress-docker-images/tree/master/included\n    container: cypress/included:3.8.3\n    steps:\n      - uses: actions/checkout@v1\n      - run: cypress run\n```",
  "title": "How to Run Cypress in Docker With a Single Command",
  "description": "We’ve created a Docker image with Cypress installed. Now all you have to do to run Cypress in Docker is download it and punch in the Docker run command.",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/continuous-integration/introduction",
  "markdown": "# Introduction | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   An overview of Continuous Integration\n*   How to run Cypress tests in Continuous Integration\n*   How to configure Cypress in various CI Providers\n*   How to record tests to Cypress Cloud\n*   How to run tests in parallel on CI\n\n## What is Continuous Integration?[​](#What-is-Continuous-Integration \"Direct link to What is Continuous Integration?\")\n\n## Setting up CI[​](#Setting-up-CI \"Direct link to Setting up CI\")\n\n### Basics[​](#Basics \"Direct link to Basics\")\n\nRunning Cypress in Continuous Integration is almost the same as running it locally in your terminal. You generally only need to do two things:\n\n1.  **Install Cypress**\n\n```\nnpm install cypress --save-dev\n```\n\n2.  **Run Cypress**\n\nDepending on which CI provider you use, you may need a config file. You'll want to refer to your CI provider's documentation to know where to add the commands to install and run Cypress. For more configuration examples check out our [examples](https://docs.cypress.io/guides/continuous-integration/ci-provider-examples).\n\n### Boot your server[​](#Boot-your-server \"Direct link to Boot your server\")\n\n#### Challenges[​](#Challenges \"Direct link to Challenges\")\n\nTypically you will need to boot a local server prior to running Cypress. When you boot your web server, it runs as a **long running process** that will never exit. Because of this, you'll need it to run in the **background** - else your CI provider will never move onto the next command.\n\nBackgrounding your server process means that your CI provider will continue to execute the next command after executing the signal to start your server.\n\nMany people approach this situation by running a command like the following:\n\n```\nnpm start & cypress run // Do not do this\n```\n\nThe problem is - what happens if your server takes time to boot? There is no guarantee that when the next command runs (`cypress run`) that your web server is up and available. So your Cypress test may start and try to visit your local server before it is ready to be visited.\n\n#### Solutions[​](#Solutions \"Direct link to Solutions\")\n\nLuckily, there are some solutions for this. Instead of introducing arbitrary waits (like `sleep 20`) you can use a better option.\n\n**`wait-on` module**\n\nUsing the [wait-on](https://github.com/jeffbski/wait-on) module, you can block the `cypress run` command from executing until your server has booted.\n\n```\nnpm start & wait-on http://localhost:8080\n```\n\ninfo\n\nMost CI providers will automatically kill background processes so you don't have to worry about cleaning up your server process once Cypress finishes.\n\nHowever, if you're running this script locally you'll have to do a bit more work to collect the backgrounded PID and then kill it after `cypress run`.\n\n**`start-server-and-test` module**\n\nIf the server takes a very long time to start, we recommend trying the [start-server-and-test](https://github.com/bahmutov/start-server-and-test) module.\n\n```\nnpm install start-server-and-test --save-dev\n```\n\nIn your `package.json` scripts, pass the command to boot your server, the url your server is hosted on and your Cypress test command.\n\n```\n{  ...  \"scripts\": {    \"start\": \"my-server -p 3030\",    \"cy:run\": \"cypress run\",    \"test\": \"start-server-and-test start http://localhost:3030 cy:run\"  }}\n```\n\nIn the example above, the `cy:run` command will only be executed when the URL `http://localhost:3030` responds with an HTTP status code of 200. The server will also shut down when the tests complete.\n\n#### Gotchas[​](#Gotchas \"Direct link to Gotchas\")\n\nWhen [working with `webpack-dev-server`](https://github.com/bahmutov/start-server-and-test#note-for-webpack-dev-server-users) that does not respond to `HEAD` requests, use an explicit `GET` method to ping the server like this:\n\n```\n{  \"scripts\": {    \"test\": \"start-server-and-test start http-get://localhost:3030 cy:run\"  }}\n```\n\nWhen working with local `https` in webpack, set an environment variable to allow local certificate:\n\n```\n{  \"scripts\": {    \"start\": \"my-server -p 3030 --https\",    \"cy:run\": \"cypress run\",    \"cy:ci\": \"START_SERVER_AND_TEST_INSECURE=1 start-server-and-test start https-get://localhost:3030 cy:run\"  }}\n```\n\n### Record tests[​](#Record-tests \"Direct link to Record tests\")\n\nCypress can record your tests and make the results available in [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction). Cloud gives you access to recorded tests - typically when running Cypress tests from your [CI provider](https://docs.cypress.io/guides/continuous-integration/introduction) - and provides you insight into what happened when your tests ran.\n\n#### Recording tests allow you to:[​](#Recording-tests-allow-you-to \"Direct link to Recording tests allow you to:\")\n\n*   See the number of failed, pending and passing tests.\n*   Get the entire stack trace of failed tests.\n*   View screenshots taken when tests fail and when using [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot).\n*   Watch a video of your entire test run or a clip at the point of test failure when the `video` configuration is enabled.\n*   See which machines ran each test when [parallelized](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization).\n\n#### To record tests:[​](#To-record-tests \"Direct link to To record tests:\")\n\n1.  [Set up your project to record](https://docs.cypress.io/guides/cloud/getting-started#Setup)\n2.  [Pass the `--record` flag to `cypress run`](https://docs.cypress.io/guides/guides/command-line#cypress-run) within CI.\n\n```\ncypress run --record --key=abc123\n```\n\n[Read the full guide on the Cypress Cloud.](https://docs.cypress.io/guides/cloud/introduction)\n\n### Run tests in parallel[​](#Run-tests-in-parallel \"Direct link to Run tests in parallel\")\n\nCypress can run tests in parallel across multiple machines.\n\nYou'll want to refer to your CI provider's documentation on how to set up multiple machines to run in your CI environment.\n\nOnce multiple machines are available within your CI environment, you can pass the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag to have your tests run in parallel.\n\n```\ncypress run --record --key=abc123 --parallel\n```\n\n[Read the full guide on parallelization.](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization)\n\n### Official Cypress Docker Images[​](#Official-Cypress-Docker-Images \"Direct link to Official Cypress Docker Images\")\n\nCI providers, such as [GitHub Actions](https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container) and [CircleCI](https://circleci.com/docs/executor-intro/#docker), allow workflows to run using [Docker container images](https://docs.docker.com/guides/docker-concepts/the-basics/what-is-a-container/).\n\nCypress supports the use of [Docker](https://docs.docker.com/guides/docker-overview/) through the provisioning of official [Cypress Docker images](https://github.com/cypress-io/cypress-docker-images). Images are Linux-based and support `Linux/amd64` and `Linux/arm64` platforms.\n\nCypress Docker images provide a consistent environment tailored for use with Cypress. By choosing an appropriate Cypress Docker image, you determine the exact environment that your Cypress tests run in. This allows you to shield your workflows from version updates made by your CI provider, for instance if they update Node.js or browser versions.\n\n[Cypress Docker images](https://github.com/cypress-io/cypress-docker-images) are available from the repositories:\n\n*   [Docker Hub](https://hub.docker.com/u/cypress)\n*   [Amazon ECR (Elastic Container Registry) Public Gallery](https://gallery.ecr.aws/cypress-io)\n\n#### Cypress Docker variants[​](#Cypress-Docker-variants \"Direct link to Cypress Docker variants\")\n\n*   [cypress/base](https://github.com/cypress-io/cypress-docker-images/tree/master/base) is the entry-level Cypress Docker image. It contains a complete Linux (Debian) operating system, together with the [prerequisite operating system packages](https://docs.cypress.io/guides/getting-started/installing-cypress#UbuntuDebian) for Cypress, Node.js, npm and Yarn v1 Classic. An image `<tag>` gives you the choice of Node.js version.\n    \n*   [cypress/browsers](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers) builds on the [cypress/base](https://github.com/cypress-io/cypress-docker-images/tree/master/base) image. For `Linux/amd64` images it adds Google Chrome, Mozilla Firefox and Microsoft Edge browsers. A corresponding image `<tag>` allows selection of the combined Node.js and browser versions. Currently `Linux/arm64` images do **not** contain browsers.\n    \n*   [cypress/included](https://github.com/cypress-io/cypress-docker-images/tree/master/included) builds on the [cypress/browsers](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers) image. It adds a fixed version of Cypress, globally installed by npm. A short-form image `<tag>` selects the version of Cypress. A corresponding long-form `<tag>` selects the version of Cypress and documents the combined Node.js and browser versions.\n    \n\n[cypress/base](https://github.com/cypress-io/cypress-docker-images/tree/master/base) allows testing in the Electron browser, built-in to Cypress. [cypress/browsers](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers) adds the capability to test against Chrome, Firefox and Edge. These are the primary images for use in CI workflows. [cypress/included](https://github.com/cypress-io/cypress-docker-images/tree/master/included) is intended to support local testing. It can also be used in CI workflows.\n\n*   [cypress/factory](https://github.com/cypress-io/cypress-docker-images/tree/master/factory) provides the base operating system image and allows individual selection of other components by version. It is used to generate customized Docker images.\n\n#### CI Docker examples[​](#CI-Docker-examples \"Direct link to CI Docker examples\")\n\nYou can find examples that use Cypress Docker images in CI on the documentation page [CI Provider Examples](https://docs.cypress.io/guides/continuous-integration/ci-provider-examples) and in the example repository [cypress-example-kitchensink](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/README.md).\n\nThe following individual workflows show Cypress Docker images being used in CircleCI\n\n*   [Real World App - CircleCI](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.circleci/config.yml)\n\nand in GitHub Actions\n\n*   [Real World App - GitHub Actions](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.github/workflows/main.yml)\n*   [cypress-docker-images - GitHub Actions](https://github.com/cypress-io/cypress-docker-images/blob/master/.github/workflows/example-cypress-github-action.yml)\n\n## Advanced setup[​](#Advanced-setup \"Direct link to Advanced setup\")\n\n### Machine requirements[​](#Machine-requirements \"Direct link to Machine requirements\")\n\nHardware requirements to run Cypress depend how much memory the browser, the application under test, and the server (if running it locally) need to run the tests without crashing. Visit our [System Requirements](https://docs.cypress.io/guides/getting-started/installing-cypress#System-requirements) guide for minimum hardware recommendations.\n\n**Some signs that your machine may not have enough CPU or memory to run Cypress:**\n\n*   The recorded video artifacts have random pauses or dropped frames.\n*   [Debug logs of the CPU and memory](https://docs.cypress.io/guides/references/troubleshooting#Log-memory-and-CPU-usage) frequently show CPU percent above 100%.\n*   The browser crashes.\n\nYou can see the total available machine memory and the current free memory by running the [`cypress info`](https://on.cypress.io/command-line#cypress-info) command.\n\n```\nnpx cypress info...Cypress Version: 13.6.6 (stable)System Platform: linux (Debian - 11.6)System Memory: 73.6 GB free 48.6 GB\n```\n\nYou can see the CPU parameters on the CI machines by executing the command below.\n\n```\nnode -p 'os.cpus()'[  {    model: 'Intel(R) Xeon(R) Platinum 8124M CPU @ 3.00GHz',    speed: 3399,    times: { user: 760580, nice: 1010, sys: 158130, idle: 1638340, irq: 0 }  }  ...]\n```\n\n**Example projects and the machine configurations used to run them on CI:**\n\n*   The [Real World App](https://github.com/cypress-io/cypress-realworld-app) project runs tests on a CircleCI machine using the [Docker executor](https://circleci.com/docs/executor-intro/#docker) with [`resource_class: large`](https://circleci.com/docs/configuration-reference/#docker-execution-environment) providing 4 vCPUs and 8 GB of RAM. `cypress info` reports `System Memory: 73.6 GB free 48.6 GB`.\n*   The [Real World App](https://github.com/cypress-io/cypress-realworld-app) project also executes its tests on [GitHub Actions](https://docs.github.com/en/actions) using the [Cypress GitHub Action](https://github.com/cypress-io/github-action) with the [standard Ubuntu GitHub-hosted runner for Public repositories](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners) providing 4 vCPUs and 16 GB of RAM. `cypress info` reports `System Memory: 16.8 GB free 15.5 GB` with CPUs reported as `AMD EPYC 7763 64-Core Processor`.\n\n**Tip:** if there are problems with longer specs, try splitting them into shorter ones, following [this example](https://glebbahmutov.com/blog/split-spec/).\n\n### Dependencies[​](#Dependencies \"Direct link to Dependencies\")\n\nCypress runs on many CI providers' virtual machine environments out-of-the-box without needing additional dependencies installed.\n\n#### Linux[​](#Linux \"Direct link to Linux\")\n\nIf you see a message about a missing dependency when you run Cypress in a Linux CI environment, then refer to the [Linux Prerequisites](https://docs.cypress.io/guides/getting-started/installing-cypress#Linux-Prerequisites) lists for guidance.\n\n### Caching[​](#Caching \"Direct link to Caching\")\n\nAs of [Cypress version 3.0](https://docs.cypress.io/guides/references/changelog#3-0-0), Cypress downloads its binary to the global system cache - on linux that is `~/.cache/Cypress`. By ensuring this cache persists across builds you can save minutes off install time by preventing a large binary download.\n\n#### We recommend users:[​](#We-recommend-users \"Direct link to We recommend users:\")\n\n*   Cache the `~/.cache` folder after running `npm install`, `yarn`, [`npm ci`](https://docs.npmjs.com/cli/ci) or equivalents as demonstrated in the configs below.\n    \n*   **Do not** cache `node_modules` across builds. This bypasses more intelligent caching packaged with `npm` or `yarn`, and can cause issues with Cypress not downloading the Cypress binary on `npm install`.\n    \n*   If you are using `npm install` in your build process, consider [switching to `npm ci`](https://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable) and caching the `~/.npm` directory for a faster and more reliable build.\n    \n*   If you are using `yarn`, caching `~/.cache` will include both the `yarn` and Cypress caches. Consider using `yarn install --frozen-lockfile` as an [`npm ci`](https://docs.npmjs.com/cli/ci) equivalent.\n    \n*   If you need to override the binary location for some reason, use [CYPRESS\\_CACHE\\_FOLDER](https://docs.cypress.io/guides/references/advanced-installation#Binary-cache) environment variable.\n    \n*   Make sure you are not restoring the previous cache using lax keys; then the Cypress binaries can \"snowball\", read [Do Not Let Cypress Cache Snowball on CI](https://glebbahmutov.com/blog/do-not-let-cypress-cache-snowball/).\n    \n\n**Tip:** you can find lots of CI examples with configured caching in our [cypress-example-kitchensink](https://github.com/cypress-io/cypress-example-kitchensink#ci-status) repository.\n\n### Environment variables[​](#Environment-variables \"Direct link to Environment variables\")\n\nYou can set various environment variables to modify how Cypress runs.\n\n#### Configuration Values[​](#Configuration-Values \"Direct link to Configuration Values\")\n\nYou can set any configuration value as an environment variable. This overrides values in the Cypress configuration.\n\n**_Typical use cases would be modifying things like:_**\n\n*   `CYPRESS_BASE_URL`\n*   `CYPRESS_VIDEO`\n*   `CYPRESS_VIDEO_COMPRESSION`\n*   `CYPRESS_REPORTER`\n*   `CYPRESS_INSTALL_BINARY`\n\nRefer to the [Environment Variables recipe](https://docs.cypress.io/guides/references/configuration#Environment-Variables) for more examples.\n\n**_Record Key_**\n\nIf you are [recording your runs](#Record-tests) on a public project, you'll want to protect your Record Key. [Learn why.](https://docs.cypress.io/guides/cloud/account-management/projects#Identification)\n\nInstead of hard coding it into your run command like this:\n\n```\ncypress run --record --key abc-key-123\n```\n\nYou can set the record key as the environment variable, `CYPRESS_RECORD_KEY`, and we'll automatically use that value. You can now omit the `--key` flag when recording.\n\nTypically you'd set this inside of your CI provider.\n\n**_CircleCI Environment Variable_**\n\n![Record key environment variable](https://docs.cypress.io/img/guides/continuous-integration/cypress-record-key-as-environment-variable.png)\n\n**_TravisCI Environment Variable_**\n\n![Travis key environment variable](https://docs.cypress.io/img/guides/continuous-integration/cypress-record-key-as-env-var-travis.png)\n\n#### Git information[​](#Git-information \"Direct link to Git information\")\n\nCypress uses the [@cypress/commit-info](https://github.com/cypress-io/commit-info) package to extract git information to associate with the run (e.g. branch, commit message, author).\n\nIt assumes there is a `.git` folder and uses Git commands to get each property, like `git show -s --pretty=%B` to get commit message, see [src/git-api.js](https://github.com/cypress-io/commit-info/blob/master/src/git-api.js).\n\nUnder some environment setups (e.g. `docker`/`docker-compose`) if the `.git` directory is not available or mounted, you can pass all git related information under custom environment variables.\n\n*   Branch: `COMMIT_INFO_BRANCH`\n*   Message: `COMMIT_INFO_MESSAGE`\n*   Author email: `COMMIT_INFO_EMAIL`\n*   Author: `COMMIT_INFO_AUTHOR`\n*   SHA: `COMMIT_INFO_SHA`\n*   Remote: `COMMIT_INFO_REMOTE`\n\nIf the commit information is missing in the Cypress Cloud run then [GitHub Integration](https://docs.cypress.io/guides/cloud/integrations/source-control/github) or other tasks might not work correctly. To see the relevant Cypress debug logs, set the environment variable `DEBUG` on your CI machine and inspect the terminal output to see why the commit information is unavailable.\n\n```\nDEBUG=commit-info,cypress:server:record\n```\n\n#### CI Build Information[​](#CI-Build-Information \"Direct link to CI Build Information\")\n\nIn some newer CI providers, Cypress can't map the environment variables required to link back to builds or pull requests. In this case we provided users some environment variables to help pass that information along.\n\n*   Pull Request Id: `CYPRESS_PULL_REQUEST_ID`\n*   Pull Request URL: `CYPRESS_PULL_REQUEST_URL`\n*   Build URL: `CYPRESS_CI_BUILD_URL`\n\nSetting these will allow links within the Cloud run to take you to the appropriate place.\n\n#### Custom Environment Variables[​](#Custom-Environment-Variables \"Direct link to Custom Environment Variables\")\n\nYou can also set custom environment variables for use in your tests. These enable your code to reference dynamic values.\n\n```\nexport \"EXTERNAL_API_SERVER=https://corp.acme.co\"\n```\n\nAnd then in your tests:\n\n```\ncy.request({  method: 'POST',  url: Cypress.env('EXTERNAL_API_SERVER') + '/users/1',  body: {    foo: 'bar',    baz: 'quux',  },})\n```\n\nRefer to the dedicated [Environment Variables Guide](https://docs.cypress.io/guides/guides/environment-variables) for more examples.\n\n### Module API[​](#Module-API \"Direct link to Module API\")\n\nOftentimes it can be less complex to programmatically control and boot your servers with a Node script.\n\nIf you're using our [Module API](https://docs.cypress.io/guides/guides/module-api) then you can write a script that boots and then shuts down the server later. As a bonus, you can work with the results and do other things.\n\n```\n// scripts/run-cypress-tests.jsconst cypress = require('cypress')const server = require('./lib/my-server')// start your serverreturn server.start().then(() => {  // kick off a cypress run  return cypress.run().then((results) => {    // stop your server when it's complete    return server.stop()  })})\n```\n\n```\nnode scripts/run-cypress-tests.js\n```\n\n## Common problems and solutions[​](#Common-problems-and-solutions \"Direct link to Common problems and solutions\")\n\n### Missing binary[​](#Missing-binary \"Direct link to Missing binary\")\n\nWhen npm or yarn install the `cypress` package, a `postinstall` hook is executed that downloads the platform-specific Cypress binary. If the hook is skipped for any reason the Cypress binary will be missing (unless it was already cached).\n\nTo better diagnose the error, add [commands to get information about the Cypress cache](https://docs.cypress.io/guides/guides/command-line#cypress-cache-command) to your CI setup. This will print where the binary is located and what versions are already present.\n\n```\nnpx cypress cache pathnpx cypress cache list\n```\n\nIf the required binary version is not found in the cache, you can try the following:\n\n1.  Clean your CI's cache using your CI's settings to force a clean `npm install` on the next build.\n2.  Run the binary install yourself by adding the command `npx cypress install` to your CI script. If there is a binary already present, it should finish quickly.\n\nSee [bahmutov/yarn-cypress-cache](https://github.com/bahmutov/yarn-cypress-cache) for an example that runs the `npx cypress install` command to ensure the Cypress binary is always present before the tests begin.\n\n### Xvfb[​](#Xvfb \"Direct link to Xvfb\")\n\nWhen running on Linux, Cypress needs an X11 server; otherwise it spawns its own X11 server during the test run. When running several Cypress instances in parallel, the spawning of multiple X11 servers at once can cause problems for some of them. In this case, you can separately start a single X11 server and pass the server's address to each Cypress instance using `DISPLAY` variable.\n\nFirst, spawn the X11 server in the background at some port, for example `:99`. If you have installed `xvfb` on Linux or if you are using one of our Docker images from [cypress-docker-images](https://github.com/cypress-io/cypress-docker-images), the tools below should be available.\n\nSecond, set the X11 address in an environment variable\n\nStart Cypress as usual\n\nAfter all tests across all Cypress instances finish, kill the Xvfb background process using `pkill`\n\ncaution\n\nIn certain Linux environments, you may experience connection errors with your X11 server. In this case, you may need to start Xvfb with the following command:\n\n```\nXvfb -screen 0 1024x768x24 :99 &\n```\n\nCypress internally passes these Xvfb arguments, but if you are spawning your own Xvfb, you would need to pass these arguments. This is necessary to avoid using 8-bit color depth with Xvfb, which will prevent Chrome or Electron from crashing.\n\n### Colors[​](#Colors \"Direct link to Colors\")\n\nIf you want colors to be disabled, you can pass the `NO_COLOR` environment variable to disable colors. You may want to do this if ASCII characters or colors are not properly formatted in your CI.\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app) runs parallelized CI jobs across multiple operating systems, browsers, and viewport sizes.\n*   [cypress-example-kitchensink](https://github.com/cypress-io/cypress-example-kitchensink#ci-status) is set up to run on multiple CI providers.\n*   [Test Replay](https://docs.cypress.io/guides/cloud/test-replay)\n*   [Cross Browser Testing Guide](https://docs.cypress.io/guides/guides/cross-browser-testing)\n*   [Blog: Setting up Bitbucket Pipelines with proper caching of npm and Cypress](https://www.cypress.io/blog/2018/08/30/setting-up-bitbucket-pipelines-with-proper-caching-of-npm-and-cypress/)\n*   [Blog: Record Test Artifacts from any Docker CI](https://www.cypress.io/blog/2018/08/28/record-test-artifacts-from-any-ci/)\n*   [Continuous Integration with Cypress](https://www.cypress.io/blog/2019/10/04/webcast-recording-continuous-integration-with-cypress/) webinar covering TeamCity, Travis and CircleCI setups.",
  "title": "Introduction | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://glebbahmutov.com/blog/ssr-e2e/",
  "markdown": "# End-to-end Testing for Server-Side Rendered Pages\n\n*   [SSR application](#ssr-application)\n*   [Check HTML](#check-html)\n*   [Removing application bundle](#removing-application-bundle)\n*   [Disable component method](#disable-component-method)\n*   [Confirming `createReactClass` call](#confirming-createreactclass-call)\n*   [Hydrated page](#hydrated-page)\n*   [Conclusions](#conclusions)\n\n**Note:** the source code for this blog post is in [bahmutov/react-server-example](https://github.com/bahmutov/react-server-example) repository which is a fork of the excellent [mhart/react-server-example](https://github.com/mhart/react-server-example).\n\n## SSR application\n\nIf you install dependencies and run this web application, it starts listening on port 3000. For each received request the server returns a rendered markup for a simple list generated using a React component. It also returns props that allow the application to [hydrate client-side](https://glebbahmutov.com/blog/hydrate-your-apps/) and continue from there.\n\nHere is the returned HTML (I am using my favorite [httpie](https://httpie.org/) instead of `curl` to fetch the page). Notice both the list items and the `window.APP_PROPS` in the returned page:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16 | $ http localhost:3000  <br>HTTP/1.1 200 OK  <br>Connection: keep-alive  <br>Content-Length: 676  <br>Content-Type: text/html; charset=utf-8  <br>Date: Tue, 14 May 2019 01:32:41 GMT  <br>  <br><body><div id=\"content\"><div data-reactroot=\"\"><button disabled=\"\">  <br>Add Item</button><ul><li>Item 0</li><li>Item 1</li><li>Item 2</li>  <br><li>Item 3</li></ul></div></div><script>var APP\\_PROPS = {\"items\":\\[\"Item 0\",  <br>\"Item 1\",\"Item 2\",\"Item 3\"\\]};</script>  <br><script src=\"https://cdn.jsdelivr.net/npm/[\\[email protected\\]](https://glebbahmutov.com/cdn-cgi/l/email-protection)/umd/react.production.min.js\"></script>  <br><script src=\"https://cdn.jsdelivr.net/npm/[\\[email protected\\]](https://glebbahmutov.com/cdn-cgi/l/email-protection)/umd/react-dom.production.min.js\"></script>  <br><script src=\"https://cdn.jsdelivr.net/npm/[\\[email protected\\]](https://glebbahmutov.com/cdn-cgi/l/email-protection)/index.min.js\"></script>  <br><script src=\"https://cdn.jsdelivr.net/npm/[\\[email protected\\]](https://glebbahmutov.com/cdn-cgi/l/email-protection)/create-react-class.min.js\"></script>  <br><script src=\"/bundle.js\"></script></body> |\n\nHow do we test the server-side rendered page using an end-to-end test runner like Cypress.io? The application hydrates, thus if we simply load the page using `cy.visit('http://localhost:3000')` we might be testing the client-side SPA, not the server-rendered one! Here is one possible solution.\n\nInstead of [`cy.visit`](https://on.cypress.io/) we can request the page using [`cy.request`](https://on.cypress.io/) just like a regular HTTP resource - forcing the server to render it. The following test shows how to request the page and pick its `body` property:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3 | it('renders 5 items on the server', () => {  <br>  cy.request('/').its('body')  <br>}) |\n\nThe DevTools console shows the returned HTML page\n\n![Page HTML is returned by the server](https://glebbahmutov.com/blog/images/ssr-e2e/request-ssr-page.png)\n\n## Check HTML\n\nIf we have static HTML we can find the rendered list items. Without bringing any extra libraries like [cheerio](https://cheerio.js.org/) we can use jQuery already bundled with Cypress:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10 | it('renders 5 items on the server', () => {  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      const $li = Cypress.$(html).find('li')  <br>      expect($li)  <br>        .to.have.property('length')  <br>        .equal(4)  <br>    })  <br>}) |\n\n![Confirm there are 4 items](https://glebbahmutov.com/blog/images/ssr-e2e/4-li-items.png)\n\nNice, server is really rendering the expected items - but we don't see them! Hmm, we can throw the HTML into the application's iframe (the one that is empty right now)\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11 | it('renders 5 items on the server', () => {  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      const $li = Cypress.$(html).find('li')  <br>      expect($li)  <br>        .to.have.property('length')  <br>        .equal(4)  <br>      cy.state('document').write(html)  <br>    })  <br>}) |\n\n**Tip:** instead of `cy.state('document')` use [cy.document](https://on.cypress.io/document) to grab the `document` object from the application under test iframe:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3 | cy.document().invoke({ log: false }, 'write', html) |\n\nThe only problem with this approach - the JavaScript starts running immediately, which we can see by adding a few console log statements to the component life cycle methods.\n\n![Component is running](https://glebbahmutov.com/blog/images/ssr-e2e/log.png)\n\n## Removing application bundle\n\nAfter we receive the server-side rendered page, but before we stick it into the browser, we can simply remove the application bundle (or even all script tags). Then we can use \"normal\" Cypress query methods to confirm the expected number of elements - and see them ourselves.\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12 | it('skips client-side bundle', () => {  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>        <br>      html = html.replace('<script src=\"/bundle.js\"></script>', '')  <br>      cy.state('document').write(html)  <br>    })  <br>    <br>    <br>  cy.get('li').should('have.length', 4)  <br>}) |\n\nThe page shows the expected elements (highlighted) and the console does not show any messages from the component itself. The button stays disabled, which is another sign that our component has never been activated.\n\n![Skipped component bundle](https://glebbahmutov.com/blog/images/ssr-e2e/without-bundle.png)\n\n## Disable component method\n\nInstead of removing the application bundle completely, we can just disable some React component lifecycle methods, for example `componentDidMount`. Here is how we can do it - by being ready when `window.createReactClass` is called.\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16  <br>17  <br>18  <br>19  <br>20  <br>21  <br>22  <br>23  <br>24  <br>25 | it('disables component methods from createReactClass', () => {  <br>  let createReactClass  <br>  cy.window().then(win => {  <br>    Object.defineProperty(win, 'createReactClass', {  <br>      get () {  <br>        return definition => {  <br>          definition.componentDidMount = () => null  <br>          return createReactClass(definition)  <br>        }  <br>      },  <br>      set (fn) {  <br>        createReactClass = fn  <br>      }  <br>    })  <br>  })  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      cy.state('document').write(html)  <br>    })  <br>  cy.get('li').should('have.length', 4)  <br>    <br>    <br>  cy.get('button').should('be.disabled')  <br>}) |\n\n![No more componentDidMount](https://glebbahmutov.com/blog/images/ssr-e2e/no-component.png)\n\n## Confirming `createReactClass` call\n\nIn the above test we have confirmed that the `componentDidMount` was called - but only indirectly, by observing the button that has remained disabled. Let's actually confirm that our dummy no-op function was called once by the React starting up. We can create a [`cy.stub`](https://on.cypress.io/stub) that will be called by the component.\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16  <br>17  <br>18  <br>19  <br>20  <br>21  <br>22 | it('how to know if componentDidMount was called', () => {  <br>  cy.window().then(win => {  <br>    let createReactClass  <br>    Object.defineProperty(win, 'createReactClass', {  <br>      get () {  <br>        return definition => {  <br>          definition.componentDidMount = cy.stub().as('componentDidMount')  <br>          return createReactClass(definition)  <br>        }  <br>      },  <br>      set (fn) {  <br>        createReactClass = fn  <br>      }  <br>    })  <br>  })  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      cy.state('document').write(html)  <br>    })  <br>    <br>}) |\n\nHmm, we have a tiny bit of problem with the rest of the test. How do we get to the `@componentDidMount` alias? We cannot simply assert that it has been called once - because the alias has not been created yet when we try to `cy.get` it.\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8 | cy.request('/')  <br>  .its('body')  <br>  .then(html => {  <br>    cy.state('document').write(html)  <br>  })  <br>  <br>  <br>cy.get('@componentDidMount').should('have.been.calledOnce') |\n\n![Stub was called, but the test claims it was unavailable](https://glebbahmutov.com/blog/images/ssr-e2e/cy-get-timing-problem.png)\n\nNotice that in the test above `cy.get('@componentDidMount')` has failed to find the alias, yet it was later called by the app. That is why the \"Spies / Stubs\" table shows 1 call. Hmm, how do we wait until an alias has been created before calling `cy.get` on it? We could just add a 1 second wait - that should be enough, right?\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7 | cy.request('/')  <br>  .its('body')  <br>  .then(html => {  <br>    cy.state('document').write(html)  <br>  })  <br>cy.wait(1000)  <br>cy.get('@componentDidMount').should('have.been.calledOnce') |\n\n![Wait 1 second - the alias should be there after the delay](https://glebbahmutov.com/blog/images/ssr-e2e/wait-1-second.png)\n\nOf course, this is NOT the way Cypress works - you should not hardcode waits, instead you should just declare a condition to wait for. The test runner then will only wait until the moment the condition becomes satisfied, and not a millisecond longer. To achieve this we can take advantage of [`cy.should(fn)`](https://on.cypress.io/should#Function) that automatically retries the callback function until it passes without throwing an error (or times out).\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16  <br>17  <br>18  <br>19  <br>20  <br>21  <br>22  <br>23  <br>24  <br>25  <br>26  <br>27  <br>28 | it.only('how to know if componentDidMount was called', () => {  <br>  let componentDidMountSet  <br>  cy.window().then(win => {  <br>    let createReactClass  <br>    Object.defineProperty(win, 'createReactClass', {  <br>      get () {  <br>        return definition => {  <br>          definition.componentDidMount = cy.stub().as('componentDidMount')  <br>          componentDidMountSet = true  <br>          return createReactClass(definition)  <br>        }  <br>      },  <br>      set (fn) {  <br>        createReactClass = fn  <br>      }  <br>    })  <br>  })  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      cy.state('document').write(html)  <br>    })  <br>  <br>    <br>  cy.wrap(null).should(() => expect(componentDidMountSet).to.be.true)  <br>    <br>  cy.get('@componentDidMount').should('have.been.calledOnce')  <br>}) |\n\nThis line is the key\n\n|     |     |\n| --- | --- |\n| 1   | cy.wrap(null).should(() => expect(componentDidMountSet).to.be.true) |\n\nIt [retries](https://on.cypress.io/retry-ability) until the `expect(...).to.be.true` passes successfully.\n\n![Auto-retry until variable is set](https://glebbahmutov.com/blog/images/ssr-e2e/retry.png)\n\nNotice that auto-retrying is much faster (130ms) than hard-coding 1 second wait, yet works reliably.\n\nOne other way to write a command to wait until a specific condition becomes true (without throwing) is to use [cypress-wait-until](https://github.com/NoriSte/cypress-wait-until) plugin. Using this plugin we can write the same \"wait until variable gets its value\" like this\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4 | let componentDidMountSet  <br>...  <br>cy.waitUntil(() => cy.wrap(componentDidMountSet))  <br>cy.get('@componentDidMount').should('have.been.calledOnce') |\n\n## Hydrated page\n\nOnce the web application starts client-side, the markup should not jump or move - the newly rendered DOM should match the static HTML exactly, except the button becomes enabled in our example. Let's confirm it with the following test:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16  <br>17  <br>18  <br>19  <br>20  <br>21  <br>22  <br>23  <br>24  <br>25  <br>26  <br>27  <br>28  <br>29  <br>30  <br>31  <br>32  <br>33  <br>34  <br>35  <br>36  <br>37  <br>38  <br>39  <br>40  <br>41  <br>42  <br>43  <br>44  <br>45  <br>46  <br>47  <br>48  <br>49  <br>50  <br>51  <br>52 | const resetDocument = () => {  <br>  const doc = cy.state('document')  <br>  doc.body.innerHTML = ''  <br>}  <br>  <br>it('renders same application after hydration', () => {  <br>    <br>    <br>    <br>  const win = cy.state('window')  <br>  delete win.createReactClass  <br>  <br>  let pageHtml  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      pageHtml = html  <br>        <br>      cy.state('document').write(  <br>        html.replace('<script src=\"/bundle.js\"></script>', '')  <br>      )  <br>    })  <br>  <br>  cy.get('li').should('have.length', 4)  <br>  cy.get('button').should('be.disabled')  <br>  <br>  let staticHTML  <br>  cy.get('#content')  <br>    .invoke('html')  <br>      <br>      <br>    .then(html => (staticHTML = html.replace(' disabled=\"\"', '')))  <br>  <br>      <br>    .then(resetDocument)  <br>    .then(() => {  <br>      cy.state('document').write(pageHtml)  <br>    })  <br>  <br>    <br>  cy.get('button').should('be.enabled')  <br>  <br>  cy.get('#content')  <br>    .invoke('html')  <br>    .then(html => {  <br>      expect(html).to.equal(staticHTML)  <br>    })  <br>}) |\n\nThe test runs and confirms that the hydrated page matches the static HTML exactly.\n\n![Static vs hydrated HTML test](https://glebbahmutov.com/blog/images/ssr-e2e/hydrate-test.png)\n\n## Conclusions\n\nUsing [cy.request](https://on.cypress.io/) we can request the server-side rendered page and mount it into the Test Runner's application iframe for further testing. We can disable client-side functionality to make sure we only see the static HTML before hydration. We can also spy on the client-side application to confirm that it starts correctly, and I have shown how to wait for a variable to get its value before the test continues. Finally, I have shown how to confirm that the static HTML sent by the server is hydrated correctly by the client side application from the `APP_PROPS` data.",
  "title": "End-to-end Testing for Server-Side Rendered Pages | Better world by better software",
  "description": "SSR application Check HTML Removing application bundle Disable component method Confirming createReactClass call Hydrated page Conclusions    Note: the source code for this blog post is in bahmutov",
  "languageCode": null
},
{
  "url": "https://docs.cypress.io/guides/continuous-integration/ci-provider-examples",
  "markdown": "# CI Provider Examples | Cypress Documentation\n\ntip\n\n**Cypress is compatible with all Continuous Integration (CI) providers and systems.** On this page you'll find extensive guides for using Cypress with some of the most popular CI providers, and assorted quick start examples for many other providers.\n\n## Guides[​](#Guides \"Direct link to Guides\")\n\nFor the following CI Providers we have in depth guides.\n\n### CircleCI[​](#CircleCI \"Direct link to CircleCI\")\n\n[CircleCI Guide](https://docs.cypress.io/guides/continuous-integration/circleci)  \n[See CircleCI + Cypress Cloud in action](https://cloud.cypress.io/projects/7s5okt)\n\ninfo\n\n### Real World Example New[​](#Real-World-Example-New \"Direct link to Real-World-Example-New\")\n\nThe Cypress [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) uses [CircleCI](https://circleci.com/) to test over 300 test cases in parallel across 25 machines, multiple browsers, multiple device sizes, and multiple operating systems with full code-coverage reporting and [Cypress Cloud recording](https://cloud.cypress.io/projects/7s5okt).\n\nCheck out the full [RWA CircleCI configuration](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.circleci/config.yml).\n\n### GitHub Actions[​](#GitHub-Actions \"Direct link to GitHub Actions\")\n\n[GitHub Actions Guide](https://docs.cypress.io/guides/continuous-integration/github-actions)  \n[See GitHub Actions + Cypress Cloud in action](https://cloud.cypress.io/projects/tpys4j)\n\ninfo\n\n### Real World Example New[​](#Real-World-Example-New-1 \"Direct link to Real-World-Example-New-1\")\n\nThe Cypress [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) uses [GitHub Actions](https://github.com/) to test over 300 test cases in parallel across 25 machines, multiple browsers, multiple device sizes, and multiple operating systems with [Cypress Cloud recording](https://cloud.cypress.io/projects/tpys4j).\n\nCheck out the full [RWA GitHub Actions configuration](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.github/workflows/main.yml).\n\n### AWS CodeBuild[​](#AWS-CodeBuild \"Direct link to AWS CodeBuild\")\n\n[AWS CodeBuild Guide](https://docs.cypress.io/guides/continuous-integration/aws-codebuild)\n\n### Bitbucket[​](#Bitbucket \"Direct link to Bitbucket\")\n\n[Bitbucket Pipelines Guide](https://docs.cypress.io/guides/continuous-integration/bitbucket-pipelines)\n\n## Examples[​](#Examples \"Direct link to Examples\")\n\n### TravisCI[​](#TravisCI \"Direct link to TravisCI\")\n\n*   [Basic .travis.yml](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/basic/.travis.yml)\n*   [Parallel .travis.yml](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/.travis.yml)\n\n### Azure Pipelines[​](#Azure-Pipelines \"Direct link to Azure Pipelines\")\n\ninfo\n\n**Note**\n\nAzure Pipelines was formerly called Visual Studio Team Services(VSTS) CI or TeamFoundation\n\n*   [Basic Example (azure-ci.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/basic/azure-ci.yml)\n*   [Parallelized Example (azure-ci.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/azure-ci.yml)\n\n### Jenkins[​](#Jenkins \"Direct link to Jenkins\")\n\n*   [Basic Jenkinsfile](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/basic/Jenkinsfile)\n*   [Parallel Jenkinsfile](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/Jenkinsfile)\n\n### Netlify[​](#Netlify \"Direct link to Netlify\")\n\nWe recommend using our official [netlify-plugin-cypress](https://github.com/cypress-io/netlify-plugin-cypress) to execute end-to-end tests before and after deployment to Netlify platform. Read our tutorials [Test Sites Deployed To Netlify Using netlify-plugin-cypress](https://glebbahmutov.com/blog/test-netlify/) and [Run Cypress Tests on Netlify Using a Single Line](https://cypress.io/blog/2020/03/30/run-cypress-tests-on-netlify-using-a-single-line/).\n\n### Buildkite[​](#Buildkite \"Direct link to Buildkite\")\n\n*   [Parallel Example (.buildkite/pipeline.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/.buildkite/pipeline.yml)\n\n### CodeShip Pro[​](#CodeShip-Pro \"Direct link to CodeShip Pro\")\n\n*   [Basic](https://github.com/cypress-io/cypress-example-kitchensink/tree/master/basic/codeship-pro)\n*   [Parallel codeship-steps.yml](https://github.com/cypress-io/cypress-example-kitchensink/tree/master/codeship-steps.yml)\n*   [Parallel codeship-services.yml](https://github.com/cypress-io/cypress-example-kitchensink/tree/master/codeship-services.yml)\n\n### Semaphore[​](#Semaphore \"Direct link to Semaphore\")\n\n*   [Basic .semaphore.yml](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/basic/.semaphore.yml)\n*   [Parallel .semaphore.yml](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/.semaphore/semaphore.yml)\n\n### AppVeyor[​](#AppVeyor \"Direct link to AppVeyor\")\n\n*   [Basic Example (appveyor.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/appveyor.yml)\n\n### AWS Amplify Console[​](#AWS-Amplify-Console \"Direct link to AWS Amplify Console\")\n\n*   [Basic Example (amplify.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/amplify.yml)\n\n### webapp.io[​](#webappio \"Direct link to webapp.io\")\n\n*   [cypress-example-layerci](https://github.com/bahmutov/cypress-example-layerci)\n*   [Using cypress with webapp.io](https://webapp.io/docs/integrations/cypress)",
  "title": "CI Provider Examples | Cypress Documentation",
  "description": "Cypress is compatible with all Continuous Integration (CI) providers and systems.",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/third-party-definitions",
  "markdown": "# Integrating with Cypress Component Testing\n\ninfo\n\nThis feature is only available in Cypress **v12.7** and later.\n\nCypress Component Testing includes [official support](https://docs.cypress.io/guides/component-testing/overview#Supported-Frameworks) for many popular libraries and frameworks such as [React](https://docs.cypress.io/guides/component-testing/react/overview), [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), and [Vue](https://docs.cypress.io/guides/component-testing/vue/overview). All officially supported libraries feature a first class onboarding experience, where we detect and scaffold the correct files, and a framework-specific `mount` adapter to render your components. We call this collection of features a _Framework Definition_ since it defines the requirements for a library or framework to work in Cypress.\n\nIf your favorite library isn't featured, don't worry - we expose the same API we use internally for the Cypress community to define their own Framework Definitions.\n\nIn this guide, you'll learn how to author a Framework Definition, which will enjoy the same polished onboarding experience as our officially supported frameworks.\n\n## Concepts[​](#Concepts \"Direct link to Concepts\")\n\nThere are a few requirements for authoring a Framework Definition.\n\n*   [Definition File](#Framework-Definition) (we recommending naming this `definition.cjs`)\n*   [Mount Adapter](#Mount-Adapter) (we recommending naming this `index.mjs`)\n*   A [`package.json`](#packagejson) with the correct conventions\n\nThe Definition is required when users configure Component Testing for the first time. The Mount adapter is used to render components when writing tests.\n\nTo simplify this process, we recommend starting development using [our official template](https://github.com/cypress-io/cypress-ct-definition-template).\n\n## Framework Definition[​](#Framework-Definition \"Direct link to Framework Definition\")\n\nBelow is a minimal Framework Definition. Note that `defineFrameworkDefinition` is purely for type safety, similar to `defineConfig` in `cypress.config`.\n\nThere is one important convention; the `type` key in `defineFrameworkDefinition` should match the name of your package on npm, and should be named using one of the following conventions:\n\n*   `cypress-ct-*`\n*   `@organization/cypress-ct-*`\n\nSome examples of valid names include:\n\n*   `cypress-ct-react-js`\n*   `cypress-ct-svelte-testing`\n*   `@cypress/cypress-ct-react`\n*   `@angular/cypress-ct-angular`\n\nWhen configuring a project to use Component Testing, Cypress will load any dependencies following this naming convention from the project's `node_modules` and present them as framework options.\n\nA simple example of a Framework Defintion for the [Solid.js](https://www.solidjs.com/) library is shown below. We generally recommend naming this `definition.cjs`. In our [official template](https://github.com/cypress-io/cypress-ct-definition-template), this file is at the root level of the package.\n\n```\nconst { defineFrameworkDefinition } = require('cypress')const solidDep = {  // Unique, semantic identifier.  type: 'solid-js',  // Human readable name.  name: 'Solid',  // Package name install from `npm`.  package: 'solid-js',  /**   * Similar to package, but can include a version or tag.   * Used during setup to generate an install command for users.   * Eg: `solid-js@next`   */  installer: 'solid-js',  // Human readable description.  description:    'A declarative, efficient, and flexible JavaScript library for building user interfaces.',  // Minimum supported version.  minVersion: '^1.6.0',}/** * Similar to above. Create an smooth, seamless setup experience * by ensuring the user has all the necessary dependencies. * @type {Cypress.CypressComponentDependency} */const solidVitePlugin = {  type: 'solid-js-vite-plugin',  name: 'Vite Plugin Solid',  package: 'vite-plugin-solid',  installer: 'vite-plugin-solid',  description: 'A simple integration to run solid-js with vite',  minVersion: '^1.6.0 || ^2.0.0',}/** * The actual definition. */module.exports = defineFrameworkDefinition({  /**   * This should match the `npm` package name.   * The convention required to ensure your Definition is processed   * by Cypress is `cypress-ct-*` for global packages, or   * `@org/cypress-ct-*` for organization level packages.   */  type: '@lmiller1990/cypress-ct-solid-js',  /**   * The label that shows up when configuring Component Testing   * for the first time.   */  name: 'Solid.js',  /**   * Supported bundlers. Can be \"webpack\" and/or \"vite\".   * In this example we only support Solid.js with Vite.   */  supportedBundlers: ['vite'],  /**   * Used by Cypress to automatically detect the correct Framework Definition   * based on the user's project.   * In this example, if a module matching `solidDep`   * is found in the user's project,   * Solid.js will automatically be selected when configuring Component Testing.   */  detectors: [solidDep],  /**   * Supply a set of dependencies a project should have to use this Framework Definition. The user will be prompted to install them if they are not found.   * Optionally, supply different dependencies based on the chosen bundler.   */  dependencies: (bundler) => {    return [solidDep, solidVitePlugin]  },  /**   * An SVG icon. Shown when configuring Component Testing for the first time.   * Optional, but good for branding your Framework Definition.   */  icon: `    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 166 155.3\"><path d=\"M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z\" fill=\"#76b3e1\"/><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"27.5\" y1=\"3\" x2=\"152\" y2=\"63.5\"><stop offset=\".1\" stop-color=\"#76b3e1\"/><stop offset=\".3\" stop-color=\"#dcf2fd\"/><stop offset=\"1\" stop-color=\"#76b3e1\"/></linearGradient><path d=\"M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z\" opacity=\".3\" fill=\"url(#a)\"/><path d=\"M52 35l-4 1c-17 5-22 21-13 35 10 13 31 20 48 15l62-21S92 26 52 35z\" fill=\"#518ac8\"/><linearGradient id=\"b\" gradientUnits=\"userSpaceOnUse\" x1=\"95.8\" y1=\"32.6\" x2=\"74\" y2=\"105.2\"><stop offset=\"0\" stop-color=\"#76b3e1\"/><stop offset=\".5\" stop-color=\"#4377bb\"/><stop offset=\"1\" stop-color=\"#1f3b77\"/></linearGradient><path d=\"M52 35l-4 1c-17 5-22 21npm install https://cdn.cypress.io/beta/npm/12.6.0/darwin-arm64/feature/ct-public-api-ab820f062d313fbef51665bdd1d883c69d89b3be/cypress.tgz-13 35 10 13 31 20 48 15l62-21S92 26 52 35z\" opacity=\".3\" fill=\"url(#b)\"/><linearGradient id=\"c\" gradientUnits=\"userSpaceOnUse\" x1=\"18.4\" y1=\"64.2\" x2=\"144.3\" y2=\"149.8\"><stop offset=\"0\" stop-color=\"#315aa9\"/><stop offset=\".5\" stop-color=\"#518ac8\"/><stop offset=\"1\" stop-color=\"#315aa9\"/></linearGradient><path d=\"M134 80a45 45 0 00-48-15L24 85 4 120l112 19 20-36c4-7 3-15-2-23z\" fill=\"url(#c)\"/><linearGradient id=\"d\" gradientUnits=\"userSpaceOnUse\" x1=\"75.2\" y1=\"74.5\" x2=\"24.4\" y2=\"260.8\"><stop offset=\"0\" stop-color=\"#4377bb\"/><stop offset=\".5\" stop-color=\"#1a336b\"/><stop offset=\"1\" stop-color=\"#1a336b\"/></linearGradient><path d=\"M114 115a45 45 0 00-48-15L4 120s53 40 94 30l3-1c17-5 23-21 13-34z\" fill=\"url(#d)\"/></svg>  `,})\n```\n\nOur Framework Definition shows up in Cypress! It has the \"community\" label, indicating it's a third party definition.\n\n![custom framework definition](https://docs.cypress.io/img/guides/component-testing/framework-definition-1.png)\n\nWe defined the `dependencies`, which are also correctly handled - we haven't installed them all, so Cypress is prompting us to do so:\n\n![required dependencies](https://docs.cypress.io/img/guides/component-testing/framework-definition-2.png)\n\n## Mount Adapter[​](#Mount-Adapter \"Direct link to Mount Adapter\")\n\nThe second part of defining a Framework Definition is the Mount Adapter. This is the function that renders the component in your tests using `cy.mount()`.\n\nBy default, Cypress will look for this as a `mount` function that is a **named export** from the package. This should be written in a `index.mjs` file. This example is for a [Solid.js](https://www.solidjs.com/) mount adapter:\n\n```\nimport { getContainerEl, setupHooks } from '@cypress/mount-utils'import { render } from 'solid-js/web'let disposefunction cleanup() {  dispose?.()}/** * @param {() => JSX.Element} - component to render */export function mount(component, options = {}) {  // Retrieve root DOM element that Cypress has prepared for this test  const root = getContainerEl()  dispose = render(() => component, root)  // Wait until next microtick to ensure any async render logic has executed  return cy.wait(0, { log: false }).then(() => {    if (options.log !== false) {      Cypress.log({        name: 'mount',        message: 'Mounted component',      })    }  })}// Cleanup between each testsetupHooks(cleanup)\n```\n\nThis is different for each library, but the concept is the same - identify how to mount or render a component in your library, and implement it in a function named `mount` in `index.mjs`.\n\nWhen a user configures Component Testing with your Framework Definition we automatically configure a `cy.mount` command using your `mount` function in the Component Testing `supportFile`:\n\n```\nimport { mount } from '@lmiller1990/cypress-ct-solid-js'Cypress.Commands.add('mount', mount)\n```\n\n## package.json[​](#packagejson \"Direct link to package.json\")\n\nThe final thing you need is a correctly configured `package.json`. This example was created using [our official template](https://github.com/cypress-io/cypress-ct-definition-template).\n\nThere are two fields of note:\n\n*   `name`: Your package name which must follow the `cypress-ct-*`/`@org/cypress-ct-*` convention\n*   `exports`: Object referencing the two files we created to comprise the Framework Definition. The `node` entry points to the Definition file, and the `default` entry points to the Mount Adapter:\n\n```\n{  \"name\": \"@lmiller1990/cypress-ct-solid-js\",  \"version\": \"0.0.4\",  \"description\": \"Example Framework Definition for Cypress and Solid.js\",  \"exports\": {    \"node\": \"./definition.cjs\",    \"default\": \"./index.mjs\"  },  \"files\": [    \"package.json\",    \"definition.cjs\",    \"index.mjs\"  ],  \"dependencies\": {    \"@cypress/mount-utils\": \"^4.0.0\"  },  \"devDependencies\": {    \"solid-js\": \"^1.6.0\"  },  \"peerDependencies\": {    \"solid-js\": \"^1.6.0\"    \"cypress\": \"^12.7.0\"  }}\n```\n\nIf you develop the Framework Definition file using TypeScript, for example by using [our official template](https://github.com/cypress-io/cypress-ct-definition-template), as long as you don't have any compile time errors, everything should work as expected. If you do run into unexpected behavior, please [file an issue](https://github.com/cypress-io/cypress/issues).\n\nMount Adapters can be more complex to test. In general, we recommend testing them in the same way users consume them - using Cypress Component Testing. A minimal test suite for a simple Solid.js Mount Adapter can be found [here](https://github.com/lmiller1990/cypress-ct-solid-js/tree/main/example-project). Alternatively, take a look at our official [React](https://github.com/cypress-io/cypress/tree/develop/npm/react) and [Angular](https://github.com/cypress-io/cypress/tree/develop/npm/angular) Mount Adapters, both of which have extensive test suites.\n\n## Publishing on npm[​](#Publishing-on-npm \"Direct link to Publishing on npm\")\n\nThat's it! Publish your Framework Definition on npm and start using it.\n\n## Available Framework Definitions[​](#Available-Framework-Definitions \"Direct link to Available Framework Definitions\")\n\nYou can find a list of available Framework Definitions [here](https://docs.cypress.io/guides/component-testing/overview#Community-Supported-Frameworks).\n\nIf you have created a Framework Definition we would be delighted to mention it in our documentation so other Cypress users on the same framework can find it. [Please submit a Pull Request](https://github.com/cypress-io/cypress-documentation/blob/main/CONTRIBUTING.md)!",
  "title": "Integrating with Cypress Component Testing | Cypress Documentation",
  "description": "This feature is only available in Cypress v12.7",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/component-testing/react/api",
  "markdown": "# React API | Cypress Documentation\n\n```\nimport { mount } from '@cypress/react'import { Stepper } from './Stepper'it('mounts', () => {  mount(<StepperComponent />)  cy.get('[data-cy=increment]').click()  cy.get('[data-cy=counter]').should('have.text', '1')}\n```",
  "title": "React API | Cypress Documentation",
  "description": "Methods",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/tooling/IDE-integration",
  "markdown": "# IDE Integration | Cypress Documentation\n\n## File Opener Preference[​](#File-Opener-Preference \"Direct link to File Opener Preference\")\n\nWhen clicking on a file path or an [error](https://docs.cypress.io/guides/guides/debugging#Errors) in the [command log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log), Cypress will attempt to open the file on your system. If the editor supports inline highlighting of the file, the file will open with the cursor located on the line and column of interest.\n\n![Open file in your IDE](https://docs.cypress.io/img/guides/core-concepts/cypress-app/open-file-in-IDE.gif)\n\nThe first time you click a file path, Cypress will prompt you to select which location you prefer to open the file. You can choose to open it in your:\n\n*   File system (e.g. Finder on MacOS, File Explore on Windows)\n*   An IDE located on your system\n*   A specified application path\n\ncaution\n\nCypress attempts to find available file editors on your system and display those as options. If your preferred editor is not listed, you can specify the (full) path to it by selecting **Other**. Cypress will make every effort to open the file, _but it is not guaranteed to work with every application_.\n\nAfter setting your file opener preference, any files will automatically open in your selected application without prompting you to choose. If you want to change your selection, you can do so in the **Settings** tab of Cypress by clicking under **File Opener Preference**.\n\n![screenshot of Cypress test-runner settings tab with file opener preference panel](https://docs.cypress.io/img/guides/IDE-integration/file-opener-preference-settings-tab.png)\n\n## Extensions & Plugins[​](#Extensions--Plugins \"Direct link to Extensions & Plugins\")\n\nThere are many third-party IDE extensions and plugins to help integrate your IDE with Cypress.\n\n### Visual Studio Code[​](#Visual-Studio-Code \"Direct link to Visual Studio Code\")\n\n*   [Cypress Fixture-IntelliSense](https://marketplace.visualstudio.com/items?itemName=JosefBiehler.cypress-fixture-intellisense): Supports your [cy.fixture()](https://docs.cypress.io/api/commands/fixture) by providing intellisense for existing fixtures.\n*   [Cypress Helper](https://marketplace.visualstudio.com/items?itemName=shevtsov.vscode-cy-helper): Various helpers and commands for integration with Cypress.\n*   [Cypress Snippets](https://marketplace.visualstudio.com/items?itemName=andrew-codes.cypress-snippets): Useful Cypress code snippets.\n*   [Cypress Snippets](https://marketplace.visualstudio.com/items?itemName=CliffSu.cypress-snippets): This extension includes the newest and most common cypress snippets.\n*   [Open Cypress](https://marketplace.visualstudio.com/items?itemName=tnrich.vscode-extension-open-cypress): Allows you to open Cypress specs and single `it()` blocks directly from VS Code.\n*   [Test Utils](https://marketplace.visualstudio.com/items?itemName=chrisbreiding.test-utils): Easily add or remove `.only` and `.skip` modifiers with keyboard shortcuts or the command palette.\n\n### IntelliJ Platform[​](#IntelliJ-Platform \"Direct link to IntelliJ Platform\")\n\n*   [JetBrains Aqua](https://www.jetbrains.com/aqua/): An IDE for UI Test Automation with comprehensive Cypress support. Features include autocompletion, in-IDE debugging, test search, and more.\n    \n*   [Test Automation plugin](https://plugins.jetbrains.com/plugin/20175-test-automation): The official plugin, developed and maintained by JetBrains, offering robust support for Cypress and compatible with IntelliJ IDEA, CLion, GoLand, PhpStorm, PyCharm, Rider, RubyMine, and WebStorm. It encompasses all the features found in JetBrains Aqua.\n    \n*   [Cypress Support](https://plugins.jetbrains.com/plugin/13819-intellij-cypress): Integrates Cypress under the common Intellij test framework.\n    \n\n## Intelligent Code Completion[​](#Intelligent-Code-Completion \"Direct link to Intelligent Code Completion\")\n\n### Writing Tests[​](#Writing-Tests \"Direct link to Writing Tests\")\n\n#### Features[​](#Features \"Direct link to Features\")\n\nIntelliSense is available for Cypress. It offers intelligent code suggestions directly in your IDE while writing tests. A typical IntelliSense popup shows command definition, a code example and a link to the full documentation page.\n\n##### Autocomplete while typing Cypress commands[​](#Autocomplete-while-typing-Cypress-commands \"Direct link to Autocomplete while typing Cypress commands\")\n\n##### Signature help when writing and hovering on Cypress commands[​](#Signature-help-when-writing-and-hovering-on-Cypress-commands \"Direct link to Signature help when writing and hovering on Cypress commands\")\n\n##### Autocomplete while typing assertion chains, including only showing DOM assertions if testing on a DOM element.[​](#Autocomplete-while-typing-assertion-chains-including-only-showing-DOM-assertions-if-testing-on-a-DOM-element \"Direct link to Autocomplete while typing assertion chains, including only showing DOM assertions if testing on a DOM element.\")\n\n#### Set up in your Dev Environment[​](#Set-up-in-your-Dev-Environment \"Direct link to Set up in your Dev Environment\")\n\nThis document assumes you have [installed Cypress](https://docs.cypress.io/guides/getting-started/installing-cypress).\n\nCypress comes with TypeScript [type declarations](https://github.com/cypress-io/cypress/tree/develop/cli/types) included. Modern text editors can use these type declarations to show IntelliSense inside spec files.\n\n##### Triple slash directives[​](#Triple-slash-directives \"Direct link to Triple slash directives\")\n\nThe simplest way to see IntelliSense when typing a Cypress command or assertion is to add a [triple-slash directive](http://www.typescriptlang.org/docs/handbook/triple-slash-directives.html) to the head of your JavaScript or TypeScript testing file. This will turn the IntelliSense on a per file basis. Copy the comment line below and paste it into your spec file.\n\n```\n/// <reference types=\"Cypress\" />\n```\n\nIf you write [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands) and provide TypeScript definitions for them, you can use the triple slash directives to show IntelliSense, even if your project uses only JavaScript. For example, if your custom commands are written in `cypress/support/commands.js` and you describe them in `cypress/support/index.d.ts` use:\n\n```\n// type definitions for Cypress object \"cy\"/// <reference types=\"cypress\" />// type definitions for custom commands like \"createDefaultTodos\"/// <reference types=\"../support\" />\n```\n\nSee the [`cypress-example-todomvc`](https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense) repository for a working example.\n\nIf the triple slash directive does not work, please refer to your code editor in [TypeScript's Editor Support doc](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support) and follow the instructions for your IDE to get [TypeScript support](https://docs.cypress.io/guides/tooling/typescript-support) and intelligent code completion configured in your developer environment first. TypeScript support is built in for [Visual Studio Code](https://code.visualstudio.com/), [Visual Studio](https://www.visualstudio.com/), and [WebStorm](https://www.jetbrains.com/webstorm/) - all other editors require extra setup.\n\n##### Reference type declarations via `jsconfig`[​](#Reference-type-declarations-via-jsconfig \"Direct link to Reference-type-declarations-via-jsconfig\")\n\nInstead of adding triple slash directives to each JavaScript spec file, some IDEs (like VS Code) understand a common `jsconfig.json` file in the root of the project. In that file, you can include the Cypress module and your test folders.\n\n```\n{  \"include\": [\"./node_modules/cypress\", \"cypress/**/*.js\"]}\n```\n\nThe Intelligent Code Completion should now show help for `cy` commands inside regular JavaScript spec files.\n\n##### Reference type declarations via `tsconfig`[​](#Reference-type-declarations-via-tsconfig \"Direct link to Reference-type-declarations-via-tsconfig\")\n\nAdding a [`tsconfig.json`](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) inside your [`cypress` folder](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Folder-structure) with the following configuration should get intelligent code completion working.\n\n```\n{  \"compilerOptions\": {    \"allowJs\": true,    \"types\": [\"cypress\"]  },  \"include\": [\"**/*.*\"]}\n```\n\n### See also[​](#See-also \"Direct link to See also\")\n\n*   [Adding custom properties to the global `window` with the right TypeScript type](https://github.com/bahmutov/test-todomvc-using-app-actions#intellisense)",
  "title": "IDE Integration | Cypress Documentation",
  "description": "File Opener Preference",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/continuous-integration/github-actions",
  "markdown": "# GitHub Actions | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to run Cypress tests with GitHub Actions as part of a CI/CD pipeline\n*   How to parallelize Cypress test runs within GitHub Actions\n*   How to cache build artifacts between installation jobs and worker jobs\n\nGitHub offers developers [Actions](https://github.com/features/actions) that provide a way to **automate, customize, and execute your software development workflows** within your GitHub repository. Detailed documentation is available in the [GitHub Action Documentation](https://docs.github.com/en/actions).\n\n## Cypress GitHub Action[​](#Cypress-GitHub-Action \"Direct link to Cypress GitHub Action\")\n\nWorkflows can be packaged and shared as [GitHub Actions](https://github.com/features/actions). GitHub maintains many, such as the [checkout](https://github.com/marketplace/actions/checkout) and [Upload/Download Artifact Actions](https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts) actions used below.\n\nThe official [Cypress GitHub Action](https://github.com/marketplace/actions/cypress-io) is maintained by Cypress and our community to help ease the setup of Cypress in a GitHub Action. The action provides dependency installation (via npm, yarn, or pnpm), built-in caching of Node dependencies, and additional configuration options for advanced workflows.\n\n### Version Number Selection[​](#Version-Number-Selection \"Direct link to Version Number Selection\")\n\ntip\n\n**GitHub Action Version Number**\n\nWe recommend binding to the action's latest major version by specifying `v6` when using the action.\n\nFor Example:\n\n```\njobs:  cypress-run:    steps:      - uses: cypress-io/github-action@v6\n```\n\nAlternatively, as a mitigation strategy for unforeseen breaks, bind to a specific [release version tag](https://github.com/cypress-io/github-action/releases), for example `cypress-io/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)`. Read the [Cypress GitHub Action documentation](https://github.com/cypress-io/github-action#action-version) for more information.\n\n## Basic Setup[​](#Basic-Setup \"Direct link to Basic Setup\")\n\nThe example below is a basic CI setup and job using the [Cypress GitHub Action](https://github.com/marketplace/actions/cypress-io) to run Cypress tests within the Electron browser. This GitHub Action configuration is placed within `.github/workflows/main.yml`.\n\n```\nname: Cypress Testson: pushjobs:  cypress-run:    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      # Install npm dependencies, cache them correctly      # and run all Cypress tests      - name: Cypress run        uses: cypress-io/github-action@v6        with:          build: npm run build          start: npm start\n```\n\n**How this action works:**\n\n*   On _push_ to this repository, this job will provision and start a GitHub-hosted Ubuntu Linux instance to run the outlined `steps` for the declared `cypress-run` job within the `jobs` section of the configuration.\n*   The [GitHub checkout Action](https://github.com/marketplace/actions/checkout) is used to check out our code from our GitHub repository.\n*   Finally, our Cypress GitHub Action will:\n    *   Install npm dependencies\n    *   Build the project (`npm run build`)\n    *   Start the project web server (`npm start`)\n    *   Run the Cypress tests within our GitHub repository within Electron.\n\n## Testing on GitHub with Installed Browsers[​](#Testing-on-GitHub-with-Installed-Browsers \"Direct link to Testing on GitHub with Installed Browsers\")\n\n[GitHub-hosted runners](https://github.com/actions/runner-images) offer images with pre-installed browsers to use for testing. The `ubuntu` and `windows` runners each include Google Chrome, Mozilla Firefox, and Microsoft Edge pre-installed. The `macos` runners additionally include Apple Safari. Refer to [GitHub Actions Runner Images](https://github.com/actions/runner-images/blob/main/README.md) for current details.\n\nUse the action's `browser` parameter to select the desired browser. To change the above example to select Chrome instead of the default browser Electron, add `browser: chrome` as follows.\n\n```\n- name: Cypress run  uses: cypress-io/github-action@v6  with:    build: npm run build    start: npm start    browser: chrome\n```\n\nFor more examples, see the action's [Browser](https://github.com/cypress-io/github-action#browser) section.\n\ncaution\n\nIf you are specifying a browser in a parallel job, see [Specifying Browsers in Parallel Builds](#Specifying-Browsers-in-Parallel-Builds) for more info on how to avoid errors during runs due to GitHub runner images being updated with the latest browsers.\n\n## Testing with Cypress Docker Images[​](#Testing-with-Cypress-Docker-Images \"Direct link to Testing with Cypress Docker Images\")\n\nGitHub Actions provides the option to specify a container image for the job. Cypress offers various [Docker Images](https://github.com/cypress-io/cypress-docker-images) for running Cypress locally and in CI.\n\nBelow we extend the previous example by adding the `container` attribute using a [Cypress Docker Image](https://github.com/cypress-io/cypress-docker-images) built with the version of Google Chrome embedded in the tag name of the Docker image shown as `chrome-xxx`. Specifying a browser version allows our tests to execute without any influence from browser version changes in the GitHub runner image.\n\n```\nname: Cypress Tests using Cypress Docker Imageon: pushjobs:  cypress-run:    runs-on: ubuntu-22.04    container:      image: cypress/browsers:node-20.14.0-chrome-126.0.6478.114-1-ff-127.0.1-edge-126.0.2592.61-1      options: --user 1001    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress run        uses: cypress-io/github-action@v6        with:          build: npm run build          start: npm start          browser: chrome\n```\n\ncaution\n\nIf you are testing with Firefox, you must specify the non-root user `1001` as above. Refer to [Firefox not found](https://github.com/cypress-io/cypress-docker-images#firefox-not-found) for more information.\n\n## Caching Dependencies and Build Artifacts[​](#Caching-Dependencies-and-Build-Artifacts \"Direct link to Caching Dependencies and Build Artifacts\")\n\nWhen working with actions that have multiple jobs, it is recommended to have an initial \"install\" job that will download any dependencies and build your app, and then cache these assets for use later by subsequent jobs.\n\nThe Cypress GitHub Action will automatically cache and restore your Node dependencies for you.\n\nFor build assets, you will need to cache and restore them manually.\n\nThe `install` job below uses the [upload-artifact](https://github.com/marketplace/actions/upload-a-build-artifact) action and saves the state of the `build` directory for the `cypress-run` worker job.\n\nThe [download-artifact](https://github.com/marketplace/actions/download-a-build-artifact) action retrieves the `build` directory saved in the `install` job, as seen below in the `cypress-run` worker job.\n\n```\nname: Cypress Tests with Dependency and Artifact Cachingon: pushjobs:  install:    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress install        uses: cypress-io/github-action@v6        with:          # Disable running of tests within install job          runTests: false          build: npm run build      - name: Save build folder        uses: actions/upload-artifact@v4        with:          name: build          if-no-files-found: error          path: build  cypress-run:    runs-on: ubuntu-22.04    needs: install    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Download the build folder        uses: actions/download-artifact@v4        with:          name: build          path: build      - name: Cypress run        uses: cypress-io/github-action@v6        with:          start: npm start          browser: chrome\n```\n\nView GitHub's guide on [Storing workflow data as artifacts](https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts) for more info.\n\n## Parallelization[​](#Parallelization \"Direct link to Parallelization\")\n\n[Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) offers the ability to [parallelize and group test runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) along with additional insights and [analytics](https://docs.cypress.io/guides/cloud/analytics/overview) for Cypress tests.\n\nUsing parallelization with the Cypress GitHub Action requires setting up recording to [Cypress Cloud](https://on.cypress.io/cloud).\n\nGitHub Actions offers a [matrix strategy](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix) for declaring different job configurations for a single job definition. Jobs declared within a matrix strategy can run in parallel, which enables us to run multiples instances of Cypress at the same time, as we will see later in this section.\n\nBefore diving into an example of a parallelization setup, it is important to understand the two different types of GitHub Action jobs that we will declare:\n\n*   **Install Job**: A job that installs and caches dependencies that will be used by subsequent jobs later in the GitHub Action workflow.\n*   **Worker Job**: A job that handles the execution of Cypress tests and depends on the _install job_.\n\n### Install Job[​](#Install-Job \"Direct link to Install Job\")\n\nThe separation of installation from test running is necessary when running parallel jobs. It allows for the reuse of various build steps aided by caching.\n\nFirst, we'll define the `install` step that will be used by the worker jobs defined in the matrix strategy.\n\nFor the `steps`, notice that we pass `runTests: false` to the Cypress GitHub Action to instruct it only to install and cache Cypress and npm dependencies _without running the tests_.\n\nThe [upload-artifact](https://github.com/marketplace/actions/upload-a-build-artifact) action will save the state of the `build` directory for the worker jobs.\n\n```\nname: Cypress Testson: pushjobs:  install:    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress install        uses: cypress-io/github-action@v6        with:          # Disable running of tests within install job          runTests: false          build: npm run build      - name: Save build folder        uses: actions/upload-artifact@v4        with:          name: build          if-no-files-found: error          path: dist\n```\n\n### Worker Jobs[​](#Worker-Jobs \"Direct link to Worker Jobs\")\n\nNext, we define the worker job named \"cypress-run\" that will run Cypress tests as part of a parallelized matrix strategy.\n\nThe `download-artifact` action will retrieve the **dist** directory saved in the install job.\n\n```\nname: Cypress Testson: pushjobs:  install:  # ... omitted install job from above  cypress-run:    runs-on: ubuntu-22.04    needs: install    strategy:      # don't fail the entire matrix on failure      fail-fast: false      matrix:        # run copies of the current job in parallel        containers: [1, 2, 3, 4, 5]    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Download the build folder        uses: actions/download-artifact@v4        with:          name: build      - name: Cypress run        uses: cypress-io/github-action@v6        with:          record: true          parallel: true          group: 'UI-Chrome'          start: npm start\n```\n\ncaution\n\n**Ensure Correct Container**\n\nIf a Docker container was used in the install job, the same Docker container must also be used in the worker jobs.\n\n#### Setting up Parallelization[​](#Setting-up-Parallelization \"Direct link to Setting up Parallelization\")\n\nTo set up multiple containers to run in parallel, the matrix option of the strategy configuration can be set to containers: \\[1, 2, 3, 4, 5\\], where the number of items defined in the containers array will be how many instances of the job will start up.\n\nFor instance, `containers: [1, 2, 3, 4, 5]` will provision five worker instances to run in parallel. For our purposes, the array's values are arbitrary and aren't used in the steps.\n\n### Specifying Browsers in Parallel Builds[​](#Specifying-Browsers-in-Parallel-Builds \"Direct link to Specifying Browsers in Parallel Builds\")\n\nIf you specify a browser in parallel mode, we recommend using a [Cypress Docker image](#Testing-with-Cypress-Docker-Images) to pin the browser version used.\n\nWhen GitHub updates the browsers in their runner images, not all runners get the new version simultaneously. Your test run might fail if Cypress Cloud detects differences in the runners between parallel jobs. The Docker image helps ensure the browser is consistent during an image upgrade.\n\n## Using Cypress Cloud with GitHub Actions[​](#Using-Cypress-Cloud-with-GitHub-Actions \"Direct link to Using Cypress Cloud with GitHub Actions\")\n\nIn the GitHub Actions configuration, we have defined in the previous section, we are leveraging three useful features of [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction):\n\n1.  [Recording test results with the `record: true` option](https://on.cypress.io/how-do-i-record-runs) to [Cypress Cloud](https://on.cypress.io/cloud):\n    \n    *   In-depth and shareable [test reports](https://docs.cypress.io/guides/cloud/recorded-runs#Latest-Runs).\n    *   Visibility into test failures via quick access to [Test Replay](https://docs.cypress.io/guides/cloud/test-replay), error messages, stack traces, screenshots, videos, and contextual details.\n    *   [Integrating testing with the pull-request (PR) process](https://docs.cypress.io/guides/cloud/integrations/source-control/github) via [commit status check guards](https://docs.cypress.io/guides/cloud/integrations/source-control/github#Status-checks) and convenient [test report comments](https://docs.cypress.io/guides/cloud/integrations/source-control/github#Pull-request-comments).\n    *   [Detecting flaky tests](https://docs.cypress.io/guides/cloud/flaky-test-management) and surfacing them via [Slack alerts](https://docs.cypress.io/guides/cloud/flaky-test-management#Slack) or [GitHub PR status checks](https://docs.cypress.io/guides/cloud/flaky-test-management#GitHub).\n2.  [Parallelizing test runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) and optimizing their execution via [intelligent load-balancing](https://docs.cypress.io/guides/cloud/smart-orchestration/load-balancing#Balance-strategy) of test specs across CI machines with the `parallel: true` option.\n    \n3.  Organizing and consolidating multiple `cypress run` calls by labeled groups into a single report within [Cypress Cloud](https://on.cypress.io/cloud). In the example above, we use the `group: \"UI-Chrome\"` option to organize all UI tests for the Chrome browser into a group labeled \"UI - Chrome\" in the [Cypress Cloud](https://on.cypress.io/cloud) report.\n    \n\n## Cypress Real World Example with GitHub Actions[​](#Cypress-Real-World-Example-with-GitHub-Actions \"Direct link to Cypress Real World Example with GitHub Actions\")\n\nA complete CI workflow against multiple browsers, viewports, and operating systems is available in the **Cypress Real World App**.\n\nClone the [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) and refer to the [.github/workflows/main.yml](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.github/workflows/main.yml) file.\n\n![Cypress Real World App GitHub Actions Matrix](https://docs.cypress.io/img/guides/github-actions/rwa-run-matrix.png)\n\n## Common Problems and Solutions[​](#Common-Problems-and-Solutions \"Direct link to Common Problems and Solutions\")\n\n### Re-run jobs passing with empty tests[​](#Re-run-jobs-passing-with-empty-tests \"Direct link to Re-run jobs passing with empty tests\")\n\nWe recommend passing the `GITHUB_TOKEN` secret (created by the GH Action automatically) as an environment variable. This will allow the accurate identification of each build to avoid confusion when re-running a build.\n\n```\nname: Cypress testson: pushjobs:  cypress-run:    name: Cypress run    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress run        uses: cypress-io/github-action@v6        with:          record: true        env:          # pass GitHub token to detect new build vs re-run build          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```\n\n### Pull requests commit message is `merge SHA into SHA`[​](#Pull-requests-commit-message-is-merge-SHA-into-SHA \"Direct link to Pull-requests-commit-message-is-merge-SHA-into-SHA\")\n\nYou can overwrite the commit message sent to Cypress Cloud by setting an environment variable. See [Issue #124](https://github.com/cypress-io/github-action/issues/124) for more details.\n\n```\nname: Cypress testson: pushjobs:  cypress-run:    name: Cypress run    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress run        uses: cypress-io/github-action@v6        with:          record: true        env:          # overwrite commit message sent to Cypress Cloud          COMMIT_INFO_MESSAGE: ${{github.event.pull_request.title}}          # re-enable PR comment bot          COMMIT_INFO_SHA: ${{github.event.pull_request.head.sha}}\n```\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Test anything that runs in the browser with Cypress and GitHub Actions](https://www.youtube.com/watch?v=gokM_zEmWLA)",
  "title": "GitHub Actions | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/testing-types",
  "markdown": "# Testing Types | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   What is E2E Testing and Component Testing\n*   Considerations for each testing type\n*   How to choose which test type based on your scenario\n\n## End-to-End or Component Tests?[​](#End-to-End-or-Component-Tests \"Direct link to End-to-End or Component Tests?\")\n\nOne of the first decisions you will need to make on your testing journey is what type of test to create. Cypress offers two options: end-to-end and component tests. There are benefits and considerations for each choice, and the decision will depend on the needs of what you are currently trying to accomplish. In the end, you will probably have a combination of both types of tests for your app, but how do you choose right now?\n\nLet's go over each of these test types, the benefits they bring, things to consider, and scenarios for each.\n\n## What is E2E Testing?[​](#What-is-E2E-Testing \"Direct link to What is E2E Testing?\")\n\nE2E Testing is a technique that tests your app from the web browser through to the back end of your application, as well as testing integrations with third-party APIs and services. These types of tests are great at making sure your entire app is functioning as a cohesive whole.\n\nCypress runs end-to-end tests the same way users interact with your app by using a real browser, visiting URLs, viewing content, clicking on links and buttons, etc. Testing this way helps ensure your tests and the user's experience are the same.\n\nWriting end-to-end tests in Cypress can be done by developers building the application, specialized testing engineers, or a quality assurance team responsible for verifying an app is ready for release. Tests are written in code with an API that simulates the steps that a real user would take.\n\nEnd-to-end tests are great at verifying your app runs as intended, from the front end to the back end. However, end-to-end tests can be more difficult to set up, run, and maintain. There are often infrastructure needs in setting up a backend for testing purposes. Your team will need to develop a [strategy](https://docs.cypress.io/guides/end-to-end-testing/testing-your-app#Testing-strategies) on how to handle this complexity.\n\ntip\n\n### Benefits of end-to-end tests:[​](#Benefits-of-end-to-end-tests \"Direct link to Benefits of end-to-end tests:\")\n\n*   Ensure your app is functioning as a cohesive whole\n*   Tests match the user experience\n*   Can be written by developers or QA Teams\n*   Can be used for integration testing as well\n\ninfo\n\n### Considerations for end-to-end tests:[​](#Considerations-for-end-to-end-tests \"Direct link to Considerations for end-to-end tests:\")\n\n*   More difficult to set up, run, and maintain\n*   Provision testing infrastructure in CI\n*   Testing certain scenarios require more setup\n\nnote\n\n### Common scenarios for end-to-end tests:[​](#Common-scenarios-for-end-to-end-tests \"Direct link to Common scenarios for end-to-end tests:\")\n\n*   Validating critical workflows like authentication and purchasing\n*   Ensuring data is persisted and displayed through multiple screens\n*   Running Smoke Tests and System Checks before deployment\n\nTo learn more about end-to-end testing in Cypress, visit our guide on [Writing Your First End-to-end Test](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test).\n\n## What is Component Testing?[​](#What-is-Component-Testing \"Direct link to What is Component Testing?\")\n\nModern web frameworks provide ways to write applications by breaking them into smaller logical units called components. Components can range from fairly small (like a button) to more complex (like a registration form).\n\nBecause of their nature, components tend to be easily testable, which is where Cypress Component Testing comes into play.\n\nComponent tests differ from end-to-end tests in that instead of visiting a URL to pull up an entire app, a component can be \"mounted\" and tested on its own. This allows you to focus on testing only the component's functionality and not worrying about other nuances with testing a component as part of the larger application.\n\nTypically, a component test is written by the developers working on the component. The code for the test lives alongside the component code, and it is common for tests to be coded simultaneously with the component, helping developers verify the required functionality while building it.\n\nOne thing to consider, though, is even if all your component tests pass, it does not mean your app is functioning properly. Component tests do nothing to ensure that all the layers of your app are working well together. Therefore, a well-tested app has a combination of end-to-end and component tests, with each set of tests specializing in what they do best.\n\ntip\n\n### Benefits of component tests:[​](#Benefits-of-component-tests \"Direct link to Benefits of component tests:\")\n\n*   Easier to test components in isolation\n*   Fast and reliable\n*   Easy to set up specific scenarios in tests\n*   Don't rely on any external system to run\n\ninfo\n\n### Considerations for component tests:[​](#Considerations-for-component-tests \"Direct link to Considerations for component tests:\")\n\n*   Do not ensure overall app quality\n*   Do not call into external APIs/Services\n*   Usually written by developers working on the component\n\nnote\n\n### Common scenarios for component tests:[​](#Common-scenarios-for-component-tests \"Direct link to Common scenarios for component tests:\")\n\n*   Testing a date picker works properly for a variety of scenarios\n*   That a form shows and hides specific sections based on input\n*   Testing components coming out of a design system\n*   Testing logic not tied to a component (like unit tests!)\n\nTo learn more about component testing in Cypress, visit our guide on [Testing Your Components with Cypress](https://docs.cypress.io/guides/component-testing/overview).\n\n## Testing Type Comparison[​](#Testing-Type-Comparison \"Direct link to Testing Type Comparison\")\n\n|     | E2E | Component |\n| --- | --- | --- |\n| What's Tested | All app layers | Individual component |\n| Characteristics | Comprehensive, slower, more susceptible to flake | Specialized, quick, reliable |\n| Used For | Verifying app works as a cohesive whole | Testing functionality of individual component |\n| Written By | Developers, QA Team, SDETs | Developers, Designers |\n| CI Infrastructure | Often requires complex setup | None needed |\n| Initialization Command | `cy.visit(url)` | `cy.mount(<MyComponent />)` |",
  "title": "Testing Types | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests",
  "markdown": "# Writing and Organizing Tests | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to organize your test and support files.\n*   What languages are supported in your test files.\n*   How Cypress handles unit tests vs integration tests.\n*   How to group your tests.\n\ntip\n\n**Best Practices**\n\nWe gave a \"Best Practices\" conference talk at AssertJS (February 2018). This video demonstrates how to approach breaking down your application and organizing your tests.\n\n[AssertJS - Cypress Best Practices](https://www.youtube.com/watch?v=5XQOK0v_YRE)\n\n## Folder structure[​](#Folder-structure \"Direct link to Folder structure\")\n\nAfter adding a new project, Cypress will automatically scaffold out a suggested folder structure. By default it will create:\n\n*   JavaScript\n*   TypeScript\n\n```\nE2E:/cypress.config.js/cypress/fixtures/example.json/cypress/support/commands.js/cypress/support/e2e.jsComponent:/cypress.config.js/cypress/fixtures/example.json/cypress/support/commands.js/cypress/support/component.js/cypress/support/component-index.htmlBoth:/cypress.config.js/cypress/fixtures/example.json/cypress/support/commands.js/cypress/support/e2e.js/cypress/support/component.js/cypress/support/component-index.html\n```\n\n### Configuring Folder Structure[​](#Configuring-Folder-Structure \"Direct link to Configuring Folder Structure\")\n\nWhile Cypress allows you to configure where your tests, fixtures, and support files are located, if you're starting your first project, we recommend you use the above structure.\n\nYou can modify the folder configuration in your configuration file. See the [Cypress configuration](https://docs.cypress.io/guides/references/configuration) for more detail.\n\ninfo\n\n**What files should I add to my '.gitignore file' ?**\n\nCypress will create a [`screenshotsFolder`](https://docs.cypress.io/guides/references/configuration#Screenshots) and a [`videosFolder`](https://docs.cypress.io/guides/references/configuration#Videos) to store the screenshots and videos taken during the testing of your application. Many users will opt to add these folders to their `.gitignore` file. Additionally, if you are storing sensitive environment variables in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration) or [`cypress.env.json`](https://docs.cypress.io/guides/guides/environment-variables#Option-2-cypressenvjson), these should also be ignored when you check into source control.\n\n### Spec files[​](#Spec-files \"Direct link to Spec files\")\n\nTest files are located in `cypress/e2e` by default, but can be [configured](https://docs.cypress.io/guides/references/configuration#e2e) to another directory. Test files may be written as:\n\n*   `.js`\n*   `.jsx`\n*   `.ts`\n*   `.tsx`\n*   `.coffee`\n*   `.cjsx`\n\nCypress also supports `ES2015` out of the box. You can use either `ES2015 modules` or `CommonJS modules`. This means you can `import` or `require` both **npm packages** and **local relative modules**.\n\nTo see an example of every command used in Cypress, open the [`2-advanced-examples` folder](https://github.com/cypress-io/cypress-example-kitchensink/tree/master/cypress/e2e/2-advanced-examples) within your `cypress/e2e` folder.\n\n### Fixture Files[​](#Fixture-Files \"Direct link to Fixture Files\")\n\nFixtures are used as external pieces of static data that can be used by your tests. Fixture files are located in `cypress/fixtures` by default, but can be [configured](https://docs.cypress.io/guides/references/configuration#Folders--Files) to another directory.\n\nYou would typically use them with the [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) command and most often when you're stubbing [Network Requests](https://docs.cypress.io/guides/guides/network-requests).\n\n### Asset Files[​](#Asset-Files \"Direct link to Asset Files\")\n\nThere are some folders that may be generated after a test run, containing assets that were generated during the test run.\n\nYou may consider adding these folders to your `.gitignore` file to ignore checking these files into source control.\n\n#### Download Files[​](#Download-Files \"Direct link to Download Files\")\n\nAny files downloaded while testing an application's file download feature will be stored in the [`downloadsFolder`](https://docs.cypress.io/guides/references/configuration#Downloads) which is set to `cypress/downloads` by default.\n\n```\n/cypress  /downloads    - records.csv\n```\n\n#### Screenshot Files[​](#Screenshot-Files \"Direct link to Screenshot Files\")\n\nIf screenshots were taken via the [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) command or automatically when a test fails, the screenshots are stored in the [`screenshotsFolder`](https://docs.cypress.io/guides/references/configuration#Screenshots) which is set to `cypress/screenshots` by default.\n\n```\n/cypress  /screenshots    /app.cy.js      - Navigates to main menu (failures).png\n```\n\nTo learn more about screenshots and settings available, see [Screenshots and Videos](https://docs.cypress.io/guides/guides/screenshots-and-videos#Screenshots)\n\n#### Video Files[​](#Video-Files \"Direct link to Video Files\")\n\nAny videos recorded of the run are stored in the [`videosFolder`](https://docs.cypress.io/guides/references/configuration#Videos) which is set to `cypress/videos` by default.\n\n```\n/cypress  /videos    - app.cy.js.mp4\n```\n\n#### Asset File Paths[​](#Asset-File-Paths \"Direct link to Asset File Paths\")\n\nGenerated screenshots and videos are saved inside their respective folders (`cypress/screenshots`, `cypress/videos`). The paths of the generated files will be stripped of any common ancestor paths shared between all spec files found by the `specPattern` option (or via the `--spec` command line option or `spec` module API option, if specified)\n\n**Example 1:**\n\n*   Spec file found\n    *   `cypress/e2e/path/to/file/one.cy.js`\n*   Common ancestor paths (calculated at runtime)\n    *   `cypress/e2e/path/to/file`\n*   Generated screenshot file\n    *   `cypress/screenshots/one.cy.js/your-screenshot.png`\n*   Generated video file\n    *   `cypress/videos/one.cy.js.mp4`\n\n**Example 2:**\n\n*   Spec files found\n    *   `cypress/e2e/path/to/file/one.cy.js`\n    *   `cypress/e2e/path/to/two.cy.js`\n*   Common ancestor paths (calculated at runtime)\n    *   `cypress/e2e/path/to/`\n*   Generated screenshot files\n    *   `cypress/screenshots/file/one.cy.js/your-screenshot.png`\n    *   `cypress/screenshots/two.cy.js/your-screenshot.png`\n*   Generated video files\n    *   `cypress/videos/file/one.cy.js.mp4`\n    *   `cypress/videos/two.cy.js.mp4`\n\n#### Assets in Cypress Cloud[​](#Assets-in-Cypress-Cloud \"Direct link to Assets in Cypress Cloud\")\n\n![View of Test Replay](https://docs.cypress.io/img/guides/cloud/test-replay/test-replay-ui.png)\n\nInstead of administering assets yourself, you can [save them to the cloud with Cypress Cloud](https://docs.cypress.io/guides/cloud/recorded-runs#Run-Details).\n\nReplay the test as it executed during the recorded run with full debug capability using [![](https://docs.cypress.io/img/guides/cloud/test-replay/replay-icon.svg) Test Replay](https://docs.cypress.io/guides/cloud/test-replay).\n\nScreenshots and videos are stored permanently, attached to their respective test results, and easily shared or browsed through our web interface. To learn more about videos and settings available, see [Screenshots and Videos](https://docs.cypress.io/guides/guides/screenshots-and-videos#Screenshots).\n\n### Plugins file[​](#Plugins-file \"Direct link to Plugins file\")\n\ncaution\n\n**Deprecated**\n\nConfiguring plugins via `cypress/plugins/index.js` is no longer supported as of Cypress version 10.0.0.\n\nWe recommend that you update your configuration. Please see the [plugins guide](https://docs.cypress.io/guides/tooling/plugins-guide) and the [migration guide](https://docs.cypress.io/guides/references/migration-guide) for more information on how to update your configuration.\n\nThe plugins file is a special file that executes in Node before the project is loaded, before the browser launches, and during your test execution. While the Cypress tests execute in the browser, the plugins file runs in the background Node process, giving your tests the ability to access the file system and the rest of the operating system by calling the [cy.task()](https://docs.cypress.io/api/commands/task) command.\n\nThe plugins file is a good place to define how you want to bundle the spec files via the [preprocessors](https://docs.cypress.io/api/plugins/preprocessors-api), how to find and launch the browsers via the [browser launch API](https://docs.cypress.io/api/plugins/browser-launch-api), and other cool things. Read our [plugins guide](https://docs.cypress.io/guides/tooling/plugins-guide) for more details and examples.\n\nThe initial imported plugins file can be [configured to another file](https://docs.cypress.io/guides/references/configuration#Folders--Files).\n\n### Support file[​](#Support-file \"Direct link to Support file\")\n\nTo include code before your test files, set the [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) path. By default, [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) is set to look for one of the following files:\n\n**Component:**\n\n*   `cypress/support/component.js`\n*   `cypress/support/component.jsx`\n*   `cypress/support/component.ts`\n*   `cypress/support/component.tsx`\n\n**E2E:**\n\n*   `cypress/support/e2e.js`\n*   `cypress/support/e2e.jsx`\n*   `cypress/support/e2e.ts`\n*   `cypress/support/e2e.tsx`\n\ndanger\n\nFor a given testing type, multiple matching `supportFile` files will result in an error when Cypress loads.\n\ninfo\n\n**supportFile per testing type**\n\nDepending on which [testing type](https://docs.cypress.io/guides/core-concepts/testing-types) you are using, you can configure your `supportFile` accordingly.\n\n*   [Component](https://docs.cypress.io/guides/references/configuration#component)\n*   [E2E](https://docs.cypress.io/guides/references/configuration#e2e)\n\nCypress automatically creates an example support file for each configured testing type, which has several commented out examples.\n\nThis file runs **before** every single spec file. We do this purely as a convenience mechanism so you don't have to import this file.\n\nBy default Cypress will automatically include type-specific support files. For E2E, the default is `cypress/support/e2e.{js,jsx,ts,tsx}`, and for Component Testing `cypress/support/component.{js,jsx,ts,tsx}`.\n\nThe support file is a great place to put reusable behavior such as [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands) or global overrides that you want applied and available to all of your spec files.\n\nThe initial imported support file can be configured to another file or turned off completely using the [supportFile](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) configuration. From your support file you can `import` or `require` other files to keep things organized.\n\nYou can define behaviors in a `before` or `beforeEach` within any of the `cypress/support` files:\n\n```\nbeforeEach(() => {  cy.log('I run before every test in every spec file!!!!!!')})\n```\n\n![Global hooks for tests](https://docs.cypress.io/img/guides/core-concepts/global-hooks.png)\n\ninfo\n\n**Note:** This example assumes you are already familiar with Mocha [hooks](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Hooks).\n\n#### Execution[​](#Execution \"Direct link to Execution\")\n\nCypress executes the support file before the spec file. For example, when Cypress executes a spec file via `cypress open` or `cypress run`, it executes the files in the following order:\n\n**e2e example:**\n\n1.  `support/e2e.js` (your support file)\n2.  `e2e/spec-a.cy.js` (your spec file)\n\n**component example:**\n\n1.  `support/component.js` (your support file)\n2.  `components/Button/Button.cy.js` (your spec file)\n\n### Troubleshooting[​](#Troubleshooting \"Direct link to Troubleshooting\")\n\nIf Cypress does not find the spec files for some reason, you can troubleshoot its logic by opening or running Cypress with [debug logs](https://docs.cypress.io/guides/references/troubleshooting#Print-DEBUG-logs) enabled:\n\n```\nDEBUG=cypress:server:specs npx cypress open## orDEBUG=cypress:server:specs npx cypress run\n```\n\nCypress is built on top of [Mocha](https://docs.cypress.io/guides/references/bundled-libraries#Mocha) and [Chai](https://docs.cypress.io/guides/references/bundled-libraries#Chai). We support both Chai's `BDD` and `TDD` assertion styles. Tests you write in Cypress will mostly adhere to this style.\n\nIf you're familiar with writing tests in JavaScript, then writing tests in Cypress will be a breeze.\n\ninfo\n\nTo start writing tests for your app, follow our guides for writing your first [Component](https://docs.cypress.io/guides/component-testing/overview) or [End-to-End](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test) test.\n\ninfo\n\nNeeding a low code approach to create tests? Use [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) to record your browser interactions.\n\n### Test Structure[​](#Test-Structure \"Direct link to Test Structure\")\n\nThe test interface, borrowed from [Mocha](https://docs.cypress.io/guides/references/bundled-libraries#Mocha), provides `describe()`, `context()`, `it()` and `specify()`.\n\n`context()` is identical to `describe()` and `specify()` is identical to `it()`, so choose whatever terminology works best for you.\n\n```\n// -- Start: Our Application Code --function add(a, b) {  return a + b}function subtract(a, b) {  return a - b}function divide(a, b) {  return a / b}function multiply(a, b) {  return a * b}// -- End: Our Application Code --// -- Start: Our Cypress Tests --describe('Unit test our math functions', () => {  context('math', () => {    it('can add numbers', () => {      expect(add(1, 2)).to.eq(3)    })    it('can subtract numbers', () => {      expect(subtract(5, 12)).to.eq(-7)    })    specify('can divide numbers', () => {      expect(divide(27, 9)).to.eq(3)    })    specify('can multiply numbers', () => {      expect(multiply(5, 4)).to.eq(20)    })  })})// -- End: Our Cypress Tests --\n```\n\n### Hooks[​](#Hooks \"Direct link to Hooks\")\n\nCypress also provides hooks (borrowed from [Mocha](https://docs.cypress.io/guides/references/bundled-libraries#Mocha)).\n\nThese are helpful to set conditions that you want to run before a set of tests or before each test. They're also helpful to clean up conditions after a set of tests or after each test.\n\n```\nbefore(() => {  // root-level hook  // runs once before all tests})beforeEach(() => {  // root-level hook  // runs before every test block})afterEach(() => {  // runs after each test block})after(() => {  // runs once all tests are done})describe('Hooks', () => {  before(() => {    // runs once before all tests in the block  })  beforeEach(() => {    // runs before each test in the block  })  afterEach(() => {    // runs after each test in the block  })  after(() => {    // runs once after all tests in the block  })})\n```\n\n#### The order of hook and test execution is as follows:[​](#The-order-of-hook-and-test-execution-is-as-follows \"Direct link to The order of hook and test execution is as follows:\")\n\n*   All `before()` hooks run (once)\n*   Any `beforeEach()` hooks run\n*   Tests run\n*   Any `afterEach()` hooks run\n*   All `after()` hooks run (once)\n\n### Excluding and Including Tests[​](#Excluding-and-Including-Tests \"Direct link to Excluding and Including Tests\")\n\nTo run a specified suite or test, append `.only` to the function. All nested suites will also be executed. This gives us the ability to run one test at a time and is the recommended way to write a test suite.\n\n```\n// -- Start: Our Application Code --function fizzbuzz(num) {  if (num % 3 === 0 && num % 5 === 0) {    return 'fizzbuzz'  }  if (num % 3 === 0) {    return 'fizz'  }  if (num % 5 === 0) {    return 'buzz'  }}// -- End: Our Application Code --// -- Start: Our Cypress Tests --describe('Unit Test FizzBuzz', () => {  function numsExpectedToEq(arr, expected) {    // loop through the array of nums and make    // sure they equal what is expected    arr.forEach((num) => {      expect(fizzbuzz(num)).to.eq(expected)    })  }  it.only('returns \"fizz\" when number is multiple of 3', () => {    numsExpectedToEq([9, 12, 18], 'fizz')  })  it('returns \"buzz\" when number is multiple of 5', () => {    numsExpectedToEq([10, 20, 25], 'buzz')  })  it('returns \"fizzbuzz\" when number is multiple of both 3 and 5', () => {    numsExpectedToEq([15, 30, 60], 'fizzbuzz')  })})\n```\n\nTo skip a specified suite or test, append `.skip()` to the function. All nested suites will also be skipped.\n\n```\nit.skip('returns \"fizz\" when number is multiple of 3', () => {  numsExpectedToEq([9, 12, 18], 'fizz')})\n```\n\n### Test Isolation[​](#Test-Isolation \"Direct link to Test Isolation\")\n\ntip\n\n**Best Practice:** Tests should always be able to be run independently from one another **and still pass**.\n\nAs stated in our mission, we hold ourselves accountable to champion a testing process that actually works, and have built Cypress to guide developers towards writing independent tests from the start.\n\nWe do this by cleaning up test state and the browser context _before_ each test to ensure that the operation of one test does not affect another test later on. The goal for each test should be to **reliably pass** whether run in isolation or consecutively with other tests. Having tests that depend on the state of an earlier test can potentially cause nondeterministic test failures which makes debugging challenging.\n\nThe behavior of running tests in a clean browser context is described as `testIsolation`.\n\nThe test isolation is a global configuration and can be overridden for end-to-end testing at the `describe` level with the [`testIsolation`](https://docs.cypress.io/guides/references/configuration#e2e) option.\n\nTo learn more about this behavior and the trade-offs of disabling it, review our [Test Isolation guide](https://docs.cypress.io/guides/core-concepts/test-isolation).\n\n### Test Configuration[​](#Test-Configuration \"Direct link to Test Configuration\")\n\nIt is possible to apply [test configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration) values to a suite or test. Pass a configuration object to the test or suite function as the second argument.\n\nThis configuration will take effect during the suite or tests where they are set then return to their previous default values after the suite or tests are complete.\n\n#### Syntax[​](#Syntax \"Direct link to Syntax\")\n\n```\ndescribe(name, config, fn)context(name, config, fn)it(name, config, fn)specify(name, config, fn)\n```\n\n#### Allowed config values[​](#Allowed-config-values \"Direct link to Allowed config values\")\n\ncaution\n\n**Note:** Some configuration values are readonly and cannot be changed via test configuration. Be sure to review the list of [test configuration options](https://docs.cypress.io/guides/references/configuration#Test-Configuration).\n\n#### Suite configuration[​](#Suite-configuration \"Direct link to Suite configuration\")\n\nIf you want to target a suite of tests to run or be excluded when run in a specific browser, you can override the `browser` configuration within the suite configuration. The `browser` option accepts the same arguments as [Cypress.isBrowser()](https://docs.cypress.io/api/cypress-api/isbrowser).\n\nThe following suite of tests will be skipped if running tests in Chrome browsers.\n\n```\ndescribe('When NOT in Chrome', { browser: '!chrome' }, () => {  it('Shows warning', () => {    cy.get('[data-testid=\"browser-warning\"]').should(      'contain',      'For optimal viewing, use Chrome browser'    )  })  it('Links to browser compatibility doc', () => {    cy.get('a.browser-compat')      .should('have.attr', 'href')      .and('include', 'browser-compatibility')  })})\n```\n\nThe following suite of tests will only execute when running in the Firefox browser. It will overwrite the viewport resolution in one of the tests, and will merge any current environment variables with the provided ones.\n\n```\ndescribe(  'When in Firefox',  {    browser: 'firefox',    viewportWidth: 1024,    viewportHeight: 700,    env: {      DEMO: true,      API: 'http://localhost:9000',    },  },  () => {    it('Sets the expected viewport and API URL', () => {      expect(cy.config('viewportWidth')).to.equal(1024)      expect(cy.config('viewportHeight')).to.equal(700)      expect(cy.env('API')).to.equal('http://localhost:9000')    })    it(      'Uses the closest API environment variable',      {        env: {          API: 'http://localhost:3003',        },      },      () => {        expect(cy.env('API')).to.equal('http://localhost:3003')        // other environment variables remain unchanged        expect(cy.env('DEMO')).to.be.true      }    )  })\n```\n\n#### Single test configuration[​](#Single-test-configuration \"Direct link to Single test configuration\")\n\nYou can configure the number of retry attempts during `cypress run` or `cypress open`. See [Test Retries](https://docs.cypress.io/guides/guides/test-retries) for more information.\n\n```\nit('should redirect unauthenticated user to sign-in page', {    retries: {      runMode: 3,      openMode: 2    }  } () => {    // test code...  })})\n```\n\n### Dynamically Generate Tests[​](#Dynamically-Generate-Tests \"Direct link to Dynamically Generate Tests\")\n\nYou can dynamically generate tests using JavaScript.\n\n```\ndescribe('if your app uses jQuery', () => {  ;['mouseover', 'mouseout', 'mouseenter', 'mouseleave'].forEach((event) => {    it('triggers event: ' + event, () => {      // if your app uses jQuery, then we can trigger a jQuery      // event that causes the event callback to fire      cy.get('#with-jquery')        .invoke('trigger', event)        .get('[data-testid=\"messages\"]')        .should('contain', 'the event ' + event + 'was fired')    })  })})\n```\n\nThe code above will produce a suite with 4 tests:\n\n```\n> if your app uses jQuery  > triggers event: 'mouseover'  > triggers event: 'mouseout'  > triggers event: 'mouseenter'  > triggers event: 'mouseleave'\n```\n\n### Assertion Styles[​](#Assertion-Styles \"Direct link to Assertion Styles\")\n\nCypress supports both BDD (`expect`/`should`) and TDD (`assert`) style plain assertions. [Read more about plain assertions.](https://docs.cypress.io/guides/references/assertions)\n\n```\nit('can add numbers', () => {  expect(add(1, 2)).to.eq(3)})it('can subtract numbers', () => {  assert.equal(subtract(5, 12), -7, 'these numbers are equal')})\n```\n\nThe [.should()](https://docs.cypress.io/api/commands/should) command and its alias [.and()](https://docs.cypress.io/api/commands/and) can also be used to more easily chain assertions off of Cypress commands. [Read more about assertions.](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions)\n\n```\ncy.wrap(add(1, 2)).should('equal', 3)\n```\n\n## Running tests[​](#Running-tests \"Direct link to Running tests\")\n\nYou can run a test by clicking on the spec filename. For example the [Cypress RealWorld App](https://github.com/cypress-io/cypress-example-realworld) has multiple test files, but below we run the \"new-transaction.spec.ts\" test file by clicking on it.\n\n![Running a single spec](https://docs.cypress.io/img/guides/core-concepts/run-single-spec.gif)\n\n## Test statuses[​](#Test-statuses \"Direct link to Test statuses\")\n\nAfter the Cypress spec completes every test has one of four statuses: **passed**, **failed**, **pending**, or **skipped**. The behavior of these statuses are inherited from the Mocha, since this is the test runner leveraged by Cypress.\n\n### Passed[​](#Passed \"Direct link to Passed\")\n\nPassed tests have successfully completed all their hooks and commands without failing any assertions. The test screenshot below shows a passed test:\n\n![Cypress with a single passed test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-passing-test.png)\n\nNote that a test can pass after several [test retries](https://docs.cypress.io/guides/guides/test-retries). In that case the Command Log shows some failed attempts, but ultimately the entire test finishes successfully.\n\n### Failed[​](#Failed \"Direct link to Failed\")\n\nGood news - the failed hook or test has found a problem. Could be much worse - it could be a user hitting this bug!\n\n![Cypress with a single failed test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-failing-test.png)\n\nAfter a test fails, the [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) or screenshots and videos with Cypress Cloud can help find the problem so it can be fixed.\n\n### Pending[​](#Pending \"Direct link to Pending\")\n\nYou can write _placeholder_ tests in several ways as shown below, and Cypress knows NOT to run them. Additionally, you can conditionally specify which browser(s) and tests should run, including if the test should not run for the browser currently being tested, it is marked as _pending_.\n\nCypress marks all the tests below as _pending_.\n\n```\ndescribe('TodoMVC', () => {  it('is not written yet')  it.skip('adds 2 todos', function () {    cy.visit('/')    cy.get('[data-testid=\"new-todo\"]').as('new').type('learn testing{enter}')    cy.get('@new').type('be cool{enter}')    cy.get('[data-testid=\"todo-list\"] li').should('have.length', 100)  })  xit('another test', () => {    expect(false).to.true  })  it('only test chrome', { browser: 'chrome' }, () => {    cy.visit('/')    cy.contains('To Do')  })})\n```\n\nAll four tests above are marked _pending_ when Cypress finishes running the spec file.\n\n![Cypress with four pending test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-pending-tests.png)\n\nSo remember - if you (the test writer) knowingly skip a test using one of the above three ways, Cypress counts it as a _pending_ test.\n\n### Skipped[​](#Skipped \"Direct link to Skipped\")\n\nThe last test status is for tests that you _meant_ to run, but these tests were skipped due to some run-time error. For example, imagine a group of tests sharing the same `beforeEach` hook - where you visit the page in the `beforeEach` hook.\n\n```\n/// <reference types=\"cypress\" />describe('TodoMVC', () => {  beforeEach(() => {    cy.visit('/')  })  it('hides footer initially', () => {    cy.get('[data-testid=\"filters\"]').should('not.exist')  })  it('adds 2 todos', () => {    cy.get('[data-testid=\"new-todo\"]').as('new').type('learn testing{enter}')    cy.get('@new').type('be cool{enter}')    cy.get('[data-testid=\"todo-list\"] li').should('have.length', 2)  })})\n```\n\nIf the `beforeEach` hook completes and both tests finish, two tests are passing.\n\n![Cypress showing two passing tests](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-2-tests-passing.png)\n\nBut what happens if a command inside the `beforeEach` hook fails? For example, let's pretend we want to visit a non-existent page `/does-not-exist` instead of the `/`. If we change our `beforeEach` to fail:\n\n```\nbeforeEach(() => {  cy.visit('/does-not-exist')})\n```\n\nWhen Cypress starts executing the first test, the `beforeEach` hook fails. Now the first test is marked as **failed**. BUT if the `beforeEach` hook failed once, why would we execute it _again_ before the second test? It would just fail the same way! So Cypress _skips_ the remaining tests in that block, because they would also fail due to the `beforeEach` hook failure.\n\n![Cypress showing one failed and one skipped test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-failed-and-skipped-tests.png)\n\nIf we collapse the test commands, we can see the empty box marking the skipped test \"adds 2 todos\".\n\n![Cypress showing one skipped test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-skipped-test.png)\n\nThe tests that were meant to be executed but were skipped due to some run-time problem are marked \"skipped\" by Cypress. This is typically observed when a `before`, `beforeEach` or `afterEach` hook fails.\n\n**Tip:** read the blog post [Writing Test Progress](https://glebbahmutov.com/blog/writing-tests-progress/) to learn how to use the pending tests to tracking the test strategy implementation.\n\n## Watching tests[​](#Watching-tests \"Direct link to Watching tests\")\n\nWhen running in using [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open), Cypress watches the filesystem for changes to your spec files. Soon after adding or updating a test Cypress will reload it and run all of the tests in that spec file.\n\nThis makes for a productive development experience because you can add and edit tests as you're implementing a feature and the Cypress user interface will always reflect the results of your latest edits.\n\ninfo\n\nRemember to use [`.only`](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Excluding-and-Including-Tests) to limit which tests are run: this can be especially useful when you've got a lot of tests in a single spec file that you're constantly editing; consider also splitting your tests into smaller files each dealing with logically related behavior.\n\n### What is watched?[​](#What-is-watched \"Direct link to What is watched?\")\n\n#### Files[​](#Files \"Direct link to Files\")\n\n*   [Cypress configuration](https://docs.cypress.io/guides/references/configuration)\n*   [cypress.env.json](https://docs.cypress.io/guides/guides/environment-variables)\n\n#### Folders[​](#Folders \"Direct link to Folders\")\n\n*   E2E directory (`cypress/e2e/` by default)\n*   Support directory (`cypress/support/` by default)\n\nThe folder, the files within the folder, and all child folders and their files (recursively) are watched.\n\ninfo\n\nThose folder paths refer to the [default folder paths](https://docs.cypress.io/guides/references/configuration#Folders--Files). If you've configured Cypress to use different folder paths then the folders specific to your configuration will be watched.\n\n### What isn't watched?[​](#What-isnt-watched \"Direct link to What isn't watched?\")\n\nEverything else; this includes, but isn't limited to, the following:\n\n*   Your application code\n*   `node_modules`\n*   `cypress/fixtures/`\n\nIf you're developing using a modern JS-based web application stack then you've likely got support for some form of hot module replacement which is responsible for watching your application code—HTML, CSS, JS, etc.—and transparently reloading your application in response to changes.\n\n### Configuration[​](#Configuration \"Direct link to Configuration\")\n\nSet the [`watchForFileChanges`](https://docs.cypress.io/guides/references/configuration#Global) configuration property to `false` to disable file watching.\n\ncaution\n\n**Nothing** is watched during [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\nThe `watchForFileChanges` property is only in effect when running Cypress using [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open).\n\nThe component responsible for the file-watching behavior in Cypress is the [`webpack-preprocessor`](https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor). This is the default file-watcher packaged with Cypress.\n\nIf you need further control of the file-watching behavior you can configure this preprocessor explicitly: it exposes options that allow you to configure behavior such as _what_ is watched and the delay before emitting an \"update\" event after a change.\n\nCypress also ships other [file-watching preprocessors](https://docs.cypress.io/plugins#preprocessors); you'll have to configure these explicitly if you want to use them.\n\n*   [Cypress Watch Preprocessor](https://github.com/cypress-io/cypress-watch-preprocessor)\n*   [Cypress webpack Preprocessor](https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor)",
  "title": "Writing and Organizing Tests | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/introduction-to-cypress",
  "markdown": "# Introduction to Cypress | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress queries the DOM\n*   How Cypress manages subjects and chains of commands\n*   What assertions look like and how they work\n*   How timeouts are applied to commands\n\ntip\n\n**Important!**\n\n**This is the single most important guide** for understanding how to test with Cypress. Read it. Understand it. Ask questions about it so that we can improve it.\n\nAfter you're done, we suggest watching some of our [Tutorial Videos](https://docs.cypress.io/examples/tutorials).\n\n## Cypress Can Be Simple (Sometimes)[​](#Cypress-Can-Be-Simple-Sometimes \"Direct link to Cypress Can Be Simple (Sometimes)\")\n\nSimplicity is all about getting more done with less typing. Let's look at an example:\n\n*   End-to-End Test\n*   Component Test\n\n```\ndescribe('Post Resource', () => {  it('Creating a New Post', () => {    cy.visit('/posts/new') // 1.    cy.get(\"input.post-title\") // 2.      .type(\"My First Post\"); // 3.    cy.get(\"input.post-body\") // 4.      .type(\"Hello, world!\"); // 5.    cy.contains(\"Submit\") // 6.      .click(); // 7.    cy.get(\"h1\") // 8.      .should(\"contain\", \"My First Post\");  });});\n```\n\nCan you read this? If you did, it might sound something like this:\n\nnote\n\n1.  _Visit page at `/posts/new` (or mount the `PostBuilder` component)._\n2.  _Find the `<input>` with class `post-title`._\n3.  _Type \"My First Post\" into it._\n4.  _Find the `<input>` with class `post-body`._\n5.  _Type \"Hello, world!\" into it._\n6.  _Find the element containing the text `Submit`._\n7.  _Click it._\n8.  _Find the `h1` tag, ensure it contains the text \"My First Post\"._\n\nThis is a relatively straightforward test, but consider how much code has been covered by it, both on the client and the server!\n\nFor the remainder of this guide, we'll explore the basics of Cypress that make this example work. We'll demystify the rules Cypress follows so you can productively test your application to act as much like a user as possible, as well as discuss how to take shortcuts when it's useful.\n\n## Querying Elements[​](#Querying-Elements \"Direct link to Querying Elements\")\n\n### Cypress is Like jQuery[​](#Cypress-is-Like-jQuery \"Direct link to Cypress is Like jQuery\")\n\nIf you've used [jQuery](https://jquery.com/) before, you may be used to querying for elements like this:\n\nIn Cypress, querying elements is the same:\n\nIn fact, Cypress [bundles jQuery](https://docs.cypress.io/guides/references/bundled-libraries#Other-Library-Utilities) and exposes many of its DOM traversal methods to you so you can work with complex HTML structures with ease using APIs you're already familiar with.\n\n```\n// Each Cypress query is equivalent to its jQuery counterpart.cy.get('#main-content').find('.article').children('img[src^=\"/static\"]').first()\n```\n\ntip\n\n**Core Concept**\n\nCypress leverages jQuery's powerful selector engine to help make tests familiar and readable for modern web developers.\n\nInterested in the best practices for selecting elements? [Read here](https://docs.cypress.io/guides/references/best-practices#Selecting-Elements).\n\nAccessing the DOM elements returned from the query works differently, however:\n\n```\n// This is fine, jQuery returns the element synchronously.const $jqElement = $('.element')// This will not work! Cypress does not return the element synchronously.const $cyElement = cy.get('.element')\n```\n\nLet's look at why this is...\n\n### Cypress is _Not_ Like jQuery[​](#Cypress-is-Not-Like-jQuery \"Direct link to Cypress-is-Not-Like-jQuery\")\n\n**Question:** What happens when jQuery can't find any matching DOM elements from its selector?\n\n**Answer:** _Oops!_ It returns an empty jQuery collection. We've got a real object to work with, but it doesn't contain the element we wanted. So we start adding conditional checks and retrying our queries manually.\n\n```\n// $() returns immediately with an empty collection.const $myElement = $('.element').first()// Leads to ugly conditional checks// and worse - flaky tests!if ($myElement.length) {  doSomething($myElement)}\n```\n\n**Question:** What happens when Cypress can't find any matching DOM elements from its selector?\n\n**Answer:** _No big deal!_ Cypress automatically retries the query until either:\n\n#### 1\\. The element is found[​](#1-The-element-is-found \"Direct link to 1. The element is found\")\n\n```\ncy  // cy.get() looks for '#element', repeating the query until...  .get('#element')  // ...it finds the element!  // You can now work with it by using .then  .then(($myElement) => {    doSomething($myElement)  })\n```\n\n#### 2\\. A set timeout is reached[​](#2-A-set-timeout-is-reached \"Direct link to 2. A set timeout is reached\")\n\n```\ncy  // cy.get() looks for '#element-does-not-exist', repeating the query until...  // ...it doesn't find the element before its timeout.  // Cypress halts and fails the test.  .get('#element-does-not-exist')  // ...this code is never run...  .then(($myElement) => {    doSomething($myElement)  })\n```\n\nThis makes Cypress robust and immune to dozens of common problems that occur in other testing tools. Consider all the circumstances that could cause querying a DOM element to fail:\n\n*   The DOM has not loaded yet.\n*   Your framework hasn't finished bootstrapping.\n*   An XHR request hasn't responded.\n*   An animation hasn't completed.\n*   and on and on...\n\nBefore, you'd be forced to write custom code to protect against any and all of these issues: a nasty mashup of arbitrary waits, conditional retries, and null checks littering your tests. Not in Cypress! With built-in retrying and [customizable timeouts](https://docs.cypress.io/guides/references/configuration#Timeouts), Cypress sidesteps all of these flaky issues.\n\ntip\n\n**Core Concept**\n\nCypress wraps all DOM queries with robust retry-and-timeout logic that better suits how real web apps work. We trade a minor change in how we find DOM elements for a major stability upgrade to all of our tests. Banishing flake for good!\n\ninfo\n\nIn Cypress, when you want to interact with a DOM element directly, call [`.then()`](https://docs.cypress.io/api/commands/then) with a callback function that receives the element as its first argument. When you want to skip the retry-and-timeout functionality entirely and perform traditional synchronous work, use [`Cypress.$`](https://docs.cypress.io/api/utilities/$).\n\n### Querying by Text Content[​](#Querying-by-Text-Content \"Direct link to Querying by Text Content\")\n\nAnother way to locate things -- a more human way -- is to look them up by their content, by what the user would see on the page. For this, there's the handy [`cy.contains()`](https://docs.cypress.io/api/commands/contains) command, for example:\n\n```\n// Find an element in the document containing the text 'New Post'cy.contains('New Post')// Find an element within '.main' containing the text 'New Post'cy.get('.main').contains('New Post')\n```\n\nThis is helpful when writing tests from the perspective of a user interacting with your app. They only know that they want to click the button labeled \"Submit\". They have no idea that it has a `type` attribute of `submit`, or a CSS class of `my-submit-button`.\n\ncaution\n\n**Internationalization**\n\nIf your app is translated into multiple languages for i18n, make sure you consider the implications of using user-facing text to find DOM elements!\n\n### When Elements Are Missing[​](#When-Elements-Are-Missing \"Direct link to When Elements Are Missing\")\n\nAs we showed above, Cypress anticipates the asynchronous nature of web applications and doesn't fail immediately the first time an element is not found. Instead, Cypress gives your app a window of time to finish whatever it may be doing!\n\nThis is known as a `timeout`, and most commands can be customized with specific timeout periods ([the default timeout is 4 seconds](https://docs.cypress.io/guides/references/configuration#Timeouts)). These Commands will list a `timeout` option in their API documentation, detailing how to set the number of milliseconds you want to continue to try finding the element.\n\n```\n// Give this element 10 seconds to appearcy.get('.my-slow-selector', { timeout: 10000 })\n```\n\nYou can also set the timeout globally via the [configuration setting: `defaultCommandTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts).\n\ntip\n\n**Core Concept**\n\nTo match the behavior of web applications, Cypress is asynchronous and relies on timeouts to know when to stop waiting on an app to get into the expected state. Timeouts can be configured globally, or on a per-command basis.\n\ninfo\n\n**Timeouts and Performance**\n\nThere is a performance tradeoff here: **tests that have longer timeout periods take longer to fail**. Commands always proceed as soon as their expected criteria is met, so working tests will be performed as fast as your application allows. A test that fails due to timeout will consume the entire timeout period, by design. This means that while you _may_ want to increase your timeout period to suit specific parts of your app, you _don't_ want to make it \"extra long, just in case\".\n\nLater in this guide we'll go into much more detail about [Implicit Assertions](#Implicit-Assertions) and [Timeouts](#Timeouts).\n\n## Chains of Commands[​](#Chains-of-Commands \"Direct link to Chains of Commands\")\n\nIt's very important to understand the mechanism Cypress uses to chain commands together. It manages a Promise chain on your behalf, with each command yielding a 'subject' to the next command, until the chain ends or an error is encountered. The developer should not need to use Promises directly, but understanding how they work is helpful!\n\n### Interacting With Elements[​](#Interacting-With-Elements \"Direct link to Interacting With Elements\")\n\nAs we saw in the initial example, Cypress allows you to click on and type into elements on the page by using [`.click()`](https://docs.cypress.io/api/commands/click) and [`.type()`](https://docs.cypress.io/api/commands/type) action commands with a [`cy.get()`](https://docs.cypress.io/api/commands/get) or [`cy.contains()`](https://docs.cypress.io/api/commands/contains) query command. This is a great example of chaining in action. Let's see it again:\n\n```\ncy.get('textarea.post-body').type('This is an excellent post.')\n```\n\nWe're chaining [`.type()`](https://docs.cypress.io/api/commands/type) onto [`cy.get()`](https://docs.cypress.io/api/commands/get), telling it to type into the subject yielded from the [`cy.get()`](https://docs.cypress.io/api/commands/get) query, which will be a DOM element.\n\nHere are even more action commands Cypress provides to interact with your app:\n\n*   [`.blur()`](https://docs.cypress.io/api/commands/blur) - Make a focused DOM element blur.\n*   [`.focus()`](https://docs.cypress.io/api/commands/focus) - Focus on a DOM element.\n*   [`.clear()`](https://docs.cypress.io/api/commands/clear) - Clear the value of an input or textarea.\n*   [`.check()`](https://docs.cypress.io/api/commands/check) - Check checkbox(es) or radio(s).\n*   [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck) - Uncheck checkbox(es).\n*   [`.select()`](https://docs.cypress.io/api/commands/select) - Select an `<option>` within a `<select>`.\n*   [`.dblclick()`](https://docs.cypress.io/api/commands/dblclick) - Double-click a DOM element.\n*   [`.rightclick()`](https://docs.cypress.io/api/commands/rightclick) - Right-click a DOM element.\n\nThese commands ensure [some guarantees](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) about what the state of the elements should be prior to performing their actions.\n\nFor example, when writing a [`.click()`](https://docs.cypress.io/api/commands/click) command, Cypress ensures that the element is able to be interacted with (like a real user would). It will automatically wait until the element reaches an \"actionable\" state by:\n\n*   Not being hidden\n*   Not being covered\n*   Not being disabled\n*   Not animating\n\nThis also helps prevent flake when interacting with your application in tests. You can usually override this behavior with a `force` option.\n\n### Asserting About Elements[​](#Asserting-About-Elements \"Direct link to Asserting About Elements\")\n\nAssertions let you do things like ensuring an element is visible or has a particular attribute, CSS class, or state. Assertions are commands that enable you to describe the _desired_ state of your application. Cypress will automatically wait until your elements reach this state, or fail the test if the assertions don't pass. Here's a quick look at assertions in action:\n\n```\ncy.get(':checkbox').should('be.disabled')cy.get('form').should('have.class', 'form-horizontal')cy.get('input').should('not.have.value', 'US')\n```\n\nIn each of these examples, it's important to note that Cypress will automatically _wait_ until these assertions pass. This prevents you from having to know or care about the precise moment your elements eventually do reach this state.\n\nWe will learn more about [assertions](#Assertions) later in this guide.\n\n### Subject Management[​](#Subject-Management \"Direct link to Subject Management\")\n\nA new Cypress chain always starts with `cy.[command]`, where what is yielded by the `command` establishes what other commands can be called next (chained).\n\n#### All commands yield a value.[​](#All-commands-yield-a-value \"Direct link to All commands yield a value.\")\n\nEach command specifies what value it yields. For example,\n\n*   [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies) yields `null`. You can chain off commands that yield `null`, as long as the next command doesn't expect to receive a subject.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) yields a DOM element, allowing further commands to be chained (assuming they expect a DOM subject) like [`.click()`](https://docs.cypress.io/api/commands/click) or even [`cy.contains()`](https://docs.cypress.io/api/commands/contains) again.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) yields the same subject it was originally given.\n\n#### Some commands require a previous subject.[​](#Some-commands-require-a-previous-subject \"Direct link to Some commands require a previous subject.\")\n\n*   [`.click()`](https://docs.cypress.io/api/commands/click) requires a DOM element from the previous command.\n*   [`.its()`](https://docs.cypress.io/api/commands/its) requires a subject, but it can be of any type.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) behaves differently depending on the previous subject. If chained directly off of `cy`, or if the previous command yielded `null`, it will look at the entire document. But if the subject is a DOM element, it will only look inside that container.\n*   [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies) does not require a previous subject - it can be chained off of anything, even [`.end()`](https://docs.cypress.io/api/commands/end).\n\n#### Examples:[​](#Examples \"Direct link to Examples:\")\n\nThis is actually much more intuitive than it sounds.\n\n```\ncy.clearCookies() // Yields null  .visit('/fixtures/dom.html') // Does not care about the previous subject.cy.get('.main-container') // Yields an array of matching DOM elements  .contains('Headlines') // Yields the first DOM element containing content  .click() // Yields same DOM element from previous command.\n```\n\ntip\n\n**Core Concept**\n\nCypress commands do not **return** their subjects, they **yield** them. Remember: Cypress commands are asynchronous and get queued for execution at a later time. During execution, subjects are yielded from one command to the next, and a lot of helpful Cypress code runs between each command to ensure everything is in order.\n\ninfo\n\n**Don't continue a chain after acting on the DOM**\n\nWhile it's possible in Cypress to act on the DOM and then continue chaining, this is usually unsafe, and can lead to stale elements. See the [Retry-ability Guide](https://docs.cypress.io/guides/core-concepts/retry-ability) for more details.\n\nBut the rule of thumb is simple: If you perform an action, like navigating the page, clicking a button or scrolling the viewport, end the chain of commands there and start fresh from `cy`.\n\ninfo\n\nTo work around the need to reference elements, Cypress has a feature [known as aliasing](https://docs.cypress.io/guides/core-concepts/variables-and-aliases). Aliasing helps you to **store** and **save** references for future use.\n\n#### Using [`.then()`](https://docs.cypress.io/api/commands/then) To Act On A Subject[​](#Using-then-To-Act-On-A-Subject \"Direct link to Using-then-To-Act-On-A-Subject\")\n\nWant to jump into the command flow and get your hands on the subject directly? No problem, add a [.then()](https://docs.cypress.io/api/commands/then) to your command chain. When the previous command resolves, it will call your callback function with the yielded subject as the first argument.\n\nIf you wish to continue chaining commands after your [`.then()`](https://docs.cypress.io/api/commands/then), you'll need to specify the subject you want to yield to those commands, which you can achieve with a return value other than `null` or `undefined`. Cypress will yield that to the next command for you.\n\n#### Let's look at an example:[​](#Lets-look-at-an-example \"Direct link to Let's look at an example:\")\n\n```\ncy  // Find the el with id 'some-link'  .get('#some-link')  .then(($myElement) => {    // ...massage the subject with some arbitrary code    // grab its href property    const href = $myElement.prop('href')    // strip out the 'hash' character and everything after it    return href.replace(/(#.*)/, '')  })  .then((href) => {    // href is now the new subject    // which we can work with now  })\n```\n\ntip\n\n**Core Concept**\n\nWe have many more examples and use cases of [cy.then()](https://docs.cypress.io/api/commands/then) in our [Core Concept Guide](https://docs.cypress.io/guides/core-concepts/variables-and-aliases) that teaches you how to properly deal with asynchronous code, when to use variables, and what aliasing is.\n\n#### Using Aliases to Refer to Previous Subjects[​](#Using-Aliases-to-Refer-to-Previous-Subjects \"Direct link to Using Aliases to Refer to Previous Subjects\")\n\nCypress has some added functionality for quickly referring back to past subjects called [Aliases](https://docs.cypress.io/guides/core-concepts/variables-and-aliases). It looks something like this:\n\n```\ncy.get('.my-selector')  .as('myElement') // sets the alias  .click()/* many more actions */cy.get('@myElement') // re-queries the DOM as before  .click()\n```\n\nThis lets us reuse our queries for more readable tests, and it automatically handles re-querying the DOM for us as it updates. This is particularly helpful when dealing with front end frameworks that do a lot of re-rendering!\n\n### Commands Are Asynchronous[​](#Commands-Are-Asynchronous \"Direct link to Commands Are Asynchronous\")\n\nIt is very important to understand that Cypress commands don't do anything at the moment they are invoked, but rather enqueue themselves to be run later. This is what we mean when we say Cypress commands are asynchronous.\n\n#### Take this short test, for example:[​](#Take-this-short-test-for-example \"Direct link to Take this short test, for example:\")\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('hides the thing when it is clicked', () => {  cy.visit('/my/resource/path') // Nothing happens yet  cy.get(\".hides-when-clicked\") // Still nothing happening    .should(\"be.visible\") // Still absolutely nothing    .click() // Nope, nothing  cy.get('.hides-when-clicked') // Still nothing happening    .should('not.be.visible') // Definitely nothing happening yet})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\nCypress doesn't kick off the browser automation until the test function exits.\n\n#### Mixing Async and Sync code[​](#Mixing-Async-and-Sync-code \"Direct link to Mixing Async and Sync code\")\n\nRemembering that Cypress commands run asynchronously is important if you are attempting to mix Cypress commands with synchronous code. Synchronous code will execute immediately - not waiting for the Cypress commands above it to execute.\n\n**Incorrect usage**\n\nIn the example below, the `el` evaluates immediately, before the `cy.visit()` has executed, so will always evaluate to an empty array.\n\n```\nit('does not work as we expect', () => {  cy.visit('/my/resource/path') // Nothing happens yet  cy.get('.awesome-selector') // Still nothing happening    .click() // Nope, nothing  // Cypress.$ is synchronous, so evaluates immediately  // there is no element to find yet because  // the cy.visit() was only queued to visit  // and did not actually visit the application  let el = Cypress.$('.new-el') // evaluates immediately as []  if (el.length) {    // evaluates immediately as 0    cy.get('.another-selector')  } else {    // this will always run    // because the 'el.length' is 0    // when the code executes    cy.get('.optional-selector')  }})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\n**Correct usage**\n\nBelow is one way the code above could be rewritten in order to ensure the commands run as expected.\n\n```\nit('does not work as we expect', () => {  cy.visit('/my/resource/path') // Nothing happens yet  cy.get('.awesome-selector') // Still nothing happening    .click() // Nope, nothing    .then(() => {      // placing this code inside the .then() ensures      // it runs after the cypress commands 'execute'      let el = Cypress.$('.new-el') // evaluates after .then()      if (el.length) {        cy.get('.another-selector')      } else {        cy.get('.optional-selector')      }    })})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\n**Incorrect usage**\n\nIn the example below, the check on the `username` value gets evaluated immediately, before the `cy.visit()` has executed, so will always evaluate to `undefined`.\n\n```\nit('test', () => {  let username = undefined // evaluates immediately as undefined  cy.visit('https://example.cypress.io') // Nothing happens yet  cy.get('.user-name') // Still, nothing happens yet    .then(($el) => {      // Nothing happens yet      // this line evaluates after the .then executes      username = $el.text()    })  // this evaluates before the .then() above  // so the username is still undefined  if (username) {    // evaluates immediately as undefined    cy.contains(username).click()  } else {    // this will always run    // because username will always    // evaluate to undefined    cy.contains('My Profile').click()  }})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\n**Correct usage**\n\nBelow is one way the code above could be rewritten in order to ensure the commands run as expected.\n\n```\nit('test', () => {  let username = undefined // evaluates immediately as undefined  cy.visit('https://example.cypress.io') // Nothing happens yet  cy.get('.user-name') // Still, nothing happens yet    .then(($el) => {      // Nothing happens yet      // this line evaluates after the .then() executes      username = $el.text()      // evaluates after the .then() executes      // it's the correct value gotten from the $el.text()      if (username) {        cy.contains(username).click()      } else {        cy.get('My Profile').click()      }    })})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\ntip\n\n**Core Concept**\n\nEach Cypress command (and chain of commands) returns immediately, having only been appended to a queue to be executed at a later time.\n\nYou purposefully **cannot** do anything useful with the return value from a command. Commands are enqueued and managed entirely behind the scenes.\n\nWe've designed our API this way because the DOM is a highly mutable object that constantly goes stale. For Cypress to prevent flake, and know when to proceed, we manage commands in a highly controlled deterministic way.\n\ninfo\n\n**Why can't I use async / await?**\n\nIf you're a modern JS programmer you might hear \"asynchronous\" and think: **why can't I just use `async/await`** instead of learning some proprietary API?\n\nCypress's APIs are built very differently from what you're likely used to: but these design patterns are incredibly intentional. We'll go into more detail later in this guide.\n\n#### Avoid loops[​](#Avoid-loops \"Direct link to Avoid loops\")\n\nUsing JavaScript loop commands like `while` can have unexpected effects. Let's say our application shows a random number on load.\n\n![Manually reloading the browser page until the number 7 appears](https://docs.cypress.io/img/guides/core-concepts/reload-page.gif)\n\nWe want the test to stop when it finds the number 7. If any other number is displayed the test reloads the page and checks again.\n\n**Note:** you can find this application and the correct test in our [Recipes](https://github.com/cypress-io/cypress-example-recipes#testing-the-dom).\n\n**Incorrect test**\n\nThe test written below WILL NOT work and most likely will crash your browser.\n\n```\nlet found7 = falsewhile (!found7) {  // this schedules an infinite number  // of \"cy.get...\" commands, eventually crashing  // before any of them have a chance to run  // and set found7 to true  cy.get('#result')    .should('not.be.empty')    .invoke('text')    .then(parseInt)    .then((number) => {      if (number === 7) {        found7 = true        cy.log('lucky **7**')      } else {        cy.reload()      }    })}\n```\n\nThe above test keeps adding more `cy.get('#result')` commands to the test chain without executing any! The chain of commands keeps growing, but never executes - since the test function never finishes running. The `while` loop never allows Cypress to start executing even the very first `cy.get(...)` command.\n\n**Correct test**\n\nWe need to give the test a chance to run a few commands before deciding if it needs to continue. Thus the correct test would use recursion.\n\n```\nconst checkAndReload = () => {  // get the element's text, convert into a number  cy.get('#result')    .should('not.be.empty')    .invoke('text')    .then(parseInt)    .then((number) => {      // if the expected number is found      // stop adding any more commands      if (number === 7) {        cy.log('lucky **7**')        return      }      // otherwise insert more Cypress commands      // by calling the function after reload      cy.wait(500, { log: false })      cy.reload()      checkAndReload()    })}cy.visit('public/index.html')checkAndReload()\n```\n\nThe test runs and correctly finishes.\n\n![Test reloads the page until the number 7 appears](https://docs.cypress.io/img/guides/core-concepts/lucky-7.gif)\n\nYou can see a short video going through this example at\n\n[https://www.youtube.com/watch?v=5Z8BaPNDfvA](https://www.youtube.com/watch?v=5Z8BaPNDfvA)\n\n### Commands Run Serially[​](#Commands-Run-Serially \"Direct link to Commands Run Serially\")\n\nAfter a test function is finished running, Cypress goes to work executing the commands that were enqueued using the `cy.*` command chains.\n\n#### Let's take another look at an example[​](#Lets-take-another-look-at-an-example \"Direct link to Let's take another look at an example\")\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('hides the thing when it is clicked', () => {  cy.visit('/my/resource/path') // 1.  cy.get('.hides-when-clicked') // 2    .should('be.visible') // 3    .click() // 4  cy.get('.hides-when-clicked') // 5    .should('not.be.visible') // 6});\n```\n\nThe test above would cause an execution in this order:\n\n1.  Visit the URL (or mount the component).\n2.  Find an element by its selector.\n3.  Assert that the element is visible.\n4.  Perform a click action on that element.\n5.  Find an element by its selector.\n6.  Assert that the element is no longer visible.\n\nThese actions will always happen serially (one after the other), never in parallel (at the same time). Why?\n\nTo illustrate this, let's revisit that list of actions and expose some of the hidden **✨ magic ✨** Cypress does for us at each step:\n\n1.  Visit the URL ✨ **and wait for the page load event to fire after all external resources have loaded** ✨ (or mount the component ✨ **and wait for the component to finish mounting** ✨)\n2.  Find an element by its selector ✨ **and retry until it is found in the DOM** ✨\n3.  Assert that the element is visible ✨ **and retry until the assertion passes** ✨\n4.  Perform a click action on that element ✨ **after we wait for the element to reach an actionable state** ✨\n5.  Find an element by its selector ✨ **and retry until it is found in the DOM** ✨\n6.  Assert that the element is no longer visible ✨ **and retry until the assertion passes** ✨\n\nAs you can see, Cypress does a lot of extra work to ensure the state of the application matches what our commands expect about it. Each command may resolve quickly (so fast you won't see them in a pending state) but others may take seconds, or even dozens of seconds to resolve.\n\nWhile most commands time out after a few seconds, other specialized commands that expect particular things to take much longer like [`cy.visit()`](https://docs.cypress.io/api/commands/visit) will naturally wait longer before timing out.\n\nThese commands have their own particular timeout values which are documented in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n\ntip\n\n**Core Concept**\n\nAny waiting or retrying that is necessary to ensure a step was successful must complete before the next step begins. If they don't complete successfully before the timeout is reached, the test will fail.\n\n### The Cypress Command Queue[​](#The-Cypress-Command-Queue \"Direct link to The Cypress Command Queue\")\n\nWhile the API may look similar to Promises, with its `then()` syntax, Cypress commands and queries are not promises - they are serial commands passed into a central queue, to be executed asynchronously at a later date. These commands are designed to deliver deterministic, repeatable and consistent tests.\n\nAlmost all commands come with built-in **[retry-ability](https://docs.cypress.io/guides/core-concepts/retry-ability)**. Without **[retry-ability](https://docs.cypress.io/guides/core-concepts/retry-ability)**, assertions would randomly fail. This would lead to flaky, inconsistent results.\n\ninfo\n\nWhile Cypress does have a [`.then()`](https://docs.cypress.io/api/commands/then) command, Cypress commands are not Promises and cannot be `await`ed. If you'd like to learn more about handling asynchronous Cypress Commands please read our [Variables and Aliases Guide](https://docs.cypress.io/guides/core-concepts/variables-and-aliases).\n\nCommands also have some design choices that developers who are used to promise-based testing may find unexpected. They are intentional decisions on Cypress' part, not technical limitations.\n\n1.  You cannot **race** or run multiple commands at the same time (in parallel).\n2.  You cannot add a `.catch` error handler to a failed command.\n\nThe whole purpose of Cypress (and what makes it very different from other testing tools) is to create consistent, non-flaky tests that perform identically from one run to the next. Making this happen isn't free - there are some trade-offs we make that may initially seem unfamiliar to developers accustomed to working with Promises or other libraries.\n\nLet's take a look at each trade-off in depth:\n\n#### You cannot race or run multiple commands at the same time[​](#You-cannot-race-or-run-multiple-commands-at-the-same-time \"Direct link to You cannot race or run multiple commands at the same time\")\n\nCypress guarantees that it will execute all of its commands and queries _deterministically_ and identically every time they are run.\n\nA lot of Cypress commands _mutate_ the state of the browser in some way.\n\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) automatically gets + sets cookies to and from the remote server.\n*   [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies) clears all of the browser cookies.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) causes your application to react to click events.\n\nNone of the above commands are _idempotent_; they all cause side effects. Racing commands is not possible because commands must be run in a controlled, serial manner in order to create consistency. Because integration and e2e tests primarily mimic the actions of a real user, Cypress models its command execution model after a real user working step by step.\n\n#### You cannot add a `.catch` error handler to a failed command[​](#You-cannot-add-a-catch-error-handler-to-a-failed-command \"Direct link to You-cannot-add-a-catch-error-handler-to-a-failed-command\")\n\nIn Cypress there is no built in error recovery from a failed command. A command _eventually_ passes, or if it fails, all remaining commands are not executed, and the test as a whole fails.\n\nYou might be wondering:\n\n> How do I create conditional control flow, using if/else? So that if an element does (or doesn't) exist, I choose what to do?\n\nCypress does not support this type of conditional control flow because it leads to non-deterministic tests - different runs may behave differently, which makes them less consistent and useful for verifying your application's correctness. In general, there are only a handful of very specific situations where you can or should create control flow using Cypress commands.\n\nWith that said, as long as you are aware of the potential pitfalls with control flow, it is possible to do this in Cypress! You can read all about how to do [conditional testing](https://docs.cypress.io/guides/core-concepts/conditional-testing) here.\n\n## Assertions[​](#Assertions \"Direct link to Assertions\")\n\nAs we mentioned previously in this guide:\n\nnote\n\nAssertions describe the **desired** state of your **elements**, your **objects**, and your **application**.\n\nWhat makes Cypress unique from other testing tools is that assertions **automatically retry**. Think of them as **guards** - assertions describe what your application should look like, and Cypress will automatically **block, wait, and retry** until it reaches that state.\n\n### Asserting in English[​](#Asserting-in-English \"Direct link to Asserting in English\")\n\nLet's look at how you'd describe an assertion in English:\n\nnote\n\nAfter clicking on this `<button>`, I expect its class to be `active`.\n\nTo express this in Cypress you'd write:\n\n```\ncy.get('button').click()cy.get('button').should('have.class', 'active')\n```\n\nThis above test will pass even if the `.active` class is applied to the button asynchronously, after an indeterminate period of time or even if the button is removed from the DOM entirely for a while (replaced with a waiting spinner, for example).\n\n```\n// even though we are adding the class// after two seconds...// this test will still pass!$('button').on('click', (e) => {  setTimeout(() => {    $(e.target).addClass('active')  }, 2000)})\n```\n\nHere's another example.\n\nnote\n\nAfter making an HTTP request to my server, I expect the response body to equal `{name: 'Jane'}`\n\nTo express this with an assertion you'd write:\n\n```\ncy.request('/users/1').its('body').should('deep.eq', { name: 'Jane' })\n```\n\n### When To Assert?[​](#When-To-Assert \"Direct link to When To Assert?\")\n\nDespite the dozens of assertions Cypress makes available to you, sometimes the best test may make no assertions at all! How can this be? Aren't assertions a basic part of testing?\n\n#### Consider this example:[​](#Consider-this-example \"Direct link to Consider this example:\")\n\n*   End-to-End Test\n*   Component Test\n\n```\ncy.visit('/home')cy.get('.main-menu').contains('New Project').click()cy.get('.title').type('My Awesome Project')cy.get('form').submit()\n```\n\nWithout a single explicit assertion, there are dozens of ways this test can fail. Here's a few:\n\n*   The initial [`cy.mount()`](https://docs.cypress.io/api/commands/mount) or [`cy.visit()`](https://docs.cypress.io/api/commands/visit) could respond with something other than success.\n*   Any of the [`cy.get()`](https://docs.cypress.io/api/commands/get) queries could fail to find their elements in the DOM.\n*   The element we want to [`.click()`](https://docs.cypress.io/api/commands/click) on could be covered by another element.\n*   The input we want to [`.type()`](https://docs.cypress.io/api/commands/type) into could be disabled.\n*   Form submission could result in a non-success status code.\n*   The in-page JS (the application under test) or the component could throw an error.\n\ntip\n\n**Core Concept**\n\nWith Cypress, you don't have to write explicit assertions to have a useful test. Without a single `expect()` or `.should()`, a few lines of Cypress can ensure thousands of lines of code are working properly across the client and server.\n\nThis is because many commands have built in Implicit Assertions which offer you a high level of confidence that your application is working as expected.\n\n### Implicit Assertions[​](#Implicit-Assertions \"Direct link to Implicit Assertions\")\n\nMany commands have default, built-in assertions, or rather have requirements that may cause it to fail without needing an explicit assertion you've added.\n\n#### For instance:[​](#For-instance \"Direct link to For instance:\")\n\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) expects the page to send `text/html` content with a `200` status code.\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) expects the remote server to exist and provide a response.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) expects the element with content to eventually exist in the DOM.\n*   [`cy.get()`](https://docs.cypress.io/api/commands/get) expects the element to eventually exist in the DOM.\n*   [`.find()`](https://docs.cypress.io/api/commands/find) also expects the element to eventually exist in the DOM.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) expects the element to eventually be in a _typeable_ state.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) expects the element to eventually be in an _actionable_ state.\n*   [`.its()`](https://docs.cypress.io/api/commands/its) expects to eventually find a property on the current subject.\n\nCertain commands may have a specific requirement that causes them to immediately fail without retrying, such as [`cy.request()`](https://docs.cypress.io/api/commands/request).\n\nOthers, such as DOM queries automatically [retry](https://docs.cypress.io/guides/core-concepts/retry-ability) and wait for their corresponding elements to exist before failing.\n\nAction commands automatically wait for their element to reach an [actionable state](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) before failing.\n\ntip\n\n**Core Concept**\n\nAll DOM commands automatically wait for their elements to exist in the DOM.\n\nYou **never** need to write [`.should('exist')`](https://docs.cypress.io/api/commands/should) after querying the DOM.\n\nMost commands give you the flexibility to override or bypass the default ways they can fail, typically by passing a `{force: true}` option.\n\n#### Example #1: Existence and Actionability[​](#Example-1-Existence-and-Actionability \"Direct link to Example #1: Existence and Actionability\")\n\n```\ncy  // there is an implicit assertion that this  // button must exist in the DOM before proceeding  .get('button')  // before issuing the click, this button must be \"actionable\"  // it cannot be disabled, covered, or hidden from view.  .click()\n```\n\nCypress will automatically _wait_ for elements to pass their implicit assertions. See [Timeouts](#Timeouts) below for more on how timeouts are determined.\n\n#### Example #2: Reversing the Implicit Assertion[​](#Example-2-Reversing-the-Implicit-Assertion \"Direct link to Example #2: Reversing the Implicit Assertion\")\n\nMost of the time, when querying for elements, you expect them to eventually exist. But sometimes you wish to wait until they _don't_ exist.\n\nAll you have to do is add that assertion and Cypress will **skip** implicitly waiting for elements to exist.\n\n```\ncy.get('button.close').click()// now Cypress will wait until this// <button> is not in the DOMcy.get('button.close').should('not.exist')// and now make sure this #modal does not exist in the DOM// and automatically wait until it's gone!cy.get('#modal').should('not.exist')\n```\n\ntip\n\n**Core Concept**\n\nIf you want to disable the default existence assertion, you can add [`.should('not.exist')`](https://docs.cypress.io/api/commands/should) to any DOM command.\n\n#### Example #3: Other Implicit Assertions[​](#Example-3-Other-Implicit-Assertions \"Direct link to Example #3: Other Implicit Assertions\")\n\nOther commands have other implicit assertions not related to the DOM.\n\nFor instance, [`.its()`](https://docs.cypress.io/api/commands/its) requires that the property you're asking about exists on the object.\n\n```\n// create an empty objectconst obj = {}// set the 'foo' property after 1 secondsetTimeout(() => {  obj.foo = 'bar'}, 1000)// .its() will wait until the 'foo' property is on the objectcy.wrap(obj).its('foo')\n```\n\n### List of Assertions[​](#List-of-Assertions \"Direct link to List of Assertions\")\n\nCypress bundles [Chai](https://docs.cypress.io/guides/references/bundled-libraries#Chai), [Chai-jQuery](https://docs.cypress.io/guides/references/bundled-libraries#Chai-jQuery), and [Sinon-Chai](https://docs.cypress.io/guides/references/bundled-libraries#Sinon-Chai) to provide built-in assertions. You can see a comprehensive list of them in [the list of assertions reference](https://docs.cypress.io/guides/references/assertions). You can also [write your own assertions as Chai plugins](https://docs.cypress.io/examples/recipes#Fundamentals) and use them in Cypress.\n\n### Writing Assertions[​](#Writing-Assertions \"Direct link to Writing Assertions\")\n\nThere are two ways to write assertions in Cypress:\n\n1.  **As Cypress Commands:** Using [`.should()`](https://docs.cypress.io/api/commands/should) or [`.and()`](https://docs.cypress.io/api/commands/and).\n2.  **As Mocha Assertions:** Using `expect`.\n\n### Command Assertions[​](#Command-Assertions \"Direct link to Command Assertions\")\n\nUsing [`.should()`](https://docs.cypress.io/api/commands/should) or [`.and()`](https://docs.cypress.io/api/commands/and) commands is the preferred way of making assertions in Cypress. These are typical Cypress commands, which means they apply to the currently yielded subject in the command chain.\n\n```\n// The subject here is the first <tr>.// This asserts that the <tr> has an .active classcy.get('tbody tr:first').should('have.class', 'active')\n```\n\nYou can chain multiple assertions together using [`.and()`](https://docs.cypress.io/api/commands/and), which is another name for [`.should()`](https://docs.cypress.io/api/commands/should) that makes things more readable:\n\n```\ncy.get('#header a')  .should('have.class', 'active')  .and('have.attr', 'href', '/users')\n```\n\nBecause [`.should('have.class')`](https://docs.cypress.io/api/commands/should) does not change the subject, [`.and('have.attr')`](https://docs.cypress.io/api/commands/and) is executed against the same element. This is handy when you need to assert multiple things against a single subject quickly.\n\n### Mocha Assertions[​](#Mocha-Assertions \"Direct link to Mocha Assertions\")\n\nUsing `expect` allows you to assert on any JavaScript object, not just the current subject. This is probably how you're used to seeing assertions written in unit tests:\n\n```\n// the explicit subject here is the boolean: trueexpect(true).to.be.true\n```\n\nMocha assertions are great when you want to:\n\n*   Perform custom logic prior to making the assertion.\n*   Make multiple assertions against the same subject.\n\nThe [`.should()`](https://docs.cypress.io/api/commands/should) assertion allows us to pass a callback function that takes the yielded subject as its first argument. This works like [`.then()`](https://docs.cypress.io/api/commands/then), except Cypress automatically **waits and retries** for everything inside of the callback function to pass.\n\ninfo\n\n**Complex Assertions**\n\nThe example below is a use case where we are asserting across multiple elements. Using a [`.should()`](https://docs.cypress.io/api/commands/should) callback function is a great way to query from a **parent** into multiple children elements and assert something about their state.\n\nDoing so enables you to **block** and **guard** Cypress by ensuring the state of descendants matches what you expect without needing to query them individually with regular Cypress DOM commands.\n\n```\ncy.get('p').should(($p) => {  // massage our subject from a DOM element  // into an array of texts from all of the p's  let texts = $p.map((i, el) => {    return Cypress.$(el).text()  })  // jQuery map returns jQuery object  // and .get() converts this to an array  texts = texts.get()  // array should have length of 3  expect(texts).to.have.length(3)  // with this specific content  expect(texts).to.deep.eq([    'Some text from first p',    'More text from second p',    'And even more text from third p',  ])})\n```\n\ndanger\n\n**Make sure `.should()` is safe**\n\nWhen using a callback function with [`.should()`](https://docs.cypress.io/api/commands/should), be sure that the entire function can be executed multiple times without side effects. Cypress applies its [retry logic](https://docs.cypress.io/guides/core-concepts/retry-ability) to these functions: if there's a failure, it will repeatedly rerun the assertions until the timeout is reached. That means your code should be retry-safe. The technical term for this means your code must be **idempotent**.\n\n## Timeouts[​](#Timeouts \"Direct link to Timeouts\")\n\nAlmost all commands can time out in some way.\n\nAll assertions, whether they're the default ones or whether they've been added by you all share the same timeout values.\n\n### Applying Timeouts[​](#Applying-Timeouts \"Direct link to Applying Timeouts\")\n\nYou can modify a commands's timeout. This timeout affects both its default assertions (if any) and any specific assertions you've added.\n\nRemember because assertions are used to describe a condition of the previous commands - the `timeout` modification goes on the previous commands _not the assertions_.\n\n#### Example #1: Implicit Assertion[​](#Example-1-Implicit-Assertion \"Direct link to Example #1: Implicit Assertion\")\n\n```\n// because .get() has an implicit assertion// that this element exists, it can time out and failcy.get('.mobile-nav')\n```\n\nUnder the hood Cypress:\n\n*   Queries for the element `.mobile-nav`\n    \n    ✨**and waits up to 4 seconds for it to exist in the DOM**✨\n    \n\n#### Example #2: Additional Assertions[​](#Example-2-Additional-Assertions \"Direct link to Example #2: Additional Assertions\")\n\n```\n// we've added 2 assertions to our testcy.get('.mobile-nav').should('be.visible').and('contain', 'Home')\n```\n\nUnder the hood Cypress:\n\n*   Queries for the element `.mobile-nav`\n    \n    ✨**and waits up to 4 seconds for it to exist in the DOM**✨ ✨**and be visible**✨ ✨**and contain the text: Home**✨\n    \n\nThe _total_ amount of time Cypress will wait for _all_ of the assertions to pass is for the duration of the [cy.get()](https://docs.cypress.io/api/commands/get) `timeout` (which is 4 seconds).\n\nTimeouts can be modified per command and this will affect all implicit assertions and any assertions chained after that command.\n\n#### Example #3: Modifying Timeouts[​](#Example-3-Modifying-Timeouts \"Direct link to Example #3: Modifying Timeouts\")\n\n```\n// we've modified the timeout which affects the implicit// assertions as well as all explicit ones.cy.get('.mobile-nav', { timeout: 10000 })  .should('be.visible')  .and('contain', 'Home')\n```\n\nUnder the hood Cypress:\n\n*   Gets the element `.mobile-nav`\n    \n    ✨**and waits up to 10 seconds for it to exist in the DOM**✨ ✨**and be visible**✨ ✨**and contain the text: Home**✨\n    \n\nNotice that this timeout has flowed down to all assertions and Cypress will now wait _up to 10 seconds total_ for all of them to pass.\n\ndanger\n\nNote that you _never_ change the timeout inside the assertion. The `timeout` parameter **always** goes inside the command.\n\n```\n// 🚨 DOES NOT WORKcy.get('.selector').should('be.visible', { timeout: 1000 })// ✅ THE CORRECT WAYcy.get('.selector', { timeout: 1000 }).should('be.visible')\n```\n\nRemember, you are retrying the command with attached assertions, not just the assertions!\n\n### Default Values[​](#Default-Values \"Direct link to Default Values\")\n\nCypress offers several different timeout values based on the type of command.\n\nWe've set their default timeout durations based on how long we expect certain actions to take.\n\nFor instance:\n\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) loads a remote page and does not resolve _until all of the external resources complete their loading phase_. This may take awhile, so its default timeout is set to `60000ms`.\n*   [`cy.exec()`](https://docs.cypress.io/api/commands/exec) runs a system command such as _seeding a database_. We expect this to potentially take a long time, and its default timeout is set to `60000ms`.\n*   [`cy.wait()`](https://docs.cypress.io/api/commands/wait) actually uses 2 different timeouts. When waiting for a [routing alias](https://docs.cypress.io/guides/core-concepts/variables-and-aliases#Intercepts), we wait for a matching request for `5000ms`, and then additionally for the server's response for `30000ms`. We expect your application to make a matching request quickly, but we expect the server's response to potentially take much longer.\n\nThat leaves most other commands including all DOM queries to time out by default after 4000ms.",
  "title": "Introduction to Cypress | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/tooling/code-coverage",
  "markdown": "# Code Coverage | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to instrument your application code\n*   How to save the coverage information collected during end-to-end and unit tests\n*   How to use the code coverage reports to guide writing tests\n\n## Introduction[​](#Introduction \"Direct link to Introduction\")\n\nAs you write more and more end-to-end tests, you will find yourself wondering - do I need to write more tests? Are there parts of the application still untested? Are there parts of the application that perhaps are tested too much? One answer to those questions is to find out which lines of the application's source code were executed during end-to-end tests. If there are important sections of the application's logic that **were not** executed from the tests, then a new test should be added to ensure that part of our application logic is tested.\n\nComputing the source code lines that were executed during the test is done through **code coverage**. Code coverage requires inserting additional counters into your source code before running it. This step is called **instrumentation**. Instrumentation takes code that looks like this...\n\n```\n// add.jsfunction add(a, b) {  return a + b}module.exports = { add }\n```\n\n...and parses it to find all functions, statements, and branches and then inserts **counters** into the code. For the above code it might look like this:\n\n```\n// this object counts the number of times each// function and each statement is executedconst c = (window.__coverage__ = {  // \"f\" counts the number of times each function is called  // we only have a single function in the source code  // thus it starts with [0]  f: [0],  // \"s\" counts the number of times each statement is called  // we have 3 statements and they all start with 0  s: [0, 0, 0],})// the original code + increment statements// uses \"c\" alias to \"window.__coverage__\" object// the first statement defines the function,// let's increment itc.s[0]++function add(a, b) {  // function is called and then the 2nd statement  c.f[0]++  c.s[1]++  return a + b}// 3rd statement is about to be calledc.s[2]++module.exports = { add }\n```\n\nImagine we load the above instrumented source file from our test spec file. Immediately some counters will be incremented!\n\n```\n// add.cy.jsconst { add } = require('./add')// JavaScript engine has parsed and evaluated \"add.js\" source code// which ran some of the increment statements// __coverage__ has now// f: [0] - function \"add\" was NOT executed// s: [1, 0, 1] - first and third counters were incremented// but the statement inside function \"add\" was NOT executed\n```\n\nWe want to make sure every statement and function in the file `add.js` has been executed by our tests at least once. Thus we write a test:\n\n```\n// add.cy.jsconst { add } = require('./add')it('adds numbers', () => {  expect(add(2, 3)).to.equal(5)})\n```\n\nWhen the test calls `add(2, 3)`, the counter increments inside the \"add\" function are executed, and the coverage object becomes:\n\n```\n{  // \"f\" keeps count of times each function was called  // we only have a single function in the source code  // thus it starts with [0]  f: [1],  // \"s\" keeps count of times each statement was called  // we have 3 statements, and they all start with 0  s: [1, 1, 1]}\n```\n\nThis single test has achieved 100% code coverage - every function and every statement has been executed at least once. But, in real world applications, achieving 100% code coverage requires multiple tests.\n\nOnce the tests finish, the coverage object can be serialized and saved to disk so that a human-friendly report can be generated. The collected coverage information can also be sent to external services and help during pull request reviews.\n\ninfo\n\nIf you are unfamiliar with code coverage or want to learn more, take a look at the \"Understanding JavaScript Code Coverage\" blog post [Part 1](https://medium.com/engineering-semantics3/understanding-code-coverage-1074e8fccce0/) and [Part 2](https://medium.com/engineering-semantics3/understanding-javascript-code-coverage-part-2-9aedaa5119e5/).\n\nThis guide explains how to instrument the application source code using common tools. Then we show how to save the coverage information and generate reports using the [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) Cypress plugin. After reading this guide you should be able to better target your tests using the code coverage information.\n\nThis guide explains how to find what parts of your application code are covered by Cypress tests so you can have 100% confidence that your tests aren't missing crucial parts of your application. The collected information can be sent to external services, automatically run during pull request reviews, and integrated into CI.\n\n## Instrumenting code[​](#Instrumenting-code \"Direct link to Instrumenting code\")\n\nCypress does not instrument your code - you need to do it yourself. The golden standard for JavaScript code instrumentation is the battle-hardened [Istanbul](https://istanbul.js.org/) and, luckily, it plays very nicely with the Cypress. You can instrument the code as a build step through one of two ways:\n\n*   Using the [nyc](https://github.com/istanbuljs/nyc) module - a command-line interface for the [Istanbul](https://istanbul.js.org/) library\n*   As part of your code transpilation pipeline using the [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) tool.\n\n### Using NYC[​](#Using-NYC \"Direct link to Using NYC\")\n\nTo instrument the application code located in your `src` folder and save it in an `instrumented` folder use the following command:\n\n```\nnpx nyc instrument --compact=false src instrumented\n```\n\nWe are passing the `--compact=false` flag to generate human-friendly output.\n\nThe instrumentation takes your original code like this fragment...\n\n```\nconst store = createStore(reducer)render(  <Provider store={store}>    <App />  </Provider>,  document.getElementById('root'))\n```\n\n...and wraps each statement with additional counters that keep track of how many times each source line has been executed by the JavaScript runtime.\n\n```\nconst store = (cov_18hmhptych.s[0]++, createStore(reducer))cov_18hmhptych.s[1]++render(  <Provider store={store}>    <App />  </Provider>,  document.getElementById('root'))\n```\n\nNotice the calls to `cov_18hmhptych.s[0]++` and `cov_18hmhptych.s[1]++` that increment the statement counters. All counters and additional book-keeping information is stored in a single object attached to the browser's `window` object. We can see the counters if we serve the `instrumented` folder instead of `src` and open the application.\n\n![Code coverage object](https://docs.cypress.io/img/guides/code-coverage/coverage-object.png)\n\nIf we drill into the coverage object we can see the statements executed in each file. For example the file `src/index.js` has the following information:\n\n![Covered statements counters in a from the index file](https://docs.cypress.io/img/guides/code-coverage/coverage-statements.png)\n\nIn green, we highlighted the 4 statements present in that file. The first three statements were each executed once and the last statement was never executed (it probably was inside an `if` statement). By using the application, we can both increment the counters and flip some of the zero counters into positive numbers.\n\n### Using code transpilation pipeline[​](#Using-code-transpilation-pipeline \"Direct link to Using code transpilation pipeline\")\n\nInstead of using the `npx instrument` command, we can use [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) to instrument the code as part of its transpilation. Add this plugin to the `.babelrc` file.\n\n```\n{  \"presets\": [\"@babel/preset-react\"],  \"plugins\": [\"transform-class-properties\", \"istanbul\"]}\n```\n\nWe can now serve the application and get instrumented code without an intermediate folder, but the result is the same instrumented code loaded by the browser, with the same `window.__coverage__` object keeping track of the original statements.\n\n![Bundled code and source mapped originals](https://docs.cypress.io/img/guides/code-coverage/source-map.png)\n\nA really nice feature of both [nyc](https://github.com/istanbuljs/nyc) and [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) is that the source maps are generated automatically, allowing us to collect code coverage information, but also interact with the original, non-instrumented code in the Developer Tools. In the screenshot above the bundle (green arrow) has coverage counters, but the source mapped files in the green rectangle show the original code.\n\ninfo\n\nThe `nyc` and `babel-plugin-istanbul` only instrument the application code and not 3rd party dependencies from `node_modules`.\n\nTo handle code coverage collected during each test, we created a [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) Cypress plugin. It merges coverage from each test and saves the combined result. It also calls `nyc` (its peer dependency) to generate static HTML reports for human consumption.\n\n### Install the plugin[​](#Install-the-plugin \"Direct link to Install the plugin\")\n\n```\nnpm install @cypress/code-coverage --save-dev\n```\n\nThen add the code below to the [supportFile](https://docs.cypress.io/guides/references/configuration#e2e) and [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function.\n\n```\n// cypress/support/e2e.jsimport '@cypress/code-coverage/support'\n```\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      require('@cypress/code-coverage/task')(on, config)      // include any other plugin code...      // It's IMPORTANT to return the config object      // with any changed environment variables      return config    },  },})\n```\n\nWhen you run the Cypress tests now, you should see a few commands after the tests finish. We have highlighted these commands using a green rectangle below.\n\n![coverage plugin commands](https://docs.cypress.io/img/guides/code-coverage/coverage-plugin-commands.png)\n\nAfter the tests complete, the final code coverage is saved to a `.nyc_output` folder. It is a JSON file from which we can generate a report in a variety of formats. The [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) plugin generates the HTML report automatically - you can open the `coverage/index.html` page locally after the tests finish. You can also call `nyc report` to generate other reports, for example, sending the coverage information to 3rd party services.\n\n### See code coverage summary[​](#See-code-coverage-summary \"Direct link to See code coverage summary\")\n\nTo see the summary of the code coverage after tests run, run the command below.\n\n```\nnpx nyc report --reporter=text-summary========= Coverage summary =======Statements   : 76.3% ( 103/135 )Branches     : 65.31% ( 32/49 )Functions    : 64% ( 32/50 )Lines        : 81.42% ( 92/113 )==================================\n```\n\ninfo\n\n**Tip:** store the `coverage` folder as a build artifact on your continuous integration server. Because the report is a static HTML page, some CIs can show it right from their web applications. The screenshot below shows the coverage report stored on CircleCI. Clicking on `index.html` shows the report right in the browser.\n\n![coverage HTML report on CircleCI](https://docs.cypress.io/img/guides/code-coverage/circleci-coverage-report.png)\n\n## Code coverage as a guide[​](#Code-coverage-as-a-guide \"Direct link to Code coverage as a guide\")\n\nEven a single test can cover a lot of the application code. For example, let's run the following test that adds a few items, then marks one of them as completed.\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('adds and completes todos', () => {  cy.visit('/')  cy.get('.new-todo')    .type('write code{enter}')    .type('write tests{enter}')    .type('deploy{enter}')  cy.get('.todo').should('have.length', 3)  cy.get('.todo').first().find('.toggle').check()  cy.get('.todo').first().should('have.class', 'completed')})\n```\n\nAfter running the test and opening the HTML report, we see 76% code coverage in our application.\n\n![Coverage report after a single test](https://docs.cypress.io/img/guides/code-coverage/single-test.png)\n\nEven better, we can drill down into the individual source files to see what code we missed. In our example application, the main state logic is in the `src/reducers/todos.js` file. Let's see the code coverage in this file:\n\n![Main application logic coverage](https://docs.cypress.io/img/guides/code-coverage/todos-coverage.png)\n\nNotice how the **ADD\\_TODO** action was executed 3 times - because our test has added 3 todo items, and the **COMPLETE\\_TODO** action was executed just once - because our test has marked 1 todo item as completed.\n\nThe source lines not covered marked in yellow (the switch cases the test missed) and red (regular statements) are a great guide for writing more end-to-end tests. We need tests that delete todo items, edit them, mark all of them as completed at once and clear completed items. When we cover every switch statement in `src/reducers/todos.js` we probably will achieve close to 100% code coverage. Even more importantly, we will cover the main features of the application the user is expected to use.\n\nWe can write more E2E tests.\n\n![Cypress passed more tests](https://docs.cypress.io/img/guides/code-coverage/more-tests.png)\n\nThe produced HTML report shows 99% code coverage\n\n![99 percent code coverage](https://docs.cypress.io/img/guides/code-coverage/almost-100.png)\n\nEvery source file but 1 is covered at 100%. We can have great confidence in our application, and safely refactor the code knowing that we have a robust set of end-to-end tests.\n\nIf possible, we advise implementing [visual testing](https://docs.cypress.io/guides/tooling/visual-testing) in addition to Cypress functional tests to avoid CSS and visual regressions.\n\n## Combining code coverage from parallel tests[​](#Combining-code-coverage-from-parallel-tests \"Direct link to Combining code coverage from parallel tests\")\n\nIf you execute Cypress tests in [parallel](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization), each machine ends up with a code coverage report that only shows a portion of the code exercised. Typically an external code coverage service would merge such partial reports for you. If you do want to merge the reports yourself:\n\n*   on every machine running Cypress tests, copy the produced code coverage report into a common folder under a unique name to avoid overwriting it\n*   after all E2E tests finish, combine the reports yourself using `nyc merge` command\n\nYou can find an example of merging partial reports in our [cypress-io/cypress-example-conduit-app](https://github.com/cypress-io/cypress-example-conduit-app)\n\n## E2E and unit code coverage[​](#E2E-and-unit-code-coverage \"Direct link to E2E and unit code coverage\")\n\nLet's look at the one file that has a \"missed\" line. It is the `src/selectors/index.js` file shown below.\n\n![Selectors file with a line not covered by end-to-end tests](https://docs.cypress.io/img/guides/code-coverage/selectors.png)\n\nThe source line not covered by the end-to-end tests shows an edge case NOT reachable from the UI. Yet this switch case is definitely worth testing - at least to avoid accidentally changing its behavior during future refactoring.\n\nWe can directly test this piece of code by importing the `getVisibleTodos` function from the Cypress spec file. In essence we are using Cypress as a unit testing tool (find more unit testing recipes [here](https://github.com/cypress-io/cypress-example-recipes#unit-testing)).\n\nHere is our test to confirm that the error is thrown.\n\n```\n// cypress/e2e/selectors.cy.jsimport { getVisibleTodos } from '../../src/selectors'describe('getVisibleTodos', () => {  it('throws an error for unknown visibility filter', () => {    expect(() => {      getVisibleTodos({        todos: [],        visibilityFilter: 'unknown-filter',      })    }).to.throw()  })})\n```\n\nThe test passes, even if there is no web application visited.\n\n![Unit test for selector](https://docs.cypress.io/img/guides/code-coverage/unit-test.png)\n\nPreviously we instrumented the application code (either using a build step or inserting a plugin into the Babel pipeline). In the example above, we are NOT loading an application, instead we are only running the test files by themselves.\n\nIf we want to collect the code coverage from the unit tests, we need to instrument the source code of _our spec files_. The simplest way to do this is to use the same `.babelrc` with [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) and tell the Cypress built-in bundler to use `.babelrc` when bundling specs. One can use the [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) plugin again to do this by adding the code below to the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      require('@cypress/code-coverage/task')(on, config)      // tell Cypress to use .babelrc file      // and instrument the specs files      // only the extra application files will be instrumented      // not the spec files themselves      on('file:preprocessor', require('@cypress/code-coverage/use-babelrc'))      return config    },  },})\n```\n\nFor reference, the `.babelrc` file is shared between the example application and the spec files, thus Cypress tests are transpiled the same way the application code is transpiled.\n\n```\n{  \"presets\": [\"@babel/preset-react\"],  \"plugins\": [\"transform-class-properties\", \"istanbul\"]}\n```\n\nWhen we run Cypress with [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) included and inspect the `window.__coverage__` object in the **spec iframe**, we should see the coverage information for the application source files.\n\n![Code coverage in the unit test](https://docs.cypress.io/img/guides/code-coverage/code-coverage-in-unit-test.png)\n\nThe code coverage information in unit tests and end-to-end tests has the same format; the [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) plugin automatically grabs both and saves the combined report. Thus we can see the code coverage from the `cypress/e2e/selectors.cy.js` file after running the test.\n\n![Selectors code coverage](https://docs.cypress.io/img/guides/code-coverage/unit-test-coverage.png)\n\nOur unit test is hitting the line we could not reach from the end-to-end tests, and if we execute all spec files - we will get 100% code coverage.\n\n![Full code coverage](https://docs.cypress.io/img/guides/code-coverage/100percent.png)\n\n## Full stack code coverage[​](#Full-stack-code-coverage \"Direct link to Full stack code coverage\")\n\nA complex application might have a Node back end with its own complex logic. From the front end web application, the calls to the API go through layers of code. It would be nice to track what back end code has been exercised during Cypress end-to-end tests.\n\nAre our end-to-end tests that are so effective at covering the web application code also covering the back end server code?\n\n**Long story short: yes.** You can collect the code coverage from the back end, and let the `@cypress/code-coverage` plugin merge it with the front end coverage, creating a single full stack report.\n\nYou can run your Node server and instrument it using nyc on the fly. Instead of the \"normal\" server start command, you can run the command `npm run start:coverage` defined in the `package.json` like this:\n\n```\n{  \"scripts\": {    \"start\": \"node server\",    \"start:coverage\": \"nyc --silent node server\"  }}\n```\n\nIn your server, insert another middleware from `@cypress/code-coverage`. If you use an Express server, include `middleware/express`:\n\n```\nconst express = require('express')const app = express()require('@cypress/code-coverage/middleware/express')(app)\n```\n\nIf your server uses hapi, include `middleware/hapi`\n\n```\nif (global.__coverage__) {  require('@cypress/code-coverage/middleware/hapi')(server)}\n```\n\n**Tip:** you can conditionally register the endpoint only if there is a global code coverage object, and you can [exclude the middleware code from the coverage numbers](https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md):\n\n```\n/* istanbul ignore next */if (global.__coverage__) {  require('@cypress/code-coverage/middleware/hapi')(server)}\n```\n\nFor any other server type, define a `GET /__coverage__` endpoint and return the `global.__coverage__` object.\n\n```\nif (global.__coverage__) {  // handle \"GET __coverage__\" requests  onRequest = (response) => {    response.sendJSON({ coverage: global.__coverage__ })  }}\n```\n\nIn order for the `@cypress/code-coverage` plugin to know that it should request the back end coverage, add the new endpoint to the Cypress configuration environment settings under `env.codeCoverage.url` key. For example, if the application back end is running at port 3000 and we are using the default \"GET /**coverage**\" endpoint, set the following:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  env: {    codeCoverage: {      url: 'http://localhost:3000/__coverage__',    },  },})\n```\n\nFrom now on, the front end code coverage collected during end-to-end tests will be merged with the code coverage from the instrumented back end code and saved in a single report. Here is an example report from the [cypress-io/cypress-example-conduit-app](https://github.com/cypress-io/cypress-example-conduit-app) example:\n\n![Combined code coverage report from front and back end code](https://docs.cypress.io/img/guides/code-coverage/full-coverage.png)\n\nYou can explore the above combined full stack coverage report at the [coveralls.io/github/cypress-io/cypress-example-conduit-app](https://coveralls.io/github/cypress-io/cypress-example-conduit-app) dashboard. You can also find full stack code coverage in our [RealWorld App](https://github.com/cypress-io/cypress-realworld-app).\n\nEven if you only want to measure the back end code coverage Cypress can help. Read the blog post [Back end Code Coverage from Cypress API tests](https://glebbahmutov.com/blog/backend-coverage/) for the full tutorial.\n\n## Videos[​](#Videos \"Direct link to Videos\")\n\nThere is a series of videos we have recorded showing code coverage in Cypress\n\n#### How to instrument react-scripts web application for code coverage[​](#How-to-instrument-react-scripts-web-application-for-code-coverage \"Direct link to How to instrument react-scripts web application for code coverage\")\n\n#### Get code coverage reports from Cypress tests[​](#Get-code-coverage-reports-from-Cypress-tests \"Direct link to Get code coverage reports from Cypress tests\")\n\n#### Excluding code from code coverage reports[​](#Excluding-code-from-code-coverage-reports \"Direct link to Excluding code from code coverage reports\")\n\n#### Check code coverage robustly using 3rd party tool[​](#Check-code-coverage-robustly-using-3rd-party-tool \"Direct link to Check code coverage robustly using 3rd party tool\")\n\n#### Adding code coverage badge to your project[​](#Adding-code-coverage-badge-to-your-project \"Direct link to Adding code coverage badge to your project\")\n\n#### Show code coverage in commit status check[​](#Show-code-coverage-in-commit-status-check \"Direct link to Show code coverage in commit status check\")\n\n#### Checking code coverage on pull request[​](#Checking-code-coverage-on-pull-request \"Direct link to Checking code coverage on pull request\")\n\n## Examples[​](#Examples \"Direct link to Examples\")\n\nYou can find full examples showing different code coverage setups in the following repositories:\n\n*   [cypress-io/cypress-realworld-app](https://github.com/cypress-io/cypress-realworld-app) or RWA is a full stack example application that demonstrates **best practices and scalable strategies with Cypress in practical and realistic scenarios**. The RWA achieves full code coverage with end-to-end tests [across multiple browsers](https://docs.cypress.io/guides/guides/cross-browser-testing) and [device sizes](https://docs.cypress.io/api/commands/viewport).\n*   [cypress-io/cypress-example-conduit-app](https://github.com/cypress-io/cypress-example-conduit-app) shows how to collect the coverage information from both back and front end code and merge it into a single report.\n*   [bahmutov/code-coverage-webpack-dev-server](https://github.com/bahmutov/code-coverage-webpack-dev-server) shows how to collect code coverage from an application that uses webpack-dev-server.\n*   [bahmutov/code-coverage-vue-example](https://github.com/bahmutov/code-coverage-vue-example) collects code coverage for Vue.js single file components.\n*   [lluia/cypress-typescript-coverage-example](https://github.com/lluia/cypress-typescript-coverage-example) shows coverage for a React App that uses TypeScript.\n*   [bahmutov/cypress-and-jest](https://github.com/bahmutov/cypress-and-jest) shows how to run Jest unit tests and Cypress unit tests, collecting code coverage from both test runners, and then produce a merged report.\n*   [rootstrap/react-redux-base](https://github.com/rootstrap/react-redux-base) shows an example with a realistic webpack config. Instruments the source code using `babel-plugin-istanbul` during tests.\n*   [skylock/cypress-angular-coverage-example](https://github.com/skylock/cypress-angular-coverage-example) shows an Angular 8 + TypeScript application with instrumentation done using `ngx-build-plus`.\n*   [bahmutov/testing-react](https://github.com/bahmutov/testing-react) shows how to get code coverage for a React application created using `CRA v3` without ejecting `react-scripts`.\n*   [bahmutov/next-and-cypress-example](https://github.com/bahmutov/next-and-cypress-example) shows how to get back end and front end coverage for a Next.js project. `middleware/nextjs.js`.\n*   [ericorruption/cypress-code-coverage-typescript-webpack-ts-loader](https://github.com/ericorruption/cypress-code-coverage-typescript-webpack-ts-loader) shows how to collect coverage for a TypeScript + webpack project using `ts-loader` instead of `babel-loader`.\n\nFind the full list of examples linked in [cypress-io/code-coverage#external-examples](https://github.com/cypress-io/code-coverage#external-examples).\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   The official [@cypress/code-coverage](https://github.com/cypress-io/code-coverage) plugin\n*   [Combined End-to-end and Unit Test Coverage](https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/)\n*   [Code Coverage by Parcel Bundler](https://glebbahmutov.com/blog/code-coverage-by-parcel/)\n*   [Code Coverage for End-to-end Tests](https://glebbahmutov.com/blog/code-coverage-for-e2e-tests/)",
  "title": "Code Coverage | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/test-isolation",
  "markdown": "# Test Isolation | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   What is test isolation\n*   How it impacts E2E Testing vs Component Testing\n*   Test isolation trade-offs\n\n## What is Test Isolation?[​](#What-is-Test-Isolation \"Direct link to What is Test Isolation?\")\n\ntip\n\n**Best Practice:** Tests should always be able to be run independently from one another **and still pass**.\n\nAs stated in our mission, we hold ourselves accountable to champion a testing process that actually works, and have built Cypress to guide developers towards writing independent tests from the start.\n\nWe do this by cleaning up state _before_ each test to ensure that the operation of one test does not affect another test later on. The goal for each test should be to **reliably pass** whether run in isolation or consecutively with other tests. Having tests that depend on the state of an earlier test can potentially cause nondeterministic test failures which make debugging challenging.\n\nCypress will start each test with a clean test slate by restoring and clearing all:\n\n*   [aliases](https://docs.cypress.io/api/commands/as)\n*   [clock mocks](https://docs.cypress.io/api/commands/clock)\n*   [intercepts](https://docs.cypress.io/api/commands/intercept)\n*   [spies](https://docs.cypress.io/api/commands/spy)\n*   [stubs](https://docs.cypress.io/api/commands/stub)\n*   [viewport changes](https://docs.cypress.io/api/commands/viewport)\n\nIn addition to a clean test slate, Cypress also believes in running tests in a clean browser context such that the application or component under test behaves consistently when run. This behavior is described as `testIsolation`.\n\nThe test isolation is a global configuration and can be overridden for end-to-end testing at the `describe` level with the [`testIsolation`](https://docs.cypress.io/guides/references/configuration#e2e) option.\n\n## Test Isolation in End-to-End Testing[​](#Test-Isolation-in-End-to-End-Testing \"Direct link to Test Isolation in End-to-End Testing\")\n\nCypress supports enabling or disabling test isolation in end-to-end testing to describe if a suite of tests should run in a clean browser context or not.\n\n### Test Isolation Enabled[​](#Test-Isolation-Enabled \"Direct link to Test Isolation Enabled\")\n\nWhen test isolation is enabled, Cypress resets the browser context _before_ each test by:\n\n*   clearing the dom state by visiting `about:blank`\n*   clearing [cookies](https://docs.cypress.io/api/cypress-api/cookies) in all domains\n*   clearing [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) in all domains\n*   clearing [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) in all domains\n\nBecause the test starts in a fresh browser context, you must re-visit your application and perform the series of interactions needed to build the dom and browser state for each test.\n\nAdditionally, the [`cy.session()`](https://docs.cypress.io/api/commands/session) command will inherit this configuration and will clear the page and current browser context when establishing a browser session. This is so tests can reliably pass when run standalone or in a randomized order.\n\n### Test Isolation Disabled[​](#Test-Isolation-Disabled \"Direct link to Test Isolation Disabled\")\n\nWhen test isolation is disabled, Cypress will not alter the browser context before the test starts. The page does not clear between tests and cookies, local storage and session storage will be available across tests in that suite. Additionally, the [`cy.session()`](https://docs.cypress.io/api/commands/session) command will only clear the current browser context when establishing the browser session - the current page is not cleared.\n\n### Quick Comparison[​](#Quick-Comparison \"Direct link to Quick Comparison\")\n\n| testIsolation | beforeEach test | cy.session() |\n| --- | --- | --- |\n| `true` | \\- clears page by visiting `about:blank`  <br>\\- clears cookies in all domains  <br>\\- local storage in all domains  <br>\\- session storage in all domains | \\- clears page by visiting `about:blank`  <br>\\- clears cookies in all domains  <br>\\- local storage in all domains  <br>\\- session storage in all domains |\n| `false` | does not alter the current browser context | \\- clears cookies in all domains  <br>\\- local storage in all domains  <br>\\- session storage in all domains |\n\n## Test Isolation in Component Testing[​](#Test-Isolation-in-Component-Testing \"Direct link to Test Isolation in Component Testing\")\n\nCypress does not support configuring the test isolation behavior in component testing.\n\nWhen running component tests, Cypress always resets the browser context _before_ each test by:\n\n*   unmounting the rendered component under test\n*   clearing [cookies](https://docs.cypress.io/api/cypress-api/cookies) in all domains\n*   clearing [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) in all domains\n*   clearing [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) in all domains\n\n## Test Isolation Trade-offs[​](#Test-Isolation-Trade-offs \"Direct link to Test Isolation Trade-offs\")\n\nIt is important to note that disabling test isolation may improve the overall performance of end-to-end tests, however, it can also cause state to \"leak\" between tests. This can make later tests dependent on the results of earlier tests, and potentially cause misleading test failures. It is important to be extremely mindful of how tests are written when using this mode, and ensure that tests continue to run independently of one another.\n\nThe best way to ensure your tests are independent is to add a `.only()` to your test and verify it can run successfully without the test before it.",
  "title": "Test Isolation | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/tooling/plugins-guide",
  "markdown": "# Plugins | Cypress Documentation\n\nPlugins enable you to tap into, modify, or extend the internal behavior of Cypress.\n\nNormally, as a user, all of your test code, your application, and Cypress commands are executed in the browser. But Cypress is also a Node process that plugins can use.\n\n> Plugins enable you to tap into the Node process running outside of the browser.\n\nPlugins are a \"seam\" for you to write your own custom code that executes during particular stages of the Cypress lifecycle.\n\ninfo\n\n**This is a brief overview**\n\nIf you want more details about how to write a plugin, we've written API docs that show you how to work with each plugin event.\n\nYou can [check out the API docs here](https://docs.cypress.io/api/plugins/writing-a-plugin).\n\n## Use Cases[​](#Use-Cases \"Direct link to Use Cases\")\n\n### Configuration[​](#Configuration \"Direct link to Configuration\")\n\nWith plugins, you can programmatically alter the resolved configuration and environment variables that come from the [Cypress configuration file](https://docs.cypress.io/guides/references/configuration), [`cypress.env.json`](https://docs.cypress.io/guides/guides/environment-variables#Option-2-cypressenvjson), the [command line](https://docs.cypress.io/guides/guides/command-line), or system environment variables.\n\nThis enables you to do things like:\n\n*   Use multiple environments with their own configurations\n*   Swap out environment variables based on an environment\n*   Read in configuration files using the built in `fs` lib\n*   Change the list of browsers used for testing\n*   Write your configuration in `yml`\n\nCheck out our [Configuration API docs](https://docs.cypress.io/api/plugins/configuration-api) which describe how to use this event.\n\n### Preprocessors[​](#Preprocessors \"Direct link to Preprocessors\")\n\nThe event `file:preprocessor` is used to customize how your test code is transpiled and sent to the browser. By default, Cypress handles ES2015+, TypeScript, and CoffeeScript, using webpack to package it for the browser.\n\nYou can use the `file:preprocessor` event to do things like:\n\n*   Add the latest ES\\* support.\n*   Write your test code in ClojureScript.\n*   Customize the Babel settings to add your own plugins.\n*   Customize the options for compiling TypeScript.\n*   Swap out webpack for Browserify or anything else.\n\nCheck out our [File Preprocessor API docs](https://docs.cypress.io/api/plugins/preprocessors-api) which describe how to use this event.\n\n### Run Lifecycle[​](#Run-Lifecycle \"Direct link to Run Lifecycle\")\n\nThe events [`before:run`](https://docs.cypress.io/api/plugins/before-run-api) and [`after:run`](https://docs.cypress.io/api/plugins/after-run-api) occur before and after a run, respectively.\n\nYou can use [`before:run`](https://docs.cypress.io/api/plugins/before-run-api) to do things like:\n\n*   Set up reporting on a run\n*   Start a timer for the run to time how long it takes\n\nYou can use [`after:run`](https://docs.cypress.io/api/plugins/after-run-api) to do things like:\n\n*   Finish up reporting on a run set up in `before:run`\n*   Stop the timer for the run set up in `before:run`\n\n### Spec Lifecycle[​](#Spec-Lifecycle \"Direct link to Spec Lifecycle\")\n\nThe events [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api) and [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) run before and after a single spec is run, respectively.\n\nYou can use [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api) to do things like:\n\n*   Set up reporting on a spec running\n*   Start a timer for the spec to time how long it takes\n\nYou can use [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) to do things like:\n\n*   Finish up reporting set up in `before:spec`\n*   Stop the timer for the spec set up in `before:spec`\n*   Delete the video recorded for the spec. This prevents it from taking time and computing resources for compressing and uploading the video. You can do this conditionally based on the results of the spec, such as if it passes (so videos for failing tests are preserved for debugging purposes).\n\nCheck out the [Before Spec API doc](https://docs.cypress.io/api/plugins/before-spec-api) and [After Spec API doc](https://docs.cypress.io/api/plugins/after-spec-api) which describe how to use these events.\n\n### Browser Launching[​](#Browser-Launching \"Direct link to Browser Launching\")\n\nThe event `before:browser:launch` can be used to modify the launch arguments for each particular browser.\n\nYou can use the `before:browser:launch` event to do things like:\n\n*   Load a Chrome extension\n*   Enable or disable experimental chrome features\n*   Control which Chrome components are loaded\n\nCheck out our [Browser Launch API docs](https://docs.cypress.io/api/plugins/browser-launch-api) which describe how to use this event.\n\n### Screenshot handling[​](#Screenshot-handling \"Direct link to Screenshot handling\")\n\nThe event `after:screenshot` is called after a screenshot is taken and saved to disk.\n\nYou can use the `after:screenshot` event to do things like:\n\n*   Save details about the screenshot\n*   Rename the screenshot\n*   Manipulate the screenshot image by resizing or cropping it\n\nCheck out our [After Screenshot API docs](https://docs.cypress.io/api/plugins/after-screenshot-api) which describe how to use this event.\n\n### cy.task[​](#cytask \"Direct link to cy.task\")\n\nThe event `task` is used in conjunction with the [`cy.task()`](https://docs.cypress.io/api/commands/task) command. It allows you to write arbitrary code in Node to accomplish tasks that aren't possible in the browser.\n\nYou can use the `task` event to do things like:\n\n*   Manipulating a database (seeding, reading, writing, etc.)\n*   Storing state in Node that you want persisted (since the driver is fully refreshed on visits)\n*   Performing parallel tasks (like making multiple http requests outside of Cypress)\n*   Running an external process (like spinning up a Webdriver instance of another browser like Safari or puppeteer)\n\n### Real World Example[​](#Real-World-Example \"Direct link to Real-World-Example\")\n\nThe [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) uses [tasks](https://docs.cypress.io/api/commands/task) to re-seed its database, and to filter/find test data for various testing scenarios.\n\ncaution\n\n⚠️ This code is part of the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function and thus executes in the Node environment. You cannot call `Cypress` or `cy` commands in this function, but you do have the direct access to the file system and the rest of the operating system.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      on('task', {        async 'db:seed'() {          // seed database with test data          const { data } = await axios.post(`${testDataApiEndpoint}/seed`)          return data        },        // fetch test data from a database (MySQL, PostgreSQL, etc...)        'filter:database'(queryPayload) {          return queryDatabase(queryPayload, (data, attrs) =>            _.filter(data.results, attrs)          )        },        'find:database'(queryPayload) {          return queryDatabase(queryPayload, (data, attrs) =>            _.find(data.results, attrs)          )        },      })    },  },})\n```\n\nCheck out the [Real World App test suites](https://github.com/cypress-io/cypress-realworld-app/tree/develop/cypress/tests/ui) to see these tasks in action.\n\n## List of plugins[​](#List-of-plugins \"Direct link to List of plugins\")\n\nCypress maintains a curated list of plugins created by us and the community. You can `npm install` any of the plugins listed below:\n\n[Our curated list of Cypress plugins.](https://docs.cypress.io/plugins)\n\n## Installing plugins[​](#Installing-plugins \"Direct link to Installing plugins\")\n\nPlugins from our [official list](https://docs.cypress.io/plugins) are npm modules. This enables them to be versioned and updated separately without needing to update Cypress itself.\n\nYou can install any published plugin using npm:\n\n```\nnpm install <plugin name> --save-dev\n```\n\n## Using a plugin[​](#Using-a-plugin \"Direct link to Using a plugin\")\n\nThere are two ways to use a plugin in Cypress:\n\n1.  As of Cypress version 10.0.0, you will need to add your plugin to the [`setupNodeEvents`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) function in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n2.  If you're using an older version of Cypress, you can add your plugin to the (deprecated) [plugins file](https://docs.cypress.io/guides/references/legacy-configuration#Plugins).\n\nHere's an example of what this might look like:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      // bind to the event we care about      on('<event>', (arg1, arg2) => {        // plugin stuff here      })    },  },})\n```\n\nFor information on writing plugins, please check out our [Writing a Plugin](https://docs.cypress.io/api/plugins/writing-a-plugin) guide.",
  "title": "Plugins | Cypress Documentation",
  "description": "Plugins enable you to tap into, modify, or extend the internal behavior of",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/tooling/typescript-support",
  "markdown": "# TypeScript | Cypress Documentation\n\nCypress ships with [official type declarations](https://github.com/cypress-io/cypress/tree/develop/cli/types) for [TypeScript](https://www.typescriptlang.org/). This allows you to write your tests in TypeScript.\n\n### Install TypeScript[​](#Install-TypeScript \"Direct link to Install TypeScript\")\n\nTo use TypeScript with Cypress, you will need TypeScript 4.0+. If you do not already have TypeScript installed as a part of your framework, you will need to install it:\n\n*   npm\n*   yarn\n\n```\nnpm install typescript --save-dev\n```\n\n### Configure tsconfig.json[​](#Configure-tsconfigjson \"Direct link to Configure tsconfig.json\")\n\nWe recommend creating a [`tsconfig.json`](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) inside your [`cypress` folder](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Folder-structure) with the following configuration:\n\n```\n{  \"compilerOptions\": {    \"target\": \"es5\",    \"lib\": [\"es5\", \"dom\"],    \"types\": [\"cypress\", \"node\"]  },  \"include\": [\"**/*.ts\"]}\n```\n\nThe `\"types\"` will tell the TypeScript compiler to only include type definitions from Cypress. This will address instances where the project also uses `@types/chai` or `@types/jquery`. Since [Chai](https://docs.cypress.io/guides/references/bundled-libraries#Chai) and [jQuery](https://docs.cypress.io/guides/references/bundled-libraries#Other-Library-Utilities) are namespaces (globals), incompatible versions will cause the package manager (`yarn` or `npm`) to nest and include multiple definitions and cause conflicts.\n\ncaution\n\nYou may have to restart your IDE's TypeScript server if the setup above does not appear to work. For example:\n\nVS Code (within a .ts or .js file):\n\n*   Open the command palette (Mac: `cmd+shift+p`, Windows: `ctrl+shift+p`)\n*   Type \"restart ts\" and select the \"TypeScript: Restart TS server.\" option\n\nIf that does not work, try restarting the IDE.\n\n### Processing your Cypress configuration and plugins[​](#Processing-your-Cypress-configuration-and-plugins \"Direct link to Processing your Cypress configuration and plugins\")\n\nCypress needs to be able to transpile your Cypress configuration and plugins written in TypeScript in order to make them executable within Cypress's Node.js runtime. To do this, Cypress will attempt to read the user's TypeScript and project configuration to apply the correct TypeScript loader to Cypress's Node.js runtime.\n\nIf your project is an `ESM` package (short for [ECMAScript Module](https://nodejs.org/api/esm.html#modules-ecmascript-modules)), Cypress attempts to apply the [ts-node/esm](https://github.com/TypeStrong/ts-node?tab=readme-ov-file#esm) Node.js loader to resolve the Cypress configuration and plugins. `ESM` is determined by Cypress if you have the `type: \"module\"` key-value pair present inside your project's `package.json`.\n\nOtherwise, regular [ts-node](https://github.com/TypeStrong/ts-node?tab=readme-ov-file#node-flags-and-other-tools) is required into Cypress's Node.js runtime. Since Node.js by itself can only interpret CommonJS files, Cypress attempts to make your TypeScript configuration compatible with Cypress' Node.js runtime. To do this, Cypress overrides the following configuration values found inside your project's `tsconfig.json`:\n\n```\n{  \"module\": \"commonjs\",  \"moduleResolution\": \"node\",  \"preserveValueImports\": false}\n```\n\nThis does not have an impact on your project or its TypeScript configuration settings. This override only happens within the context of the Cypress runtime.\n\n### Clashing Types with Jest[​](#Clashing-Types-with-Jest \"Direct link to Clashing Types with Jest\")\n\nYou may want to consider configuring your app with separate `tsconfig.json` to solve [clashing types with jest](https://docs.cypress.io/guides/tooling/typescript-support#Clashing-types-with-Jest). You will need to exclude `cypress.config.ts`, `cypress`, `node_modules` in your root `tsconfig.json` file.\n\n```\n{  \"exclude\": [\"cypress.config.ts\", \"cypress\", \"node_modules\"]}\n```\n\n### Types for Custom Commands[​](#Types-for-Custom-Commands \"Direct link to Types for Custom Commands\")\n\nWhen adding [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands) to the `cy` object, you can manually add their types to avoid TypeScript errors.\n\nFor example if you add the command `cy.dataCy` into your [supportFile](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) like this:\n\n```\n// cypress/support/index.tsCypress.Commands.add('dataCy', (value) => {  return cy.get(`[data-cy=${value}]`)})\n```\n\nThen you can add the `dataCy` command to the global Cypress Chainable interface (so called because commands are chained together).\n\n```\n// cypress/support/index.tsdeclare global {  namespace Cypress {    interface Chainable {      /**       * Custom command to select DOM element by data-cy attribute.       * @example cy.dataCy('greeting')       */      dataCy(value: string): Chainable<JQuery<HTMLElement>>    }  }}\n```\n\ninfo\n\nA nice detailed JSDoc comment above the method type will be really appreciated by any users of your custom command.\n\ninfo\n\nTypes of all the parameters taken by the implementation callback are inferred automatically based on the declared interface. Thus, in the example above, the `value` will be of type `string` implicitly.\n\nIn your specs, you can now use the custom command as expected\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('works', () => {  // from your cypress/e2e/spec.cy.ts  cy.visit('/')  // IntelliSense and TS compiler should  // not complain about unknown method  cy.dataCy('greeting')})\n```\n\n#### Adding child or dual commands[​](#Adding-child-or-dual-commands \"Direct link to Adding child or dual commands\")\n\nWhen you add a custom command with `prevSubject`, Cypress will infer the subject type automatically based on the specified `prevSubject`.\n\n```\n// cypress/support/index.tsdeclare global {  namespace Cypress {    interface Chainable {      /**       * Custom command to type a few random words into input elements       * @param count=3       * @example cy.get('input').typeRandomWords()       */      typeRandomWords(        count?: number,        options?: Partial<TypeOptions>      ): Chainable<JQuery<HTMLElement>>    }  }}\n```\n\n```\n// cypress/support/index.tsCypress.Commands.add(  'typeRandomWords',  { prevSubject: 'element' },  (subject /* :JQuery<HTMLElement> */, count = 3, options?) => {    return cy.wrap(subject).type(generateRandomWords(count), options)  })\n```\n\n#### Overwriting child or dual commands[​](#Overwriting-child-or-dual-commands \"Direct link to Overwriting child or dual commands\")\n\nWhen overwriting either built-in or custom commands which make use of `prevSubject`, you must specify generic parameters to help the type-checker to understand the type of the `prevSubject`.\n\n```\ninterface TypeOptions extends Cypress.TypeOptions {  sensitive: boolean}Cypress.Commands.overwrite<'type', 'element'>(  'type',  (originalFn, element, text, options?: Partial<TypeOptions>) => {    if (options && options.sensitive) {      // turn off original log      options.log = false      // create our own log with masked message      Cypress.log({        $el: element,        name: 'type',        message: '*'.repeat(text.length),      })    }    return originalFn(element, text, options)  })\n```\n\nAs you can see there are generic parameters `<'type', 'element'>` are used:\n\n1.  The first parameter is the command name, equal to first parameter passed to `Cypress.Commands.overwrite`.\n2.  The second parameter is the type of the `prevSubject` that is used by the original command. Possible values:\n    *   'element' infers it as `JQuery<HTMLElement>`\n    *   'window' infers it as `Window`\n    *   'document' infers it as `Document`\n    *   'optional' infers it as `unknown`\n\n#### Examples:[​](#Examples \"Direct link to Examples:\")\n\n*   See [Adding Custom Commands (TS)](https://github.com/cypress-io/cypress-example-recipes#fundamentals) example recipe.\n*   Example project [cypress-example-todomvc custom commands](https://github.com/cypress-io/cypress-example-todomvc#custom-commands) uses custom commands to avoid boilerplate code.\n\n### Types for custom assertions[​](#Types-for-custom-assertions \"Direct link to Types for custom assertions\")\n\nIf you extend Cypress assertions, you can extend the assertion types to make the TypeScript compiler understand the new methods. See the [Recipe: Adding Chai Assertions](https://docs.cypress.io/examples/recipes#Fundamentals) for instructions.\n\n### Types for plugins[​](#Types-for-plugins \"Direct link to Types for plugins\")\n\ncaution\n\n**Deprecated**\n\nConfiguring plugins via `cypress/plugins/index.js` is no longer supported as of Cypress version 10.0.0.\n\nWe recommend that you update your configuration. Please see the [plugins guide](https://docs.cypress.io/guides/tooling/plugins-guide) and the [migration guide](https://docs.cypress.io/guides/references/migration-guide) for more information on how to update your configuration.\n\nYou can utilize Cypress's type declarations in your [plugins file](https://docs.cypress.io/guides/tooling/plugins-guide) by annotating it like the following:\n\n```\n// cypress/plugins/index.ts/** * @type {Cypress.PluginConfig} */module.exports = (on, config) => {}\n```\n\n### Using an External Typings File[​](#Using-an-External-Typings-File \"Direct link to Using an External Typings File\")\n\nYou might find it easier to organize your types by moving them from the support file into an external [declaration (\\*.d.ts) file](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html). To do so, create a new file, like _cypress.d.ts_, and cut the types for your custom commands/assertions from the _support_ file and into the new file. Below is an example of moving the custom `cy.mount` typings that come by default with a component testing app into a root level _cypress.d.ts_ file.\n\n*   cypress.d.ts\n\n```\nimport { mount } from 'cypress/react'// Augment the Cypress namespace to include type definitions for// your custom command.// Alternatively, can be defined in cypress/support/component.d.ts// with a <reference path=\"./component\" /> at the top of your spec.declare global {  namespace Cypress {    interface Chainable {      mount: typeof mount    }  }}\n```\n\nYou might need to include the _\\*.d.ts_ in the include options in any _tsconfig.json_ files in your project for TypeScript to pick up the new types:\n\n*   tsconfig.json\n\n```\n\"include\": [  \"src\",  \"./cypress.d.ts\"]\n```\n\n*   ./cypress/tsconfig.json\n\n```\n\"include\": [  \"**/*.ts\",  \"../cypress.d.ts\"]\n```\n\n### Set up your dev environment[​](#Set-up-your-dev-environment \"Direct link to Set up your dev environment\")\n\nPlease refer to your code editor in [TypeScript's Editor Support doc](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support) and follow the instructions for your IDE to get TypeScript support and [intelligent code completion](https://docs.cypress.io/guides/tooling/IDE-integration#Intelligent-Code-Completion) configured in your developer environment before continuing. TypeScript support is built in for [Visual Studio Code](https://code.visualstudio.com/), [Visual Studio](https://www.visualstudio.com/), and [WebStorm](https://www.jetbrains.com/webstorm/) - all other editors require extra setup.\n\n### Clashing types with Jest[​](#Clashing-types-with-Jest \"Direct link to Clashing types with Jest\")\n\nIf you are using both Jest and Cypress in the same project, the TypeScript types registered globally by the two test runners can clash. For example, both Jest and Cypress provide the clashing types for the `describe` and `it` functions. Both Jest and Expect (bundled inside Cypress) provide the clashing types for the `expect` assertion, etc. There are two solutions to disentangle the types:\n\n1.  Configure a separate `tsconfig.json` for E2E tests. See our example [cypress-io/cypress-and-jest-typescript-example](https://github.com/cypress-io/cypress-and-jest-typescript-example) repo.\n2.  Remove Cypress global variables by using npm package [local-cypress](https://github.com/bahmutov/local-cypress). Read the blog post [How to Avoid Using Global Cypress Variables](https://glebbahmutov.com/blog/local-cypress/) for details.\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [13.0.0](https://docs.cypress.io/guides/references/changelog#13-0-0) | Raised minimum required TypeScript version from 3.4+ to 4.0+ |\n| [10.0.0](https://docs.cypress.io/guides/references/changelog#10-0-0) | Update guide to cover TypeScript setup for component testing |\n| [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) | Raised minimum required TypeScript version from 2.9+ to 3.4+ |\n| [4.4.0](https://docs.cypress.io/guides/references/changelog#4-4-0) | Added support for TypeScript without needing your own transpilation through preprocessors. |\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [IDE Integration](https://docs.cypress.io/guides/tooling/IDE-integration)",
  "title": "TypeScript | Cypress Documentation",
  "description": "Cypress ships with",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/tooling/reporters",
  "markdown": "# Reporters | Cypress Documentation\n\nBecause Cypress is built on top of Mocha, that means any reporter built for Mocha can be used with Cypress. Here is a list of built in Mocha reporters.\n\n*   [Mocha's built-in reporters](https://mochajs.org/#reporters)\n\nBy default, Cypress uses the `spec` reporter to output information to `STDOUT`.\n\nWe've also added the two most common 3rd party reporters for Mocha. These are built into Cypress and you can use them without installing anything.\n\n*   [`teamcity`](https://github.com/cypress-io/mocha-teamcity-reporter)\n*   [`junit`](https://github.com/michaelleeallen/mocha-junit-reporter)\n\nFinally, we support creating your own custom reporters or using any kind of 3rd party reporter.\n\n## Custom reporter[​](#Custom-reporter \"Direct link to Custom reporter\")\n\n### Installed locally[​](#Installed-locally \"Direct link to Installed locally\")\n\nYou can load [custom Mocha reporters](https://mochajs.org/api/tutorial-custom-reporter.html) through a relative or absolute path. These can be specified in your Cypress configuration file or via the [command line](https://docs.cypress.io/guides/guides/command-line).\n\nFor example, if you have the following directory structure:\n\n```\n> my-project  > cypress  > src  > reporters    - custom.js\n```\n\nYou would specify the path to your custom reporter in either of the ways below.\n\n#### Cypress configuration[​](#Cypress-configuration \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'reporters/custom.js',})\n```\n\n#### Command Line[​](#Command-Line \"Direct link to Command Line\")\n\n```\ncypress run --reporter reporters/custom.js\n```\n\n### Installed via npm[​](#Installed-via-npm \"Direct link to Installed via npm\")\n\nWhen using custom reporters via npm, specify the package name.\n\n#### Cypress configuration[​](#Cypress-configuration-1 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'mochawesome',})\n```\n\n#### Command line[​](#Command-line \"Direct link to Command line\")\n\n```\ncypress run --reporter mochawesome\n```\n\n## Reporter Options[​](#Reporter-Options \"Direct link to Reporter Options\")\n\nSome reporters accept options that customize their behavior. These can be specified in your Cypress configuration or via [command line](https://docs.cypress.io/guides/guides/command-line) options.\n\nReporter options differ depending on the reporter (and may not be supported at all). Refer to the documentation for the reporter you are using for details on which options are supported.\n\nThe below configuration will output the JUnit report to `STDOUT` and save it into an XML file.\n\n#### Cypress configuration[​](#Cypress-configuration-2 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'junit',  reporterOptions: {    mochaFile: 'results/my-test-output.xml',    toConsole: true,  },})\n```\n\n#### Command line[​](#Command-line-1 \"Direct link to Command line\")\n\n```\ncypress run --reporter junit \\  --reporter-options \"mochaFile=results/my-test-output.xml,toConsole=true\"\n```\n\n## Merging reports across spec files[​](#Merging-reports-across-spec-files \"Direct link to Merging reports across spec files\")\n\nEach spec file is processed completely separately during each `cypress run` execution. Thus each spec run _overwrites_ the previous report file. To preserve unique reports for each specfile, use the `[hash]` in the `mochaFile` filename.\n\nThe following configuration will create separate XML files in the `results` folder. You can then merge the reported output in a separate step using a 3rd party tool. For example, for the [Mochawesome](https://github.com/adamgruber/mochawesome) reporter, you can use the [mochawesome-merge](https://github.com/antontelesh/mochawesome-merge) tool.\n\n#### Cypress configuration[​](#Cypress-configuration-3 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'junit',  reporterOptions: {    mochaFile: 'results/my-test-output-[hash].xml',  },})\n```\n\n#### Command line[​](#Command-line-2 \"Direct link to Command line\")\n\n```\ncypress run --reporter junit \\  --reporter-options \"mochaFile=results/my-test-output-[hash].xml\"\n```\n\n## Multiple reporters[​](#Multiple-reporters \"Direct link to Multiple reporters\")\n\nOftentimes we see users wanting the ability to use multiple reporters. When running in CI, you might want to generate a report for `junit` and perhaps a `json` report. This is great, but by setting this reporter you won't receive any additional feedback while the tests are running!\n\nThe solution here is to use multiple reporters. You will have the benefit of both worlds.\n\nWe suggest using the npm module:\n\n[https://github.com/you54f/cypress-multi-reporters](https://github.com/you54f/cypress-multi-reporters)\n\nWe use multiple reporters for every single one of our internal projects.\n\nThe below examples were implemented in\n\n[https://github.com/cypress-io/cypress-example-circleci-orb](https://github.com/cypress-io/cypress-example-circleci-orb)\n\n.\n\n### Examples[​](#Examples \"Direct link to Examples\")\n\n#### Spec to `STDOUT`, save JUnit XML files[​](#Spec-to-STDOUT-save-JUnit-XML-files \"Direct link to Spec-to-STDOUT-save-JUnit-XML-files\")\n\nWe want to output a `spec` report to `STDOUT`, while saving a JUnit XML file for each spec file.\n\nWe need to install additional dependencies:\n\n*   [`cypress-multi-reporters`](https://github.com/you54f/cypress-multi-reporters): enables multiple reporters\n*   [`mocha-junit-reporter`](https://github.com/michaelleeallen/mocha-junit-reporter) the actual junit reporter, as we cannot use the `junit` reporter that comes with Cypress\n\n```\nnpm install cypress-multi-reporters mocha-junit-reporter --save-dev\n```\n\nSpecify your reporter and reporterOptions in your Cypress configuration or via the [command line](https://docs.cypress.io/guides/guides/command-line).\n\n#### Cypress configuration[​](#Cypress-configuration-4 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'cypress-multi-reporters',  reporterOptions: {    configFile: 'reporter-config.json',  },})\n```\n\n#### Command line[​](#Command-line-3 \"Direct link to Command line\")\n\n```\ncypress run --reporter cypress-multi-reporters \\  --reporter-options configFile=reporter-config.json\n```\n\nThen add the separate `reporter-config.json` file (defined in your configuration) to enable `spec` and `junit` reporters and direct the `junit` reporter to save separate XML files.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporterEnabled: 'spec, mocha-junit-reporter',  mochaJunitReporterReporterOptions: {    mochaFile: 'cypress/results/results-[hash].xml',  },})\n```\n\nWe recommend deleting all files from the `cypress/results` folder before running this command, since each run will output new XML files. For example, you can add the npm script commands below to your `package.json` then call `npm run report`.\n\n```\n{  \"scripts\": {    \"delete:reports\": \"rm cypress/results/* || true\",    \"prereport\": \"npm run delete:reports\",    \"report\": \"cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json\"  }}\n```\n\nIn case you want to combine generated XML files into a single one, [junit-report-merger](https://www.npmjs.com/package/junit-report-merger) can be added. For example, to combine all files into `cypress/results/combined-report.xml` the `combine:reports` script can be added.\n\n```\n{  \"scripts\": {    \"delete:reports\": \"rm cypress/results/* || true\",    \"combine:reports\": \"jrm cypress/results/combined-report.xml \\\"cypress/results/*.xml\\\"\",    \"prereport\": \"npm run delete:reports\",    \"report\": \"cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json\",    \"postreport\": \"npm run combine:reports\"  }}\n```\n\n#### Spec to `STDOUT`, produce a combined Mochawesome JSON file[​](#Spec-to-STDOUT-produce-a-combined-Mochawesome-JSON-file \"Direct link to Spec-to-STDOUT-produce-a-combined-Mochawesome-JSON-file\")\n\nThis example is shown in the branch `spec-and-single-mochawesome-json` in [https://github.com/cypress-io/cypress-example-circleci-orb](https://github.com/cypress-io/cypress-example-circleci-orb). We want to output a \"spec\" report to `STDOUT`, save an individual Mochawesome JSON file per test file, and then combine all JSON reports into a single report.\n\nWe need to install some additional dependencies.\n\n```\nnpm install mochawesome mochawesome-merge mochawesome-report-generator --save-dev\n```\n\nWe need to configure the reporter in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration) to skip the HTML report generation and save each individual JSON file in the `cypress/results` folder.\n\n#### Cypress configuration[​](#Cypress-configuration-5 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'mochawesome',  reporterOptions: {    reportDir: 'cypress/results',    overwrite: false,    html: false,    json: true,  },})\n```\n\n#### Command line[​](#Command-line-4 \"Direct link to Command line\")\n\n```\ncypress run --reporter mochawesome \\  --reporter-options reportDir=\"cypress/results\",overwrite=false,html=false,json=true\n```\n\nOur run will generate files `cypress/results/mochawesome.json, cypress/results/mochawesome_001.json, ...`. Then we can combine them using the [mochawesome-merge](https://github.com/antontelesh/mochawesome-merge) utility.\n\n```\nnpx mochawesome-merge \"cypress/results/*.json\" > mochawesome.json\n```\n\nWe can now generate a combined HTML report from the `mochawesome.json` file using the [https://github.com/adamgruber/mochawesome-report-generator](https://github.com/adamgruber/mochawesome-report-generator):\n\n```\nnpx marge mochawesome.json\n```\n\nIt generates the beautiful standalone HTML report file `mochawesome-report/mochawesome.html` shown below. As you can see all test results, timing information, and even test bodies are included.\n\n![Mochawesome HTML report](https://docs.cypress.io/img/guides/reporters/mochawesome-report.png)\n\nFor more information, see [Integrating Mochawesome reporter with Cypress's](http://antontelesh.github.io/testing/2019/02/04/mochawesome-merge.html)\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [4.4.2](https://docs.cypress.io/guides/references/changelog) | Custom Mocha reporters updated to use the version of Mocha bundled with Cypress. No need to install `mocha` separately to use custom reporters. |",
  "title": "Reporters | Cypress Documentation",
  "description": "Because Cypress is built on top of Mocha, that means any reporter built for",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/interacting-with-elements",
  "markdown": "# Interacting with Elements | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress calculates visibility\n*   How Cypress ensures elements are actionable\n*   How Cypress deals with animating elements\n*   How you can bypass these checks and force events\n\n## Actionability[​](#Actionability \"Direct link to Actionability\")\n\nSome commands in Cypress are for interacting with the DOM such as:\n\n*   [`.click()`](https://docs.cypress.io/api/commands/click)\n*   [`.dblclick()`](https://docs.cypress.io/api/commands/dblclick)\n*   [`.rightclick()`](https://docs.cypress.io/api/commands/rightclick)\n*   [`.type()`](https://docs.cypress.io/api/commands/type)\n*   [`.clear()`](https://docs.cypress.io/api/commands/clear)\n*   [`.check()`](https://docs.cypress.io/api/commands/check)\n*   [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck)\n*   [`.select()`](https://docs.cypress.io/api/commands/select)\n*   [`.trigger()`](https://docs.cypress.io/api/commands/trigger)\n*   [`.selectFile()`](https://docs.cypress.io/api/commands/selectfile)\n\nWe call these \"action commands.\" These actions simulate a user interacting with your application. Under the hood, Cypress fires the events a browser would fire thus causing your application's event bindings to fire.\n\nPrior to issuing any of the commands, we check the current state of the DOM and take some actions to ensure the DOM element is \"ready\" to receive the action.\n\nCypress will watch the DOM - re-running the queries that yielded the current subject - until an element passes all of these checks for the duration of the [`defaultCommandTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) (described in depth in the [Implicit Assertions](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Implicit-Assertions) core concept guide).\n\n**_Checks and Actions Performed_**\n\n*   [Scroll the element into view.](#Scrolling)\n*   [Ensure the element is not hidden.](#Visibility)\n*   [Ensure the element is not disabled.](#Disability)\n*   [Ensure the element is not detached.](#Detached)\n*   [Ensure the element is not readonly.](#Readonly)\n*   [Ensure the element is not animating.](#Animations)\n*   [Ensure the element is not covered.](#Covering)\n*   [Scroll the page if still covered by an element with fixed position.](#Scrolling)\n*   [Fire the event at the desired coordinates.](#Coordinates)\n\nWhenever Cypress cannot interact with an element, it could fail at any of the above steps. You will usually get an error explaining why the element was not found to be actionable.\n\n### Visibility[​](#Visibility \"Direct link to Visibility\")\n\nCypress checks a lot of things to determine an element's visibility. The following calculations factor in CSS translations and transforms.\n\n#### An element is considered hidden if:[​](#An-element-is-considered-hidden-if \"Direct link to An element is considered hidden if:\")\n\n*   Its `width` or `height` is `0`.\n*   Its CSS property (or ancestors) is `visibility: hidden`.\n*   Its CSS property (or ancestors) is `display: none`.\n*   Its CSS property is `position: fixed` and it's offscreen or covered up.\n*   Any of its ancestors **hides overflow**\\*\n    *   AND that ancestor has a `width` or `height` of `0`\n    *   AND an element between that ancestor and the element is `position: absolute`\n*   Any of its ancestors **hides overflow**\\*\n    *   AND that ancestor or an ancestor between it and that ancestor is its offset parent\n    *   AND it is positioned outside that ancestor's bounds\n*   Any of its ancestors **hides overflow**\\*\n    *   AND the element is `position: relative`\n    *   AND it is positioned outside that ancestor's bounds\n\n\\***hides overflow** means it has `overflow: hidden`, `overflow-x: hidden`, `overflow-y: hidden`, `overflow: scroll`, or `overflow: auto`\n\ninfo\n\n**Opacity**\n\nElements where the CSS property (or ancestors) is `opacity: 0` are considered hidden when [asserting on the element's visibility directly](https://docs.cypress.io/guides/references/assertions#Visibility).\n\nHowever elements where the CSS property (or ancestors) is `opacity: 0` are considered actionable and any commands used to interact with the hidden element will perform the action.\n\n### Disability[​](#Disability \"Direct link to Disability\")\n\nCypress checks whether the `disabled` property is `true` on a [form control](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) element, such as `button` or `input`. Setting a `disabled` attribute on other elements will have no effect on a user's ability to interact with them, and won't impact Cypress actionability checks.\n\n### Detached[​](#Detached \"Direct link to Detached\")\n\nCypress checks whether an element you are making assertions on is still within the `document` of the application under test.\n\nWhen many applications rerender the DOM, they actually remove the DOM element and insert a new DOM element in its place with the newly change attributes. This is why it's important not to chain _action commands_ together - cypress can re-run queries to locate the fresh element, but it will [never re-run commands](https://docs.cypress.io/guides/core-concepts/retry-ability).\n\n### Readonly[​](#Readonly \"Direct link to Readonly\")\n\nCypress checks whether an element's `readonly` property is set during [.type()](https://docs.cypress.io/api/commands/type).\n\n### Animations[​](#Animations \"Direct link to Animations\")\n\nCypress will automatically determine if an element is animating and wait until it stops.\n\nTo calculate whether an element is animating we take a sample of the last positions it was at and calculate the element's slope. You might remember this from 8th grade algebra. 😉\n\nTo calculate whether an element is animating we check the current and previous positions of the element itself. If the distance exceeds the [`animationDistanceThreshold`](https://docs.cypress.io/guides/references/configuration#Actionability), then we consider the element to be animating.\n\nWhen coming up with this value, we did a few experiments to find a speed that \"feels\" too fast for a user to interact with. You can always [increase or decrease this threshold](https://docs.cypress.io/guides/references/configuration#Actionability).\n\nYou can also turn off our checks for animations with the configuration option [`waitForAnimations`](https://docs.cypress.io/guides/references/configuration#Actionability).\n\n### Covering[​](#Covering \"Direct link to Covering\")\n\nWe also ensure that the element we're attempting to interact with isn't covered by a parent element.\n\nFor instance, an element could pass all of the previous checks, but a giant dialog could be covering the entire screen making interacting with the element impossible for any real user.\n\ninfo\n\nWhen checking to see if the element is covered we always check its center coordinates.\n\nIf a _child_ of the element is covering it - that's okay. In fact we'll automatically issue the events we fire to that child.\n\nImagine you have a button:\n\n```\n<button>  <i class=\"fa fa-check\">  <span>Submit</span></button>\n```\n\nOftentimes either the `<i>` or `<span>` element is covering the exact coordinate we're attempting to interact with. In those cases, the event fires on the child. We even note this for you in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log).\n\n### Scrolling[​](#Scrolling \"Direct link to Scrolling\")\n\nBefore interacting with an element, we will _always_ scroll it into view (including any of its parent containers). Even if the element was visible without scrolling, we perform the scrolling algorithm in order to reproduce the same behavior every time the command is run.\n\ninfo\n\nThis scrolling logic only applies to [commands that are actionable above](#Actionability). **We do not scroll elements** into view when using DOM commands such as [cy.get()](https://docs.cypress.io/api/commands/get) or [.find()](https://docs.cypress.io/api/commands/find).\n\nBy default, the scrolling algorithm works by scrolling the top, leftmost point of the element we issued the command on to the top, leftmost scrollable point of its scrollable container.\n\nAfter scrolling the element, if we determine that it is still being covered up, we will continue to scroll and \"nudge\" the page until it becomes visible. This most frequently happens when you have `position: fixed` or `position: sticky` navigation elements which are fixed to the top of the page.\n\nOur algorithm _should_ always be able to scroll until the element is not covered.\n\nTo change the position in the viewport to where we scroll an element, you can use the [`scrollBehavior`](https://docs.cypress.io/guides/references/configuration#Actionability) configuration option. This can be useful if the element is covered up when aligned to the top of the viewport, or if you just prefer the element to be centered during scrolling of action commands. Accepted values are `'center'`, `'top'`, `'bottom'`, `'nearest'`, and `false`, with `false` disabling scrolling altogether.\n\n### Coordinates[​](#Coordinates \"Direct link to Coordinates\")\n\nAfter we verify the element is actionable, Cypress will then fire all of the appropriate events and corresponding default actions. Usually these events' coordinates are fired at the center of the element, but most commands enable you to change the position it's fired to.\n\n```\ncy.get('button').click({ position: 'topLeft' })\n```\n\nThe coordinates we fired the event at will generally be available when clicking the command in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log).\n\n![Event coordinates](https://docs.cypress.io/img/guides/core-concepts/coords.png)\n\nAdditionally we'll display a red \"hitbox\" - which is a dot indicating the coordinates of the event.\n\n![Hitbox](https://docs.cypress.io/img/guides/core-concepts/hitbox.png)\n\n## Debugging[​](#Debugging \"Direct link to Debugging\")\n\nIt can be difficult to debug problems when elements are not considered actionable by Cypress.\n\nAlthough you _should_ see a nice error message, nothing beats visually inspecting and poking at the DOM yourself to understand the reason why.\n\nWhen you use the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) to hover over a command, you'll notice that we will always scroll the element the command was applied to into view. Please note that this is _NOT_ using the same algorithms that we described above.\n\nIn fact we only ever scroll elements into view when actionable commands are running using the above algorithms. We _do not_ scroll elements into view on regular DOM queries like [`cy.get()`](https://docs.cypress.io/api/commands/get) or [`.find()`](https://docs.cypress.io/api/commands/find).\n\nThe reason we scroll an element into view when hovering over a snapshot is to help you to see which element(s) were found by that corresponding command. It's a purely visual feature and does not necessarily reflect what your page looked like when the command ran.\n\nIn other words, you cannot get a correct visual representation of what Cypress \"saw\" when looking at a previous snapshot.\n\nThe only way for you to \"see\" and debug why Cypress thought an element was not visible is to use a `debugger` statement.\n\nWe recommend placing `debugger` or using the [`.debug()`](https://docs.cypress.io/api/commands/debug) command directly BEFORE the action.\n\nMake sure your Developer Tools are open and you can get pretty close to \"seeing\" the calculations Cypress is performing.\n\nYou can also [bind to Events](https://docs.cypress.io/api/cypress-api/catalog-of-events) that Cypress fires as it's working with your element. Using a debugger with these events will give you a much lower level view into how Cypress works.\n\n```\n// break on a debugger before the action commandcy.get('button').debug().click()\n```\n\n## Forcing[​](#Forcing \"Direct link to Forcing\")\n\nWhile the above checks are super helpful at finding situations that would prevent your users from interacting with elements - sometimes they can get in the way!\n\nSometimes it's not worth trying to \"act like a user\" to get a robot to do the exact steps a user would to interact with an element.\n\nImagine you have a nested navigation structure where the user must hover over and move the mouse in a very specific pattern to reach the desired link.\n\nIs this worth trying to replicate when you're testing?\n\nMaybe not! For these scenarios, we give you an escape hatch to bypass all of the checks above and force events to happen!\n\nYou can pass `{ force: true }` to most action commands.\n\n```\n// force the click and all subsequent events// to fire even if this element isn't considered 'actionable'cy.get('button').click({ force: true })\n```\n\ninfo\n\n**What's the difference?**\n\nWhen you force an event to happen we will:\n\n*   Continue to perform all default actions\n*   Forcibly fire the event at the element\n\nWe will NOT perform these:\n\n*   Scroll the element into view\n*   Ensure it is visible\n*   Ensure it is not disabled\n*   Ensure it is not detached\n*   Ensure it is not readonly\n*   Ensure it is not animating\n*   Ensure it is not covered\n*   Fire the event at a descendent\n\nIn summary, `{ force: true }` skips the checks, and it will always fire the event at the desired element.\n\ncaution\n\n**force `.select()` disabled options**\n\nPassing `{ force: true }` to [.select()](https://docs.cypress.io/api/commands/select) will not override the actionability checks for selecting a disabled `<option>` or an option within a disabled `<optgroup>`. See [this issue](https://github.com/cypress-io/cypress/issues/107) for more detail.",
  "title": "Interacting with Elements | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/retry-ability",
  "markdown": "# Retry-ability | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress retries commands and assertions\n*   When commands are retried and when they are not\n*   How to address some situations of flaky tests\n\nA core feature of Cypress that assists with testing dynamic web applications is retry-ability. Like a good transmission in a car, it usually works without you noticing it. But understanding how it works will help you write faster tests with fewer run-time surprises.\n\ninfo\n\n**Test Retries**\n\nIf you are looking to retry tests a configured number of times when the test fails, check out our guide on [Test Retries](https://docs.cypress.io/guides/guides/test-retries).\n\n## Commands, Queries and Assertions[​](#Commands-Queries-and-Assertions \"Direct link to Commands, Queries and Assertions\")\n\nWhile all methods you chain off of `cy` in your Cypress tests are commands, it's important to understand the different rules by which they operate.\n\n*   **Queries** link up, retrying the entire chain together.\n*   **Assertions** are a type of query that's specially displayed in the command log.\n*   **Non-queries** only execute once.\n\nFor example, there are 5 queries, an action, and 2 assertions in the test below.\n\n```\nit('creates an item', () => {  // Non-query commands only execute once.  cy.visit('/')  // The .focused() query and .should() assertion link together,  // rerunning until the currently focused element has  // the 'new-todo' class  cy.focused().should('have.class', 'new-todo')  // The queries .get() and .find()  // link together, forming the subject for  // the non-query `.type()`.  cy.get('.header').find('.new-todo').type('todo A{enter}')  // Two queries and an assertion chained together  cy.get('.todoapp').find('.todo-list li').should('have.length', 1)})\n```\n\nThe [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) shows all commands regardless of types, with passing assertions showing in green.\n\n![Cypress tests showing commands and assertions](https://docs.cypress.io/img/guides/retry-ability/command-assertions.png)\n\nLet's look at the last chain of commands:\n\n```\ncy.get('.todoapp') // query  .find('.todo-list li') // query  .should('have.length', 1) // assertion\n```\n\nBecause nothing is synchronous in modern web applications, Cypress can't query all the DOM elements matching `.todo-list li` and check if there is exactly one of them. There are many examples of why this would not work well.\n\n*   What if the application has not updated the DOM by the time these commands run?\n*   What if the application is waiting for its back end to respond before populating the DOM element?\n*   What if the application does some intensive computation before showing the results in the DOM?\n\nThus [`cy.get`](https://docs.cypress.io/api/commands/get) and [`cy.find()`](https://docs.cypress.io/api/commands/find) have to be smarter and expect the application to potentially update. `cy.get()` queries the application's DOM, finds the elements that match the selector, and then passes them to `.find('.todo-list li')`. `.find()` locates a new set of elements, and passes them to `.should()`. `.should()` then asserts on the list of found elements (in our case, that it has a length of 1).\n\n*   ✅ If the assertion passes, then `.should()` finishes successfully.\n*   🚨 If the assertion fails, then Cypress will requery the application's DOM again - starting from the top of the chain of linked queries. It will look for elements that match `.get().find()` again, and re-run the assertion. If the assertion still fails, Cypress continues retrying until the timeout is reached.\n\nRetry-ability allows the test to complete each command as soon as the assertion passes, without hard-coding waits. If your application takes a few milliseconds or even seconds to render each DOM element - no big deal, the test does not have to change at all. For example, let's introduce an artificial delay of 3 seconds when refreshing the application's UI below in an example TodoMVC model code:\n\n```\napp.TodoModel.prototype.addTodo = function (title) {  this.todos = this.todos.concat({    id: Utils.uuid(),    title: title,    completed: false,  })  // let's trigger the UI to render after 3 seconds  setTimeout(() => {    this.inform()  }, 3000)}\n```\n\nThe test still passes! `cy.get('.todo-list')` passes immediately - the `todo-list` exists - but `.should('have.length', 1)` shows the spinning indicator, meaning Cypress is still waiting for the assertion to pass.\n\n![Retrying assertion](https://docs.cypress.io/img/guides/retry-ability/retry-assertion.gif)\n\nWithin a few milliseconds after the DOM updates, the linked queries `.get().find()` locate an element and `.should('have.length', 1)` passes.\n\n## Multiple assertions[​](#Multiple-assertions \"Direct link to Multiple assertions\")\n\nQueries and assertions are always executed in order, and always retry 'from the top'. If you have multiple assertions, Cypress will retry until each passes before moving on to the next one.\n\nFor example, the following test has [`.should()`](https://docs.cypress.io/api/commands/should) and [`.and()`](https://docs.cypress.io/api/commands/and) assertions. `.and()` is an alias of the `.should()` command, so the second assertion is really a custom callback assertion in the form of the [`.should(cb)`](https://docs.cypress.io/api/commands/should#Function) function with 2 [`expect`](https://docs.cypress.io/guides/references/assertions#Chai) assertions inside of it.\n\n```\nit('creates two items', () => {  cy.visit('/')  cy.get('.new-todo').type('todo A{enter}')  cy.get('.new-todo').type('todo B{enter}')  cy.get('.todo-list li') // query    .should('have.length', 2) // assertion    .and(($li) => {      // 2 mocha assertions inside of the .and() assertion      expect($li.get(0).textContent, 'first item').to.equal('todo a')      expect($li.get(1).textContent, 'second item').to.equal('todo B')    })})\n```\n\nBecause the first expect statement (`expect($li.get(0).textContent, 'first item').to.equal('todo a')`) fails, the second statement is never reached. The `.and()` command fails after timing out, and the Command Log correctly shows that the first encountered assertion `should('have.length', 2)` passed, but the \"first item\" assertion failed.\n\n![Retrying multiple assertions](https://docs.cypress.io/img/guides/retry-ability/second-assertion-fails.gif)\n\n## Implicit Assertions[​](#Implicit-Assertions \"Direct link to Implicit Assertions\")\n\nOften a Cypress command has built-in assertions that will cause the command to be retried until they pass. For example, the [`.eq()`](https://docs.cypress.io/api/commands/eq) query will be retried even without any attached assertions until it finds an element with the given index.\n\n```\ncy.get('.todo-list li') // query  .should('have.length', 2) // assertion  .eq(3) // query\n```\n\n![Retrying built-in assertion](https://docs.cypress.io/img/guides/retry-ability/eq.gif)\n\nOnly queries can be retried, but most other commands still have built-in _waiting_ and assertions. For example, as described in the \"Assertions\" section of [.click()](https://docs.cypress.io/api/commands/click), the `click()` action command waits to click until the element becomes [actionable](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Actionability), including re-running the query chain leading up to it in case the page updates while we're waiting.\n\nCypress tries to act like a human user would using the browser.\n\n*   Can a user click on the element?\n*   Is the element invisible?\n*   Is the element behind another element?\n*   Does the element have the `disabled` attribute?\n\n[Action commands](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) - such as `.click()` - automatically wait until multiple built-in assertions like these pass, and then it will attempt the action once.\n\n## Timeouts[​](#Timeouts \"Direct link to Timeouts\")\n\nBy default each command that retries does so for up to 4 seconds - the [`defaultCommandTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) setting.\n\n### Increase time to retry[​](#Increase-time-to-retry \"Direct link to Increase time to retry\")\n\nYou can change the default timeout for _all commands_. See [Configuration: Overriding Options](https://docs.cypress.io/guides/references/configuration#Overriding-Options) for examples of overriding this option.\n\nFor example, to set the default command timeout to 10 seconds via the command line:\n\n```\ncypress run --config defaultCommandTimeout=10000\n```\n\nWe do not recommend changing the command timeout globally. Instead, pass the individual command's `{ timeout: ms }` option to retry for a different period of time. For example:\n\n```\n// we've modified the timeout which affects default + added assertionscy.get('[data-testid=\"mobile-nav\"]', { timeout: 10000 })  .should('be.visible')  .and('contain', 'Home')\n```\n\nCypress will retry for up to 10 seconds to find a visible element with `data-testid` attribute `mobile-nav` with text containing \"Home\". For more examples, read the [Timeouts](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Timeouts) section in the \"Introduction to Cypress\" guide.\n\n### Disable retry[​](#Disable-retry \"Direct link to Disable retry\")\n\nOverriding the timeout to `0` will essentially disable retrying the query, since it will spend 0 milliseconds retrying.\n\n```\n// check synchronously that the element does not exist (no retry)// for example just after a server-side rendercy.get('[data-testid=\"ssr-error\"]', { timeout: 0 }).should('not.exist')\n```\n\n## Only queries are retried[​](#Only-queries-are-retried \"Direct link to Only queries are retried\")\n\nAny command that isn't a query, such as `.click()`, will not \"chain together\" to form the subject for later commands the way queries do. Cypress will retry any queries _leading up to_ a command, and retry any assertions _after_ a command, but commands themselves only execute once. After they've executed, nothing leading up to them will retry.\n\nMost commands are not retried because they could potentially change the state of the application under test. For example, Cypress will not retry the [.click()](https://docs.cypress.io/api/commands/click) action command, because it could change something in the application. After the click occurs, Cypress will also not re-run any queries before `.click()`.\n\n### Actions should be at the end of chains, not the middle[​](#Actions-should-be-at-the-end-of-chains-not-the-middle \"Direct link to Actions should be at the end of chains, not the middle\")\n\nThe following test might have problems if:\n\n*   Your JS framework re-rendered asynchronously\n*   Your app code reacted to an event firing and removed the element\n\n#### Incorrectly chaining commands[​](#Incorrectly-chaining-commands \"Direct link to Incorrectly-chaining-commands\")\n\n```\ncy.get('.new-todo')  .type('todo A{enter}') // action  .type('todo B{enter}') // action after another action - bad  .should('have.class', 'active') // assertion after an action - bad\n```\n\n#### Correctly ending chains after an action[​](#Correctly-ending-chains-after-an-action \"Direct link to Correctly-ending-chains-after-an-action\")\n\nTo avoid these issues entirely, it is better to split up the above chain of commands.\n\n```\ncy.get('.new-todo').type('todo A{enter}')cy.get('.new-todo').type('todo B{enter}')cy.get('.new-todo').should('have.class', 'active')\n```\n\nWriting your tests in this way will help you avoid issues where the page rerenders in the middle of your test and Cypress loses track of which elements it's supposed to be operating or asserting on. Aliases - [`cy.as()`](https://docs.cypress.io/api/commands/as) - can help make this pattern less intrusive.\n\n```\ncy.get('.new-todo').as('new')cy.get('@new').type('todo A{enter}')cy.get('@new').type('todo B{enter}')cy.get('@new').should('have.class', 'active')\n```\n\ncaution\n\nVery rarely you may want to retry a command like `.click()`. We describe one case like that where the event listeners are attached to a modal popup only after a delay, thus causing default events fired during `.click()` to not register. In this special case you may want to \"keep clicking\" until the event registers, and the dialog disappears. Read about it in the [When Can the Test Click?](https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/) blog post.\n\nBecause of the implicit assertions built into every command, and action commands in particular, you should rarely need this pattern.\n\nAs another example, when confirming that the button component invokes the `click` prop testing with the [cypress/react](https://github.com/cypress-io/cypress/tree/develop/npm/react) mounting library, the following test might or might not work:\n\n#### Incorrectly checking if the stub was called[​](#Incorrectly-checking-if-the-stub-was-called \"Direct link to Incorrectly-checking-if-the-stub-was-called\")\n\n```\nconst Clicker = ({ click }) => (  <div>    <button onClick={click}>Click me</button>  </div>)it('calls the click prop twice', () => {  const onClick = cy.stub()  cy.mount(<Clicker click={onClick} />)  cy.get('button')    .click()    .click()    .then(() => {      // works in this case, but not recommended      // because .click() and .then() do not retry      expect(onClick).to.be.calledTwice    })})\n```\n\nThe above example will fail if the component calls the `click` prop after a delay.\n\n```\nconst Clicker = ({ click }) => (  <div>    <button onClick={() => setTimeout(click, 500)}>Click me</button>  </div>)\n```\n\n![Expect fails the test without waiting for the delayed stub](https://docs.cypress.io/img/guides/retry-ability/delay-click.png)\n\nThe test finishes before the component calls the `click` prop twice, and without retrying the assertion `expect(onClick).to.be.calledTwice`.\n\nIt could also fail if React or another JavaScript library decided to rerender the DOM between clicks.\n\n#### Correctly waiting for the stub to be called[​](#Correctly-waiting-for-the-stub-to-be-called \"Direct link to Correctly-waiting-for-the-stub-to-be-called\")\n\nWe recommend aliasing the stub using the [`.as`](https://docs.cypress.io/api/commands/as) command and using `cy.get('@alias')` to run assertions.\n\n```\nit('calls the click prop', () => {  const onClick = cy.stub().as('clicker')  cy.mount(<Clicker click={onClick} />)  // Good practice 💡: Don't chain anything off of commands  cy.get('button').click()  cy.get('button').click()  // Good practice 💡: Reference the stub with an alias  cy.get('@clicker').should('have.been.calledTwice')})\n```\n\n![Retrying the assertions using a stub alias](https://docs.cypress.io/img/guides/retry-ability/click-twice.gif)\n\n### Use `.should()` with a callback[​](#Use-should-with-a-callback \"Direct link to Use-should-with-a-callback\")\n\nIf you are using commands, but need to retry the entire chain, consider rewriting the commands into a [.should(callbackFn)](https://docs.cypress.io/api/commands/should#Function).\n\nBelow is an example where the number value is set after a delay:\n\n```\n<div class=\"random-number-example\">  Random number: <span id=\"random-number\">🎁</span></div><script>  const el = document.getElementById('random-number')  setTimeout(() => {    el.innerText = Math.floor(Math.random() * 10 + 1)  }, 1500)</script>\n```\n\n![Random number](https://docs.cypress.io/img/guides/retry-ability/random-number.gif)\n\n### Incorrectly waiting for values[​](#Incorrectly-waiting-for-values \"Direct link to Incorrectly-waiting-for-values\")\n\nYou may want to write a test like below, to test that the number is between 1 and 10, although **this will not work as intended**. The test yields the following values, noted in the comments, before failing.\n\n```\n// WRONG: this test will not work as intendedcy.get('[data-testid=\"random-number\"]') // <div>🎁</div>  .invoke('text') // \"🎁\"  .then(parseFloat) // NaN  .should('be.gte', 1) // fails  .and('be.lte', 10) // never evaluates\n```\n\nUnfortunately, the [.then()](https://docs.cypress.io/api/commands/then) command breaks the chain of queries - nothing before it (such as fetching the text of the element) re-runs.\n\n![First attempt at writing the test](https://docs.cypress.io/img/guides/retry-ability/random-number-first-attempt.png)\n\n#### Correctly waiting for values[​](#Correctly-waiting-for-values \"Direct link to Correctly-waiting-for-values\")\n\nWe need to retry getting the element, invoking the `text()` method, calling the `parseFloat` function and running the `gte` and `lte` assertions. We can achieve this using the `.should(callbackFn)`.\n\n```\ncy.get('[data-testid=\"random-number\"]').should(($div) => {  // all the code inside here will retry  // until it passes or times out  const n = parseFloat($div.text())  expect(n).to.be.gte(1).and.be.lte(10)})\n```\n\nThe above test retries getting the element and invoking the text of the element to get the number. When the number is finally set in the application, then the `gte` and `lte` assertions pass and the test passes.\n\n![Random number using callback](https://docs.cypress.io/img/guides/retry-ability/random-number-callback.gif)\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   Read our blog posts about fighting [the test flake](https://cypress.io/blog/tag/flake/).\n*   You can add retry-ability to your own [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands) and queries.\n*   You can retry any function with attached assertions using the 3rd party plugins [cypress-pipe](https://github.com/NicholasBoll/cypress-pipe) and [cypress-wait-until](https://github.com/NoriSte/cypress-wait-until).\n*   3rd party plugin [cypress-recurse](https://github.com/bahmutov/cypress-recurse) can be used to implement the [visual testing with retry-ability for canvas elements](https://glebbahmutov.com/blog/canvas-testing/)\n*   To learn how to enable Cypress' test retries functionality, which retries tests that fail, check out our official guide on [Test Retries](https://docs.cypress.io/guides/guides/test-retries).",
  "title": "Retry-ability | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/variables-and-aliases",
  "markdown": "# Variables and Aliases | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to deal with async commands\n*   What Aliases are and how they simplify your code\n*   Why you rarely need to use variables with Cypress\n*   How to use Aliases for objects, elements and routes\n\n## Return Values[​](#Return-Values \"Direct link to Return Values\")\n\nNew users to Cypress may initially find it challenging to work with the asynchronous nature of our APIs.\n\ntip\n\n**Do not worry!**\n\nThere are many ways to reference, compare and utilize the objects that Cypress commands yield you.\n\nOnce you get the hang of async code you'll realize you can do everything you could do synchronously, without your code doing any backflips.\n\nThis guide explores many common patterns for writing good Cypress code that can handle even the most complex situations.\n\nAsynchronous APIs are here to stay in JavaScript. They are found everywhere in modern code. In fact, most new browser APIs are asynchronous and many core Node modules are asynchronous as well.\n\nThe patterns we'll explore below are useful in and outside of Cypress.\n\nThe first and most important concept you should recognize is...\n\ndanger\n\n**Return Values**\n\n**You cannot assign or work with the return values** of any Cypress command. Commands are enqueued and run asynchronously.\n\n```\n// this won't work the way you think it doesconst button = cy.get('button')const form = cy.get('form')button.click()\n```\n\n### Closures[​](#Closures \"Direct link to Closures\")\n\nTo access what each Cypress command yields you use [`.then()`](https://docs.cypress.io/api/commands/then).\n\n```\ncy.get('button').then(($btn) => {  // $btn is the object that the previous  // command yielded us})\n```\n\nIf you're familiar with [native Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) the Cypress `.then()` works similarly. You can continue to nest more Cypress commands inside of the `.then()`.\n\nEach nested command has access to the work done in previous commands. This ends up reading very nicely.\n\n```\ncy.get('button').then(($btn) => {  // store the button's text  const txt = $btn.text()  // submit a form  cy.get('form').submit()  // compare the two buttons' text  // and make sure they are different  cy.get('button').should(($btn2) => {    expect($btn2.text()).not.to.eq(txt)  })})// these commands run after all of the// other previous commands have finishedcy.get(...).find(...).should(...)\n```\n\nThe commands outside of the `.then()` will not run until all of the nested commands finish.\n\ninfo\n\nBy using callback functions we've created a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures). Closures enable us to keep references around to refer to work done in previous commands.\n\n### Debugging[​](#Debugging \"Direct link to Debugging\")\n\nUsing `.then()` functions is an excellent opportunity to use [`debugger`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger). This can help you understand the order in which commands are run. This also enables you to inspect the objects that Cypress yields you in each command.\n\n```\ncy.get('button').then(($btn) => {  // inspect $btn <object>  debugger  cy.get('[data-testid=\"countries\"]')    .select('USA')    .then(($select) => {      // inspect $select <object>      debugger      cy.clock().then(($clock) => {        // inspect $clock <object>        debugger        $btn // is still available        $select // is still available too      })    })})\n```\n\n### Variables[​](#Variables \"Direct link to Variables\")\n\nTypically in Cypress you hardly need to ever use `const`, `let`, or `var`. When using closures you'll always have access to the objects that were yielded to you without assigning them.\n\nThe one exception to this rule is when you are dealing with mutable objects (that change state). When things change state you often want to compare an object's previous value to the next value.\n\nHere's a great use case for a `const`.\n\n```\n<button>increment</button>you clicked button <span data-testid=\"num\">0</span> times\n```\n\n```\n// app codelet count = 0$('button').on('click', () => {  $('[data-testid=\"num\"]').text((count += 1))})\n```\n\n```\n// cypress test codecy.get('[data-testid=\"num\"]').then(($span) => {  // capture what num is right now  const num1 = parseFloat($span.text())  cy.get('button')    .click()    .then(() => {      // now capture it again      const num2 = parseFloat($span.text())      // make sure it's what we expected      expect(num2).to.eq(num1 + 1)    })})\n```\n\nThe reason for using `const` is because the `$span` object is mutable. Whenever you have mutable objects and you're trying to compare them, you'll need to store their values. Using `const` is a perfect way to do that.\n\nUsing `.then()` callback functions to access the previous command values is great—but what happens when you're running code in hooks like `before` or `beforeEach`?\n\n```\nbeforeEach(() => {  cy.get('button').then(($btn) => {    const text = $btn.text()  })})it('does not have access to text', () => {  // how do we get access to text ?!?!})\n```\n\nHow will we get access to `text`?\n\nWe could make our code do some ugly backflips using `let` to get access to it.\n\ndanger\n\n**Do not do this**\n\nThis code below is just for demonstration.\n\n```\ndescribe('a suite', () => {  // this creates a closure around  // 'text' so we can access it  let text  beforeEach(() => {    cy.get('button').then(($btn) => {      // redefine text reference      text = $btn.text()    })  })  it('does have access to text', () => {    // now text is available to us    // but this is not a great solution :(    text  })})\n```\n\nFortunately, you don't have to make your code do backflips. With Cypress, we can better handle these situations.\n\ntip\n\n**Introducing Aliases**\n\nAliases are a powerful construct in Cypress that have many uses. We'll explore each of their capabilities below.\n\nAt first, we'll use them to share objects between your hooks and your tests.\n\n### Sharing Context[​](#Sharing-Context \"Direct link to Sharing Context\")\n\nSharing context is the simplest way to use aliases.\n\nTo alias something you'd like to share use the [`.as()`](https://docs.cypress.io/api/commands/as) command.\n\nLet's look at our previous example with aliases.\n\n```\nbeforeEach(() => {  // alias the $btn.text() as 'text'  cy.get('button').invoke('text').as('text')})it('has access to text', function () {  this.text // is now available})\n```\n\nUnder the hood, aliasing basic objects and primitives utilizes Mocha's shared [`context`](https://github.com/mochajs/mocha/wiki/Shared-Behaviours) object: that is, aliases are available as `this.*`.\n\nMocha automatically shares contexts for us across all applicable hooks for each test. Additionally these aliases and properties are automatically cleaned up after each test.\n\n```\ndescribe('parent', () => {  beforeEach(() => {    cy.wrap('one').as('a')  })  context('child', () => {    beforeEach(() => {      cy.wrap('two').as('b')    })    describe('grandchild', () => {      beforeEach(() => {        cy.wrap('three').as('c')      })      it('can access all aliases as properties', function () {        expect(this.a).to.eq('one') // true        expect(this.b).to.eq('two') // true        expect(this.c).to.eq('three') // true      })    })  })})\n```\n\n#### Accessing Fixtures:[​](#Accessing-Fixtures \"Direct link to Accessing Fixtures:\")\n\nThe most common use case for sharing context is when dealing with [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture).\n\nOften times you may load a fixture in a `beforeEach` hook but want to utilize the values in your tests.\n\n```\nbeforeEach(() => {  // alias the users fixtures  cy.fixture('users.json').as('users')})it('utilize users in some way', function () {  // access the users property  const user = this.users[0]  // make sure the header contains the first  // user's name  cy.get('header').should('contain', user.name)})\n```\n\ndanger\n\n**Watch out for async commands**\n\nDo not forget that **Cypress commands are async**!\n\nYou cannot use a `this.*` reference until the `.as()` command runs.\n\n```\nit('is not using aliases correctly', function () {  cy.fixture('users.json').as('users')  // nope this won't work  //  // this.users is not defined  // because the 'as' command has only  // been enqueued - it has not run yet  const user = this.users[0]})\n```\n\nThe same principles we introduced before apply to this situation. If you want to access what a command yields you have to do it in a closure using a [`.then()`](https://docs.cypress.io/api/commands/then).\n\n```\n// yup all goodcy.fixture('users.json').then((users) => {  // now we can avoid the alias altogether  // and use a callback function  const user = users[0]  // passes  cy.get('header').should('contain', user.name)})\n```\n\n#### Avoiding the use of `this`[​](#Avoiding-the-use-of-this \"Direct link to Avoiding-the-use-of-this\")\n\ncaution\n\n**Arrow Functions**\n\nAccessing aliases as properties with `this.*` will not work if you use [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for your tests or hooks.\n\nThis is why all of our examples use the regular `function () {}` syntax as opposed to the lambda \"fat arrow\" syntax `() => {}`.\n\nInstead of using the `this.*` syntax, there is another way to access aliases.\n\nThe [`cy.get()`](https://docs.cypress.io/api/commands/get) command is capable of accessing aliases with a special syntax using the `@` character:\n\n```\nbeforeEach(() => {  // alias the users fixtures  cy.fixture('users.json').as('users')})it('utilize users in some way', function () {  // use the special '@' syntax to access aliases  // which avoids the use of 'this'  cy.get('@users').then((users) => {    // access the users argument    const user = users[0]    // make sure the header contains the first    // user's name    cy.get('header').should('contain', user.name)  })})\n```\n\nBy using [`cy.get()`](https://docs.cypress.io/api/commands/get) we avoid the use of `this`.\n\nKeep in mind that there are use cases for both approaches because they have one major difference.\n\nWhen using `this.users`, it is stored on the context when it is first evaluated. But when using `cy.get('@users')`, any queries are re-evaluated every time the alias is accessed.\n\n```\nconst favorites = { color: 'blue' }cy.wrap(favorites).its('color').as('favoriteColor')cy.then(function () {  favorites.color = 'red'})cy.get('@favoriteColor').then(function (aliasValue) {  expect(aliasValue).to.eql('red')  expect(this.favoriteColor).to.eql('blue')})\n```\n\nIn the second `.then()` block, `cy.get('@favoriteColor')` runs `cy.wrap(favorites).its('color')` fresh each time, but `this.favoriteColor` was set when the alias was first stored, back when our favorite color was blue.\n\n### Elements[​](#Elements \"Direct link to Elements\")\n\nAliases have other special characteristics when being used with DOM elements.\n\nAfter you alias DOM elements, you can then later access them for reuse.\n\n```\n// alias all of the tr's found in the table as 'rows'cy.get('table').find('tr').as('rows')\n```\n\nInternally, Cypress has made a reference to the `<tr>` collection returned as the alias \"rows\". To reference these same \"rows\" later, you can use the [`cy.get()`](https://docs.cypress.io/api/commands/get) command.\n\n```\n// Cypress returns the reference to the <tr>'s// which allows us to continue to chain commands// finding the 1st row.cy.get('@rows').first().click()\n```\n\nBecause we've used the `@` character in [`cy.get()`](https://docs.cypress.io/api/commands/get), instead of querying the DOM for elements, [`cy.get()`](https://docs.cypress.io/api/commands/get) looks for an existing alias called `rows` and returns the reference (if it finds it).\n\n#### Stale Elements:[​](#Stale-Elements \"Direct link to Stale Elements:\")\n\nIn many single-page applications, the JavaScript re-renders parts of the DOM constantly. This is why we always re-run queries when you fetch an alias, so you never end up with stale elements.\n\n```\n<ul id=\"todos\">  <li>    Walk the dog    <button class=\"edit\">edit</button>  </li>  <li>    Feed the cat    <button class=\"edit\">edit</button>  </li></ul>\n```\n\nLet's imagine when we click the `.edit` button that our `<li>` is re-rendered in the DOM. Instead of displaying the edit button it instead displays an `<input />` text field allowing you to edit the todo. The previous `<li>` has been _completely_ removed from the DOM and a new `<li>` is rendered in its place.\n\n```\ncy.get('[data-testid=\"todos\"] li').first().as('firstTodo')cy.get('@firstTodo').find('.edit').click()cy.get('@firstTodo')  .should('have.class', 'editing')  .find('input')  .type('Clean the kitchen')\n```\n\nEvery time we reference `@firstTodo`, Cypress re-runs the queries leading up to the alias definition.\n\nIn our case it would re-query the DOM using: `cy.get('#todos li').first()`. Everything works because the new `<li>` is found.\n\ncaution\n\n_Usually_, replaying previous commands will return what you expect, but not always. It is recommended that you **alias elements before running commands**.\n\n*   `cy.get('nav').find('header').find('[data-testid=\"user\"]').as('user').click()` (good)\n*   `cy.get('nav').find('header').find('[data-testid=\"user\"]').click().as('user')` (bad)\n\n### Intercepts[​](#Intercepts \"Direct link to Intercepts\")\n\nAliases can also be used with [cy.intercept()](https://docs.cypress.io/api/commands/intercept). Aliasing your intercepted routes enables you to:\n\n*   ensure your application makes the intended requests\n*   wait for your server to send the response\n*   access the actual request object for assertions\n\n![Alias commands](https://docs.cypress.io/img/guides/core-concepts/aliasing-routes.png)\n\nHere's an example of aliasing an intercepted route and waiting on it to complete.\n\n```\ncy.intercept('POST', '/users', { id: 123 }).as('postUser')cy.get('form').submit()cy.wait('@postUser').then(({ request }) => {  expect(request.body).to.have.property('name', 'Brian')})cy.contains('Successfully created user: Brian')\n```\n\n### Requests[​](#Requests \"Direct link to Requests\")\n\nAliases can also be used with [requests](https://docs.cypress.io/api/commands/request).\n\nHere's an example of aliasing a request and accessing its properties later.\n\n```\ncy.request('https://jsonplaceholder.cypress.io/comments').as('comments')// other test code herecy.get('@comments').should((response) => {  if (response.status === 200) {      expect(response).to.have.property('duration')    } else {      // whatever you want to check here    }  })})\n```\n\n### Aliases are reset before each test[​](#Aliases-are-reset-before-each-test \"Direct link to Aliases are reset before each test\")\n\n**Note:** all aliases are reset before each test. A common user mistake is to create aliases using the `before` hook. Such aliases work in the first test only!\n\n```\n// 🚨 THIS EXAMPLE DOES NOT WORKbefore(() => {  // notice this alias is created just once using \"before\" hook  cy.wrap('some value').as('exampleValue')})it('works in the first test', () => {  cy.get('@exampleValue').should('equal', 'some value')})// NOTE the second test is failing because the alias is resetit('does not exist in the second test', () => {  // there is not alias because it is created once before  // the first test, and is reset before the second test  cy.get('@exampleValue').should('equal', 'some value')})\n```\n\nThe solution is to create the aliases before each test using the `beforeEach` hook\n\n```\n// ✅ THE CORRECT EXAMPLEbeforeEach(() => {  // we will create a new alias before each test  cy.wrap('some value').as('exampleValue')})it('works in the first test', () => {  cy.get('@exampleValue').should('equal', 'some value')})it('works in the second test', () => {  cy.get('@exampleValue').should('equal', 'some value')})\n```\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Blog: Load Fixtures from Cypress Custom Commands](https://glebbahmutov.com/blog/fixtures-in-custom-commands/) explains how to load or import fixtures to be used in the Cypress custom commands.",
  "title": "Variables and Aliases | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/tooling/visual-testing",
  "markdown": "# Visual Testing | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How visual testing complements functional testing\n*   How to implement visual diffing yourself or using 3rd party service\n*   How to ensure the application is in consistent state before capturing an image\n\n## Functional vs. visual testing[​](#Functional-vs-visual-testing \"Direct link to Functional vs. visual testing\")\n\nCypress is a _functional_ test runner. It drives the web application the way a user would, and checks if the app _functions_ as expected: if the expected message appears, an element is removed, or a CSS class is added after the appropriate user action. A typical Cypress test, for example, can check if a toggled \"Todo\" item gets a class of \"completed\" after the `.toggle` is checked:\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('completes todo', () => {  cy.visit('/') // opens TodoMVC running at \"baseUrl\"  cy.get('.new-todo').type('write tests{enter}')  cy.contains('.todo-list li', 'write tests').find('.toggle').check()  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')})\n```\n\n![Passing Cypress functional test](https://docs.cypress.io/img/guides/visual-testing/completed-test.gif)\n\nCypress does NOT see how the page actually looks though. For example, Cypress will not see if the CSS class `completed` grays out the label element and adds a strike-through line.\n\n![Completed item style](https://docs.cypress.io/img/guides/visual-testing/completed-item.png)\n\nYou could technically write a functional test asserting the CSS properties using the [`have.css` assertion](https://docs.cypress.io/guides/references/assertions#CSS), but these may quickly become cumbersome to write and maintain, especially when visual styles rely on a lot of CSS styles.\n\n```\ncy.get('.completed').should('have.css', 'text-decoration', 'line-through')cy.get('.completed').should('have.css', 'color', 'rgb(217,217,217)')\n```\n\nYour visual styles may also rely on more than CSS, perhaps you want to ensure an SVG or image has rendered correctly or shapes were correctly drawn to a canvas.\n\nLuckily, Cypress gives a stable platform for [writing plugins](https://docs.cypress.io/guides/tooling/plugins-guide) that _can perform visual testing_.\n\nTypically such plugins take an image snapshot of the entire application under test or a specific element, and then compare the image to a previously approved baseline image. If the images are the same (within a set pixel tolerance), it is determined that the web application looks the same to the user. If there are differences, then there has been some change to the DOM layout, fonts, colors or other visual properties that needs to be investigated.\n\nFor example, one can use the [cypress-plugin-snapshots](https://github.com/meinaart/cypress-plugin-snapshots) plugin and catch the following visual regression:\n\n```\n.todo-list li.completed label {  color: #d9d9d9;  /* removed the line-through */}\n```\n\n```\nit('completes todo', () => {  cy.visit('/')  cy.get('.new-todo').type('write tests{enter}')  cy.contains('.todo-list li', 'write tests').find('.toggle').check()  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')  // run 'npm install cypress-plugin-snapshots --save'  // capture the element screenshot and  // compare to the baseline image  cy.get('.todoapp').toMatchImageSnapshot({    imageConfig: {      threshold: 0.001,    },  })})\n```\n\nThis open source plugin compares the baseline and the current images side by side if pixel difference is above the threshold; notice how the baseline image (_Expected result_) has the label text with the line through, while the new image (_Actual result_) does not have it.\n\n![Baseline vs current image](https://docs.cypress.io/img/guides/visual-testing/diff.png)\n\nLike most image comparison tools, the plugin also shows a difference view on mouse hover:\n\n![Highlighted changes](https://docs.cypress.io/img/guides/visual-testing/diff-2.png)\n\nThere are several published, open source plugins, listed in the\n\n[Visual Testing Plugins](https://docs.cypress.io/plugins#visual-testing) section, and several commercial companies have developed visual testing solutions on top of Cypress listed below.\n\n### Open source[​](#Open-source \"Direct link to Open source\")\n\nListed in the [Visual Testing Plugins](https://docs.cypress.io/plugins#visual-testing) section.\n\n### Applitools[​](#Applitools \"Direct link to Applitools\")\n\nFirst joint webinar with Applitools\n\nSecond joint webinar with Applitools with a focus on [Component Testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing)\n\n[https://applitools.com/](https://applitools.com/)\n\n| Resource | Description |\n| --- | --- |\n| [Official docs](https://applitools.com/cypress) | Applitools' Cypress documentation |\n| [Tutorial](https://applitools.com/tutorials/cypress.html) | Applitools' Cypress tutorial |\n| [Webinar](https://applitools.com/blog/cypress-applitools-end-to-end-testing) | _Creating a Flawless User Experience, End-to-End, Functional to Visual – Practical Hands-on Session_, a webinar recorded together with Cypress and Applitools |\n| [Blog](https://glebbahmutov.com/blog/testing-a-chart/) | Testing a chart with Cypress and Applitools |\n\n### Percy[​](#Percy \"Direct link to Percy\")\n\n[https://percy.io/](https://percy.io/)\n\n| Resource | Description |\n| --- | --- |\n| [Official docs](https://docs.percy.io/docs/cypress) | Percy's Cypress documentation |\n| [Tutorial](https://docs.percy.io/docs/cypress-tutorial) | Percy's Cypress tutorial |\n| [Webinar](https://www.youtube.com/watch?v=MXfZeE9RQDw) | _Cypress + Percy = End-to-end functional and visual testing for the web_, a webinar recorded together with Cypress and Percy.io |\n| [Blog](https://www.cypress.io/blog/2019/04/19/webinar-recording-cypress-io-percy-end-to-end-functional-and-visual-testing-for-the-web/) | The companion blog for the Cypress + Percy webinar |\n| [Slides](https://slides.com/bahmutov/visual-testing-with-percy) | The companion slides for the Cypress + Percy webinar |\n| [Blog](https://glebbahmutov.com/blog/testing-visually/) | Testing how an application renders a drawing with Cypress and Percy |\n\n### Happo[​](#Happo \"Direct link to Happo\")\n\n[https://happo.io/](https://happo.io/)\n\n| Resource | Description |\n| --- | --- |\n| [Official docs](https://docs.happo.io/docs/cypress) | Happo's Cypress documentation |\n| [Webinar](https://www.youtube.com/watch?v=C_p12IvN5HU) | _Keep your UI Sharp: Ensuring Functional and Visual Quality with Cypress.io + Happo.io_, a webinar recorded together with Cypress and Happo |\n| [Blog](https://www.cypress.io/blog/2020/05/27/webcast-recording-keep-your-ui-sharp/) | The companion blog for the Cypress + Happo webinar |\n\n### Chromatic[​](#Chromatic \"Direct link to Chromatic\")\n\nChromatic leverages your existing Cypress setup—configuration, mocking, and tests—to enable visual testing of your application's UI. With the Chromatic plugin installed, Chromatic captures an archive of your UI while your Cypress tests are running.\n\n[https://chromatic.com](https://chromatic.com/)\n\n| Resource | Description |\n| --- | --- |\n| [Official docs](https://www.chromatic.com/docs/cypress/setup/?utm_source=cypress_docs) | Chromatic's Cypress documentation |\n| [Blog](https://www.chromatic.com/blog/how-to-visual-test-with-cypress/?utm_source=cypress_docs) | Chromatic’s Cypress integration announcement and tutorial |\n\n## Best practices[​](#Best-practices \"Direct link to Best practices\")\n\nAs a general rule there are some best practices when visual testing.\n\n### Recognize the need for visual testing[​](#Recognize-the-need-for-visual-testing \"Direct link to Recognize the need for visual testing\")\n\nAssertions that verify style properties\\*\\*\n\n```\ncy.get('.completed').should('have.css', 'text-decoration', 'line-through')  .and('have.css', 'color', 'rgb(217,217,217)')cy.get('.user-info').should('have.css', 'display', 'none')...\n```\n\nIf your end-to-end tests become full of assertions checking visibility, color and other style properties, it might be time to start using visual diffing to verify the page appearance.\n\n### DOM state[​](#DOM-state \"Direct link to DOM state\")\n\ntip\n\n**Best Practice:** Take a snapshot after you confirm the page is done changing.\n\nFor example, if the snapshot command is `cy.mySnapshotCommand`:\n\n**Incorrect Usage**\n\n```\n// the web application takes time to add the new item,// sometimes it takes the snapshot BEFORE the new item appearscy.get('.new-todo').type('write tests{enter}')cy.mySnapshotCommand()\n```\n\n**Correct Usage**\n\n```\n// use a functional assertion to ensure// the web application has re-rendered the pagecy.get('.new-todo').type('write tests{enter}')cy.contains('.todo-list li', 'write tests')// great, the new item is displayed,// now we can take the snapshotcy.mySnapshotCommand()\n```\n\n### Timestamps[​](#Timestamps \"Direct link to Timestamps\")\n\ntip\n\n**Best Practice:** Control the timestamp inside the application under test.\n\nBelow we freeze the operating system's time to `Jan 1, 2018` using [cy.clock()](https://docs.cypress.io/api/commands/clock) to ensure all images displaying dates and times match.\n\n```\nconst now = new Date(2018, 1, 1)cy.clock(now)// ... testcy.mySnapshotCommand()\n```\n\n### Application state[​](#Application-state \"Direct link to Application state\")\n\ntip\n\n**Best Practice:** Use [cy.fixture()](https://docs.cypress.io/api/commands/fixture) and network mocking to set the application state.\n\nBelow we stub network calls using [cy.intercept()](https://docs.cypress.io/api/commands/intercept) to return the same response data for each XHR request. This ensures that the data displayed in our application images does not change.\n\n```\ncy.intercept('/api/items', { fixture: 'items' }).as('getItems')// ... actioncy.wait('@getItems')cy.mySnapshotCommand()\n```\n\n### Visual diff elements[​](#Visual-diff-elements \"Direct link to Visual diff elements\")\n\ntip\n\n**Best Practice:** Use visual diffing to check individual DOM elements rather than the entire page.\n\nTargeting specific DOM element will help avoid visual changes from component \"X\" breaking tests in other unrelated components.\n\n### Component testing[​](#Component-testing \"Direct link to Component testing\")\n\ntip\n\n**Best Practice:** Use [Component Testing](https://docs.cypress.io/guides/component-testing/overview) to test the individual components functionality in addition to end-to-end and visual tests.\n\nIf you are working on React components, read [Visual testing for React components using open source tools](https://glebbahmutov.com/blog/open-source-visual-testing-of-components/), browse [slides](https://slides.com/bahmutov/i-see-what-is-going-on), and watch the [companion videos](https://www.youtube.com/playlist?list=PLP9o9QNnQuAYhotnIDEUQNXuvXL7ZmlyZ).\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [After Screenshot API](https://docs.cypress.io/api/plugins/after-screenshot-api)\n*   [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot)\n*   [Cypress.Screenshot](https://docs.cypress.io/api/cypress-api/screenshot-api)\n*   [Plugins](https://docs.cypress.io/guides/tooling/plugins-guide)\n*   [Visual Testing Plugins](https://docs.cypress.io/plugins#visual-testing)\n*   [Writing a Plugin](https://docs.cypress.io/api/plugins/writing-a-plugin)\n*   [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) is a full stack example application that demonstrates **best practices and scalable strategies with Cypress in practical and realistic scenarios**.\n*   Read the blog post [Debug a Flaky Visual Regression Test](https://www.cypress.io/blog/2020/10/02/debug-a-flaky-visual-regression-test/)\n*   Read the blog post [Canvas Visual Testing with Retries](https://glebbahmutov.com/blog/canvas-testing/)",
  "title": "Visual Testing | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/advanced-installation",
  "markdown": "# Advanced Installation | Cypress Documentation\n\n## Environment variables[​](#Environment-variables \"Direct link to Environment variables\")\n\n| Name | Description |\n| --- | --- |\n| `CYPRESS_INSTALL_BINARY` | [Destination of Cypress binary that's downloaded and installed](#Install-binary) |\n| `CYPRESS_CONNECT_RETRY_THRESHOLD` | Overrides the maximum number of retries when connecting to a browser. The default value is 62. |\n| `CYPRESS_DOWNLOAD_MIRROR` | [Downloads the Cypress binary through a mirror server](#Mirroring) |\n| `CYPRESS_DOWNLOAD_PATH_TEMPLATE` | [Allows generating a custom URL to download the Cypress binary from](#Download-path-template) |\n| `CYPRESS_CACHE_FOLDER` | [Changes the Cypress binary cache location](#Binary-cache) |\n| `CYPRESS_RUN_BINARY` | [Location of Cypress binary at run-time](#Run-binary) |\n| `CYPRESS_VERIFY_TIMEOUT` | Overrides the timeout duration for the `verify` command. The default value is 30000. |\n| ~CYPRESS\\_SKIP\\_BINARY\\_INSTALL~ | removed use `CYPRESS_INSTALL_BINARY=0` instead |\n| ~CYPRESS\\_BINARY\\_VERSION~ | removed use `CYPRESS_INSTALL_BINARY` instead |\n\n## Install binary[​](#Install-binary \"Direct link to Install binary\")\n\nUsing the `CYPRESS_INSTALL_BINARY` environment variable, you can control how Cypress is installed. To override what is installed, you set `CYPRESS_INSTALL_BINARY` alongside the `npm install` command.\n\n**This is helpful if you want to:**\n\n*   Install a version different than the default npm package.\n*   Specify an external URL (to bypass a corporate firewall).\n    \n    ```\n    CYPRESS_INSTALL_BINARY=https://company.domain.com/cypress.zip npm install cypress\n    ```\n    \n*   Specify a file to install locally instead of using the internet.\n    \n    ```\n    CYPRESS_INSTALL_BINARY=/local/path/to/cypress.zip npm install cypress\n    ```\n    \n\nIn all cases, the fact that the binary was installed from a custom location _is not saved in your `package.json` file_. Every repeated installation needs to use the same environment variable to install the same binary.\n\n### Skipping installation[​](#Skipping-installation \"Direct link to Skipping installation\")\n\nYou can also force Cypress to skip the installation of the binary application by setting `CYPRESS_INSTALL_BINARY=0`. This could be useful if you want to prevent Cypress from downloading the Cypress binary at the time of `npm install`.\n\n```\nCYPRESS_INSTALL_BINARY=0 npm install\n```\n\nNow Cypress will skip its install phase once the npm module is installed.\n\n## Binary cache[​](#Binary-cache \"Direct link to Binary cache\")\n\nAs of version `3.0`, Cypress downloads the matching Cypress binary to the global system cache, so that the binary can be shared between projects. By default, global cache folders are:\n\n*   **MacOS**: `~/Library/Caches/Cypress`\n*   **Linux**: `~/.cache/Cypress`\n*   **Windows**: `/AppData/Local/Cypress/Cache`\n\nTo override the default cache folder, set the environment variable `CYPRESS_CACHE_FOLDER`.\n\n```\nCYPRESS_CACHE_FOLDER=~/Desktop/cypress_cache npm install\n```\n\n```\nCYPRESS_CACHE_FOLDER=~/Desktop/cypress_cache npm run test\n```\n\nCypress will automatically replace the `~` with the user's home directory. So you can pass `CYPRESS_CACHE_FOLDER` as a string from CI configuration files, for example:\n\n```\nenvironment:  CYPRESS_CACHE_FOLDER: '~/.cache/Cypress'\n```\n\nSee also [Continuous Integration - Caching](https://docs.cypress.io/guides/continuous-integration/introduction#Caching) section in the documentation.\n\ncaution\n\n`CYPRESS_CACHE_FOLDER` will need to exist every time cypress is launched. To ensure this, consider exporting this environment variable. For example, in a `.bash_profile` (MacOS, Linux), or using `RegEdit` (Windows).\n\n## Run binary[​](#Run-binary \"Direct link to Run binary\")\n\nSetting the environment variable `CYPRESS_RUN_BINARY` overrides where the npm module finds the Cypress binary.\n\n`CYPRESS_RUN_BINARY` should be a path to an already unzipped binary executable. The Cypress commands `open`, `run`, and `verify` will then launch the provided binary.\n\n### Mac[​](#Mac \"Direct link to Mac\")\n\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress.app/Contents/MacOS/Cypress cypress run\n```\n\n### Linux[​](#Linux \"Direct link to Linux\")\n\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress/Cypress cypress run\n```\n\n### Windows[​](#Windows \"Direct link to Windows\")\n\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress/Cypress.exe cypress run\n```\n\ncaution\n\nWe recommend **not exporting** the `CYPRESS_RUN_BINARY` environment variable, since it will affect every cypress module installed on your file system.\n\n## Download URLs[​](#Download-URLs \"Direct link to Download URLs\")\n\nIf you want to download a specific Cypress version for a given platform (Operating System), you can get it from our CDN.\n\nThe download server URL is `https://download.cypress.io`.\n\nWe currently have the following downloads available:\n\n*   Windows 64-bit (`?platform=win32&arch=x64`)\n*   Linux 64-bit (`?platform=linux`)\n*   macOS 64-bit (`?platform=darwin`)\n\nHere are the available download URLs:\n\nSee [https://download.cypress.io/desktop.json](https://download.cypress.io/desktop.json) for all available platforms.\n\n| Method | URL | Description |\n| --- | --- | --- |\n| `GET` | `/desktop` | Download Cypress at latest version (platform auto-detected) |\n| `GET` | `/desktop.json` | Returns JSON containing latest available CDN destinations |\n| `GET` | `/desktop?platform=p&arch=a` | Download Cypress for a specific platform and/or architecture |\n| `GET` | `/desktop/:version` | Download Cypress with a specified version |\n| `GET` | `/desktop/:version?platform=p&arch=a` | Download Cypress with a specified version and platform and/or architecture |\n\n**Example of downloading Cypress `12.17.4` for Windows 64-bit:**\n\n```\nhttps://download.cypress.io/desktop/12.17.4?platform=win32&arch=x64\n```\n\n## Mirroring[​](#Mirroring \"Direct link to Mirroring\")\n\nIf you choose to mirror the entire Cypress download site, you can specify `CYPRESS_DOWNLOAD_MIRROR` to set the download server URL from `https://download.cypress.io` to your own mirror.\n\nFor example:\n\n```\nCYPRESS_DOWNLOAD_MIRROR=\"https://www.example.com\" cypress install\n```\n\nCypress will then attempt to download a binary with this format: `https://www.example.com/desktop/:version?platform=p`\n\n## Download path template[​](#Download-path-template \"Direct link to Download path template\")\n\nStarting with Cypress 9.3.0, you can use the `CYPRESS_DOWNLOAD_PATH_TEMPLATE` environment variable to download the Cypress binary from a custom URL that's generated based on endpoint, version, platform and architecture.\n\n**The following replacements are supported:**\n\n*   `${endpoint}` is replaced with `https://download.cypress.io/desktop/:version`. If `CYPRESS_DOWNLOAD_MIRROR` is set, its value is used instead of `https://download.cypress.io` (note that the `/desktop` remains!)\n*   `${platform}` is replaced with the platform the installation is running on (e.g. `win32`, `linux`, `darwin`)\n*   `${arch}` is replaced with the architecture the installation is running on (e.g. `x64`, `arm64`)\n*   Starting with Cypress 10.6.0, `${version}` is replaced with the version number that's being installed (e.g. `10.11.0`)\n\n**Examples:**\n\nTo install the binary from a download mirror that matches the exact file structure of `https://cdn.cypress.io` (works for Cypress 9.3.0 or newer):\n\n```\nexport CYPRESS_DOWNLOAD_MIRROR=https://cypress-download.localexport CYPRESS_DOWNLOAD_PATH_TEMPLATE='${endpoint}/${platform}-${arch}/cypress.zip'# Example of a resulting URL: https://cypress-download.local/desktop/10.11.0/linux-x64/cypress.zip\n```\n\nTo install the binary from a download server with a custom file structure (works for Cypress 10.6.0 or newer):\n\n```\nexport CYPRESS_DOWNLOAD_PATH_TEMPLATE='https://software.local/cypress/${platform}/${arch}/${version}/cypress.zip'# Example of a resulting URL: https://software.local/cypress/linux/x64/10.11.0/cypress.zip\n```\n\nTo define `CYPRESS_DOWNLOAD_PATH_TEMPLATE` in `.npmrc`, put a backslash before every `$` (works for Cypress 9.5.3 or newer):\n\n```\nCYPRESS_DOWNLOAD_PATH_TEMPLATE=\\${endpoint}/\\${platform}-\\${arch}/cypress.zip\n```\n\nCypress can be configured to use the `ca` and `cafile` options from your npm config file to download the Cypress binary.\n\nFor example, to use the CA at `/home/person/certs/ca.crt` when downloading Cypress, add the following to your `.npmrc`:\n\n```\ncafile=/home/person/certs/ca.crt\n```\n\nIf neither `cafile` nor `ca` are set, Cypress looks at the system environment variable `NODE_EXTRA_CA_CERTS` and uses the corresponding certificate(s) as an extension for the trusted certificate authority when downloading the Cypress binary.\n\nNote that the npm config is used as a replacement, and the node environment variable is used as an extension.\n\n## Opt out of sending exception data to Cypress[​](#Opt-out-of-sending-exception-data-to-Cypress \"Direct link to Opt out of sending exception data to Cypress\")\n\nWhen an exception is thrown regarding Cypress, we send along the exception data to `https://api.cypress.io`. We solely use this information to help develop a better product.\n\nIf you would like to opt out of sending any exception data to Cypress, you can do so by setting `CYPRESS_CRASH_REPORTS=0` in your system environment variables.\n\n### Opt out on Linux or macOS[​](#Opt-out-on-Linux-or-macOS \"Direct link to Opt out on Linux or macOS\")\n\nTo opt out of sending exception data on Linux or macOS, run the following command in a terminal before installing Cypress:\n\n```\nexport CYPRESS_CRASH_REPORTS=0\n```\n\nTo make these changes permanent, you can add this command to your shell's `~/.profile` (`~/.zsh_profile`, `~/.bash_profile`, etc.) to run them on every login.\n\n### Opt out on Windows[​](#Opt-out-on-Windows \"Direct link to Opt out on Windows\")\n\nTo opt out of sending exception data on Windows, run the following command in the Command Prompt before installing Cypress:\n\n```\nset CYPRESS_CRASH_REPORTS=0\n```\n\nTo accomplish the same thing in PowerShell:\n\n```\n$env:CYPRESS_CRASH_REPORTS = \"0\"\n```\n\nTo save the `CYPRESS_CRASH_REPORTS` variable for use in all new shells, use `setx`:\n\n```\nsetx CYPRESS_CRASH_REPORTS 0\n```\n\n## Opt out of Cypress commercial messaging[​](#Opt-out-of-Cypress-commercial-messaging \"Direct link to Opt out of Cypress commercial messaging\")\n\nCypress may occasionally display messages in your CI logs related to our commercial offerings and how they could benefit you during your workflows.\n\nIf you would like to opt out of all commercial messaging, you can do so by setting `CYPRESS_COMMERCIAL_RECOMMENDATIONS=0` in your system environment variables.\n\n## Install pre-release version[​](#Install-pre-release-version \"Direct link to Install pre-release version\")\n\nIf you would like to install a pre-release version of Cypress to test out functionality that has not yet been released, here is how:\n\n1.  Open up the list of commits to `develop` on the Cypress repo: [https://github.com/cypress-io/cypress/commits/develop](https://github.com/cypress-io/cypress/commits/develop)\n2.  Find the commit that you would like to install the pre-release version of. Click the comment icon (highlighted in red below):\n    \n    ![Example of a commit for which pre-releases are available. Comment link highlighted in red.](https://docs.cypress.io/img/guides/install/develop-commit-comment-link.png)\n    \n3.  You should see several comments from the `cypress-bot` user with instructions for installing Cypress pre-releases. Pick the one that corresponds to your operating system and CPU architecture, and follow the instructions there to install the pre-release.\n\nCypress pre-releases are only available for 60 days after they are built. Do not rely on these being available past 60 days.\n\n## Windows Subsystem for Linux[​](#Windows-Subsystem-for-Linux \"Direct link to Windows Subsystem for Linux\")\n\nCypress requires an [X-server](https://en.wikipedia.org/wiki/X.Org_Server) (X11) to display the Cypress UI from a Windows Subsystem for Linux installation. This requirement is met by current versions of Windows Subsystem for Linux (WSL2) with X11 support being included through Windows Subsystem for Linux GUI (WSLg).\n\nRefer to [GitHub: Windows Subsystem for Linux GUI (WSLg)](https://github.com/microsoft/wslg) for installation instructions on Ubuntu and install the [prerequisite Linux packages](https://docs.cypress.io/guides/getting-started/installing-cypress#Linux-Prerequisites) before running Cypress.\n\nRefer to Microsoft Learn [Windows Subsystem for Linux Documentation](https://learn.microsoft.com/en-us/windows/wsl/) for additional information.\n\ninfo\n\nCypress.io does not specifically support the use of Cypress under Windows Subsystem for Linux (WSL). If you want to report an issue, please ensure that you can reproduce it without using WSL on one of the Cypress [supported operating systems](https://docs.cypress.io/guides/getting-started/installing-cypress#Operating-System).",
  "title": "Advanced Installation | Cypress Documentation",
  "description": "Environment variables",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/assertions",
  "markdown": "# Assertions | Cypress Documentation\n\nCypress bundles the popular [Chai](https://docs.cypress.io/guides/references/assertions#Chai) assertion library, as well as helpful extensions for [Sinon](https://docs.cypress.io/guides/references/assertions#Sinon-Chai) and [jQuery](https://docs.cypress.io/guides/references/assertions#Chai-jQuery), bringing you dozens of powerful assertions for free.\n\ninfo\n\n**New to Cypress?**\n\nThis document is only a reference to every assertion Cypress supports.\n\nIf you're looking to understand **how** to use these assertions please read about assertions in our [Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions) guide.\n\n## Chai[​](#Chai \"Direct link to Chai\")\n\n[https://github.com/chaijs/chai](https://github.com/chaijs/chai)\n\nThese chainers are available for BDD assertions (`expect`/`should`). Aliases listed can be used interchangeably with their original chainer. You can see the entire list of available BDD Chai assertions [here](http://chaijs.com/api/bdd/).\n\n| Chainer | Example |\n| --- | --- |\n| not | `.should('not.equal', 'Jane')`  <br>`expect(name).to.not.equal('Jane')` |\n| deep | `.should('deep.equal', { name: 'Jane' })`  <br>`expect(obj).to.deep.equal({ name: 'Jane' })` |\n| nested | `.should('have.nested.property', 'a.b[1]')`  <br>`.should('nested.include', {'a.b[1]': 'y'})`  <br>`expect({a: {b: 'x'}}).to.have.nested.property('a.b')`  <br>`expect({a: {b: 'x'}}).to.nested.include({'a.b': 'x'})` |\n| ordered | `.should('have.ordered.members', [1, 2])`  <br>`expect([1, 2]).to.have.ordered.members([1, 2])`  <br>`expect([1, 2]).not.to.have.ordered.members([2, 1])` |\n| any | `.should('have.any.keys', 'age')`  <br>`expect(arr).to.have.any.keys('age')` |\n| all | `.should('have.all.keys', 'name', 'age')`  <br>`expect(arr).to.have.all.keys('name', 'age')` |\n| a(_type_)  <br>**Aliases:** an | `.should('be.a', 'string')`  <br>`expect('test').to.be.a('string')` |\n| include(_value_)  <br>**Aliases:** contain, includes, contains | `.should('include', 2)`  <br>`expect([1,2,3]).to.include(2)` |\n| ok  | `.should('not.be.ok')`  <br>`expect(undefined).to.not.be.ok` |\n| true | `.should('be.true')`  <br>`expect(true).to.be.true` |\n| false | `.should('be.false')`  <br>`expect(false).to.be.false` |\n| null | `.should('be.null')`  <br>`expect(null).to.be.null` |\n| undefined | `.should('be.undefined')`  <br>`expect(undefined).to.be.undefined` |\n| exist | `.should('exist')`  <br>`expect(myVar).to.exist` |\n| empty | `.should('be.empty')`  <br>`expect([]).to.be.empty` |\n| arguments  <br>**Aliases:** Arguments | `.should('be.arguments')`  <br>`expect(arguments).to.be.arguments` |\n| equal(_value_)  <br>**Aliases:** equals, eq | `.should('equal', 42)`  <br>`expect(42).to.equal(42)` |\n| deep.equal(_value_) | `.should('deep.equal', { name: 'Jane' })`  <br>`expect({ name: 'Jane' }).to.deep.equal({ name: 'Jane' })` |\n| eql(_value_)  <br>**Aliases:** eqls | `.should('eql', { name: 'Jane' })`  <br>`expect({ name: 'Jane' }).to.eql({ name: 'Jane' })` |\n| greaterThan(_value_)  <br>**Aliases:** gt, above | `.should('be.greaterThan', 5)`  <br>`expect(10).to.be.greaterThan(5)` |\n| least(_value_)  <br>**Aliases:** gte | `.should('be.at.least', 10)`  <br>`expect(10).to.be.at.least(10)` |\n| lessThan(_value_)  <br>**Aliases:** lt, below | `.should('be.lessThan', 10)`  <br>`expect(5).to.be.lessThan(10)` |\n| most(_value_)  <br>**Aliases:** lte | `.should('have.length.of.at.most', 4)`  <br>`expect('test').to.have.length.of.at.most(4)` |\n| within(_start_, _finish_) | `.should('be.within', 5, 10)`  <br>`expect(7).to.be.within(5, 10)` |\n| instanceOf(_constructor_)  <br>**Aliases:** instanceof | `.should('be.instanceOf', Array)`  <br>`expect([1, 2, 3]).to.be.instanceOf(Array)` |\n| property(_name_, _\\[value\\]_) | `.should('have.property', 'name')`  <br>`expect(obj).to.have.property('name')` |\n| deep.property(_name_, _\\[value\\]_) | `.should('have.deep.property', 'tests[1]', 'e2e')`  <br>`expect(deepObj).to.have.deep.property('tests[1]', 'e2e')` |\n| ownProperty(_name_)  <br>**Aliases:** haveOwnProperty, own.property | `.should('have.ownProperty', 'length')`  <br>`expect('test').to.have.ownProperty('length')` |\n| ownPropertyDescriptor(_name_)  <br>**Aliases:** haveOwnPropertyDescriptor | `.should('have.ownPropertyDescriptor', 'a')`  <br>`expect({a: 1}).to.have.ownPropertyDescriptor('a')` |\n| lengthOf(_value_) | `.should('have.lengthOf', 4)`  <br>`expect('test').to.have.lengthOf(4)` |\n| match(_RegExp_)  <br>**Aliases:** matches | `.should('to.match', /^test/)`  <br>`expect('testing').to.match(/^test/)` |\n| string(_string_) | `.should('have.string', 'test')`  <br>`expect('testing').to.have.string('test')` |\n| keys(_key1_, _\\[key2\\]_, _\\[...\\]_)  <br>**Aliases:** key | `.should('have.keys', 'pass', 'fail')`  <br>`expect({ pass: 1, fail: 2 }).to.have.keys('pass', 'fail')` |\n| throw(_constructor_)  <br>**Aliases:** throws, Throw | `.should('throw', Error)`  <br>`expect(fn).to.throw(Error)` |\n| respondTo(_method_)  <br>**Aliases:** respondsTo | `.should('respondTo', 'getName')`  <br>`expect(obj).to.respondTo('getName')` |\n| itself | `.should('itself.respondTo', 'getName')`  <br>`expect(Foo).itself.to.respondTo('bar')` |\n| satisfy(_method_)  <br>**Aliases:** satisfies | `.should('satisfy', (num) => num > 0)`  <br>`expect(1).to.satisfy((num) => num > 0)` |\n| closeTo(_expected_, _delta_)  <br>**Aliases:** approximately | `.should('be.closeTo', 1, 0.5)`  <br>`expect(1.5).to.be.closeTo(1, 0.5)` |\n| members(_set_) | `.should('include.members', [3, 2])`  <br>`expect([1, 2, 3]).to.include.members([3, 2])` |\n| oneOf(_values_) | `.should('be.oneOf', [1, 2, 3])`  <br>`expect(2).to.be.oneOf([1,2,3])` |\n| change(_function_)  <br>**Aliases:** changes | `.should('change', obj, 'val')`  <br>`expect(fn).to.change(obj, 'val')` |\n| increase(_function_)  <br>**Aliases:** increases | `.should('increase', obj, 'val')`  <br>`expect(fn).to.increase(obj, 'val')` |\n| decrease(_function_)  <br>**Aliases:** decreases | `.should('decrease', obj, 'val')`  <br>`expect(fn).to.decrease(obj, 'val')` |\n\nThese getters are also available for BDD assertions. They don't actually do anything, but they enable you to write clear, english sentences.\n\n| Chainable getters |\n| --- |\n| `to`, `be`, `been`, `is`, `that`, `which`, `and`, `has`, `have`, `with`, `at`, `of`, `same` |\n\n## Chai-jQuery[​](#Chai-jQuery \"Direct link to Chai-jQuery\")\n\n[https://github.com/chaijs/chai-jquery](https://github.com/chaijs/chai-jquery)\n\nThese chainers are available when asserting about a DOM object.\n\nYou will commonly use these chainers after using DOM commands like: [`cy.get()`](https://docs.cypress.io/api/commands/get), [`cy.contains()`](https://docs.cypress.io/api/commands/contains), etc.\n\n| Chainers | Assertion |\n| --- | --- |\n| attr(_name_, _\\[value\\]_) | `.should('have.attr', 'bar')`  <br>`expect($el).to.have.attr('foo', 'bar')` |\n| prop(_name_, _\\[value\\]_) | `.should('have.prop', 'disabled', false)`  <br>`expect($el).to.have.prop('disabled', false)` |\n| css(_name_, _\\[value\\]_) | `.should('have.css', 'background-color', 'rgb(0, 0, 0)')`  <br>`expect($el).to.have.css('background-color', 'rgb(0, 0, 0)')` |\n| data(_name_, _\\[value\\]_) | `.should('have.data', 'foo', 'bar')`  <br>`expect($el).to.have.data('foo', 'bar')` |\n| class(_className_) | `.should('have.class', 'foo')`  <br>`expect($el).to.have.class('foo')` |\n| id(_id_) | `.should('have.id', 'foo')`  <br>`expect($el).to.have.id('foo')` |\n| html(_html_) | `.should('have.html', 'I love testing')`  <br>`expect($el).to.have.html('with Cypress')` |\n| text(_text_) | `.should('have.text', 'I love testing')`  <br>`expect($el).to.have.text('with Cypress')` |\n| value(_value_) | `.should('have.value', '[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)')`  <br>`expect($el).to.have.value('[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)')` |\n| visible | `.should('be.visible')`  <br>`expect($el).to.be.visible` |\n| hidden | `.should('be.hidden')`  <br>`expect($el).to.be.hidden` |\n| selected | `.should('be.selected')`  <br>`expect($option).not.to.be.selected` |\n| checked | `.should('be.checked')`  <br>`expect($input).not.to.be.checked` |\n| focus\\[ed\\] | `.should('have.focus')`  <br>`expect($input).not.to.be.focused`  <br>`expect($input).to.have.focus` |\n| enabled | `.should('be.enabled')`  <br>`expect($input).to.be.enabled` |\n| disabled | `.should('be.disabled')`  <br>`expect($input).to.be.disabled` |\n| empty | `.should('be.empty')`  <br>`expect($el).not.to.be.empty` |\n| exist | `.should('exist')`  <br>`expect($nonexistent).not.to.exist` |\n| match(_selector_) | `.should('match', ':empty')`  <br>`expect($emptyEl).to.match(':empty')` |\n| contain(_text_) | `.should('contain', 'text')`  <br>`expect($el).to.contain('text')` |\n| descendants(_selector_) | `.should('have.descendants', 'div')`  <br>`expect($el).to.have.descendants('div')` |\n\n## Sinon-Chai[​](#Sinon-Chai \"Direct link to Sinon-Chai\")\n\n[https://github.com/domenic/sinon-chai](https://github.com/domenic/sinon-chai)\n\nThese chainers are used on assertions with [`cy.stub()`](https://docs.cypress.io/api/commands/stub) and [`cy.spy()`](https://docs.cypress.io/api/commands/spy).\n\n| Sinon.JS property/method | Assertion |\n| --- | --- |\n| called | `.should('have.been.called')`  <br>`expect(spy).to.be.called` |\n| callCount | `.should('have.callCount', 3)`  <br>`expect(spy).to.have.callCount(n)` |\n| calledOnce | `.should('have.been.calledOnce')`  <br>`expect(spy).to.be.calledOnce` |\n| calledTwice | `.should('have.been.calledTwice')`  <br>`expect(spy).to.be.calledTwice` |\n| calledThrice | `.should('have.been.calledThrice')`  <br>`expect(spy).to.be.calledThrice` |\n| calledBefore | `.should('have.been.calledBefore', spy2)`  <br>`expect(spy1).to.be.calledBefore(spy2)` |\n| calledAfter | `.should('have.been.calledAfter', spy2)`  <br>`expect(spy1).to.be.calledAfter(spy2)` |\n| calledWithNew | `.should('have.been.calledWithNew')`  <br>`expect(spy).to.be.calledWithNew` |\n| alwaysCalledWithNew | `.should('have.always.been.calledWithNew')`  <br>`expect(spy).to.always.be.calledWithNew` |\n| calledOn | `.should('have.been.calledOn', context)`  <br>`expect(spy).to.be.calledOn(context)` |\n| alwaysCalledOn | `.should('have.always.been.calledOn', context)`  <br>`expect(spy).to.always.be.calledOn(context)` |\n| calledWith | `.should('have.been.calledWith', ...args)`  <br>`expect(spy).to.be.calledWith(...args)` |\n| alwaysCalledWith | `.should('have.always.been.calledWith', ...args)`  <br>`expect(spy).to.always.be.calledWith(...args)` |\n| calledOnceWith | `.should('have.been.calledOnceWith', ...args)`  <br>`expect(spy).to.be.calledOnceWith(...args)` |\n| calledWithExactly | `.should('have.been.calledWithExactly', ...args)`  <br>`expect(spy).to.be.calledWithExactly(...args)` |\n| alwaysCalledWithExactly | `.should('have.always.been.calledWithExactly', ...args)`  <br>`expect(spy).to.always.be.calledWithExactly(...args)` |\n| calledOnceWithExactly | `.should('have.been.calledOnceWithExactly', ...args)`  <br>`expect(spy).to.be.calledOnceWithExactly(...args)` |\n| calledWithMatch | `.should('have.been.calledWithMatch',...args)`  <br>`expect(spy).to.be.calledWithMatch(...args)` |\n| alwaysCalledWithMatch | `.should('have.always.been.calledWithMatch',...args)`  <br>`expect(spy).to.always.be.calledWithMatch(...args)` |\n| returned | `.should('have.returned', 'foo')`  <br>`expect(spy).to.have.returned(returnVal)` |\n| alwaysReturned | `.should('have.always.returned', 'foo')`  <br>`expect(spy).to.have.always.returned(returnVal)` |\n| threw | `.should('have.thrown', TypeError)`  <br>`expect(spy).to.have.thrown(errorObjOrErrorTypeStringOrNothing)` |\n| alwaysThrew | `.should('have.always.thrown', 'TypeError')`  <br>`expect(spy).to.have.always.thrown(errorObjOrErrorTypeStringOrNothing)` |\n\n## Adding New Assertions[​](#Adding-New-Assertions \"Direct link to Adding New Assertions\")\n\nBecause we are using `chai`, that means you can extend it however you'd like. Cypress will \"just work\" with new assertions added to `chai`. You can:\n\n*   Write your own `chai` assertions as [documented here](http://chaijs.com/api/plugins/).\n*   npm install any existing `chai` library and import into your test file or [support file](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file).\n\n## Common Assertions[​](#Common-Assertions \"Direct link to Common Assertions\")\n\nHere is a list of common element assertions. Notice how we use these assertions (listed above) with [`.should()`](https://docs.cypress.io/api/commands/should). You may also want to read about how Cypress [retries](https://docs.cypress.io/guides/core-concepts/retry-ability) assertions.\n\n### Length[​](#Length \"Direct link to Length\")\n\n```\n// retry until we find 3 matching <li.selected>cy.get('li.selected').should('have.length', 3)\n```\n\n### Class[​](#Class \"Direct link to Class\")\n\n```\n// retry until this input does not have class disabledcy.get('form').find('input').should('not.have.class', 'disabled')\n```\n\n### Value[​](#Value \"Direct link to Value\")\n\n```\n// retry until this textarea has the correct valuecy.get('textarea').should('have.value', 'foo bar baz')\n```\n\n### Text Content[​](#Text-Content \"Direct link to Text Content\")\n\n```\n// assert the element's text content is exactly the given textcy.get('[data-testid=\"user-name\"]').should('have.text', 'Joe Smith')// assert the element's text includes the given substringcy.get('[data-testid=\"address\"]').should('include.text', 'Atlanta')// retry until this span does not contain 'click me'cy.get('a').parent('span.help').should('not.contain', 'click me')// the element's text should start with \"Hello\"cy.get('[data-testid=\"greeting\"]')  .invoke('text')  .should('match', /^Hello/)// use cy.contains to find an element with its text// matching the given regular expressioncy.contains('[data-testid=\"greeting\"]', /^Hello/)\n```\n\n### Visibility[​](#Visibility \"Direct link to Visibility\")\n\n```\n// retry until the element with// data-testid \"form-submit\" is visiblecy.get('[data-testid=\"form-submit\"]').should('be.visible')// retry until the list item with// text \"write tests\" is visiblecy.contains('[data-testid=\"todo\"] li', 'write tests').should('be.visible')\n```\n\n**Note:** if there are multiple elements, the assertions `be.visible` and `not.be.visible` act differently:\n\n```\n// retry until SOME elements are visiblecy.get('li').should('be.visible')// retry until EVERY element is invisiblecy.get('li.hidden').should('not.be.visible')\n```\n\nWatch the short video [\"Multiple elements and should('be.visible') assertion\"](https://www.youtube.com/watch?v=LxkrhUEE2Qk) that shows how to correctly check the visibility of elements.\n\n### Existence[​](#Existence \"Direct link to Existence\")\n\n```\n// retry until loading spinner no longer existscy.get('[data-testid=\"loading\"]').should('not.exist')\n```\n\n### State[​](#State \"Direct link to State\")\n\n```\n// retry until our radio is checkedcy.get(':radio').should('be.checked')\n```\n\n### CSS[​](#CSS \"Direct link to CSS\")\n\n```\n// retry until element has matching csscy.get('[data-testid=\"completed\"]').should(  'have.css',  'text-decoration',  'line-through')\n```\n\n```\n// retry while accordion css has the// \"display: none\" propertycy.get('[data-testid=\"accordion\"]').should('not.have.css', 'display', 'none')\n```\n\n### Disabled property[​](#Disabled-property \"Direct link to Disabled property\")\n\n```\n<input type=\"text\" data-testid=\"example-input\" disabled />\n```\n\n```\ncy.get('[data-testid=\"example-input\"]')  .should('be.disabled')  // let's enable this element from the test  .invoke('prop', 'disabled', false)cy.get('[data-testid=\"example-input\"]')  // we can use \"enabled\" assertion  .should('be.enabled')  // or negate the \"disabled\" assertion  .and('not.be.disabled')\n```\n\n## Negative assertions[​](#Negative-assertions \"Direct link to Negative assertions\")\n\nThere are positive and negative assertions. Examples of positive assertions are:\n\n```\ncy.get('[data-testid=\"todo-item\"]')  .should('have.length', 2)  .and('have.class', 'completed')\n```\n\nThe negative assertions have the \"not\" chainer prefixed to the assertion. Examples of negative assertions are:\n\n```\ncy.contains('first todo').should('not.have.class', 'completed')cy.get('[data-testid=\"loading\"]').should('not.be.visible')\n```\n\n#### False passing tests[​](#False-passing-tests \"Direct link to False-passing-tests\")\n\nNegative assertions may pass for reasons you weren't expecting. Let's say we want to test that a Todo list app adds a new Todo item after typing the Todo and pressing enter.\n\n**Positive assertions**\n\nWhen adding an element to the list and using a **positive assertion**, the test asserts a specific number of Todo items in our application.\n\nThe test below may still falsely pass if the application behaves unexpectedly, like adding a blank Todo, instead of adding the new Todo with the text \"Write tests\".\n\n```\ncy.get('[data-testid=\"todos\"]').should('have.length', 2)cy.get('[data-testid=\"new-todo\"]').type('Write tests{enter}')// using a positive assertion to check the// exact number of itemscy.get('[data-testid=\"todos\"]').should('have.length', 3)\n```\n\n**Negative assertions**\n\nBut when using a **negative assertion** in the test below, the test can falsely pass when the application behaves in multiple unexpected ways:\n\n*   The app deletes the entire list of Todo items instead of inserting the 3rd Todo\n*   The app deletes a Todo instead of adding a new Todo\n*   The app adds a blank Todo\n\n```\ncy.get('[data-testid=\"todos\"]').should('have.length', 2)cy.get('[data-testid=\"new-todo\"]').type('Write tests{enter}')// using negative assertion to check it's// not a number of itemscy.get('[data-testid=\"todos\"]').should('not.have.length', 2)\n```\n\n## Should callback[​](#Should-callback \"Direct link to Should callback\")\n\nIf built-in assertions are not enough, you can write your own assertion function and pass it as a callback to the `.should()` command. Cypress will automatically [retry](https://docs.cypress.io/guides/core-concepts/retry-ability) the callback function until it passes or the command times out. See the [`.should()`](https://docs.cypress.io/api/commands/should#Function) documentation.\n\n```\n<div class=\"main-abc123 heading-xyz987\">Introduction</div>\n```\n\n```\ncy.get('div').should(($div) => {  expect($div).to.have.length(1)  const className = $div[0].className  // className will be a string like \"main-abc123 heading-xyz987\"  expect(className).to.match(/heading-/)})\n```\n\n## Multiple assertions[​](#Multiple-assertions \"Direct link to Multiple assertions\")\n\nYou can attach multiple assertions to the same command.\n\n```\n<a  data-testid=\"assertions-link\"  class=\"active\"  href=\"https://on.cypress.io\"  target=\"_blank\">  Cypress Docs</a>\n```\n\n```\ncy.get('[data-testid=\"assertions-link\"]')  .should('have.class', 'active')  .and('have.attr', 'href')  .and('include', 'cypress.io')\n```\n\nNote that all chained assertions will use the same reference to the original subject. For example, if you wanted to test a loading element that first appears and then disappears, the following WILL NOT WORK because the same element cannot be visible and invisible at the same time:\n\n```\n// ⛔️ DOES NOT WORKcy.get('[data-testid=\"loading\"]').should('be.visible').and('not.be.visible')\n```\n\nInstead you should split the assertions and re-query the element:\n\n```\n// ✅ THE CORRECT WAYcy.get('[data-testid=\"loading\"]').should('be.visible')cy.get('[data-testid=\"loading\"]').should('not.be.visible')\n```\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Guide: Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions)\n*   [cypress-example-kitchensink Assertions](https://example.cypress.io/commands/assertions)\n*   [Cypress should callback](https://glebbahmutov.com/blog/cypress-should-callback/) blog post",
  "title": "Assertions | Cypress Documentation",
  "description": "Cypress bundles the popular Chai assertion",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/conditional-testing",
  "markdown": "# Conditional Testing | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   When conditional testing is a good choice for your tests\n*   Situations where conditional testing is impossible\n*   Strategies to handle common scenarios of conditional testing\n\n## Definition[​](#Definition \"Direct link to Definition\")\n\nConditional testing refers to the common programming pattern:\n\nMany of our users ask how to accomplish this seemingly simple idiom in Cypress.\n\nHere are some example use cases:\n\n*   How do I do something different whether an element does or doesn't exist?\n*   My application does A/B testing, how do I account for that?\n*   My users receive a \"welcome wizard\", but existing ones don't. Can I always close the wizard in case it's shown, and ignore it when it's not?\n*   Can I recover from failed Cypress commands like if a [cy.get()](https://docs.cypress.io/api/commands/get) doesn't find an element?\n*   I am trying to write dynamic tests that do something different based on the text on the page.\n*   I want to automatically find all `<a>` elements and based on which ones I find, I want to check that each link works.\n\nThe problem is - while first appearing simple, writing tests in this fashion often leads to flaky tests, random failures, and difficult to track down edge cases.\n\nLet's investigate why and how you can overcome these problems...\n\n## The problem[​](#The-problem \"Direct link to The problem\")\n\nThese days modern JavaScript applications are highly dynamic and mutable. Their state and the DOM are continuously changing over a period of time.\n\nThe problem with **conditional testing** is that it can only be used when the state has stabilized. In modern day applications, knowing when state is stable is oftentimes impossible.\n\nTo a human - if something changes 10ms or 100ms from now, we may not even notice this change and assume the state was always the same.\n\nTo a robot - even 10ms represents billions+ of clock cycles. The timescale difference is incredible.\n\nA human also has intuition. If you click a button and see a loading spinner, you will assume the state is in flux and will automatically wait for it to finish.\n\nA robot has no intuition - it will do exactly as it is programmed to do.\n\nTo illustrate this, let's take a straightforward example of trying to conditionally test unstable state.\n\n### The DOM is unstable[​](#The-DOM-is-unstable \"Direct link to The DOM is unstable\")\n\n```\n// your app code// random amount of timeconst random = Math.random() * 100// create a <button> elementconst btn = document.createElement('button')// attach it to the bodydocument.body.appendChild(btn)setTimeout(() => {  // add the class active after an indeterminate amount of time  btn.setAttribute('class', 'active')}, random)\n```\n\n```\n// your cypress test codeit('does something different based on the class of the button', () => {  // RERUN THIS TEST OVER AND OVER AGAIN  // AND IT WILL SOMETIMES BE TRUE, AND  // SOMETIMES BE FALSE.  cy.get('button').then(($btn) => {    if ($btn.hasClass('active')) {      // do something if it's active    } else {      // do something else    }  })})\n```\n\nDo you see the problem here? This test is non-deterministic. The `<button>` will sometimes have the class `active` and sometimes not. In **most** cases, you cannot rely on the state of the DOM to determine what you should conditionally do.\n\nThis is the heart of flaky tests. At Cypress we have designed our API to combat this type of flakiness at every step.\n\n## The situations[​](#The-situations \"Direct link to The situations\")\n\nThe **only** way to do conditional testing on the DOM is if you are 100% sure that the state has \"settled\" and there is no possible way for it to change.\n\nThat is it! In any other circumstance you will have flaky tests if you try to rely on the state of the DOM for conditional testing.\n\nLet's explore a few examples.\n\n### Server side rendering[​](#Server-side-rendering \"Direct link to Server side rendering\")\n\nIf your application is server side rendered without JavaScript that asynchronously modifies the DOM - congratulations, you can do conditional testing on the DOM!\n\nWhy? Because if the DOM is not going to change after the `load` event occurs, then it can accurately represent a stable state of truth.\n\nYou can safely skip down to the bottom where we provide examples of conditional testing.\n\n### Client side rendering[​](#Client-side-rendering \"Direct link to Client side rendering\")\n\nHowever, in most modern applications these days - when the `load` event occurs, usually nothing has rendered on the screen. It is usually at this moment that your scripts begin to load dynamic content and begin to render asynchronously.\n\nUnfortunately, it is not possible for you to use the DOM to do conditional testing. To do this would require you to know with 100% guarantee that your application has finished all asynchronous rendering and that there are no pending network requests, setTimeouts, intervals, postMessage, or async/await code.\n\nThis is difficult to do (if not impossible) without making changes to your application. You could use a library like [Zone.js](https://github.com/angular/angular/tree/master/packages/zone.js), but even that does not capture every async possibility.\n\nIn other words, you cannot do conditional testing safely if you want your tests to run 100% consistently.\n\nBut do not fret - there are better workarounds to still achieve conditional testing **without** relying on the DOM. You have to _anchor_ yourself to another piece of truth that is not mutable.\n\n## The strategies[​](#The-strategies \"Direct link to The strategies\")\n\nIf you are unable to guarantee that the DOM is stable - don't worry, there are other ways you can do conditional testing or work around the problems inherent with it.\n\n**You could:**\n\n*   Remove the need to ever do conditional testing.\n*   Force your application to behave deterministically.\n*   Check other sources of truth (like your server or database).\n*   Embed data into other places (cookies / local storage) you could read off.\n*   Add data to the DOM that you can read off to know how to proceed.\n\nLet's explore some examples of conditional testing that will pass or fail 100% of the time.\n\n### A/B campaign[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#AB-campaign \"Direct link to AB-campaign\")\n\nIn this example let's assume you visit your website and the content will be different based on which A/B campaign your server decides to send. Perhaps it is based on geo-location, IP address, time of day, locale, or other factors that are difficult to control. How can you write tests in this manner?\n\nControl which campaign gets sent, or provide a reliable means to know which one it is.\n\n#### Use URL query params:[​](#Use-URL-query-params \"Direct link to Use URL query params:\")\n\n```\n// tell your back end server which campaign you want sent// so you can deterministically know what it is ahead of timecy.visit('https://example.cypress.io?campaign=A')...cy.visit('https://example.cypress.io?campaign=B')...cy.visit('https://example.cypress.io?campaign=C')\n```\n\nNow there is not even a need to do conditional testing since you are able to know ahead of time what campaign was sent. Yes, this may require server side updates, but you have to make an untestable app testable if you want to test it!\n\n#### Use the server:[​](#Use-the-server \"Direct link to Use the server:\")\n\nAlternatively, if your server saves the campaign with a session, you could ask your server to tell you which campaign you are on.\n\n```\n// this sends us the session cookiescy.visit('https://example.cypress.io')// assuming this sends us back// the campaign informationcy.request('https://example.cypress.io/me')  .its('body.campaign')  .then((campaign) => {    // runs different cypress test code    // based on the type of campaign    return campaigns.test(campaign)  })\n```\n\n#### Use session cookies:[​](#Use-session-cookies \"Direct link to Use session cookies:\")\n\nAnother way to test this is if your server sent the campaign in a session cookie that you could read off.\n\n```\ncy.visit('https://example.cypress.io')cy.getCookie('campaign').then((campaign) => {  return campaigns.test(campaign)})\n```\n\n#### Embed data in the DOM:[​](#Embed-data-in-the-DOM \"Direct link to Embed data in the DOM:\")\n\nAnother valid strategy would be to embed data directly into the DOM - but do so in a way where this data is **always** present and query-able. It would have to be present 100% of the time, else this would not work.\n\n```\ncy.get('html')  .should('have.attr', 'data-campaign')  .then((campaign) => {    return campaigns.test(campaign)  })\n```\n\n### Welcome wizard[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#Welcome-wizard \"Direct link to Welcome-wizard\")\n\nIn this example, let's imagine you are running a bunch of tests and each time you load your application, it may show a \"Welcome Wizard\" modal.\n\nIn this situation, you want to close the wizard when it is present and ignore it if it is not.\n\nThe problem with this is that if the wizard renders asynchronously (as it likely does) you cannot use the DOM to conditionally dismiss it.\n\nOnce again - we will need another reliable way to achieve this without involving the DOM.\n\nThese patterns are pretty much the same as before:\n\n#### Use the URL to control it:[​](#Use-the-URL-to-control-it \"Direct link to Use the URL to control it:\")\n\n```\n// dont show the wizardcy.visit('https://example.cypress.io?wizard=0')\n```\n\n```\n// show the wizardcy.visit('https://example.cypress.io?wizard=1')\n```\n\nWe would likely need to update our client side code to check whether this query param is present. Now we know ahead of time whether it will or will not be shown.\n\n#### Use Cookies to know ahead of time:[​](#Use-Cookies-to-know-ahead-of-time \"Direct link to Use Cookies to know ahead of time:\")\n\nIn the case where you cannot control it, you can still conditionally dismiss it **if** you know whether it is going to be shown.\n\n```\ncy.visit('https://example.cypress.io')cy.getCookie('showWizard')  .then((val) => {    if (val) {      // dismiss the wizard conditionally by enqueuing these      // three additional commands      cy.get('#wizard').contains('Close').click()    }  })cy.get(...)    // more commands here  .should(...) // more commands here  .click()     // more commands here\n```\n\n#### Use your server or database:[​](#Use-your-server-or-database \"Direct link to Use your server or database:\")\n\nIf you store and/or persist whether to show the wizard on the server, then ask it.\n\n```\ncy.visit('https://example.cypress.io')cy.request('https://example.cypress.io/me')  .its('body.showWizard')  .then((val) => {    if (val) {      // dismiss the wizard conditionally by enqueuing these      // three additional commands      cy.get('#wizard').contains('Close').click()    }  })cy.get(...)    // more commands here  .should(...) // more commands here  .click()     // more commands here\n```\n\nAlternatively, if you are creating users, it might take less time to create the user and set whether you want the wizard to be shown ahead of time. That would avoid this check later.\n\n#### Embed data in DOM:[​](#Embed-data-in-DOM \"Direct link to Embed data in DOM:\")\n\nAnother valid strategy would be to embed data directly into the DOM but to do so in a way that the data is **always** present and query-able. The data would have to be present 100% of the time, otherwise this strategy would not work.\n\n```\ncy.get('html').should('have.attr', 'data-wizard').then((wizard) => {  if (wizard) {    // dismiss the wizard conditionally by enqueuing these    // three additional commands    cy.get('#wizard').contains('Close').click()  }})cy.get(...)    // more commands here  .should(...) // more commands here  .click()     // more commands here\n```\n\n### Element existence[​](#Element-existence \"Direct link to Element existence\")\n\nIn the case where you **are** trying to use the DOM to do conditional testing, you can utilize the ability to synchronously query for elements in Cypress to create control flow.\n\ncaution\n\nIn the event you did not read a word above and skipped down here, we will reiterate it one more time:\n\nYou cannot do conditional testing on the DOM unless you are either:\n\n*   Server side rendering with no asynchronous JavaScript.\n*   Using client side JavaScript that **only** ever does synchronous rendering.\n\nIt is crucial that you understand how your application works else you will write flaky tests.\n\nLet's imagine we have a scenario where our application may do two separate things that we are unable to control. In other words you tried every strategy above and for whatever reason you were unable to know ahead of time what your application will do.\n\nTesting this in Cypress is possible.\n\n```\n// app code$('button').on('click', (e) => {  // do something synchronously randomly  if (Math.random() < 0.5) {    // append an input    $('<input />').appendTo($('body'))  } else {    // or append a textarea    $('<textarea />').appendTo($('body'))  }})\n```\n\n```\n// click the button causing the new// elements to appearcy.get('button').click()cy.get('body')  .then(($body) => {    // synchronously query from body    // to find which element was created    if ($body.find('input').length) {      // input was found, do something else here      return 'input'    }    // else assume it was textarea    return 'textarea'  })  .then((selector) => {    // selector is a string that represents    // the selector we could use to find it    cy.get(selector).type(`found the element by selector ${selector}`)  })\n```\n\nWe will reiterate one more time. Had the `<input>` or the `<textarea>` been rendered asynchronously, you could not use the pattern above. You would have to involve arbitrary delays which will not work in every situation, will slow down your tests, and will still leave chances that your tests are flaky (and are an all-around anti-pattern).\n\nCypress is built around creating **reliable tests**. The secret to writing good tests is to provide as much \"state\" and \"facts\" to Cypress and to \"guard it\" from issuing new commands until your application has reached the desired state it needs to proceed.\n\nDoing conditional testing adds a huge problem - that the test writers themselves are unsure what the given state will be. In those situations, the only reliable way to have accurate tests is to embed this dynamic state in a reliable and consistent way.\n\nIf you are not sure if you have written a potentially flaky test, there is a way to figure it out. Repeat the test an excessive number of times, and then repeat by modifying the Developer Tools to throttle the Network and the CPU. This will create different loads that simulate different environments (like CI). If you've written a good test, it will pass or fail 100% of the time.\n\n```\nCypress._.times(100, (i) => {  it(`num ${i + 1} - test the thing conditionally`, () => {    // do the conditional bits 100 times  })})\n```\n\n### Dynamic text[​](#Dynamic-text \"Direct link to Dynamic text\")\n\nThe pattern of doing something conditionally based on whether or not certain text is present is identical to element existence above.\n\n#### Conditionally check whether an element has certain text:[​](#Conditionally-check-whether-an-element-has-certain-text \"Direct link to Conditionally check whether an element has certain text:\")\n\n```\n// this only works if there's 100% guarantee// body has fully rendered without any pending changes// to its statecy.get('body').then(($body) => {    // synchronously ask for the body's text    // and do something based on whether it includes    // another string    if ($body.text().includes('some string')) {      // yup found it      cy.get(...).should(...)    } else {      // nope not here      cy.get(...).should(...)    }  })\n```\n\n## Error Recovery[​](#Error-Recovery \"Direct link to Error Recovery\")\n\nMany of our users ask how they can recover from failed commands.\n\n> If I had error handling, I could try to find X and if X fails go find Y\n\nBecause error handling is a common idiom in most programming languages, and especially in Node, it seems reasonable to expect to do that in Cypress.\n\nHowever, this is really the same question as asking to do conditional testing, but wrapped up in a slightly different implementation detail.\n\nFor instance you may want to do this:\n\ndanger\n\nThe following code is not valid.\n\n```\n//! You cannot add error handling to Cypress commands//! This code is just for demonstration purposescy.get('button')  .contains('hello')  .catch((err) => {    // oh no the button wasn't found    // (or something else failed)    cy.get('somethingElse').click()  })\n```\n\nIf you've been reading along, then you should already have a grasp on why trying to implement conditional code with asynchronous rendering is not a good idea. If the test writer cannot accurately predict the given state of the system, then neither can Cypress. Error handling offers no additional proof this can be done deterministically.\n\nYou should think of failed commands in Cypress as akin to uncaught exceptions in server side code. It is not possible to try to recover in those scenarios because the system has transitioned to an unreliable state. Instead you generally always opt to crash and log. When Cypress fails the test - that is exactly what it is doing. Bailing out, skipping any remaining commands in the test, and logging out the failure.\n\nBut... for the sake of the argument, let's imagine for a moment you did have error handling in Cypress.\n\nEnabling this would mean that for every single command, it would recover from errors, but only after each applicable command timeout was reached. Since timeouts start at 4 seconds (and exceed from there), this means that it would only fail after a long, long time.\n\nLet's reimagine our \"Welcome Wizard\" example from before.\n\ndanger\n\nThe following code is not valid.\n\n```\n//! You cannot add error handling to Cypress commands.//! This code is just for demonstration purposesfunction keepCalmAndCarryOn () {  cy.get(...).should(...).click()}cy  .get('#wizard').contains('Close').click()  .catch((err) => {    // no problem, i guess the wizard didn't exist    // or something... no worries    keepCalmAndCarryOn()  })  .then(keepCalmAndCarryOn)\n```\n\nIn the **best** case scenario, we have wasted at LEAST 4 seconds waiting on the `<#wizard>` element to possibly exist before we errored and continued on.\n\nBut in the **worst** case scenario we have a situation where the `<#wizard>` **was** going to be rendered, but it didn't render within our given timeout. Let's assume this was due to a pending network request or WebSocket message or a queued timer, or anything else.\n\nIn this situation, not only did we wait a long period of time, but when the `<#wizard>` element was eventually shown it's likely caused an error downstream on other commands.\n\nIf you cannot accurately know the state of your application then no matter what programming idioms you have available - **you cannot write 100% deterministic tests**.",
  "title": "Conditional Testing | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/core-concepts/cypress-app",
  "markdown": "# Cypress App | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   The names and purposes of the visual parts of Cypress\n*   How to use the Selector Playground for targeting elements\n*   How to debug tests using the built-in features of Cypress\n\n## Overview[​](#Overview \"Direct link to Overview\")\n\nThe Cypress desktop app has powerful features for creating, configuring, browsing, and most importantly running your tests. We'll touch on a few of the different functions before moving on to the Test Runner, the heart of the Cypress testing experience.\n\ninfo\n\n**Cypress Cloud integration**\n\nWhen you configure the open source Cypress app to record tests to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction), you'll see data from your latest recorded runs directly in the Cypress app. This increased visibility into your test history allows you to debug your tests faster and more effectively, all within your local workflow.\n\nThe data used by these features is pulled from Cypress Cloud, so they will only reflect test results that were [recorded](https://docs.cypress.io/guides/cloud/getting-started#Set-up-a-project-to-record).\n\nIf you're not sure whether you're logged in, you can always check using the profile control in the top right of the window.\n\n### Launchpad[​](#Launchpad \"Direct link to Launchpad\")\n\n![The Launchpad](https://docs.cypress.io/img/guides/core-concepts/cypress-app/the-launchpad.png)\n\nThe Launchpad is your portal to Cypress, helping with onboarding, choosing a testing type and launching a browser.\n\nOnce you get comfortable with Cypress you might find you don't need the Launchpad any more. In this case [you can run `cypress open` with the `--browser` and `--component` or `--e2e` options](https://docs.cypress.io/guides/guides/command-line#cypress-open) to go straight to the Specs page.\n\n### Specs[​](#Specs \"Direct link to Specs\")\n\n![Specs](https://docs.cypress.io/img/guides/core-concepts/cypress-app/spec-explorer.png)\n\nOn choosing your browser in the Launchpad, you'll be presented with a list of your specs, their names, locations, and information about your latest recorded runs. Here you can launch specs by clicking them, create new blank or example specs, or search specs by name (handy for large test suites).\n\nWe've made the following spec data available directly on the Specs page:\n\n#### Last updated[​](#Last-updated \"Direct link to Last updated\")\n\nThis column tells you when the code of this spec was last updated, using local file data from git or your own filesystem. It surfaces the change history of your tests, so you can quickly find the most relevant specs as you’re browsing your project.\n\nThis column will vary from machine to machine, as it reflects the state of the code as stored on that computer.\n\n#### Latest runs[​](#Latest-runs \"Direct link to Latest runs\")\n\nThis column shows the last time the spec was run, and the last four returned statuses. Results are scoped to your current git branch if available, falling back to the default branch if not, then finally all branches.\n\nWith this intelligence you can monitor, run, and fix tests locally within CI workflows, and then further dig into your results by clicking through to Cypress Cloud.\n\nThe runs data is sourced from Cypress Cloud (see [note above](#Overview)) so it will be the same everywhere.\n\n#### Average duration[​](#Average-duration \"Direct link to Average duration\")\n\nThis column indicates the time taken to run the entire spec file, averaged over the last four runs, so that you can quickly identify and take action to improve the performance of your long-running tests.\n\nAgain, this analysis comes from Cypress Cloud.\n\n#### Flake annotation[​](#Flake-annotation \"Direct link to Flake annotation\")\n\ninfo\n\n**What is a flaky test?**\n\nA test is considered to be [flaky](https://docs.cypress.io/guides/cloud/flaky-test-management) when it can pass and fail across multiple retry attempts without any code changes.\n\nSpecs with flaky tests are flagged with an indicator beside the spec name. This means you can easily discern which areas of your application might result in an unreliable user experience.\n\nThe flake indicator will display if any tests in the given spec have been flaky in your latest runs (limited to 4). Hovering over the indicator will show a tooltip with the following analytics, based off the last **50** runs:\n\n*   Rate (flaky runs divided by total runs)\n*   Severity (flaky rate at a glance)\n*   Last flaky (how many runs ago)\n\nClicking on the flake indicator will take you to the spec’s [Flaky Test Analytics in Cypress Cloud](https://cloud.cypress.io/projects/7s5okt/analytics/flaky-tests).\n\n#### Running Specs[​](#Running-Specs \"Direct link to Running Specs\")\n\n![Specs](https://docs.cypress.io/img/guides/core-concepts/cypress-app/spec-page.png)\n\nTo run a spec, simply click the row with the spec you would like to run. You will be taken to the [Test Runner](#Test-Runner) and the spec will execute. You can narrow down the list of specs by typing into the search bar (1).\n\nIt is also possible to run multiple specs sequentially using the [`experimentalRunAllSpecs`](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing) (2).\n\ncaution\n\n**Experimental Run All Specs**\n\n`experimentalRunAllSpecs` currently works with End to End Testing.\n\nRunning multiple specs sequentially is currently an [experimental feature](https://docs.cypress.io/guides/references/configuration#Experiments) and it may change in the future. There are some known limitations outlined in this [GitHub Discussion](https://github.com/cypress-io/cypress/discussions/21628).\n\nRunning a large number of specs sequentially can consume more resources.\n\n### Runs[​](#Runs \"Direct link to Runs\")\n\n![Recorded Runs](https://docs.cypress.io/img/guides/core-concepts/cypress-app/recorded-runs.jpg)\n\nThis screen shows detailed information about the most recently recorded [test runs](https://docs.cypress.io/guides/cloud/recorded-runs#Latest-Runs) to Cypress Cloud, showing the latest first.\n\nCypress uses Git to show runs for your branch. Ensure that version control is properly configured and that you are sending Git information to Cypress Cloud. If no runs are found for your current branch, all runs for your project are shown as a fallback.\n\nThe title of each run is taken from the [git commit message](https://www.educative.io/edpresso/git-commit-message-simply-explained) for that change, and clicking on it will take you to the corresponding run page in Cypress Cloud.\n\n### Debug[​](#Debug \"Direct link to Debug\")\n\n![Debug](https://docs.cypress.io/img/guides/core-concepts/cypress-app/debug-page.png)\n\nThe Debug page allows you to easily debug failed CI test runs from within the Cypress app. From this page, you can review, rerun, and debug failed CI test runs that are recorded to Cypress Cloud (see [note above](#Overview)) - all without leaving the Cypress app.\n\nThis feature eliminates the tedious process of switching between Cypress, your local editor, and CI output, in order to fix failed tests. It does this by enabling you to use the [Test Runner](#Test-Runner) to run only the tests that failed in your last recorded test run, as well as review the [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) and other artifacts like screenshots, videos, and logs from your tests.\n\nThe Debug page shows the latest completed [test run](https://docs.cypress.io/guides/cloud/recorded-runs#Latest-Runs) that matches the `HEAD` commit (the commit currently checked out in the working directory) of your local project. Users can see and switch to relevant runs within the Debug page. If no run is found for your current commit, then Cypress shows the most recent run in your branch's history up until the current commit. The first **100** failed tests are listed, with a link to Cypress Cloud to review the full run.\n\nTo use this feature, you must ensure that git is properly configured for your project and that you are sending git information to Cypress Cloud. Under some environment setups (e.g. `docker`/`docker-compose`), you may have to pass git information using [custom environment variables](https://docs.cypress.io/guides/continuous-integration/introduction#Git-information).\n\n### Cloud Run Notifications[​](#Cloud-Run-Notifications \"Direct link to Cloud Run Notifications\")\n\n![App notification on macOS](https://docs.cypress.io/img/guides/cloud/runs/app-notification.jpg)\n\nYou can receive notifications in the Cypress app for recorded runs directly from Cypress Cloud. Learn more about [Cloud Run Notifications](https://docs.cypress.io/guides/cloud/recorded-runs#Notifications).\n\n## Test Runner[​](#Test-Runner \"Direct link to Test Runner\")\n\nAt the core of the app is the Test Runner itself. Cypress runs tests interactively, allowing you to see commands as they execute while also viewing the Application or Component Under Test, and exploring its DOM.\n\n![The Test Runner](https://docs.cypress.io/img/guides/core-concepts/cypress-app/test-runner.png)\n\n## Command Log[​](#Command-Log \"Direct link to Command Log\")\n\nThe left-hand side of the Test Runner is a visual representation of your test suite. Each test block is properly nested and each test, when clicked, displays every Cypress command executed within the test's block as well as any commands executed in relevant `before`, `beforeEach`, `afterEach`, and `after` hooks.\n\n![Cypress app](https://docs.cypress.io/img/guides/core-concepts/cypress-app/command-log.png)\n\n### Open files in your IDE[​](#Open-files-in-your-IDE \"Direct link to Open files in your IDE\")\n\nThere are some places in the Command Log that display a link to the relevant file where the code is located. Clicking on this link will open the file in your [preferred file opener](https://docs.cypress.io/guides/tooling/IDE-integration#File-Opener-Preference).\n\n![Open file in your IDE](https://docs.cypress.io/img/guides/core-concepts/cypress-app/open-file-in-IDE.gif)\n\n### Time traveling[​](#Time-traveling \"Direct link to Time traveling\")\n\nEach command, when hovered over, restores the Application or Component Under Test (right-hand side) to the state it was in when that command executed. This allows you to **time travel** back to previous states when testing.\n\ntip\n\nBy default, Cypress keeps **50** tests worth of snapshots and command data for time traveling. If you are seeing extremely high memory consumption in your browser, you may want to lower the `numTestsKeptInMemory` in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Global).\n\nIn the following example, hovering over the [`contains`](https://docs.cypress.io/api/commands/contains) command in the Command Log changes the state of the [AUT](#Application-Under-Test) preview:\n\n![Hovering over the contains tab highlights the dom element in the App in the Cypress app](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-hover-contains.png)\n\nCypress automatically travels back in time to a snapshot of when a hovered-over command resolved. Additionally, since [`cy.contains()`](https://docs.cypress.io/api/commands/contains) finds DOM elements on the page, Cypress also highlights the element and scrolls it into view (to the top of the page).\n\nAlso note that as we hover over the [`contains`](https://docs.cypress.io/api/commands/contains) command, Cypress reverts back to the URL that was present when the snapshot was taken.\n\n![The url address bar shows https://example.cypress.io/](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-url-revert.png)\n\n### Pinning snapshots[​](#Pinning-snapshots \"Direct link to Pinning snapshots\")\n\nEach command, when clicked on, displays extra information in the dev tools console. Clicking also **pins** the Application or Component Under Test (right-hand side) to its previous state, or **snapshot**, when the command executed.\n\nIn the following example, clicking on the `CLICK` command highlights it in purple, and does three other things worth noting:\n\n![A click on the click command in the Command Log with Cypress app labeled as 1, 2, 3](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-click-revert.png)\n\n#### 1\\. Pinned snapshots[​](#1-Pinned-snapshots \"Direct link to 1. Pinned snapshots\")\n\nWe have now **pinned** this snapshot. Hovering over other commands will not revert to them. This gives us a chance to manually inspect the DOM of our application under test at the time the snapshot was taken.\n\n#### 2\\. Event hitbox[​](#2-Event-hitbox \"Direct link to 2. Event hitbox\")\n\nSince [`.click()`](https://docs.cypress.io/api/commands/click) is an action command, that means we also see a red hitbox at the coordinates the event took place.\n\nThere is also a new menu panel. Some commands (like action commands) will take multiple snapshots: **before** and **after**. We can now cycle through these.\n\nThe **before** snapshot is taken prior to the click event firing. The **after** snapshot is taken immediately after the click event. Although this click event caused our browser to load a new page, it's not an instantaneous transition. Depending on how fast your page loaded, you may still see the same page, or a blank screen as the page is unloading and in transition.\n\nWhen a command causes an immediate visual change in our application, cycling between before and after will update our snapshot. We can see this in action by clicking the `TYPE` command in the Command Log. Now, clicking **before** will show us the input in a default state, showing the placeholder text. Click **after** will show us what the input looks like when the `TYPE` command has completed.\n\n### Page events[​](#Page-events \"Direct link to Page events\")\n\nIn addition to showing all the commands that were called, the command log also shows important events from your application or component when they occur. Notice these look different (they are gray and without a number).\n\n![Command log shows 'Page load --page loaded--' and 'New url https://example.cypress.io/'](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-page-load.png)\n\n**Cypress logs out page events for:**\n\n*   Network XHR Requests\n*   URL hash changes\n*   Page Loads\n*   Form Submissions\n\n### Instrument panel[​](#Instrument-panel \"Direct link to Instrument panel\")\n\nFor certain commands like [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept), [`cy.stub()`](https://docs.cypress.io/api/commands/stub), and [`cy.spy()`](https://docs.cypress.io/api/commands/spy), an extra instrument panel is displayed above the test to give more information about the state of your tests.\n\n#### Routes[​](#Routes \"Direct link to Routes\")\n\n![Routes Instrument Panel](https://docs.cypress.io/img/guides/core-concepts/cypress-app/instrument-panel-routes.png)\n\n#### Stubs[​](#Stubs \"Direct link to Stubs\")\n\n![Stubs Instrument Panel](https://docs.cypress.io/img/guides/core-concepts/cypress-app/instrument-panel-stubs.png)\n\n#### Spies[​](#Spies \"Direct link to Spies\")\n\n![Spies Instrument Panel](https://docs.cypress.io/img/guides/core-concepts/cypress-app/instrument-panel-spies.png)\n\n## Preview pane[​](#Preview-pane \"Direct link to Preview pane\")\n\nThe right-hand side of the Test Runner is where the Application or Component Under Test is rendered.\n\n### Application Under Test[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#Application-Under-Test \"Direct link to Application-Under-Test\")\n\nIn [E2E Testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing), the right-hand side of the Test Runner is used to display the Application Under Test (AUT): the application that was navigated to using a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) or any subsequent routing calls made from the visited application.\n\nIn the example below, we wrote the following code in our test file:\n\n```\ncy.visit('https://example.cypress.io')cy.title().should('include', 'Kitchen Sink')\n```\n\nIn the corresponding application preview below, you can see `https://example.cypress.io` is being displayed in the right-hand side. Not only is the application visible, but it is fully interactive. You can open your developer tools to inspect elements as you would in your normal application. The DOM is completely available for debugging.\n\n![Application Under Test](https://docs.cypress.io/img/guides/core-concepts/cypress-app/application-under-test.png)\n\nThe AUT also displays in the size and orientation specified in your tests. You can change the size or orientation with the [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) command or in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Viewport). If the AUT does not fit within the current browser window, it is scaled appropriately to fit within the window.\n\nThe current size and scale of the AUT is displayed in the top right corner of the window.\n\nThe image below shows that our application is displaying at `1000px` width, `660px` height and scaled to `100%`.\n\n![Viewport Scaling](https://docs.cypress.io/img/guides/core-concepts/cypress-app/viewport-scaling.png)\n\ninfo\n\nThe right-hand side may also be used to display syntax errors in your spec file that prevent the tests from running.\n\n![Errors](https://docs.cypress.io/img/guides/core-concepts/cypress-app/aut-error-e2e.png)\n\ncaution\n\nInternally, the AUT renders within an iframe. This can sometimes cause unexpected behaviors [explained here.](https://docs.cypress.io/api/commands/window#Cypress-uses-2-different-windows)\n\n### Component Under Test[\n\nComponent Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing)[​](#Component-Under-Test \"Direct link to Component-Under-Test\")\n\nIn [Component testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing), the right-hand side of the Test Runner is used to display the Component Under Test (CUT): the component that was mounted using the [`cy.mount()`](https://docs.cypress.io/api/commands/mount) command.\n\nIn the following example, we have the following test in our spec file:\n\n*   React\n*   Vue\n\n```\nit('should have password input of type password', () => {  mount(<LoginForm />)  cy.contains('Password').find('input').should('have.attr', 'type', 'password')})\n```\n\nIn the corresponding Component Preview below, you can see the `LoginForm` component is being displayed in the right-hand side. Not only is the component visible, but it is fully interactable. You can open your developer tools to inspect elements as you would in your normal application. The DOM is completely available for debugging.\n\n![Cypress app showing mounted component and password assertion](https://docs.cypress.io/img/guides/core-concepts/component-under-test.png)\n\nThe CUT also displays in the size and orientation specified in your tests. You can change the size or orientation with the [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) command or in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Viewport). If the CUT does not fit within the current browser window, it is scaled appropriately to fit within the window.\n\nThe current size and scale of the CUT is displayed in the top right corner of the window.\n\nThe image below shows that our application is displaying at `500px` width, `500px` height and scaled to `100%`.\n\n![Cypress app showing mounted component test viewport scale](https://docs.cypress.io/img/guides/core-concepts/cypress-app/viewport-scaling-ct.png)\n\ninfo\n\nThe right-hand side may also be used to display syntax errors in your spec file that prevent the tests from running.\n\n![Cypress app showing error as application under test](https://docs.cypress.io/img/guides/core-concepts/cypress-app/aut-error-ct.png)\n\ncaution\n\nInternally, the AUT renders within an iframe. This can sometimes cause unexpected behaviors [explained here.](https://docs.cypress.io/api/commands/window#Cypress-uses-2-different-windows)\n\n## Selector Playground[​](#Selector-Playground \"Direct link to Selector Playground\")\n\nThe Selector Playground is an interactive feature that helps you:\n\n*   Determine a unique selector for an element.\n*   See what elements match a given selector.\n*   See what element matches a string of text.\n\ninfo\n\nNeeding a low code approach to create tests? Use [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) to record your browser interactions.\n\n### Uniqueness[​](#Uniqueness \"Direct link to Uniqueness\")\n\nCypress will automatically calculate a **unique selector** to use targeted element by running through a series of selector strategies.\n\n### Default Selector Priority[​](#Default-Selector-Priority \"Direct link to Default Selector Priority\")\n\n1.  `data-cy`\n2.  `data-test`\n3.  `data-testid`\n4.  `data-qa`\n5.  `id`\n6.  `class`\n7.  `tag`\n8.  `attributes`\n9.  `nth-child`\n\ntip\n\n**This is configurable**\n\nCypress allows you to control how a selector is determined.\n\nUse the [Cypress.SelectorPlayground](https://docs.cypress.io/api/cypress-api/selector-playground-api) API to control the selectors you want returned.\n\n### Best practices[​](#Best-practices \"Direct link to Best practices\")\n\nYou may find yourself struggling to write good selectors because:\n\n*   Your application or component uses dynamic ID's and class names\n*   Your tests break whenever there are CSS or content changes\n\nTo help with these common challenges, the Selector Playground automatically prefers certain `data-*` attributes when determining a unique selector.\n\nPlease read our [Best Practices guide](https://docs.cypress.io/guides/references/best-practices#Selecting-Elements) on helping you target elements and prevent tests from breaking on CSS or JS changes.\n\n### Finding selectors[​](#Finding-selectors \"Direct link to Finding selectors\")\n\nTo open the Selector Playground, click the button next to the URL at the top of the Test Runner. Hover over elements in your app to preview a unique selector for that element in the tooltip.\n\n![Opening selector playground and hovering over elements](https://docs.cypress.io/img/guides/core-concepts/cypress-app/open-selector-playground.gif)\n\nClick on the element and its selector will appear at the top. From there, you can copy it to your clipboard ( ) or print it to the console ( ).\n\n![Clicking an element, copying its selector to clipboard, printing it to the console](https://docs.cypress.io/img/guides/core-concepts/cypress-app/copy-selector-in-selector-playground.gif)\n\n### Running experiments[​](#Running-experiments \"Direct link to Running experiments\")\n\nThe box at the top that displays the selector is also a text input.\n\n#### Editing a selector[​](#Editing-a-selector \"Direct link to Editing a selector\")\n\nWhen you edit the selector, it will show you how many elements match and highlight those elements in your app.\n\n![Type a selector to see what elements it matches](https://docs.cypress.io/img/guides/core-concepts/cypress-app/typing-a-selector-to-find-in-playground.gif)\n\n#### Switching to contains[​](#Switching-to-contains \"Direct link to Switching to contains\")\n\nYou can also experiment with what [`cy.contains()`](https://docs.cypress.io/api/commands/contains) would yield given a string of text. Click on `cy.get` and switch to `cy.contains`.\n\nType in text to see which element it matches. Note that [`cy.contains()`](https://docs.cypress.io/api/commands/contains) only yields the first element that matches the text, even if multiple elements on the page contain the text.\n\n![Experiment with cy.contains](https://docs.cypress.io/img/guides/core-concepts/cypress-app/cy-contains-in-selector-playground.gif)\n\n#### Disabling highlights[​](#Disabling-highlights \"Direct link to Disabling highlights\")\n\nIf you would like to interact with your app while the Selector Playground is open, the element highlighting might get in the way. Toggling the highlighting off will allow you to interact with your app more easily.\n\n![Turn off highlighting](https://docs.cypress.io/img/guides/core-concepts/cypress-app/turn-off-highlight-in-selector-playground.gif)\n\n## Keyboard shortcuts[​](#Keyboard-shortcuts \"Direct link to Keyboard shortcuts\")\n\nThere are keyboard shortcuts to quickly perform common actions from within Cypress.\n\n| Key | Action |\n| --- | --- |\n| `r` | Rerun tests |\n| `s` | Stop tests |\n| `f` | Bring focus to 'specs' window |\n\n![Tooltips show keyboard shortcuts](https://docs.cypress.io/img/guides/core-concepts/cypress-app/keyboard-shortcuts.png)\n\n## Debugging[​](#Debugging \"Direct link to Debugging\")\n\nIn addition to the features already mentioned, Cypress comes with a host of debugging tools to help you understand a test. You can:\n\n*   See detailed information about [errors](#Errors) that occur.\n*   Receive additional [console output](#Console-output) about each command.\n*   [Pause commands](#Special-commands) and step through them iteratively.\n\n### Errors[​](#Errors \"Direct link to Errors\")\n\nCypress prints several pieces of information when an error occurs during a Cypress test.\n\n1.  **Error name**: This is the type of error (e.g. `AssertionError`, `CypressError`)\n2.  **Error message**: This generally tells you what went wrong. It can vary in length. Some are short like in the example, while some are long, and may tell you exactly how to fix the error.\n3.  **Learn more:** Some error messages contain a **Learn more** link that will take you to relevant Cypress documentation.\n4.  **Code frame file**: This is usually the top line of the stack trace and it shows the file, line number, and column number that is highlighted in the code frame below. Clicking on this link will open the file in your [preferred file opener](https://on.cypress.io/IDE-integration#File-Opener-Preference) and highlight the line and column in editors that support it.\n5.  **Code frame**: This shows a snippet of code where the failure occurred, with the relevant line and column highlighted.\n6.  **View stack trace**: Clicking this toggles the visibility of the stack trace. Stack traces vary in length. Clicking on a blue file path will open the file in your [preferred file opener](https://on.cypress.io/IDE-integration#File-Opener-Preference).\n7.  **Print to console button**: Click this to print the full error to your DevTools console. This will usually allow you to click on lines in the stack trace and open files in your DevTools.\n\n![example command failure error](https://docs.cypress.io/img/guides/core-concepts/cypress-app/command-failure-error.png)\n\n### Console output[​](#Console-output \"Direct link to Console output\")\n\nBesides commands being interactive, they also output additional debugging information to your console.\n\nOpen up your Dev Tools and click on the `GET` for the `.action-email` class selector.\n\n![Cypress app with get command pinned and console log open showing the yielded element](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-console-output.png)\n\n**We can see Cypress output additional information in the console:**\n\n*   Command (that was issued)\n*   Yielded (what was returned by this command)\n*   Elements (the number of elements found)\n*   Selector (the argument we used)\n\nWe can even expand what was returned and inspect each individual element or even right click and inspect them in the Elements panel!\n\n### Special commands[​](#Special-commands \"Direct link to Special commands\")\n\nIn addition to having a helpful UI, there are also special commands dedicated to the task of debugging, for example:\n\n*   [cy.pause()](https://docs.cypress.io/api/commands/pause)\n*   [cy.debug()](https://docs.cypress.io/api/commands/debug)\n\nIn the following example, we've added a [cy.pause()](https://docs.cypress.io/api/commands/pause) command to this test:\n\n```\ndescribe('My First Test', () => {  it('clicking \"type\" shows the right headings', () => {    cy.visit('https://example.cypress.io')    cy.pause()    cy.contains('type').click()    // Should be on a new URL which includes '/commands/actions'    cy.url().should('include', '/commands/actions')    // Get an input, type into it and verify that the value has been updated    cy.get('[data-testid=\"action-email\"]')      .type('[email protected]')      .should('have.value', '[email protected]')  })})\n```\n\nNow, when the test runs, Cypress provides us a UI (similar to debugger) to step forward through each command in the test.\n\n![Cypress app shows label saying 'Paused' with Command Log showing 'Pause'](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-paused.png)\n\nIn action:\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [3.5.0](https://docs.cypress.io/guides/references/changelog#3-5-0) | Added keyboard shortcuts to Cypress |\n| [1.3.0](https://docs.cypress.io/guides/references/changelog#1-3-0) | Added Selector Playground |",
  "title": "Cypress App | Cypress Documentation",
  "description": "What you'll learn",
  "languageCode": "en"
},
{
  "url": "https://docs.cypress.io/guides/references/best-practices",
  "markdown": "# Best Practices | Cypress Documentation\n\n## Organizing Tests, Logging In, Controlling State[​](#Organizing-Tests-Logging-In-Controlling-State \"Direct link to Organizing-Tests-Logging-In-Controlling-State\")\n\ndanger\n\n**Anti-Pattern:** Sharing page objects, using your UI to log in, and not taking shortcuts.\n\ntip\n\n**Best Practice:** Test specs in isolation, programmatically log into your application, and take control of your application's state.\n\ntip\n\nWe gave a \"Best Practices\" conference talk at AssertJS (February 2018). This video demonstrates how to approach breaking down your application and organizing your tests.\n\n[AssertJS - Cypress Best Practices](https://www.youtube.com/watch?v=5XQOK0v_YRE)\n\nWe have several [Logging in recipes](https://github.com/cypress-io/cypress-example-recipes#logging-in-recipes) in our examples.\n\n## Selecting Elements[​](#Selecting-Elements \"Direct link to Selecting-Elements\")\n\ndanger\n\n**Anti-Pattern:** Using highly brittle selectors that are subject to change.\n\ntip\n\n**Best Practice:** Use `data-*` attributes to provide context to your selectors and isolate them from CSS or JS changes.\n\nEvery test you write will include selectors for elements. To save yourself a lot of headaches, you should write selectors that are resilient to changes.\n\nOftentimes we see users run into problems targeting their elements because:\n\n*   Your application may use dynamic classes or ID's that change\n*   Your selectors break from development changes to CSS styles or JS behavior\n\nLuckily, it is possible to avoid both of these problems.\n\n1.  Don't target elements based on CSS attributes such as: `id`, `class`, `tag`\n2.  Don't target elements that may change their `textContent`\n3.  Add `data-*` attributes to make it easier to target elements\n\n### How It Works[​](#How-It-Works \"Direct link to How It Works\")\n\nGiven a button that we want to interact with:\n\n```\n<button  id=\"main\"  class=\"btn btn-large\"  name=\"submission\"  role=\"button\"  data-cy=\"submit\">  Submit</button>\n```\n\nLet's investigate how we could target it:\n\n| Selector | Recommended | Notes |\n| --- | --- | --- |\n| `cy.get('button').click()` | Never | Worst - too generic, no context. |\n| `cy.get('.btn.btn-large').click()` | Never | Bad. Coupled to styling. Highly subject to change. |\n| `cy.get('#main').click()` | Sparingly | Better. But still coupled to styling or JS event listeners. |\n| `cy.get('[name=\"submission\"]').click()` | Sparingly | Coupled to the `name` attribute which has HTML semantics. |\n| `cy.contains('Submit').click()` | Depends | Much better. But still coupled to text content that may change. |\n| `cy.get('[data-cy=\"submit\"]').click()` | Always | Best. Isolated from all changes. |\n\nTargeting the element above by `tag`, `class` or `id` is very volatile and highly subject to change. You may swap out the element, you may refactor CSS and update ID's, or you may add or remove classes that affect the style of the element.\n\nInstead, adding the `data-cy` attribute to the element gives us a targeted selector that's only used for testing.\n\nThe `data-cy` attribute will not change from CSS style or JS behavioral changes, meaning it's not coupled to the **behavior** or **styling** of an element.\n\nAdditionally, it makes it clear to everyone that this element is used directly by test code.\n\ninfo\n\n**Did you know?**\n\nThe [Selector Playground](https://docs.cypress.io/guides/core-concepts/cypress-app#Selector-Playground) automatically follows these best practices.\n\nWhen determining a unique selector, it will automatically prefer elements with:\n\n*   `data-cy`\n*   `data-test`\n*   `data-testid`\n\n#### Real World Example[​](#Real-World-Example \"Direct link to Real-World-Example\")\n\nThe [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) uses two useful custom commands for selecting elements for testing:\n\n*   `getBySel` yields elements with a `data-test` attribute that **match** a specified selector.\n*   `getBySelLike` yields elements with a `data-test` attribute that **contains** a specified selector.\n\n```\n// cypress/support/commands.tsCypress.Commands.add('getBySel', (selector, ...args) => {  return cy.get(`[data-test=${selector}]`, ...args)})Cypress.Commands.add('getBySelLike', (selector, ...args) => {  return cy.get(`[data-test*=${selector}]`, ...args)})\n```\n\n### Text Content[​](#Text-Content \"Direct link to Text Content\")\n\nAfter reading the above rules you may be wondering:\n\n> If I should always use data attributes, then when should I use `cy.contains()`?\n\nA rule of thumb is to ask yourself this:\n\nIf the content of the element **changed** would you want the test to fail?\n\n*   If the answer is yes: then use [`cy.contains()`](https://docs.cypress.io/api/commands/contains)\n*   If the answer is no: then use a data attribute.\n\n**Example:**\n\nIf we looked at the `<html>` of our button again...\n\n```\n<button id=\"main\" class=\"btn btn-large\" data-cy=\"submit\">Submit</button>\n```\n\nThe question is: how important is the `Submit` text content to your test? If the text changed from `Submit` to `Save` - would you want the test to fail?\n\nIf the answer is **yes** because the word `Submit` is critical and should not be changed - then use [`cy.contains()`](https://docs.cypress.io/api/commands/contains) to target the element. This way, if it is changed, the test will fail.\n\nIf the answer is **no** because the text could be changed - then use [`cy.get()`](https://docs.cypress.io/api/commands/get) with data attributes. Changing the text to `Save` would then not cause a test failure.\n\n### Cypress and Testing Library[​](#Cypress-and-Testing-Library \"Direct link to Cypress and Testing Library\")\n\nCypress loves the Testing Library project. We use Testing Library internally, and our philosophy aligns closely with Testing Library's ethos and approach to writing tests. We strongly endorse their best practices.\n\nYou can use the [Cypress Testing Library](https://testing-library.com/docs/cypress-testing-library/intro/) package to use the familiar testing library methods (like `findByRole`, `findByLabelText`, etc...) to select elements in Cypress specs.\n\nIn particular, if you're looking for more resources to understand how we recommend you approach testing your components, look to: [Cypress Component Testing](https://docs.cypress.io/guides/component-testing/overview).\n\n## Assigning Return Values[​](#Assigning-Return-Values \"Direct link to Assigning-Return-Values\")\n\ndanger\n\n**Anti-Pattern:** Trying to assign the return value of Commands with `const`, `let`, or `var`.\n\nMany first time users look at Cypress code and think it runs synchronously.\n\nWe see new users commonly write code that looks like this:\n\n```\n// DONT DO THIS. IT DOES NOT WORK// THE WAY YOU THINK IT DOES.const a = cy.get('a')cy.visit('https://example.cypress.io')// nope, failsa.first().click()// Instead, do this.cy.get('a').as('links')cy.get('@links').first().click()\n```\n\ninfo\n\n**Did you know?**\n\nYou rarely have to ever use `const`, `let`, or `var` in Cypress. If you're using them, you will want to do some refactoring.\n\nIf you are new to Cypress and wanting to better understand how Commands work - [please read our Introduction to Cypress guide](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Chains-of-Commands).\n\nIf you're familiar with Cypress commands already, but find yourself using `const`, `let`, or `var` then you're typically trying to do one of two things:\n\n*   You're trying to **store and compare** values such as **text**, **classes**, **attributes**.\n*   You're trying to share **values** between tests and hooks like `before` and `beforeEach`.\n\nFor working with either of these patterns, please read our [Variables and Aliases guide](https://docs.cypress.io/guides/core-concepts/variables-and-aliases).\n\n## Visiting External Sites[​](#Visiting-External-Sites \"Direct link to Visiting-External-Sites\")\n\ndanger\n\n**Anti-Pattern:** Trying to visit or interact with sites or servers you do not control.\n\ntip\n\n**Best Practice:** Only test websites that you control. Try to avoid visiting or requiring a 3rd party server. If you choose, you may use [`cy.request()`](https://docs.cypress.io/api/commands/request) to talk to 3rd party servers via their APIs. If possible, cache results via [`cy.session()`](https://docs.cypress.io/api/commands/session) to avoid repeat visits.\n\nOne of the first things many of our users attempt to do is involve 3rd party servers or services in their tests.\n\nYou may want to access 3rd party services in several situations:\n\n1.  Testing log in when your app uses another provider via OAuth.\n2.  Verifying your server updates a 3rd party server.\n3.  Checking your email to see if your server sent a \"forgot password\" email.\n\nIf you choose, these situations can be tested with [`cy.visit()`](https://docs.cypress.io/api/commands/visit) and [`cy.origin()`](https://docs.cypress.io/api/commands/origin). However, you will only want to utilize these commands for resources in your control, either by controlling the domain or hosted instance. These use cases are common for:\n\n*   Authentication as a service platforms, such as Auth0, Okta, Microsoft, AWS Cognito, and others via username/password authentication. These domains and service instances are usually owned and controlled by you or your organization.\n*   CMS instances, such as a Contentful or Wordpress instance.\n*   Other types of services under a domain in which you control.\n\nOther services, such as social logins through popular media providers, are not recommended. Testing social logins may work, especially if run locally. However, we consider this a bad practice and do not recommend it because:\n\n*   It's incredibly time consuming and slows down your tests (unless using [`cy.session()`](https://docs.cypress.io/api/commands/session)).\n*   The 3rd party site may have changed or updated its content.\n*   The 3rd party site may be having issues outside of your control.\n*   The 3rd party site may detect you are testing via a script and block you.\n*   The 3rd party site might have policies against automated login, leading to banning of accounts.\n*   The 3rd party site might detect you are a bot, and provide mechanisms such as two-factor authentication, captchas, and other means to prevent automation. This is common with continuous integration platforms and general automation.\n*   The 3rd party site may be running A/B campaigns.\n\nLet's look at a few strategies for dealing with these situations.\n\n### When logging in[​](#When-logging-in \"Direct link to When logging in\")\n\nMany OAuth providers, especially social logins, run A/B experiments, which means that their login screen is dynamically changing. This makes automated testing difficult.\n\nMany OAuth providers also throttle the number of web requests you can make to them. For instance, if you try to test Google, Google will **automatically** detect that you are not a human and instead of giving you an OAuth login screen, they will make you fill out a captcha.\n\nAdditionally, testing through an OAuth provider is mutable - you will first need a real user on their service and then modifying anything on that user might affect other tests downstream.\n\n**Here are solutions you may choose to use to alleviate these problems:**\n\n1.  Use another platform that you control to log in with username and password via [`cy.origin()`](https://docs.cypress.io/api/commands/origin). This likely guarantees that you will not run into the problems listed above, while still being able to automate your login flow. You can reduce the amount of authentication requests by utilizing [`cy.session()`](https://docs.cypress.io/api/commands/session).\n2.  [Stub](https://docs.cypress.io/api/commands/stub) out the OAuth provider and bypass it using their UI altogether if [`cy.origin()`](https://docs.cypress.io/api/commands/origin) is not an option. You could trick your application into believing the OAuth provider has passed its token to your application.\n3.  If you **must** get a real token and [`cy.origin()`](https://docs.cypress.io/api/commands/origin) is not an option, you can use [`cy.request()`](https://docs.cypress.io/api/commands/request) and use the **programmatic** API that your OAuth provider provides. These APIs likely change **more** infrequently and you avoid problems like throttling and A/B campaigns.\n4.  Instead of having your test code bypass OAuth, you could also ask your server for help. Perhaps all an OAuth token does is generate a user in your database. Oftentimes OAuth is only useful initially and your server establishes its own session with the client. If that is the case, use [`cy.request()`](https://docs.cypress.io/api/commands/request) to get the session directly from your server and bypass the provider altogether if [`cy.origin()`](https://docs.cypress.io/api/commands/origin) is not an option.\n\n### 3rd party servers[​](#3rd-party-servers \"Direct link to 3rd party servers\")\n\nSometimes actions that you take in your application **may** affect another 3rd party application. These situations are not that common, but it is possible. Imagine your application integrates with GitHub and by using your application you can change data inside of GitHub.\n\nAfter running your test, instead of trying to [`cy.visit()`](https://docs.cypress.io/api/commands/visit) GitHub, you can use [`cy.request()`](https://docs.cypress.io/api/commands/request) to programmatically interact with GitHub's APIs directly.\n\nThis avoids ever needing to touch the UI of another application.\n\n### Verifying sent emails[​](#Verifying-sent-emails \"Direct link to Verifying sent emails\")\n\nTypically, when going through scenarios like user registration or forgotten passwords, your server schedules an email to be delivered.\n\n1.  If your application is running locally and is sending the emails directly through an SMTP server, you can use a temporary local test SMTP server running inside Cypress. Read the blog post [\"Testing HTML Emails using Cypress\"](https://www.cypress.io/blog/2021/05/11/testing-html-emails-using-cypress/) for details.\n2.  If your application is using a 3rd party email service, or you cannot stub the SMTP requests, you can use a test email inbox with an API access. Read the blog post [\"Full Testing of HTML Emails using SendGrid and Ethereal Accounts\"](https://www.cypress.io/blog/2021/05/24/full-testing-of-html-emails-using-ethereal-accounts/) for details.\n\nCypress can even load the received HTML email in its browser to verify the email's functionality and visual style:\n\n![The test finds and clicks the Confirm registration button](https://docs.cypress.io/img/guides/references/email-test.png \"The HTML email loaded during the test\")\n\n3.  In other cases, you should try using [`cy.request()`](https://docs.cypress.io/api/commands/request) command to query the endpoint on your server that tells you what email has been queued or delivered. That would give you a programmatic way to know without involving the UI. Your server would have to expose this endpoint.\n4.  You could also use `cy.request()` to a 3rd party email recipient server that exposes an API to read off emails. You will then need the proper authentication credentials, which your server could provide, or you could use environment variables. Some email services already provide [Cypress plugins](https://docs.cypress.io/plugins#email) to access emails.\n\n## Having Tests Rely On The State Of Previous Tests[​](#Having-Tests-Rely-On-The-State-Of-Previous-Tests \"Direct link to Having-Tests-Rely-On-The-State-Of-Previous-Tests\")\n\ndanger\n\n**Anti-Pattern:** Coupling multiple tests together.\n\ntip\n\n**Best Practice:** Tests should always be able to be run independently from one another **and still pass**.\n\nYou only need to do one thing to know whether you've coupled your tests incorrectly, or if one test is relying on the state of a previous one.\n\nChange `it` to [`it.only`](https://jestjs.io/docs/api#testonlyname-fn-timeout) on the test and refresh the browser.\n\nIf this test can run **by itself** and pass - congratulations you have written a good test.\n\nIf this is not the case, then you should refactor and change your approach.\n\nHow to solve this:\n\n*   Move repeated code in previous tests to `before` or `beforeEach` hooks.\n*   Combine multiple tests into one larger test.\n\nLet's imagine the following test that is filling out the form.\n\n*   End-to-End Test\n*   Component Test\n\n```\n// an example of what NOT TO DOdescribe('my form', () => {  it('visits the form', () => {    cy.visit('/users/new')  })  it('requires first name', () => {    cy.get('[data-testid=\"first-name\"]').type('Johnny')  })  it('requires last name', () => {    cy.get('[data-testid=\"last-name\"]').type('Appleseed')  })  it('can submit a valid form', () => {    cy.get('form').submit()  })})\n```\n\nWhat's wrong with the above tests? They are all coupled together!\n\nIf you were to change `it` to [`it.only`](https://jestjs.io/docs/api#testonlyname-fn-timeout) on any of the last three tests, they would fail. Each test requires the previous to run in a specific order in order to pass.\n\nHere's 2 ways we can fix this:\n\n### 1\\. Combine into one test[​](#1-Combine-into-one-test \"Direct link to 1. Combine into one test\")\n\n*   End-to-End Test\n*   Component Test\n\n```\n// a bit betterdescribe('my form', () => {  it('can submit a valid form', () => {    cy.visit('/users/new')    cy.log('filling out first name') // if you really need this    cy.get('[data-testid=\"first-name\"]').type('Johnny')    cy.log('filling out last name') // if you really need this    cy.get('[data-testid=\"last-name\"]').type('Appleseed')    cy.log('submitting form') // if you really need this    cy.get('form').submit()  })})\n```\n\nNow we can put an `.only` on this test and it will run successfully irrespective of any other test. The ideal Cypress workflow is writing and iterating on a single test at a time.\n\n### 2\\. Run shared code before each test[​](#2-Run-shared-code-before-each-test \"Direct link to 2. Run shared code before each test\")\n\n*   End-to-End Test\n*   Component Test\n\n```\ndescribe('my form', () => {  beforeEach(() => {    cy.visit('/users/new')    cy.get('[data-testid=\"first-name\"]').type('Johnny')    cy.get('[data-testid=\"last-name\"]').type('Appleseed')  })  it('displays form validation', () => {    // clear out first name    cy.get('[data-testid=\"first-name\"]').clear()    cy.get('form').submit()    cy.get('[data-testid=\"errors\"]').should('contain', 'First name is required')  })  it('can submit a valid form', () => {    cy.get('form').submit()  })})\n```\n\nThis above example is ideal because now we are resetting the state between each test and ensuring nothing in previous tests leaks into subsequent ones.\n\nWe're also paving the way to make it less complicated to write multiple tests against the \"default\" state of the form. That way each test stays lean but each can be run independently and pass.\n\n## Creating \"Tiny\" Tests With A Single Assertion[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#Creating-Tiny-Tests-With-A-Single-Assertion \"Direct link to Creating-Tiny-Tests-With-A-Single-Assertion\")\n\ndanger\n\n**Anti-Pattern:** Acting like you're writing unit tests.\n\ntip\n\n**Best Practice:** Add multiple assertions and don't worry about it\n\nWe've seen many users writing this kind of code:\n\n```\ndescribe('my form', () => {  beforeEach(() => {    cy.visit('/users/new')    cy.get('[data-testid=\"first-name\"]').type('johnny')  })  it('has validation attr', () => {    cy.get('[data-testid=\"first-name\"]').should(      'have.attr',      'data-validation',      'required'    )  })  it('has active class', () => {    cy.get('[data-testid=\"first-name\"]').should('have.class', 'active')  })  it('has formatted first name', () => {    cy.get('[data-testid=\"first-name\"]')      // capitalized first letter      .should('have.value', 'Johnny')  })})\n```\n\nWhile technically this runs fine - this is really excessive, and not performant.\n\nWhy you do this pattern in component and unit tests:\n\n*   When assertions failed you relied on the test's title to know what failed\n*   You were told that adding multiple assertions was bad and accepted this as truth\n*   There was no performance penalty splitting up multiple tests because they run really fast\n\nWhy you shouldn't do this in end-to-end tests:\n\n*   Writing integration tests is not the same as unit tests\n*   You will always know (and can visually see) which assertion failed in a large test\n*   Cypress runs a series of async lifecycle events that reset state between tests\n*   Resetting tests is much slower than adding more assertions\n\nIt is common for tests in Cypress to issue 30+ commands. Because nearly every command has an implicit assertion (and can therefore fail), even by limiting your assertions you're not saving yourself anything because **any single command could implicitly fail**.\n\nHow you should rewrite those tests:\n\n```\ndescribe('my form', () => {  beforeEach(() => {    cy.visit('/users/new')  })  it('validates and formats first name', () => {    cy.get('[data-testid=\"first-name\"]')      .type('johnny')      .should('have.attr', 'data-validation', 'required')      .and('have.class', 'active')      .and('have.value', 'Johnny')  })})\n```\n\n## Using `after` Or `afterEach` Hooks[​](#Using-after-Or-afterEach-Hooks \"Direct link to Using-after-Or-afterEach-Hooks\")\n\ndanger\n\n**Anti-Pattern:** Using `after` or `afterEach` hooks to clean up state.\n\ntip\n\n**Best Practice:** Clean up state **before** tests run.\n\nWe see many of our users adding code to an `after` or `afterEach` hook in order to clean up the state generated by the current test(s).\n\nWe most often see test code that looks like this:\n\n```\ndescribe('logged in user', () => {  beforeEach(() => {    cy.login()  })  afterEach(() => {    cy.logout()  })  it('tests', ...)  it('more', ...)  it('things', ...)})\n```\n\nLet's look at why this is not really necessary.\n\n### Dangling state is your friend[​](#Dangling-state-is-your-friend \"Direct link to Dangling state is your friend\")\n\nOne of the **best** parts of Cypress is its emphasis on debuggability. Unlike other testing tools - when your tests end - you are left with your working application at the exact point where your test finished.\n\nThis is an **excellent** opportunity for you to **use** your application in the state the tests finished! This enables you to write **partial tests** that drive your application step by step, writing your test and application code at the same time.\n\nWe have built Cypress to support this use case. In fact, Cypress **does not** clean up its own internal state when the test ends. We **want** you to have dangling state at the end of the test! Things like [stubs](https://docs.cypress.io/api/commands/stub), [spies](https://docs.cypress.io/api/commands/spy), even [intercepts](https://docs.cypress.io/api/commands/intercept) are **not** removed at the end of the test. This means your application will behave identically while it is running Cypress commands or when you manually work with it after a test ends.\n\nIf you remove your application's state after each test, then you instantly lose the ability to use your application in this mode. Logging out at the end would always leave you with the same login page at the end of the test. In order to debug your application or write a partial test, you would always be left commenting out your custom `cy.logout()` command.\n\n### It's all downside with no upside[​](#Its-all-downside-with-no-upside \"Direct link to It's all downside with no upside\")\n\nFor the moment, let's assume that for some reason your application desperately **needs** that last bit of `after` or `afterEach` code to run. Let's assume that if that code is not run - all is lost.\n\nThat is fine - but even if this is the case, it should not go in an `after` or `afterEach` hook. Why? So far we have been talking about logging out, but let's use a different example. Let's use the pattern of needing to reset your database.\n\n**The idea goes like this:**\n\n> After each test I want to ensure the database is reset back to 0 records so when the next test runs, it is run with a clean state.\n\n**With that in mind you write something like this:**\n\n```\nafterEach(() => {  cy.resetDb()})\n```\n\nHere is the problem: **there is no guarantee that this code will run.**\n\nIf, hypothetically, you have written this command because it **has** to run before the next test does, then the absolute **worst place** to put it is in an `after` or `afterEach` hook.\n\nWhy? Because if you refresh Cypress in the middle of the test - you will have built up partial state in the database, and your custom `cy.resetDb()` function **will never get called**.\n\nIf this state cleanup is **truly** required, then the next test will instantly fail. Why? Because resetting the state never happened when you refreshed Cypress.\n\n### State reset should go before each test[​](#State-reset-should-go-before-each-test \"Direct link to State reset should go before each test\")\n\nThe simplest solution here is to move your reset code to **before** the test runs.\n\nCode put in a `before` or `beforeEach` hook will **always** run prior to the test - even if you refreshed Cypress in the middle of an existing one!\n\nThis is also a great opportunity to use [root level hooks in mocha](https://github.com/mochajs/mochajs.github.io/blob/master/index.md#root-level-hooks).\n\nA great place to put this configuration is in the [supportFile](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file), since it is loaded before any test files are evaluated.\n\n**Hooks you add to the root will always run on all suites!**\n\n```\n// cypress/support/e2e.js or cypress/support/component.jsbeforeEach(() => {  // now this runs prior to every test  // across all files no matter what  cy.resetDb()})\n```\n\n### Is resetting the state necessary?[​](#Is-resetting-the-state-necessary \"Direct link to Is resetting the state necessary?\")\n\nOne final question you should ask yourself is - is resetting the state even necessary? Remember, Cypress already automatically enforces [test isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) by clearing state before each test. Make sure you are not trying to clean up state that is already cleaned up by Cypress automatically.\n\nIf the state you are trying to clean lives on the server - by all means, clean that state. You will need to run these types of routines! But if the state is related to your application currently under test - you likely do not even need to clear it.\n\nThe only times you **ever** need to clean up state, is if the operations that one test runs affects another test downstream. In only those cases do you need state cleanup.\n\n#### Real World Example[​](#Real-World-Example-1 \"Direct link to Real-World-Example-1\")\n\nThe [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) resets and re-seeds its database via a custom [Cypress task](https://docs.cypress.io/api/commands/task) called `db:seed` in a `beforeEach` hook. This allows each test to start from a clean slate and a deterministic state. For example:\n\n```\n// cypress/tests/ui/auth.cy.tsbeforeEach(function () {  cy.task('db:seed')  // ...})\n```\n\nThe `db:seed` task is defined within the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function of the project, and in this case sends a request to a dedicated back end API of the app to appropriately re-seed the database.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      on('task', {        async 'db:seed'() {          // Send request to backend API to re-seed database with test data          const { data } = await axios.post(`${testDataApiEndpoint}/seed`)          return data        },        //...      })    },  },})\n```\n\nThe same practice above can be used for any type of database (PostgreSQL, MongoDB, etc.). In this example, a request is sent to a back end API, but you could also interact directly with your database with direct queries, custom libraries, etc. If you already have non-JavaScript methods of handling or interacting with your database, you can use [`cy.exec`](https://docs.cypress.io/api/commands/exec), instead of [`cy.task`](https://docs.cypress.io/api/commands/task), to execute any system command or script.\n\n## Unnecessary Waiting[​](#Unnecessary-Waiting \"Direct link to Unnecessary-Waiting\")\n\ndanger\n\n**Anti-Pattern:** Waiting for arbitrary time periods using [`cy.wait(Number)`](https://docs.cypress.io/api/commands/wait#Time).\n\ntip\n\n**Best Practice:** Use route aliases or assertions to guard Cypress from proceeding until an explicit condition is met.\n\nIn Cypress, you almost never need to use `cy.wait()` for an arbitrary amount of time. If you are finding yourself doing this, there is likely a much simpler way.\n\nLet's imagine the following examples:\n\n### Unnecessary wait for `cy.request()`[​](#Unnecessary-wait-for-cyrequest \"Direct link to Unnecessary-wait-for-cyrequest\")\n\nWaiting here is unnecessary since the [`cy.request()`](https://docs.cypress.io/api/commands/request) command will not resolve until it receives a response from your server. Adding the wait here only adds 5 seconds after the [`cy.request()`](https://docs.cypress.io/api/commands/request) has already resolved.\n\n```\ncy.request('http://localhost:8080/db/seed')cy.wait(5000) // <--- this is unnecessary\n```\n\n### Unnecessary wait for `cy.visit()`[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#Unnecessary-wait-for-cyvisit \"Direct link to Unnecessary-wait-for-cyvisit\")\n\nWaiting for this is unnecessary because the [cy.visit()](https://docs.cypress.io/api/commands/visit) resolves once the page fires its `load` event. By that time all of your assets have been loaded including javascript, stylesheets, and html.\n\n```\ncy.visit('http://localhost/8080')cy.wait(5000) // <--- this is unnecessary\n```\n\n### Unnecessary wait for `cy.get()`[​](#Unnecessary-wait-for-cyget \"Direct link to Unnecessary-wait-for-cyget\")\n\nWaiting for the [`cy.get()`](https://docs.cypress.io/api/commands/get) below is unnecessary because [`cy.get()`](https://docs.cypress.io/api/commands/get) automatically retries until the table's `tr` has a length of 2.\n\nWhenever commands have an assertion they will not resolve until their associated assertions pass. This enables you to describe the state of your application without having to worry about when it gets there.\n\n```\ncy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }])cy.get('#fetch').click()cy.wait(4000) // <--- this is unnecessarycy.get('table tr').should('have.length', 2)\n```\n\nAlternatively a better solution to this problem is by waiting explicitly for an aliased route.\n\n```\ncy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }]).as(  'getUsers')cy.get('[data-testid=\"fetch-users\"]').click()cy.wait('@getUsers') // <--- wait explicitly for this route to finishcy.get('table tr').should('have.length', 2)\n```\n\n## Running Tests Intelligently[​](#Running-Tests-Intelligently \"Direct link to Running-Tests-Intelligently\")\n\nAs your test suite grows and takes longer to run, you may find yourself hitting performance bottlenecks on your CI system. We recommend integrating your source control system with your test suite such that merges are blocked until all your Cypress tests have passed. The downside of this is that longer test execution times slow the velocity at which branches may be merged and features may be shipped. This issue is compounded further if you have dependent chains of branches waiting to be merged.\n\nOne solution to this problem is **Smart Orchestration** with Cypress Cloud. Using a combination of [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization), [load balancing](https://docs.cypress.io/guides/cloud/smart-orchestration/load-balancing#Balance-strategy), [Auto Cancellation](https://docs.cypress.io/guides/cloud/smart-orchestration/run-cancellation), and [Spec Prioritization](https://docs.cypress.io/guides/cloud/smart-orchestration/spec-prioritization), Smart Orchestration maximizes your available compute resources & minimizes waste.\n\n## Web Servers[​](#Web-Servers \"Direct link to Web-Servers\")\n\ndanger\n\n**Anti-Pattern:** Trying to start a web server from within Cypress scripts with [`cy.exec()`](https://docs.cypress.io/api/commands/exec) or [`cy.task()`](https://docs.cypress.io/api/commands/task).\n\ntip\n\n**Best Practice:** Start a web server prior to running Cypress.\n\nWe do NOT recommend trying to start your back end web server from within Cypress.\n\nAny command run by [cy.exec()](https://docs.cypress.io/api/commands/exec) or [cy.task()](https://docs.cypress.io/api/commands/task) has to exit eventually. Otherwise, Cypress will not continue running any other commands.\n\nTrying to start a web server from [cy.exec()](https://docs.cypress.io/api/commands/exec) or [cy.task()](https://docs.cypress.io/api/commands/task) causes all kinds of problems because:\n\n*   You have to background the process\n*   You lose access to it via terminal\n*   You don't have access to its `stdout` or logs\n*   Every time your tests run, you'd have to work out the complexity around starting an already running web server.\n*   You would likely encounter constant port conflicts\n\n**Why can't I shut down the process in an `after` hook?**\n\nBecause there is no guarantee that code running in an `after` will always run.\n\nWhile working in the Cypress Test Runner you can always restart / refresh while in the middle of a test. When that happens, code in an `after` won't execute.\n\n**What should I do then?**\n\nStart your web server before running Cypress and kill it after it completes.\n\nAre you trying to run in CI?\n\nWe have [examples showing you how to start and stop your web server](https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server).\n\n## Setting a Global `baseUrl`[​](#Setting-a-Global-baseUrl \"Direct link to Setting-a-Global-baseUrl\")\n\ndanger\n\n**Anti-Pattern:** Using [cy.visit()](https://docs.cypress.io/api/commands/visit) without setting a `baseUrl`.\n\nBy adding a [baseUrl](https://docs.cypress.io/guides/references/configuration#Global) in your configuration Cypress will attempt to prefix the `baseUrl` any URL provided to commands like [cy.visit()](https://docs.cypress.io/api/commands/visit) and [cy.request()](https://docs.cypress.io/api/commands/request) that are not fully qualified domain name (FQDN) URLs.\n\nThis allows you to omit hard-coding fully qualified domain name (FQDN) URLs in commands. For example,\n\n```\ncy.visit('http://localhost:8080/index.html')\n```\n\ncan be shortened to\n\nNot only does this create tests that can easily switch between domains, i.e. running a dev server on `http://localhost:8080` vs a deployed production server domain, but adding a `baseUrl` can also save some time during the initial startup of your Cypress tests.\n\nWhen you start running your tests, Cypress does not know the url of the app you plan to test. So, Cypress initially opens on `https://localhost` + a random port.\n\n### Without `baseUrl` set, Cypress loads main window in `localhost` + random port[​](#Without-baseUrl-set-Cypress-loads-main-window-in-localhost--random-port \"Direct link to Without-baseUrl-set-Cypress-loads-main-window-in-localhost--random-port\")\n\n![Url address shows localhost:53927/__/#tests/integration/organizations/list_spec.coffee](https://docs.cypress.io/img/guides/references/cypress-loads-in-localhost-and-random-port.png)\n\nAs soon as it encounters a [cy.visit()](https://docs.cypress.io/api/commands/visit), Cypress then switches to the url of the main window to the url specified in your visit. This can result in a 'flash' or 'reload' when your tests first start.\n\nBy setting the `baseUrl`, you can avoid this reload altogether. Cypress will load the main window in the `baseUrl` you specified as soon as your tests start.\n\n### Cypress configuration file[​](#Cypress-configuration-file \"Direct link to Cypress configuration file\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    baseUrl: 'http://localhost:8484',  },})\n```\n\n### With `baseUrl` set, Cypress loads main window in `baseUrl`[​](#With-baseUrl-set-Cypress-loads-main-window-in-baseUrl \"Direct link to With-baseUrl-set-Cypress-loads-main-window-in-baseUrl\")\n\n![Url address bar shows localhost:8484/__tests/integration/organizations/list_spec.coffee](https://docs.cypress.io/img/guides/references/cypress-loads-window-in-base-url-localhost.png)\n\nHaving a `baseUrl` set gives you the added bonus of seeing an error if your server is not running during `cypress open` at the specified `baseUrl`.\n\n![Cypress Launchpad with warning about how Cypress could not verify server set as the baseUrl is running](https://docs.cypress.io/img/guides/references/cypress-ensures-baseUrl-server-is-running.png)\n\nWe also display an error if your server is not running at the specified `baseUrl` during `cypress run` after several retries.\n\n![The terminal warns and retries when the url at your baseUrl is not running](https://docs.cypress.io/img/guides/references/cypress-verifies-server-is-running-during-cypress-run.png)\n\n### Usage of `baseUrl` in depth[​](#Usage-of-baseUrl-in-depth \"Direct link to Usage-of-baseUrl-in-depth\")\n\nThis [short video](https://www.youtube.com/watch?v=f5UaXuAc52c) explains in depth how to use `baseUrl` correctly.",
  "title": "Best Practices | Cypress Documentation",
  "description": "Real World Practices",
  "languageCode": "en"
}]