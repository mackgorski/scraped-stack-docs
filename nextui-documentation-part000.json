[
  {
    "url": "https://nextui.org/docs/guide/introduction",
    "markdown": "# Introduction | NextUI - Beautiful, fast and modern React UI Library\n\nWelcome to the NextUI documentation!\n\n![NextUI banner](https://nextui.org/_next/image?url=https%3A%2F%2Fnextui.org%2Fnextui-banner.png&w=1920&q=100)\n\n## [What is NextUI?](#what-is-nextui)\n\nNextUI is a UI library for React that helps you build beautiful and accessible user interfaces. Created on top of [Tailwind CSS](https://tailwindcss.com/) and [React Aria](https://react-spectrum.adobe.com/react-aria/index.html).\n\nNextUI's primary goal is to streamline the development process, offering a beautiful and adaptable system design for an enhanced user experience.\n\n* * *\n\n## [FAQ](#faq)\n\nNo, NextUI is an independent community project and is not related to Vercel.\n\n### [How is NextUI different from TailwindCSS?](#how-is-nextui-different-from-tailwindcss)\n\n*   **TailwindCSS**:\n    \n    Tailwind CSS is a CSS Framework that provides atomic CSS classes to help you style components, leaving you to handle lots of other things like accessibility, component composition, keyboard navigation, style overrides, etc.\n    \n*   **NextUI**:\n    \n    NextUI is a UI library for React that combines the power of TailwindCSS with React Aria to provide complete components (logic and styles) for building accessible and customizable user interfaces. Since NextUI uses TailwindCSS as its style engine, you can use all TailwindCSS classes within your NextUI components, ensuring optimal compiled CSS size.\n    \n\n### [How is NextUI different from TailwindCSS components libraries?](#how-is-nextui-different-from-tailwindcss-components-libraries)\n\nTailwindCSS components libraries such as [TailwindUI](https://tailwindui.com/), [Flowbite](https://flowbite.com/), or [Preline](https://preline.co/), just to name a few, only offer a curated selection of TailwindCSS classes to style your components. They don't provide any React specific components, logic, props, composition, or accessibility features.  \n\nIn contrast to these libraries, NextUI is a complete UI library that provides a set of accessible and customizable components, hooks, and utilities.\n\n### [How NextUI deals with TailwindCSS classes conflicts?](#how-nextui-deals-with-tailwindcss-classes-conflicts)\n\nWe created a TailwindCSS utility library called [tailwind-variants](https://www.tailwind-variants.org/) that automatically handles TailwindCSS class conflicts. This ensures your custom classes will consistently override the default ones, eliminating any duplication.\n\n### [Does NextUI use runtime CSS?](#does-nextui-use-runtime-css)\n\nNo. As NextUI uses TailwindCSS as its style engine, it generates CSS at build time, eliminating the need for runtime CSS. This means that NextUI is fully compatible with the latest React and Next.js versions.\n\n### [Does NextUI support TypeScript?](#does-nextui-support-typescript)\n\nYes, NextUI is written in TypeScript and has full support for it.\n\n### [Can I use NextUI with other front-end frameworks or libraries, such as Vue or Angular?](#can-i-use-nextui-with-other-front-end-frameworks-or-libraries-such-as-vue-or-angular)\n\nNo, NextUI is specifically designed for React as it is built on top of React Aria. However, you can still use the NextUI components styling part with other frameworks or libraries.\n\n### [Why does NextUI use Framer Motion?](#why-does-nextui-use-framer-motion)\n\nWe use [Framer Motion](https://www.framer.com/motion) to animate some components due to the complexity of the animations and their physics-based nature. Framer Motion allows us to handle these animations in a more straightforward and performant way. In addition, it is well tested and production ready.\n\n* * *\n\nWe're excited to see the community adopt NextUI, raise issues, and provide feedback. Whether it's a feature request, bug report, or a project to showcase, please get involved!\n\n## [Contributing](#contributing)\n\nPRs on NextUI are always welcome, please see our [contribution guidelines](https://github.com/nextui-org/nextui/blob/main/CONTRIBUTING.md) to learn how you can contribute to this project.",
    "title": "Introduction | NextUI - Beautiful, fast and modern React UI Library",
    "description": "NextUI is a UI library for React that helps you build beautiful and accessible user interfaces. Created on top of Tailwind CSS and React Aria.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs",
    "markdown": "# Introduction | NextUI - Beautiful, fast and modern React UI Library\n\nWelcome to the NextUI documentation!\n\n![NextUI banner](https://nextui.org/_next/image?url=https%3A%2F%2Fnextui.org%2Fnextui-banner.png&w=1920&q=100)\n\n## [What is NextUI?](#what-is-nextui)\n\nNextUI is a UI library for React that helps you build beautiful and accessible user interfaces. Created on top of [Tailwind CSS](https://tailwindcss.com/) and [React Aria](https://react-spectrum.adobe.com/react-aria/index.html).\n\nNextUI's primary goal is to streamline the development process, offering a beautiful and adaptable system design for an enhanced user experience.\n\n* * *\n\n## [FAQ](#faq)\n\nNo, NextUI is an independent community project and is not related to Vercel.\n\n### [How is NextUI different from TailwindCSS?](#how-is-nextui-different-from-tailwindcss)\n\n*   **TailwindCSS**:\n    \n    Tailwind CSS is a CSS Framework that provides atomic CSS classes to help you style components, leaving you to handle lots of other things like accessibility, component composition, keyboard navigation, style overrides, etc.\n    \n*   **NextUI**:\n    \n    NextUI is a UI library for React that combines the power of TailwindCSS with React Aria to provide complete components (logic and styles) for building accessible and customizable user interfaces. Since NextUI uses TailwindCSS as its style engine, you can use all TailwindCSS classes within your NextUI components, ensuring optimal compiled CSS size.\n    \n\n### [How is NextUI different from TailwindCSS components libraries?](#how-is-nextui-different-from-tailwindcss-components-libraries)\n\nTailwindCSS components libraries such as [TailwindUI](https://tailwindui.com/), [Flowbite](https://flowbite.com/), or [Preline](https://preline.co/), just to name a few, only offer a curated selection of TailwindCSS classes to style your components. They don't provide any React specific components, logic, props, composition, or accessibility features.  \n\nIn contrast to these libraries, NextUI is a complete UI library that provides a set of accessible and customizable components, hooks, and utilities.\n\n### [How NextUI deals with TailwindCSS classes conflicts?](#how-nextui-deals-with-tailwindcss-classes-conflicts)\n\nWe created a TailwindCSS utility library called [tailwind-variants](https://www.tailwind-variants.org/) that automatically handles TailwindCSS class conflicts. This ensures your custom classes will consistently override the default ones, eliminating any duplication.\n\n### [Does NextUI use runtime CSS?](#does-nextui-use-runtime-css)\n\nNo. As NextUI uses TailwindCSS as its style engine, it generates CSS at build time, eliminating the need for runtime CSS. This means that NextUI is fully compatible with the latest React and Next.js versions.\n\n### [Does NextUI support TypeScript?](#does-nextui-support-typescript)\n\nYes, NextUI is written in TypeScript and has full support for it.\n\n### [Can I use NextUI with other front-end frameworks or libraries, such as Vue or Angular?](#can-i-use-nextui-with-other-front-end-frameworks-or-libraries-such-as-vue-or-angular)\n\nNo, NextUI is specifically designed for React as it is built on top of React Aria. However, you can still use the NextUI components styling part with other frameworks or libraries.\n\n### [Why does NextUI use Framer Motion?](#why-does-nextui-use-framer-motion)\n\nWe use [Framer Motion](https://www.framer.com/motion) to animate some components due to the complexity of the animations and their physics-based nature. Framer Motion allows us to handle these animations in a more straightforward and performant way. In addition, it is well tested and production ready.\n\n* * *\n\nWe're excited to see the community adopt NextUI, raise issues, and provide feedback. Whether it's a feature request, bug report, or a project to showcase, please get involved!\n\n## [Contributing](#contributing)\n\nPRs on NextUI are always welcome, please see our [contribution guidelines](https://github.com/nextui-org/nextui/blob/main/CONTRIBUTING.md) to learn how you can contribute to this project.",
    "title": "Introduction | NextUI - Beautiful, fast and modern React UI Library",
    "description": "NextUI is a UI library for React that helps you build beautiful and accessible user interfaces. Created on top of Tailwind CSS and React Aria.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/guide/installation",
    "markdown": "# Installation | NextUI - Beautiful, fast and modern React UI Library\n\nRequirements:\n\n* * *\n\n## [Automatic Installation](#automatic-installation)\n\nUsing the CLI is now the easiest way to start a NextUI project. You can initialize your project and add components directly via the CLI:\n\nnpm install -g nextui-cli\n\nnextui init my-nextui-app\n\nYou will be prompted to configure your project:\n\n◇  Select a template (Enter to select)\n\n│  ● App (A Next.js 14 with app directory template pre-configured with NextUI (v2) and Tailwind CSS.)\n\n│  ○ Pages (A Next.js 14 with pages directory template pre-configured with NextUI (v2) and Tailwind CSS.)\n\n│  ○ Vite (A Vite template pre-configured with NextUI (v2) and Tailwind CSS.)\n\nInstall the dependencies to start the local server:\n\ncd my-nextui-app && npm install\n\nStart the local server:\n\nOnce your NextUI project is ready to develop, you can add individual components using the CLI. For example, to add a button component:\n\nThis command adds the Button component to your project and manages all related dependencies.\n\nYou can also add multiple components at once:\n\nOr you can add the main library `@nextui-org/react` by running the following command:\n\nIf you leave out the component name, the CLI will prompt you to select the components you want to add.\n\n? Which components would you like to add? › - Space to select. Return to submit\n\nInstructions:\n\n    ↑/↓: Highlight option\n\n    ←/→/\\[space\\]: Toggle selection\n\n    \\[a,b,c\\]/delete: Filter choices\n\n    enter/return: Complete answer\n\nFiltered results for: Enter something to filter\n\n◯  accordion\n\n◯  autocomplete\n\n◯  avatar\n\n◯  badge\n\n◯  breadcrumbs\n\n◉  button\n\n◯  card\n\n◯  checkbox\n\n◯  chip\n\n◯  code\n\n## [Manual Installation](#manual-installation)\n\nIf you prefer not to use the CLI, you may try either global installation or individual installation to set up NextUI in your project:\n\n### [Global Installation](#global-installation)\n\nThe easiest way to get started with NextUI is to use the global installation, which means that all the components are imported from a single package.\n\nFollow the steps below to install all NextUI components:\n\n#### [Install Packages](#install-packages)\n\nTo install NextUI, run one of the following commands in your terminal:\n\n#### [Hoisted Dependencies Setup](#hoisted-dependencies-setup)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n#### [Tailwind CSS Setup](#tailwind-css-setup)\n\nNextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official [installation guide](https://tailwindcss.com/docs/installation) to install Tailwind CSS. Then you need to add the following code to your `tailwind.config.js` file:\n\n> **Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n\n// tailwind.config.js\n\nconst {nextui} \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\",\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\],\n\n};\n\n#### [Provider Setup](#provider-setup)\n\nIt is essential to add the `NextUIProvider` at the `root` of your application.\n\nimport \\* as React from \"react\";\n\n// 1. import \\`NextUIProvider\\` component\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nfunction App() {\n\n  // 2. Wrap NextUIProvider at the root of your app\n\n  return (\n\n    <NextUIProvider\\>\n\n      <YourApplication />\n\n    </NextUIProvider\\>\n\n  );\n\n}\n\n### [Individual Installation](#individual-installation)\n\nNextUI is also available as individual packages. You can install each package separately. This is useful if you want to reduce the size of your CSS bundle as it will only include styles for the components you're actually using.\n\n> **Note**: JavaScript bundle size will not change due to tree shaking support in NextUI.\n\nFollow the steps below to install each package separately:\n\n#### [Install Core Packages](#install-core-packages)\n\nAlthough you can install each package separately, you need to install the core packages first to ensure that all components work correctly.\n\nRun one of the following commands in your terminal to install the core packages:\n\n#### [Install Component](#install-component)\n\nNow, let's install the component you want to use. For example, if you want to use the [Button](https://nextui.org/docs/components/button) component, you need to run one of the following commands in your terminal:\n\n#### [Hoisted Dependencies Setup](#hoisted-dependencies-setup-1)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n#### [Tailwind CSS Setup](#tailwind-css-setup-1)\n\nTailwindCSS setup changes a bit when you use individual packages. You only need to add the styles of the components you're using to your `tailwind.config.js` file. For example, for the [Button](https://nextui.org/docs/components/button) component, you need to add the following code to your `tailwind.config.js` file:\n\n// tailwind.config.js\n\nconst {nextui} \\= require(\"@nextui-org/theme\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  content: \\[\n\n    // single component styles\n\n    \"./node\\_modules/@nextui-org/theme/dist/components/button.js\",\n\n    // or you can use a glob pattern (multiple component styles)\n\n    './node\\_modules/@nextui-org/theme/dist/components/(button|snippet|code|input).js'\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\],\n\n};\n\n#### [Provider Setup](#provider-setup-1)\n\nIt is essential to add the `NextUIProvider` at the `root` of your application.\n\nimport \\* as React from \"react\";\n\n// 1. import \\`NextUIProvider\\` component\n\nimport {NextUIProvider} from \"@nextui-org/system\";\n\nfunction App() {\n\n  // 2. Wrap NextUIProvider at the root of your app\n\n  return (\n\n    <NextUIProvider\\>\n\n      <YourApplication />\n\n    </NextUIProvider\\>\n\n  );\n\n}\n\n#### [Use the Component](#use-the-component)\n\nNow, you can use the component you installed in your application:\n\nimport \\* as React from \"react\";\n\nimport {Button} from \"@nextui-org/button\";\n\nfunction App() {\n\n  return (\n\n    <Button\\>Press me</Button\\>\n\n  );\n\n}\n\n> Version 2 is only compatible with React 18 or later. If you are using React 17 or earlier, please use [version 1 of NextUI](https://v1.nextui.org/docs/getting-started).\n\n## [Framework Guides](#framework-guides)\n\nNextUI UI is compatible with your preferred framework. We have compiled comprehensive, step-by-step tutorials for the following frameworks:",
    "title": "Installation | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Get started with NextUI in the official documentation, and learn more about all our features!",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/guide/design-principles",
    "markdown": "# Design Principles | NextUI - Beautiful, fast and modern React UI Library\n\nThe development of NextUI has been guided by a set of specific design and API principles. These principles serve as the foundation for our library and play a crucial role in ensuring the efficiency, effectiveness, and user-friendliness of the components we offer.\n\n### [Simplicity and Usability](#simplicity-and-usability)\n\nSimplicity is the ultimate sophistication. At NextUI, we believe in delivering simple and intuitive components. Our design process centers around the user, ensuring that we deliver tools that are easy to understand, configure, and implement, regardless of a developer's expertise level.\n\n### [Modular Design](#modular-design)\n\nEach component in NextUI is designed as a standalone module. This modular approach allows developers to import and use only what they need, leading to lighter applications and faster load times.\n\n### [Customization and Flexibility](#customization-and-flexibility)\n\nNextUI is designed with customization at its core. Whether it's theming or overriding styles, we provide developers with comprehensive control over the aesthetics of the components. Our integration with the [TailwindCSS](https://tailwindcss.com/) and [Tailwind Variants](https://tailwind-variants.org/) library and simplifies the customization process and enables an extensive range of design possibilities.\n\n### [Consistent API](#consistent-api)\n\nNextUI maintains a consistent API across all components. We've ensured that common attributes function identically across different components, allowing developers to anticipate component behavior and thus reducing the learning curve.\n\n### [Accessibility](#accessibility)\n\nWe are committed to ensuring that our components are accessible to all users. In the development of NextUI, accessibility standards and guidelines have been adhered to, ensuring our components work effectively with assistive technologies. For further information on how to make your web applications more accessible, refer to [React Spectrum](https://react-spectrum.adobe.com/react-aria/index.html).\n\n### [Component Slots](#component-slots)\n\nTo provide maximum flexibility, many NextUI components have `slots`, allowing developers to inject custom styles or content in specific areas of a component. Each slot can be individually styled, offering granular control over the appearance and behavior of the component.\n\nThrough these principles, we aim to make NextUI an effective, efficient, and enjoyable tool for developers to use. As we continue to expand and enhance NextUI, these guiding principles will remain central to our design and development processes.",
    "title": "Design Principles | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Understand the fundamental design and API decisions behind the development of NextUI.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/guide/routing",
    "markdown": "# Routing | NextUI - Beautiful, fast and modern React UI Library\n\nNextUI Components such as [Tabs](https://nextui.org/docs/components/tabs), [Listbox](https://nextui.org/docs/components/listbox), [Dropdown](https://nextui.org/docs/components/dropdown) and many others offer the flexibility to be rendered as HTML links. Explore this page to learn how to integrate them with client side routing.\n\n## [Introduction](#introduction)\n\nBy default, links perform native browser navigation when they are interacted with. However, many apps and frameworks use client side routers to avoid a full page reload when navigating between pages. The `NextUIProvider` component configures all NextUI components within it to navigate using the client side router you provide.\n\nSet this up once in the root of your app, and any NextUI component with the href prop will automatically navigate using your router.\n\n### [NextUIProvider Setup](#nextuiprovider-setup)\n\nThe `NextUIProvider` accepts a prop called `navigate`. This should be set to a function received from your router for performing a client side navigation programmatically. The following example shows the general pattern. Framework-specific examples are shown below.\n\nimport \\* as React from \"react\";\n\n// 1. import \\`NextUIProvider\\` component\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nfunction App() {\n\n  const navigate \\= useNavigateFromYourRouter();\n\n  // 2. Add the \\`navigate\\` function to the \\`NextUIProvider\\`\n\n  return (\n\n    <NextUIProvider navigate\\={navigate}\\>\n\n      <YourApplication />\n\n    </NextUIProvider\\>\n\n  );\n\n}\n\n### [Next.js](#nextjs)\n\n#### [App Router](#app-router)\n\nGo to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and add the `useRouter` hook from `next/navigation`, it returns a router object that can be used to perform navigation.\n\n#### [Add the `useRouter`](#add-the-userouter)\n\n// app/providers.tsx\n\n'use client'\n\nimport {NextUIProvider} from '@nextui-org/react';\n\nimport {useRouter} from 'next/navigation'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n\n  const router \\= useRouter();\n\n  return (\n\n    <NextUIProvider navigate\\={router.push}\\>\n\n      {children}\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\n#### [Add Provider to Root](#add-provider-to-root)\n\nNow, Go to your `root` layout page and wrap it with the `NextUIProvider`:\n\n// app/layout.tsx\n\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <html lang\\=\"en\" className\\='dark'\\>\n\n      <body\\>\n\n        <Providers\\>\n\n          {children}\n\n        </Providers\\>\n\n      </body\\>\n\n    </html\\>\n\n  );\n\n}\n\n> **Note**: Skip this step if you already set up the `NextUIProvider` in your app.\n\n#### [Pages Router](#pages-router)\n\nGo to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and add the`useRouter` hook from `next/router`, it returns a router object that can be used to perform navigation.\n\n// pages/\\_app.tsx\n\nimport type { AppProps } from 'next/app';\n\nimport {NextUIProvider} from '@nextui-org/react';\n\nimport {useRouter} from 'next/router';\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n\n  const router \\= useRouter();\n\n  return (\n\n    <NextUIProvider navigate\\={router.push}\\>\n\n      <Component {...pageProps} />\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\nexport default MyApp;\n\n### [React Router](#react-router)\n\nThe `useNavigate` hook from `react-router-dom` returns a `navigate` function that can be used to perform navigation.\n\nGo to the `App` file commonly called `App.jsx` or `App.tsx`, add the `useNavigate` hook and pass the `navigate` function to the `NextUIProvider`:\n\n// App.tsx or App.jsx\n\nimport {BrowserRouter, useNavigate} from 'react-router-dom';\n\nimport {NextUIProvider} from '@nextui-org/react';\n\nfunction App() {\n\n  const navigate \\= useNavigate();\n\n  return (\n\n    <NextUIProvider navigate\\={navigate}\\>\n\n      {/\\* Your app here... \\*/}\n\n      <Routes\\>\n\n        <Route path\\=\"/\" element\\={<HomePage />} />\n\n        {/\\* ... \\*/}\n\n      </Routes\\>\n\n    </NextUIProvider\\>\n\n  );\n\n}\n\n// main.tsx or main.jsx\n\nReactDOM.createRoot(document.getElementById('root')).render(\n\n  <React.StrictMode\\>\n\n    <BrowserRouter\\>\n\n      <App />\n\n    </BrowserRouter\\>\n\n  </React.StrictMode\\>,\n\n)\n\nEnsure that the component that calls `useNavigate` and renders `NextUIProvider` is inside the router component (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>` element should also be defined inside `NextUIProvider` so that links inside the rendered routes have access to the router.\n\n### [Remix](#remix)\n\nRemix uses React Router under the hood, so the same `useNavigate` hook described above also works in Remix apps. `NextUIProvider` should be rendered at the `root` of each page that includes NextUI components, or in `app/root.tsx` to add it to all pages. See the [Remix docs](https://remix.run/docs/en/main/file-conventions/root) for more details.\n\n// app/root.tsx\n\nimport {useNavigate, Outlet} from '@remix-run/react';\n\nimport {NextUIProvider} from '@nextui-org/react';\n\nexport default function App() {\n\n  const navigate \\= useNavigate();\n\n  return (\n\n    <html lang\\=\"en\"\\>\n\n      <head\\>\n\n        {/\\* ... \\*/}\n\n      </head\\>\n\n      <body\\>\n\n        <NextUIProvider navigate\\={navigate}\\>\n\n          <Outlet />\n\n        </NextUIProvider\\>\n\n        {/\\* ... \\*/}\n\n      </body\\>\n\n    </html\\>\n\n  );\n\n}\n\n### [Usage examples](#usage-examples)\n\nNow that you have set up the `NextUIProvider` in your app, you can use the `href` prop in the `Tabs`, `Listbox` and `Dropdown` items to navigate between pages.\n\nThe [Link](https://nextui.org/docs/components/link) component will also use the `navigate` function from the `NextUIProvider` to navigate between pages.\n\nimport {\n\n  Tabs,\n\n  Tab,\n\n  Listbox,\n\n  ListboxItem,\n\n  Dropdown,\n\n  DropdownTrigger,\n\n  DropdownMenu,\n\n  DropdownItem,\n\n  Button,\n\n  Link,\n\n} from \"@nextui-org/react\";\n\nfunction App() {\n\n  return (\n\n    <\\>\n\n      <Tabs aria-label\\=\"Navigation\"\\>\n\n        <Tab key\\=\"home\" href\\=\"/home\"\\>Home</Tab\\>\n\n        <Tab key\\=\"about\" href\\=\"/about\"\\>About</Tab\\>\n\n      </Tabs\\>\n\n      <Listbox aria-label\\=\"Navigation\"\\>\n\n        <ListboxItem key\\=\"home\" href\\=\"/home\"\\>Home</ListboxItem\\>\n\n        <ListboxItem key\\=\"about\" href\\=\"/about\"\\>About</ListboxItem\\>\n\n      </Listbox\\>\n\n      <Dropdown\\>\n\n        <DropdownTrigger\\>\n\n          <Button\\>Open</Button\\>\n\n        </DropdownTrigger\\>\n\n        <DropdownMenu aria-label\\=\"Navigation\"\\>\n\n          <DropdownItem key\\=\"home\" href\\=\"/home\"\\>Home</DropdownItem\\>\n\n          <DropdownItem key\\=\"about\" href\\=\"/about\"\\>About</DropdownItem\\>\n\n        </DropdownMenu\\>\n\n      </Dropdown\\>\n\n      <Link href\\=\"/home\"\\>Home</Link\\>\n\n      <Link href\\=\"/about\"\\>About</Link\\>\n\n    </\\>\n\n  );\n\n}",
    "title": "Routing | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Learn how to integrate client side routing into your NextUI application.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/guide/cli",
    "markdown": "# CLI | NextUI - Beautiful, fast and modern React UI Library\n\nThe CLI offers a comprehensive suite of commands to initialize, manage, and improve your NextUI projects. It enables you to `add`, `remove`, or `upgrade` individual components, assess the health of your project, and more.\n\n## [Installation](#installation)\n\nRequirements:\n\n### [Global Installation](#global-installation)\n\nTo install the `CLI` globally, execute one of the following commands in your terminal:\n\n### [Without Installation](#without-installation)\n\nAlternatively, you can use the `CLI` without a global installation by employing `npx`:\n\n## [Quick Start](#quick-start)\n\nOnce the `CLI` is installed, run the following command to display available commands:\n\nThis will produce the following help output:\n\nNextUI CLI <version\\>\n\nA command line tool for seamless integration with NextUI\n\nUsage: nextui \\[command\\]\n\nOptions:\n\n  -v, --version  Show the version number\n\n  --no-cache     Disable cache, by default data will be cached for 30m after the first request\n\n  -h, --help     Display help for commands\n\nCommands:\n\n  init \\[options\\] \\[projectName\\]       Start a new NextUI project\n\n  add \\[options\\] \\[components...\\]      Add NextUI components to your project\n\n  upgrade \\[options\\] \\[components...\\]  Update NextUI components to the latest versions\n\n  remove \\[options\\] \\[components...\\]   Remove NextUI components from your project\n\n  list \\[options\\]                     Show details of installed components\n\n  env \\[options\\]                      Display debug information about the local environment\n\n  doctor \\[options\\]                   Diagnose problems in your project\n\n  help \\[command\\]                     Get help on a specific command\n\n## [init](#init)\n\nInitialize a new NextUI project using the `init` command. This sets up your project with the necessary configurations.\n\nnextui init my-nextui-app\n\nYou will be prompted to configure your project:\n\n┌  Create a new project\n\n│\n\n◇  Select a template (Enter to select)\n\n│  ● App (A Next.js 14 with app directory template pre-configured with NextUI (v2) and Tailwind CSS.)\n\n│  ○ Pages (A Next.js 14 with pages directory template pre-configured with NextUI (v2) and Tailwind CSS.)\n\n│  ○ Vite (A Vite template pre-configured with NextUI (v2) and Tailwind CSS.)\n\n│\n\n◇  New project name (Enter to skip with default name)\n\n│  my-nextui-app\n\n│\n\n◇  Select a package manager (Enter to select)\n\n│  ● npm\n\n│  ○ yarn\n\n│  ○ pnpm\n\n│  ○ bun\n\n│\n\n◇  Template created successfully!\n\n│\n\n◇  Next steps ───────╮\n\n│                    │\n\n│  cd my-nextui-app  │\n\n│  npm install       │\n\n│                    │\n\n├────────────────────╯\n\n│\n\n└  🚀 Get started with npm run dev\n\nInstall the dependencies to start the local server:\n\ncd my-nextui-app && npm install\n\nStart the local server:\n\n## [add](#add)\n\nAdd components to your NextUI project with the add command. This command manages component dependencies and updates your project configurations.\n\nWithout specifying a specific component:\n\nYou will be prompted to select the components you wish to add:\n\n? Which components would you like to add? › - Space to select. Return to submit\n\nInstructions:\n\n    ↑/↓: Highlight option\n\n    ←/→/\\[space\\]: Toggle selection\n\n    \\[a,b,c\\]/delete: Filter choices\n\n    enter/return: Complete answer\n\nFiltered results for: Enter something to filter\n\n◯  accordion\n\n◯  autocomplete\n\n◯  avatar\n\n◯  badge\n\n◯  breadcrumbs\n\n◉  button\n\n◯  card\n\n◯  checkbox\n\n◯  chip\n\n◯  code\n\nTo add a specific component:\n\nYou will see an output confirming the addition of the component:\n\nAdding the required dependencies: @nextui-org/button\n\nTailwind CSS settings have been updated in: /project-path/tailwind.config.js\n\n✅ Components added successfully\n\n## [upgrade](#upgrade)\n\nUpgrade specific NextUI components within your project using the upgrade command to ensure they are up to date.\n\nYou will be asked to confirm the upgrade:\n\n╭───────────────────────── Component ─────────────────────────╮\n\n│  @nextui-org/button              ^2.0.11  -\\>  ^2.0.31       │\n\n╰─────────────────────────────────────────────────────────────╯\n\nRequired min version: @nextui-org/theme\\>=2.1.0, tailwindcss\\>=3.4.0\n\n╭───────────────────── PeerDependencies ─────────────────────╮\n\n│  @nextui-org/theme               2.0.1    -\\>  2.1.0        │\n\n│  tailwindcss                     ^3.2.3   -\\>  ^3.4.0       │\n\n╰────────────────────────────────────────────────────────────╯\n\n2 minor, 1 patch\n\n? Would you like to proceed with the upgrade? › - Use arrow-keys. Return to submit.\n\n❯   Yes\n\n    No\n\nUpon confirmation, the command will execute and provide an output similar to:\n\n✅ Upgrade complete. All components are up to date.\n\n## [remove](#remove)\n\nRemove components from your NextUI project with the remove command. This helps in managing the project's component structure and dependencies.\n\nA confirmation prompt will be displayed:\n\n❗️ Components slated for removal:\n\n╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n\n│   Package              │   Version              │   Status   │   Docs                                        │\n\n│──────────────────────────────────────────────────────────────────────────────────────────────────────────────│\n\n│   @nextui-org/button   │   2.0.27 🚀latest      │   stable   │   https://nextui.org/docs/components/button   │\n\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n? Confirm removal of these components: › - Use arrow-keys. Return to submit.\n\n❯   Yes\n\n    No\n\nFollowing confirmation, the output will indicate successful removal:\n\n✅ Successfully removed the specified NextUI components: @nextui-org/button\n\n## [list](#list)\n\nList all installed NextUI components in your project with the list command. This provides a clear overview of what is currently included in your project.\n\nThe output will detail each component:\n\nCurrent installed components:\n\n╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n\n│   Package                    │   Version              │   Status    │   Docs                                              │\n\n│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│\n\n│   @nextui-org/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://nextui.org/docs/components/autocomplete   │\n\n│   @nextui-org/badge          │   2.0.24 🚀latest      │   stable    │   https://nextui.org/docs/components/badge          │\n\n│   @nextui-org/button         │   2.0.27 🚀latest      │   stable    │   https://nextui.org/docs/components/button         │\n\n│   @nextui-org/chip           │   2.0.25 🚀latest      │   stable    │   https://nextui.org/docs/components/chip           │\n\n╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n## [doctor](#doctor)\n\nDiagnose and resolve issues within your project using the doctor command. This ensures your project's health and proper configuration.\n\nDepending on your project's status, you might see:\n\n✅ Your project has no detected issues.\n\nOr, if issues are detected:\n\n❌ Your project has 1 issue that requires attention\n\n## [env](#env)\n\nDisplay detailed information about your project's environment settings using the env command. This includes system, dependencies, and configuration details.\n\nThe output will reflect your current environment setup:\n\nCurrent installed components:\n\n╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n\n│   Package                    │   Version              │   Status    │   Docs                                              │\n\n│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│\n\n│   @nextui-org/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://nextui.org/docs/components/autocomplete   │\n\n│   @nextui-org/badge          │   2.0.24 🚀latest      │   stable    │   https://nextui.org/docs/components/badge          │\n\n│   @nextui-org/button         │   2.0.27 🚀latest      │   stable    │   https://nextui.org/docs/components/button         │\n\n│   @nextui-org/chip           │   2.0.25 🚀latest      │   stable    │   https://nextui.org/docs/components/chip           │\n\n╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\nEnvironment Info:\n\n  System:\n\n    OS: darwin\n\n    CPU: arm64\n\n  Binaries:\n\n    Node: v18.18.2\n\n## [API Reference](#api-reference)\n\nExplore the complete CLI commands and features in the [API References](https://nextui.org/docs/api-references/cli-api).\n\nFor updates and source code, visit the [GitHub Repository](https://github.com/nextui-org/nextui-cli).",
    "title": "CLI | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Use the CLI to manage and enhance your NextUI project components.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/guide/upgrade-to-v2",
    "markdown": "# Upgrade to v2 | NextUI\n\nRequirements:\n\n* * *\n\n## [Next.js upgrade steps](#nextjs-upgrade-steps)\n\nMake sure to follow the previous steps since they are required to upgrade to v2.\n\n## [App directory Setup](#app-directory-setup)\n\nNext.js 13 introduces a new `app/` directory structure. By default it uses Server Components. As NextUI components use React hooks, we added the `use client;` at build time, so you can import them directly in your React Server Components (RSC).\n\n### [Installation](#installation)\n\nIn your Next.js project, run one of the following command to install NextUI:\n\n### [Hoisted Dependencies Setup](#hoisted-dependencies-setup)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n### [Tailwind CSS Setup](#tailwind-css-setup)\n\nNextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official [installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add the following code to your `tailwind.config.js` file:\n\n// tailwind.config.js\n\nconst { nextui } \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\"\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\]\n\n}\n\n### [Setup Provider](#setup-provider)\n\nGo to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider`:\n\n// app/providers.tsx\n\n'use client'\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <NextUIProvider\\>\n\n      {children}\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\n### [Add Provider to Root](#add-provider-to-root)\n\nNow, Go to your `root` layout page and wrap it with the `NextUIProvider`:\n\n// app/layout.tsx\n\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <html lang\\=\"en\" className\\='dark'\\>\n\n      <body\\>\n\n        <Providers\\>\n\n          {children}\n\n        </Providers\\>\n\n      </body\\>\n\n    </html\\>\n\n  );\n\n}\n\n> **Note**: NextUI automatically add two themes `light` and `dark` to your application. You can use any of them by adding the `dark`/`light` class to the `html` tag. See the [theme docs](https://nextui.org/docs/customization/customize-theme) for more details.\n\n### [Use NextUI Components](#use-nextui-components)\n\nNow you can import any NextUI component directly in your Server Components without needing to use the `use client;` directive:\n\n// app/page.tsx\n\nimport {Button} from '@nextui-org/button'\n\nexport default function Page() {\n\n  return (\n\n    <div\\>\n\n      <Button\\>Click me</Button\\>\n\n    </div\\>\n\n  )\n\n}\n\n> **Important 🚨**: Note that you need to import the component from the individual package, not the from `@nextui-org/react`.\n\n## [Pages Directory Setup](#pages-directory-setup)\n\n### [Installation](#installation-1)\n\nIn your Next.js project, run one of the following command to install NextUI:\n\n### [Hoisted Dependencies Setup](#hoisted-dependencies-setup-1)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n### [Tailwind CSS Setup](#tailwind-css-setup-1)\n\nNextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official [installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add the following code to your `tailwind.config.js` file:\n\n// tailwind.config.js\n\nconst { nextui } \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\"\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\]\n\n}\n\n### [Setup Provider](#setup-provider-1)\n\nGo to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider`:\n\n// pages/\\_app.js\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nfunction MyApp({ Component, pageProps }) {\n\n  return (\n\n    <NextUIProvider\\>\n\n      <Component {...pageProps} />\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\nexport default MyApp;\n\n### [Use NextUI Components](#use-nextui-components-1)\n\nNow you can import any NextUI component wherever you want:\n\nimport {Button} from '@nextui-org/react'\n\nexport default function Page() {\n\n  return (\n\n    <div\\>\n\n      <Button\\>Click me</Button\\>\n\n    </div\\>\n\n  )\n\n}\n\n## [React upgrade steps](#react-upgrade-steps)\n\n### [Upgrade React version](#upgrade-react-version)\n\nNextUI v2 requires React 18 or later. To upgrade React, run the following command:\n\n### [Install Framer motion](#install-framer-motion)\n\nIn v2, NextUI now requires `framer-motion` as a dependency. To install both, use the following command:\n\n### [Hoisted Dependencies Setup](#hoisted-dependencies-setup-2)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n### [TailwindCSS Setup](#tailwindcss-setup)\n\nNextUI v2 now uses Tailwind CSS. Add the NextUI plugin to your `tailwind.config.js` file:\n\n> **Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n\n// tailwind.config.js\n\nconst { nextui } \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\"\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\]\n\n}\n\n### [Provider Setup](#provider-setup)\n\nGo to `root` file and wrap the Component with the `NextUIProvider`:\n\n// src/main.jsx\n\nimport React from 'react'\n\nimport ReactDOM from 'react-dom/client'\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nimport App from './App'\n\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\n  <React.StrictMode\\>\n\n    <NextUIProvider\\>\n\n      <App />\n\n    </NextUIProvider\\>\n\n  </React.StrictMode\\>,\n\n)\n\n### [Use NextUI Components](#use-nextui-components-2)\n\nNow you can import any NextUI component wherever you want:\n\nimport {Button} from '@nextui-org/react'\n\nexport default function Page() {\n\n  return (\n\n    <div\\>\n\n      <Button\\>Click me</Button\\>\n\n    </div\\>\n\n  )\n\n}\n\n> Please visit the [Release Notes](https://github.com/nextui-org/nextui/releases/tag/v2.0.0) for more information about the new features and breaking changes.",
    "title": "Upgrade to v2 | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Upgrade from NextUI v1 to v2",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/frameworks/nextjs",
    "markdown": "# Next.js | NextUI - Beautiful, fast and modern React UI Library\n\nRequirements:\n\n* * *\n\nTo use NextUI in your Next.js project, you need to follow the steps below, depending on your project structure.\n\n## [App Directory Setup](#app-directory-setup)\n\nNext.js 13 introduces a new `app/` directory structure. By default it uses Server Components. As NextUI components use React hooks, we added the `use client;` at build time, so you can import them directly in your React Server Components (RSC).\n\n### [NextUI CLI (recommended)](#nextui-cli-recommended)\n\nIf you are starting a new project, you can use the NextUI CLI to create a new project with NextUI pre-configured:\n\nnpm install -g nextui-cli\n\n### [create-next-app](#create-next-app)\n\nIf you are starting a new project, you can run one of the following commands to create a Next.js project pre-configured with NextUI:\n\n### [Automatic Installation](#automatic-installation)\n\nYou can add individual components using the CLI. For example, to add a button component:\n\nThis command adds the Button component to your project and manages all related dependencies.\n\nYou can also add multiple components at once:\n\nOr you can add the main library `@nextui-org/react` by running the following command:\n\nIf you leave out the component name, the CLI will prompt you to select the components you want to add.\n\n? Which components would you like to add? › - Space to select. Return to submit\n\nInstructions:\n\n    ↑/↓: Highlight option\n\n    ←/→/\\[space\\]: Toggle selection\n\n    \\[a,b,c\\]/delete: Filter choices\n\n    enter/return: Complete answer\n\nFiltered results for: Enter something to filter\n\n◯  accordion\n\n◯  autocomplete\n\n◯  avatar\n\n◯  badge\n\n◯  breadcrumbs\n\n◉  button\n\n◯  card\n\n◯  checkbox\n\n◯  chip\n\n◯  code\n\nYou still need to add the provider to your app manually (we are working on automating this step).\n\n// app/providers.tsx\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <NextUIProvider\\>\n\n      {children}\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\n// app/layout.tsx\n\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <html lang\\=\"en\" className\\='dark'\\>\n\n      <body\\>\n\n        <Providers\\>\n\n          {children}\n\n        </Providers\\>\n\n      </body\\>\n\n    </html\\>\n\n  );\n\n}\n\n### [Manual Installation](#manual-installation)\n\n### [Add dependencies](#add-dependencies)\n\nIn your Next.js project, run one of the following commands to install NextUI:\n\n### [Hoisted Dependencies Setup](#hoisted-dependencies-setup)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n### [Tailwind CSS Setup](#tailwind-css-setup)\n\nNextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official [installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add the following code to your `tailwind.config.js` file:\n\n> **Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n\n// tailwind.config.js\n\nimport {nextui} from \"@nextui-org/react\";\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nconst config \\= {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\"\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\]\n\n}\n\nexport default config;\n\n### [Setup Provider](#setup-provider)\n\nGo to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider`:\n\n// app/providers.tsx\n\n'use client'\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <NextUIProvider\\>\n\n      {children}\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\n### [Add Provider to Root](#add-provider-to-root)\n\nNow, Go to your `root` layout page and wrap it with the `Providers`:\n\n// app/layout.tsx\n\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <html lang\\=\"en\" className\\='dark'\\>\n\n      <body\\>\n\n        <Providers\\>\n\n          {children}\n\n        </Providers\\>\n\n      </body\\>\n\n    </html\\>\n\n  );\n\n}\n\n> **Note**: NextUI automatically adds two themes, `light` and `dark`, to your application. You can use any of them by adding the `dark`/`light` class to the `html` tag. See the [theme docs](https://nextui.org/docs/customization/customize-theme) for more details.\n\n### [Use NextUI Components](#use-nextui-components)\n\nNow you can import any NextUI component directly in your Server Components without needing to use the `use client;` directive:\n\n// app/page.tsx\n\nimport {Button} from '@nextui-org/button'; \n\nexport default function Page() {\n\n  return (\n\n    <div\\>\n\n      <Button\\>Click me</Button\\>\n\n    </div\\>\n\n  )\n\n}\n\n> **Important 🚨**: Note that you need to import the component from the individual package, not from `@nextui-org/react`.\n\n## [Pages Directory Setup](#pages-directory-setup)\n\n### [NextUI CLI (recommended)](#nextui-cli-recommended-1)\n\nIf you are starting a new project, you can use the NextUI CLI to create a new project with NextUI pre-configured:\n\nnpm install -g nextui-cli\n\nIf you are using the `/pages` Next.js project structure, you need to follow the steps below.\n\n### [create-next-app](#create-next-app-1)\n\nIf you are starting a new project, you can run one of the following commands to create a Next.js project pre-configured with NextUI:\n\n### [Automatic Installation](#automatic-installation-1)\n\nYou can add individual components using the CLI. For example, to add a button component:\n\nThis command adds the Button component to your project and manages all related dependencies.\n\nYou can also add multiple components at once:\n\nOr you can add the main library `@nextui-org/react` by running the following command:\n\nIf you leave out the component name, the CLI will prompt you to select the components you want to add.\n\n? Which components would you like to add? › - Space to select. Return to submit\n\nInstructions:\n\n    ↑/↓: Highlight option\n\n    ←/→/\\[space\\]: Toggle selection\n\n    \\[a,b,c\\]/delete: Filter choices\n\n    enter/return: Complete answer\n\nFiltered results for: Enter something to filter\n\n◯  accordion\n\n◯  autocomplete\n\n◯  avatar\n\n◯  badge\n\n◯  breadcrumbs\n\n◉  button\n\n◯  card\n\n◯  checkbox\n\n◯  chip\n\n◯  code\n\nYou still need to add the provider to your app manually (we are working on automating this step).\n\n// app/providers.tsx\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <NextUIProvider\\>\n\n      {children}\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\n// app/layout.tsx\n\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <html lang\\=\"en\" className\\='dark'\\>\n\n      <body\\>\n\n        <Providers\\>\n\n          {children}\n\n        </Providers\\>\n\n      </body\\>\n\n    </html\\>\n\n  );\n\n}\n\n### [Manual Installation](#manual-installation-1)\n\n### [Add dependencies](#add-dependencies-1)\n\nIn your Next.js project, run one of the following commands to install NextUI:\n\n### [Hoisted Dependencies Setup](#hoisted-dependencies-setup-1)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n### [Tailwind CSS Setup](#tailwind-css-setup-1)\n\nNextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official [installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add the following code to your `tailwind.config.js` file:\n\n> **Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n\n// tailwind.config.js\n\nimport {nextui} from \"@nextui-org/react\";\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nconst config \\= {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\"\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\]\n\n}\n\nexport default config;\n\n### [Setup Provider](#setup-provider-1)\n\nGo to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider`:\n\n// pages/\\_app.js\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nfunction MyApp({ Component, pageProps }) {\n\n  return (\n\n    <NextUIProvider\\>\n\n      <Component {...pageProps} />\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\nexport default MyApp;\n\n### [Use NextUI Components](#use-nextui-components-1)\n\nNow you can import any NextUI component wherever you want:\n\nimport {Button} from '@nextui-org/react'\n\nexport default function Page() {\n\n  return (\n\n    <div\\>\n\n      <Button\\>Click me</Button\\>\n\n    </div\\>\n\n  )\n\n}\n\n> Version 2 is only compatible with React 18 or later. If you are using React 17 or earlier, please use [version 1 of NextUI](https://v1.nextui.org/docs/getting-started).",
    "title": "Next.js | NextUI - Beautiful, fast and modern React UI Library",
    "description": "How to use NextUI with Next.js",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/customization/theme",
    "markdown": "# Theme | NextUI - Beautiful, fast and modern React UI Library\n\nTheming is a key element in designing user interfaces (UIs). It enables the application of a consistent aesthetic across your application, enhancing the user experience and maintaining visual uniformity.\n\nIn NextUI, we facilitate easy and flexible theme customization using a TailwindCSS plugin. This plugin, which is based on the [tw-colors](https://github.com/L-Blondy/tw-colors) plugin developed by [L-Blondy](https://github.com/L-Blondy), allows you to customize color schemes, layout configurations, and more, across different components of your application.\n\n## [What is a Theme?](#what-is-a-theme)\n\nA theme, in the context of NextUI, is a predefined set of colors, layout attributes, and other UI elements that you can consistently apply across your application. Themes ensure visual consistency, enrich the user experience, and simplify the management and updates of your app's look and feel.\n\n## [Setup](#setup)\n\nThe first step to using NextUI's theming capability is adding the `nextui` plugin to your `tailwind.config.js` file. Below is an example of how to do this:\n\n> **Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n\n// tailwind.config.js\n\nconst {nextui} \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\",\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\],\n\n};\n\n### [Usage](#usage)\n\nAfter adding the plugin to your `tailwind.config.js` file, you can utilize any of the default themes (light/dark) or a custom one. Here's how you can apply these themes in your `main.jsx` or `main.tsx`:\n\nGo to the src directory and inside `main.jsx` or `main.tsx`, apply the following class names to the root element:\n\n*   `light` for the light theme.\n*   `dark` for the dark theme.\n*   `text-foreground` to set the text color.\n*   `bg-background` to set the background color.\n\n// main.tsx or main.jsx\n\nimport React from \"react\";\n\nimport ReactDOM from \"react-dom/client\";\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n\n  <React.StrictMode\\>\n\n    <NextUIProvider\\>\n\n      <main className\\=\"dark text-foreground bg-background\"\\>\n\n        <App />\n\n      </main\\>\n\n    </NextUIProvider\\>\n\n  </React.StrictMode\\>,\n\n);\n\n> **Note**: See the [Colors](https://nextui.org/docs/customization/colors) section to learn more about the color classes.\n\n### [Default Plugin Options](#default-plugin-options)\n\nThe `nextui` plugin provides a default structure. It is outlined as follows:\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      prefix: \"nextui\", // prefix for themes variables\n\n      addCommonColors: false, // override common colors (e.g. \"blue\", \"green\", \"pink\").\n\n      defaultTheme: \"light\", // default theme from the themes object\n\n      defaultExtendTheme: \"light\", // default theme to extend on custom themes\n\n      layout: {}, // common layout tokens (applied to all themes)\n\n      themes: {\n\n        light: {\n\n          layout: {}, // light theme layout tokens\n\n          colors: {}, // light theme colors\n\n        },\n\n        dark: {\n\n          layout: {}, // dark theme layout tokens\n\n          colors: {}, // dark theme colors\n\n        },\n\n        // ... custom themes\n\n      },\n\n    }),\n\n  \\],\n\n};\n\n### [Themes Options](#themes-options)\n\nThese are the options that you can use to apply custom configurations to your themes.\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      themes: {\n\n        light: {\n\n          layout: {},\n\n          colors: {}\n\n        },\n\n        dark: {\n\n          layout: {},\n\n          colors: {}\n\n        },\n\n        ... // custom themes\n\n      }\n\n    })\n\n  \\]\n\n}\n\n### [Nested themes](#nested-themes)\n\nNextUI supports nested themes, allowing you to apply different themes to different sections of your application:\n\n<html class\\=\"dark\"\\>\n\n  ...\n\n  <div class\\=\"light\"\\>...</div\\>\n\n  <div class\\=\"purple-dark\"\\>...</div\\>\n\n</html\\>\n\n### [Theme based variants](#theme-based-variants)\n\nNextUI enables you to apply TailwindCSS styles based on the currently active theme. Below are examples of how to do this:\n\n<!-- In dark theme, background will be dark and text will be light. \n\n  In light theme, background will be light and text will be dark -->\n\n<div class\\=\"dark dark:bg-gray-800 dark:text-white bg-white text-black\"\\>\n\n  ...\n\n  <div\\>Text color changes based on theme</div\\>\n\n</div\\>\n\n<div class\\=\"light light:bg-gray-100 light:text-black bg-black text-white\"\\>\n\n  ...\n\n  <div\\>Text color changes based on theme</div\\>\n\n</div\\>\n\n### [API Reference](#api-reference)\n\nThe following table provides an overview of the various attributes you can use when working with themes in NextUI:\n\n### [Types](#types)\n\n#### [ConfigThemes](#configthemes)\n\ntype ConfigTheme \\= {\n\n  extend?: \"light\" | \"dark\"; // base theme to extend\n\n  layout?: LayoutTheme; // see LayoutTheme\n\n  colors?: ThemeColors; // see ThemeColors\n\n};\n\ntype ConfigThemes \\= Record<string, ConfigTheme\\>;\n\n#### [LayoutTheme](#layouttheme)\n\ntype BaseThemeUnit \\= {\n\n  small?: string;\n\n  medium?: string;\n\n  large?: string;\n\n};\n\ntype FontThemeUnit \\= {\n\n  small?: string;\n\n  medium?: string;\n\n  large?: string;\n\n  tiny?: string;\n\n};\n\ninterface LayoutTheme {\n\n  /\\*\\*\n\n   \\* The default font size applied across the components.\n\n   \\*/\n\n  fontSize?: FontThemeUnit;\n\n  /\\*\\*\n\n   \\* The default line height applied across the components.\n\n   \\*/\n\n  lineHeight?: FontThemeUnit;\n\n  /\\*\\*\n\n   \\* The default radius applied across the components.\n\n   \\* we recommend to use \\`rem\\` units.\n\n   \\*/\n\n  radius?: BaseThemeUnit;\n\n  /\\*\\*\n\n   \\* A number between 0 and 1 that is applied as opacity-\\[value\\] when\n\n   \\* the component is disabled.\n\n   \\*/\n\n  disabledOpacity?: string | number;\n\n  /\\*\\*\n\n   \\* The default height applied to the divider component.\n\n   \\* we recommend to use \\`px\\` units.\n\n   \\*/\n\n  dividerWeight?: string;\n\n  /\\*\\*\n\n   \\* The border width applied across the components.\n\n   \\*/\n\n  borderWidth?: BaseThemeUnit;\n\n  /\\*\\*\n\n   \\* The box shadow applied across the components.\n\n   \\*/\n\n  boxShadow?: BaseThemeUnit;\n\n}\n\n#### [ThemeColors](#themecolors)\n\ntype ColorScale \\= {\n\n  50: string;\n\n  100: string;\n\n  200: string;\n\n  300: string;\n\n  400: string;\n\n  500: string;\n\n  600: string;\n\n  700: string;\n\n  800: string;\n\n  900: string;\n\n  foreground: string; // contrast color\n\n  DEFAULT: string;\n\n};\n\ntype BaseColors \\= {\n\n  background: ColorScale; // the page background color\n\n  foreground: ColorScale; // the page text color\n\n  divider: ColorScale; // used for divider and single line border\n\n  overlay: ColorScale; // used for modal, popover, etc.\n\n  focus: ColorScale; // used for focus state outline\n\n  content1: ColorScale; // used for card, modal, popover, etc.\n\n  content2: ColorScale;\n\n  content3: ColorScale;\n\n  content4: ColorScale;\n\n};\n\n// brand colors\n\ntype ThemeColors \\= BaseColors & {\n\n  default: ColorScale;\n\n  primary: ColorScale;\n\n  secondary: ColorScale;\n\n  success: ColorScale;\n\n  warning: ColorScale;\n\n  danger: ColorScale;\n\n};",
    "title": "Theme | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Learn how to customize your application's appearance using NextUI's TailwindCSS plugin.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/frameworks/astro",
    "markdown": "# Astro | NextUI - Beautiful, fast and modern React UI Library\n\n### [Install React](#install-react)\n\nNextUI is built on top of React, so you need to install React first. You can follow the official [integration guide](https://docs.astro.build/en/guides/integrations-guide/react/) to install React.\n\n### [Install NextUI](#install-nextui)\n\nIn your Astro project, run one of the following command to install NextUI:\n\n### [Hoisted Dependencies Setup](#hoisted-dependencies-setup)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n### [Tailwind CSS Setup](#tailwind-css-setup)\n\nNextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official [installation guide](https://tailwindcss.com/docs/guides/astro) to install Tailwind CSS. Then you need to add the following code to your `tailwind.config.cjs` file:\n\n> **Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n\n// tailwind.config.cjs\n\nconst { nextui } \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\",\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\]\n\n}\n\n### [Usage](#usage)\n\nNow you can import NextUI components and use them in your Astro project:\n\n\\---\n\nimport Layout from '../layouts/Layout.astro';\n\nimport {Button} from '@nextui\\-org/react';\n\n\\---\n\n<Layout title\\=\"Welcome to Astro.\"\\>\n\n  <main\\>\n\n      <Button color\\=\"primary\" client:visible\\>My button</Button\\>\n\n  </main\\>\n\n</Layout\\>\n\nNote that you have to add `client:visible` to the component to make it visible only on the client side. Otherwise some functionalities of NextUI components may not work properly.",
    "title": "Astro | NextUI - Beautiful, fast and modern React UI Library",
    "description": "How to use NextUI with Astro",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/customization/layout",
    "markdown": "# Layout | NextUI - Beautiful, fast and modern React UI Library\n\nNextUI's plugin provides a variety of layout customization options. Alter spacing units, font sizes, line heights, radius and more to personalize each theme to your liking.\n\nUsing layout tokens, you can ensure a uniform aesthetic across all components without needing to override the default Tailwind CSS configuration.\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      layout: {}, // common layout options\n\n      themes: {\n\n        light: {\n\n          layout: {}, // light theme layout options\n\n          // ...\n\n        },\n\n        dark: {\n\n          layout: {}, // dark theme layout options\n\n          // ...\n\n        },\n\n        // ... custom themes\n\n      },\n\n    }),\n\n  \\],\n\n};\n\n> Layout options are applied to all components.\n\n## [Default Layout](#default-layout)\n\nDefault values for the layout tokens are:\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      layout: {\n\n        dividerWeight: \"1px\", // h-divider the default height applied to the divider component\n\n        disabledOpacity: 0.5, // this value is applied as opacity-\\[value\\] when the component is disabled\n\n        fontSize: {\n\n          tiny: \"0.75rem\", // text-tiny\n\n          small: \"0.875rem\", // text-small\n\n          medium: \"1rem\", // text-medium\n\n          large: \"1.125rem\", // text-large\n\n        },\n\n        lineHeight: {\n\n          tiny: \"1rem\", // text-tiny\n\n          small: \"1.25rem\", // text-small\n\n          medium: \"1.5rem\", // text-medium\n\n          large: \"1.75rem\", // text-large\n\n        },\n\n        radius: {\n\n          small: \"8px\", // rounded-small\n\n          medium: \"12px\", // rounded-medium\n\n          large: \"14px\", // rounded-large\n\n        },\n\n        borderWidth: {\n\n          small: \"1px\", // border-small\n\n          medium: \"2px\", // border-medium (default)\n\n          large: \"3px\", // border-large\n\n        },\n\n      },\n\n      themes: {\n\n        light: {\n\n          layout: {\n\n            hoverOpacity: 0.8, //  this value is applied as opacity-\\[value\\] when the component is hovered\n\n            boxShadow: {\n\n              // shadow-small\n\n              small:\n\n                \"0px 0px 5px 0px rgb(0 0 0 / 0.02), 0px 2px 10px 0px rgb(0 0 0 / 0.06), 0px 0px 1px 0px rgb(0 0 0 / 0.3)\",\n\n              // shadow-medium\n\n              medium:\n\n                \"0px 0px 15px 0px rgb(0 0 0 / 0.03), 0px 2px 30px 0px rgb(0 0 0 / 0.08), 0px 0px 1px 0px rgb(0 0 0 / 0.3)\",\n\n              // shadow-large\n\n              large:\n\n                \"0px 0px 30px 0px rgb(0 0 0 / 0.04), 0px 30px 60px 0px rgb(0 0 0 / 0.12), 0px 0px 1px 0px rgb(0 0 0 / 0.3)\",\n\n            },\n\n          },\n\n        },\n\n        dark: {\n\n          layout: {\n\n            hoverOpacity: 0.9, //  this value is applied as opacity-\\[value\\] when the component is hovered\n\n            boxShadow: {\n\n              // shadow-small\n\n              small:\n\n                \"0px 0px 5px 0px rgb(0 0 0 / 0.05), 0px 2px 10px 0px rgb(0 0 0 / 0.2), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)\",\n\n              // shadow-medium\n\n              medium:\n\n                \"0px 0px 15px 0px rgb(0 0 0 / 0.06), 0px 2px 30px 0px rgb(0 0 0 / 0.22), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)\",\n\n              // shadow-large\n\n              large:\n\n                \"0px 0px 30px 0px rgb(0 0 0 / 0.07), 0px 30px 60px 0px rgb(0 0 0 / 0.26), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)\",\n\n            },\n\n          },\n\n        },\n\n      },\n\n    }),\n\n  \\],\n\n};\n\n### [CSS Variables](#css-variables)\n\nNextUI creates CSS variables using the format `--prefix-prop-name-scale` for each layout token. By default the prefix is `nextui`, but you can change it with the `prefix` option.\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      prefix: \"myapp\",\n\n    }),\n\n  \\],\n\n};\n\nThen you can use the CSS variables in your CSS files.\n\n/\\* With default prefix \\*/\n\n.my-button {\n\n  font-size: var(\\--nextui-font-size-small);\n\n  line-height: var(\\--nextui-line-height-small);\n\n  border-radius: var(\\--nextui-radius-medium);\n\n}\n\n/\\*  With custom prefix \\*/\n\n.my-component {\n\n  font-size: var(\\--myapp-font-size-small);\n\n  line-height: var(\\--myapp-line-height-small);\n\n  border-radius: var(\\--myapp-radius-medium);\n\n}\n\n#### [API Reference](#api-reference)\n\n#### [BaseThemeUnit](#basethemeunit)\n\nexport type BaseThemeUnit \\= {\n\n  small?: string;\n\n  medium?: string;\n\n  large?: string;\n\n};\n\n#### [FontThemeUnit](#fontthemeunit)\n\nexport type FontThemeUnit \\= {\n\n  small?: string;\n\n  medium?: string;\n\n  large?: string;\n\n  tiny?: string;\n\n};",
    "title": "Layout | NextUI - Beautiful, fast and modern React UI Library",
    "description": "NextUI offers a set of layout options to customize the theme.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/customization/colors",
    "markdown": "# Colors | NextUI - Beautiful, fast and modern React UI Library\n\nNextUI's plugin enables you to personalize the semantic colors of the theme such as `primary`, `secondary`, `success`, etc.\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      themes: {\n\n        light: {\n\n          // ...\n\n          colors: {},\n\n        },\n\n        dark: {\n\n          // ...\n\n          colors: {},\n\n        },\n\n        // ... custom themes\n\n      },\n\n    }),\n\n  \\],\n\n};\n\n> **Note**: Colors configurations apply globally across all components.\n\n## [Default Colors](#default-colors)\n\nNextUI offers a default color palette right out of the box, perfect for when you're still undecided about your specific branding colors.\n\nThese colors are split into [Common Colors](#common-colors) and [Semantic Colors](#semantic-colors).\n\n*   [Common Colors](#common-colors): Consistent across themes.\n*   [Semantic Colors](#semantic-colors): Adjust according to the chosen theme.\n\n### [Common Colors](#common-colors)\n\nCommon colors, like [TailwindCSS](https://tailwindcss.com/docs/customizing-colors) colors, remain consistent regardless of the theme.\n\nTo prevent conflicts with TailwindCSS colors, common colors are initially disabled but can be activated with the `addCommonColors` option.\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      addCommonColors: true,\n\n    }),\n\n  \\],\n\n};\n\nEnabling this option supplements some TailwindCSS default colors with the following:\n\nmodule.exports \\= {\n\n  theme: {\n\n    extend: {\n\n      colors: {\n\n        white: \"#FFFFFF\",\n\n        black: \"#000000\",\n\n        blue: {\n\n          50: \"#e6f1fe\",\n\n          100: \"#cce3fd\",\n\n          200: \"#99c7fb\",\n\n          300: \"#66aaf9\",\n\n          400: \"#338ef7\",\n\n          500: \"#006FEE\",\n\n          600: \"#005bc4\",\n\n          700: \"#004493\",\n\n          800: \"#002e62\",\n\n          900: \"#001731\",\n\n        },\n\n        // .. rest of the colors\n\n      },\n\n    },\n\n  },\n\n};\n\n## White & Black\n\n## Blue\n\n## Purple\n\n## Green\n\n## Red\n\n## Pink\n\n## Yellow\n\n## Cyan\n\n## Zinc\n\n### [Semantic Colors](#semantic-colors)\n\nSemantic colors adapt with the theme, delivering meaning and reinforcing your brand identity.\n\nFor an effective palette, we recommend using color ranges from `50` to `900`. You can use tools like [Eva Design System](https://colors.eva.design/), [Smart Watch](https://smart-swatch.netlify.app/), [Palette](https://palettte.app/) or [Color Box](https://colorbox.io/) to generate your palette.\n\n> Semantic colors should be placed inside the `nextui` plugin options, not inside the TailwindCSS theme object.\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      themes: {\n\n        light: {\n\n          colors: {\n\n            background: \"#FFFFFF\", // or DEFAULT\n\n            foreground: \"#11181C\", // or 50 to 900 DEFAULT\n\n            primary: {\n\n              //... 50 to 900\n\n              foreground: \"#FFFFFF\",\n\n              DEFAULT: \"#006FEE\",\n\n            },\n\n            // ... rest of the colors\n\n          },\n\n        },\n\n        dark: {\n\n          colors: {\n\n            background: \"#000000\", // or DEFAULT\n\n            foreground: \"#ECEDEE\", // or 50 to 900 DEFAULT\n\n            primary: {\n\n              //... 50 to 900\n\n              foreground: \"#FFFFFF\",\n\n              DEFAULT: \"#006FEE\",\n\n            },\n\n          },\n\n          // ... rest of the colors\n\n        },\n\n        mytheme: {\n\n          // custom theme\n\n          extend: \"dark\",\n\n          colors: {\n\n            primary: {\n\n              DEFAULT: \"#BEF264\",\n\n              foreground: \"#000000\",\n\n            },\n\n            focus: \"#BEF264\",\n\n          },\n\n        },\n\n      },\n\n    }),\n\n  \\],\n\n};\n\n> Change the docs theme to see the semantic colors in action.\n\n## Layout\n\n## Content\n\n## Base\n\n## Default\n\n## Primary\n\n## Secondary\n\n## Success\n\n## Warning\n\n## Danger\n\n### [Using Semantic Colors](#using-semantic-colors)\n\nSemantic colors can be applied anywhere in your project where colors are used, such as text color, border color, background color utilities, and more.\n\n<div class\\=\"bg-primary-500 text-primary-50 rounded-small px-2 py-1\"\\>\n\n  This is a primary color box\n\n</div\\>\n\n### [Javascript Variables](#javascript-variables)\n\nImport semantic and common colors into your JavaScript files as follows:\n\nimport {commonColors, semanticColors} from \"@nextui-org/theme\";\n\nconsole.log(commonColors.white); // #FFFFFF\n\nconsole.log(commonColors.blue\\[500\\]); // #006FEE\n\nconsole.log(semanticColors.dark.warning.DEFAULT); // #FFC107\n\nconsole.log(semanticColors.light.primary.DEFAULT); // #006FEE\n\n### [CSS Variables](#css-variables)\n\nNextUI creates CSS variables using the format `--prefix-colorname-shade` for each semantic color. By default the prefix is `nextui`, but you can change it with the `prefix` option.\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      prefix: \"myapp\",\n\n    }),\n\n  \\],\n\n};\n\nThen you can use the CSS variables in your CSS files.\n\n/\\* With default prefix \\*/\n\n.my-component {\n\n  background-color: hsl(var(\\--nextui-primary-500));\n\n}\n\n/\\*  With custom prefix \\*/\n\n.my-component {\n\n  background-color: hsl(var(\\--myapp-primary-500));\n\n}",
    "title": "Colors | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Learn how to configure and customize colors with NextUI.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/customization/customize-theme",
    "markdown": "# Customize theme | NextUI - Beautiful, fast and modern React UI Library\n\nAs outlined in preceding sections, NextUI presents two predefined themes, `light` and `dark`. These themes are inherently flexible, allowing you to tailor them to your specific preferences or project needs.\n\nFurthermore, you have the option to create your own theme based on the default ones. Each theme incorporates [Layout](https://nextui.org/docs/customization/layout) tokens and [Color](https://nextui.org/docs/customization/colors) tokens, designed to facilitate your customization process.\n\n## [Customizing Layout](#customizing-layout)\n\nYou can modify a variety of layout aspects, including spacing units, font sizes, line heights, radius, and more.\n\nLayout tokens can be applied globally across all themes or specifically to a chosen theme.\n\n### [Global Layout Customization](#global-layout-customization)\n\nSuppose you require a smaller border radius, a thinner border width, and more opaque disabled elements across all themes. You can implement these changes by adding the following code to your `tailwind.config.js` file.\n\n// tailwind.config.js\n\nconst {nextui} \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      layout: {\n\n        disabledOpacity: \"0.3\", // opacity-\\[0.3\\]\n\n        radius: {\n\n          small: \"2px\", // rounded-small\n\n          medium: \"4px\", // rounded-medium\n\n          large: \"6px\", // rounded-large\n\n        },\n\n        borderWidth: {\n\n          small: \"1px\", // border-small\n\n          medium: \"1px\", // border-medium\n\n          large: \"2px\", // border-large\n\n        },\n\n      },\n\n      themes: {\n\n        light: {},\n\n        dark: {},\n\n      },\n\n    }),\n\n  \\],\n\n};\n\nAs NextUI components employ layout tokens, the modifications will be reflected across all components that utilize them. For instance, the [Button](https://nextui.org/docs/components/button) component uses the `radius` token to set the border radius and the `borderWidth` token to define the border width when the variant is `bordered`.\n\nSo let's see how the [Button](https://nextui.org/docs/components/button) component looks like after the changes.\n\nimport {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n\n  return (\n\n    <div className\\=\"flex gap-4\"\\>\n\n      <Button variant\\=\"bordered\" radius\\=\"md\"\\>\n\n        Button\n\n      </Button\\>\n\n      <Button isDisabled color\\=\"primary\" radius\\=\"md\"\\>\n\n        Disabled\n\n      </Button\\>\n\n    </div\\>\n\n  );\n\n}\n\n> See the [Layout](https://nextui.org/docs/customization/layout#default-layout) section for more details about the available tokens.\n\n### [Customizing Colors](#customizing-colors)\n\nNow, Let's say you wish to modify the primary and focus colors of the dark theme. This can be achieved by adding the following code to your `tailwind.config.js` file.\n\n// tailwind.config.js\n\nconst {nextui} \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      themes: {\n\n        dark: {\n\n          colors: {\n\n            primary: {\n\n              DEFAULT: \"#BEF264\",\n\n              foreground: \"#000000\",\n\n            },\n\n            focus: \"#BEF264\",\n\n          },\n\n        },\n\n      },\n\n    }),\n\n  \\],\n\n};\n\nThis modification will impact all components using the `primary` color. For instance, the [Button](https://nextui.org/docs/components/button) component uses the `primary` color as background color when the variant is `solid` or `ghost`.\n\nimport {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n\n  return (\n\n    <div className\\=\"flex gap-4\"\\>\n\n      <Button color\\=\"primary\" variant\\=\"solid\"\\>Solid</Button\\>\n\n      <Button color\\=\"primary\" variant\\=\"ghost\"\\>Ghost</Button\\>\n\n    </div\\>\n\n  );\n\n}\n\n> 🎉 That's it! You have successfully customized the default theme. See the [Colors](https://nextui.org/docs/customization/colors) section for more details about the available semantic colors and color tokens.",
    "title": "Customize theme | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Learn how NextUI enables effortless customization of default themes.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/customization/create-theme",
    "markdown": "# Create theme | NextUI - Beautiful, fast and modern React UI Library\n\nYou can create a new theme based on the default ones. Let's say you need a `purple-dark` theme. You can create it by adding the following code to your `tailwind.config.js` file.\n\nWe recommend adding a palette that ranges from `50` to `900`. You can use tools like [Eva Design System](https://colors.eva.design/), [Smart Watch](https://smart-swatch.netlify.app/), [Palette](https://palettte.app/) or [Color Box](https://colorbox.io/) to generate your palette.\n\n### [Add the new theme to the plugin](#add-the-new-theme-to-the-plugin)\n\n// tailwind.config.js\n\nconst {nextui} \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  plugins: \\[\n\n    nextui({\n\n      themes: {\n\n        \"purple-dark\": {\n\n          extend: \"dark\", // <- inherit default values from dark theme\n\n          colors: {\n\n            background: \"#0D001A\",\n\n            foreground: \"#ffffff\",\n\n            primary: {\n\n              50: \"#3B096C\",\n\n              100: \"#520F83\",\n\n              200: \"#7318A2\",\n\n              300: \"#9823C2\",\n\n              400: \"#c031e2\",\n\n              500: \"#DD62ED\",\n\n              600: \"#F182F6\",\n\n              700: \"#FCADF9\",\n\n              800: \"#FDD5F9\",\n\n              900: \"#FEECFE\",\n\n              DEFAULT: \"#DD62ED\",\n\n              foreground: \"#ffffff\",\n\n            },\n\n            focus: \"#F182F6\",\n\n          },\n\n          layout: {\n\n            disabledOpacity: \"0.3\",\n\n            radius: {\n\n              small: \"4px\",\n\n              medium: \"6px\",\n\n              large: \"8px\",\n\n            },\n\n            borderWidth: {\n\n              small: \"1px\",\n\n              medium: \"2px\",\n\n              large: \"3px\",\n\n            },\n\n          },\n\n        },\n\n      },\n\n    }),\n\n  \\],\n\n};\n\n### [Apply the new theme](#apply-the-new-theme)\n\nNow, applying the new theme is as simple as adding the theme name `purple-dark` to the `className` of the `html` / `body` or `main` element.\n\n// main.tsx or main.jsx\n\nimport React from \"react\";\n\nimport ReactDOM from \"react-dom/client\";\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n\n  <React.StrictMode\\>\n\n    <NextUIProvider\\>\n\n      <main className\\=\"purple-dark text-foreground bg-background\"\\>\n\n        <App />\n\n      </main\\>\n\n    </NextUIProvider\\>\n\n  </React.StrictMode\\>,\n\n);\n\n### [Use the new theme](#use-the-new-theme)\n\nAll components that use the `primary` color will be affected by this change.\n\nimport {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n\n  return (\n\n    <div className\\=\"flex flex-wrap gap-4 items-center\"\\>\n\n      <Button color\\=\"primary\" variant\\=\"solid\"\\>\n\n        Solid\n\n      </Button\\>\n\n      <Button color\\=\"primary\" variant\\=\"faded\"\\>\n\n        Faded\n\n      </Button\\>\n\n      <Button color\\=\"primary\" variant\\=\"bordered\"\\>\n\n        Bordered\n\n      </Button\\>\n\n      <Button color\\=\"primary\" variant\\=\"light\"\\>\n\n        Light\n\n      </Button\\>\n\n      <Button color\\=\"primary\" variant\\=\"flat\"\\>\n\n        Flat\n\n      </Button\\>\n\n      <Button color\\=\"primary\" variant\\=\"ghost\"\\>\n\n        Ghost\n\n      </Button\\>\n\n      <Button color\\=\"primary\" variant\\=\"shadow\"\\>\n\n        Shadow\n\n      </Button\\>\n\n    </div\\>\n\n  );\n\n}",
    "title": "Create theme | NextUI - Beautiful, fast and modern React UI Library",
    "description": "NextUI provides a simple way to create new themes.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/customization/dark-mode",
    "markdown": "# Dark mode | NextUI - Beautiful, fast and modern React UI Library\n\nAs we mentioned before in the [Theme](https://nextui.org/docs/customization/theme) section NextUI comes with two default themes `light`and `dark`. So using the `dark` theme is as simple as adding it to the `className` of the `html` / `body` or `main` element.\n\n// main.tsx or main.jsx\n\nimport React from \"react\";\n\nimport ReactDOM from \"react-dom/client\";\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n\n  <React.StrictMode\\>\n\n    <NextUIProvider\\>\n\n      <main className\\=\"dark text-foreground bg-background\"\\>\n\n        <App />\n\n      </main\\>\n\n    </NextUIProvider\\>\n\n  </React.StrictMode\\>,\n\n);\n\nThis will enable the dark mode for the whole application. However, many applications require the capability to switch between different themes. For this purpose, we recommend using a theme switch library or creating your own implementation.\n\n## [Using next-themes](#using-next-themes)\n\nFor applications using [Next.js](https://nextui.org/docs/frameworks/nextjs), the [next-themes](https://github.com/pacocoursey/next-themes) library is an excellent choice. It comes packed with features that enhance the user experience when transitioning between themes.\n\n> For more information, refer to the [next-themes](https://github.com/pacocoursey/next-themes) documentation.\n\n### [Next.js App Directory Setup](#nextjs-app-directory-setup)\n\n### [Install next-themes](#install-next-themes)\n\nInstall `next-themes` in your project.\n\n### [Add next-themes provider](#add-next-themes-provider)\n\nWrap your app with the `ThemeProvider` component from `next-themes`.\n\nGo to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider` and the `next-themes` provider components.\n\n// app/providers.tsx\n\n\"use client\";\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nimport {ThemeProvider as NextThemesProvider} from \"next-themes\";\n\nexport function Providers({children}: { children: React.ReactNode }) {\n\n  return (\n\n    <NextUIProvider\\>\n\n      <NextThemesProvider attribute\\=\"class\" defaultTheme\\=\"dark\"\\>\n\n        {children}\n\n      </NextThemesProvider\\>\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\n> Note: We're using the `class` attribute to switch between themes, this is because NextUI uses the `className` attribute.\n\n### [Add the theme switcher](#add-the-theme-switcher)\n\nAdd the theme switcher to your app.\n\n// app/components/ThemeSwitcher.tsx\n\n\"use client\";\n\nimport {useTheme} from \"next-themes\";\n\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeSwitcher() {\n\n  const \\[mounted, setMounted\\] \\= useState(false)\n\n  const { theme, setTheme } \\= useTheme()\n\n  useEffect(() \\=> {\n\n    setMounted(true)\n\n  }, \\[\\])\n\n  if(!mounted) return null\n\n  return (\n\n    <div\\>\n\n      The current theme is: {theme}\n\n      <button onClick\\={() \\=> setTheme('light')}\\>Light Mode</button\\>\n\n      <button onClick\\={() \\=> setTheme('dark')}\\>Dark Mode</button\\>\n\n    </div\\>\n\n  )\n\n};\n\n> **Note**: You can use any theme name you want, but make sure it exits in your `tailwind.config.js` file. See [Create Theme](https://nextui.org/docs/customization/create-theme) for more details.\n\n### [Next.js Pages Directory Setup](#nextjs-pages-directory-setup)\n\n### [Install next-themes](#install-next-themes-1)\n\nInstall `next-themes` in your project.\n\n### [Add next-themes provider](#add-next-themes-provider-1)\n\nGo to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider` and the `next-themes` provider components.\n\n// pages/\\_app.js\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nimport {ThemeProvider as NextThemesProvider} from \"next-themes\";\n\nfunction MyApp({ Component, pageProps }) {\n\n  return (\n\n    <NextUIProvider\\>\n\n      <NextThemesProvider attribute\\=\"class\" defaultTheme\\=\"dark\"\\>\n\n        <Component {...pageProps} />\n\n      </NextThemesProvider\\>\n\n    </NextUIProvider\\>\n\n  )\n\n}\n\nexport default MyApp;\n\n> Note: We're using the `class` attribute to switch between themes, this is because NextUI uses the `className` attribute.\n\n### [Add the theme switcher](#add-the-theme-switcher-1)\n\nAdd the theme switcher to your app.\n\n// components/ThemeSwitcher.tsx\n\nimport {useTheme} from \"next-themes\";\n\nexport const ThemeSwitcher \\= () \\=> {\n\n  const { theme, setTheme } \\= useTheme()\n\n  return (\n\n    <div\\>\n\n      The current theme is: {theme}\n\n      <button onClick\\={() \\=> setTheme('light')}\\>Light Mode</button\\>\n\n      <button onClick\\={() \\=> setTheme('dark')}\\>Dark Mode</button\\>\n\n    </div\\>\n\n  )\n\n};\n\n> **Note**: You can use any theme name you want, but make sure it exits in your `tailwind.config.js` file. See [Create Theme](https://nextui.org/docs/customization/create-theme) for more details.\n\n## [Using use-dark-mode hook](#using-use-dark-mode-hook)\n\nIn case you're using plain React with [Vite](https://nextui.org/docs/frameworks/vite) or [Create React App](https://create-react-app.dev/) you can use the [use-dark-mode](https://github.com/donavon/use-dark-mode) hook to switch between themes.\n\n> See the [use-dark-mode](https://github.com/donavon/use-dark-mode) documentation for more details.\n\n### [Install use-dark-mode](#install-use-dark-mode)\n\nInstall `use-dark-mode` in your project.\n\n### [Add the current theme to the main element](#add-the-current-theme-to-the-main-element)\n\n// App.tsx or App.jsx\n\nimport React from \"react\";\n\nimport useDarkMode from \"use-dark-mode\";\n\nexport default function App() {\n\n  const darkMode \\= useDarkMode(false);\n\n  return (\n\n    <main className\\={\\`${darkMode.value ? 'dark' : ''} text-foreground bg-background\\`}\\>\n\n      <App />\n\n    </main\\>\n\n  )\n\n}\n\n### [Add the theme switcher](#add-the-theme-switcher-2)\n\nAdd the theme switcher to your app.\n\n// 'use client'; // uncomment this line if you're using Next.js App Directory Setup\n\n// components/ThemeSwitcher.tsx\n\nimport useDarkMode from \"use-dark-mode\";\n\nexport const ThemeSwitcher \\= () \\=> {\n\n  const darkMode \\= useDarkMode(false);\n\n  return (\n\n    <div\\>\n\n      <button onClick\\={darkMode.disable}\\>Light Mode</button\\>\n\n      <button onClick\\={darkMode.enable}\\>Dark Mode</button\\>\n\n    </div\\>\n\n  )\n\n};\n\n> **Note**: You can use any theme name you want, but make sure it exits in your `tailwind.config.js` file. See [Create Theme](https://nextui.org/docs/customization/create-theme) for more details.",
    "title": "Dark mode | NextUI - Beautiful, fast and modern React UI Library",
    "description": "NextUI comes with two palette modes light (the default) and dark.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/customization/override-styles",
    "markdown": "# Override styles | NextUI - Beautiful, fast and modern React UI Library\n\nOverriding default component styles is as simple as passing your own class names to the `className` or to the `classNames` prop for components with slots.\n\n### [What is a Slot?](#what-is-a-slot)\n\nA slot is a part of a component that can be styled separately. For example, the [CircularProgress](https://nextui.org/docs/components/circular-progress) component has multiple slots/parts that can be styled separately, such as the `track`, `indicator`, `value`, etc.\n\nComponents with slots have a `classNames` prop that allows you to style each slot separately.\n\n### [Overriding a component](#overriding-a-component)\n\nLet's override the default styles of the [Button](https://nextui.org/docs/components/button) component, which is a component that has no slots.\n\nimport {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n\n  return (\n\n    <Button\n\n      disableRipple\n\n      className\\=\"relative overflow-visible rounded-full hover:-translate-y-1 px-12 shadow-xl bg-background/30 after:content-\\[''\\] after:absolute after:rounded-full after:inset-0 after:bg-background/40 after:z-\\[-1\\] after:transition after:!duration-500 hover:after:scale-150 hover:after:opacity-0\"\n\n      size\\=\"lg\"\n\n    \\>\n\n      Press me\n\n    </Button\\>\n\n  );\n\n}\n\n### [Components with slots](#components-with-slots)\n\nSome NextUI components have slots, which means that you can style all the parts inside the component using the `classNames` prop. For example, the [CircularProgress](https://nextui.org/docs/components/circular-progress) component has the following slots:\n\n*   **base**: The base slot of the circular progress, it is the main container.\n*   **svgWrapper**: The wrapper of the svg circles and the value label.\n*   **svg**: The svg element of the circles.\n*   **track**: The track is the background circle of the circular progress.\n*   **indicator**: The indicator is the one that is filled according to the `value`.\n*   **value**: The value content.\n*   **label**: The label content.\n\nEach slot can be styled using the `classNames` prop, the example below shows how to change the styles of some slots to create a circular progress with a different style.\n\nimport {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\n\nexport default function App() {\n\n  return (\n\n    <Card className\\=\"w-\\[240px\\] h-\\[240px\\] bg-gradient-to-br from-violet-500 to-fuchsia-500\"\\>\n\n      <CardBody className\\=\"justify-center items-center py-0\"\\>\n\n        <CircularProgress\n\n          classNames\\={{\n\n            svg: \"w-36 h-36 drop-shadow-md\",\n\n            indicator: \"stroke-white\",\n\n            track: \"stroke-white/10\",\n\n            value: \"text-3xl font-semibold text-white\",\n\n          }}\n\n          value\\={70}\n\n          strokeWidth\\={4}\n\n          showValueLabel\\={true}\n\n        />\n\n      </CardBody\\>\n\n    </Card\\>\n\n  );\n\n}\n\n> **Note**: You will find a `Slots` section in the documentation of each component that has slots.\n\n### [CSS Modules](#css-modules)\n\nCSS Modules allow for the creation of local scope classes and variables. Here's how you can use it to override styles:\n\nimport {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\n\nimport styles from './App.module.css';\n\nexport default function App() {\n\n  return (\n\n    <Card className\\={styles.card}\\>\n\n      <CardBody className\\={styles.cardBody}\\>\n\n        <CircularProgress\n\n          classNames\\={{\n\n            svg: styles.svg,\n\n            indicator: styles.indicator,\n\n            track: styles.track,\n\n            value: styles.value,\n\n          }}\n\n          value\\={70}\n\n          strokeWidth\\={4}\n\n          showValueLabel\\={true}\n\n        />\n\n      </CardBody\\>\n\n    </Card\\>\n\n  );\n\n}\n\nWith the corresponding CSS module:\n\n/\\* App.module.css \\*/\n\n.card {\n\n  width: 240px;\n\n  height: 240px;\n\n  background: linear-gradient(to bottom right, violet, fuchsia);\n\n}\n\n.cardBody {\n\n  justify-content: center;\n\n  align-items: center;\n\n  padding-bottom: 0;\n\n}\n\n.svg {\n\n  width: 36px;\n\n  height: 36px;\n\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);\n\n}\n\n.indicator {\n\n  stroke: white;\n\n}\n\n.track {\n\n  stroke: rgba(255, 255, 255, 0.1);\n\n}\n\n.value {\n\n  font-size: 24px;\n\n  font-weight: 600;\n\n  color: white;\n\n}\n\n### [CSS-in-JS](#css-in-js)\n\nIf you are a CSS-in-JS library such as [styled-components](https://styled-components.com/) or [emotion](https://emotion.sh/), you can use the following example to override the styles of a component:\n\nimport {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\n\nimport styled from 'styled-components';\n\nconst StyledCard \\= styled(Card)\\`\n\n  width: 240px;\n\n  height: 240px;\n\n  background: linear-gradient(to bottom right, violet, fuchsia);\n\n\\`;\n\nconst StyledCardBody \\= styled(CardBody)\\`\n\n  justify-content: center;\n\n  align-items: center;\n\n  padding-bottom: 0;\n\n\\`;\n\nconst StyledCircularProgress \\= styled(CircularProgress).attrs({\n\n  classNames: {\n\n    svg: 'w-36 h-36 drop-shadow-md',\n\n    indicator: 'stroke-white',\n\n    track: 'stroke-white/10',\n\n    value: 'text-3xl font-semibold text-white',\n\n  }\n\n})\\`\\`;\n\nexport default function App() {\n\n  return (\n\n    <StyledCard\\>\n\n      <StyledCardBody\\>\n\n        <StyledCircularProgress\n\n          value\\={70}\n\n          strokeWidth\\={4}\n\n          showValueLabel\\={true}\n\n        />\n\n      </StyledCardBody\\>\n\n    </StyledCard\\>\n\n  );\n\n}\n\nIn this example, the `StyledCard`, `StyledCardBody`, and `StyledCircularProgress` components have the combined styles of the original components and the custom styles defined in the template strings. The `.attrs` method is used to add the classNames prop to the StyledCircularProgress component.",
    "title": "Override styles | NextUI - Beautiful, fast and modern React UI Library",
    "description": "NextUI allows you to override the default styles of the components in several ways.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/api-references/cli-api",
    "markdown": "# NextUI CLI | NextUI - Beautiful, fast and modern React UI Library\n\n* * *\n\nHere's the API reference for the `NextUI CLI`.\n\nOnce the `CLI` is installed, run the following command to display available commands:\n\nTo get a list of the available CLI commands, run the following command inside your project directory:\n\nThis will produce the following help output:\n\nNextUI CLI <version\\>\n\nA command line tool for seamless integration with NextUI\n\nUsage: nextui \\[command\\]\n\nOptions:\n\n  -v, --version  Show the version number\n\n  --no-cache     Disable cache, by default data will be cached for 30m after the first request\n\n  -h, --help     Display help for commands\n\nCommands:\n\n  init \\[options\\] \\[projectName\\]       Start a new NextUI project\n\n  add \\[options\\] \\[components...\\]      Add NextUI components to your project\n\n  upgrade \\[options\\] \\[components...\\]  Update NextUI components to the latest versions\n\n  remove \\[options\\] \\[components...\\]   Remove NextUI components from your project\n\n  list \\[options\\]                     Show details of installed components\n\n  env \\[options\\]                      Display debug information about the local environment\n\n  doctor \\[options\\]                   Diagnose problems in your project\n\n  help \\[command\\]                     Get help on a specific command\n\n## [init](#init)\n\nTo start a new project, use the init command:\n\nnextui init \\[projectName\\] \\[options\\]\n\n### [Options](#options)\n\n*   `-t --template [string]` The template to use for the new project e.g. app, pages\n*   `-p --package [string]` The package manager to use for the new project (default: `npm`)\n\n### [Example](#example)\n\nnextui init my-nextui-app -t app\n\noutput:\n\nNextUI CLI v0.2.1\n\n┌  Create a new project\n\n│\n\n◇  Select a template (Enter to select)\n\n│  ● App (A Next.js 14 with app directory template pre-configured with NextUI (v2) and Tailwind CSS.)\n\n│  ○ Pages (A Next.js 14 with pages directory template pre-configured with NextUI (v2) and Tailwind CSS.)\n\n│  ○ Vite (A Vite template pre-configured with NextUI (v2) and Tailwind CSS.)\n\n│\n\n◇  New project name (Enter to skip with default name)\n\n│  my-nextui-app\n\n│\n\n◇  Select a package manager (Enter to select)\n\n│  ● npm\n\n│  ○ yarn\n\n│  ○ pnpm\n\n│  ○ bun\n\n│\n\n◇  Template created successfully!\n\n│\n\n◇  Next steps ───────╮\n\n│                    │\n\n│  cd my-nextui-app  │\n\n│  npm install       │\n\n│                    │\n\n├────────────────────╯\n\n│\n\n└  🚀 Get started with npm run dev\n\n## [add](#add)\n\n> 1.  Auto add the missing required `dependencies` to your project\n> 2.  Auto add the required `tailwindcss.config.js` configuration to your project\n> 3.  Detect whether using pnpm, if so, add the required configuration to your `.npmrc` file\n\nTo add components to your project, use the add command:\n\nnextui add \\[components...\\] \\[options\\]\n\n### [Options](#options-1)\n\n*   `-a --all` \\[boolean\\] Add all the NextUI components (default: `false`)\n*   `-p --packagePath` \\[string\\] The path to the package.json file\n*   `-tw --tailwindPath` \\[string\\] The path to the tailwind.config file file\n*   `-app --appPath` \\[string\\] The path to the App.tsx file\n*   `--prettier` \\[boolean\\] Add prettier format in the add content which required installed prettier - (default: false)\n*   `--addApp` \\[boolean\\] Add App.tsx file content which required provider (default: `false`)\n\n### [Example](#example-1)\n\nWithout setting a specific component, the `add` command will show a list of available components.\n\nOutput:\n\nNextUI CLI v0.2.1\n\n? Which components would you like to add? › - Space to select. Return to submit \n\nFiltered results for: Enter something to filter\n\n◯   accordion\n\n◯   autocomplete\n\n◯   avatar\n\n◯   badge\n\n◯   breadcrumbs\n\n◯   button\n\n◯   calendar\n\n◯   card\n\n◯   checkbox\n\n◯ ↓ chip\n\nIf you want to add a specific component, you can specify the component name.\n\nOutput:\n\nNextUI CLI v0.2.1\n\nAdding the required dependencies: @nextui-org/button\n\npnpm add @nextui-org/button\n\nPackages: +1\n\n+\n\nProgress: resolved 470, reused 462, downloaded 0, added 0, done\n\ndependencies:\n\n\\+ @nextui-org/button 2.0.24\n\nDone in 3.4s\n\nTailwind CSS settings have been updated in: /project-path/tailwind.config.js\n\n✅ Components added successfully\n\n## [upgrade](#upgrade)\n\nUpgrade the NextUI components to the latest version.\n\nnextui upgrade \\[components...\\] \\[options\\]\n\n### [Options](#options-2)\n\n*   `-p --packagePath` \\[string\\] The path to the package.json file.\n*   `-a --all` \\[boolean\\] Upgrade all the NextUI components (default: `false`).\n*   `-h, --help` Display help for commands.\n\n### [Example](#example-2)\n\nOutput:\n\nNextUI CLI v0.2.1\n\n╭───────────────────────── Component ─────────────────────────╮\n\n│  @nextui-org/button              ^2.0.11  -\\>  ^2.0.31       │\n\n╰─────────────────────────────────────────────────────────────╯\n\nRequired min version: @nextui-org/theme\\>=2.1.0, tailwindcss\\>=3.4.0\n\n╭───────────────────── PeerDependencies ─────────────────────╮\n\n│  @nextui-org/theme               2.0.1    -\\>  2.1.0        │\n\n│  tailwindcss                     ^3.2.3   -\\>  ^3.4.0       │\n\n╰────────────────────────────────────────────────────────────╯\n\n2 minor, 1 patch\n\n? Would you like to proceed with the upgrade? › - Use arrow-keys. Return to submit.\n\n❯   Yes\n\n    No\n\npnpm add @nextui-org/button@2.0.31 @nextui-org/theme@2.1.0 tailwindcss@3.4.0\n\nAlready up to date\n\nProgress: resolved 474, reused 465, downloaded 0, added 0, done\n\nDone in 2.9s\n\n✅ Upgrade complete. All components are up to date.\n\n## [remove](#remove)\n\nRemove NextUI components from your project.\n\n> **Note**: If there are no NextUI components after removing, the required content will also be removed.\\_createMdxContent\n\nnextui remove \\[components...\\] \\[options\\]\n\n### [Options](#options-3)\n\n*   `-p --packagePath` \\[string\\] The path to the package.json file.\n*   `-a --all` \\[boolean\\] Remove all the NextUI components (default: `false`).\n*   `-tw --tailwindPath` \\[string\\] The path to the tailwind.config file file.\n*   `--prettier` \\[boolean\\] Add prettier format in the add content which required installed prettier - (default: false).\n\n### [Example](#example-3)\n\nOutput:\n\nNextUI CLI v0.2.1\n\n❗️ Components slated for removal:\n\n╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n\n│   Package              │   Version              │   Status   │   Docs                                        │\n\n│──────────────────────────────────────────────────────────────────────────────────────────────────────────────│\n\n│   @nextui-org/button   │   2.0.27 🚀latest      │   stable   │   https://nextui.org/docs/components/button   │\n\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n? Confirm removal of these components: › - Use arrow-keys. Return to submit.\n\n❯   Yes\n\n    No\n\npnpm remove  @nextui-org/button\n\nAlready up to date\n\nProgress: resolved 474, reused 465, downloaded 0, added 0, done\n\ndependencies:\n\n\\- @nextui-org/button 2.0.27\n\nDone in 2.1s\n\nRemove the removed components tailwind content in file:/project-path/tailwind.config.js\n\n✅ Successfully removed the specified NextUI components: @nextui-org/button\n\n## [list](#list)\n\nShow details of installed components.\n\n### [Options](#options-4)\n\n*   `-p --packagePath` \\[string\\] The path to the package.json file\n*   `-r --remote` List all components available remotely\n\n### [Example](#example-4)\n\nOutput:\n\nNextUI CLI v0.2.1\n\nCurrent installed components:\n\n╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n\n│   Package                    │   Version              │   Status    │   Docs                                              │\n\n│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│\n\n│   @nextui-org/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://nextui.org/docs/components/autocomplete   │\n\n│   @nextui-org/badge          │   2.0.24 🚀latest      │   stable    │   https://nextui.org/docs/components/badge          │\n\n│   @nextui-org/button         │   2.0.27 🚀latest      │   stable    │   https://nextui.org/docs/components/button         │\n\n│   @nextui-org/chip           │   2.0.25 🚀latest      │   stable    │   https://nextui.org/docs/components/chip           │\n\n╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n## [doctor](#doctor)\n\nDiagnose problems in your project.\n\n> 1.  Check whether have `redundant dependencies` in the project\n> 2.  Check whether the NextUI components `required dependencies are installed` in the project\n> 3.  Check the required `tailwind.config.js` file and the content is correct\n> 4.  Check `.npmrc` is correct when using `pnpm`\n> 5.  Check `peerDependencies with required version` are installed in the project\n\n### [Options](#options-5)\n\n*   `-p` `--packagePath` \\[string\\] The path to the package.json file\n*   `-tw` `--tailwindPath` \\[string\\] The path to the tailwind.config file file\n*   `-app` `--appPath` \\[string\\] The path to the App.tsx file\n*   `-ca` `--checkApp` \\[boolean\\] Open check App (default: `true`)\n*   `-ct` `--checkTailwind` \\[boolean\\] Open check tailwind.config file (default: `true`)\n*   `-cp` `--checkPnpm` \\[boolean\\] Open check Pnpm (default: `true`)\n\n### [Example](#example-5)\n\nOutput:\n\nIf there is a problem in your project, the `doctor` command will display the problem information.\n\nNextUI CLI v0.2.1\n\nNextUI CLI: ❌ Your project has 1 issue that require attention\n\n❗️Issue 1: missingTailwind\n\nMissing tailwind.config.(j|t)s file. To set up, visit: https://nextui.org/docs/guide/installation#tailwind-css-setup\n\nOtherwise, the `doctor` command will display the following message.\n\nNextUI CLI v0.2.1\n\n✅ Your project has no detected issues.\n\n## [env](#env)\n\nDisplay debug information about the local environment.\n\n### [Options](#options-6)\n\n*   `-p --packagePath` \\[string\\] The path to the package.json file\n\n### [Example](#example-6)\n\nOutput:\n\nNextUI CLI 0.2.1\n\nCurrent installed components:\n\n╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n\n│   Package                    │   Version              │   Status    │   Docs                                              │\n\n│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│\n\n│   @nextui-org/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://nextui.org/docs/components/autocomplete   │\n\n│   @nextui-org/badge          │   2.0.24 🚀latest      │   stable    │   https://nextui.org/docs/components/badge          │\n\n│   @nextui-org/button         │   2.0.27 🚀latest      │   stable    │   https://nextui.org/docs/components/button         │\n\n│   @nextui-org/chip           │   2.0.25 🚀latest      │   stable    │   https://nextui.org/docs/components/chip           │\n\n╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\nEnvironment Info:\n\n  System:\n\n    OS: darwin\n\n    CPU: arm64\n\n  Binaries:\n\n    Node: v18.18.2",
    "title": "NextUI CLI | NextUI - Beautiful, fast and modern React UI Library",
    "description": "API References for NextUI CLI",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/customization/custom-variants",
    "markdown": "# Custom Variants | NextUI - Beautiful, fast and modern React UI Library\n\nNextUI allows you to create new variants for components that better suit your project's needs. This can be done by extending the component and its properties, and customizing the styles.\n\nYou can create or override the component `variants`, `defaultVariants` and `compoundVariants`.\n\n> **Note**: For one-off customizations, refer to the [Override Styles](https://nextui.org/docs/customization/override-styles) documentation.\n\n## [Creating new variants for non-slots components](#creating-new-variants-for-non-slots-components)\n\nThe [Button](https://nextui.org/docs/components/button) component is a non-slots component, meaning that it does not have any slots that can be customized.\n\nFor this example, we will be using the `Button` component's styles source code as a reference. Go [here](https://github.com/nextui-org/nextui/blob/feat/v2/packages/core/theme/src/components/button.ts) to view the styles source code.\n\n> **Note**: If you are not familiar with the variants concept, please refer to the [Tailwind Variants](https://www.tailwind-variants.org/docs/variants) documentation.\n\n### [Extend the original component variants](#extend-the-original-component-variants)\n\nTo create or override variants you need to use the `extendVariants` function. This function allows you to create a new component based on the original component, and customize its variants.\n\n// MyButton.tsx\n\nimport {extendVariants, Button} from \"@nextui-org/react\";\n\nexport const MyButton \\= extendVariants(Button, {\n\n  variants: {\n\n    // <- modify/add variants\n\n    color: {\n\n      olive: \"text-\\[#000\\] bg-\\[#84cc16\\]\",\n\n      orange: \"bg-\\[#ff8c00\\] text-\\[#fff\\]\",\n\n      violet: \"bg-\\[#8b5cf6\\] text-\\[#fff\\]\",\n\n    },\n\n    isDisabled: {\n\n      true: \"bg-\\[#eaeaea\\] text-\\[#000\\] opacity-50 cursor-not-allowed\",\n\n    },\n\n    size: {\n\n      xs: \"px-2 min-w-12 h-6 text-tiny gap-1 rounded-small\",\n\n      md: \"px-4 min-w-20 h-10 text-small gap-2 rounded-small\",\n\n      xl: \"px-8 min-w-28 h-14 text-large gap-4 rounded-medium\",\n\n    },\n\n  },\n\n  defaultVariants: { // <- modify/add default variants\n\n    color: \"olive\",\n\n    size: \"xl\",\n\n  },\n\n  compoundVariants: \\[ // <- modify/add compound variants\n\n    {\n\n      isDisabled: true,\n\n      color: \"olive\",\n\n      class: \"bg-\\[#84cc16\\]/80 opacity-100\",\n\n    },\n\n  \\],\n\n});\n\n### [Use your custom component in your application](#use-your-custom-component-in-your-application)\n\nThen, you can now use your custom component in your application. Here, `MyButton` is used with the color set to `olive` and the size set to `xl`.\n\n// App.tsx\n\nimport {MyButton} from \"./MyButton\";\n\nconst MyApp \\= () \\=> {\n\n  return (\n\n    <MyButton color\\=\"olive\" size\\=\"md\"\\>\n\n      Press Me\n\n    </MyButton\\>\n\n  );\n\n};\n\nThe new component will include the original props of the `Button` component, plus the new variants that you have created.\n\n## [Creating new variants for slots components](#creating-new-variants-for-slots-components)\n\nIt is also possible to use the `extendVariants` function to add or override variants for components that have slots.\n\nThe [Input](https://nextui.org/docs/components/input) component is a slots component, meaning that it has slots that can be customized.\n\nFor this example, we will be using the `Input` component's styles source code as a reference. Go [here](https://github.com/nextui-org/nextui/blob/feat/v2/packages/core/theme/src/components/input.ts) to view the styles source code.\n\n> **Note**: If you are not familiar with the variants/slots concept, please refer to the [Tailwind Variants](https://www.tailwind-variants.org/docs/slots#slots-with-variants) documentation.\n\n### [Extend the original component variants](#extend-the-original-component-variants-1)\n\nTo create or override variants you need to use the `extendVariants` function. This function allows you to create a new component based on the original component, and customize its variants.\n\n// MyInput.tsx\n\nimport {extendVariants, Input} from \"@nextui-org/react\";\n\nconst MyInput \\= extendVariants(Input, {\n\n  variants: { // <- modify/add variants\n\n    color: {\n\n      stone: { // <- add a new color variant\n\n        inputWrapper: \\[ // <- Input wrapper slot\n\n          \"bg-zinc-100\",\n\n          \"border\",\n\n          \"shadow\",\n\n          \"transition-colors\",\n\n          \"focus-within:bg-zinc-100\",\n\n          \"data-\\[hover=true\\]:border-zinc-600\",\n\n          \"data-\\[hover=true\\]:bg-zinc-100\",\n\n          \"group-data-\\[focus=true\\]:border-zinc-600\",\n\n          // dark theme\n\n          \"dark:bg-zinc-900\",\n\n          \"dark:border-zinc-800\",\n\n          \"dark:data-\\[hover=true\\]:bg-zinc-900\",\n\n          \"dark:focus-within:bg-zinc-900\",\n\n        \\],\n\n        input: \\[  // <- Input element slot\n\n          \"text-zinc-800\",\n\n          \"placeholder:text-zinc-600\",\n\n          // dark theme\n\n          \"dark:text-zinc-400\",\n\n          \"dark:placeholder:text-zinc-600\",\n\n        \\],\n\n      },\n\n    },\n\n    size: {\n\n      xs: {\n\n        inputWrapper: \"h-6 min-h-6 px-1\",\n\n        input: \"text-tiny\",\n\n      },\n\n      md: {\n\n        inputWrapper: \"h-10 min-h-10\",\n\n        input: \"text-small\",\n\n      },\n\n      xl: {\n\n        inputWrapper: \"h-14 min-h-14\",\n\n        input: \"text-medium\",\n\n      },\n\n    },\n\n    radius: {\n\n      xs: {\n\n        inputWrapper: \"rounded\",\n\n      },\n\n      sm: {\n\n        inputWrapper: \"rounded-\\[4px\\]\",\n\n      },\n\n    },\n\n    textSize: {\n\n      base: {\n\n        input: \"text-base\",\n\n      },\n\n    },\n\n    removeLabel: {\n\n      true: {\n\n        label: \"hidden\",\n\n      },\n\n      false: {},\n\n    },\n\n  },\n\n  defaultVariants: {\n\n    color: \"stone\",\n\n    textSize: \"base\",\n\n    removeLabel: true,\n\n  },\n\n});\n\n### [Use your custom component in your application](#use-your-custom-component-in-your-application-1)\n\nThen, you can now use your custom component in your application. Here, `MyInput` is used with the color set to `slate` and the size set to `xl`.\n\n// App.tsx\n\nimport {MyInput} from \"./MyInput\";\n\nimport {SearchIcon} from \"your-icons-library\";\n\nconst MyApp \\= () \\=> {\n\n  return (\n\n    <MyInput\n\n      isClearable\n\n      placeholder\\=\"Search...\"\n\n      radius\\=\"md\"\n\n      size\\=\"md\"\n\n      startContent\\={<SearchIcon className\\=\"text-zinc-500\" size\\={16} />}\n\n    />\n\n  );\n\n};\n\nThe new component will include the original props of the [Input](https://nextui.org/docs/components/input) component, plus the new variants that you have created.\n\n> All NextUI components have the `Styles source` link on top of the page. This link will take you to the styles source code of the component. You can use this as a reference when creating your own custom component.\n\n### [Types](#types)\n\n### [Main Function](#main-function)\n\nconst Component \\= extendVariants(BaseComponent, options, config);\n\n/\\*\\*\n\n \\* BaseComponent -> NextUI component to extend\n\n \\* options -> the variants to add/modify\n\n \\* config -> config to extend the component\n\n \\*/\n\n### [Options](#options)\n\ntype ExtendVariantsOptions \\= {\n\n  variants?: Record<string, Record<string, ClassValue\\>>;\n\n  defaultVariants?: Record<string, ClassValue\\>;\n\n  compoundVariants?: Array<Record<string, string\\> & ClassProp\\>;\n\n};\n\n### [Config](#config)\n\n/\\*\\*\n\n   \\* Whether to merge the class names with \\`tailwind-merge\\` library.\n\n   \\* It's avoid to have duplicate tailwind classes. (Recommended)\n\n   \\* @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/README.md\n\n   \\* @default true\n\n   \\*/\n\n  twMerge?: boolean;\n\n  /\\*\\*\n\n   \\* The config object for \\`tailwind-merge\\` library.\n\n   \\* @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md\n\n   \\*/\n\n  twMergeConfig?: TWMergeConfig;\n\n> **Note**: See the [Tailwind Merge Config](https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md) to learn more about it.",
    "title": "Custom Variants | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Learn how to create new variants for the NextUI components.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/api-references/nextui-provider",
    "markdown": "# NextUI Provider | NextUI - Beautiful, fast and modern React UI Library\n\nAPI reference for the `NextUIProvider`.\n\n* * *\n\n## [Import](#import)\n\n## [Usage](#usage)\n\nimport \\* as React from \"react\";\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nfunction App() {\n\n  return (\n\n    <NextUIProvider\\>\n\n      <YourApplication />\n\n    </NextUIProvider\\>\n\n  );\n\n}\n\n## [Props](#props)\n\n`navigate`\n\n*   **Description**: Provides a client side router to all nested components such as Link, Menu, Tabs, Table, etc.\n*   **Type**: `((path: string) => void) | undefined`\n\n`locale`\n\n*   **Description**: The locale to apply to the children.\n*   **Type**: `string | undefined`\n*   **Default**: `en-US`\n\nHere's the supported locales. By default, It is `en-US`.\n\nconst localeValues \\= \\[\n\n  'fr-FR', 'fr-CA', 'de-DE', 'en-US', 'en-GB', 'ja-JP',\n\n  'da-DK', 'nl-NL', 'fi-FI', 'it-IT', 'nb-NO', 'es-ES', \n\n  'sv-SE', 'pt-BR', 'zh-CN', 'zh-TW', 'ko-KR', 'bg-BG', \n\n  'hr-HR', 'cs-CZ', 'et-EE', 'hu-HU', 'lv-LV', 'lt-LT', \n\n  'pl-PL', 'ro-RO', 'ru-RU', 'sr-SP', 'sk-SK', 'sl-SI', \n\n  'tr-TR', 'uk-UA', 'ar-AE', 'ar-DZ', 'AR-EG', 'ar-SA', \n\n  'el-GR', 'he-IL', 'fa-AF', 'am-ET', 'hi-IN', 'th-TH'\n\n\\];\n\nHere's an example to set a Spanish locale.\n\n\"use client\";\n\nimport {type ReactNode} from \"react\";\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nexport function AppProvider(props: AppProviderProps) {\n\n  const {children, className} \\= props;\n\n  return (\n\n    <NextUIProvider locale\\=\"es-ES\" className\\={className}\\>\n\n      {children}\n\n    </NextUIProvider\\>\n\n  );\n\n}\n\ninterface AppProviderProps {\n\n  children: ReactNode;\n\n  className?: string;\n\n}\n\n`defaultDates`\n\n*   **Description**: The default dates range that can be selected in the calendar.\n*   **Type**: `{ minDate?: CalendarDate | undefined; maxDate?: CalendarDate | undefined; }`\n*   **Default**: `{ minDate: new CalendarDate(1900, 1, 1), maxDate: new CalendarDate(2099, 12, 31) }`\n\n`createCalendar`\n\n*   **Description**: This function helps to reduce the bundle size by providing a custom calendar system.\n    \n    By default, this includes all calendar systems supported by `@internationalized/date`. However, if your application supports a more limited set of regions, or you know you will only be picking dates in a certain calendar system, you can reduce your bundle size by providing your own implementation of `createCalendar` that includes a subset of these Calendar implementations.\n    \n    For example, if your application only supports Gregorian dates, you could implement a `createCalendar` function like this:\n    \n    import {GregorianCalendar} from '@internationalized/date';\n    \n    function createCalendar(identifier) {\n    \n    switch (identifier) {\n    \n      case 'gregory':\n    \n        return new GregorianCalendar();\n    \n      default:\n    \n        throw new Error(\\`Unsupported calendar ${identifier}\\`);\n    \n    }\n    \n    }\n    \n    This way, only GregorianCalendar is imported, and the other calendar implementations can be tree-shaken.\n    \n*   **Type**: `((calendar: SupportedCalendars) => Calendar | null) | undefined`\n    \n\n`disableAnimation`\n\n*   **Description**: Disables animations globally. This will also avoid `framer-motion` features to be loaded in the bundle which can potentially reduce the bundle size.\n*   **Type**: `boolean`\n*   **Default**: `false`\n\n`disableRipple`\n\n*   **Description**: Disables ripple effect globally.\n*   **Type**: `boolean`\n*   **Default**: `false`\n\n`skipFramerMotionAnimations`\n\n*   **Description**: Controls whether `framer-motion` animations are skipped within the application. This property is automatically enabled (`true`) when the `disableAnimation` prop is set to `true`, effectively skipping all `framer-motion` animations. To retain `framer-motion` animations while using the `disableAnimation` prop for other purposes, set this to `false`. However, note that animations in NextUI Components are still omitted if the `disableAnimation` prop is `true`.\n*   **Type**: `boolean`\n*   **Default**: Same as `disableAnimation`\n\n`validationBehavior`\n\n*   **Description**: Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.\n*   **Type**: `native | aria`\n*   **Default**: `aria`\n\n* * *\n\n## [Types](#types)\n\n`CalendarDate`\n\n*   **Description**: A [CalendarDate](https://react-spectrum.adobe.com/internationalized/date/CalendarDate.html) represents a date without any time components in a specific calendar system from `@internationalized/date`.\n*   **Type**: `import {CalendarDate} from '@internationalized/date';`\n\n### [SupportedCalendars](#supportedcalendars)\n\nSupported react-aria i18n calendars.\n\ntype SupportedCalendars \\=\n\n  | \"buddhist\"\n\n  | \"ethiopic\"\n\n  | \"ethioaa\"\n\n  | \"coptic\"\n\n  | \"hebrew\"\n\n  | \"indian\"\n\n  | \"islamic-civil\"\n\n  | \"islamic-tbla\"\n\n  | \"islamic-umalqura\"\n\n  | \"japanese\"\n\n  | \"persian\"\n\n  | \"roc\"\n\n  | \"gregory\";",
    "title": "NextUI Provider | NextUI - Beautiful, fast and modern React UI Library",
    "description": "API References for NextUI Provider",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/link",
    "markdown": "# Link | NextUI - Beautiful, fast and modern React UI Library\n\nLinks allow users to click their way from page to page. This component is styled to resemble a hyperlink and semantically renders an `<a>`\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [Underline](#underline)\n\n### [External](#external)\n\nIf you pass the `isExternal` prop, the link will have the `target=\"_blank\"` and `rel=\"noopener noreferrer\"` attributes.\n\n### [Custom Anchor Icon](#custom-anchor-icon)\n\n### [Block Link](#block-link)\n\nIf you pass the `isBlock` prop, the link will be rendered as a block element with a `hover` effect.\n\n### [Polymorphic Component](#polymorphic-component)\n\nNextUI components expose a `as` prop that allows you to customize the React element type that is used to render the component.\n\n### [Routing](#routing)\n\nThe `<Link>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and [React Router](https://reactrouter.com/en/main). See the [Routing](https://nextui.org/docs/guide/routing) guide to learn how to set this up.\n\nimport {Link} from \"@nextui-org/react\";\n\nfunction App() {\n\n  return (\n\n    <\\>\n\n      <Link href\\=\"/home\"\\>Home</Link\\>\n\n      <Link href\\=\"/about\"\\>About</Link\\>\n\n    </\\>\n\n  );\n\n}\n\n### [Custom Implementation](#custom-implementation)\n\nIn case you need to customize the link even further, you can use the `useLink` hook to create your own implementation.\n\n## [Data Attributes](#data-attributes)\n\n`Link` has the following attributes on the `base` element:\n\n*   **data-focus**: When the link is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)\n*   **data-focus-visible**: When the link is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)\n*   **data-disabled**: When the link is disabled. Based on `isDisabled` prop.\n\n## [Accessibility](#accessibility)\n\n*   Support for mouse, touch, and keyboard interactions.\n*   Support for navigation links via `<a>` elements or custom element types via ARIA.\n*   Support for disabled links.\n*   Keyboard users may activate links using the Enter key.\n\n## [API](#api)\n\n### [Link Props](#link-props)\n\n### [Link Events](#link-events)",
    "title": "Link | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Links allow users to click their way from page to page. This component is styled to resemble a hyperlink and semantically renders an <a>",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/listbox",
    "markdown": "# Listbox | NextUI - Beautiful, fast and modern React UI Library\n\nA listbox displays a list of options and allows a user to select one or more of them.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 3 listbox-related components:\n\n*   **Listbox**: The main component, which is a wrapper for the other components.\n*   **ListboxSection**: The component that contains a group of listbox items.\n*   **ListboxItem**: The component that represents a listbox item.\n\n## [Usage](#usage)\n\n### [Dynamic items](#dynamic-items)\n\nListbox follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.\n\n*   **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.\n*   **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.\n\n### [Disabled Keys](#disabled-keys)\n\nListbox items can be disabled using the `disabledKeys` prop to the `Listbox` component.\n\n> **Note**: It's important to have a unique key for each item, otherwise the disabled keys will not work.\n\n### [Variants](#variants)\n\nYou can use the `variant` in the `Listbox` component to change the `hover` style of the listbox items.\n\n### [Single Selection](#single-selection)\n\nYou can set the `selectionMode` property as `single` to allow the user to select only one item at a time.\n\n### [Multiple Selection](#multiple-selection)\n\nYou can set the `selectionMode` property as `multiple` to allow the user to select multiple items at a time.\n\n> **Note**: To allow empty selection, you can set the `disallowEmptySelection` property as `false`.\n\n### [With Icons](#with-icons)\n\nIt is possible to add icons to the listbox items using the `startContent` / `endContent` props.\n\n> **Note**: If you use `currentColor` as the icon color, the icon will have the same color as the item text.\n\n### [With Description](#with-description)\n\nYou can use the `description` prop to add a description to the listbox item.\n\n### [With Top & Bottom Content](#with-top--bottom-content)\n\nYou can use the `topContent` and `bottomContent` props to add content above and below the listbox items.\n\n### [With Sections](#with-sections)\n\nYou can use the `ListboxSection` component to group listbox items.\n\n> **Note**: Sections without a `title` must provide an `aria-label` for accessibility.\n\n### [Routing](#routing)\n\nThe `<ListboxItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and [React Router](https://reactrouter.com/en/main). See the [Routing](https://nextui.org/docs/guide/routing) guide to learn how to set this up.\n\nimport {Listbox, ListboxItem} from \"@nextui-org/react\";\n\nfunction App() {\n\n  return (\n\n    <Listbox\\>\n\n      <ListboxItem key\\=\"home\" href\\=\"/home\"\\>\n\n        Home\n\n      </ListboxItem\\>\n\n      <ListboxItem key\\=\"about\" href\\=\"/about\"\\>\n\n        About\n\n      </ListboxItem\\>\n\n    </Listbox\\>\n\n  );\n\n}\n\n## [Slots](#slots)\n\nListbox has 3 components with slots the base one `Listbox`, `ListboxItem` and `ListboxSection` components.\n\n### [Listbox](#listbox-1)\n\n*   **base**: The main wrapper for the listbox component. This slot wraps the `topContent`, `bottomContent` and the `list` slot.\n*   **list**: The slot for the listbox component. You can see this slot as the `ul` slot.\n*   **emptyContent**: The slot content to display when the collection is empty.\n\n### [ListboxItem](#listboxitem)\n\n*   **base**: The main slot for the listbox item. It wraps all the other slots.\n*   **wrapper**: The `title` and `description` wrapper.\n*   **title**: The title of the listbox item.\n*   **description**: The description of the listbox item.\n*   **selectedIcon**: The selected icon slot. This is only visible when the item is selected.\n\n### [ListboxSection](#listboxsection)\n\n*   **base**: The main slot for the listbox section. It wraps all the other slots.\n*   **heading**: The title that is render on top of the section group.\n*   **group**: The group of listbox items.\n*   **divider**: The divider that is render between the groups. This is only visible when `showDivider` is `true`.\n\n### [Customizing the listbox](#customizing-the-listbox)\n\nYou can customize the `Listbox` items style by using the `itemClasses` prop and passing custom Tailwind CSS classes.\n\n> **Note**: In the above example, we've utilized the [Boxicons](https://boxicons.com/) icons collection.\n\n### [Keyboard Interactions](#keyboard-interactions)\n\n## [Data Attributes](#data-attributes)\n\n`ListboxItem` has the following attributes on the `base` element:\n\n*   **data-disabled**: When the listbox item is disabled. Based on listbox `disabledKeys` prop.\n*   **data-selected**: When the listbox item is selected. Based on listbox `selectedKeys` prop.\n*   **data-selectable**: When the listbox item is selectable. Based on listbox `selectionMode` prop.\n*   **data-hover**: When the listbox item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-pressed**: When the listbox item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-focus**: When the listbox item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the listbox item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n## [Accessibility](#accessibility)\n\n*   Exposed to assistive technology as a `listbox` using ARIA.\n*   Support for single, multiple, or no selection.\n*   Support for disabled items.\n*   Support for sections.\n*   Labeling support for accessibility.\n*   Support for mouse, touch, and keyboard interactions.\n*   Tab stop focus management.\n*   Keyboard navigation support including arrow keys, home/end, page up/down, select all, and clear.\n*   Automatic scrolling support during keyboard navigation.\n*   Typeahead to allow focusing options by typing text.\n\n## [API](#api)\n\n### [Listbox Props](#listbox-props)\n\n### [Listbox Events](#listbox-events)\n\n* * *\n\n### [ListboxSection Props](#listboxsection-props)\n\n* * *\n\n### [ListboxItem Props](#listboxitem-props)\n\n### [ListboxItem Events](#listboxitem-events)\n\n* * *\n\n### [Types](#types)\n\n#### [Listbox Item Selected Icon Props](#listbox-item-selected-icon-props)\n\nexport type ListboxItemSelectedIconProps \\= {\n\n  /\\*\\*\n\n   \\* The current icon, usually an checkmark icon.\n\n   \\*/\n\n  icon?: ReactNode;\n\n  /\\*\\*\n\n   \\* The current selected status.\n\n   \\*/\n\n  isSelected?: boolean;\n\n  /\\*\\*\n\n   \\* The current disabled status.\n\n   \\* @default false\n\n   \\*/\n\n  isDisabled?: boolean;\n\n};\n\ntype selectedIcon?: ReactNode | ((props: ListboxItemSelectedIconProps) \\=> ReactNode) | null;",
    "title": "Listbox | NextUI - Beautiful, fast and modern React UI Library",
    "description": "A listbox displays a list of options and allows a user to select one or more of them.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/",
    "markdown": "# Button | NextUI - Beautiful, fast and modern React UI Library\n\nButtons allow users to perform actions and choose with a single tap.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 2 button-related components:\n\n*   **Button**: The main component to display a button.\n*   **ButtonGroup**: A wrapper component to display a group of buttons.\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Sizes](#sizes)\n\n### [Radius](#radius)\n\n### [Colors](#colors)\n\n### [Variants](#variants)\n\n### [Loading](#loading)\n\nPass the `isLoading` prop to display a [Spinner](https://nextui.org/docs/components/spinner) component inside the button.\n\nYou can also customize the loading spinner by passing the a custom component to the `spinner` prop.\n\n### [With Icons](#with-icons)\n\nYou can add icons to the `Button` by passing the `startContent` or `endContent` props.\n\n### [Icon Only](#icon-only)\n\nYou can also display a button without text by passing the `isIconOnly` prop and the desired icon as `children`.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Button` component by passing custom Tailwind CSS classes to the component slots.\n\n> Custom class names will override the default ones thanks to [Tailwind Merge](https://github.com/dcastil/tailwind-merge) library. It means that you don't need to worry about class conflicts.\n\n### [Custom Implementation](#custom-implementation)\n\nYou can also use the `useButton` hook to create your own button component.\n\n## [Button Group](#button-group)\n\n### [Group Disabled](#group-disabled)\n\nThe `ButtonGroup` component also accepts the `isDisabled` prop to disable all buttons inside it.\n\n### [Group Use case](#group-use-case)\n\nA common use case for the `ButtonGroup` component is to display a group of two buttons one for the selected value and another for the `dropdown`.\n\n> See the [Dropdown](https://nextui.org/docs/components/dropdown) component for more details.\n\n## [Data Attributes](#data-attributes)\n\n`Button` has the following attributes on the `base` element:\n\n*   **data-hover**: When the button is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-focus**: When the button is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the button is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-disabled**: When the button is disabled. Based on `isDisabled` prop.\n*   **data-pressed**: When the button is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-loading**: When the button is loading. Based on `isLoading` prop.\n\n## [Accessibility](#accessibility)\n\n*   Button has role of `button`.\n*   Keyboard event support for Space and Enter keys.\n*   Mouse and touch event handling, and press state management.\n*   Keyboard focus management and cross browser normalization.\n\nWe recommend to read this [blog post](https://react-spectrum.adobe.com/blog/building-a-button-part-1.html) about the complexities of building buttons that work well across devices and interaction methods.\n\n## [API](#api)\n\n### [Button Props](#button-props)\n\n### [Button Events](#button-events)\n\n### [Button Group Props](#button-group-props)",
    "title": "Button | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Buttons allow users to perform actions and choose with a single tap.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/modal",
    "markdown": "# Modal | NextUI - Beautiful, fast and modern React UI Library\n\nDisplays a dialog with a custom content that requires attention or provides additional information.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 5 modal-related components:\n\n*   **Modal**: The main component to display a modal.\n*   **ModalContent**: The wrapper of the other modal components.\n*   **ModalHeader**: The header of the modal.\n*   **ModalBody**: The body of the modal.\n*   **ModalFooter**: The footer of the modal.\n\n## [Usage](#usage)\n\nWhen the modal opens:\n\n*   Focus is bounded within the modal and set to the first tabbable element.\n*   Content behind a modal dialog is inert, meaning that users cannot interact with it.\n\n### [Sizes](#sizes)\n\n### [Non-dissmissable](#non-dissmissable)\n\nBy default, the modal can be closed by clicking on the overlay or pressing the Esc key. You can disable this behavior by setting the following properties:\n\n*   Set the `isDismissable` property to `false` to prevent the modal from closing when clicking on the overlay.\n*   Set the `isKeyboardDismissDisabled` property to `true` to prevent the modal from closing when pressing the Esc key.\n\n### [Modal placement](#modal-placement)\n\nBy default the modal is centered on screens higher than `sm` and is at the `bottom` of the screen on mobile. This placement is called `auto`, but you can change it by using the `placement` prop.\n\n> **Note**: The `top-center` and `bottom-center` positions mean that the modal is positioned at the top / bottom of the screen on mobile and at the center of the screen on desktop.\n\n### [Overflow scroll](#overflow-scroll)\n\nYou can use the `scrollBehavior` prop to set the scroll behavior of the modal.\n\n*   **inside**: The modal content will be scrollable.\n*   **outside**: The modal content will be scrollable and the modal will be fixed.\n\n### [With Form](#with-form)\n\nThe `Modal` handles the focus within the modal content. It means that you can use the modal with form elements without any problem. the focus returns to the trigger when the modal closes.\n\n> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the modal opens.\n\n### [Backdrop](#backdrop)\n\nThe `Modal` component has a `backdrop` prop to show a backdrop behind the modal. The backdrop can be either `transparent`, `opaque` or `blur`. The default value is `opaque`.\n\n### [Custom Backdrop](#custom-backdrop)\n\nYou can customize the backdrop by using the `backdrop` slot.\n\n### [Custom Motion](#custom-motion)\n\nModal offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n## [Slots](#slots)\n\n*   **wrapper**: The wrapper slot of the modal. It wraps the `base` and the `backdrop` slots.\n*   **base**: The main slot of the modal content.\n*   **backdrop**: The backdrop slot, it is displayed behind the modal.\n*   **header**: The header of the modal, it is displayed at the top of the modal.\n*   **body**: The body of the modal, it is displayed in the middle of the modal.\n*   **footer**: The footer of the modal, it is displayed at the bottom of the modal.\n*   **closeButton**: The close button of the modal.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Modal` component by passing custom Tailwind CSS classes to the component slots.\n\n## [Data Attributes](#data-attributes)\n\n`Modal` has the following attributes on the `base` element:\n\n*   **data-open**: When the modal is open. Based on modal state.\n*   **data-dismissable**: When the modal is dismissable. Based on `isDismissable` prop.\n\n## [Accessibility](#accessibility)\n\n*   Content outside the modal is hidden from assistive technologies while it is open.\n*   The modal optionally closes when interacting outside, or pressing the Esc key.\n*   Focus is moved into the modal on mount, and restored to the trigger element on unmount.\n*   While open, focus is contained within the modal, preventing the user from tabbing outside.\n*   Scrolling the page behind the modal is prevented while it is open, including in mobile browsers.\n\n## [API](#api)\n\n### [Modal Props](#modal-props)\n\n### [Modal Events](#modal-events)\n\n### [Modal types](#modal-types)\n\n#### [Motion Props](#motion-props)\n\nexport type MotionProps \\= HTMLMotionProps<\"div\"\\>; // @see https://www.framer.com/motion/",
    "title": "Modal | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Display a dialog with a custom content that requires attention or provides additional information.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/avatar",
    "markdown": "# Avatar | NextUI - Beautiful, fast and modern React UI Library\n\nThe Avatar component is used to represent a user, and displays the profile picture, initials or fallback icon.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 3 avatar-related components:\n\n*   **Avatar**: The main component to display an avatar.\n*   **AvatarGroup**: A wrapper component to display a group of avatars.\n*   **AvatarIcon**: The default icon used as fallback when the image fails to load.\n\n## [Usage](#usage)\n\n### [Sizes](#sizes)\n\n### [Disabled](#disabled)\n\n### [Bordered](#bordered)\n\n### [Radius](#radius)\n\n### [Colors](#colors)\n\n### [Avatar Fallbacks](#avatar-fallbacks)\n\nIf there is an error loading the `src` of the avatar, there are 2 fallbacks:\n\n*   If there's a `name` prop, we use it to generate the initials and a random, accessible background color.\n*   If there's no `name` prop, we use a default avatar.\n\nIf the `showFallback` is not passed, the fallbacks will not be displayed.\n\n### [Custom Fallback](#custom-fallback)\n\nYou can also provide a custom fallback component to be displayed when the `src` fails to load.\n\n### [Custom Implementation](#custom-implementation)\n\nIn case you need to customize the avatar even further, you can use the `useAvatar` hook to create your own implementation.\n\n### [Custom initials logic](#custom-initials-logic)\n\nIt is possible to customize the logic used to generate the initials by passing a function to the `getInitials` prop. By default we merge the first characters of each word in the `name` prop.\n\n## [Avatar Group](#avatar-group)\n\n### [Group Disabled](#group-disabled)\n\n### [Group Max Count](#group-max-count)\n\nYou can limit the number of avatars displayed by passing the `max` prop to the `AvatarGroup` component.\n\n### [Group Total Count](#group-total-count)\n\nYou can display the total number of avatars by passing the `total` prop to the `AvatarGroup` component.\n\n### [Group Custom count](#group-custom-count)\n\nNextUI provides a `renderCount` prop to customize the count displayed when the `total` prop is passed.\n\n### [Group Grid](#group-grid)\n\nBy passing the `isGrid` prop to the `AvatarGroup` component, the avatars will be displayed in a grid layout.\n\n### [Group Custom Implementation](#group-custom-implementation)\n\nIn case you need to customize the avatar group even further, you can use the `useAvatarGroup` hook and the `AvatarGroupProvider` to create your own implementation.\n\n## [Slots](#slots)\n\n*   **base**: Avatar wrapper, it includes styles for focus ring, position, and general appearance.\n*   **img**: Image element within the avatar, it includes styles for opacity transition and size.\n*   **fallback**: Fallback content when the image fails to load or is not provided, it includes styles for centering the content.\n*   **name**: Initials displayed when the image is not provided or fails to load, it includes styles for font, text alignment, and inheritance.\n*   **icon**: Icon element within the avatar, it includes styles for centering the content, text inheritance, and size.\n\n### [Custom Avatar Styles](#custom-avatar-styles)\n\nYou can customize any part of the avatar by using the `classNames` prop, each `slot` has its own `className`.\n\n## [Data Attributes](#data-attributes)\n\n`Avatar` has the following attributes on the `base` element:\n\n*   **data-hover**: When the avatar is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-focus**: When the avatar is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html), it is applied when `isFocusable` is `true` or when the `as` property is assigned as `button`.\n*   **data-focus-visible**: When the avatar is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html), it is applied when `isFocusable` is `true` or when the `as` property is assigned as `button`.\n\n## [API](#api)\n\n### [Avatar Props](#avatar-props)\n\n### [Avatar Group Props](#avatar-group-props)",
    "title": "Avatar | NextUI - Beautiful, fast and modern React UI Library",
    "description": "The Avatar component is used to represent a user, and displays the profile picture, initials or fallback icon.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/navbar",
    "markdown": "# Navbar | NextUI - Beautiful, fast and modern React UI Library\n\nA responsive navigation header positioned on top side of your page that includes support for branding, links, navigation, collapse menu and more.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 7 navbar-related components:\n\n*   **Navbar**: The main component of navbar.\n*   **NavbarBrand**: The component for branding.\n*   **NavbarContent**: The component for wrapping navbar items.\n*   **NavbarItem**: The component for navbar item.\n*   **NavbarMenuToggle**: The component for toggling navbar menu.\n*   **NavbarMenu**: The component for wrapping navbar menu items.\n*   **NavbarMenuItem**: The component for navbar menu item.\n\n## [Usage](#usage)\n\n### [Static](#static)\n\nYou can use the `position` prop to make the navbar static positioned (the default behavior is `sticky`).\n\n### [Hide on scroll](#hide-on-scroll)\n\nIt is possible to hide the navbar on scroll by using the `shouldHideOnScroll` prop.\n\nYou can use the `NavbarMenuToggle` and `NavbarMenu` components to display a togglable menu.\n\nIf you want to remove the `open` / `close` animation, you can pass the `disableAnimation={true}` prop to `Navbar` component.\n\nYou can use the `isMenuOpen` and `onMenuOpenChange` props to control the navbar menu state.\n\n### [With Border](#with-border)\n\nYou can use the `isBordered` prop to add a bottom border to the navbar.\n\n### [Disabling Blur](#disabling-blur)\n\nNavbar has a blur effect by default. You can disable it by using the `isBlurred=false` prop.\n\nIt is possible to use the [Dropdown](https://nextui.org/docs/components/dropdown) component to display a dropdown menu as navbar item.\n\n### [With Avatar](#with-avatar)\n\nExample of a navbar with avatar and dropdown menu.\n\n### [With Search Input](#with-search-input)\n\nExample of a navbar with search input.\n\n### [Customizing the active item](#customizing-the-active-item)\n\nWhen the `NavbarItem` is active, it will have a `data-active` attribute. You can use this attribute to customize it.\n\n## [Slots](#slots)\n\n*   **base**: The main slot for the navbar. It takes the full width of the parent and wraps the navbar elements including the menu.\n*   **wrapper**: The slot that contains the navbar elements such as `brand`, `content` and `toggle`.\n*   **brand**: The slot for the `NavbarBrand` component.\n*   **content**: The slot for the `NavbarContent` component.\n*   **item**: The slot for the `NavbarItem` component.\n*   **toggle**: The slot for the `NavbarMenuToggle` component.\n*   **toggleIcon**: The slot for the `NavbarMenuToggle` icon.\n*   **menu**: The slot for the `NavbarMenu` component.\n*   **menuItem**: The slot for the `NavbarMenuItem` component.\n\n## [Data Attributes](#data-attributes)\n\n`Navbar` has the following attributes on the `base` element:\n\n*   **data-menu-open**: Indicates if the navbar menu is open.\n*   **data-hidden**: Indicates if the navbar is hidden. It is used when the `shouldHideOnScroll` prop is `true`.\n\n`NavbarContent`\n\n*   **data-justify**: The justify content of the navbar content. It takes into account the correct space distribution.\n\n`NavbarItem` has the following attributes on the `base` element:\n\n*   **data-active**: Indicates if the navbar item is active. It is used when the `isActive` prop is `true`.\n\n`NavbarMenuToggle` has the following attributes on the `base` element:\n\n*   **data-open**: Indicates if the navbar menu is open. It is used when the `isMenuOpen` prop is `true`.\n*   **data-pressed**: When the navbar menu toggle is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-hover**: When the navbar menu toggle is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-focus-visible**: When the navbar menu toggle is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n`NavbarMenuItem` has the following attributes on the `base` element:\n\n*   **data-active**: Indicates if the menu item is active. It is used when the `isActive` prop is `true`.\n\n## [API](#api)\n\n### [Navbar Props](#navbar-props)\n\n### [Navbar Events](#navbar-events)\n\n### [NavbarContent Props](#navbarcontent-props)\n\n### [NavbarItem Props](#navbaritem-props)\n\n> **Note**: The rest of the navbar components such as `NavbarMenuItem` and `NavbarBrand` have the same props as the `li` element.\n\n### [Navbar types](#navbar-types)\n\n#### [Motion Props](#motion-props)\n\nexport type MotionProps \\= HTMLMotionProps<\"div\"\\>; // @see https://www.framer.com/motion/",
    "title": "Navbar | NextUI - Beautiful, fast and modern React UI Library",
    "description": "A responsive navigation header positioned on top side of your page that includes support for branding, links, navigation, collapse and more.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/pagination",
    "markdown": "# Pagination | NextUI - Beautiful, fast and modern React UI Library\n\nThe Pagination component allows you to display active page and navigate between multiple pages.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 3 pagination-related components:\n\n*   **Pagination**: The main component to display a pagination.\n*   **PaginationItem**: The internal component to display a pagination item.\n*   **PaginationCursor**: The internal item component to display the current page.\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [Variants](#variants)\n\nYou can use the `variant` property to change the pagination items style.\n\n### [With Controls](#with-controls)\n\nYou can set the `showControls` to `true` to display the `next` and `previous` buttons.\n\nIn case you want to loop the pagination, you can set the `loop` property to `true`. The cursor will go back to the first page when it reaches the last page and vice versa.\n\n### [Changing the initial page](#changing-the-initial-page)\n\nYou can change the initial page by setting the `initialPage` property.\n\nYou can set the `isCompact` property to `true` to display reduced version of the pagination.\n\n### [With Shadow](#with-shadow)\n\nYou can use the `showShadow` property to display a shadow below the active page item.\n\n### [Controlled](#controlled)\n\n### [Siblings](#siblings)\n\nYou can control the number of pages to show before and after the current page by setting the `siblings` property.\n\n### [Boundaries](#boundaries)\n\nYou can control the number of pages to show at the beginning and end of the pagination by setting the `boundaries` property.\n\n### [Custom items](#custom-items)\n\nYou can use the `renderItem` property to customize the pagination items.\n\n## [Slots](#slots)\n\n*   **base**: The main pagination slot.\n*   **wrapper**: The pagination wrapper slot. This wraps the pagination items.\n*   **prev**: The previous button slot.\n*   **next**: The next button slot.\n*   **item**: The pagination item slot, applied to the middle items.\n*   **cursor**: The current page slot. Available only when `disableCursorAnimation` is `false` and `disableAnimation` is \\`false.\n*   **forwardIcon**: The forward icon slot. The one that appears when hovering the ellipsis button.\n*   **ellipsis**: The ellipsis slot.\n*   **chevronNext**: The chevron next icon slot.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Pagination` component by passing custom Tailwind CSS classes to the component slots.\n\n### [Custom Implementation](#custom-implementation)\n\nIn case you need to customize the pagination even further, you can use the `usePagination` hook to create your own implementation.\n\n## [Data Attributes](#data-attributes)\n\n`Pagination` has the following attributes on the `base` element:\n\n*   **data-controls**: Indicates whether the pagination has controls. Based on `showControls` prop.\n*   **data-loop**: When the pagination is looped. Based on `loop` prop.\n*   **data-dots-jump**: Indicates whether the pagination has dots jump. Based on `dotsJump` prop.\n*   **data-total**: The total number of pages. Based on `total` prop.\n*   **data-active-page**: The active page. Based on `activePage` prop.\n\n## [Accessibility](#accessibility)\n\n*   The root node has a role of `navigation` by default.\n*   The pagination items have an aria-label that identifies the item purpose (\"next page button\", \"previous page button\", etc.), you can override this label by using the `getItemAriaLabel` function.\n*   The pagination items are in tab order, with a tabindex of \"0\".\n\n## [API](#api)\n\n* * *\n\n### [Types](#types)\n\nexport type PaginationItemRenderProps \\= {\n\n  // The pagination item ref.\n\n  ref?: Ref<T\\>;\n\n  // The pagination item value.\n\n  value: PaginationItemValue;\n\n  // The pagination item index.\n\n  index: number;\n\n  // The active page number.\n\n  activePage: number;\n\n  // Whether the pagination item is active.\n\n  isActive: boolean;\n\n  // Whether the pagination item is the first item in the pagination.\n\n  isFirst: boolean;\n\n  // Whether the pagination item is the last item in the pagination.\n\n  isLast: boolean;\n\n  // Whether the pagination item is the next item in the pagination.\n\n  isNext: boolean;\n\n  // Whether the pagination item is the previous item in the pagination.\n\n  isPrevious: boolean;\n\n  // The pagination item className.\n\n  className: string;\n\n  // Callback to go to the next page.\n\n  onNext: () \\=> void;\n\n  // Callback to go to the previous page.\n\n  onPrevious: () \\=> void;\n\n  // Callback to go to the page.\n\n  setPage: (page: number) \\=> void;\n\n};\n\ntype renderItem?: (props: PaginationItemRenderProps) \\=> ReactNode;",
    "title": "Pagination | NextUI - Beautiful, fast and modern React UI Library",
    "description": "The Pagination component allows you to display active page and navigate between multiple pages.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/frameworks/vite",
    "markdown": "# Vite | NextUI - Beautiful, fast and modern React UI Library\n\n### [Installation](#installation)\n\nIn your Vite React project, run one of the following command to install NextUI:\n\n### [Hoisted Dependencies Setup](#hoisted-dependencies-setup)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n### [Tailwind CSS Setup](#tailwind-css-setup)\n\nNextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official [installation guide](https://tailwindcss.com/docs/guides/vite#react) to install Tailwind CSS. Then you need to add the following code to your `tailwind.config.js` file:\n\n> **Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n\n// tailwind.config.js\n\nconst { nextui } \\= require(\"@nextui-org/react\");\n\n/\\*\\* @type {import('tailwindcss').Config} \\*/\n\nmodule.exports \\= {\n\n  content: \\[\n\n    // ...\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\"\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\]\n\n}\n\n### [Provider Setup](#provider-setup)\n\nAfter installing NextUI, you need to set up the `NextUIProvider` at the `root` of your application.\n\nGo to the src directory and inside `main.jsx` or `main.tsx`, wrap `NextUIProvider` around App:\n\n// main.tsx or main.jsx\n\nimport React from 'react'\n\nimport ReactDOM from 'react-dom/client'\n\nimport {NextUIProvider} from '@nextui-org/react'\n\nimport App from './App'\n\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n\n  <React.StrictMode\\>\n\n    <NextUIProvider\\>\n\n      <App />\n\n    </NextUIProvider\\>\n\n  </React.StrictMode\\>,\n\n)",
    "title": "Vite | NextUI - Beautiful, fast and modern React UI Library",
    "description": "How to use NextUI with Vite",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/popover",
    "markdown": "# Popover | NextUI - Beautiful, fast and modern React UI Library\n\nPopover is a **non-modal** dialog that floats around its disclosure. It's commonly used for displaying additional rich content on top of something.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 3 popover-related components:\n\n*   **Popover**: The main component to display a popover.\n*   **PopoverTrigger**: The component that triggers the popover.\n*   **PopoverContent**: The component that contains the popover content.\n\n## [Usage](#usage)\n\n### [With Arrow](#with-arrow)\n\n### [Colors](#colors)\n\n### [Placements](#placements)\n\n### [Offset](#offset)\n\n### [Controlled](#controlled)\n\n### [Title Props](#title-props)\n\nTo be sure that the popover exposes the correct title to assistive technologies, you should use the `titleProps` prop on the `PopoverContent` component. To use this prop, you must pass a function as a child.\n\n### [With Form](#with-form)\n\nThe `Popover` handles the focus within the popover content. It means that you can use the popover with form elements without any problem. the focus returns to the trigger when the popover closes.\n\n> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the popover opens.\n\n### [Backdrop](#backdrop)\n\nThe `Popover` component has a `backdrop` prop to show a backdrop behind the popover. The backdrop can be either `transparent`, `opaque` or `blur`. The default value is `transparent`.\n\n### [Custom Motion](#custom-motion)\n\nPopover offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n### [Custom Trigger](#custom-trigger)\n\n## [Slots](#slots)\n\n*   **base**: The main popover slot, it wraps the popover content and contains the arrow as a pseudo-element (::before).\n*   **trigger**: The popover trigger slot, it has small styles to ensure the trigger works correctly.\n*   **backdrop**: The backdrop slot, it contains the backdrop styles.\n*   **content**: The content slot, it contains the popover content.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Popover` component by passing custom Tailwind CSS classes to the component slots.\n\n## [Data Attributes](#data-attributes)\n\n`Popover` has the following attributes on the `PopoverContent` element:\n\n*   **data-open**: When the popover is open. Based on popover state.\n*   **data-placement**: The placement of the popover. Based on `placement` prop. The arrow element is positioned based on this attribute.\n*   **data-focus**: When the popover is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the popover is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n## [Accessibility](#accessibility)\n\n*   The trigger and popover are automatically associated semantically via ARIA.\n*   Content outside the popover is hidden from assistive technologies while it is open.\n*   The popover closes when interacting outside, or pressing the Escape key.\n*   Focus is moved into the popover on mount, and restored to the trigger element on unmount.\n*   The popover is positioned relative to the trigger element, and automatically flips and adjusts to avoid overlapping with the edge of the browser window.\n*   Scrolling is prevented outside the popover to avoid unintentionally repositioning or closing it.\n\n## [API](#api)\n\n### [Popover Props](#popover-props)\n\n### [Popover Events](#popover-events)\n\n### [PopoverTrigger Props](#popovertrigger-props)\n\n### [PopoverContent Props](#popovercontent-props)\n\n### [Popover types](#popover-types)\n\n#### [Popover Placement](#popover-placement)\n\ntype PopoverPlacement \\=\n\n  | \"top\"\n\n  | \"bottom\"\n\n  | \"right\"\n\n  | \"left\"\n\n  | \"top-start\"\n\n  | \"top-end\"\n\n  | \"bottom-start\"\n\n  | \"bottom-end\"\n\n  | \"left-start\"\n\n  | \"left-end\"\n\n  | \"right-start\"\n\n  | \"right-end\";\n\n#### [Motion Props](#motion-props)\n\nexport type MotionProps \\= HTMLMotionProps<\"div\"\\>; // @see https://www.framer.com/motion/",
    "title": "Popover | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Popover is a non-modal dialog that floats around its disclosure. It's commonly used for displaying additional rich content on top of something.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/frameworks/remix",
    "markdown": "# Remix | NextUI - Beautiful, fast and modern React UI Library\n\n### [Installation](#installation)\n\nIn your Remix project, run one of the following command to install NextUI:\n\n### [Hoisted Dependencies Setup](#hoisted-dependencies-setup)\n\n> **Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.\n\nIf you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.\n\npublic-hoist-pattern\\[\\]\\=\\*@nextui-org/\\*\n\nAfter modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.\n\n### [Tailwind CSS Setup](#tailwind-css-setup)\n\nNextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official [installation guide](https://tailwindcss.com/docs/guides/remix) to install Tailwind CSS. Then you need to add the following code to your `tailwind.config.js` file:\n\n> **Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n\n// tailwind.config.ts\n\nconst { nextui } \\= require(\"@nextui-org/react\");\n\nimport type { Config } from 'tailwindcss'\n\nexport default {\n\n  content: \\[\n\n    // ...\n\n    // make sure it's pointing to the ROOT node\\_module\n\n    \"./node\\_modules/@nextui-org/theme/dist/\\*\\*/\\*.{js,ts,jsx,tsx}\"\n\n  \\],\n\n  theme: {\n\n    extend: {},\n\n  },\n\n  darkMode: \"class\",\n\n  plugins: \\[nextui()\\]\n\n} satisfies Config\n\n### [Provider Setup](#provider-setup)\n\nAfter installing NextUI, you need to set up the `NextUIProvider` at the `root` of your application.\n\nGo to the src directory and inside `root.tsx`, wrap `NextUIProvider` around App:\n\nimport {\n\n  Links,\n\n  LiveReload,\n\n  Meta,\n\n  Outlet,\n\n  Scripts,\n\n  ScrollRestoration,\n\n} from \"@remix-run/react\";\n\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nexport default function App() {\n\n  return (\n\n    <html lang\\=\"en\"\\>\n\n      <head\\>\n\n        <Meta />\n\n        <Links />\n\n      </head\\>\n\n      <body\\>\n\n        <NextUIProvider\\>\n\n          <Outlet />\n\n          <ScrollRestoration />\n\n          <Scripts />\n\n          <LiveReload />\n\n        </NextUIProvider\\>\n\n      </body\\>\n\n    </html\\>\n\n  );\n\n}",
    "title": "Remix | NextUI - Beautiful, fast and modern React UI Library",
    "description": "How to use NextUI with Remix",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/progress",
    "markdown": "# Progress | NextUI - Beautiful, fast and modern React UI Library\n\nThe Progress component allows you to view the progress of any activity.\n\nYou can use the `isIndeterminate` prop to display an indeterminate progress bar. This is useful when you don't know how long an operation will take.\n\nValues are formatted as a percentage by default, but this can be modified by using the `formatOptions` prop to specify a different format. `formatOptions` is compatible with the option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.\n\nYou can customize the `Progress` component by passing custom Tailwind CSS classes to the component slots.",
    "title": "Progress | NextUI - Beautiful, fast and modern React UI Library",
    "description": "The Progress component allows you to view the progress of any activity.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/radio-group",
    "markdown": "# Radio | NextUI - Beautiful, fast and modern React UI Library\n\n## Radio group\n\nRadio Group allow users to select a single option from a list of mutually exclusive options.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Default Value](#default-value)\n\n### [With Description](#with-description)\n\n### [Horizontal](#horizontal)\n\n### [Controlled](#controlled)\n\nYou can use the `value` and `onValueChange` properties to control the radio input value.\n\n> **Note**: NextUI `Radio` also supports native events like `onChange`, useful for form libraries such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n### [Invalid](#invalid)\n\n## [Slots](#slots)\n\n*   RadioGroup Slots\n    \n    *   **base**: Radio group root wrapper, it wraps the label and the wrapper.\n    *   **wrapper**: Radio group wrapper, it wraps all Radios.\n    *   **label**: Radio group label, it is placed before the wrapper.\n    *   **description**: Description slot for the radio group.\n    *   **errorMessage**: Error message slot for the radio group.\n*   Radio Slots\n    \n    *   **base**: Radio root wrapper, it wraps all elements.\n    *   **wrapper**: Radio wrapper, it wraps the control element.\n    *   **labelWrapper**: Label and description wrapper.\n    *   **label**: Label slot for the radio.\n    *   **control**: Control element, it is the circle element.\n    *   **description**: Description slot for the radio.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `RadioGroup` and `Radio` component by passing custom Tailwind CSS classes to the component slots.\n\n### [Custom Implementation](#custom-implementation)\n\nIn case you need to customize the radio group even further, you can use the `useRadio` hook to create your own implementation.\n\n## [Data Attributes](#data-attributes)\n\n*   RadioGroup has the following attributes on the `base` element:\n    \n    *   **data-orientation**: The orientation of the radio group. Based on `orientation` prop.\n*   Radio has the following attributes on the `base` element:\n    \n    *   **data-selected**: When the radio is checked. Based on `isSelected` prop.\n    *   **data-pressed**: When the radio is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).\n    *   **data-invalid**: When the radio is invalid. Based on `validationState` prop.\n    *   **data-readonly**: When the radio is readonly. Based on `isReadOnly` prop.\n    *   **data-hover-unselected**: When the radio is being hovered and unchecked. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).\n    *   **data-hover**: When the radio is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).\n    *   **data-focus**: When the radio is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n    *   **data-focus-visible**: When the radio is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n    *   **data-disabled**: When the radio is disabled. Based on `isDisabled` prop.\n\n## [Accessibility](#accessibility)\n\n*   Radio groups are exposed to assistive technology via ARIA.\n*   Each radio is built with a native HTML `<input>` element, which can be optionally visually hidden to allow custom styling.\n*   Full support for browser features like form autofill.\n*   Keyboard event support for arrows keys.\n*   Keyboard focus management and cross browser normalization.\n*   Group and radio labeling support for assistive technology.\n\n## [API](#api)\n\n### [RadioGroup Props](#radiogroup-props)\n\n### [RadioGroup Events](#radiogroup-events)\n\n### [Radio Props](#radio-props)",
    "title": "Radio | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Radio Group allow users to select a single option from a list of mutually exclusive options",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/accordion",
    "markdown": "# Accordion | NextUI - Beautiful, fast and modern React UI Library\n\nAccordion display a list of high-level options that can expand/collapse to reveal more information.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 2 accordion-related components:\n\n*   **Accordion**: The main component to display a list of accordion items.\n*   **AccordionItem**: The item component to display a single accordion item.\n\n## [Usage](#usage)\n\n### [With Subtitle](#with-subtitle)\n\n### [Expand multiple items](#expand-multiple-items)\n\nIf you set `selectionMode` to `multiple`, then the `Accordion` will allow multiple items to be expanded at the same time.\n\n### [Compact](#compact)\n\nIf you set `isCompact` to `true`, the `Accordion` will be displayed in a compact style.\n\n### [Variants](#variants)\n\nAccordion has 4 variants: `light`, `shadow`, `bordered` and `splitted`.\n\n#### [Light variant](#light-variant)\n\n#### [Shadow variant](#shadow-variant)\n\n#### [Bordered variant](#bordered-variant)\n\n#### [Splitted variant](#splitted-variant)\n\n### [Default expanded keys](#default-expanded-keys)\n\nIf you want to expand some items by default, you can set the `defaultExpandedKeys` property to an array of keys.\n\n### [Disabled keys](#disabled-keys)\n\nIf you want to disable some items, you can set the `disabledKeys` property to an array of keys.\n\n### [Start content](#start-content)\n\nIf you want to display some content before the accordion items, you can set the `startContent` property.\n\n### [Custom Indicator](#custom-indicator)\n\nAccordion items have a property called `indicator`. You can use it to customize the open/close indicator.\n\nThe indicator can be also a `function`, which receives the `isOpen`, `isDisabled` and the default `indicator` as parameters.\n\n### [Custom Motion](#custom-motion)\n\nAccordion offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n### [Controlled](#controlled)\n\nAccordion is a controlled component, which means you need to control the `selectedKeys` property by yourself.\n\n## [Accordion Item Slots](#accordion-item-slots)\n\n*   **base**: The accordion item wrapper.\n*   **heading**: The accordion item heading. It contains the `indicator` and the `title`.\n*   **trigger**: The button that open/close the accordion item.\n*   **titleWrapper**: The wrapper of the `title` and `subtitle`.\n*   **title**: The accordion item title.\n*   **subtitle**: The accordion item subtitle.\n*   **startContent**: The content before the accordion item.\n*   **indicator**: The element that indicates the open/close state of the accordion item.\n*   **content**: The accordion item content.\n\n### [Custom Accordion Styles](#custom-accordion-styles)\n\nYou can customize the accordion and accordion items styles by using any of the following properties:\n\n*   `className`: The class name of the accordion. Modify the accordion wrapper styles.(Accordion)\n*   `itemClasses`: The class names of the accordion items. Modify all accordion items styles at once. (Accordion)\n*   `classNames`: The class names of the accordion items. Modify each accordion item styles separately. (AccordionItem)\n\nHere's an example of how to customize the accordion styles:\n\n## [Data Attributes](#data-attributes)\n\n`AccordionItem` has the following attributes on the `base` element:\n\n*   **data-open**: Whether the accordion item is open.\n*   **data-disabled**: When the accordion item is disabled.\n*   **data-hover**: When the accordion item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).\n*   **data-focus**: When the accordion item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the accordion item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-disabled**: When the accordion item is disabled. Based on `isDisabled` prop.\n*   **data-pressed**: When the accordion item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).\n\n## [Accessibility](#accessibility)\n\n*   Keyboard event support for Space, Enter, Arrow Up, Arrow Down and Home / End keys.\n*   Keyboard focus management and cross browser normalization.\n*   `aria-expanded` attribute for the accordion item.\n*   `aria-disabled` attribute for the accordion item.\n*   `aria-controls` attribute for the accordion item.\n\n## [API](#api)\n\n### [Accordion Props](#accordion-props)\n\n### [Accordion Events](#accordion-events)\n\n### [Accordion Item Props](#accordion-item-props)\n\n### [Accordion Item Events](#accordion-item-events)\n\n* * *\n\n### [Types](#types)\n\n#### [Accordion Item Indicator Props](#accordion-item-indicator-props)\n\nexport type AccordionItemIndicatorProps \\= {\n\n  /\\*\\*\n\n   \\* The current indicator, usually an arrow icon.\n\n   \\*/\n\n  indicator?: ReactNode;\n\n  /\\*\\*\n\n   \\* The current open status.\n\n   \\*/\n\n  isOpen?: boolean;\n\n  /\\*\\*\n\n   \\* The current disabled status.\n\n   \\* @default false\n\n   \\*/\n\n  isDisabled?: boolean;\n\n};\n\ntype indicator?: ReactNode | ((props: AccordionItemIndicatorProps) \\=> ReactNode) | null;\n\n### [Accordion Item classNames](#accordion-item-classnames)\n\nexport type AccordionItemClassnames \\= {\n\n  base?: string;\n\n  heading?: string;\n\n  trigger?: string;\n\n  titleWrapper?: string;\n\n  title?: string;\n\n  subtitle?: string;\n\n  startContent?: string;\n\n  indicator?: string;\n\n  content?: string;\n\n};\n\n#### [Motion Props](#motion-props)\n\nexport type MotionProps \\= {\n\n  /\\*\\*\n\n   \\* If \\`true\\`, the opacity of the content will be animated\n\n   \\* @default true\n\n   \\*/\n\n  animateOpacity?: boolean;\n\n  /\\*\\*\n\n   \\* The height you want the content in its collapsed state.\n\n   \\* @default 0\n\n   \\*/\n\n  startingHeight?: number;\n\n  /\\*\\*\n\n   \\* The height you want the content in its expanded state.\n\n   \\* @default \"auto\"\n\n   \\*/\n\n  endingHeight?: number | string;\n\n  /\\*\\*\n\n   \\* The y-axis offset you want the content in its collapsed state.\n\n   \\* @default 10\n\n   \\*/\n\n  startingY?: number;\n\n  /\\*\\*\n\n   \\* The y-axis offset you want the content in its expanded state.\n\n   \\* @default 0\n\n   \\*/\n\n  endingY?: number;\n\n} & HTMLMotionProps;",
    "title": "Accordion | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Accordion display a list of high-level options that can expand/collapse to reveal more information.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/autocomplete",
    "markdown": "# Autocomplete | NextUI - Beautiful, fast and modern React UI Library\n\nAn autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 3 autocomplete-related components:\n\n*   **Autocomplete**: The main component, which is a wrapper for the other components.\n*   **AutocompleteSection**: The component that contains a group of autocomplete items.\n*   **AutocompleteItem**: The component that represents a autocomplete item.\n\n## [Usage](#usage)\n\n### [Dynamic items](#dynamic-items)\n\nAutocomplete follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.\n\n*   **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.\n*   **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.\n\n### [Disabled](#disabled)\n\n### [Disabled Items](#disabled-items)\n\nYou can disable specific items by using the `disabledKeys` property.\n\n### [Required](#required)\n\nIf you pass the `isRequired` property to the autocomplete, it will have a `danger` asterisk at the end of the label and the autocomplete will be required.\n\n### [Read Only](#read-only)\n\nIf you pass the `isReadOnly` property to the Autocomplete, the Listbox will open to display all available options, but users won't be able to select any of the listed options.\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [Variants](#variants)\n\n### [Label Placements](#label-placements)\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### [Start Content](#start-content)\n\nYou can use the `startContent` and `endContent` properties to add content to the start and end of the autocomplete.\n\n### [Item Start & End Content](#item-start--end-content)\n\nSince the `Autocomplete` component uses the [Listbox](https://nextui.org/docs/components/listbox) component under the hood, you can use the `startContent` and `endContent` properties of the `AutocompleteItem` component to add content to the start and end of the autocomplete item.\n\n### [Custom Value](#custom-value)\n\nBy default, `Autocomplete` doesn't allow users to specify a value that doesn't exist in the list of options and will revert the input value to the current selected value on blur. By specifying `allowsCustomValue`, this behavior is suppressed and the user is free to enter any value within the field.\n\n### [Custom Selector Icon](#custom-selector-icon)\n\nBy default, `Autocomplete` uses a `chevron-down` icon as the selector icon which rotates when the autocomplete is open. You can customize this icon by passing a custom one to the `selectorIcon` property.\n\n> **Note**: Use the `disableSelectorIconRotation` property to disable the rotation of the icon.\n\n### [Without Scroll Shadow](#without-scroll-shadow)\n\nAutocomplete component uses the [ScrollShadow](https://nextui.org/docs/components/scroll-shadow) under the hood to show a shadow when the autocomplete content is scrollable. You can disable this shadow by passing using the `scrollShadowProps` property.\n\n> **Note**: You can also use the `showScrollIndicators` property to disable the scroll indicators.\n\n### [With Description](#with-description)\n\nYou can add a description to the autocomplete by passing the `description` property.\n\n### [With Error Message](#with-error-message)\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid autocomplete.\n\n### [Events](#events)\n\nThe `Autocomplete` component supports selection via mouse, keyboard, and touch. You can handle all of these via the `onSelectionChange` prop. `Autocomplete` will pass the selected key to the onSelectionChange handler. Additionally, ComboBox accepts an `onInputChange` prop which is triggered whenever the value is edited by the user, whether through typing or option selection.\n\nThe example below uses `onSelectionChange` and `onInputChange` to update the selection and input value stored in React state.\n\n### [Controlled](#controlled)\n\nYou can use the `selectedKey` and `onSelectionChange` properties to control the select value.\n\n### [Fully Controlled](#fully-controlled)\n\nBy passing in `inputValue`, `selectedKey`, and `items` to the `Autocomplete` you can control exactly what your `Autocomplete` should display.\n\nThe following example shows how you would create a controlled `Autocomplete`, controlling everything from the selected value `selectedKey` to the combobox options `items`.\n\nWe recommend using the `useFilter` hook from [@react-aria/i18n](https://react-spectrum.adobe.com/react-aria/useFilter.html#usefilter) to manage the filtering of the items.\n\nimport {useFilter} from \"@react-aria/i18n\";\n\n> **Note**: It is important to note that you don't have to control every single aspect of a `Autocomplete`. If you decide to only control a single property of the `Autocomplete`, be sure to provide the change handler for that prop as well e.g. controlling `selectedKey` would require `onSelectionChange`.\n\n### [Custom Items](#custom-items)\n\nYou can customize the autocomplete items by modifying the `AutocompleteItem` children.\n\n### [Custom Empty Content Message](#custom-empty-content-message)\n\nBy default, a message `No results found.` will be shown if there is no result matching a query with your filter. You can customize the empty content message by modifying the `emptyContent` in `listboxProps`.\n\n### [Custom Filtering](#custom-filtering)\n\nBy default, `Autocomplete` uses a `\"contains\"` function from [useFilter](https://react-spectrum.adobe.com/react-aria/useFilter.html) to filter the list of options. This can be overridden using the `defaultFilter` prop, or by using the `items` prop to control the filtered list. When `items` is provided rather than `defaultItems`, `Autocomplete` does no filtering of its own.\n\nThe following example uses the `defaultFilter` prop to filter the list of options using a custom filter function.\n\n### [Asynchronous Filtering](#asynchronous-filtering)\n\nAutocomplete supports asynchronous filtering, in the example below we are using the [useAsyncList](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) function from [react-aria](https://react-spectrum.adobe.com/) to handle asynchronous loading and filtering of data from a server.\n\nimport {useAsyncList} from \"@react-stately/data\";\n\n### [Asynchronous Loading](#asynchronous-loading)\n\nAutocomplete supports asynchronous loading, in the example below we are using a custom hook to fetch the [Pokemon API](https://pokeapi.co/api/v2/pokemon) data in combination with the `useInfiniteScroll` hook to load more data when the user reaches the end of the list.\n\nThe `isLoading` prop is used to show a loading indicator instead of the selector icon when the data is being fetched.\n\nimport {useInfiniteScroll} from \"@nextui-org/use-infinite-scroll\";\n\n### [With Sections](#with-sections)\n\nYou can use the `AutocompleteSection` component to group autocomplete items.\n\n### [Custom Sections Style](#custom-sections-style)\n\nYou can customize the sections style by using the `classNames` property of the `AutocompleteSection` component.\n\n### [Customizing the Autocomplete](#customizing-the-autocomplete)\n\nYou can customize any slot of the autocomplete by using the `classNames` property. Autocomplete component also provides the [popoverProps](https://nextui.org/docs/components/popover#api), [listboxProps](https://nextui.org/docs/components/listbox#api), [inputProps](https://nextui.org/docs/components/input#api) properties to customize the popover, listbox and input components.\n\n## [Slots](#slots)\n\n*   **base**: The main wrapper of the autocomplete. This wraps the input and popover components.\n*   **listboxWrapper**: The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.\n*   **listbox**: The listbox component. This is the component that wraps the autocomplete items.\n*   **popoverContent**: The popover content slot. Use this to modify the popover content styles.\n*   **endContentWrapper**: The wrapper of the end content. This wraps the clear button and selector button.\n*   **clearButton**: The clear button slot.\n*   **selectorButton**: The selector button slot.\n\n## [Data Attributes](#data-attributes)\n\n`Autocomplete` has the following attributes on the `base` element:\n\n*   **data-invalid**: When the autocomplete is invalid. Based on `isInvalid` prop.\n*   **data-open**: Indicates if the autocomplete's popover is open.\n\n`Autocomplete` has the following attributes on the `selectorButton` element:\n\n*   **data-open**: Indicates if the autocomplete's popover is open.\n\n`Autocomplete` has the following attributes on the `clearButton` element:\n\n*   **data-visible**: Indicates if the autocomplete's clear button is visible. By default it is visible when hovering the autocomplete and when the autocomplete has a value (desktop), or when the autocomplete has a value (mobile).\n\n`AutocompleteItem` has the following attributes on the `base` element:\n\n*   **data-disabled**: When the autocomplete item is disabled. Based on autocomplete `disabledKeys` prop.\n*   **data-selected**: When the autocomplete item is selected. Based on autocomplete `selectedKey` prop.\n*   **data-hover**: When the autocomplete item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-pressed**: When the autocomplete item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-focus**: When the autocomplete item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the autocomplete item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n## [Accessibility](#accessibility)\n\n*   Support for filtering a list of options by typing\n*   Support for selecting a single option\n*   Support for disabled options\n*   Support for groups of items in sections\n*   Support for custom user input values\n*   Support for controlled and uncontrolled options, selection, input value, and open state\n*   Support for custom filter functions\n*   Async loading and infinite scrolling support\n*   Support for virtualized scrolling for performance with long lists\n*   Exposed to assistive technology as a combobox with ARIA\n*   Labeling support for accessibility\n*   Required and invalid states exposed to assistive technology via ARIA\n*   Support for mouse, touch, and keyboard interactions\n*   Keyboard support for opening the combo box list box using the arrow keys, including automatically focusing the first or last item accordingly\n*   Support for opening the list box when typing, on focus, or manually\n*   Handles virtual clicks on the input from touch screen readers to toggle the list box\n*   Virtual focus management for combo box list box option navigation\n*   Hides elements outside the input and list box from assistive technology while the list box is open in a portal\n*   Custom localized announcements for option focusing, filtering, and selection using an ARIA live region to work around VoiceOver bugs\n*   Support for description and error message help text linked to the input via ARIA\n\n## [API](#api)\n\n### [Autocomplete Props](#autocomplete-props)\n\n### [Autocomplete Events](#autocomplete-events)\n\n* * *\n\n### [AutocompleteItem Props](#autocompleteitem-props)\n\nCheck the [ListboxItem](https://nextui.org/docs/components/listbox#listboxitem-props) props.\n\n### [AutocompleteItem Events](#autocompleteitem-events)\n\nCheck the [ListboxItem](https://nextui.org/docs/components/listbox#listboxitem-events) events.\n\n### [AutocompleteSection Props](#autocompletesection-props)\n\nCheck the [ListboxSection](https://nextui.org/docs/components/listbox#listboxsection-props) props.\n\n* * *\n\n### [Types](#types)\n\ntype MenuTriggerAction \\= \"focus\" | \"input\" | \"manual\";",
    "title": "Autocomplete | NextUI - Beautiful, fast and modern React UI Library",
    "description": "An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/skeleton",
    "markdown": "# Skeleton | NextUI - Beautiful, fast and modern React UI Library\n\nSkeleton is a placeholder to show a loading state and the expected shape of a component.\n\nSkeleton takes the shape of its `children` component by default, but you can also use it as a standalone component.\n\nYou can use the `isLoaded` prop to stop the skeleton animation and show the children component.",
    "title": "Skeleton | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Skeleton is a placeholder to show a loading state and the expected shape of a component.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/select",
    "markdown": "# Select | NextUI - Beautiful, fast and modern React UI Library\n\nA select displays a collapsible list of options and allows a user to select one or more of them.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 3 select-related components:\n\n*   **Select**: The main component, which is a wrapper for the other components.\n*   **SelectSection**: The component that contains a group of select items.\n*   **SelectItem**: The component that represents a select item.\n\n## [Usage](#usage)\n\n### [Dynamic items](#dynamic-items)\n\nSelect follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.\n\n*   **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.\n*   **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.\n\n### [Multiple Selection](#multiple-selection)\n\nYou can use the `selectionMode=\"multiple\"` property to allow multiple selection.\n\n### [Disabled](#disabled)\n\n### [Disabled Items](#disabled-items)\n\nYou can disable specific items by using the `disabledKeys` property.\n\n### [Required](#required)\n\nIf you pass the `isRequired` property to the select, it will have a `danger` asterisk at the end of the label and the select will be required.\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [Variants](#variants)\n\n### [Radius](#radius)\n\n### [Label Placements](#label-placements)\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### [Start Content](#start-content)\n\nYou can use the `startContent` and `endContent` properties to add content to the start and end of the select.\n\n### [Item Start & End Content](#item-start--end-content)\n\nSince the `Select` component uses the [Listbox](https://nextui.org/docs/components/listbox) component under the hood, you can use the `startContent` and `endContent` properties of the `SelectItem` component to add content to the start and end of the select item.\n\n### [Custom Selector Icon](#custom-selector-icon)\n\nBy default the select uses a `chevron-down` icon as the selector icon which rotates when the select is open. You can customize this icon by passing a custom one to the `selectorIcon` property.\n\n> **Note**: Use the `disableSelectorIconRotation` property to disable the rotation of the icon.\n\n### [Without Scroll Shadow](#without-scroll-shadow)\n\nSelect component uses the [ScrollShadow](https://nextui.org/docs/components/scroll-shadow) under the hood to show a shadow when the select content is scrollable. You can disable this shadow by passing using the `scrollShadowProps` property.\n\n> **Note**: You can also use the `showScrollIndicators` property to disable the scroll indicators.\n\n### [With Description](#with-description)\n\nYou can add a description to the select by passing the `description` property.\n\n### [With Error Message](#with-error-message)\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid select.\n\n### [Controlled](#controlled)\n\nYou can use the `selectedKeys` and `onSelectionChange` / `onChange` properties to control the select value.\n\nUsing `onSelectionChange`:\n\nUsing `onChange`:\n\n### [Controlling the open state](#controlling-the-open-state)\n\nYou can control the open state of the select by using the `isOpen` and `onOpenChange` / `onClose` properties.\n\n### [Custom Items](#custom-items)\n\nYou can customize the select items by modifying the `SelectItem` children.\n\n### [Custom Render Value](#custom-render-value)\n\nBy default the select will render the selected item's text value, but you can customize this by passing a `renderValue` function.\n\nThe `renderValue` function receives the selected items as a parameter and must return a `ReactNode`. Check the [Render Value Function](#render-value-function) section for more details.\n\n### [Asynchronous Loading](#asynchronous-loading)\n\nSelect supports asynchronous loading, in the example below we are using a custom hook to fetch the [Pokemon API](https://pokeapi.co/api/v2/pokemon) data in combination with the `useInfiniteScroll` hook to load more data when the user reaches the end of the list.\n\nThe `isLoading` prop is used to show a loading indicator instead of the selector icon when the data is being fetched.\n\nimport {useInfiniteScroll} from \"@nextui-org/use-infinite-scroll\";\n\n### [With Sections](#with-sections)\n\nYou can use the `SelectSection` component to group select items.\n\n### [Custom Sections Style](#custom-sections-style)\n\nYou can customize the sections style by using the `classNames` property of the `SelectSection` component.\n\n### [Multiple Select Controlled](#multiple-select-controlled)\n\nYou can use the same properties as the single select to control the multiple select, `selectedKeys` and `onSelectionChange` / `onChange`.\n\nUsing `onSelectionChange`:\n\nUsing `onChange`:\n\n### [Multiple With Chips](#multiple-with-chips)\n\nYou can render any component as the select value by using the `renderValue` property. In this example we are using the [Chip](https://nextui.org/docs/components/chip) component to render the selected items.\n\n> **Note**: Make sure to pass the `isMultiline` property to the `Select` component to allow the chips to wrap.\n\nThe `renderValue` function receives the selected items as a parameter and must return a `ReactNode`. Check the [Render Value Function](#render-value-function) section for more details.\n\n### [Customizing the select](#customizing-the-select)\n\nYou can customize any slot of the select by using the `classNames` property. Select component also provides the [popoverProps](https://nextui.org/docs/components/popover#api) and [listboxProps](https://nextui.org/docs/components/listbox#api) properties to customize the popover and listbox components.\n\n## [Slots](#slots)\n\n*   **base**: The main wrapper of the select. This wraps the rest of the slots.\n*   **label**: The label of the select.\n*   **mainWrapper**: Wraps the `helperWrapper` and the `trigger` slots.\n*   **trigger**: The trigger of the select. This wraps the label the inner wrapper and the selector icon.\n*   **innerWrapper**: The wrapper of the select content. This wraps the start/end content and the select value.\n*   **selectorIcon**: The selector icon of the select. This is the icon that rotates when the select is open (`data-open`).\n*   **value**: The select value. This is also the slot that wraps the `renderValue` function result.\n*   **listboxWrapper**: The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.\n*   **listbox**: The listbox component. This is the component that wraps the select items.\n*   **popoverContent**: The popover content slot. Use this to modify the popover content styles.\n*   **helperWrapper**: The wrapper of the helper text. This wraps the helper text and the error message.\n*   **description**: The description of the select.\n*   **errorMessage**: The error message of the select.\n\n## [Data Attributes](#data-attributes)\n\n`Select` has the following attributes on the `base` element:\n\n*   **data-filled**: Indicates if the select has a value, is focused, has start/end content or is open.\n*   **data-has-value**: Indicates if the select has selected item(s).\n*   **data-has-label**: Indicates if the select has a label. Based on `label` prop.\n*   **data-has-helper**: Indicates if the select has helper text. Based on `errorMessage` or `description` prop.\n*   **data-invalid**: Indicates if the select is invalid. Based on `isInvalid` prop.\n\n`Select` has the following attributes on the `trigger` element:\n\n*   **data-open**: Indicates if the select is open.\n*   **data-disabled**: When the select trigger is disabled. Based on select `isDisabled` prop.\n*   **data-focus**: When the select trigger is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the select trigger is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-pressed**: When the select trigger is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-hover**: When the select trigger is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n\n`Select` has the following attributes on the `selectorIcon` element:\n\n*   **data-open**: Indicates if the select is open.\n\n`SelectItem` has the following attributes on the `base` element:\n\n*   **data-disabled**: When the select item is disabled. Based on select `disabledKeys` prop.\n*   **data-selected**: When the select item is selected. Based on select `selectedKeys` prop.\n*   **data-hover**: When the select item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-pressed**: When the select item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-focus**: When the select item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the select item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n## [Accessibility](#accessibility)\n\n*   Exposed to assistive technology as a button with a listbox popup using ARIA (combined with [Listbox](https://nextui.org/docs/components/listbox)).\n*   Support for selecting a single option.\n*   Support for selecting multiple options.\n*   Support for disabled options.\n*   Support for sections.\n*   Labeling support for accessibility.\n*   Support for description and error message help text linked to the input via ARIA.\n*   Support for mouse, touch, and keyboard interactions.\n*   Tab stop focus management.\n*   Keyboard support for opening the listbox using the arrow keys, including automatically focusing the first or last item accordingly.\n*   Typeahead to allow selecting options by typing text, even without opening the listbox.\n*   Browser autofill integration via a hidden native `<select>` element.\n*   Support for mobile form navigation via software keyboard.\n*   Mobile screen reader listbox dismissal support.\n\n## [API](#api)\n\n### [Select Props](#select-props)\n\n### [Select Events](#select-events)\n\n* * *\n\n### [SelectItem Props](#selectitem-props)\n\nCheck the [ListboxItem](https://nextui.org/docs/components/listbox#listboxitem-props) props.\n\n### [SelectItem Events](#selectitem-events)\n\nCheck the [ListboxItem](https://nextui.org/docs/components/listbox#listboxitem-events) events.\n\n### [SelectSection Props](#selectsection-props)\n\nCheck the [ListboxSection](https://nextui.org/docs/components/listbox#listboxsection-props) props.\n\n* * *\n\n### [Types](#types)\n\n#### [Render Value Function](#render-value-function)\n\nThe `T` type is the type of the data passed to the select `items`.\n\nexport type SelectedItemProps<T\\> \\= {\n\n  /\\*\\* A unique key for the item. \\*/\n\n  key?: Key;\n\n  /\\*\\* The props passed to the item. \\*/\n\n  props?: Record<string, any\\>;\n\n  /\\*\\* The item data. \\*/\n\n  data?: T | null;\n\n  /\\*\\* An accessibility label for this item. \\*/\n\n  \"aria-label\"?: string;\n\n  /\\*\\* The rendered contents of this item (e.g. JSX). \\*/\n\n  rendered?: ReactNode;\n\n  /\\*\\* A string value for this item, used for features like typeahead. \\*/\n\n  textValue?: string;\n\n  /\\*\\* The type of item this item represents. \\*/\n\n  type?: string;\n\n};\n\ntype SelectedItems<T\\> \\= Array<SelectedItemProps<T\\>>;\n\nrenderValue: (items: SelectedItems<T\\>) \\=> ReactNode;",
    "title": "Select | NextUI - Beautiful, fast and modern React UI Library",
    "description": "A select displays a collapsible list of options and allows a user to select one or more of them.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/badge",
    "markdown": "# Badge | NextUI - Beautiful, fast and modern React UI Library\n\nFor a better positioning, you can use the `shape` property to define the shape of the badge.\n\nYou can control the visibility of the badge by using the `isInvisible` property.\n\nBy default, the badge has an outline, you can disable it by using the `showOutline={false}` property.\n\nIt's not advisable to depend on the badge's content for accurate announcement. Instead, consider supplying a comprehensive description, such as using `aria-label`.",
    "title": "Badge | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Badges are used as a small numerical value or status descriptor for UI elements.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/button",
    "markdown": "# Button | NextUI - Beautiful, fast and modern React UI Library\n\nButtons allow users to perform actions and choose with a single tap.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 2 button-related components:\n\n*   **Button**: The main component to display a button.\n*   **ButtonGroup**: A wrapper component to display a group of buttons.\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Sizes](#sizes)\n\n### [Radius](#radius)\n\n### [Colors](#colors)\n\n### [Variants](#variants)\n\n### [Loading](#loading)\n\nPass the `isLoading` prop to display a [Spinner](https://nextui.org/docs/components/spinner) component inside the button.\n\nYou can also customize the loading spinner by passing the a custom component to the `spinner` prop.\n\n### [With Icons](#with-icons)\n\nYou can add icons to the `Button` by passing the `startContent` or `endContent` props.\n\n### [Icon Only](#icon-only)\n\nYou can also display a button without text by passing the `isIconOnly` prop and the desired icon as `children`.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Button` component by passing custom Tailwind CSS classes to the component slots.\n\n> Custom class names will override the default ones thanks to [Tailwind Merge](https://github.com/dcastil/tailwind-merge) library. It means that you don't need to worry about class conflicts.\n\n### [Custom Implementation](#custom-implementation)\n\nYou can also use the `useButton` hook to create your own button component.\n\n## [Button Group](#button-group)\n\n### [Group Disabled](#group-disabled)\n\nThe `ButtonGroup` component also accepts the `isDisabled` prop to disable all buttons inside it.\n\n### [Group Use case](#group-use-case)\n\nA common use case for the `ButtonGroup` component is to display a group of two buttons one for the selected value and another for the `dropdown`.\n\n> See the [Dropdown](https://nextui.org/docs/components/dropdown) component for more details.\n\n## [Data Attributes](#data-attributes)\n\n`Button` has the following attributes on the `base` element:\n\n*   **data-hover**: When the button is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-focus**: When the button is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the button is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-disabled**: When the button is disabled. Based on `isDisabled` prop.\n*   **data-pressed**: When the button is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-loading**: When the button is loading. Based on `isLoading` prop.\n\n## [Accessibility](#accessibility)\n\n*   Button has role of `button`.\n*   Keyboard event support for Space and Enter keys.\n*   Mouse and touch event handling, and press state management.\n*   Keyboard focus management and cross browser normalization.\n\nWe recommend to read this [blog post](https://react-spectrum.adobe.com/blog/building-a-button-part-1.html) about the complexities of building buttons that work well across devices and interaction methods.\n\n## [API](#api)\n\n### [Button Props](#button-props)\n\n### [Button Events](#button-events)\n\n### [Button Group Props](#button-group-props)",
    "title": "Button | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Buttons allow users to perform actions and choose with a single tap.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/snippet",
    "markdown": "# Snippet | NextUI - Beautiful, fast and modern React UI Library\n\nSnippet is a component that can be used to display inline or multiline code snippets.\n\nYou can hide the copy button by setting the `hideCopyButton` property to `true`.\n\nYou can customize the tooltip by using the `tooltipProps` property.\n\nYou can customize the copy and copied icons by using the `copyIcon` and `checkIcon` properties.",
    "title": "Snippet | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Snippet is a component that can be used to display inline or multiline code snippets.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/card",
    "markdown": "# Card | NextUI - Beautiful, fast and modern React UI Library\n\nCard is a container for text, photos, and actions in the context of a single subject.\n\nYou can pass the `isFooterBlurred` prop to the card to blur the footer.\n\nYou can use other NextUI components inside the card to compose a more complex card.\n\nYou can pass the `isBlurred` prop to the card to blur the card.\n\nIf you pass the `isPressable` prop to the card, it will be rendered as a button.\n\nYou can use `Image` component as the cover of the card by taking it out of the `CardBody` component.",
    "title": "Card | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Card is a container for text, photos, and actions in the context of a single subject.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/breadcrumbs",
    "markdown": "# Breadcrumbs | NextUI - Beautiful, fast and modern React UI Library\n\nBreadcrumbs display a hierarchy of links to the current page or resource in an application.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 2 breadcrumb-related components:\n\n*   **Breadcumbs**: The main component, which is a wrapper for the other components.\n*   **BreadcrumbItem**: The component that represents a breadcrumb item.\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\nDisabled breadcrumbs display items but prevent navigation, ensuring a consistent layout. The last item, signifying the current page, isn't disabled.\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [Variants](#variants)\n\n### [Underlines](#underlines)\n\n### [Radius](#radius)\n\n### [Routing](#routing)\n\nThe `<BreadcrumbItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and [React Router](https://reactrouter.com/en/main). See the [Routing](https://nextui.org/docs/guide/routing) guide to learn how to set this up.\n\n### [Controlled](#controlled)\n\nYou can control the current/active item by using the `isCurrent` and `onAction` props.\n\n> **Note**: If needed you can use the `onPress` prop to handle the click event on the breadcrumb item.\n\nIt is possible to use the `Breadcrumbs` component as a horizontal menu. This is useful when you want to display a list of possible navigations and let the user choose one of them.\n\n### [Start & End Content](#start--end-content)\n\nYou can add any element to the start or end of the breadcrumbs by using the `startContent` and `endContent` props. The above example uses the `startContent` prop to add icons to the start of the breadcrumbs.\n\n### [Custom Separator](#custom-separator)\n\nYou can customize the separator between breadcrumbs by using the `separator` prop.\n\n### [Custom Items](#custom-items)\n\nthe `BreadcrumbItem` component accepts any element as its children. This allows you to customize the appearance of the breadcrumb items.\n\nThe above example uses the [Dropdown](https://nextui.org/docs/components/dropdown) component to create a dropdown menu in the breadcrumb.\n\nThe `Breadcrumbs` component picks only the `BreadcrumbItem` components as its children. This means that you cannot place any other component directly inside the `Breadcrumbs` component.\n\n// ❌ This will not work,\n\n// The Button will not be picked by the Breadcrumbs component.\n\n<Breadcrumbs\\>\n\n  <BreadcrumbItem\\>Item 1</BreadcrumbItem\\>\n\n  <Button\\>Item 2</Button\\>\n\n</Breadcrumbs\\>\n\n// ✅ Instead, you can wrap the Button inside a BreadcrumbItem.\n\n<Breadcrumbs\\>\n\n  <BreadcrumbItem\\>Item 1</BreadcrumbItem\\>\n\n  <BreadcrumbItem\\>\n\n    <Button\\>Item 2</Button\\>\n\n  </BreadcrumbItem\\>\n\n</Breadcrumbs\\>\n\n### [Collapsing Items](#collapsing-items)\n\nThe `Breadcrumb` component provides 3 props to control the collapsing of items:\n\n*   `maxItems`: Specifies the maximum number of breadcrumbs to display. When there are more than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse` will be shown, with an ellipsis in between.\n*   `itemsBeforeCollapse`: If max items is exceeded, the number of items to show before the ellipsis.\n*   `itemsAfterCollapse`: If max items is exceeded, the number of items to show after the ellipsis.\n\n> **Note**: The ellipsis item will use the first collapsed item as its `href` prop.\n\n### [Customizing the Ellipsis Item](#customizing-the-ellipsis-item)\n\nYou can customize the ellipsis item by using the `renderEllipsis` prop. This prop accepts a function that returns a React element.\n\n## [Slots](#slots)\n\n*   Breadcrumbs Slots\n    \n*   **base**: The main slot for the breadcrumbs. It wraps the `list` slot.\n    \n*   **list**: The list of breadcrumbs wrapper.\n    \n*   **ellipsis**: The slot for the ellipsis item. This is only visible when the breadcrumbs are collapsed.\n    \n*   **separator**: The slot for the custom separator, the one that can be set using the `separator` prop.\n    \n*   BreadcrumbItem Slots\n    \n*   **base**: The main slot for the breadcrumb item. It wraps the `item` slot.\n    \n*   **item**: The breadcrumb item wrapper.\n    \n*   **separator**: The slot for the item separator.\n    \n\nYou can customize the `Breadcrumbs` style by using the `classNames` prop and its items by using the `itemClasses` prop.\n\n## [Data Attributes](#data-attributes)\n\n`BreadcrumbItem` has the following attributes on the `item` element:\n\n*   **data-current**: When the breadcrumb item is the current item. Based on breadcrumb `isCurrent` prop or on whether the item is the last one.\n*   **data-disabled**: When the breadcrumb item is disabled. Based on breadcrumb `isDisabled` prop.\n*   **data-focus**: When the breadcrumb item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the breadcrumb item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n## [Accessibility](#accessibility)\n\n*   Implemented as an ordered list of items.\n*   Support for mouse, touch, and keyboard interactions on breadcrumbs.\n*   Support for navigation links via `<a>` elements or custom element types via ARIA.\n*   Localized ARIA labeling support for landmark navigation region.\n*   Support for disabled breadcrumbs.\n*   The last item is automatically marked as the current page using `aria-current`.\n\n## [API](#api)\n\n### [BreadcrumbItem Props](#breadcrumbitem-props)\n\n### [BreadcrumbItem Events](#breadcrumbitem-events)\n\n### [Types](#types)\n\n#### [Render Ellipsis Function](#render-ellipsis-function)\n\nexport type RenderEllipsisItemProps \\= {\n\n  /\\*\\*\n\n   \\* The collapsed items.\n\n   \\*/\n\n  items: BreadcrumbItemProps\\[\\];\n\n  /\\*\\*\n\n   \\* The max number of items.\n\n   \\*/\n\n  maxItems: number;\n\n  /\\*\\*\n\n   \\* The picked item to render the ellipsis.\n\n   \\*/\n\n  collapsedItem: ReactNode;\n\n  /\\*\\*\n\n   \\* The default ellipsis icon.\n\n   \\*/\n\n  ellipsisIcon: ReactNode;\n\n  /\\*\\*\n\n   \\* Number of items to show before the ellipsis.\n\n   \\*/\n\n  itemsBeforeCollapse: number;\n\n  /\\*\\*\n\n   \\* Number of items to show after the ellipsis.\n\n   \\*/\n\n  itemsAfterCollapse: number;\n\n  /\\*\\*\n\n   \\* The separator between each breadcrumb. It is a chevron by default.\n\n   \\*/\n\n  separator: ReactNode;\n\n};\n\nrenderEllipsis: (props: RenderEllipsisItemProps) \\=> ReactNode;",
    "title": "Breadcrumbs | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Breadcrumbs display a hierarchy of links to the current page or resource in an application.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/scroll-shadow",
    "markdown": "# Scroll Shadow | NextUI - Beautiful, fast and modern React UI Library\n\nApplies top and bottom shadows when content overflows on scroll.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Hide Scrollbar](#hide-scrollbar)\n\nYou can use the `hideScrollBar` property to hide vertical and horizontal scrollbars.\n\n### [Custom Shadow Size](#custom-shadow-size)\n\nBy default, the shadow size is `40` in pixels, but you can change it using the `size` property.\n\n### [Horizontal Orientation](#horizontal-orientation)\n\nIn case you need to apply the shadow on the horizontal scroll, you can set the `orientation` property to `horizontal`.\n\n### [Shadow Offset](#shadow-offset)\n\nBy default the shadow offset is `0` in pixels, but you can change it using the `offset` property. This allows you to apply the shadow on a specific position.\n\n## [API](#api)\n\n### [ShadowScroll Props](#shadowscroll-props)\n\n### [ShadowScroll Events](#shadowscroll-events)\n\n### [Types](#types)\n\n#### [Scroll Shadow Visibility](#scroll-shadow-visibility)\n\ntype ScrollShadowVisibility \\= \"auto\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"both\" | \"none\";",
    "title": "Scroll Shadow | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Applies top and bottom shadows when content overflows on scroll.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/spacer",
    "markdown": "# Spacer | NextUI - Beautiful, fast and modern React UI Library\n\nSpacer is a component used to add space between components.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n> **Note**: The `x` and `y` values are based on [Tailwind Spacing Scale](https://tailwindcss.com/docs/space)\n\n## [API](#api)\n\n### [Spacer Props](#spacer-props)\n\n### [Spaces](#spaces)\n\ntype Space \\= 0 | \"px\" | 0.5 | 1 | 1.5 | 2 | 2.5 | 3 | 3.5 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 14 | 16 | 20 | 24 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 60 | 64 | 72 | 80 | 96;",
    "title": "Spacer | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Spacer is a component used to add space between components.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/spinner",
    "markdown": "# Spinner | NextUI - Beautiful, fast and modern React UI Library\n\nSpinner express an unspecified wait time or display the length of a process.\n\n* * *\n\n## [Installation](#installation)\n\nnpx nextui-cli@latest add spinner\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n> **Note**: Spinner adds `Loading` as `aria-label` by default. This is required for accessibility. You can change it by passing a `label` or `aria-label` prop.\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [With Label](#with-label)\n\n### [Label colors](#label-colors)\n\n## [Slots](#slots)\n\n*   **base**: The base slot of the spinner, it wraps the circles and the label.\n*   **wrapper**: The wrapper of the circles.\n*   **circle1**: The first circle of the spinner.\n*   **circle2**: The second circle of the spinner.\n*   **label**: The label content.\n\n## [API](#api)\n\n### [Circular Progress Props](#circular-progress-props)\n\n| Attribute | Type | Description | Default |\n| --- | --- | --- | --- |\n| label | `string` | The content to display as the label. | \\-  |\n| size | `sm` \\| `md` \\| `lg` | The size of the spinner circles. | `md` |\n| color | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger` | The color of the spinner circles. | `primary` |\n| labelColor | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger` | The color of the label. | `default` |\n| classNames | `Record<\"base\"｜\"wrapper\"｜\"circle1\"｜\"circle2\"｜\"label\", string>` | Allows to set custom class names for the spinner slots. | \\-  |",
    "title": "Spinner | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Spinner express an unspecified wait time or display the length of a process.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/checkbox",
    "markdown": "# Checkbox | NextUI - Beautiful, fast and modern React UI Library\n\nCheckboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [Radius](#radius)\n\n### [Indeterminate](#indeterminate)\n\nThe `isIndeterminate` prop sets a `Checkbox` to an indeterminate state, overriding its appearance and maintaining it until set to `false`, regardless of user interaction.\n\n### [Line Through](#line-through)\n\n### [Custom Check Icon](#custom-check-icon)\n\n> By default, `IconProps` will be passed to your icon component. Please make sure that `isSelected`, `isIndeterminate`, and `disableAnimation` are not passed to a DOM element.\n\n### [Controlled](#controlled)\n\n> **Note**: NextUI `Checkbox` also supports native events like `onChange`, useful for form libraries such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n## [Slots](#slots)\n\n*   **base**: Checkbox wrapper, it handles alignment, placement, and general appearance.\n*   **wrapper**: An inner container that includes styles for relative positioning, flex properties, overflow handling and managing hover and selected states.\n*   **icon**: Icon within the checkbox, controlling size, visibility, and changes when checked.\n*   **label**: The text associated with the checkbox.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Checkbox` component by passing custom Tailwind CSS classes to the component slots.\n\n### [Custom Implementation](#custom-implementation)\n\nIn case you need to customize the checkbox even further, you can use the `useCheckbox` hook to create your own implementation.\n\n> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.\n\n## [Data Attributes](#data-attributes)\n\n`Checkbox` has the following attributes on the `base` element:\n\n*   **data-selected**: When the checkbox is checked. Based on `isSelected` prop.\n*   **data-pressed**: When the checkbox is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-invalid**: When the checkbox is invalid. Based on `validationState` prop.\n*   **data-readonly**: When the checkbox is readonly. Based on `isReadOnly` prop.\n*   **data-indeterminate**: When the checkbox is indeterminate. Based on `isIndeterminate` prop.\n*   **data-hover**: When the checkbox is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-focus**: When the checkbox is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the checkbox is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-disabled**: When the checkbox is disabled. Based on `isDisabled` prop.\n*   **data-loading**: When the checkbox is loading. Based on `isLoading` prop.\n\n## [Accessibility](#accessibility)\n\n*   Built with a native HTML `<input>` element.\n*   Full support for browser features like form autofill.\n*   Keyboard focus management and cross browser normalization.\n*   Keyboard event support for Tab and Space keys.\n*   Labeling support for assistive technology.\n*   Indeterminate state support.\n\n## [API](#api)\n\n### [Checkbox Props](#checkbox-props)\n\n### [Checkbox Events](#checkbox-events)\n\n### [Types](#types)\n\n#### [Checkbox Icon Props](#checkbox-icon-props)\n\ntype IconProps \\= {\n\n  \"data-checked\": string;\n\n  isSelected: boolean;\n\n  isIndeterminate: boolean;\n\n  disableAnimation: boolean;\n\n  className: string;\n\n};\n\ntype CheckboxIconProps \\= ReactNode | ((props: IconProps) \\=> ReactNode);",
    "title": "Checkbox | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/checkbox-group",
    "markdown": "# Checkbox Group | NextUI - Beautiful, fast and modern React UI Library\n\nA CheckboxGroup allows users to select one or more items from a list of choices.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 2 checkbox-related components:\n\n*   **CheckboxGroup**: The root component, it wraps the label and the wrapper.\n*   **Checkbox**: The checkbox component.\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Horizontal](#horizontal)\n\n### [Controlled](#controlled)\n\nYou can use the `value` and `onValueChange` properties to control the checkbox input value.\n\n### [Invalid](#invalid)\n\n## [Slots](#slots)\n\n*   **base**: Checkbox group root wrapper, it wraps the label and the wrapper.\n*   **wrapper**: Checkbox group wrapper, it wraps all checkboxes.\n*   **label**: Checkbox group label, it is placed before the wrapper.\n*   **description**: The description of the checkbox group.\n*   **errorMessage**: The error message of the checkbox group.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `CheckboxGroup` component by passing custom Tailwind CSS classes to the component slots.\n\n### [Custom Implementation](#custom-implementation)\n\nIn case you need to customize the checkbox even further, you can use the `useCheckboxGroup` hook to create your own implementation.\n\n> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.\n\n## [API](#api)\n\n### [Checkbox Group Props](#checkbox-group-props)\n\n### [Checkbox Group Events](#checkbox-group-events)",
    "title": "Checkbox Group | NextUI - Beautiful, fast and modern React UI Library",
    "description": "A CheckboxGroup allows users to select one or more items from a list of choices.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/switch",
    "markdown": "# Switch | NextUI - Beautiful, fast and modern React UI Library\n\nThe Switch component is used as an alternative between checked and not checked states.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [With Label](#with-label)\n\n### [Disabled](#disabled)\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [With Thumb Icon](#with-thumb-icon)\n\n### [With Icons](#with-icons)\n\nYou can also add icons to start and end of the switch by using `startContent` and `endContent` props.\n\n### [Controlled](#controlled)\n\n> **Note**: NextUI `Switch` also supports native events like `onChange`, useful for form libraries such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n## [Slots](#slots)\n\n*   **base**: Base slot for the switch. It is the main wrapper.\n*   **wrapper**: The wrapper of the start icon, end icon and thumb.\n*   **thumb**: The thumb element of the switch. It is the circle element.\n*   **label**: The label slot of the switch.\n*   **startContent**: The icon slot at the start of the switch.\n*   **endContent**: The icon slot at the end of the switch.\n*   **thumbIcon**: The icon slot inside the thumb.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Switch` component by passing custom Tailwind CSS classes to the component slots.\n\n### [Custom Implementation](#custom-implementation)\n\nIn case you need to customize the switch even further, you can use the `useSwitch` hook to create your own implementation.\n\n## [Data Attributes](#data-attributes)\n\n`Switch` has the following attributes on the `base` element:\n\n*   **data-selected**: When the switch is checked. Based on `isSelected` prop.\n*   **data-pressed**: When the switch is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-readonly**: When the switch is readonly. Based on `isReadOnly` prop.\n*   **data-hover**: When the switch is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-focus**: When the switch is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the switch is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-disabled**: When the switch is disabled. Based on `isDisabled` prop.\n\n## [Accessibility](#accessibility)\n\n*   Built with a native HTML `<input>` element.\n*   Full support for browser features like form autofill.\n*   Keyboard focus management and cross browser normalization.\n*   Keyboard event support for Tab and Space keys.\n*   Labeling support for assistive technology.\n*   Exposed as a switch to assistive technology via ARIA\n\n## [API](#api)\n\n### [Switch Props](#switch-props)\n\n### [Switch Events](#switch-events)\n\n### [Types](#types)\n\n#### [Switch Icon Props](#switch-icon-props)\n\ntype IconProps \\= {\n\n  \"data-checked\": string;\n\n  width: string;\n\n  height: string;\n\n  isSelected: boolean;\n\n  className: string;\n\n};\n\ntype CheckboxIconProps \\= ReactNode | ((props: IconProps) \\=> ReactNode);",
    "title": "Switch | NextUI - Beautiful, fast and modern React UI Library",
    "description": "The Switch component is used as an alternative between checked and not checked states.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/chip",
    "markdown": "# Chip | NextUI - Beautiful, fast and modern React UI Library\n\nA Chip is a small block of essential information that represent an input, attribute, or action.\n\nIf you pass the `onClose` prop, the close button will be visible. You can override the close icon by passing the `endContent` prop.\n\nYou can customize the `Chip` component by passing custom Tailwind CSS classes to the component slots.",
    "title": "Chip | NextUI - Beautiful, fast and modern React UI Library",
    "description": "A Chip is a small block of essential information that represent an input, attribute, or action.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/slider",
    "markdown": "# Slider | NextUI - Beautiful, fast and modern React UI Library\n\nA slider allows a user to select one or more values within a range.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Sizes](#sizes)\n\n### [Radius](#radius)\n\n### [Colors](#colors)\n\n### [Vertical Slider](#vertical-slider)\n\nIt is possible to change the orientation of the slider by using the `orientation=\"vertical\"` prop.\n\n### [With Visible Steps](#with-visible-steps)\n\nYou can use the `showSteps` prop to display small dots on each step.\n\n### [With Marks](#with-marks)\n\nYou can use the `marks` prop to display a label on each step.\n\n### [Range Slider](#range-slider)\n\nIf you pass an array of values to the `value` prop or to the `defaultValue` prop, the slider will become a range slider.\n\n### [Fill Offset](#fill-offset)\n\nThe `fillOffset` prop allows you to set where the fill should start.\n\n### [With Tooltip](#with-tooltip)\n\nThe `showTooltip` prop allows you to show a tooltip with the current thumb value when the user hovers or drags the thumb.\n\n> **Note:** You can change any of the tooltip props by passing the `tooltipProps` to the `Slider` component.\n\n### [With Outline](#with-outline)\n\nIt is possible to add a small outline to the slider's thumbs by passing the `showOutline` prop.\n\n### [Start & End Content](#start--end-content)\n\nSlider component provides `startContent` and `endContent` props that allows you to add any `ReactNode` to the start and end of the slider.\n\n### [Value Formatting](#value-formatting)\n\nValues are formatted as a percentage by default, but this can be modified by using the `formatOptions` prop to specify a different format. `formatOptions` is compatible with the option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.\n\n> **Note:** Use the `tooltipValueFormatOptions` prop to format the tooltip value.\n\nIt is also possible to format the value using the `getValue` prop.\n\n### [Hiding the Value](#hiding-the-value)\n\nThe Slider value is shown by default, but can be hidden by passing the `hideValue` prop.\n\n### [Hiding the Thumbs](#hiding-the-thumbs)\n\nThe Slider thumbs are shown by default, but can be hidden by passing the `hideThumb` prop.\n\n### [Controlled](#controlled)\n\nYou can control the slider by passing the `value` and `onChange` props.\n\nIf you want to capture the slider value only when the user stops dragging the thumb, you can use the `onChangeEnd` prop.\n\n### [Controlled Range](#controlled-range)\n\nYou can also control the range slider by using an array of values in the `value` and `onChange` props.\n\n### [Custom Thumb](#custom-thumb)\n\nThe Slider component provides a `renderThumb` prop that allows you to customize the thumb in any way you want.\n\n### [Custom Range Thumbs](#custom-range-thumbs)\n\nYou can also use the `renderThumb` prop to customize the thumbs of a range slider. The `index` prop will tell you which thumb is being rendered.\n\n### [Custom Label](#custom-label)\n\nThe Slider component provides a `renderLabel` prop that allows you to customize the label in any way you want.\n\n### [Custom Value](#custom-value)\n\nThe Slider component provides a `renderValue` prop that allows you to customize the value label element.\n\n### [Disabling Thumb Scale](#disabling-thumb-scale)\n\nIn case you want to disable the thumb scale animation, you can pass the `disableThumbScale` prop.\n\n## [Slots](#slots)\n\n*   **base**: The foundational slot, encompassing all other slots and elements. It serves as the primary container.\n*   **labelWrapper**: The container for the Slider's label and value. It aligns these elements and ensures a consistent layout.\n*   **label**: A dedicated slot to display the Slider's label.\n*   **value**: Displays the current value of the Slider. Located within the `labelWrapper`.\n*   **step**: Represents individual steps or intervals on the Slider.\n*   **mark**: Denotes specific values or intervals along the Slider.\n*   **trackWrapper**: A container for the slider's track, ensuring it is consistently aligned and positioned.\n*   **track**: The base bar of the Slider, along which the thumb moves.\n*   **filler**: A visual representation of the selected value, filling the track from the start point to the current thumb position.\n*   **thumb**: The interactive element that users drag along the track to select a value on the Slider.\n*   **startContent**: A slot for additional content or icons at the beginning of the Slider.\n*   **endContent**: A slot for additional content or icons at the end of the Slider.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Slider` component by passing custom Tailwind CSS classes to the component slots.\n\n## [Data Attributes](#data-attributes)\n\n`Slider` has the following attributes:\n\n*   **data-hover**: When the slider is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-orientation**: The orientation of the slider. Based on `orientation` prop.\n\n`Thumbs` have the following attributes which are returned by the `renderThumb` prop:\n\n*   **data-dragging**: When the thumb is being dragged.\n*   **data-focus-visible**: When the thumb is focused. Based on [useFocusVisible](https://react-spectrum.adobe.com/react-aria/useFocusVisible.html)\n*   **data-hover**: When the thumb is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-pressed**: When the thumb is being pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n\n## [Accessibility](#accessibility)\n\n*   Support for one or multiple thumbs.\n*   Support for mouse, touch, and keyboard via the [useMove](https://react-spectrum.adobe.com/react-aria/useMove.html) hook.\n*   Multi-touch support for dragging multiple thumbs or multiple sliders at once.\n*   Pressing on the track moves the nearest thumb to that position.\n*   Supports using the arrow keys, as well as page up/down, home, and end keys.\n*   Support for both horizontal and vertical orientations.\n*   Support for custom min, max, and step values with handling for rounding errors.\n*   Support for disabling the whole slider or individual thumbs.\n*   Prevents text selection while dragging.\n*   Exposed to assistive technology as a group of slider elements via ARIA.\n*   Slider thumbs use hidden native input elements to support touch screen readers.\n*   Support for labeling both the slider as a whole and individual thumbs.\n*   Support for displaying the current thumb values using an `<output>` element.\n*   Internationalized number formatting as a percentage or value.\n*   Support for mirroring in RTL locales.\n\n## [API](#api)\n\n### [Slider Props](#slider-props)\n\n### [Slider Functions](#slider-functions)\n\n### [Slider Events](#slider-events)\n\n### [Types](#types)\n\n#### [Slider Value](#slider-value)\n\nexport type SliderValue \\= number | number\\[\\];\n\n#### [Slider Step Marks](#slider-step-marks)\n\nexport type SliderStepMarks \\= {\n\n  value: number;\n\n  label: string;\n\n}\\[\\];",
    "title": "Slider | NextUI - Beautiful, fast and modern React UI Library",
    "description": "A slider allows a user to select one or more values within a range.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/code",
    "markdown": "# Code | NextUI - Beautiful, fast and modern React UI Library\n\nCode is a component used to display inline code.\n\n* * *\n\n## [Installation](#installation)\n\nnpx nextui-cli@latest add code\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n## [API](#api)\n\n### [Code Props](#code-props)\n\n| Attribute | Type | Description | Default |\n| --- | --- | --- | --- |\n| children | `ReactNode` | The content of the code. | \\-  |\n| size | `sm` \\| `md` \\| `lg` | The size of the code. | `sm` |\n| color | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger` | The color of the code. | `default` |\n| radius | `none` \\| `sm` \\| `md` \\| `lg` \\| `full` | The radius of the code. | `sm` |",
    "title": "Code | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Code is a component used to display inline code. ",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/table",
    "markdown": "# Table | NextUI - Beautiful, fast and modern React UI Library\n\nTables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 6 table-related components:\n\n*   **Table**: The main component to display a table.\n*   **TableHeader**: The header of the table.\n*   **TableBody**: The body of the table.\n*   **TableColumn**: The column of the table.\n*   **TableRow**: The row of the table.\n*   **TableCell**: The cell of the table.\n\n## [Usage](#usage)\n\n### [Dynamic](#dynamic)\n\nTo render a table dynamically, you can use the `columns` prop to pass the columns and `items` prop to pass the data.\n\n#### [Why not array map?](#why-not-array-map)\n\nUsing the `items` prop and providing a render function allows [react-aria](https://react-spectrum.adobe.com/react-aria/index.html) to automatically cache the results of rendering each item and avoid re-rendering all items in the collection when only one of them changes. This has big performance benefits for large collections.\n\nYou could also use `Array.map` to render the items, but it will not be as performant as using the `items` and `columns` prop.\n\nExample:\n\nimport {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from \"@nextui-org/react\";\n\nconst rows \\= \\[...\\];\n\nconst columns \\= \\[...\\];\n\nexport default function App() {\n\n  return (\n\n    <Table aria-label\\=\"Example table with dynamic content\"\\>\n\n      <TableHeader\\>\n\n        {columns.map((column) \\=>\n\n          <TableColumn key\\={column.key}\\>{column.label}</TableColumn\\>\n\n        )}\n\n      </TableHeader\\>\n\n      <TableBody\\>\n\n        {rows.map((row) \\=>\n\n          <TableRow key\\={row.key}\\>\n\n            {(columnKey) \\=> <TableCell\\>{getKeyValue(row, columnKey)}</TableCell\\>}\n\n          </TableRow\\>\n\n        )}\n\n      </TableBody\\>\n\n    </Table\\>\n\n  );\n\n}\n\n> **Note**: To learn more about React Aria collections and how to use them, please check [React Aria Collections](https://react-spectrum.adobe.com/react-stately/collections.html).\n\n### [Empty State](#empty-state)\n\nYou can use the `emptyContent` prop to render a custom component when the table is empty.\n\nIn case you don't want to render the header, you can use the `hideHeader` prop.\n\n### [Without Wrapper](#without-wrapper)\n\nBy default the table is wrapped in a `div` element with a small shadow effect and a border radius. You can use the `removeWrapper` prop to remove the wrapper and only render the table.\n\n### [Custom Cells](#custom-cells)\n\nYou can render any component inside the table cell. In the example below, we are rendering different components according to the `key` of the column.\n\n### [Striped Rows](#striped-rows)\n\nYou can use the `isStriped` prop to render striped rows.\n\n### [Single Row Selection](#single-row-selection)\n\nIt is possible to make the table rows selectable. To do so, you can use the `selectionMode` prop. Use `defaultSelectedKeys` to provide a default set of selected rows.\n\n> **Note**: The value of the selected keys must match the key prop of the row.\n\n### [Multiple Row Selection](#multiple-row-selection)\n\nYou can also select multiple rows by using the `selectionMode=\"multiple\"` prop. Use `defaultSelectedKeys` to provide a default set of selected rows.\n\n> **Note**: When using multiple selection, selectable checkboxes will be rendered in the first column of the table.\n\n### [Disallow Empty Selection](#disallow-empty-selection)\n\nTable also supports a `disallowEmptySelection` prop which forces the user to have at least one row in the Table selected at all times. In this mode, if a single row is selected and the user presses it, it will not be deselected.\n\n### [Controlled Selection](#controlled-selection)\n\nTo programmatically control row selection, use the `selectedKeys` prop paired with the `onSelectionChange` callback. The key prop from the selected rows will be passed into the callback when the row is pressed, allowing you to update state accordingly.\n\n> **Note**: The `selectedKeys` property must be a `Set` object.\n\n### [Disabled Rows](#disabled-rows)\n\nYou can disable rows by using the `disabledKeys` prop. This will prevent rows from being selectable as shown in the example below.\n\n### [Selection Behavior](#selection-behavior)\n\nBy default, Table uses the `toggle` selection behavior, which behaves like a checkbox group: clicking, tapping, or pressing the Space or Enter keys toggles selection for the focused row.\n\nWhen the `selectionBehavior` prop is set to `replace`, clicking a row with the mouse replaces the selection with only that row. Using the arrow keys moves both focus and selection. To select multiple rows, modifier keys such as Ctrl, Cmd, and Shift can be used.\n\n### [Rows Actions](#rows-actions)\n\nTable supports rows via the `onRowAction` callback. In the default `toggle` selection behavior, when nothing is selected, clicking or tapping the row triggers the row action.\n\nThis behavior is slightly different in the `replace` selection behavior, where single clicking selects the row and actions are performed via double click.\n\n### [Sorting Rows](#sorting-rows)\n\nTable supports sorting its data when a column header is pressed. To designate that a `Column` should support sorting, provide it with the `allowsSorting` prop.\n\nTable accepts a `sortDescriptor` prop that defines the current column key to sort by and the sort direction (ascending/descending). When the user presses a sortable column header, the column's key and sort direction is passed into the `onSortChange` callback, allowing you to update the `sortDescriptor` appropriately.\n\nWe recommend using the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) to manage the data sorting. So make sure to install it before using the sorting feature.\n\nimport {useAsyncList} from \"@react-stately/data\";\n\n> Note that we passed the `isLoading` and `loadingContent` props to `TableBody` to render a loading state while the data is being fetched.\n\n### [Loading more data](#loading-more-data)\n\nTable allows you to add a custom component at the end of the table, on the example below we are using a button to load more data.\n\n> **Note**: We passed the `isHeaderSticky` to the `Table` component to make the header sticky.\n\n### [Paginated Table](#paginated-table)\n\nYou can use the [Pagination](https://nextui.org/components/pagination) component to paginate the table.\n\nIt is also possible to use the [Pagination](https://nextui.org/components/pagination) component to paginate the table asynchronously. To fetch the data, we are using the `useSWR` hook from [SWR](https://swr.vercel.app/docs/pagination).\n\nTable also supports infinite pagination. To do so, you can use the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) and [@nextui-org/use-infinite-scroll](https://www.npmjs.com/package/@nextui-org/use-infinite-scroll) hook.\n\n### [Use Case Example](#use-case-example)\n\nWhen creating a table, you usually need core functionalities like sorting, pagination, and filtering. In the example below, we combined all these functionalities to create a complete table.\n\n## [Slots](#slots)\n\n*   **base**: Defines a flexible column layout and relative positioning for the table component.\n*   **wrapper**: Applies to the outermost wrapper, providing padding, flexible layout, relative positioning, visual styles, and scrollable overflow handling.\n*   **table**: Sets the table to have a full minimum width and auto-adjusting height.\n*   **thead**: Specifies rounded corners for the first child row in the table header.\n*   **tbody**: No specific styles are applied to the body of the table.\n*   **tr**: Styles for table rows including group focus, outline properties, and a set of undefined focus-visible classes.\n*   **th**: Styles for table headers, including padding, text alignment, font properties, and special styles for sortable columns.\n*   **td**: Applies to table cells, with properties for padding, alignment, and relative positioning, plus special styles for first child elements, selection indication, and disabled cells.\n*   **tfoot**: No specific styles are applied to the footer of the table.\n*   **sortIcon**: Styles for sorting icons, with properties for margin, opacity, and transition effects based on sorting direction and hover state.\n*   **emptyWrapper**: Defines style for an empty table, with text alignment, color, and a specified height.\n*   **loadingWrapper**: Style applied when the table is loading, positioning it centrally in its container.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Table` component by passing custom Tailwind CSS classes to the component slots.\n\n## [Data Attributes](#data-attributes)\n\n`TableBody` has the following attributes:\n\n*   **data-empty**: When the table is empty.\n*   **data-loading**: When the table data is loading. Based on `TableBody` `isLoading` and `loadingContent` props.\n\n`TableRow` has the following attributes:\n\n*   **data-selected**: When the row is selected. Based on `Table` `selectedKeys` prop.\n*   **data-disabled**: When the row is disabled. Based on `Table` `disabledKeys` prop.\n*   **data-hover**: When the row is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-focus-visible**: When the row is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-first**: When the row is the first row.\n*   **data-middle**: When the row is in the middle.\n*   **data-odd**: When the row is odd.\n*   **data-last**: When the row is the last row.\n\n`TableCell` has the following attributes:\n\n*   **data-selected**: When the cell row is selected. Based on `Table` `selectedKeys` prop.\n*   **data-focus-visible**: When the cell is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n## [Accessibility](#accessibility)\n\n*   Exposed to assistive technology as a grid using ARIA.\n*   Keyboard navigation between columns, rows, cells, and in-cell focusable elements via the arrow keys.\n*   Single, multiple, or no row selection via mouse, touch, or keyboard interactions.\n*   Support for disabled rows, which cannot be selected.\n*   Column sorting support.\n*   Async loading, infinite scrolling, filtering, and sorting support.\n*   Support for both toggle and replace selection behaviors.\n*   Labeling support for accessibility.\n*   Ensures that selections are announced using an ARIA live region.\n*   Support for marking columns as row headers, which will be read when navigating the rows with a screen reader.\n*   Optional support for checkboxes in each row for selection, as well as in the header to select all rows.\n*   Automatic scrolling support during keyboard navigation.\n*   Support for row actions via double click, Enter key, or tapping.\n*   Typeahead to allow focusing rows by typing text.\n*   Long press to enter selection mode on touch when there is both selection and row actions.\n\n## [API](#api)\n\n### [Table Props](#table-props)\n\n### [Table Events](#table-events)\n\n#### [TableColumn Props](#tablecolumn-props)\n\n#### [TableBody Props](#tablebody-props)\n\n### [TableBody Events](#tablebody-events)\n\n#### [TableRow Props](#tablerow-props)\n\n#### [TableCell Props](#tablecell-props)\n\n* * *\n\n### [Table types](#table-types)\n\n#### [Sort descriptor](#sort-descriptor)\n\ntype SortDescriptor \\= {\n\n  column: React.Key;\n\n  direction: \"ascending\" | \"descending\";\n\n};\n\n#### [Selection](#selection)\n\ntype Selection \\= \"all\" | Set<React.Key\\>;\n\n#### [Loading state](#loading-state)\n\ntype LoadingState \\= \"loading\" | \"sorting\" | \"loadingMore\" | \"error\" | \"idle\" | \"filtering\";",
    "title": "Table | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Tables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/tabs",
    "markdown": "# Tabs | NextUI - Beautiful, fast and modern React UI Library\n\nTabs organize content into multiple sections and allow users to navigate between them.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 2 tabs-related components:\n\n*   **Tabs**: The main component to display a tab list.\n*   **Tab**: The component to display a tab item. The children of this component will be displayed as the content of the tab.\n\n## [Usage](#usage)\n\n### [Dynamic](#dynamic)\n\nYou can render tabs dynamically by using `items` prop.\n\n### [Disabled](#disabled)\n\n### [Disabled Item](#disabled-item)\n\n### [Sizes](#sizes)\n\n### [Radius](#radius)\n\n### [Colors](#colors)\n\n### [Variants](#variants)\n\n### [With Icons](#with-icons)\n\n### [Controlled](#controlled)\n\nYou can use the `onSelectionChange` and `selectedKey` props to control the selected tab.\n\n### [Placement](#placement)\n\nYou can change the position of the tabs by using the `placement` prop. The default value is `top`.\n\n### [Vertical](#vertical)\n\nChange the orientation of the tabs it will invalidate the placement prop when the value is `true`.\n\n### [Links](#links)\n\nTabs items can be rendered as links by passing the `href` prop to the `Tab` component. By default, links perform native browser navigation. However, you'll usually want to synchronize the selected tab with the current URL from your client side router. You can do this by doing the following:\n\n1.  Set up your router at the root of your app. See [Routing guide](https://nextui.org/docs/guide/routing) to learn how to do this.\n2.  Use the `selectedKey` prop to set the selected tab based on the current URL.\n\n#### [Next.js](#nextjs)\n\nThis example uses [Next.js App router](https://nextjs.org/docs/app/api-reference/functions/use-pathname) to set up routes for each tab and synchronize the selected tab with the current URL.\n\n// app/tabs/page.tsx\n\n\"use client\";\n\nimport {usePathname} from \"next/navigation\";\n\nfunction ExampleClientRouterWithTabs() {\n\n  const pathname \\= usePathname();\n\n  return (\n\n    <Tabs aria-label\\=\"Options\" selectedKey\\={pathname}\\>\n\n      <Tab key\\=\"photos\" title\\=\"Photos\" href\\=\"/photos\"\\>\n\n        <Card\\>\n\n          <CardBody\\>\n\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n\n            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n\n            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n          </CardBody\\>\n\n        </Card\\>\n\n      </Tab\\>\n\n      <Tab key\\=\"music\" title\\=\"Music\" href\\=\"/music\"\\>\n\n        <Card\\>\n\n          <CardBody\\>\n\n            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n\n            commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\n\n            dolore eu fugiat nulla pariatur.\n\n          </CardBody\\>\n\n        </Card\\>\n\n      </Tab\\>\n\n      <Tab key\\=\"videos\" title\\=\"Videos\" href\\=\"/videos\"\\>\n\n        <Card\\>\n\n          <CardBody\\>\n\n            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt\n\n            mollit anim id est laborum.\n\n          </CardBody\\>\n\n        </Card\\>\n\n      </Tab\\>\n\n    </Tabs\\>\n\n  );\n\n}\n\n#### [React Router](#react-router)\n\nThis example uses [React Router](https://reactrouter.com/en/main) to setup routes for each tab and synchronize the selection with the URL.\n\nimport {Route, Routes, useLocation} from \"react-router-dom\";\n\nimport {Tabs, Tab} from \"@nextui-org/react\";\n\nfunction AppTabs() {\n\n  const {pathname} \\= useLocation();\n\n  return (\n\n    <div className\\=\"flex flex-col gap-2\"\\>\n\n      <Tabs selectedKey\\={pathname} aria-label\\=\"Tabs\"\\>\n\n        <Tab id\\=\"/\" href\\=\"/\" title\\=\"Home\" />\n\n        <Tab id\\=\"/photos\" href\\=\"/photos\" title\\=\"Photos\" />\n\n        <Tab id\\=\"/music\" href\\=\"/music\" title\\=\"Music\" />\n\n        <Tab id\\=\"/videos\" href\\=\"/videos\" title\\=\"Videos\" />\n\n      </Tabs\\>\n\n      <Routes\\>\n\n        <Route path\\=\"/\" element\\={<HomePage />} />\n\n        <Route path\\=\"/photos\" element\\={<PhotosPage />} />\n\n        <Route path\\=\"/music\" element\\={<MusicPage />} />\n\n        <Route path\\=\"/videos\" element\\={<VideosPage />} />\n\n      </Routes\\>\n\n    </div\\>\n\n  );\n\n}\n\n> **Note**: See the [Routing guide](https://nextui.org/docs/guide/routing) to learn how to set up the router for your framework.\n\n### [With Form](#with-form)\n\n## [Slots](#slots)\n\n*   **base**: The main tabs slot, it wraps the items and the panels.\n*   **tabList**: The tab list slot, it wraps the tab items.\n*   **tab**: The tab slot, it wraps the tab item.\n*   **tabContent**: The tab content slot, it wraps the tab content.\n*   **cursor**: The cursor slot, it wraps the cursor. This is only visible when `disableAnimation=false`\n*   **panel**: The panel slot, it wraps the tab panel (content).\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Tabs` component by passing custom Tailwind CSS classes to the component slots.\n\n## [Data Attributes](#data-attributes)\n\n`Tab` has the following attributes on the `base` element:\n\n*   **data-selected**: When the tab is selected.\n*   **data-disabled**: When the tab is disabled.\n*   **data-hover**: When the tab is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).\n*   **data-hover-selected**: When the tab is being hovered and is not selected. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html) and `selected` state.\n*   **data-focus**: When the tab is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the tab is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-pressed**: When the tab is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).\n\n## [Accessibility](#accessibility)\n\n*   Support for mouse, touch, and keyboard interactions on tabs.\n*   Keyboard event support for arrows keys.\n*   Support for disabled tabs.\n*   Follows the tabs ARIA pattern, semantically linking tabs and their associated tab panels.\n*   Focus management for tab panels without any focusable children.\n\n## [API](#api)\n\n### [Tabs Props](#tabs-props)\n\n### [Tabs Events](#tabs-events)\n\n### [Tab Props](#tab-props)\n\n#### [Motion Props](#motion-props)\n\nexport type MotionProps \\= HTMLMotionProps<\"div\"\\>; // @see https://www.framer.com/motion/",
    "title": "Tabs | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Tabs organize content into multiple sections and allow users to navigate between them.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/input",
    "markdown": "# Input | NextUI - Beautiful, fast and modern React UI Library\n\nInput is a component that allows users to enter text. It can be used to get user inputs in forms, search fields, and more.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Read Only](#read-only)\n\n### [Required](#required)\n\nIf you pass the `isRequired` property to the input, it will have a `danger` asterisk at the end of the label and the input will be required.\n\n### [Sizes](#sizes)\n\n### [Colors](#colors)\n\n### [Variants](#variants)\n\n### [Radius](#radius)\n\n### [Label Placements](#label-placements)\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### [Password Input](#password-input)\n\nYou can use the `type` property to change the input type to `password`.\n\n### [Clear Button](#clear-button)\n\nIf you pass the `isClearable` property to the input, it will have a clear button at the end of the input, it will be visible when the input has a value.\n\n### [Start & End Content](#start--end-content)\n\nYou can use the `startContent` and `endContent` properties to add content to the start and end of the input.\n\n### [With Description](#with-description)\n\nYou can add a description to the input by passing the `description` property.\n\n### [With Error Message](#with-error-message)\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input. `errorMessage` is only shown when `isInvalid` is set to `true`.\n\nExample with `regex` email validation:\n\n### [Controlled](#controlled)\n\nYou can use the `value` and `onValueChange` properties to control the input value.\n\n> **Note**: NextUI `Input` also supports native events like `onChange`, useful for form libraries such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n## [Slots](#slots)\n\n*   **base**: Input wrapper, it handles alignment, placement, and general appearance.\n*   **label**: Label of the input, it is the one that is displayed above, inside or left of the input.\n*   **mainWrapper**: Wraps the `inputWrapper` when position is `outside` / `outside-left`.\n*   **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n*   **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.\n*   **input**: The input element.\n*   **clearButton**: The clear button, it is at the end of the input.\n*   **helperWrapper**: Wraps the `description` and the `errorMessage`.\n*   **description**: The description of the input.\n*   **errorMessage**: The error message of the input.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Input` component by passing custom Tailwind CSS classes to the component slots.\n\n### [Custom Implementation](#custom-implementation)\n\nIn case you need to customize the input even further, you can use the `useInput` hook to create your own implementation.\n\n## [Data Attributes](#data-attributes)\n\n`Input` has the following attributes on the `base` element:\n\n*   **data-invalid**: When the input is invalid. Based on `isInvalid` prop.\n*   **data-required**: When the input is required. Based on `isRequired` prop.\n*   **data-readonly**: When the input is readonly. Based on `isReadOnly` prop.\n*   **data-hover**: When the input is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-focus**: When the input is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-within**: When the input is being focused or any of its children. Based on [useFocusWithin](https://react-spectrum.adobe.com/react-aria/useFocusWithin.html).\n*   **data-focus-visible**: When the input is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-disabled**: When the input is disabled. Based on `isDisabled` prop.\n\n## [Accessibility](#accessibility)\n\n*   Built with a native `<input>` element.\n*   Visual and ARIA labeling support.\n*   Change, clipboard, composition, selection, and input event support.\n*   Required and invalid states exposed to assistive technology via ARIA.\n*   Support for description and error message help text linked to the input via ARIA.\n\n## [API](#api)\n\n### [Input Props](#input-props)\n\n### [Input Events](#input-events)",
    "title": "Input | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Input is a component that allows users to enter text. It can be used to get user inputs in forms, search fields, and more.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/date-input",
    "markdown": "# DateInput | NextUI - Beautiful, fast and modern React UI Library\n\nDateInput is a component that allows users to enter and edit date and time values using a keyboard. Each part of a date value is displayed in an individually editable segment.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Read Only](#read-only)\n\n### [Required](#required)\n\n### [Variants](#variants)\n\n### [Label Placements](#label-placements)\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### [Start & End Content](#start--end-content)\n\nYou can use the `startContent` and `endContent` properties to add content to the start and end of the `DateInput`.\n\n### [With Description](#with-description)\n\nYou can add a description to the input by passing the `description` property.\n\n### [With Error Message](#with-error-message)\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input.\n\nYou can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://nextui.org/docs/components/(https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51)).\n\n### [Controlled](#controlled)\n\nYou can use the `value` and `onChange` properties to control the input value.\n\n### [Time Zones](#time-zones)\n\nDateInput is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\n### [Granularity](#granularity)\n\nThe granularity prop allows you to control the smallest unit that is displayed by DateInput By default, the value is displayed with \"day\" granularity (year, month, and day), and `CalendarDateTime` and `ZonedDateTime` values are displayed with \"minute\" granularity.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\n### [Min Date And Max Date](#min-date-and-max-date)\n\nThe minValue and maxValue props can also be used to ensure the value is within a specific range.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n\n### [International Calendar](#international-calendar)\n\nDateInput supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nimport {I18nProvider} from \"@react-aria/i18n\";\n\n### [Hide Time Zone](#hide-time-zone)\n\nWhen a `ZonedDateTime` object is provided as the value to DateInput, the time zone abbreviation is displayed by default. However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the hideTimeZone option.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\n### [Hourly Cycle](#hourly-cycle)\n\nBy default, DateInput displays times in either 12 or 24 hour hour format depending on the user's locale. However, this can be overridden using the `hourCycle` prop if needed for a specific usecase. This example forces DateInput to use 24-hour time, regardless of the locale.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\n## [Slots](#slots)\n\n*   **base**: Input wrapper, it handles alignment, placement, and general appearance.\n*   **label**: Label of the date-input, it is the one that is displayed above, inside or left of the date-input.\n*   **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n*   **input**: The date-input element.\n*   **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.\n*   **clearButton**: The clear button, it is at the end of the input.\n*   **helperWrapper**: Wraps the `description` and the `errorMessage`.\n*   **description**: The description of the date-input.\n*   **errorMessage**: The error message of the date-input.\n\n## [Data Attributes](#data-attributes)\n\n`DateInput` has the following attributes on the `base` element:\n\n*   **data-slot**: All slots have this prop. which slot the element represents(e.g. `slot`).\n*   **data-invalid**: When the date-input is invalid. Based on `isInvalid` prop.\n*   **data-required**: When the date-input is required. Based on `isRequired` prop.\n*   **data-readonly**: When the date-input is readonly. Based on `isReadOnly` prop.\n*   **data-disabled**: When the date-input is disabled. Based on `isDisabled` prop.\n*   **data-has-helper**: When the date-input has helper text(`errorMessage` or `description`). Base on those two props.\n*   **data-has-start-content**: When the date-input has a start content. Base on those `startContent` prop.\n*   **data-has-end-content**: When the date-input has a end content. Base on those `endContent` prop.\n\n## [Accessibility](#accessibility)\n\n*   Built with a native `<input>` element.\n*   Visual and ARIA labeling support.\n*   Change, clipboard, composition, selection, and input event support.\n*   Required and invalid states exposed to assistive technology via ARIA.\n*   Support for description and error message help text linked to the input via ARIA.\n*   Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.\n*   Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\n\n## [API](#api)\n\n### [DateInput Props](#dateinput-props)\n\n### [DateInput Events](#dateinput-events)",
    "title": "DateInput | NextUI - Beautiful, fast and modern React UI Library",
    "description": "DateInput is a component that allows users to enter and edit date and time values using a keyboard. Each part of a date value is displayed in an individually editable segment.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/textarea",
    "markdown": "# Textarea | NextUI - Beautiful, fast and modern React UI Library\n\nchildren`ReactNode`The content of the textarea.-minRows`number`The minimum number of rows to display.`3`maxRows`number`Maximum number of rows up to which the textarea can grow.`8`cacheMeasurements`boolean`Reuse previously computed measurements when computing height of textarea.`false`variant`flat` | `bordered` | `faded` | `underlined`The variant of the textarea.`flat`color`default` | `primary` | `secondary` | `success` | `warning` | `danger`The color of the textarea.`default`size`sm`|`md`|`lg`The size of the textarea.`md`radius`none` | `sm` | `md` | `lg` | `full`The radius of the textarea.-label`ReactNode`The content to display as the label.-value`string`The current value of the textarea (controlled).-defaultValue`string`The default value of the textarea (uncontrolled).-placeholder`string`The placeholder of the textarea.-startContent`ReactNode`Element to be rendered in the left side of the input.-endContent`ReactNode`Element to be rendered in the right side of the input.-description`ReactNode`A description for the textarea. Provides a hint such as specific requirements for what to choose.-errorMessage`ReactNode` | `((v: ValidationResult) => ReactNode)`An error message for the textarea.-validate`(value: string) => ValidationError ｜ true ｜ null ｜ undefined`Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.-validationBehavior`native` | `aria`Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.`aria`labelPlacement`inside` | `outside` | `outside-left`The position of the label.`inside`fullWidth`boolean`Whether the textarea should take up the width of its parent.`true`isRequired`boolean`Whether user input is required on the textarea before form submission.`false`isReadOnly`boolean`Whether the textarea can be selected but not changed by the user.isDisabled`boolean`Whether the textarea is disabled.`false`isInvalid`boolean`Whether the textarea is invalid.`false`validationState`valid` | `invalid`Whether the textarea should display its \"valid\" or \"invalid\" visual styling. (**Deprecated**) use **isInvalid** instead.-disableAutosize`boolean`Whether the textarea auto vertically resize should be disabled.`false`disableAnimation`boolean`Whether the textarea should be animated.`false`classNames`Record<\"base\"｜ \"label\"｜ \"inputWrapper\"｜ \"innerWrapper\" ｜ \"input\" ｜ \"description\" ｜ \"errorMessage\", string>`Allows to set custom class names for the checkbox slots.-",
    "title": "Textarea | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Textarea component is a multi-line Input which allows you to write large texts.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/tooltip",
    "markdown": "# Tooltip | NextUI - Beautiful, fast and modern React UI Library\n\nTooltips display a brief, informative message that appears when a user interacts with an element.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n> For individual installation, please note that you should add `./node_modules/@nextui-org/theme/dist/components/popover.js` to your `tailwind.config.js` file instead since tooltip reuses popover styles.\n\n## [Usage](#usage)\n\n### [With Arrow](#with-arrow)\n\n### [Colors](#colors)\n\n### [Placements](#placements)\n\n### [Offset](#offset)\n\n### [Controlled](#controlled)\n\n### [With Delay](#with-delay)\n\nYou can control the `open` and `close` delay of the tooltip with `delay` and `closeDelay` props.\n\nHovering over the second button shows the tooltip immediately. If you wait for a delay before hovering another element, the delay restarts.\n\n### [Custom Content](#custom-content)\n\n### [Custom Motion](#custom-motion)\n\nTooltip offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n## [Slots](#slots)\n\n*   **base**: The main tooltip slot, it wraps the tooltip content.\n*   **arrow**: The arrow slot, it wraps the tooltip arrow, the placement of the arrow is based on the tooltip placement, e.g. `data-[placement=top]:...`.\n\n### [Custom Styles](#custom-styles)\n\nYou can customize the `Tooltip` component by passing custom Tailwind CSS classes to the component slots.\n\n## [Data Attributes](#data-attributes)\n\n`Tooltip` has the following attributes on the `base` element:\n\n*   **data-open**: When the tooltip is open. Based on tooltip state.\n*   **data-placement**: The placement of the tooltip. Based on `placement` prop. The arrow element is positioned based on this attribute.\n*   **data-disabled**: When the tooltip is disabled. Based on `isDisabled` prop.\n\n## [Accessibility](#accessibility)\n\n*   Keyboard focus management and cross browser normalization.\n*   Hover management and cross browser normalization.\n*   Labeling support for screen readers (aria-describedby).\n*   Exposed as a tooltip to assistive technology via ARIA.\n*   Matches native tooltip behavior with delay on hover of first tooltip and no delay on subsequent tooltips.\n\n## [API](#api)\n\n### [Tooltip Props](#tooltip-props)\n\n### [Tooltip Events](#tooltip-events)\n\n### [Tooltip types](#tooltip-types)\n\n#### [Tooltip Placement](#tooltip-placement)\n\ntype TooltipPlacement \\=\n\n  | \"top\"\n\n  | \"bottom\"\n\n  | \"right\"\n\n  | \"left\"\n\n  | \"top-start\"\n\n  | \"top-end\"\n\n  | \"bottom-start\"\n\n  | \"bottom-end\"\n\n  | \"left-start\"\n\n  | \"left-end\"\n\n  | \"right-start\"\n\n  | \"right-end\";\n\n#### [Motion Props](#motion-props)\n\nexport type MotionProps \\= HTMLMotionProps<\"div\"\\>; // @see https://www.framer.com/motion/",
    "title": "Tooltip | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Tooltips display a brief, informative message that appears when a user interacts with an element.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/circular-progress",
    "markdown": "# Circular Progress | NextUI - Beautiful, fast and modern React UI Library\n\nCircular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.\n\nValues are formatted as a percentage by default, but this can be modified by using the `formatOptions` prop to specify a different format. `formatOptions` is compatible with the option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.\n\nYou can customize the `CircularProgress` component by passing custom Tailwind CSS classes to the component slots.",
    "title": "Circular Progress | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/time-input",
    "markdown": "# Time Input | NextUI - Beautiful, fast and modern React UI Library\n\nThe `TimeInput` component consists of a label, and a group of segments representing each unit of a time (e.g. hours, minutes, and seconds). Each segment is individually focusable and editable by the user, by typing or using the arrow keys to increment and decrement the value. This approach allows values to be formatted and parsed correctly regardless of the locale or time format, and offers an easy and error-free way to edit times using the keyboard.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\nA `TimeInput` displays a placeholder by default. An initial, uncontrolled value can be provided to the TimeField using the defaultValue prop. Alternatively, a controlled value can be provided using the value prop.\n\nTime values are provided using objects in the `@internationalized/date` package. This library handles correct international date and time manipulation across calendars, time zones, and other localization concerns.\n\n`TimeInput` only supports selecting times, but values with date components are also accepted. By default, `TimeInput` will emit `Time` objects in the onChange event, but if a `CalendarDateTime` or `ZonedDateTime` object is passed as the `value` or `defaultValue`, values of that type will be emitted, changing only the time and preserving the date components.\n\n### [Required](#required)\n\n`TimeInput` supports the `isRequired` prop to ensure the user enters a value, as well as minimum and maximum values, and custom client and server-side validation.\n\n### [Disabled](#disabled)\n\nThe `isDisabled` boolean prop makes `TimeInput` disabled. Inputs cannot be focused or selected.\n\n### [Read Only](#read-only)\n\nThe `isReadOnly` boolean prop makes `TimeInput`'s value immutable. Unlike `isDisabled`, `TimeInput` remains focusable.\n\n### [Without Label](#without-label)\n\n`TimeInput` supports the `label` prop to show or not show the label.\n\n### [With Description](#with-description)\n\nA description for the field. Provides a hint such as specific requirements for what to choose.\n\n### [With Error Message](#with-error-message)\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input.\n\nYou can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://nextui.org/docs/components/(https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51)).\n\n### [Label Placement](#label-placement)\n\nThe label's overall position relative to the element it is labeling.\n\n### [Start Content](#start-content)\n\nIf you want to display some content before the time inputs, you can set the `startContent` property.\n\n### [End Content](#end-content)\n\nIf you want to display some content after the time inputs, you can set the `endContent` property.\n\n### [Controlled](#controlled)\n\nAn initial, uncontrolled value can be provided to the `TimeInput` using the `defaultValue` prop. A controlled value can be provided using the `value` prop.\n\n### [Time Zones](#time-zones)\n\n`TimeInput` is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.\n\nIn most cases, your data will come from and be sent to a server as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string. [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into ZonedDateTime objects. Which format you use will depend on what information you need to store.\n\n*   `parseZonedDateTime` – This function parses a date with an explicit time zone and optional UTC offset attached (e.g. `2021-11-07T00:45[America/Los_Angeles]` or `2021-11-07T00:45-07:00[America/Los_Angeles]`). This format preserves the maximum amount of information. If the exact local time and time zone that a user selected is important, use this format. Storing the time zone and offset that was selected rather than converting to UTC ensures that the local time is correct regardless of daylight saving rule changes (e.g. if a locale abolishes DST). Examples where this applies include calendar events, reminders, and other times that occur in a particular location.\n*   `parseAbsolute` – This function parses an absolute date and time that occurs at the same instant at all locations on Earth. It can be represented in UTC (e.g. `2021-11-07T07:45:00Z`), or stored with a particular offset (e.g. `2021-11-07T07:45:00-07:00`). A time zone identifier, e.g. America/Los\\_Angeles, must be passed, and the result will be converted into that time zone. Absolute times are the best way to represent events that occurred in the past, or future events where an exact time is needed, regardless of time zone.\n*   `parseAbsoluteToLocal` – This function parses an absolute date and time into the current user's local time zone. It is a shortcut for parseAbsolute, and accepts the same formats.\n\n### [Granularity](#granularity)\n\nThe `granularity` prop allows you to control the smallest unit that is displayed by TimeInput. By default, times are displayed with \"minute\" granularity. More granular time values can be displayed by setting the granularity prop to \"second\".\n\n### [Min Time Value](#min-time-value)\n\nThe `minValue` prop allows you to validate time value before a certain time.\n\n### [Max Time Value](#max-time-value)\n\nThe `maxValue` prop allows you to validate time value before a certain time.\n\n### [Placeholder Value](#placeholder-value)\n\nWhen no value is set, a placeholder is shown. The format of the placeholder is influenced by the `granularity` and `placeholderValue` props. placeholderValue also controls the default values of each segment when the user first interacts with them, e.g. using the up and down arrow keys. By default, the placeholderValue is midnight, but you can set it to a more appropriate value if needed.\n\n### [Hide Time Zone](#hide-time-zone)\n\nWhen a `ZonedDateTime` object is provided as the value to `TimeInput`, the time zone abbreviation is displayed by default. However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the `hideTimeZone` option.\n\n### [Hour Cycle](#hour-cycle)\n\nBy default, `TimeInput` displays times in either 12 or 24 hour hour format depending on the user's locale. However, this can be overridden using the `hourCycle` prop if needed for a specific usecase. This example forces `TimeInput` to use 24-hour time, regardless of the locale.\n\n## [Slots](#slots)\n\n*   **base**: Input wrapper, it handles alignment, placement, and general appearance.\n*   **label**: Label of the time input, it is the one that is displayed above, inside or left of the time input.\n*   **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n*   **input**: The time input element.\n*   **innerWrapper**: Wraps the segments, the `startContent` and the `endContent`.\n*   **segment**: The segment of input elements.\n*   **helperWrapper**: The wrapper of the helper text. This wraps the helper text and the error message.\n*   **description**: The description of the time input.\n*   **errorMessage**: The error message of the time input.\n\n## [Data Attributes](#data-attributes)\n\n`TimeInput` has the following attributes on the `base` element:\n\n*   **data-has-helper**: When the time input has description or error message. Based on `description` or `errorMessage` props.\n*   **data-required**: When the time input is required. Based on `isRequired` prop.\n*   **data-disabled**: When the time input is disabled. Based on `isDisabled` prop.\n*   **data-readonly**: When the time input is readonly. Based on `isReadOnly` prop.\n*   **data-invalid**: When the time input is invalid. Based on `isInvalid` prop.\n*   **data-has-start-content**: When the time input has start content. Based on `startContent` prop.\n*   **data-has-end-content**: When the time input has end content. Based on `endContent` prop.\n\n## [Accessibility](#accessibility)\n\n*   Support for locale-specific formatting, number systems, hour cycles, and right-to-left layout.\n*   Times can optionally include a time zone. All modifications follow time zone rules such as daylight saving time.\n*   Each time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit times using the keyboard, in any format and locale.\n*   Time segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\n\n## [API](#api)\n\n### [TimeInput Props](#timeinput-props)\n\n### [TimeInput Events](#timeinput-events)",
    "title": "Time Input | NextUI - Beautiful, fast and modern React UI Library",
    "description": "A time input allows users to enter and edit time values using a keyboard. Each part of a time value is displayed in an individually editable segment.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/user",
    "markdown": "# User | NextUI - Beautiful, fast and modern React UI Library\n\nDisplay user information with avatar and name.\n\n`User` has the following attributes on the `root` element only when `isFocusable` is `true`:",
    "title": "User | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Display user information with avatar and name.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/calendar",
    "markdown": "# Calendar | NextUI - Beautiful, fast and modern React UI Library\n\nA calendar consists of a grouping element containing one or more date grids (e.g. months), and a previous and next button for navigating between date ranges. Each calendar grid consists of cells containing button elements that can be pressed and navigated to using the arrow keys to select a date.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\nA Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the `value` prop.\n\nDate values are provided using objects in the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) package. This library handles correct international date manipulation across calendars, time zones, and other localization concerns.\n\n### [Disabled](#disabled)\n\nThe `isDisabled` boolean prop makes the Calendar disabled. Cells cannot be focused or selected.\n\n### [Read Only](#read-only)\n\nThe `isReadOnly` boolean prop makes the Calendar's value immutable. Unlike `isDisabled`, the Calendar remains focusable.\n\n### [Controlled](#controlled)\n\nA Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the value prop.\n\n### [Min Date Value](#min-date-value)\n\nBy default, Calendar allows selecting any date. The `minValue` can also be used to prevent the user from selecting dates outside a certain range.\n\nThis example only accepts dates after today.\n\n### [Max Date Value](#max-date-value)\n\nBy default, Calendar allows selecting any date. The `maxValue` can also be used to prevent the user from selecting dates outside a certain range.\n\nThis example only accepts dates before today.\n\n### [Unavailable Dates](#unavailable-dates)\n\nCalendar supports marking certain dates as unavailable. These dates remain focusable with the keyboard so that navigation is consistent, but cannot be selected by the user. In this example, they are displayed in red. The `isDateUnavailable` prop accepts a callback that is called to evaluate whether each visible date is unavailable.\n\n### [Controlled Focused Value](#controlled-focused-value)\n\nCalendar tries to avoid allowing the user to select invalid dates in the first place. However, if according to application logic a selected date is invalid, the isInvalid prop can be set. This alerts assistive technology users that the selection is invalid, and can be used for styling purposes as well. In addition, the errorMessage slot may be used to help the user fix the issue.\n\nBy default, the selected date is focused when a Calendar first mounts. If no `value` or `defaultValue` prop is provided, then the current date is focused. However, Calendar supports controlling which date is focused using the `focusedValue` and `onFocusChange` props. This also determines which month is visible. The `defaultFocusedValue` prop allows setting the initial focused date when the Calendar first mounts, without controlling it.\n\n### [Invalid Date](#invalid-date)\n\nThis example validates that the selected date is a weekday and not a weekend according to the current locale.\n\n### [With Month And Year Picker](#with-month-and-year-picker)\n\nCalendar supports month and year picker for rapid selection.\n\n### [International Calendars](#international-calendars)\n\nCalendar supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the `Provider` component.\n\n### [Visible Months](#visible-months)\n\nBy default, the Calendar displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time.\n\n### [Page Behaviour](#page-behaviour)\n\nBy default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.\n\n### [Presets](#presets)\n\nHere's the example to customize `topContent` and `bottomContent` to have some preset values.\n\n## [Slots](#slots)\n\n*   **base**: Calendar wrapper, it handles alignment, placement, and general appearance.\n*   **prevButton**: The previous button of the calendar.\n*   **nextButton**: The next button of the calendar.\n*   **headerWrapper**: Wraps the picker (month / year).\n*   **header**: The header element.\n*   **title**: A description of the visible date range, for use in the calendar title.\n*   **gridWrapper**: The wrapper for the calendar grid.\n*   **grid**: The date grid element (e.g. `<table>`).\n*   **gridHeader**: The date grid header element (e.g. `<th>`).\n*   **gridHeaderRow**: The date grid header row element (e.g. `<tr>`).\n*   **gridHeaderCell**: The date grid header cell element (e.g. `<td>`).\n*   **gridBody**: The date grid body element (e.g. `<tbody>`).\n*   **gridBodyRow**: The date grid body row element (e.g. `<tr>`).\n*   **cell**: The date grid cell element (e.g. `<td>`).\n*   **cellButton**: The button element within the cell.\n*   **pickerWrapper**: The wrapper for the picker\n*   **pickerMonthList**: The month list picker.\n*   **pickerYearList**: The year list picker.\n*   **pickerHighlight**: The highlighted item of the picker.\n*   **pickerItem**: The item of the picker.\n*   **helperWrapper**: The helper message of the calendar.\n*   **errorMessage**: The error message of the calendar.\n\n## [Data Attributes](#data-attributes)\n\n`Calendar` has the following attributes on the `CalendarCell` element:\n\n*   **data-focused**: Whether the cell is focused.\n*   **data-hovered**: Whether the cell is currently hovered with a mouse.\n*   **data-pressed**: Whether the cell is currently being pressed.\n*   **data-unavailable**: Whether the cell is unavailable, according to the calendar's `isDateUnavailable` prop. Unavailable dates remain focusable, but cannot be selected by the user. They should be displayed with a visual affordance to indicate they are unavailable, such as a different color or a strikethrough.\n*   **data-disabled**: Whether the cell is disabled, according to the calendar's `minValue`, `maxValue`, and `isDisabled` props.\n*   **data-focus-visible**: Whether the cell is keyboard focused.\n*   **data-outside-visible-range**: Whether the cell is outside the visible range of the calendar.\n*   **data-outside-month**: Whether the cell is outside the current month.\n*   **data-selected**: Whether the cell is selected.\n*   **data-selected-start**: Whether the cell is the first date in a range selection.\n*   **data-selected-end**: Whether the cell is the last date in a range selection.\n*   **data-invalid**: Whether the cell is part of an invalid selection.\n\n## [Accessibility](#accessibility)\n\n*   Display one or more months at once, or a custom time range for use cases like a week view. Minimum and maximum values, unavailable dates, and non-contiguous selections are supported as well.\n*   Support for 13 calendar systems used around the world, including Gregorian, Buddhist, Islamic, Persian, and more. Locale-specific formatting, number systems, and right-to-left support are available as well.\n*   Calendar cells can be navigated and selected using the keyboard, and localized screen reader messages are included to announce when the selection and visible date range change.\n\n## [API](#api)\n\n### [Calendar Props](#calendar-props)\n\n### [Calendar Events](#calendar-events)\n\n### [Types](#types)\n\n#### [Supported Calendars](#supported-calendars)\n\n/\\*\\*\n\n \\* Supported react-aria i18n calendars.\n\n \\*/\n\nexport type SupportedCalendars \\=\n\n  | \"buddhist\"\n\n  | \"ethiopic\"\n\n  | \"ethioaa\"\n\n  | \"coptic\"\n\n  | \"hebrew\"\n\n  | \"indian\"\n\n  | \"islamic-civil\"\n\n  | \"islamic-tbla\"\n\n  | \"islamic-umalqura\"\n\n  | \"japanese\"\n\n  | \"persian\"\n\n  | \"roc\"\n\n  | \"gregory\";",
    "title": "Calendar | NextUI - Beautiful, fast and modern React UI Library",
    "description": "The Calendar component is used to display one or more date grids and allows users to select a single date.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/date-range-picker",
    "markdown": "# Date Range Picker | NextUI\n\nDate Range Picker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Read Only](#read-only)\n\n### [Required](#required)\n\nIf you pass the `isRequired` property to the input, it will have a `danger` asterisk at the end of the label and the input will be required.\n\n### [Variants](#variants)\n\n### [Visible Months](#visible-months)\n\nBy default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.\n\n### [Page Behavior](#page-behavior)\n\nBy default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.\n\n### [Label Placements](#label-placements)\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### [With Description](#with-description)\n\nYou can add a description to the input by passing the `description` property.\n\n### [With Error Message](#with-error-message)\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input.\n\nYou can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://nextui.org/docs/components/(https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51)).\n\n### [With Time Fields](#with-time-fields)\n\nDateRangePicker automatically includes time fields when a `CalendarDateTime` or `ZonedDateTime` object is provided as the value.\n\n### [Selector Icon](#selector-icon)\n\nYou can use the `selector` to add content to the start and end of the date-range-picker.\n\n### [Controlled](#controlled)\n\nYou can use the `value` and `onChange` properties to control the input value.\n\n### [Time Zones](#time-zones)\n\nDateRangePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\n### [Granularity](#granularity)\n\nThe granularity prop allows you to control the smallest unit that is displayed by DateRangePicker By default, the value is displayed with \"day\" granularity (year, month, and day), and `CalendarDateTime` and `ZonedDateTime` values are displayed with \"minute\" granularity.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\n### [Min Date And Max Date](#min-date-and-max-date)\n\nThe minValue and maxValue props can also be used to ensure the value is within a specific range.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n\n### [International Calendar](#international-calendar)\n\nDateRangePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nimport {I18nProvider} from \"@react-aria/i18n\";\n\n### [Unavailable Dates](#unavailable-dates)\n\nDateRangePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\n\nimport {useLocale} from \"@react-aria/i18n\";\n\n### [Non Contiguous](#non-contiguous)\n\nThe allowsNonContiguousRanges prop enables a range to be selected even if there are unavailable dates in the middle. The value emitted in the onChange event will still be a single range with a start and end property, but unavailable dates will not be displayed as selected. It is up to applications to split the full selected range into multiple as needed for business logic.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\n\nimport {useLocale} from \"@react-aria/i18n\";\n\n### [Presets](#presets)\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {\n\n  DateValue,\n\n  now,\n\n  startOfWeek,\n\n  startOfMonth,\n\n  getLocalTimeZone,\n\n} from \"@internationalized/date\";\n\nimport {useLocale, useDateFormatter} from \"@react-aria/i18n\";\n\n## [Slots](#slots)\n\n*   **base**: base element. it handles alignment, placement, and general appearance.\n*   **label**: Label of the date-range-picker, it is the one that is displayed above, inside or left of the date-input.\n*   **calendar**: The calendar element.\n*   **selectorButton**: Selector button element.\n*   **selectorIcon**: Selector icon element.\n*   **popoverContent**: The calendar popover element.\n*   **calendarContent**: The calendar's content element.\n*   **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n*   **input**: The input element.\n*   **segment**: The segment element.\n*   **separator**: The separator element.\n*   **bottomContent**: The bottom content element.\n*   **timeInputWrapper**: The wrapper element for the input element.\n*   **helperWrapper**: Wraps the `description` and the `errorMessage`.\n*   **description**: The description of the date-input.\n*   **errorMessage**: The error message of the date-input.\n\n## [Data Attributes](#data-attributes)\n\n`DateRangePicker` has the following attributes on the `base` element:\n\n*   **data-slot**: All slots have this prop. which slot the element represents(e.g. `canlendar`).\n*   **data-open**: Indicates if the calendar popover is open.\n*   **data-invalid**: When the date-range-picker is invalid. Based on `isInvalid` prop.\n*   **data-required**: When the date-range-picker is required. Based on `isRequired` prop.\n*   **data-readonly**: When the date-range-picker is readonly. Based on `isReadOnly` prop.\n*   **data-disabled**: When the date-range-picker is disabled. Based on `isDisabled` prop.\n*   **data-has-start-content**: When the date-range-picker has a start content. Base on those `startContent` prop.\n*   **data-has-end-content**: When the date-range-picker has a end content. Base on those `endContent` prop.\n*   **data-has-multiple-months**: When the date-range-picker's `visibleMonth` is more than 2.\n\n## [Accessibility](#accessibility)\n\n*   Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale\n*   Users can also open a calendar popover to select date ranges in a standard month grid. Localized screen reader messages are included to announce when the selection and visible date range change.\n*   Date segments are editable using an easy to use numeric keypad, date ranges can be selected by dragging over dates in the calendar using a touch screen, and all interactions are accessible using touch-based screen readers.\n*   Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors\n\n## [API](#api)\n\n### [DateRangePicker Props](#daterangepicker-props)\n\n### [DateRangePicker Events](#daterangepicker-events)",
    "title": "Date Range Picker | NextUI - Beautiful, fast and modern React UI Library",
    "description": "DateRangePicker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/range-calendar",
    "markdown": "# Range Calendar | NextUI - Beautiful, fast and modern React UI Library\n\nA range calendar consists of a grouping element containing one or more date grids (e.g. months), and a previous and next button for navigating through time. Each calendar grid consists of cells containing button elements that can be pressed and navigated to using the arrow keys to select a date range. Once a start date is selected, the user can navigate to another date using the keyboard or by hovering over it, and clicking it or pressing the Enter key commits the selected date range.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\nA RangeCalendar has no selection by default. An initial, uncontrolled value can be provided to the RangeCalendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the `value` prop.\n\nDate values are provided using objects in the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) package. This library handles correct international date manipulation across calendars, time zones, and other localization concerns.\n\n### [Disabled](#disabled)\n\nThe `isDisabled` boolean prop makes the Calendar disabled. Cells cannot be focused or selected.\n\n### [Read Only](#read-only)\n\nThe `isReadOnly` boolean prop makes the Calendar's value immutable. Unlike `isDisabled`, the Calendar remains focusable.\n\n### [Controlled](#controlled)\n\nA Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the value prop.\n\n### [Min Date Value](#min-date-value)\n\nBy default, Calendar allows selecting any date. The `minValue` can also be used to prevent the user from selecting dates outside a certain range.\n\nThis example only accepts dates after today.\n\n### [Max Date Value](#max-date-value)\n\nBy default, Calendar allows selecting any date. The `maxValue` can also be used to prevent the user from selecting dates outside a certain range.\n\nThis example only accepts dates before today.\n\n### [Unavailable Dates](#unavailable-dates)\n\nCalendar supports marking certain dates as unavailable. These dates remain focusable with the keyboard so that navigation is consistent, but cannot be selected by the user. In this example, they are displayed in red. The `isDateUnavailable` prop accepts a callback that is called to evaluate whether each visible date is unavailable.\n\n### [Non-Contiguous Ranges](#non-contiguous-ranges)\n\nThe `allowsNonContiguousRanges` prop enables a range to be selected even if there are unavailable dates in the middle. The value emitted in the onChange event will still be a single range with a start and end property, but unavailable dates will not be displayed as selected. It is up to applications to split the full selected range into multiple as needed for business logic.\n\nThis example prevents selecting weekends, but allows selecting ranges that span multiple weeks.\n\n### [Controlled Focused Value](#controlled-focused-value)\n\nCalendar tries to avoid allowing the user to select invalid dates in the first place. However, if according to application logic a selected date is invalid, the isInvalid prop can be set. This alerts assistive technology users that the selection is invalid, and can be used for styling purposes as well. In addition, the errorMessage slot may be used to help the user fix the issue.\n\nBy default, the selected date is focused when a Calendar first mounts. If no `value` or `defaultValue` prop is provided, then the current date is focused. However, Calendar supports controlling which date is focused using the `focusedValue` and `onFocusChange` props. This also determines which month is visible. The `defaultFocusedValue` prop allows setting the initial focused date when the Calendar first mounts, without controlling it.\n\n### [Invalid Date](#invalid-date)\n\nThis example validates that the selected date is a weekday and not a weekend according to the current locale.\n\n### [International Calendars](#international-calendars)\n\nCalendar supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the `Provider` component.\n\n### [Visible Months](#visible-months)\n\nBy default, the Calendar displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time.\n\n### [Page Behaviour](#page-behaviour)\n\nBy default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.\n\n### [Presets](#presets)\n\nHere's the example to customize `topContent` and `bottomContent` to have some preset values.\n\n## [Slots](#slots)\n\n*   **base**: Calendar wrapper, it handles alignment, placement, and general appearance.\n*   **prevButton**: The previous button of the calendar.\n*   **nextButton**: The next button of the calendar.\n*   **headerWrapper**: Wraps the picker (month / year).\n*   **header**: The header element.\n*   **title**: A description of the visible date range, for use in the calendar title.\n*   **gridWrapper**: The wrapper for the calendar grid.\n*   **grid**: The date grid element (e.g. `<table>`).\n*   **gridHeader**: The date grid header element (e.g. `<th>`).\n*   **gridHeaderRow**: The date grid header row element (e.g. `<tr>`).\n*   **gridHeaderCell**: The date grid header cell element (e.g. `<td>`).\n*   **gridBody**: The date grid body element (e.g. `<tbody>`).\n*   **gridBodyRow**: The date grid body row element (e.g. `<tr>`).\n*   **cell**: The date grid cell element (e.g. `<td>`).\n*   **cellButton**: The button element within the cell.\n*   **pickerWrapper**: The wrapper for the picker\n*   **pickerMonthList**: The month list picker.\n*   **pickerYearList**: The year list picker.\n*   **pickerHighlight**: The highlighted item of the picker.\n*   **pickerItem**: The item of the picker.\n*   **helperWrapper**: The helper message of the calendar.\n*   **errorMessage**: The error message of the calendar.\n\n## [Data Attributes](#data-attributes)\n\n`Calendar` has the following attributes on the `CalendarCell` element:\n\n*   **data-focused**: Whether the cell is focused.\n*   **data-hovered**: Whether the cell is currently hovered with a mouse.\n*   **data-pressed**: Whether the cell is currently being pressed.\n*   **data-unavailable**: Whether the cell is unavailable, according to the calendar's `isDateUnavailable` prop. Unavailable dates remain focusable, but cannot be selected by the user. They should be displayed with a visual affordance to indicate they are unavailable, such as a different color or a strikethrough.\n*   **data-disabled**: Whether the cell is disabled, according to the calendar's `minValue`, `maxValue`, and `isDisabled` props.\n*   **data-focus-visible**: Whether the cell is keyboard focused.\n*   **data-outside-visible-range**: Whether the cell is outside the visible range of the calendar.\n*   **data-outside-month**: Whether the cell is outside the current month.\n*   **data-selected**: Whether the cell is selected.\n*   **data-selected-start**: Whether the cell is the first date in a range selection.\n*   **data-selected-end**: Whether the cell is the last date in a range selection.\n*   **data-invalid**: Whether the cell is part of an invalid selection.\n\n## [Accessibility](#accessibility)\n\n*   Display one or more months at once, or a custom time range for use cases like a week view. Minimum and maximum values, unavailable dates, and non-contiguous selections are supported as well.\n*   Support for 13 calendar systems used around the world, including Gregorian, Buddhist, Islamic, Persian, and more. Locale-specific formatting, number systems, and right-to-left support are available as well.\n*   Calendar cells can be navigated and selected using the keyboard, and localized screen reader messages are included to announce when the selection and visible date range change.\n\n## [API](#api)\n\n### [RangeCalendar Props](#rangecalendar-props)\n\n### [RangeCalendar Events](#rangecalendar-events)\n\n#### [Supported Calendars](#supported-calendars)\n\n/\\*\\*\n\n \\* Supported react-aria i18n calendars.\n\n \\*/\n\nexport type SupportedCalendars \\=\n\n  | \"buddhist\"\n\n  | \"ethiopic\"\n\n  | \"ethioaa\"\n\n  | \"coptic\"\n\n  | \"hebrew\"\n\n  | \"indian\"\n\n  | \"islamic-civil\"\n\n  | \"islamic-tbla\"\n\n  | \"islamic-umalqura\"\n\n  | \"japanese\"\n\n  | \"persian\"\n\n  | \"roc\"\n\n  | \"gregory\";",
    "title": "Range Calendar | NextUI - Beautiful, fast and modern React UI Library",
    "description": "The Range Calendar component is used to display one or more date grids and allows users to select a contiguous range of dates.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/date-picker",
    "markdown": "# DatePicker | NextUI - Beautiful, fast and modern React UI Library\n\nDatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Disabled](#disabled)\n\n### [Read Only](#read-only)\n\n### [Required](#required)\n\n### [Variants](#variants)\n\n### [Label Placements](#label-placements)\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### [With Description](#with-description)\n\nYou can add a description to the date-picker by passing the `description` property.\n\n### [With Error Message](#with-error-message)\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input.\n\nYou can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://nextui.org/docs/components/(https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51)).\n\n### [With Month and Year Pickers](#with-month-and-year-pickers)\n\n### [With Time Fields](#with-time-fields)\n\n### [Selector Icon](#selector-icon)\n\nYou can use the `selector` to add content to the start and end of the date-picker.\n\n### [Controlled](#controlled)\n\nYou can use the `value` and `onChange` properties to control the input value.\n\n### [Time Zones](#time-zones)\n\nDatePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\n### [Granularity](#granularity)\n\nThe granularity prop allows you to control the smallest unit that is displayed by DatePicker By default, the value is displayed with \"day\" granularity (year, month, and day), and `CalendarDateTime` and `ZonedDateTime` values are displayed with \"minute\" granularity.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\n### [Min Date And Max Date](#min-date-and-max-date)\n\nThe minValue and maxValue props can also be used to ensure the value is within a specific range.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n\n### [International Calendar](#international-calendar)\n\nDatePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nimport {I18nProvider} from \"@react-aria/i18n\";\n\n### [Unavailable Dates](#unavailable-dates)\n\nDatePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\n\nimport {useLocale} from \"@react-aria/i18n\";\n\n### [Visible Months](#visible-months)\n\nBy default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.\n\n### [Page Behavior](#page-behavior)\n\nBy default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.\n\n### [Preset](#preset)\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into `ZonedDateTime` objects.\n\nimport {\n\n  DateValue,\n\n  now,\n\n  useLocale,\n\n  startOfWeek,\n\n  startOfMonth,\n\n  useDateFormatter,\n\n  getLocalTimeZone,\n\n} from \"@internationalized/date\";\n\nimport {I18nProvider} from \"@react-aria/i18n\";\n\n## [Slots](#slots)\n\n*   **base**: Input wrapper, it handles alignment, placement, and general appearance.\n*   **selectorButton**: Selector button element.\n*   **selectorIcon**: Selector icon element.\n*   **popoverContent**: The calendar popover element.\n*   **calendar**: The calendar element.\n*   **calendarContent**: The calendar's content element.\n*   **timeInputLabel**: The time-input component's label element.\n*   **timeInput**: The time-input component element.\n\n## [Data Attributes](#data-attributes)\n\n`DatePicker` has the following attributes on the `base` element:\n\n*   **data-slot**: All slots have this prop. which slot the element represents(e.g. `canlendar`).\n*   **data-open**: Indicates if the calendar popover is open.\n*   **data-invalid**: When the date-picker is invalid. Based on `isInvalid` prop.\n*   **data-required**: When the date-picker is required. Based on `isRequired` prop.\n*   **data-readonly**: When the date-picker is readonly. Based on `isReadOnly` prop.\n*   **data-disabled**: When the date-picker is disabled. Based on `isDisabled` prop.\n\n## [Accessibility](#accessibility)\n\n*   Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.\n*   Users can also open a calendar popover to select dates in a standard month grid.\n*   Localized screen reader messages are included to announce when the selection and visible date range change.\n*   Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\n*   Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors\n\n## [API](#api)\n\n### [DatePicker Props](#datepicker-props)\n\n### [DatePicker Events](#datepicker-events)",
    "title": "DatePicker | NextUI - Beautiful, fast and modern React UI Library",
    "description": "DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/divider",
    "markdown": "# Divider | NextUI - Beautiful, fast and modern React UI Library\n\nDivider is a component that separates content in a page.\n\n* * *\n\n## [Installation](#installation)\n\nnpx nextui-cli@latest add divider\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n## [Data Attributes](#data-attributes)\n\n`Divider` has the following attributes on the `base` element:\n\n*   **data-orientation**: The orientation of the divider. Based on `orientation` prop.\n\n## [Accessibility](#accessibility)\n\n*   Separator role is added to the divider.\n*   Support for horizontal and vertical orientation.\n*   Support for HTML `<hr>` element or a custom element type.\n\n## [API](#api)\n\n### [Divider Props](#divider-props)\n\n| Attribute | Type | Description | Default |\n| --- | --- | --- | --- |\n| orientation | `horizontal` \\| `vertical` | The orientation of the divider. | `horizontal` |",
    "title": "Divider | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Divider is a component that separates content in a page.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/kbd",
    "markdown": "# Keyboard Key | NextUI - Beautiful, fast and modern React UI Library\n\nKeyboard key is a component to display which key or combination of keys performs a given action.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\n## [Usage](#usage)\n\n### [Keys](#keys)\n\n> **Note**: Check the [API](#keyboard-keys) section to see all available keys.\n\n## [Slots](#slots)\n\n*   **base**: Kbd wrapper, it handles alignment, placement, and general appearance.\n*   **abbr**: The `keys` wrapper that handles the appearance of the keys.\n*   **content**: The children wrapper that handles the appearance of the content.\n\n## [Accessibility](#accessibility)\n\n*   Each command `key` has a `title` attribute that describes the action that the key performs.\n\n## [API](#api)\n\n### [Keyboard Key Props](#keyboard-key-props)\n\n### [Keyboard Keys](#keyboard-keys)\n\nList of supported keys.\n\ntype KbdKey \\=\n\n  | \"command\"\n\n  | \"shift\"\n\n  | \"ctrl\"\n\n  | \"option\"\n\n  | \"enter\"\n\n  | \"delete\"\n\n  | \"escape\"\n\n  | \"tab\"\n\n  | \"capslock\"\n\n  | \"up\"\n\n  | \"right\"\n\n  | \"down\"\n\n  | \"left\"\n\n  | \"pageup\"\n\n  | \"pagedown\"\n\n  | \"home\"\n\n  | \"end\"\n\n  | \"help\"\n\n  | \"space\";",
    "title": "Keyboard Key | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Keyboard key is a component to display which key or combination of keys performs a given action.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/image",
    "markdown": "# Image | NextUI - Beautiful, fast and modern React UI Library\n\nThe Image component is used to display images with support for fallback.\n\nYou can use the `isBlurred` prop to duplicate the image and blur it to create a blurred effect.\n\nYou can use the `isZoomed` prop make the image zoomed when hovered.\n\nImage component has a built-in `skeleton` animation to indicate the image is loading and an `opacity` animation when the image loads.\n\nNext.js provides an optimized [Image](https://nextjs.org/docs/app/api-reference/components/image) component, you can use it with NextUI `Image` component as well.",
    "title": "Image | NextUI - Beautiful, fast and modern React UI Library",
    "description": "The Image component is used to display images with support for fallback.",
    "languageCode": "en"
  },
  {
    "url": "https://nextui.org/docs/components/(https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts",
    "markdown": "NextUI - Beautiful, fast and modern React UI Library",
    "title": "NextUI - Beautiful, fast and modern React UI Library",
    "description": "Make beautiful websites regardless of your design experience.",
    "languageCode": null
  },
  {
    "url": "https://nextui.org/docs/components/dropdown",
    "markdown": "# Dropdown | NextUI - Beautiful, fast and modern React UI Library\n\nDisplays a list of actions or options that a user can choose.\n\n* * *\n\n## [Installation](#installation)\n\n> The above command is for individual installation only. You may skip this step if `@nextui-org/react` is already installed globally.\n\n## [Import](#import)\n\nNextUI exports 5 dropdown-related components:\n\n*   **Dropdown**: The main component, which is a wrapper for the other components. This component is an extension of the [Popover](https://nextui.org/docs/components/popover) component, so it accepts all the props of the Popover component.\n*   **DropdownTrigger**: The component that triggers the dropdown menu to open.\n*   **DropdownMenu**: The component that contains the dropdown items.\n*   **DropdownSection**: The component that contains a group of dropdown items.\n*   **DropdownItem**: The component that represents a dropdown item.\n\n## [Usage](#usage)\n\n### [Dynamic items](#dynamic-items)\n\nDropdown follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.\n\n*   **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.\n*   **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.\n\n### [Disabled Keys](#disabled-keys)\n\nDropdown items can be disabled using the `disabledKeys` prop to the `DropdownMenu` component.\n\n> **Note**: It's important to have a unique key for each item, otherwise the disabled keys will not work.\n\n### [Action event](#action-event)\n\nYou can use the `onAction` prop to get the key of the selected item.\n\n### [Variants](#variants)\n\nYou can use the `variant` in the `DropdownMenu` component to change the `hover` style of the dropdown items.\n\n### [Single Selection](#single-selection)\n\nYou can set the `selectionMode` property as `single` to allow the user to select only one item at a time.\n\n### [Multiple Selection](#multiple-selection)\n\nYou can set the `selectionMode` property as `multiple` to allow the user to select multiple items at a time.\n\n> **Note**: To allow empty selection, you can set the `disallowEmptySelection` property as `false`.\n\n### [With Shortcut](#with-shortcut)\n\nYou can use the `shortcut` prop to add a shortcut to the dropdown item.\n\n> **Note**: Dropdown does not handle the shortcut event, you need to handle it yourself.\n\n### [With Icons](#with-icons)\n\nIt is possible to add icons to the dropdown items using the `startContent` / `endContent` props.\n\n> **Note**: If you use `currentColor` as the icon color, the icon will have the same color as the item text.\n\n### [With Description](#with-description)\n\nYou can use the `description` prop to add a description to the dropdown item.\n\n### [With Sections](#with-sections)\n\nYou can use the `DropdownSection` component to group dropdown items.\n\n> **Note**: Sections without a `title` must provide an `aria-label` for accessibility.\n\n### [Custom Trigger](#custom-trigger)\n\nYou can use any component as a trigger for the dropdown menu, just wrap it in the `DropdownTrigger` component.\n\n### [Changing the backdrop](#changing-the-backdrop)\n\nAs we mentioned earlier, the `Dropdown` component is an extension of the [Popover](https://nextui.org/docs/components/popover) component, so it accepts all the props of the Popover component, including the `backdrop` prop.\n\n### [Routing](#routing)\n\nThe `<DropdownItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and [React Router](https://reactrouter.com/en/main). See the [Routing](https://nextui.org/docs/guide/routing) guide to learn how to set this up.\n\nimport {Dropdown, DropdownMenu, DropdownTrigger, DropdownItem, Button} from \"@nextui-org/react\";\n\nfunction App() {\n\n  return (\n\n    <Dropdown\\>\n\n      <DropdownTrigger\\>\n\n        <Button variant\\=\"bordered\"\\>Open Menu</Button\\>\n\n      </DropdownTrigger\\>\n\n      <DropdownMenu aria-label\\=\"Link Actions\"\\>\n\n        <DropdownItem key\\=\"home\" href\\=\"/home\"\\>\n\n          Home\n\n        </DropdownItem\\>\n\n        <DropdownItem key\\=\"about\" href\\=\"/about\"\\>\n\n          About\n\n        </DropdownItem\\>\n\n      </DropdownMenu\\>\n\n    </Dropdown\\>\n\n  );\n\n}\n\n## [Slots](#slots)\n\nDropdown has 3 components with slots the `DropdownMenu`, `DropdownItem` and `DropdownSection` components.\n\n*   **base**: The main wrapper for the menu component. This slot wraps the `topContent`, `bottomContent` and the `list` slot.\n*   **list**: The slot for the menu list component. You can see this slot as the `ul` slot.\n*   **emptyContent**: The slot content to display when the collection is empty.\n\n### [DropdownItem](#dropdownitem)\n\n*   **base**: The main slot for the dropdown item. It wraps all the other slots.\n*   **wrapper**: The `title` and `description` wrapper.\n*   **title**: The title of the dropdown item.\n*   **description**: The description of the dropdown item.\n*   **shortcut**: The shortcut slot.\n*   **selectedIcon**: The selected icon slot. This is only visible when the item is selected.\n\n### [DropdownSection](#dropdownsection)\n\n*   **base**: The main slot for the dropdown section. It wraps all the other slots.\n*   **heading**: The title that is render on top of the section group.\n*   **group**: The group of dropdown items.\n*   **divider**: The divider that is render between the groups. This is only visible when `showDivider` is `true`.\n\n### [Customizing the dropdown popover](#customizing-the-dropdown-popover)\n\nThe `Dropdown` component is an extension of the [Popover](https://nextui.org/docs/components/popover) component, so you can use the same slots to customize the dropdown.\n\n### [Customizing the dropdown items style](#customizing-the-dropdown-items-style)\n\nYou can customize the dropdown items either by using the `DropdownMenu` `itemClasses` prop or by using the `DropdownItem` slots, the `itemClasses` allows you to customize all the items at once, while the slots allow you to customize each item individually.\n\n### [Keyboard Interactions](#keyboard-interactions)\n\n## [Data Attributes](#data-attributes)\n\n`DropdownItem` has the following attributes on the `base` element:\n\n*   **data-disabled**: When the dropdown item is disabled. Based on dropdown `disabledKeys` prop.\n*   **data-selected**: When the dropdown item is selected. Based on dropdown `selectedKeys` prop.\n*   **data-hover**: When the dropdown item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n*   **data-pressed**: When the dropdown item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n*   **data-focus**: When the dropdown item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n*   **data-focus-visible**: When the dropdown item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n## [Accessibility](#accessibility)\n\n*   Exposed to assistive technology as a `button` with a `menu` using ARIA.\n*   Support for single, multiple, or no selection.\n*   Support for disabled items.\n*   Support for sections.\n*   Complex item labeling support for accessibility.\n*   Keyboard navigation support including arrow keys, home/end, page up/down. See [Keyboard Interactions](#keyboard-interactions) for more details.\n*   Automatic scrolling support during keyboard navigation.\n*   Keyboard support for opening the menu using the arrow keys, including automatically focusing the first or last item accordingly.\n*   Typeahead to allow focusing items by typing text.\n*   Virtualized scrolling support for performance with long lists.\n\n## [API](#api)\n\n### [Dropdown Props](#dropdown-props)\n\n### [Dropdown Events](#dropdown-events)\n\n* * *\n\n### [DropdownTrigger Props](#dropdowntrigger-props)\n\n* * *\n\n* * *\n\n### [DropdownSection Props](#dropdownsection-props)\n\n* * *\n\n### [DropdownItem Props](#dropdownitem-props)\n\n### [DropdownItem Events](#dropdownitem-events)\n\n* * *\n\n### [Types](#types)\n\n#### [Dropdown Item Selected Icon Props](#dropdown-item-selected-icon-props)\n\nexport type DropdownItemSelectedIconProps \\= {\n\n  /\\*\\*\n\n   \\* The current icon, usually an checkmark icon.\n\n   \\*/\n\n  icon?: ReactNode;\n\n  /\\*\\*\n\n   \\* The current selected status.\n\n   \\*/\n\n  isSelected?: boolean;\n\n  /\\*\\*\n\n   \\* The current disabled status.\n\n   \\* @default false\n\n   \\*/\n\n  isDisabled?: boolean;\n\n};\n\ntype selectedIcon?: ReactNode | ((props: DropdownItemSelectedIconProps) \\=> ReactNode) | null;",
    "title": "Dropdown | NextUI - Beautiful, fast and modern React UI Library",
    "description": "Displays a list of actions or options that a user can choose.",
    "languageCode": "en"
  }
]