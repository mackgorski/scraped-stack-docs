You will see an error about `SvelteKitError: Not found: /.well-known/vercel/flags`. This happens because we already created the `FLAGS_SECRET` but we did not set up the flags package yet. So let’s do this next.\n4.  1.  Install flags package:\n    2.  Create your first feature flag:\n        \n        ```\n        import { flag } from '@vercel/flags/sveltekit';\n         \n        export const showDashboard = flag<boolean>({\n          key: 'showDashboard',\n          description: 'Show the dashboard', // optional\n          origin: 'https://example.com/#showdashbord', // optional\n          options: [{ value: true }, { value: false }], // optional\n          // can be async and has access to the event\n          decide(_event) {\n            return false;\n          },\n        });\n        ```\n        \n    3.  Next set up the server hook. This is a one-time setup step which makes the toolbar aware of your application’s feature flags:\n        \n        ```\n        import { createHandle } from '@vercel/flags/sveltekit';\n        import { FLAGS_SECRET } from '$env/static/private';\n        import * as flags from '$lib/flags';\n         \n        export const handle = createHandle({ secret: FLAGS_SECRET, flags });\n        ```\n        \n    4.  You can now use this flag in code. Evaluate the flag on the server, and forward the value to the client:\n        \n        ```\n        import type { PageServerLoad } from './$types';\n        import { showDashboard } from '$lib/flags';\n         \n        export const load: PageServerLoad = async () => {\n          const dashboard = await showDashboard();\n         \n          return {\n            post: {\n              title: dashboard ? 'New Dashboard' : `Old Dashboard`\n            }\n          };\n        };\n        ```\n        \n        Accessing the value on the client:\n        \n        ```\n        <script lang=\"ts\">\n          import type { PageData } from './$types';\n         \n          export let data: PageData;\n        </script>\n         \n        <h1>{data.post.title}</h1>\n        ```\n        \n\nOpen Vercel Toolbar locally to see the feature flag.\n\n![View the flag from the toolbar.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1720011005%2Ffront%2Fdocs%2Ffeature-flags%2Ftoolbar-feature-flags-sveltekit-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![View the flag from the toolbar.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1720011039%2Ffront%2Fdocs%2Ffeature-flags%2Ftoolbar-feature-flags-sveltekit-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nView the flag from the toolbar.\n\nNotice how the toolbar knows about the flag's name, description and the link to where the flag can be managed. All of these are communicated through the `/.well-known/vercel/flags` endpoint, which is set up automatically by the `createHandle` call we made in `hooks.server.ts`.\n\nThis hook intercepts all requests and responds with the application's feature flags when it sees the authenticated request made by Vercel Toolbar to load your application's feature flags.\n\nWhen you set an override using Vercel Toolbar it will automatically be respected by the feature flags defined through `@vercel/flags/sveltekit`.\n\nVercel Toolbar also shows the current value of your feature flag, in this case `false`. This value could be different for each visitor, so it can not be loaded along with the information about the feature flag itself.\n\nInstead, when a feature flag gets evaluated on the server, the hook configured in `hooks.server.ts` injects a `<script data-flag-values />` tag into the response, which contains encrypted information about the feature flag values used when generating that response. This means even if your flag would return `Math.random()` you would still be able to see the exact value used when generating the page.",
  "title": "Using flags in SvelteKit",
  "description": "Learn the best practices for creating feature flags in SvelteKit by using the @vercel/flags/sveltekit package.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/feature-flags-pattern",
  "markdown": "# Flags Architectural Patterns\n\nThe flags pattern and precomputed flags pattern exported from `@vercel/flags/next` are experimental. We are still actively researching and have further iterations planned. These exports are not covered by semantic versioning as indicated by the `unstable_` prefix.\n\nFeature flags enable developers to control the rollout of features with precision, allowing for safer deployments and testing in production environments. These flags can be implemented on either the client-side or server-side, each with its distinct implications.\n\nWhen feature flags are loaded on the client-side, they can introduce visual disruptions such as [Layout Shift](https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift) and [jank](https://developer.mozilla.org/en-US/docs/Glossary/Jank). This occurs because the client must wait for the flags to load before it can correctly render the page, leading to two less-than-ideal scenarios:\n\n*   Anticipating the flag's value: If the guess is incorrect, the user experiences jank and layout shifts\n*   Delaying rendering: Showing a loading state until the flag is loaded delays the user's access to the content\n\nBoth approaches detract from the user experience, underscoring the limitations of client-side feature flags.\n\nServer-side loading of feature flags resolves these issues by ensuring that the page is fully prepared with the correct configurations before reaching the user. For static content, such as marketing pages, Edge Middleware can assess feature flags to manage the routing between different page versions, keeping the core page static. While this method adds complexity when managing multiple flags, it enhances performance by eliminating the unpredictability of client-side loading.\n\nAt Vercel, we have developed a pattern for the implementation of feature flags:\n\n*   [Flags Pattern](#flags-pattern) – Direct evaluation in the dynamic, server-side parts of the application, enhancing immediate adaptability\n*   [Precomputed Flags Pattern](#precomputed-flags-pattern) – Evaluation and decision-making occur within middleware, with the results passed down to dynamic components\n\nThe Flags Pattern is currently only supported in Next.js App Router, and SvelteKit.\n\nFor Next.js App Router see the following pages:\n\nFor SvelteKit see the following pages:\n\nThe Flags pattern is tailored for applications where dynamic server-side rendering is prevalent. Feature flags are defined and evaluated directly within the server function generating the page content. This method ensures that the feature flags do not interfere with the rendering process, maintaining the application's performance and user experience. Key components of a flag include:\n\n*   `key` - A unique identifier for the flag\n*   `origin` – The source or context of the flag\n*   `description` – A brief explanation of what the flag controls\n*   `options`: An array consisting of objects with a `value` and an optional `label`\n\nA flag may resolve to a value not declared in `options`, as `options` are optional.\n\nFor each flag, you must implement a `decide` function that determines its value based on the current request. This function is designed to ensure consistency, offering the same output for identical requests, which is crucial for maintaining stable and predictable application behavior.\n\nNote that not accepting any arguments when calling feature flags does not imply the flag needs to have the same state for all visitors. Instead, the feature flag may derive values from the given request within the `decide` function and make decisions based on that.\n\nThe Precomputed Flags Pattern allows you to define feature flags in code while keeping pages static. The feature flag is evaluated in Edge Middleware. This pattern is currently only supported in Next.js App Router. See more in the[`@vercel/flags/next` reference](https://vercel.com/docs/workflow-collaboration/feature-flags/nextjs-flags-reference).\n\nThis pattern allows for the precomputation of flags within middleware, thereby determining the appropriate static page version to display ahead of time. It effectively eliminates the inconsistencies typically associated with client-side flag evaluations and is particularly advantageous for pages hosting multiple experiments or feature flags.\n\nPrecomputed Flags allow using feature flags in applications while keeping pages static.\n\nIn this experimental pattern, the following components are involved:\n\n*   Feature flags are evaluated within Edge Middleware\n*   Edge Middleware rewrites incoming requests to serve a static page with the computed combination of feature flags\n*   The static page served can either be prerendered at build time or at request time using ISR\n    *   Prerendering all combinations of all feature flags at build time suffers from combinatorial explosion. It's usually recommended to use ISR\n\nPrecomputed flags are implemented in a similar way to the Flags Pattern, with the following additional considerations:\n\n*   A precomputed flag may resolve to a value not declared in `options`, but this may worsen performance\n*   A precomputed flag may not resolve with large values, as the value needs to be transported from Edge Middleware to Functions.",
  "title": "Flags Architectural Patterns",
  "description": "Architectural patterns for working with feature flags",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/sharing-deployments",
  "markdown": "# Sharing a Preview Deployment\n\nBy default, members of your [Vercel team](https://vercel.com/docs/accounts/create-a-team) that have [access to your project](https://vercel.com/docs/accounts/team-members-and-roles/access-roles/project-level-roles) will also have access to your deployment. This allows them to comment, see who else is viewing the preview, and use the toolbar. Users who don't have access to the project will not have access to your deployment.\n\nTo share a preview deployment with a member of your team you can do any of the following:\n\n*   Send an invite to individual users (external or team members), or groups of people\n*   Copy the URL from the address bar of your browser and send it to them\n*   Select the Share icon in the [Vercel toolbar](https://vercel.com/docs/workflow-collaboration/vercel-toolbar), copy the URL and send it to them\n\nThey will also be able to find it by using the [generated URL](https://vercel.com/docs/deployments/generated-urls) from any deployment in the [Vercel dashboard](https://vercel.com/dashboard).\n\nTo share a deployment with anyone, you can do any of the following:\n\n*   Recommended: [Invite users](#invite-users) to view your deployment\n*   [Set access to anyone](#sharing-with-sharable-links-and-managing-permissions) (or anyone with the link if deployment protection is enabled)\n*   [Accept an access request](https://vercel.com/docs/deployments/sharing-deployments#request-access)\n\nWhen you share a preview deployment with an external user, they will not be added to your Vercel team. The collaborator does not need to have a Vercel account, but will need to create one if they wish to view a deployment that is [protected](#sharing-with-deployment-protection-enabled), use the [toolbar](https://vercel.com/docs/workflow-collaboration/vercel-toolbar), or leave [comments](https://vercel.com/docs/workflow-collaboration/comments).\n\nUsers on Pro and Enterprise teams can use this method to add one or more collaborators. Hobby users are limited to one collaborator at any one time. To invite users to view your deployment:\n\n1.  Select the Share icon in the comments toolbar or select the Share button next to the deployment in the [Vercel dashboard](https://vercel.com/dashboard)\n2.  In the Share modal that appears, enter the email(s), or names of people on your Vercel team you want to invite. You can also add a message to the invitation. The invitation will be sent as an email to the user(s)\n3.  The invited user can now view the preview deployment. If Deployment Protection is enabled or if they want to add a comment, they will need to log into their Vercel account\n4.  You can revoke access at any time by returning to the Share dialog and choosing the Revoke icon next to the user's email\n\n![Share with invite.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706864191%2Ffront%2Fdocs%2Fvercel-toolbar%2Finvite-share-preview-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Share with invite.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706864191%2Ffront%2Fdocs%2Fvercel-toolbar%2Finvite-share-preview-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nShare with invite.\n\nThis is the recommended method for sharing a deployment with external collaborators, as it allows you to control who has access to your deployment on an individual basis.\n\n1.  Select the Share icon in the toolbar or select the Share button on the deployment page in the [Vercel dashboard](https://vercel.com/dashboard)\n2.  In the Share modal that appears, you can manage who can view and comment on deployments:\n    *   Team members with access: This is the default setting. Only team members who have access to this project and external users granted access can comment\n    *   Anyone (Without deployment protection): If you don't have [deployment protection](https://vercel.com/docs/security/deployment-protection) enabled, you can change the setting to Anyone. This allows any visitor who logs in with a Vercel account to leave comments on the preview, regardless of their team status\n    *   Anyone with the link (With deployment protection): If you have deployment protection on, you can select Anyone with the link. This option creates a [sharable link that bypasses deployment protection](https://vercel.com/docs/security/deployment-protection/methods-to-bypass-deployment-protection/sharable-links). Anyone with this link can log in to the toolbar and comment, even if they are not a part of your team or haven't been individually added as collaborators\n\n![The Share settings modal.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706185875%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fshareable-links-light.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The Share settings modal.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706185874%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fsharable-links-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Share settings modal.\n\n3.  After setting the chosen permission, use the Copy Link button to copy the link to your clipboard. This specific URL should be used, rather than the one from the address bar of your browser.\n\nTo learn more, see [sharable links](https://vercel.com/docs/security/deployment-protection/methods-to-bypass-deployment-protection/sharable-links) in Deployment Protection.\n\nIf someone without access to comment attempts to log into the toolbar on a deployment, they will see a screen with the option to Request Access. You will be notified by email and the Vercel [notifications](https://vercel.com/docs/dashboard-features/notifications) widget when a request is made to a deployment you own.\n\nWhen requests have been made:\n\n1.  Select the Share icon in the comments toolbar or select the Share button next to the deployment in the [Vercel dashboard](https://vercel.com/dashboard)\n2.  In the popup modal that appears, review the list under Access Requests\n3.  Respond to the request by either allowing or denying access\n\nIt is important to ensure the security of your preview deployments, which you can enable through [deployment protection](https://vercel.com/docs/security/deployment-protection/methods-to-protect-deployments). We recommend that you scope access to the fewest number of people possible.\n\nDeployment protection allows you to secure your preview deployments, with [Authentication](https://vercel.com/docs/security/deployment-protection/methods-to-protect-deployments/vercel-authentication) and/or [Password Protection](https://vercel.com/docs/security/deployment-protection/methods-to-protect-deployments/password-protection) to ensure that only authorized users can view your preview deployment.\n\n*   If you don't have deployment protection enabled, anyone with the link can view your deployment\n*   If you have Authentication enabled, only team members can view your deployment, unless you have added the user individually or they have requested access, or you have enabled sharable links\n*   If you have Password Protection enabled, only users with the password can view your deployment, unless you have added the user individually or they have requested access, or you have enabled sharable links",
  "title": "Sharing a Preview Deployment",
  "description": "Learn how to share a preview deployment with your team and external collaborators.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/sveltekit-flags-reference",
  "markdown": "# @vercel/flags/sveltekit Reference\n\nThe `@vercel/flags/sveltekit` submodule implements the [Feature Flags pattern](https://vercel.com/docs/workflow-collaboration/feature-flags/feature-flags-pattern#flags-pattern) for SvelteKit.\n\nTo learn more about the Flags pattern:\n\nDescription: Declares a feature flag\n\nA feature flag declared this way will automatically respect overrides set by Vercel Toolbar and integrate with Runtime Logs, Web Analytics, and more.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `key` | `string` | Key of the feature flag. |\n| `decide` | `function` | Resolves the value of the feature flag. |\n| `description` (Optional) | `string` | Description of the feature flag. |\n| `origin` (Optional) | `string` | The URL where this feature flag can be managed. |\n| `options` (Optional) | `{ label?: string, value: any }[]` | Possible values a feature flag can resolve to, which are displayed in Vercel Toolbar. |\n\nThe `key`, `description`, `origin`, and `options` appear in Vercel Toolbar.\n\n```\nexport const showSummerSale = flag<boolean>({\n  key: 'summer-sale',\n  async decide() {\n    return false;\n  },\n  origin: 'https://example.com/flags/summer-sale/',\n  description: 'Show Summer Holiday Sale Banner, 20% off',\n  options: [\n    // options are not necessary for boolean flags, but we customize their labels here\n    { value: false, label: 'Hide' },\n    { value: true, label: 'Show' },\n  ],\n});\n```\n\nDescription: Turns flags declared using `flag` into Vercel Toolbar compatible definitions.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flags` | `Record<string, Flag>` | A record where the values are feature flags. The keys are not used. |\n\nDescription: A `handle` hook that establishes context for flags, so they have access to the event object.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `options` | `{ secret: string, flags?: Record<string, Flag> }` | The `FLAGS_SECRET` environment variable and a record of all the flags |\n\n```\nimport { createHandle } from '@vercel/flags/sveltekit';\nimport { FLAGS_SECRET } from '$env/static/private';\nimport * as flags from '$lib/flags';\n \nexport const handle = createHandle({ secret: FLAGS_SECRET, flags });\n```\n\nNote that when composing `createHandle` with other handlers using SvelteKit's `sequence` utility then `createHandle` should come first. Only handlers after it will be able to access feature flags.",
  "title": "@vercel/flags/sveltekit Reference",
  "description": "The reference for the @vercel/flags/sveltekit submodule",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/comments/how-comments-work",
  "markdown": "# Enabling and Disabling Comments\n\nLearn when and where Comments are available, and how to enable and disable Comments at the account, project, and session or interface levels.\n\nComments are enabled by default for all preview deployments on all new projects. By default, only members of [your Vercel team](https://vercel.com/docs/accounts/create-a-team) can contribute comments.\n\nYou can enable or disable comments at the account level with certain permissions:\n\n1.  Navigate to [your Vercel dashboard](https://vercel.com/dashboard) and make sure that you have selected your team from the [scope selector](https://vercel.com/docs/dashboard-features#scope-selector)\n2.  From your [dashboard](https://vercel.com/dashboard), select the Settings tab\n3.  In the General section, find Comments\n4.  Choose either On or Off from the dropdown\n5.  You can optionally choose to allow the setting to be overridden at the project level\n\n![The dashboard setting to enable or disable comments at the account level.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomments-setting-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The dashboard setting to enable or disable comments at the account level.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomments-setting-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe dashboard setting to enable or disable comments at the account level.\n\n1.  From your [dashboard](https://vercel.com/dashboard), select the project you want to enable or disable the Toolbar for\n2.  Navigate to Settings tab\n3.  In the General section, find Comments\n4.  Choose either Default (to respect team-level visibility settings) or Disabled (to disable the toolbar project-wide)\n\n![The dashboard setting to enable or disable comments in a project.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomments-project-setting-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The dashboard setting to enable or disable comments in a project.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomments-project-setting-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe dashboard setting to enable or disable comments in a project.\n\nTo disable comments for the current browser session, you must disable the toolbar. To do this:\n\n1.  Ensure you are signed in to the Vercel Toolbar\n2.  From the toolbar, select the menu item (☰)\n3.  From the list, select Disable for Session or Hide Toolbar.\n\nThis action will hide the toolbar in the current browser tab. To show the comments again, open a new browser session.\n\nYou can also show or hide the toolbar by using `⌘ + .` on MacOS (`Ctrl + .` on Windows).\n\nYou can enable or disable comments for specific branches or environments with [preview environment variables](https://vercel.com/docs/workflow-collaboration/vercel-toolbar/managing-toolbar#enable-or-disable-the-toolbar-for-a-specific-branch).\n\nSee [Managing the toolbar](https://vercel.com/docs/workflow-collaboration/vercel-toolbar/managing-toolbar) for more information.\n\nTo use comments in a production deployment, or link comments in your local development environment to a preview deployment, see [our docs on using comments in production and localhost](https://vercel.com/docs/workflow-collaboration/comments/in-production-and-localhost).\n\nSee [Managing the toolbar](https://vercel.com/docs/workflow-collaboration/vercel-toolbar/managing-toolbar) for more information.\n\nTo learn how to share deployments with comments enabled, see the [Sharing Deployments](https://vercel.com/docs/deployments/sharing-deployments) docs.",
  "title": "Enabling and Disabling Comments",
  "description": "Learn when and where Comments are available, and how to enable and disable Comments at the account, project, and session or interface levels.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/using-vercel-toolbar",
  "markdown": "# Using Feature Flags in the Vercel Toolbar\n\nUsing the [Vercel Toolbar](https://vercel.com/docs/workflow-collaboration/vercel-toolbar), you can view, override, and share feature flags for your application without leaving your browser tab. The feature flags available are all the flags that your team has set up through [supporting feature flags](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags).\n\nAny team member can access the feature flags dialog once they have authenticated with the toolbar. Feature flags are available in all environments that your team has [enabled the toolbar for](https://vercel.com/docs/workflow-collaboration/vercel-toolbar/in-production-and-localhost).\n\n![Feature flags modal.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1709147370%2Fcontentful%2Fimage%2Fe5382hct74si%2FNOZCPdL8Dad7M1QygGcDA%2F3cc71a64416224c9ab662e9d37086af8%2FFeature_Flags.jpg&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Feature flags modal.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1709147370%2Fcontentful%2Fimage%2Fe5382hct74si%2F47u6wcime7QAGDiNmoVX98%2F33e50f6c4e3634be247ac1fba9c2492c%2FFeature_Flags-1.jpg&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nFeature flags modal.\n\nBefore you can use with feature flags in the Vercel Toolbar, ensure that your team has set up both [feature flags](https://vercel.com/docs/workflow-collaboration/feature-flags/implement-flags-in-toolbar) and the [Vercel Toolbar](https://vercel.com/docs/workflow-collaboration/vercel-toolbar/in-production-and-localhost) in the environment you are using,\n\nTo see and override feature flags for your application:\n\n1.  You must log into the Vercel Toolbar to interact with your application's feature flag overrides.\n2.  Select the Feature Flags option () from the Vercel Toolbar.\n3.  Find the desired feature flag in the modal by scrolling or using the search and filter controls\n4.  Select an override value for the desired feature flag. Note that by default, overrides are not persisted and only affect the user applying them, in the environment in which they were set. To share overrides, see [Sharing flag overrides](#sharing-flag-overrides)\n5.  Apply the changes. This will trigger a soft reload. If you have applied changes, the Vercel Toolbar will turn purple\n\nAny overrides you apply from Vercel Toolbar usually apply to your browser session only. However, you can recommend overrides to team members by either:\n\n*   [Setting overrides as recommended for a given branch](#branch-based-recommendations)\n*   Explicitly [sharing a set of overrides through a URL](#url-based-recommendations) with a team member\n\nThis workflow is great when you start working on a new feature in a branch, as the recommended overrides will travel with the branch from local development through to the preview deployment.\n\n1.  First configure the overrides you would like to share as usual\n2.  Then, instead of selecting Apply, select the chevron next to the Apply button to reveal further options\n3.  Choose Apply and save overrides as recommendation to recommend these overrides to any team member visiting your branch locally or on a preview deployment\n\nWhen a team member visits that branch they will get a notification suggesting to apply the overrides you recommended.\n\nThis workflow is great when you want to share once-off overrides with team members to reproduce a bug under certain conditions or to share a new feature.\n\n1.  First configure the overrides you would like to share as usual\n2.  Then, instead of selecting Apply, select the chevron next to the Apply button to reveal further options\n3.  Choose Apply and copy link with overrides to copy a link to the page you are on, along with a query parameter containing your overrides.\n\nYou can send this link to team members. When they visit the link they will get a notification suggesting to apply the overrides you shared.",
  "title": "Using Feature Flags in the Vercel Toolbar",
  "description": "View and override your application's feature flags from the Vercel Toolbar",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/flags-pattern-nextjs",
  "markdown": "# Using flags in Next.js\n\nThe flags pattern and precomputed flags pattern exported from `@vercel/flags/next` are experimental. We are still actively researching and have further iterations planned. These exports are not covered by semantic versioning as indicated by the `unstable_` prefix.\n\nThe `@vercel/flags` package exposes the `@vercel/flags/next` submodule, which implements the [Feature Flags pattern](https://vercel.com/docs/workflow-collaboration/feature-flags/feature-flags-pattern).\n\n1.  Run the following code in your terminal to generate a secret and save it as the `FLAGS_SECRET` environment variable:\n    \n    ```\n    node -e \"console.log(crypto.randomBytes(32).toString('base64url'))\"\n    ```\n    \n    This secret is used by the SDK to automatically read overrides set by the Vercel Toolbar.\n    \n2.  Declare a feature flag called `showSummerSale` in code. The `decide` function can be async and is called when the feature flag is used. In this example, it always returns `false`, so this feature flag would always be off:\n    \n    ```\n    import { unstable_flag as flag } from '@vercel/flags/next';\n     \n    export const showSummerSale = flag({\n      key: 'summer-sale',\n      decide: () => false,\n    });\n    ```\n    \n3.  You can now import the `flags` file that you created in the previous step, and call the `showSummerSale` flag in code. This will run the `decide` function and forward its return value:\n    \n    ```\n    import { showSummerSale } from \"../flags\";\n     \n    export default async function Page() {\n      const sale = await showSummerSale();\n      return sale ? <p>discounted</p> : <p>regular price</p>;\n    }\n    ```\n    \n\nFeature flags can be backed by any feature flag provider or no feature flag provider at all.\n\nIn the initial implementation of `decide`, we always return `false`. However, your team members can use Vercel Toolbar to override this feature flag.\n\nThis can be particularly useful for trunk-based development, where you merge new features to the main branch frequently while keeping the feature flag off. You can still use Vercel Toolbar to create an override and try out the feature in all development environments, including production.\n\nAs the requirements for this feature flag change you might want to change it to be backed by an Environment Variable. You can then change the `decide` function like so:\n\n```\nimport { unstable_flag as flag } from '@vercel/flags/next';\n \nexport const showSummerSale = flag({\n  key: 'summer-sale',\n  decide: () => process.env.SUMMER_SALE_ENABLED === '1',\n});\n```\n\nThis now allows changing the feature flag without changing code: change the environment variable and redeploy. So far the feature flag always loaded instantly, since the resolution logic is hardcoded. But the downside of this approach is that changing a feature flag will not affect any existing deployments or preview deployments of other branches.\n\nFor further iterations, the feature flag can be backed by Edge Config in order to be changed without redeploying and will affect all deployments:\n\n```\nimport { unstable_flag as flag } from '@vercel/flags/next';\nimport { get } from '@vercel/edge-config';\n \nexport const showSummerSale = flag({\n  key: 'summer-sale',\n  async decide() {\n    const value = await get(this.key); // this.key refers to \"summer-sale\"\n    return value ?? false;\n  },\n});\n```\n\nFinally, you could back it by a feature flag provider:\n\n```\nimport { unstable_flag as flag } from '@vercel/flags/next';\n \nexport const showSummerSale = flag({\n  key: 'summer-sale',\n  async decide() {\n    return getLaunchDarklyClient().variation(this.key, false);\n  },\n});\n```\n\nIf you set an override for this feature flag using Vercel Toolbar, then the feature flag will respect the override and will not invoke the `decide` function.\n\nThis approach calls `reportValue` whenever a feature flag is called and returns a value. This works even when a flag is overridden.\n\nIt is not possible to pass any arguments when invoking the feature flag. This constraint was introduced on purpose to ensure a consistent return value for the given feature flag throughout the whole application. Instead, if you need to get some context based on the incoming request you can manually call `cookies()` or `headers()`. You can pair this with `React.cache` which caches for the duration the request being handled, so you avoid fetching the same value from multiple feature flags.\n\nFlags automatically trigger dynamic mode since they are by definition dynamic.\n\nThis is an extension to the previously described pattern. It allows middleware to precompute feature flag values, which can then be passed down to the Vercel Functions. Passing down precomputed flags can either happen by adding a header to the request or by rewriting the request to a path that includes the precomputed values.\n\nThis pattern is useful for experimentation on static pages, as it allows middleware to make routing decisions, while being able to keep the different variants of the underlying flags static.\n\nIt further allows generating a page for each combination of feature flags either at build time or lazily the first time it is accessed. It can then be cached using ISR so it does not need to be regenerated.\n\n1.  You can export one or multiple arrays of flags to be precomputed. This by itself does not do anything yet, but you will use the exported array in the next step:\n    \n    ```\n    import { unstable_flag as flag } from '@vercel/flags/next';\n     \n    export const showSummerSale = flag({\n      key: 'summer-sale',\n      decide: () => false,\n    });\n     \n    export const showBanner = flag({\n      key: 'banner',\n      decide: () => false,\n    });\n     \n    export const precomputeFlags = [showSummerSale, showBanner] as const;\n    ```\n    \n2.  In this step, import `precomputeFlags` from the `flags` file that you created in the previous step. Then, call `precompute` with the list of flags to be precomputed. You'll then forward the precomputation result to the underlying page using an URL rewrite:\n    \n    ```\n    import { type NextRequest, NextResponse } from 'next/server';\n    import { unstable_precompute as precompute } from '@vercel/flags/next';\n    import { precomputeFlags } from './flags';\n     \n    // Note that we're running this middleware for / only, but\n    // you could extend it to further pages you're experimenting on\n    export const config = { matcher: ['/'] };\n     \n    export async function middleware(request: NextRequest) {\n      // precompute returns a string encoding each flag's returned value\n      const code = await precompute(precomputeFlags);\n     \n      // rewrites the request to include the precomputed code for this flag combination\n      const nextUrl = new URL(\n        `/${code}${request.nextUrl.pathname}${request.nextUrl.search}`,\n        request.url,\n      );\n     \n      return NextResponse.rewrite(nextUrl, { request });\n    }\n    ```\n    \n3.  Next, import the feature flags you created earlier, such as `showBanner`, while providing the `code` from the URL and the `precomputeFlags` list of flags used in the precomputation.\n    \n    When the `showBanner` flag is called within this component it reads the result from the precomputation, and it does not invoke the flag's `decide` function again:\n    \n    ```\n    import { precomputeFlags, showSummerSale, showBanner } from '../../flags';\n     \n    export default async function Page({ params }: { params: { code: string } }) {\n      // access the precomputed result by passing params.code and precomputeFlags\n      const summerSale = await showSummerSale(params.code, precomputeFlags);\n      const banner = await showBanner(params.code, precomputeFlags);\n     \n      return (\n        <div>\n          {banner ? <p>welcome</p> : null}\n     \n          {summerSale ? (\n            <p>summer sale live now</p>\n          ) : (\n            <p>summer sale starting soon</p>\n          )}\n        </div>\n      );\n    }\n    ```\n    \n    This approach allows middleware to decide the value of feature flags and to pass the precomputation result down to the page. This approach also works with API Routes.\n    \n4.  So far you've set up middleware to decide the value of each feature flag to be precomputed and to pass the value down. In this step you can enable ISR to cache generated pages after their initial render:\n    \n    ```\n    import type { ReactNode } from 'react';\n     \n    export async function generateStaticParams() {\n      // returning an empty array is enough to enable ISR\n      return [];\n    }\n     \n    export default async function Layout({ children }: { children: ReactNode }) {\n      return children;\n    }\n    ```\n    \n5.  The `@vercel/flags/next` submodule exposes a helper function for generating pages for different combinations of flags at build time. This function is called `generatePermutations` and takes a list of flags and returns an array of strings representing each combination of flags:\n    \n    ```\n    import type { ReactNode } from 'react';\n    import { unstable_generatePermutations as generatePermutations } from '@vercel/flags/next';\n     \n    export async function generateStaticParams() {\n      const codes = await generatePermutations(precomputeFlags);\n      return codes.map((code) => ({ code }));\n    }\n     \n    export default async function Layout({ children }: { children: ReactNode }) {\n      return children;\n    }\n    ```\n    \n    You can further customize which specific combinations you want render by passing a filter function as the second argument of `generatePermutations`.\n    \n6.  It is also possible to use the layout file we created earlier to surface precomputed values. They will then get picked up by the Vercel Toolbar, and they can be used to annotate Web Analytics.\n    \n    ```\n    import type { ReactNode } from 'react';\n    import { precomputeFlags } from '../flags';\n    import { encrypt } from '@vercel/flags';\n    import { unstable_deserialize as deserialize } from '@vercel/flags/next';\n    import { FlagValues } from '@vercel/flags/react';\n    import { Suspense } from 'react';\n     \n    export async function generateStaticParams() {\n      return [];\n    }\n     \n    export default async function Layout({\n      children,\n      params,\n    }: {\n      children: ReactNode;\n      params: { code: string };\n    }) {\n      const values = await deserialize(precomputeFlags, params.code);\n     \n      return (\n        <>\n          {children}\n          <Suspense fallback={null}>\n            <FlagValues values={await encrypt(values)} />\n          </Suspense>\n        </>\n      );\n    }\n    ```\n    \n\nThis approach of precomputing feature flags and using middleware to rewrite users to a statically generated version of a page eliminates layout shift, loading spinners, and flashing the wrong experiment.",
  "title": "Using flags in Next.js",
  "description": "Learn how to use the @vercel/flags/next submodule for feature flags in Next.js App Router.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/integrate-vercel-platform",
  "markdown": "# Integrating with the Vercel Platform\n\nIntegrate your feature flag provider with the Vercel Platform.\n\nFeature flags play a crucial role in the software development lifecycle, enabling safe feature rollouts, experimentation, and A/B testing. When you integrate your feature flags with the Vercel platform, you can improve your application by using Vercel's observability features.\n\nBy making the Vercel platform aware of the feature flags used in your application, you can gain insights in the following ways:\n\n*   Runtime Logs: See your feature flag's values in [Runtime Logs](https://vercel.com/docs/observability/runtime-logs)\n*   Web Analytics: Break down your pageviews and custom events by feature flags in [Web Analytics](https://vercel.com/docs/analytics)\n\nTo get started, follow these guides:\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Integrating with the Vercel Platform",
  "description": "Integrate your feature flag provider with the Vercel Platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/comments/integrations",
  "markdown": "# Integrations for Comments\n\nComments are available for projects using any Git provider. Github, BitBucket and GitLab [are supported automatically](https://vercel.com/docs/deployments/git#supported-git-providers) with the same level of integration.\n\nPull requests (PRs) with deployments enabled receive [generated PR messages from Vercel bot](https://vercel.com/docs/deployments/git/vercel-for-github). These PR messages contain the deployment URL.\n\nThe generated PR message will also display an Add your feedback URL, which lets people visit the deployment and automatically log in. The PR message tracks how many comments have been resolved.\n\n![A message from Vercel bot in a GitHub PR.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fvercel-bot-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A message from Vercel bot in a GitHub PR.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fvercel-bot-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA message from Vercel bot in a GitHub PR.\n\nVercel will also add a check to PRs with comments enabled. This check reminds the author of any unresolved comments, and is not required by default.\n\n![A failing check for unresolved Comments on a GitHub PR.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Ffailed-check-light.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A failing check for unresolved Comments on a GitHub PR.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Ffailed-check-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA failing check for unresolved Comments on a GitHub PR.\n\nTo make this check required, check the docs for your favorite Git provider. Docs on required checks for the most popular git providers are listed below.\n\nCommenting is available for deployments made with [the Vercel CLI](https://vercel.com/docs/cli). The following git providers are supported for comments with Vercel CLI deployments:\n\n*   GitHub\n*   GitLab\n*   BitBucket\n\nSee [the section on Git provider integration information](#git-provider-integration) to learn more.\n\nCommenting is available in production and localhost when you use [the Vercel Toolbar package](https://vercel.com/docs/workflow-collaboration/comments/in-production-and-localhost).\n\nThe [Vercel Slack app](https://vercel.com/integrations/slack) connects Vercel deployments to Slack channels. Any new activity will create corresponding Slack threads, which are synced between the deployment and Slack so that the entire discussion can be viewed and responded to on either platform.\n\nTo get started:\n\n1.  Go to [our Vercel Slack app in the Vercel Integrations Marketplace](https://vercel.com/integrations/slack)\n2.  Select the Add Integration button from within the Marketplace, then select which Vercel account and project the integration should be scoped to\n3.  Confirm the installation by selecting the Add Integration button\n4.  From the pop-up screen, you'll be prompted to provide permission to access your Slack workspace. Select the Allow button\n5.  In the new pop-up screen, select the Connect your Vercel account to Slack button. When successful, the button will change to text that says, \"Your Vercel account is connected to Slack\"\n\nPrivate Slack channels will not appear in the dropdown list when setting up the Slack integration unless you have already invited the Vercel app to the channel. Do so by sending `/invite @Vercel` as a message to the channel.\n\n1.  In any channel on your Team's Slack instance enter `/vercel login`\n2.  Select Continue with Vercel to open a new browser window\n3.  From the new browser window, select Authorize Vercel to Slack\n4.  Once the connection is successful, you'll receive a \"Successfully authenticated\" message in the Slack channel.\n5.  You can use `/vercel whoami` at any time to check that you're successfully linked\n\nLinking Slack and Vercel does the following:\n\n*   Allows Vercel to translate `@` mentions across messages/platforms\n*   Allows you to take extra actions\n*   Allows user replies to be correctly attributed to their Vercel user instead of a `slack-{slackusername}` user when replying in a thread\n\nIf you configured the Slack app before October 4th, 2023, the updated app requires new permissions. You must reconfigure the app to subscribe to new comment threads and link new channels.\n\nTo do so:\n\n1.  Visit your team's dashboard and select the Integrations tab\n2.  Select Manage next to Slack in your list of integrations. On the next page, select Configure\n3.  Configure your Slack app and re-authorize it\n\nYour previous linked channels and subscriptions will continue to work even if you don't reconfigure the app in Slack.\n\nTo see a specific project's comments in a Slack channel, send the following command as a message to the channel:\n\nThis will open a modal that allows you to configure the subscription, including:\n\n*   Subscribing to comments for specific branches\n*   Subscribing to comments on specific pages\n\nYou can specify pages using a glob pattern, and branches with regex, to match multiple options.\n\nYou can also configure your subscription with options when using the `/vercel subscribe` command. You can use the `/vercel help` command to see all available options.\n\nWhen a new comment is created on a PR, the Vercel Slack app will create a matching thread in each of the subscribed Slack channels. The first post will include:\n\n*   A link to the newly-created comment thread\n*   A preview of the text of the first comment in the thread\n*   A ✅ Resolve button near the bottom of the Slack post\n    *   You may resolve comment threads without viewing them\n    *   You may reopen resolved threads at any time\n\nReplies and edits in either Slack or the original comment thread will be reflected on both platforms.\n\nYour custom Slack emojis will also be available on linked deployments. Search for them by typing `:`, then inputting the name of the emoji.\n\nUse the following Slack command to list all available options for your Vercel Slack integration:\n\nTo receive comment notifications as DMs from Vercel's Slack app, you must link your Vercel account in Slack by entering the following command in any Slack channel, thread or DM:\n\n| Command | Function |\n| --- | --- |\n| `/vercel help` | List all commands and options |\n| `/vercel subscribe` | Subscribe using the UI interface |\n| `/vercel subscribe team/project` | Subscribe the current Slack channel to a project |\n| `/vercel subscribe list` | List all projects the current Slack channel is subscribed to |\n| `/vercel unsubscribe team/project` | Unsubscribe the current Slack channel from a project |\n| `/vercel whoami` | Check which account you're logged into the Vercel Slack app with |\n| `/vercel logout` | Log out of your Vercel account |\n| `/vercel login` (or `link` or `signin`) | Log into your Vercel account |\n\nAny member of your team can covert comments to an issue in Linear, Jira, or GitHub. This is useful for tracking bugs, feature requests, and other issues that arise during development. To get started:\n\n1.  The following issue trackers are supported:\n    \n    Once you open the integration, select the Add Integration button to install it. Select which Vercel team and project(s) the integration should be scoped to and follow the prompts to finish installing the integration.\n    \n    On Jira, issues will be marked as reported by the user who converted the thread and marked as created by the user who set up the integration. You may want to consider using a dedicated account to connect the integration.\n    \n2.  On the top-right hand corner of a comment thread, select the icon for your issue tracker. A Convert to Issue dialog will appear.\n    \n    If you have more than one issue tracker installed, the most recently used issue tracker will appear on a comment. To select a different one, select the ellipsis icon (⋯) and select the issue tracker you want to use:\n    \n    ![The context menu showing issue tracker options.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705414607%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fconvert-to-issue-light.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The context menu showing issue tracker options.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705414608%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fconvert-to-issue-dark.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    The context menu showing issue tracker options.\n    \n3.  Fill out the relevant information for the issue. The issue description will be populated with the comment text and any images in the comment thread. You can add additional text to the description if needed.\n    \n    The fields you will see are dependant on the issue tracker you use and the scope it has. When you are done, select Create Issue.\n    \n    Linear\n    \n    Users can set the team, project, and issue title. Only publicly available teams can be selected as Private Linear teams are not supported at this time.\n    \n    Jira\n    \n    Users can set the project, issue type, and issue title.\n    \n    You can't currently convert a comment into a child issue. After converting a comment into an issue, you may assign it a parent issue in Jira.\n    \n    GitHub\n    \n    Users can set the repository and issue title. If you installed the integration to a Github Organization, there will be an optional field to select the project to add your issue to.\n    \n4.  Vercel will display a confirmation toast at the bottom-right corner of the page. You can click the toast to open the relevant issue in a new browser tab. The converted issue contains all previous discussion and images, and a link back to the comment thread.\n    \n    When you create an issue from a comment thread, Vercel will resolve the thread. The thread cannot be unresolved so we recommend only converting a thread to an issue once the relevant discussion is done.\n    \n    Linear\n    \n    If the email on your Linear account matches the Vercel account and you follow a thread converted to an issue, you will be added as a subscriber on the converted Linear issue.\n    \n    Jira\n    \n    On Jira, issues will be marked as _reported_ by the user who converted the thread and marked as _created_ by the user who set up the integration. You may wish to consider using a dedicated account to connect the integration.\n    \n    GitHub\n    \n    The issue will be marked as created by the `vercel-toolbar` bot and will have a label generated based on the Vercel project it was converted from. For example `Vercel: acme/website`.\n    \n    If selected, the converted issue will be added to the project or board you selected when creating the issue.",
  "title": "Integrations for Comments",
  "description": "Learn how Comments integrates with Git providers like GitHub, GitLab, and BitBucket, as well as Vercel's Slack app.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/integrate-with-web-analytics",
  "markdown": "# Integrate flags with Vercel Web Analytics\n\n![Feature Flags section in Vercel Web Analytics](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1716417163%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Ffeature-flags%2Fflags-in-web-analytics-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Feature Flags section in Vercel Web Analytics](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1716417163%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Ffeature-flags%2Fflags-in-web-analytics-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nFeature Flags section in Vercel Web Analytics\n\nVercel Web Analytics can look up the values of evaluated feature flags in the DOM. It can then enrich page views and client-side events with these feature flags.\n\n1.  To share your feature flags with Web Analytics you have to emit your feature flag values to the DOM as described in [Supporting Feature Flags](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flag-values).\n    \n    This will automatically annotate all page views and client-side events with your feature flags.\n    \n2.  Client-side events in Web Analytics will now automatically respect your flags and attach those to custom events.\n    \n    To manually overwrite the tracked flags for a specific `track` event, call:\n    \n    ```\n    import { track } from '@vercel/analytics';\n     \n    track('My Event', {}, { flags: ['summer-sale'] });\n    ```\n    \n    If the flag values on the client are encrypted, the entire encrypted string becomes part of the event payload. This can lead to the event getting reported without any flags when the encrypted string exceeds size limits.\n    \n\nTo track feature flags in server-side events:\n\n1.  First, report the feature flag value using `reportValue` to make the flag show up in [Runtime Logs](https://vercel.com/docs/observability/runtime-logs):\n    \n    ```\n    import { reportValue } from '@vercel/flags';\n     \n    // force dynamic mode so the flag actually gets reported,\n    // otherwise the route would be static\n    export const dynamic = 'force-dynamic';\n     \n    export async function GET() {\n      reportValue('summer-sale', false);\n      return Response.json({ ok: true });\n    }\n    ```\n    \n2.  Once reported, any calls to `track` can look up the feature flag while handling a specific request:\n    \n    ```\n    import { track } from '@vercel/analytics/server';\n    import { reportValue } from '@vercel/flags';\n     \n    // force dynamic mode so the flag actually gets reported,\n    // otherwise the route would be static\n    export const dynamic = 'force-dynamic';\n     \n    export async function GET() {\n      reportValue('summer-sale', false);\n      track('My Event', {}, { flags: ['summer-sale'] });\n     \n      return Response.json({ ok: true });\n    }\n    ```\n    \n\nIf you are using an implementation of the [Feature Flags Pattern](https://vercel.com/docs/workflow-collaboration/feature-flags/feature-flags-pattern) you don't need to call `reportValue`. The respective implementation will automatically call `reportValue` for you.",
  "title": "Integrate flags with Vercel Web Analytics",
  "description": "Learn how to tag your page views and custom events with feature flags",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/integrate-with-runtime-logs",
  "markdown": "# Integrate flags with Runtime Logs\n\nOn your dashboard, the [Logs](https://vercel.com/docs/observability/runtime-logs) tab displays your [runtime logs](https://vercel.com/docs/observability/runtime-logs#what-are-runtime-logs). It can also display any feature flags your application evaluated while handling requests.\n\n![Feature Flags section in runtime logs](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1717695155%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Ffeature-flags%2Flogs-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Feature Flags section in runtime logs](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1717695155%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Ffeature-flags%2Flogs-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nFeature Flags section in runtime logs\n\nTo make the runtime logs aware of your feature flag call `reportValue(name, value)` with the flag name and value to be reported. Each call to `reportValue` will show up as a distinct entry, even when the same key is used:\n\n```\nimport { reportValue } from '@vercel/flags';\n \n// force dynamic mode so the flag actually gets reported,\n// otherwise the route would be static\nexport const dynamic = 'force-dynamic';\n \nexport async function GET() {\n  reportValue('summer-sale', false);\n  return Response.json({ ok: true });\n}\n```\n\nIf you are using an implementation of the [Feature Flags pattern](https://vercel.com/docs/workflow-collaboration/feature-flags/feature-flags-pattern) you don't need to call `reportValue`. The respective implementation will automatically call `reportValue` for you.\n\nThe following limits apply to reported values:\n\n*   Keys are truncated to 256 characters\n*   Values are truncated to 256 characters\n*   Reported values must be JSON serializable or they will be ignored",
  "title": "Integrate flags with Runtime Logs",
  "description": "Integrate your feature flag provider with runtime logs.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/vercel-flags",
  "markdown": "# @vercel/flags API Reference\n\nThe `@vercel/flags` package provides convenience methods, components, and types for supporting feature flag [overrides](https://vercel.com/docs/workflow-collaboration/feature-flags/nextjs-flags-reference).\n\nA safe version of `JSON.stringify` that escapes the resulting output to prevent XSS attacks. Returns `string`.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `value` | `any` | A valid JSON object to convert |\n| `replacer` (Optional) | `function` \\| `Array` | A replacer [function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#using_a_function_as_replacer) or [Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#using_an_array_as_replacer) |\n| `space` (Optional) | `string` \\| `number` | Specifies the spacing in the output |\n\n```\nimport { safeJsonStringify } from '@vercel/flags';\n \nsafeJsonStringify({ markup: '<html></html>' });\n// '{\"markup\":\"\\\\u003chtml>\\\\u003c/html>\"}'\n```\n\nReports the value of a feature flag to Vercel so it can show up in Runtime Logs and be used with Web Analytics custom server-side events. Returns `undefined`.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `key` | `string` | Key of the feature flag |\n| `value` | `any` | Value of the feature flag |\n\n```\nimport { reportValue } from '@vercel/flags';\n \nreportValue('summer-sale', true);\n```\n\nA method for encrypting data (Flag definitions, overrides, and values). Returns a `Promise`.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `data` | `Object` | Data to be encrypted |\n| `secret` (Optional) | `string` | The secret being used to encrypt. Defaults to `process.env.FLAGS_SECRET` |\n\nHere is an example of encrypting flag values to be used by the Vercel Toolbar.\n\n```\nimport { encrypt } from '@vercel/flags';\nimport { FlagValues, type FlagValuesType } from '@vercel/flags/react';\n \nasync function ConfidentialFlagValues({ values }: { values: FlagValuesType }) {\n  const encryptedFlagValues = await encrypt(values);\n  return <FlagValues values={encryptedFlagValues} />;\n}\n \nexport function Page() {\n  const values = { exampleFlag: true };\n  return (\n    <div>\n      {/* Some other content */}\n      <Suspense fallback={null}>\n        <ConfidentialFlagValues values={values} />\n      </Suspense>\n    </div>\n  );\n}\n```\n\nA method for decrypting encrypted data. Returns a `Promise`.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `encryptedData` | `string` | Data to be decrypted |\n| `secret` (Optional) | `string` | The secret being used to encrypt data. Defaults to `process.env.FLAGS_SECRET` |\n\nThe `decrypt` method's primary use case is decrypting the data stored inside the `vercel-flag-overrides` cookie. It's also used by the Vercel Toolbar to handle your feature flag data.\n\n```\nimport { FlagOverridesType, decrypt } from '@vercel/flags';\nimport { type NextRequest } from 'next/server';\nimport { cookies } from 'next/headers';\n \nasync function getFlags(request: NextRequest) {\n  const overrideCookie = cookies().get('vercel-flag-overrides')?.value;\n  const overrides = overrideCookie\n    ? await decrypt<FlagOverridesType>(overrideCookie)\n    : {};\n \n  const flags = {\n    exampleFlag: overrides?.exampleFlag ?? false,\n  };\n \n  return flags;\n}\n```\n\nA method for verifying whether a request to your application's flags endpoint was made by the Vercel Toolbar. You can use `verifyAccess` to keep your endpoint private. Returns a `Promise` with a `true` or `false` value.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `authHeader`. | `string` | Authorization header to check |\n| `secret` (Optional) | `string` | The secret being used to encrypt data. Defaults to `process.env.FLAGS_SECRET` |\n\n```\nimport { NextResponse, type NextRequest } from \"next/server\";\nimport { verifyAccess, type ApiData } from \"@vercel/flags\";\n \nexport async function GET(request: NextRequest) {\n  const access = await verifyAccess(request.headers.get('Authorization'));\n  if (!access) return NextResponse.json(null, { status: 401 });\n \n  const apiData: ApiData = /* ... */\n \n  return NextResponse.json<ApiData>(apiData);\n}\n```\n\nThe `@vercel/flags` package also providers convenience methods for getting flag definition data from certain providers. Each of these functions returns a `Promise`.\n\nGet LaunchDarkly flag definitions. Accepts an `options` object with the following keys.\n\n| Options key | Type | Description |\n| --- | --- | --- |\n| `apiKey` | `string` | LaunchDarkly API key |\n| `environment` | `string` | LaunchDarkly environment |\n| `projectKey` | `string` | LaunchDarkly project key |\n\n```\nimport { verifyAccess, type ApiData } from '@vercel/flags';\nimport { getLaunchDarklyData } from '@vercel/flags/providers/launchdarkly';\nimport { NextResponse, type NextRequest } from 'next/server';\n \nexport async function GET(request: NextRequest) {\n  const access = await verifyAccess(request.headers.get('Authorization'));\n  if (!access) return NextResponse.json(null, { status: 401 });\n \n  const launchDarklyData = await getLaunchDarklyData({\n    apiKey: process.env.LAUNCHDARKLY_API_KEY,\n    projectKey: process.env.LAUNCHDARKLY_PROJECT_KEY,\n    environment: process.env.LAUNCHDARKLY_ENVIRONMENT,\n  });\n \n  return NextResponse.json<ApiData>(launchDarklyData);\n}\n```\n\nGet Split flag definitions. Accepts an `options` object with the following keys.\n\n| Options key | Type | Description |\n| --- | --- | --- |\n| `adminApiKey` | `string` | Split admin API key |\n| `workspaceId` | `string` | Split workspace ID |\n| `organizationId` | `string` | Split organization ID |\n| `environmentId` | `string` | Split environment ID |\n\n```\nimport { verifyAccess, type ApiData } from '@vercel/flags';\nimport { getSplitData } from '@vercel/flags/providers/split';\nimport { NextResponse, type NextRequest } from 'next/server';\n \nexport async function GET(request: NextRequest) {\n  const access = await verifyAccess(request.headers.get('Authorization'));\n  if (!access) return NextResponse.json(null, { status: 401 });\n \n  const splitData = await getSplitData({\n    adminApiKey: process.env.SPLIT_ADMIN_API_KEY,\n    environmentId: process.env.SPLIT_ENVIRONMENT_ID,\n    organizationId: process.env.SPLIT_ORG_ID,\n    workspaceId: process.env.SPLIT_WORKSPACE_ID,\n  });\n \n  return NextResponse.json<ApiData>(splitData);\n}\n```\n\nGet StatSig flag definitions. Accepts an `options` object with the following keys.\n\n| Options key | Type | Description |\n| --- | --- | --- |\n| `consoleApiKey` | `string` | Statsig console API key |\n| `projectId` | `string` | StatSig project ID |\n\n```\nimport { verifyAccess, type ApiData } from '@vercel/flags';\nimport { getStatsigData } from '@vercel/flags/providers/statsig';\nimport { NextResponse, type NextRequest } from 'next/server';\n \nexport async function GET(request: NextRequest) {\n  const access = await verifyAccess(request.headers.get('Authorization'));\n  if (!access) return NextResponse.json(null, { status: 401 });\n \n  const statsigData = await getStatsigData({\n    consoleApiKey: process.env.STATSIG_CONSOLE_API_KEY,\n    projectId: process.env.STATSIG_PROJECT_ID,\n  });\n \n  return NextResponse.json<ApiData>(statsigData);\n}\n```\n\nGet Optimizely flag definitions. Accepts an `options` object with the following keys.\n\n| Options key | Type | Description |\n| --- | --- | --- |\n| `apiKey` | `string` | Optimizely API key |\n| `projectId` | `string` | Optimizely project ID |\n\n```\nimport { verifyAccess, type ApiData } from '@vercel/flags';\nimport { getOptimizelyData } from '@vercel/flags/providers/optimizely';\nimport { NextResponse, type NextRequest } from 'next/server';\n \nexport async function GET(request: NextRequest) {\n  const access = await verifyAccess(request.headers.get('Authorization'));\n  if (!access) return NextResponse.json(null, { status: 401 });\n \n  const optimizelyData = await getOptimizelyData({\n    projectId: process.env.OPTIMIZELY_PROJECT_ID,\n    apiKey: process.env.OPTIMIZELY_API_KEY,\n  });\n \n  return NextResponse.json<ApiData>(optimizelyData);\n}\n```\n\nGet Hypertune flag definitions. Accepts an `options` object with the following keys.\n\n| Options key | Type | Description |\n| --- | --- | --- |\n| `token` | `string` | The `HYPERTUNE_ADMIN_TOKEN` |\n\n```\nimport { verifyAccess, type ApiData } from '@vercel/flags';\nimport { getHypertuneData } from '@vercel/flags/providers/hypertune';\nimport { NextResponse, type NextRequest } from 'next/server';\n \nexport async function GET(request: NextRequest) {\n  const access = await verifyAccess(request.headers.get('Authorization'));\n  if (!access) return NextResponse.json(null, { status: 401 });\n \n  const hypertuneData = await getHypertuneData({\n    token: process.env.HYPERTUNE_ADMIN_TOKEN,\n  });\n \n  return NextResponse.json<ApiData>(hypertuneData);\n}\n```\n\nIt is possible to integrate feature flag providers that Vercel does not export a dedicated provider function for.\n\nTo integrate any feature flag provider:\n\n1.  First, use the provider's REST API to fetch their feature flags and return them in the expected format through the [Flags API Endpoint](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#api-endpoint). This makes Vercel Toolbar aware of the feature flags defined in your flag provider.\n2.  Then, make your application respect the [override cookie](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#override-cookie) set by Vercel Toolbar.\n\nAs well as convenience methods, the `@vercel/flags` package provides types for the different entities.\n\n```\ntype JsonArray = ReadonlyArray<JsonValue>;\nexport type JsonValue =\n  | string\n  | boolean\n  | number\n  | null\n  | JsonArray\n  | { [key: string]: JsonValue };\n \ninterface FlagOptionType {\n  value: JsonValue;\n  label?: string;\n}\n \nexport interface FlagDefinitionType {\n  options?: FlagOptionType[];\n  /**\n   * The URL where the feature flag can be managed.\n   */\n  origin?: string;\n  description?: string;\n}\n/**\n * Definitions of a feature flags.\n *\n * Definitions are data like the description, available options, or its origin.\n */\nexport type FlagDefinitionsType = Record<string, FlagDefinitionType>;\n \n/**\n * Values of feature flags.\n *\n * This record consists of key-value pairs of flag keys and the value they resolved to.\n */\nexport type FlagValuesType = Record<string, JsonValue>;\n \n/**\n * Overrides of feature flags.\n *\n * This record consists of key-value pairs of flag keys and the override to be used for them.\n */\nexport type FlagOverridesType = Record<string, JsonValue>;\n \n/**\n * Data flag providers can return to integrate with the toolbar.\n */\nexport type ProviderData = {\n  definitions: FlagDefinitionsType;\n  hints?: { key: string; text: string }[];\n};\n \n/**\n * Data returned by the .well-known/vercel/flags API Route which the toolbar understands.\n */\nexport type ApiData = {\n  /**\n   * Metadata about your application's feature flags\n   */\n  definitions?: FlagDefinitionsType;\n  /**\n   * Hints show up in the toolbar. They are meant to be used in case loading\n   * data from your flag provider fails. For example when the provider fails to\n   * responed or the configuration is invalid due to a missing environment variable.\n   */\n  hints?: ProviderData['hints'];\n  /**\n   * Sets the encryption mode for the vercel-flag-overrides cookie\n   * - when set to \"encrypted\" the toolbar will store encrypted overrides\n   * - when set to \"plaintext\" the toolbar will store plaintext overrides\n   */\n  overrideEncryptionMode: 'encrypted' | 'plaintext';\n};\n```\n\nIf you are using React, you can use the `FlagValues` and `FlagDefinitions` components. These abstract you from needing to manually render `script` tags. These components handle setting the correct data attributes and escaping any data to prevent XSS.\n\nPass flag data into the `FlagValues` component with the `values` prop.\n\n```\nimport { FlagValues } from '@vercel/flags/react';\n \nexport function Page() {\n  return (\n    <div>\n      {/* Some other content */}\n      <FlagValues values={{ exampleFlag: true }} />\n    </div>\n  );\n}\n```\n\nTo keep your flags confidential, encrypt the input:\n\n```\nimport { encrypt } from '@vercel/flags';\nimport { FlagValues, type FlagValuesType } from '@vercel/flags/react';\n \nasync function ConfidentialFlagValues({ values }: { values: FlagValuesType }) {\n  const encryptedFlagValues = await encrypt(values);\n  return <FlagValues values={encryptedFlagValues} />;\n}\n \nexport function Page() {\n  const values = { exampleFlag: true };\n  return (\n    <div>\n      {/* Some other content */}\n      <Suspense fallback={null}>\n        <ConfidentialFlagValues values={values} />\n      </Suspense>\n    </div>\n  );\n}\n```\n\n| Prop | Type | Description |\n| --- | --- | --- |\n| `values` | `FlagValuesType` | The feature flag values to expose to the Vercel Toolbar |\n\nPass flag data into the `FlagDefinitions` component with the `definitions` prop.\n\n```\nimport { FlagDefinitions } from '@vercel/flags/react';\n \nexport function Page() {\n  const flagDefinitions = {\n    exampleFlag: {\n      options: [{ value: false }, { value: true }],\n      origin: 'https://example.com/flag/exampleFlag',\n      description: 'This is an example flag.',\n    },\n  };\n  return (\n    <div>\n      {/* Some other content */}\n      <FlagDefinitions definitions={flagDefinitions} />\n    </div>\n  );\n}\n```\n\nTo keep your flags confidential, encrypt the input:\n\n```\nimport { encrypt, type FlagDefinitionsType } from '@vercel/flags';\nimport { FlagDefinitions } from '@vercel/flags/react';\n \nasync function ConfidentialFlagDefinitions({\n  definitions,\n}: {\n  definitions: FlagDefinitionsType;\n}) {\n  const encryptedFlagDefinitions = await encrypt(definitions);\n  return <FlagDefinitions values={encryptedFlagDefinitions} />;\n}\n \nexport function Page() {\n  const flagDefinitions = {\n    exampleFlag: {\n      options: [{ value: false }, { value: true }],\n      origin: 'https://example.com/flag/exampleFlag',\n      description: 'This is an example flag.',\n    },\n  };\n  return (\n    <div>\n      {/* Some other content */}\n      <Suspense fallback={null}>\n        <ConfidentialFlagDefinitions values={flagDefinitions} />\n      </Suspense>\n    </div>\n  );\n}\n```\n\n| Prop | Type | Description |\n| --- | --- | --- |\n| `definitions` | `FlagDefinitionsType` | The feature flag definitions to expose to the Vercel Toolbar |",
  "title": "@vercel/flags API Reference",
  "description": "Learn about available APIs when supporting feature flags in your applications",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/observability/monitoring/monitoring-reference",
  "markdown": "# Monitoring Reference\n\nThe `Visualize` clause selects what query data is displayed. You can select one of the following fields at a time, [aggregating](#aggregations) each field in one of several ways:\n\n| Field Name | Description | Aggregations |\n| --- | --- | --- |\n| `requests` | The HTTP requests | Count, Count per Second, Percentages |\n| `bandwidth_incoming` | Bandwidth sent from the client to Vercel | Sum, Sum per Second, Min/Max, Percentages, Percentiles |\n| `bandwidth_outgoing` | Bandwidth sent from Vercel to the client | Sum, Sum per Second, Min/Max, Percentages, Percentiles |\n| `bandwidth_total` | Sum of `bandwidth_incoming` and `bandwidth_outgoing` | Sum, Sum per Second, Min/Max, Percentages, Percentiles |\n| `serverless_function_execution` | The billed Serverless Function usage in GB-Hrs | Sum, Sum per Second, Min/Max, Percentages, Percentiles |\n| `serverless_function_duration` | The time spent executing Serverless Functions | Sum, Sum per Second, Min/Max, Percentages, Percentiles |\n| `memory_size` | The size of memory provisioned for the Serverless Functions | Sum, Sum per Second, Min/Max, Percentages, Percentiles |\n| `blocked_connections` | All connections blocked by either the system or user | Count, Count per Second, Percentages |\n\nThe visualize field can be aggregated in the following ways:\n\n| Aggregation | Description |\n| --- | --- |\n| Count | The number of requests which occurred |\n| Count per Second | The average rate of requests which occurred |\n| Sum | The sum of the field value across all requests |\n| Sum per Second | The sum of the field value as a rate per second |\n| Minimum | The smallest observed field value |\n| Maximum | The largest observed field value |\n| Percentiles (75th, 90th, 95th, 99th) | Percentiles for the field values. For example, 90% of requests will have a duration that is less than the 90th percentile of duration. |\n| Percentages | Each group is reported as a percentage of the ungrouped whole. For example, if a query for request groups by hosts, one host may have 10% of the total request count. Anything excluded by the where clause is not counted towards the ungrouped whole. |\n\nAggregations are calculated within each point on the chart (hourly, daily, etc depending on the selected granularity) and also across the entire query window\n\nThe `Where` clause defines the conditions to filter your query data. It only fetches data that meets a specified condition based on several [fields](#group-bywhere-fields) and operators:\n\n| Operator | Description |     |\n| --- | --- | --- |\n| `=` | The operator that allows you to specify a single value |     |\n| `in` | The operator that allows you to specify multiple values. For example, `host in ('vercel.com', 'nextjs.com')` |     |\n| `and` | The operator that displays a query result if all the filter conditions are `TRUE` |     |\n| `or` | The operator that displays a query result if at least one of the filter conditions are `TRUE` |     |\n| `not` | The operator that displays a query result if the filter condition(s) is `NOT TRUE` |     |\n| `like` | The operator used to search a specified pattern. This is case-sensitive. For example, `host like 'acme.com'`. You can also use `_` to match any single character and `%` to match any substrings. For example, `host like 'acme_.com'` will match with `acme1.com`, `acme2.com`, and `acme3.com`. `host like 'acme%'` will also have the same matches. To do a case-insensitive search, use `ilike` |     |\n| `startsWith` | Filter data values that begin with some specific characters |     |\n| `match` | The operator used to search for patterns based on a regular expression ([`Re2`](https://github.com/google/re2/wiki/Syntax) syntax). For example, `match(user_agent, 'Chrome/97.*')` |     |\n\nString literals must be surrounded by single quotes. For example, `host = 'vercel.com'`.\n\nThe `Group By` clause calculates statistics for each combination of [field](#group-by-and-where-fields) values. Each group is displayed as a separate color in the chart view, and has a separate row in the table view.\n\nFor example, grouping by `host` and `status` will display data broken down by each combination of `host` and `status`.\n\nThe `Limit` clause defines the maximum number of results displayed. If the number of query results is greater than the `Limit` value, then the remaining results are compiled as Other(s).\n\nThere are several fields available for use within the [where](#where) and [group by](#group-by) clauses:\n\n| Field Name | Description |     |\n| --- | --- | --- |\n| `host` | Group by the request's domains and subdomains |     |\n| `path_type` | Group by the request's [resource type](#path-types) |     |\n| `project_id` | Group by the request's project ID |     |\n| `status` | Group by the request's HTTP response code |     |\n| `source_path` | The mapped path used by the request. For example, if you have a dynamic route like `/blog/[slug]` and a blog post is `/blog/my-blog-post`, the `source_path` is `/blog/[slug]` |     |\n| `request_path` | The path used by the request. For example, if you have a dynamic route like `/blog/[slug]` and a blog post is `/blog/my-blog-post`, the `request_path` is `/blog/my-blog-post` |     |\n| `cache` | The [cache](https://vercel.com/docs/edge-network/caching#x-vercel-cache) status for the request |     |\n| `error_details` | Group by the [errors](https://vercel.com/docs/errors) that were thrown on Vercel |     |\n| `deployment_id` | Group by the request's deployment ID |     |\n| `environment` | Group by the environment (`production` or [`preview`](https://vercel.com/docs/deployments/preview-deployments)) |     |\n| `request_method` | Group by the HTTP request method (`GET`, `POST`, `PUT`, etc.) |     |\n| `http_referer` | Group by the HTTP referer |     |\n| `public_ip` | Group by the request's IP address |     |\n| `user_agent` | Group by the request's user agent |     |\n| `asn` | The autonomous system number (ASN) for the request. This is related to what network the request came from (either a home network or a cloud provider) |     |\n| `bot_name` | Group by the request's bot crawler name. This field will contain the name of a known crawler (e.g. Google, Bing) |     |\n| `region` | Group by the [region](https://vercel.com/docs/edge-network/regions) the request was routed to |     |\n| `waf_action` | Group by the action taken by the [Vercel Firewall](https://vercel.com/docs/security/vercel-firewall) (`system-blocked` or `customer-blocked`) |     |\n\nAll your project's resources like pages, functions, and images have a path type:\n\n![Monitoring options including Data Granularity of day or hour](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fmonitoring%2Fmonitoring-top-bar-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Monitoring options including Data Granularity of day or hour](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fmonitoring%2Fmonitoring-top-bar-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nMonitoring options including Data Granularity of day or hour\n\nIn the chart view (vertical bar or line), `Limit` is applied at the level of each day or hour (based the value of the Data Granularity dropdown). When you hover over each step of the horizontal axis, you can see a list of the results returned and associated colors.\n\nIn the table view (below the chart), `Limit` is applied to the sum of requests for the selected query window so that the number of rows in the table does not exceed the value of `Limit`.\n\nOn the left navigation bar, you will find a list of example queries to get started:\n\n| Query Name | Description |\n| --- | --- |\n| Requests by Hostname | The total number of requests for each `host` |\n| Requests Per Second by Hostname | The total number of requests per second for each `host` |\n| Requests by Project | The total number of requests for each `project_id` |\n| Requests by IP Address | The total number of requests for each `public_ip` |\n| Requests by Bot/Crawler | The total number of requests for each `bot_name` |\n| Requests by User Agent | The total number of requests for each `user_agent` |\n| Requests by Region | The total number of requests for each `region` |\n| Bandwidth by Project, Hostname | The outgoing bandwidth for each `host` and `project_id` combination |\n| Bandwidth Per Second by Project, Hostname | The outgoing bandwidth per second for each `host` and `project_id` |\n| Bandwidth by Path, Hostname | The outgoing bandwidth for each `host` and `source_path` |\n| Request Cache Hits | The total number of request cache hits for each `host` |\n| Request Cache Misses | The total number of request cache misses for each`host` |\n| Cache Hit Rates | The percentage of cache hits and misses over time |\n| 429 Status Codes by Host, Path | The total 429 (Too Many Requests) status code requests for each `host` and `source_path` |\n| 5XX Status Codes by Host, Path | The total 5XX (server-related HTTPS error) status code requests for each `host` and `source_path` |\n| Execution by Host, Path | The total billed Serverless Function usage for each `host` and `source_path` |\n| Average Duration by Host, Path | The average duration for each `host` and `source_path` |\n| 95th Percentile Duration by Host, Path | The p95 duration for each `host` and `source_path` |",
  "title": "Monitoring Reference",
  "description": "This reference covers the clauses, fields, and variables used to create a Monitoring query.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/observability/monitoring/quickstart",
  "markdown": "# Monitoring Quickstart\n\n*   Make sure you upgrade to [Pro](https://vercel.com/docs/accounts/plans/pro) or [Enterprise](https://vercel.com/docs/accounts/plans/enterprise) plan\n*   Pro teams should [enable Monitoring](https://vercel.com/docs/observability/monitoring#enable-monitoring) from team Settings > Billing\n*   Enterprise teams should [contact sales](https://vercel.com/contact/sales) to get a customized plan based on their requirements\n\nIn the following guide you will learn how to view the most requested posts on your website.\n\n1.  1.  Navigate to the Monitoring tab from your Vercel dashboard\n    2.  Click the Create New Query button to open the query builder\n    3.  Click the Edit Query button to configure your query with clauses\n    \n    ![Add clauses through query editor.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fedit-query-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Add clauses through query editor.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fedit-query-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Add clauses through query editor.\n    \n2.  The [Visualize](https://vercel.com/docs/observability/monitoring/monitoring-reference#visualize%22) clause specifies which field in your query will be calculated. Set the Visualize clause to `requests` to monitor the most popular posts on your website.\n    \n    Click the Run Query button, and the [Monitoring chart](https://vercel.com/docs/observability/monitoring#monitoring-chart) will display the total number of requests made.\n    \n    ![Configure Visualize clause to fetch requests.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fset-visualize-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Configure Visualize clause to fetch requests.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fset-visualize-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Configure Visualize clause to fetch requests.\n    \n3.  To filter the query data, use the [Where](https://vercel.com/docs/observability/monitoring/monitoring-reference#where) clause and specify the conditions you want to match against. You can use a combination of [variables and operators](https://vercel.com/docs/observability/monitoring/monitoring-reference#where) to fetch the most requested posts. Add the following query statement to the Where clause:\n    \n    ```\n    host = 'my-site.com' and like(request_path, '/posts%')\n    ```\n    \n    This query retrieves data with a host field of `my-site.com` and a `request_path` field that starts with /posts.\n    \n    The `%` character can be used as a wildcard to match any sequence of characters after `/posts`, allowing you to capture all `request_path` values that start with that substring.\n    \n    ![Configure Where clause to filter requests.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fset-where-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Configure Where clause to filter requests.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fset-where-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Configure Where clause to filter requests.\n    \n4.  Define a criteria that groups the data based on the selected attributes. The grouping mechanism is supported through the [Group By](https://vercel.com/docs/observability/monitoring/monitoring-reference#group-by) clause.\n    \n    Set the Group By clause to `request_path`.\n    \n    With Visualize, Where, and Group By fields set, the [Monitoring chart](https://vercel.com/docs/observability/monitoring#monitoring-chart) now shows the sum of `requests` that are filtered based on the `request_path`.\n    \n    ![Configure Group By clause to segment events into groups.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fset-groupby-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Configure Group By clause to segment events into groups.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fset-groupby-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Configure Group By clause to segment events into groups.\n    \n5.  To control the number of results returned by the query, use the [Limit](https://vercel.com/docs/observability/monitoring/monitoring-reference#limit) clause and specify the desired number of results. You can choose from a few options, such as 5, 10, 25, 50, or 100 query results. For this example, set the limit to 5 query results.\n    \n    ![Configure Group By clause to segment events into groups.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fset-limit-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Configure Group By clause to segment events into groups.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fset-limit-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Configure Group By clause to segment events into groups.\n    \n6.  Save your query and click the **Run Query** button to generate the final results. The Monitoring chart will display a comprehensive view of the top 5 most requested posts on your website.\n    \n    ![In-depth and full-scale monitoring for your five most requested posts.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Ftop-posts-eg-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![In-depth and full-scale monitoring for your five most requested posts.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Ftop-posts-eg-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    In-depth and full-scale monitoring for your five most requested posts.",
  "title": "Monitoring Quickstart",
  "description": "In this quickstart guide, you'll discover how to create and execute a query to visualize the most popular posts on your website.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/implement-flags-in-toolbar",
  "markdown": "# Implementing Feature Flags in Vercel Toolbar\n\nThis quickstart will teach you how to make Vercel Toolbar aware of your application's feature flags, so you can view them, and have your application respect overrides set by Vercel Toolbar. The ability to view and interact with flags from the toolbar makes working with them more convienient, as you no longer need to sign into your feature flag provider to make one-off changes. From the toolbar you can also quickly open feature flags in a provider or [share overrides with team members](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#sharing-flag-overrides).\n\n*   Set up the [Vercel Toolbar](https://vercel.com/docs/workflow-collaboration/vercel-toolbar) for development by following [adding the Vercel Toolbar to local and production environments](https://vercel.com/docs/workflow-collaboration/vercel-toolbar/in-production-and-localhost#)\n*   You should have the latest version of Vercel CLI installed. To check your version, use `vercel --version`. To [install](https://vercel.com/docs/cli#installing-vercel-cli) or update Vercel CLI, use:\n*   Ensure your local directory [links](https://vercel.com/docs/cli/link) to a Vercel project. You can use `vercel link` from root of your project to link it to your Vercel account or use:\n    \n    ```\n    vercel link [path-to-directory]\n    ```\n    \n\nTo set up feature flag support you can either:\n\n*   Use the in-product onboarding flow: Start your project locally and open Vercel Toolbar. Click the Feature Flags icon () to start the onboarding flow.\n*   Follow the steps below to set feature flags support up without using the onboarding flow\n\n1.  To make your application aware of your feature flags, you need to install the `@vercel/flags` package. This package provides convenience methods, components, and types that allow your application to communicate with Vercel Toolbar:\n    \n2.  This step happens last in the toolbar's onboarding flow, but we'll do it first here as it simplifies the manual setup.\n    \n    This secret gates access to the `/.well-known/vercel/flags` API endpoint we'll create in the next step. This prevents publicly exposing your feature flags.\n    \n    In your project's settings, create an [environment variable](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable) called [`FLAGS_SECRET`](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flags_secret-environment-variable). The value must have a specific length (32 random bytes encoded in base64) to work as an encryption key. You can create one using node:\n    \n    ```\n    node -e \"console.log(crypto.randomBytes(32).toString('base64url'))\"\n    ```\n    \n    In your local environment, pull your environment variables with `vercel env pull` to make them available to your project.\n    \n    Adding the environment variable locally is not enough. Vercel Toolbar reads it from your project settings in the Vercel dashboard.\n    \n3.  You can tell Vercel Toolbar about your application's feature flags by adding an API endpoint to your application. Vercel Toolbar will then make an authenticated request to this API endpoint to receive your application's feature flag definitions. This endpoint can communicate the name, origin, description, and available options of your feature flags.\n    \n    ```\n    import { NextResponse, type NextRequest } from 'next/server';\n    import { verifyAccess, type ApiData } from '@vercel/flags';\n     \n    export async function GET(request: NextRequest) {\n      const access = await verifyAccess(request.headers.get('Authorization'));\n      if (!access) return NextResponse.json(null, { status: 401 });\n     \n      return NextResponse.json<ApiData>({\n        definitions: {\n          newFeature: {\n            description: 'Controls whether the new feature is visible',\n            origin: 'https://example.com/#new-feature',\n            options: [\n              { value: false, label: 'Off' },\n              { value: true, label: 'On' },\n            ],\n          },\n        },\n      });\n    }\n    ```\n    \n4.  You can use Vercel Toolbar to create feature flag overrides once you've set up this API Endpoint. When you create an override Vercel Toolbar will set a cookie containing those overrides. Your application can then read this cookie and respect those overrides. You can optionally check the signature on the overrides cookie to ensure it originated from a trusted source.\n    \n    ```\n    import { FlagOverridesType, decrypt } from '@vercel/flags';\n    import { type NextRequest } from 'next/server';\n    import { cookies } from 'next/headers';\n     \n    async function getFlags(request: NextRequest) {\n      const overrideCookie = cookies().get('vercel-flag-overrides')?.value;\n      const overrides = overrideCookie\n        ? await decrypt<FlagOverridesType>(overrideCookie)\n        : {};\n     \n      const flags = {\n        exampleFlag: overrides?.exampleFlag ?? false,\n      };\n     \n      return flags;\n    }\n    ```\n    \n5.  The `@vercel/flags` package exposes React components which allow making Vercel Toolbar aware of your feature flag's values.\n    \n    ```\n    import { FlagValues } from '@vercel/flags/react';\n     \n    export function Page() {\n      return (\n        <div>\n          {/* Some other content */}\n          <FlagValues values={{ exampleFlag: true }} />\n        </div>\n      );\n    }\n    ```\n    \n    The approaches above will add the names and values of your feature flags to the DOM in plain text. To keep your feature flags confidential, use the `encrypt` function:\n    \n    ```\n    import { encrypt } from '@vercel/flags';\n    import { FlagValues, type FlagValuesType } from '@vercel/flags/react';\n     \n    async function ConfidentialFlagValues({ values }: { values: FlagValuesType }) {\n      const encryptedFlagValues = await encrypt(values);\n      return <FlagValues values={encryptedFlagValues} />;\n    }\n     \n    export function Page() {\n      const values = { exampleFlag: true };\n      return (\n        <div>\n          {/* Some other content */}\n          <Suspense fallback={null}>\n            <ConfidentialFlagValues values={values} />\n          </Suspense>\n        </div>\n      );\n    }\n    ```\n    \n    The `FlagValues` component will emit a script tag with a `data-flag-values` attribute, which get picked up by Vercel Toolbar. Vercel Toolbar then combines the flag values with the definitions returned by your API endpoint. If you are not using React or Next.js you can render these script tags:\n    \n    ```\n    import { safeJsonStringify } from '@vercel/flags';\n     \n    <script type=\"application/json\" data-flag-values>\n      ${safeJsonStringify({ exampleFlag: true })}\n    </script>;\n    ```\n    \n    Use `safeJsonStringify` to prevent [XSS vulnerabilities](https://owasp.org/www-community/attacks/xss/), which plain `JSON.stringify` within `script` tags is susceptible to.\n    \n6.  You should now be able to see your feature flags in Vercel Toolbar. You should also be able to set overrides that your application can respect by reading the `vercel-flag-overrides` cookie. If you added the `FlagValues` component, you should be able to see the actual value each flag resolved to while rendering the current page.",
  "title": "Implementing Feature Flags in Vercel Toolbar",
  "description": "Learn how to set up Vercel Toolbar so you can see and override your application's feature flags",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/image-optimization/quickstart",
  "markdown": "# Image Optimization Quickstart\n\nThe following examples show how you can optimize your images on Vercel using your framework's image component. Use the framework switcher to see examples for your framework choice.\n\nVercel Image Optimization works out of the box with Next.js, Nuxt, SvelteKit, and Astro.\n\n1.  Next.js provides a built-in [`next/image`](https://nextjs.org/docs/app/api-reference/components/image) component.\n    \n    ```\n    import Image from 'next/image';\n    ```\n    \n2.  This component takes the following [required props](https://nextjs.org/docs/app/api-reference/components/image#required-props):\n    \n    *   `src`: The URL of the image to be loaded\n    *   `alt`: A short description of the image\n    *   `width`: The width of the image\n    *   `height`: The height of the image\n    \n    When using [local images](https://nextjs.org/docs/app/building-your-application/optimizing/images#local-images) you do not need to provide the `width` and `height` props. These values will be automatically determined based on the imported image.\n    \n    The below example uses a [remote image](https://nextjs.org/docs/app/building-your-application/optimizing/images#remote-images) stored in a `/public/images/` folder, and has the `width` and `height` props applied:\n    \n    ```\n    <Image\n      src=\"https://images.unsplash.com/photo-1627843240167-b1f9d28f732e\"\n      alt=\"Picture of a triangle\"\n      width={500}\n      height={500}\n    />\n    ```\n    \n    If there are some images that you wish to not optimize (for example, if the URL contains a token), you can use the [unoptimized](https://nextjs.org/docs/app/api-reference/components/image#unoptimized) prop to disable image optimization on some or all of your images.\n    \n    For more information on all props, caching behavior, and responsive images, visit the [`next/image`](https://nextjs.org/docs/app/api-reference/components/image) documentation.\n    \n3.  Push your changes and deploy your Next.js application to Vercel.\n    \n    When deployed to Vercel, this component automatically optimizes your images on-demand and serves them from the [Vercel Edge Network](https://vercel.com/docs/edge-network/overview).",
  "title": "Image Optimization Quickstart",
  "description": "Learn how you can leverage Vercel Image Optimization in your projects.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/observability/log-drains/log-drains-reference",
  "markdown": "# Log Drains Reference\n\nLog Drains allow you to collect logs from your deployments. To enable Log Drains, you must provide a [destination URL](https://vercel.com/docs/observability/log-drains#enter-your-endpoint-url) to send the logs to. This URL is provided by the provider that ingests the Log Drains.\n\nVercel sends logs to destination URLs over `HTTPS`, `HTTP`, `TLS`, or `TCP` every time logs are generated.\n\nVercel supports three different types of Log Drains:\n\n*   [JSON](#json-log-drains)\n*   [NDJSON](#ndjson-log-drains)\n*   [Syslog](#syslog-drain)\n\nWhen you choose the `json` type, the URL receives a HTTPS or HTTP POST request with a JSON array on the `POST` body.\n\nIf the response of the request returns an HTTP `statusCode` with a value of `-1`, that means there was no response returned and the lambda crashed. In the same response, if the value of `proxy.statusCode` is returned with `-1`, that means the revalidation occurred in the background.\n\nThe logs are buffered and submitted as batches with the following formats:\n\n```\n \n[\n  {\n    \"id\": <identifier>,\n    \"message\": <Log messages that push the log over 4 KB can be truncated to only show tail>,\n    \"timestamp\": <timestamp>,\n    \"type\": <\"stdout\" or \"stderr\">,\n    \"source\": <\"build\", \"static\", \"external\", or \"lambda\">,\n    \"projectId\": <identifier of project>,\n    \"deploymentId\": <identifier of deployment>,\n    \"buildId\": <identifier of build>,\n    \"host\": <deployment unique url hostname>,\n    \"entrypoint\": <entrypoint>\n  },\n  {\n    \"id\": <identifier>,\n    \"message\": <Log messages that push the log over 4 KB can be truncated to only show tail >,\n    \"timestamp\": <timestamp>,\n    \"requestId\": <identifier of request>,\n    \"statusCode\": <HTTP status code of request>,\n    \"source\": <\"build\", \"static\", \"external\", or \"lambda\">,\n    \"projectId\": <identifier of project>,\n    \"deploymentId\": <identifier of deployment>,\n    \"buildId\": <identifier of build only on build logs>,\n    \"destination\": <origin of external content only on external logs>,\n    \"host\": <deployment unique url hostname>,\n    \"path\": <function or the dynamic path of the request>,\n    \"executionRegion\": <region where the request is executed>,\n    \"level\": <\"error\", \"warning\", or \"info\">,\n    \"proxy\": {\n      \"timestamp\": <timestamp of proxy request>,\n      \"method\": <method of request>,\n      \"scheme\": <protocol of request>,\n      \"host\": <alias hostname if exists>,\n      \"path\": <request path>,\n      \"userAgent\": <user agent>,\n      \"referer\": <referer>,\n      \"statusCode\": <HTTP status code of proxy request>,\n      \"clientIp\": <client IP>,\n      \"region\": <region request is processed>,\n      \"cacheId\": <original request id when request is served from cache>,\n      \"vercelCache\": <the X-Vercel-Cache value sent to the browser>\n    }\n  }\n]\n \n```\n\nThe requests are posted with a [`x-vercel-signature`](https://vercel.com/docs/edge-network/headers#x-vercel-signature) header which contains a hash signature you can use to validate the request body. See the [Securing your Log Drains](https://vercel.com/docs/rest-api#securing-your-log-drains) section to learn how to verify requests.\n\nWhen you choose the `ndjson` type, the URL receives a HTTPS or HTTP POST request with JSON objects delimited by newline (`\\\\n`) on the `POST` body. See the [`ndjson`](https://www.npmjs.com/package/ndjson) npm package for more information on the structure.\n\nEach request receives HTTP headers including [`x-vercel-signature`](https://vercel.com/docs/edge-network/headers#x-vercel-signature).\n\nThe following are two example `POST` bodies:\n\n```\n{\"id\": \"1573817187330377061717300000\",\"message\": \"done\",\"timestamp\": 1573817187330,\"type\": \"stdout\",\"source\": \"build\",\"projectId\": \"abcdefgdufoJxB6b9b1fEqr1jUtFkyavUURbnDCFCnZxgs\",\"deploymentId\": \"dpl_233NRGRjVZX1caZrXWtz5g1TAksD\",\"buildId\": \"bld_cotnkcr76\",\"host\": \"*.vercel.app\",\"entrypoint\": \"api/index.js\"}\n{\"id\": \"1573817250283254651097202070\",\"message\": \"START RequestId: 643af4e3-975a-4cc7-9e7a-1eda11539d90 Version: $LATEST\\\\n2019-11-15T11:27:30.721Z\\\\t643af4e3-975a-4cc7-9e7a-1eda11539d90\\\\tINFO\\\\thello\\\\nEND RequestId: 643af4e3-975a-4cc7-9e7a-1eda11539d90\\\\nREPORT RequestId: 643af4e3-975a-4cc7-9e7a-1eda11539d90\\\\tDuration: 16.76 ms\\\\tBilled Duration: 100 ms\\\\tMemory Size: 1024 MB\\\\tMax Memory Used: 78 MB\\\\tInit Duration: 186.49 ms\\\\t\\\\n\",\"timestamp\": 1573817250283,\"source\": \"lambda\",\"requestId\": \"894xj-1573817250172-7847d20a4939\",\"statusCode\": 200,\"proxy\": {\"timestamp\": 1573817250172,\"path\": \"/dynamic/some-value.json?route=some-value\",\"userAgent\": [\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36\"],\"referer\": \"*.vercel.app\",\"method\": \"GET\",\"scheme\": \"https\",\"host\": \"test.vercel.app\",\"statusCode\": 200,\"clientIp\": \"120.75.16.101\",\"region\": \"sfo1\"},\"projectId\": \"abcdefgdufoJxB6b9b1fEqr1jUtFkyavUURbnDCFCnZxgs\",\"deploymentId\": \"dpl_233NRGRjVZX1caZrXWtz5g1TAksD\",\"host\": \"test-3i9jacdr-team-name.vercel.app\",\"path\": \"/dynamic/[route].json\"}\n```\n\nDeprecated:\n\nSyslog is not supported in configurable log drains. This is a deprecated feature for integrations.\n\nWhen you choose the `syslog` type, the URL is connected with TLS or TCP. Log Drain messages are formatted according to [RFC5424](https://tools.ietf.org/html/rfc5424) framed using octet counting defined in [RFC6587](https://tools.ietf.org/html/rfc6587#section-3.4.1).\n\nSyslog messages resemble the following:\n\n```\n \n425 <142>1 2019-11-15T11:42:22.562Z *.vercel.app now proxy - [proxy@54735 requestId=\"q8k4w-1573818142562-9adfb40ce9d4\" statusCode=\"200\" method=\"GET\" path=\"/api\" userAgent=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36\" referer=\"*.vercel.app\" clientIp=\"120.75.16.101\" region=\"sfo1\" signature=\"b847f4dd531d0b41094fb4b38fd62bde0b0e29a5\"]587 <150>1 2019-11-15T11:42:22.833Z *.vercel.app now lambda - [lambda@54735 requestId=\"q8k4w-1573818142562-9adfb40ce9d4\" statusCode=\"200\" path=\"api/index.js\" signature=\"0900101157dac2a2e555524c2f8d61229b15307d\"] BOMSTART RequestId: ec00309f-4514-4128-8b8a-9a0e74900283 Version: $LATEST\n2019-11-15T11:42:23.176Z\\\\tec00309f-4514-4128-8b8a-9a0e74900283\\\\tINFO\\\\thello\nEND RequestId: ec00309f-4514-4128-8b8a-9a0e74900283\nREPORT RequestId: ec00309f-4514-4128-8b8a-9a0e74900283\\\\tDuration: 20.08 ms\\\\tBilled Duration: 100 ms Memory Size: 1024 MB\\\\tMax Memory Used: 77 MB\\\\tInit Duration: 157.97 ms\n \n```\n\nSimilar to JSON and NDJSON drains, a syslog message contains a hash signature for verifying messages on the `signature` key of structured data. On syslog drains, the signature is computed using an OAuth2 secret and the `MSG` section of the syslog format.\n\nAll drains support transport-level encryption using `HTTPS` or `TLS` protocols, and it is recommended to use them on production and use others only for development and testing.\n\nWhen your server starts receiving payloads, it could be a third party sending log messages to your server if they know the URL. Therefore, it is recommended to use HTTP Basic Authentication, or verify messages are sent from Vercel using an OAuth2 secret and hash signature.\n\nFor example, if you have a basic HTTP server subscribing to Log Drains, the payload can be validated like so:\n\n```\nimport crypto from 'crypto';\n \nexport async function GET(request: Request) {\n  const { INTEGRATION_SECRET } = process.env;\n \n  if (typeof INTEGRATION_SECRET != 'string') {\n    throw new Error('No integration secret found');\n  }\n \n  const rawBody = await request.text();\n  const rawBodyBuffer = Buffer.from(rawBody, 'utf-8');\n  const bodySignature = sha1(rawBodyBuffer, INTEGRATION_SECRET);\n \n  if (bodySignature !== request.headers.get('x-vercel-signature')) {\n    return Response.json({\n      code: 'invalid_signature',\n      error: \"signature didn't match\",\n    });\n  }\n \n  console.log(rawBody);\n \n  response.status(200).end();\n}\n \nasync function sha1(data: Buffer, secret: string): string {\n  return crypto.createHmac('sha1', secret).update(data).digest('hex');\n}\n```\n\nYou can compute the signature using an HMAC hexdigest from the `secret` token of the OAuth2 app and request body, then compare it with the value of the `x-vercel-signature` header to validate the payload.\n\nIn order to configure the logs you want to receive, you can provide one or more `sources` when creating a log drain:\n\n| value | Details |\n| --- | --- |\n| `static` | Requests to static assets like HTML and CSS files |\n| `lambda` | Output from Vercel Functions like [API Routes](https://vercel.com/docs/functions/serverless-functions) |\n| `edge` | Output from Edge Functions like [Middleware](https://vercel.com/docs/functions/edge-middleware) |\n| `build` | Output from the [Build Step](https://vercel.com/docs/deployments/configure-a-build) |\n| `external` | External [rewrites](https://vercel.com/docs/projects/project-configuration#rewrites) to a different domain |\n\nExample:\n\n```\n{\n  \"sources\": [\"static\", \"lambda\", \"edge\"]\n}\n```\n\nWhile this parameter is optional, providing at least one log source is highly recommended. If you do not provide any log sources, the log drain will default to `edge`, `lambda`, `static`, and `external`.\n\nTo configure which environments you want to receive logs from, you can pass one or more values to the `environments` property when creating a log drain:\n\n| value | Details |\n| --- | --- |\n| `production` | Logs from production deployments with assigned domain(s) |\n| `preview` | Logs from deployments accessed through the [generated deployment URL](https://vercel.com/docs/deployments/generated-urls) |\n\nExample:\n\n```\n{\n  \"environments\": [\"production\", \"preview\"]\n}\n```\n\nIf you want to reduce the number of logs you receive, you can provide a `samplingRate` when creating a log drain. This value is a number between `0.01` and `1` that represents the percentage of logs you want to receive.\n\nExample:\n\n```\n{\n  \"samplingRate\": 0.5 // 50% of all log lines\n}\n```\n\nFor more information on log drains and how to use them, check out the following resources:",
  "title": "Log Drains Reference",
  "description": "Learn about Log Drains types and sources.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/elevenlabs",
  "markdown": "# Vercel ElevenLabs Integration\n\n[ElevenLabs](https://elevenlabs.io/) specializes in advanced voice synthesis and audio processing technologies. Its integration with Vercel allows you to incorporate realistic voice and audio enhancements into your applications, ideal for creating interactive media experiences.\n\nYou can use the Vercel and ElevenLabs integration to power a variety of AI applications, including:\n\n*   Voice synthesis: Use ElevenLabs for generating natural-sounding synthetic voices in applications such as virtual assistants or audio-books\n*   Audio enhancement: Use ElevenLabs to enhance audio quality in applications, including noise reduction and sound clarity improvement\n*   Interactive media: Use ElevenLabs to implement voice synthesis and audio processing in interactive media and gaming for realistic soundscapes\n\nElevenLabs offers models that specialize in advanced voice synthesis and audio processing, delivering natural-sounding speech and audio enhancements suitable for various interactive media applications.\n\nEleven English v2\n\n**Type:** Audio\n\nThe highest quality English text-to-speech model.\n\nEleven English v1\n\n**Type:** Audio\n\nThe original ElevenLabs English text-to-speech model.\n\nEleven Multilingual v1\n\n**Type:** Audio\n\nA multilingual text-to-speech model. This has been surpassed by the Eleven Multilingual v2 model.\n\nEleven Multilingual v2\n\n**Type:** Audio\n\nA multilingual text-to-speech model that supports 28 languages.\n\nEleven Turbo v2\n\n**Type:** Audio\n\nThe fastest text-to-speech model. Only English is supported.\n\nThe Vercel ElevenLabs integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select ElevenLabs from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Install the providers package\n10.  Connect your project using the code below:\n\n11.  Add the provider to your page using the code below:",
  "title": "Vercel ElevenLabs Integration",
  "description": "Learn how to integrate ElevenLabs with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/pinecone",
  "markdown": "# Vercel Pinecone Integration\n\n[Pinecone](https://pinecone.io/) is a [vector database](https://vercel.com/guides/vector-databases) service that handles the storage and search of complex data. With Pinecone, you can use machine-learning models for content recommendation systems, personalized search, image recognition, and more. The Vercel Pinecone integration allows you to deploy your models to Vercel and use them in your applications.\n\nA vector database is a database that stores and searches for vectors. In this context, a vector represents a data point mathematically, often termed as an embedding.\n\nAn embedding is data that's converted to an array of numbers (a vector). The combination of the numbers that make up the vector form a multi-dimensional map used in comparison to other vectors to determine similarity.\n\nTake the below example of two vectors, one for an image of a cat and one for an image of a dog. In the cat's vector, the first element is `0.1`, and in the dog's vector `0.2`. This similarity and difference in values illustrate how vector comparison works. The closer the values are to each other, the more similar the vectors are.\n\n```\n// Example of a vector for an image of a cat\n[0.1, 0.2, 0.3, 0.4, 0.5];\n// Example of a vector for an image of a dog\n[(0.2, 0.3, 0.4, 0.5, 0.6)];\n```\n\nYou can use the Vercel and Pinecone integration to power a variety of AI applications, including:\n\n*   Personalized search: Use Pinecone's vector database to provide personalized search results. By analyzing user behavior and preferences as vectors, search engines can suggest results that are likely to interest the user\n*   Image and video retrieval: Use Pinecone's vector database in image and video retrieval systems. They can quickly find images or videos similar to a given input by comparing embeddings that represent visual content\n*   Recommendation systems: Use Pinecone's vector database in e-commerce apps and streaming services to help power recommendation systems. By analyzing user behavior, preferences, and item characteristics as vectors, these systems can suggest products, movies, or articles that are likely to interest the user\n\nThe Vercel Pinecone integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select Pinecone from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Install the providers package\n    \n    ```\n    pnpm i @pinecone-database/pinecone \n    ```\n    \n10.  Connect your project using the code below:\n\n11.  Add the provider to your page using the code below:\n\nYou can deploy a template to Vercel that includes a pre-trained model and a sample application that uses the model:",
  "title": "Vercel Pinecone Integration",
  "description": "Learn how to integrate Pinecone with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/adding-a-model",
  "markdown": "# Adding a Model\n\nWhen you navigate to the AI tab, you'll see a list of all available AI integration models. You can use the search bar to find a specific model, select models through provider, or filter by type (Chat, Image, Code, or Audio).\n\nTo explore models:\n\n1.  Use the search bar, provider select, or type filter to find the model you want to add\n2.  Select the model you want to add by pressing the Explore button\n3.  The model playground will open, and you can test the model before adding it to your project\n\nThe model playground lets you test the model you are interested in before adding it to your project. If you have not installed an AI provider through the Vercel dashboard, then you will have ten lifetime generations per provider (they do not refresh, and once used, are spent) regardless of plan. If you _have_ installed an AI provider that supports the model, Vercel will use your provider key.\n\nYou can use the model playground to test the model's capabilities and see if it fits your projects needs.\n\nThe model playground differs depending on the model you are testing. For example, if you are testing a chat model, you can input a prompt and see the model's response. If you are testing an image model, you can upload an image and see the model's output. Each model may have different variations based on the provider you choose.\n\nThe playground also lets you also configure the model's settings, such as temperature, maximum output length, duration, continuation, top p, and more. These settings and inputs are specific to the model you are testing.\n\nOnce you have decided on the model you want to add to your project:\n\n1.  Select the Add Model button\n2.  If you have more than one provider that supports the model you are adding, you will be prompted to select the provider you want to use. To select a provider, press the Add Provider button next to the provider you want to use for the model\n3.  Review the provider card which displays the models available, along with a description of the provider and links to their website, pricing, and documentation and select the Add Provider button\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  You'll be redirected to the provider's website to complete the connection process\n6.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider and model settings, view usage, and more",
  "title": "Adding a Model",
  "description": "Learn how to add a new AI model to your Vercel projects",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/adding-a-provider",
  "markdown": "# Adding a Provider\n\nWhen you navigate to the AI tab, you'll see a list of all available AI integration providers available for installation in your Vercel projects.\n\nTo add a new provider:\n\n1.  Select the Add button next to the provider you want to integrate\n2.  Review the provider card which displays the models available, along with a description of the provider and links to their website, pricing, and documentation\n3.  Select the Add Provider button\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n\nOnce you add a provider the AI tab will display a list of all the providers you've connected to. To add more providers or models, select the Add Integration button.",
  "title": "Adding a Provider",
  "description": "Learn how to add a new AI provider to your Vercel projects.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/perplexity",
  "markdown": "# Vercel Perplexity Integration\n\n[Perplexity API](https://perplexity.ai/) specializes in deep language understanding and generation models. Integrating Perplexity with Vercel allows your applications to use advanced text interpretation, sentiment analysis, and language modeling capabilities.\n\nYou can use the Vercel and Perplexity integration to power a variety of AI applications, including:\n\n*   Advanced text generation: Use Perplexity for creating sophisticated text generation tools for content creation and communication\n*   Semantic text analysis: Use Perplexity for applications requiring deep semantic analysis of text, such as sentiment analysis or topic detection\n*   Language understanding applications: Use Perplexity in tools for language understanding and translation, enhancing communication across languages\n\nPerplexity provides models focused on deep language understanding and generation. They excel in tasks such as contextual text interpretation, predictive typing, and nuanced sentiment analysis.\n\nllama-3-70b-instruct\n\n**Type:** Chat\n\nMeta's CodeLlama 70B model hosted by Perplexity.\n\nllama-3-8b-instruct\n\n**Type:** Chat\n\nMeta's Llama 8B model hosted by Perplexity.\n\nllama-3-sonar-large-32k-chat\n\n**Type:** Chat\n\nPerplexity's 8x7B parameter chat model based on Llama 3 architecture\n\nllama-3-sonar-large-32k-online\n\n**Type:** Chat\n\nPerplexity's 8x7B parameter chat model based on Llama 3 architecture with access to their web search index\n\nllama-3-sonar-small-32k-chat\n\n**Type:** Chat\n\nPerplexity's 7B parameter chat model based on Llama 3 architecture\n\nllama-3-sonar-small-32k-online\n\n**Type:** Chat\n\nPerplexity's 7B parameter chat model based on Llama 3 architecture with access to their web search index\n\nmixtral-8x7B-instruct\n\n**Type:** Chat\n\nMistral's 8x7B model hosted by Perplexity.\n\nThe Vercel Perplexity API integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select Perplexity API from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Install the providers package\n10.  Connect your project using the code below:\n    \n    ```\n    // app/api/chat/route.tsimport { OpenAIStream, StreamingTextResponse } from 'ai';import OpenAI from 'openai';const perplexity = new OpenAI({  apiKey: process.env.PERPLEXITY_API_KEY || '',  baseURL: 'https://api.perplexity.ai',});export async function POST(req: Request) {  // Extract the `messages` from the body of the request  const { messages } = await req.json();  // Request the OpenAI-compatible API for the response based on the prompt  const response = await perplexity.chat.completions.create({    model: 'llama-3-sonar-large-32k-online',    stream: true,    messages: messages,  });  // Convert the response into a friendly text-stream  const stream = OpenAIStream(response);  // Respond with the stream  return new StreamingTextResponse(stream);}\n    ```\n    \n\n11.  Add the provider to your page using the code below:\n    \n    ```\n    // app/chat/page.tsx'use client';import { useChat } from 'ai/react';export default function Chat() {  const { messages, input, handleInputChange, handleSubmit } = useChat();  return (    <div>      {messages.map((m) => (        <div key={m.id}>          {m.role === 'user' ? 'User: ' : 'AI: '}          {m.content}        </div>      ))}      <form onSubmit={handleSubmit}>        <input          value={input}          placeholder=\"Say something...\"          onChange={handleInputChange}        />      </form>    </div>  );}\n    ```",
  "title": "Vercel Perplexity Integration",
  "description": "Learn how to integrate Perplexity with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/lmnt",
  "markdown": "# Vercel LMNT Integration\n\nLearn how to integrate LMNT with Vercel.\n\n[LMNT](https://lmnt.com/) provides data processing and predictive analytics models, known for their precision and efficiency. Integrating LMNT with Vercel enables your applications to offer accurate insights and forecasts, particularly useful in finance and healthcare sectors.\n\nYou can use the Vercel and LMNT integration to power a variety of AI applications, including:\n\n*   High quality text-to-speech: Use LMNT to generate realistic speech that powers chatbots, AI-agents, games, and other digital media\n*   Studio quality custom voices: Use LMNT to clone voices that will faithfully reproduce the emotional richness and realism of actual speech\n*   Reliably low latency, full duplex streaming: Use LMNT to enable superior performance for conversational experiences, with consistently low latency and unmatched reliability\n\nThe Vercel LMNT integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select LMNT from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Install the providers package\n10.  Connect your project using the code below:\n\n11.  Add the provider to your page using the code below:\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Vercel LMNT Integration",
  "description": "Learn how to integrate LMNT with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/togetherai",
  "markdown": "# Vercel Together AI Integration\n\n[Together AI](https://www.together.ai/) offers models for interactive AI experiences, focusing on collaborative and real-time engagement. Integrating Together AI with Vercel empowers your applications with enhanced user interaction and co-creative functionalities.\n\nYou can use the Vercel and Together AI integration to power a variety of AI applications, including:\n\n*   Co-creative platforms: Use Together AI in platforms that enable collaborative creative processes, such as design or writing\n*   Interactive learning environments: Use Together AI in educational tools for interactive and adaptive learning experiences\n*   Real-time interaction tools: Use Together AI for developing applications that require real-time user interaction and engagement\n\nTogether AI offers models that specialize in collaborative and interactive AI experiences. These models are adept at facilitating real-time interaction, enhancing user engagement, and supporting co-creative processes.\n\nCodeLlama Instruct (70B)\n\n**Type:** Code\n\nA 70b generative text model fine-tuned for general code synthesis and understanding\n\nFalcon Instruct (40B)\n\n**Type:** Chat\n\nA 40B decoder-only model based on Falcon-40B and finetuned on a mixture of Baize.\n\nLlama-2 Chat (70B)\n\n**Type:** Chat\n\nLlama 2 is an auto-regressive language model that uses an optimized transformer architecture.\n\nOpenOrca Mistral (7B) 8K\n\n**Type:** Chat\n\nMistral 7B finetuned on an OpenOrca dataset.\n\nMixtral 8x7B Instruct\n\n**Type:** Chat\n\nA pretrained generative Sparse Mixture of Experts tuned to be a helpful assistant.\n\nMythomax L2 (13B)\n\n**Type:** Chat\n\nA variant of Mythomix proficient at both roleplaying and storywriting.\n\nNous Hermes 2 - Mixtral 8x7B-SFT\n\n**Type:** Chat\n\nThe supervised finetune only version of the new flagship Nous Research model trained over the Mixtral 8x7B MoE LLM.\n\nOpenHermes 2.5 - Mistral 7B\n\n**Type:** Chat\n\nA state of the art Mistral Fine-tune and a continuation of OpenHermes 2 model trained on additional code datasets.\n\nSnorkel Mistral PairRM DPO\n\n**Type:** Chat\n\nA state of the art Mistral finetune by Snorkel AI.\n\nStripedHyena-Nous 7B\n\n**Type:** Chat\n\nThe first alternative model competitive with the best open-source 7B Transformers in short and long-context evaluations.\n\nLlama 3 70B Instruct\n\n**Type:** Chat\n\nLlama 3 is an auto-regressive language model that uses an optimized transformer architecture.\n\nLlama 3 8B Instruct\n\n**Type:** Chat\n\nLlama 3 is an auto-regressive language model that uses an optimized transformer architecture.\n\nMixtral 8x22B Instruct\n\n**Type:** Chat\n\nA pretrained generative Sparse Mixture of Experts tuned to be a helpful assistant.\n\nThe Vercel Together AI integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select Together AI from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Install the providers package\n10.  Connect your project using the code below:\n\n11.  Add the provider to your page using the code below:",
  "title": "Vercel Together AI Integration",
  "description": "Learn how to integrate Together AI with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/anyscale",
  "markdown": "# Vercel Anyscale Integration\n\n[Anyscale Endpoints](https://anyscale.com/endpoints) offers scalable computing solutions for handling complex, large-scale data processing tasks. It is particularly suited for distributed computing environments. The Vercel Anyscale integration enables you to leverage these capabilities in your applications, enhancing their scalability and computational efficiency.\n\nAnyscale is temporarily unavailable in the Vercel Marketplace. Existing integrations will continue to work, but new integrations cannot be created at this time.\n\nYou can use the Vercel and Anyscale integration to power a variety of AI applications, including:\n\n*   Distributed data processing: Use Anyscale for handling large-scale, distributed data processing tasks efficiently\n*   Machine learning workflows: Use Anyscale for training and deploying complex machine learning models that require high computational power\n*   Real-time analytics: Use Anyscale for real-time data analytics, ideal for applications needing quick data processing and insight extraction\n\nAnyscale models provide scalable solutions for complex computational tasks, emphasizing efficiency in distributed computing and large-scale data processing across various industries.\n\nCodeLlama-34b-Instruct\n\n**Type:** Code\n\nCode Llama is a collection of pretrained and fine-tuned generative text models ranging in scale from 7 billion to 70 billion parameters. This is the 34B parameter version, fine tuned for instructions. This model is designed for general code synthesis and understanding. Links to other models can be found in the index at the bottom.\n\nCodeLlama-70b-Instruct\n\n**Type:** Code\n\nCode Llama is a collection of pretrained and fine-tuned generative text models ranging in scale from 7 billion to 70 billion parameters. This is the 70B parameter version, fine tuned for instructions. This model is designed for general code synthesis and understanding. Links to other models can be found in the index at the bottom.\n\nLlama-2-13b-Chat\n\n**Type:** Chat\n\nMeta's Llama 2 13 billion paramater model\n\nLlama-2-70b-Chat\n\n**Type:** Chat\n\nMeta's Llama 2 70 billion paramater model\n\nLlama-2-7b-Chat\n\n**Type:** Chat\n\nMeta's Llama 2 7 billion paramater model\n\nMistral-7b-Instruct-v0.1\n\n**Type:** Chat\n\nThe Mistral-7B-Instruct-v0.1 Large Language Model (LLM) is a instruct fine-tuned version of the Mistral-7B-v0.1 generative text model using a variety of publicly available conversation datasets. This model supports function calling and JSON mode.\n\nMixtral-8x7B-Instruct-v0.1\n\n**Type:** Chat\n\nThe Mixtral-8x7B Large Language Model (LLM) is a pretrained generative Sparse Mixture of Experts.\n\nNeuralHermes-2.5-Mistral-7B\n\n**Type:** Chat\n\nThe mlabonne/NeuralHermes-2.5-Mistral-7B Large Language Model (LLM) is a instruct fine-tuned version of the Mistral-7B-Instruct-v0.1 generative text model using a variety of publicly available conversation datasets.\n\nzephyr-7b-beta\n\n**Type:** Chat\n\nZephyr-7B-β is the second model in the series, and is a fine-tuned version of mistralai/Mistral-7B-v0.1 that was trained on on a mix of publicly available, synthetic datasets using Direct Preference Optimization (DPO).\n\nThe Vercel Anyscale Endpoints integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select Anyscale Endpoints from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Install the providers package\n10.  Connect your project using the code below:\n    \n    ```\n    // app/api/chat/route.tsimport { OpenAIStream, StreamingTextResponse } from 'ai';import OpenAI from 'openai';const anyscale = new OpenAI({  apiKey: process.env.OPENAI_API_KEY || '',  baseURL: 'https://api.endpoints.anyscale.com/v1',});export async function POST(req: Request) {  // Extract the `messages` from the body of the request  const { messages } = await req.json();  // Request the OpenAI-compatible API for the response based on the prompt  const response = await anyscale.chat.completions.create({    model: 'meta-llama/Llama-2-70b-chat-hf',    stream: true,    messages: messages,  });  // Convert the response into a friendly text-stream  const stream = OpenAIStream(response);  // Respond with the stream  return new StreamingTextResponse(stream);}\n    ```\n    \n\n11.  Add the provider to your page using the code below:\n    \n    ```\n    // app/chat/page.tsx'use client';import { useChat } from 'ai/react';export default function Chat() {  const { messages, input, handleInputChange, handleSubmit } = useChat();  return (    <div>      {messages.map((m) => (        <div key={m.id}>          {m.role === 'user' ? 'User: ' : 'AI: '}          {m.content}        </div>      ))}      <form onSubmit={handleSubmit}>        <input          value={input}          placeholder=\"Say something...\"          onChange={handleInputChange}        />      </form>    </div>  );}\n    ```",
  "title": "Vercel Anyscale Integration",
  "description": "Learn how to integrate Anyscale with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/replicate",
  "markdown": "# Vercel Replicate Integration\n\n[Replicate](https://replicate.com/) provides a platform for accessing and deploying a wide range of open-source artificial intelligence models. These models span various AI applications such as image and video processing, natural language processing, and audio synthesis. With the Vercel Replicate integration, you can incorporate these AI capabilities into your applications, enabling advanced functionalities and enhancing user experiences.\n\nYou can use the Vercel and Replicate integration to power a variety of AI applications, including:\n\n*   Content generation: Use Replicate for generating text, images, and audio content in creative and marketing applications\n*   Image and video processing: Use Replicate in applications for image enhancement, style transfer, or object detection\n*   NLP and chat-bots: Use Replicate's language processing models in chat-bots and natural language interfaces\n\nReplicate models cover a broad spectrum of AI applications ranging from image and video processing to natural language processing and audio synthesis.\n\nIncredibly Fast Whisper\n\n**Type:** Audio\n\nwhisper-large-v3, incredibly fast, powered by Hugging Face Transformers\n\nbge-large-en-v1.5\n\n**Type:** Chat\n\nBAAI's bge-en-large-v1.5 for embedding text sequences\n\nBlip-2\n\n**Type:** Image\n\nA large language model that answers questions about images\n\nGFPGAN\n\n**Type:** Image\n\nPractical face restoration algorithm for old photos or AI-generated faces\n\nInsanely Fast Whisper\n\n**Type:** Audio\n\nwhisper-large-v3, insanely fast, powered by Hugging Face Transformers\n\nLlama-2-70b-Chat\n\n**Type:** Chat\n\nA 70 billion parameter language model from Meta, fine tuned for chat completions\n\nllama-3-70b-instruct\n\n**Type:** Chat\n\nA 70 billion parameter language model from Meta, fine tuned for chat completions\n\nllama-3-8b-instruct\n\n**Type:** Chat\n\nA 8 billion parameter language model from Meta, fine tuned for chat completions\n\nLLaVA v1.5: Large Language and Vision Assistant\n\n**Type:** Image\n\nVisual instruction tuning towards large language and vision models with GPT-4 level capabilities\n\nMixtral-8x7B-instruct-v0.1\n\n**Type:** Chat\n\nA pretrained generative Sparse Mixture of Experts tuned to be a helpful assistant.\n\nMusicGen\n\n**Type:** Audio\n\nGenerate music from a prompt or melody\n\nSDXL\n\n**Type:** Image\n\nA text-to-image generative AI model that creates beautiful images\n\nXTTS v2\n\n**Type:** Audio\n\nCoqui XTTS-v2: Multilingual Text To Speech Voice Cloning\n\nThe Vercel Replicate integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select Replicate from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Install the providers package\n10.  Connect your project using the code below:\n    \n    ```\n    // app/api/chat/route.tsimport { ReplicateStream, StreamingTextResponse } from 'ai';import Replicate from 'replicate';import { experimental_buildLlama2Prompt } from 'ai/prompts';const replicate = new Replicate({  auth: process.env.REPLICATE_API_KEY || '',});export const runtime = 'edge';export async function POST(req: Request) {  const { messages } = await req.json();  const response = await replicate.predictions.create({    stream: true,    version: '2c1608e18606fad2812020dc541930f2d0495ce32eee50074220b87300bc16e1',    input: {      prompt: experimental_buildLlama2Prompt(messages),    },  });  const stream = await ReplicateStream(response);  return new StreamingTextResponse(stream);}\n    ```\n    \n\n11.  Add the provider to your page using the code below:\n    \n    ```\n    // app/chat/page.tsx'use client';import { useChat } from 'ai/react';export default function Chat() {  const { messages, input, handleInputChange, handleSubmit } = useChat();  return (    <div>      {messages.map((m) => (        <div key={m.id}>          {m.role === 'user' ? 'User: ' : 'AI: '}          {m.content}        </div>      ))}      <form onSubmit={handleSubmit}>        <input          value={input}          placeholder=\"Say something...\"          onChange={handleInputChange}        />      </form>    </div>  );}\n    ```\n    \n\nYou can deploy a template to Vercel that uses a pre-trained model from Replicate:",
  "title": "Vercel Replicate Integration",
  "description": "Learn how to integrate Replicate with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/openai",
  "markdown": "# Vercel and OpenAI Integration\n\nIntegrate your Vercel project with OpenAI's powerful suite of models.\n\nVercel integrates with [OpenAI](https://platform.openai.com/overview) to enable developers to build fast, scalable, and secure [AI applications](https://vercel.com/ai).\n\nYou can integrate with [any OpenAI model](https://platform.openai.com/docs/models/overview) through its REST API or JavaScript SDK, including the following OpenAI models:\n\n*   GPT-3.5: Understand and generate natural language or code\n*   GPT-4: An advanced model for natural language processing\n*   DALL·E: Generate and edit images from natural language\n*   Whisper: Convert audio to text\n*   Embeddings: Convert term into vectors\n\nTo help you get started, we have built a [variety of AI templates](https://vercel.com/templates/ai) integrating OpenAI with Vercel.\n\nBefore you begin, ensure you have an [OpenAI account](https://platform.openai.com/signup). Once registered:\n\n1.  Log into your [OpenAI Dashboard](https://platform.openai.com/) and [view API keys](https://platform.openai.com/account/api-keys).\n    \n2.  Click on Create new secret key. Copy the generated API key securely.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1691631800%2Fdocs-assets%2Fstatic%2Fdocs%2Fopenai%2Fenv-vars.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Always keep your API keys confidential. Do not expose them in client-side code. Use [Vercel Environment Variables](https://vercel.com/docs/projects/environment-variables) for safe storage and do not commit these values to git.\n    \n3.  Finally, add the `OPENAI_API_KEY` environment variable in your project:\n    \n    ```\n    OPENAI_API_KEY='sk-...3Yu5'\n    ```\n    \n\nIntegrating OpenAI into your Vercel project is seamless with the [Vercel AI SDK](https://sdk.vercel.ai/docs).\n\nInstall the Vercel AI SDK in your project with your favorite package manager:\n\nYou can use the SDK to build AI applications with [React (Next.js)](https://sdk.vercel.ai/docs/guides/frameworks/nextjs-app), [Vue (Nuxt)](https://sdk.vercel.ai/docs/guides/frameworks/nuxt), [Svelte (SvelteKit)](https://sdk.vercel.ai/docs/getting-started#build-your-app), and [Solid (SolidStart)](https://sdk.vercel.ai/docs/guides/frameworks/solidjs).\n\nThe Vercel AI SDK also has experimental support for [OpenAI Functions](https://openai.com/blog/function-calling-and-other-api-updates).\n\nLearn more about using [OpenAI Functions with the AI SDK](https://sdk.vercel.ai/docs/guides/providers/openai-functions).\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Vercel and OpenAI Integration",
  "description": "Integrate your Vercel project with OpenAI's powerful suite of models.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/fal",
  "markdown": "# Vercel Fal Integration\n\n[Fal](https://fal.ai/) enables the development of real-time AI applications with a focus on rapid inference speeds, achieving response times under ~120ms. Specializing in diffusion models, Fal has no cold starts and a pay-for-what-you-use pricing model.\n\nYou can use the Vercel and Fal integration to power a variety of AI applications, including:\n\n*   Text-to-image applications: Use Fal to integrate real-time text-to-image generation in applications, enabling users to create complex visual content from textual descriptions instantly\n*   Real-time image processing: Use Fal for applications requiring instantaneous image analysis and modification, such as real-time filters, enhancements, or object recognition in streaming video\n*   Depth maps creation: Use Fal's AI models for generating depth maps from images, supporting applications in 3D modeling, augmented reality, or advanced photography editing, where understanding the spatial relationships in images is crucial\n\nFal provides a diverse range of AI models designed for high-performance tasks in image and text processing.\n\nStable Diffusion XL\n\n**Type:** Image\n\nRun SDXL at the speed of light\n\nCreative Upscaler\n\n**Type:** Image\n\nCreate creative upscaled images.\n\nStable Diffusion XL\n\n**Type:** Image\n\nRun SDXL at the speed of light\n\nThe Vercel Fal integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select Fal from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Install the providers package\n    \n    ```\n    pnpm i @fal-ai/serverless-client \n    ```\n    \n10.  Connect your project using the code below:\n    \n    ```\n    // app/api/fal/proxy/route.tsimport { route } from '@fal-ai/serverless-proxy/nextjs';export const { GET, POST } = route;\n    ```\n    \n\n11.  Add the provider to your page using the code below:\n    \n    ```\n    // app/sdxl/page.tsximport * as fal from '@fal-ai/serverless-client';import { useMemo, useState } from 'react';fal.config({  // see the route.ts for the proxy setup  proxyUrl: '/api/fal/proxy',});type Image = {  url: string;  file_name: string;  file_size: number;};type Result = {  images: Image[];};const DEFAULT_PROMPT =  'an astronaut riding a horse on mars, hd, dramatic lighting, detailed';function Page() {  const [prompt, setPrompt] = useState<string>(DEFAULT_PROMPT);  const [loading, setLoading] = useState(false);  const [error, setError] = useState<Error | null>(null);  const [result, setResult] = useState<Result | null>(null);  const image = useMemo(() => {    if (!result) {      return null;    }    return result.images[0];  }, [result]);  const reset = () => {    setLoading(false);    setError(null);    setResult(null);  };  const generateImage = async () => {    reset();    setLoading(true);    try {      const result: Result = await fal.subscribe('fal-ai/fast-sdxl', {        input: {          prompt,        },      });      setResult(result);    } catch (error: any) {      setError(error);    } finally {      setLoading(false);    }  };  return (    <main>      <div>        <label htmlFor=\"prompt\">Prompt</label>        <input          id=\"prompt\"          name=\"prompt\"          placeholder=\"Imagine...\"          value={prompt}          autoComplete=\"off\"          onChange={(e) => setPrompt(e.target.value)}          onBlur={(e) => setPrompt(e.target.value.trim())}        />      </div>      <button        onClick={(e) => {          e.preventDefault();          generateImage();        }}        disabled={loading}      >        {loading ? 'Generating...' : 'Generate Image'}      </button>      {error && <div>{error.message}</div>}      <div>        <div>          {image && (            // eslint-disable-next-line @next/next/no-img-element            <img src={image.url} alt=\"\" />          )}        </div>      </div>    </main>  );}export default Page;\n    ```",
  "title": "Vercel Fal Integration",
  "description": "Learn how to integrate Fal with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/contentful",
  "markdown": "# Vercel and Contentful Integration\n\n[Contentful](https://contentful.com/) is a headless CMS that allows you to separate the content management and presentation layers of your web application. This integration allows you to deploy your content from Contentful to Vercel.\n\nThis quickstart guide uses the [Vercel Contentful integration](https://vercel.com/integrations/contentful) to allow streamlined access between your Contentful content and Vercel deployment. When you use the template, you'll be automatically prompted to install the Integration during deployment.\n\nIf you already have a Vercel deployment and a Contentful account, you should [install the Contentful Integration](https://vercel.com/integrations/contentful) to connect your Space to your Vercel project. To finish, the important parts that you need to know from the QuickStart are:\n\n*   Getting your [Space ID](#retrieve-your-contentful-space-id) and [Content Management API Token](#create-a-content-management-api-token)\n*   [Importing your content model](#import-the-content-model)\n*   [Adding your Contentful Env Vars](#add-environment-variables) to your Vercel project\n\nTo help you get started, we built a [template](https://vercel.com/templates/next.js/nextjs-blog-preview-mode) using Next.js, Contentful, and Tailwind CSS.\n\nYou can either deploy the template above to Vercel with one click, or use the steps below to clone it to your machine and deploy it locally:\n\n1.  You can clone the repo using the following command:\n    \n    ```\n    pnpm create-next-app --example cms-contentful\n    ```\n    \n2.  Next, create a new account on [Contentful](https://contentful.com/) and make an empty \"space\". This is where your content lives. We also created a sample content model to help you get started quickly.\n    \n    If you have an existing account and space, you can use it with the rest of these steps.\n    \n3.  The Vercel integration uses your Contentful Space ID to communicate with Contentful. To find this, navigate to your Contentful dashboard and select Settings > API Keys. Click on Add API key and you will see your Space ID in the next screen.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcontentful%2Fapi-section.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n4.  You will also need to create a Content Management API token for Vercel to communicate back and forth with the Contentful API. You can get that by going to Settings > API Keys > Content management tokens.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcontentful%2Fcontent-management-tokens.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click on Generate personal token and a modal will pop up. Give your token a name and click on Generate.\n    \n    Avoid sharing this token because it allows both read and write access to your Contentful space. Once the token is generated copy the key and save remotely as it will not be accessible later on. If lost, a new one must be created.\n    \n5.  Use your Space ID and Content Management Token in the command below to import the pre-made content model into your space using our setup Node.js script. You can do that by running the following command:\n    \n    ```\n    npx cross-env CONTENTFUL_SPACE_ID=YOUR_SPACE_ID CONTENTFUL_MANAGEMENT_TOKEN=XXX pnpm run setup\n    ```\n    \n\nNow that you've created your space in Contentful, add some content!\n\n1.  You'll notice the new author and post entries for the example we've provided. Publish each entry to make this fully live.\n    \n2.  Now, let's save the Space ID and token from earlier to add as Environment Variables for running locally. Create a new `.env.local` file in your application:\n    \n    ```\n    CONTENTFUL_SPACE_ID='your-space-id'\n    CONTENTFUL_ACCESS_TOKEN='your-content-api-token'\n    ```\n    \n3.  You can now start your application with the following comment:\n    \n    ```\n    pnpm install && pnpm run dev\n    ```\n    \n    Your project should now be running on `http://localhost:3000`.\n    \n\nNext.js is designed to integrate with any data source of your choice, including Content Management Systems. Contentful provides a helpful GraphQL API, which you can both query and mutate data from. This allows you to decouple your content from your frontend. For example:\n\n```\nasync function fetchGraphQL(query) {\n  return fetch(\n    `https://graphql.contentful.com/content/v1/repos/${process.env.CONTENTFUL_SPACE_ID}`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${process.env.CONTENTFUL_ACCESS_TOKEN}`,\n      },\n      body: JSON.stringify({ query }),\n    },\n  ).then((response) => response.json());\n}\n```\n\nThis code allows you to fetch data on the server from your Contentful instance. Each space inside Contentful has its own ID (e.g. `CONTENTFUL_SPACE_ID`) which you can add as an Environment Variable inside your Next.js application.\n\nThis allows you to use secure values you don't want to commit to git, which are only evaluated on the server (e.g. `CONTENTFUL_ACCESS_TOKEN`).\n\nNow that you have your application wired up to Contentful, you can deploy it to Vercel to get your site online. You can either use the Vercel CLI or the Git integrations to deploy your code. Let’s use the Git integration.\n\n1.  Push your code to your git repository (e.g. GitHub, GitLab, or BitBucket).\n    \n    ```\n    git init\n    git add .\n    git commit -m \"Initial commit\"\n    git remote add origin\n    git push -u origin master\n    ```\n    \n2.  Log in to your Vercel account (or create one) and import your project into Vercel using the [import flow](https://vercel.com/new).\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcontentful%2Fimport-to-vercel.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcontentful%2Fimport-vercel-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Vercel will detect that you are using Next.js and will enable the correct settings for your deployment.\n    \n3.  Add the `CONTENTFUL_SPACE_ID` and `CONTENTFUL_ACCESS_TOKEN` Environment Variables from your `.env.local` file by copying and pasting it under the Environment Variables section.\n    \n    ```\n    CONTENTFUL_SPACE_ID='your-space-id'\n    CONTENTFUL_ACCESS_TOKEN='your-content-api-token'\n    ```\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcontentful%2Fadd-env-vars.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcontentful%2Fadd-env-vars-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click \"Deploy\" and your application will be live on Vercel!\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcontentful%2Fdeployed.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcontentful%2Fdeployed-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)",
  "title": "Vercel and Contentful Integration",
  "description": "Integrate Vercel with Contentful to deploy your content.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/ai/modal",
  "markdown": "# Vercel Modal Integration\n\n[Modal](https://modal.com/) specializes in high-performance cloud computing for developers, focusing on deploying generative AI models and handling large-scale data workloads efficiently.\n\nYou can use the Vercel and Modal integration to power a variety of AI applications, including:\n\n*   Generative AI models: Quickly deploy AI models for image, text, or music generation, utilizing Modal's efficient scaling capabilities\n*   Batch processing: Execute large-scale batch jobs seamlessly, ideal for data analysis, processing, and transformation tasks\n*   Voice generation: Create realistic, human-like voices for your applications, using Modal's advanced text-to-speech capabilities\n\nModal offers models that can be used for a variety of tasks, including:\n\nInsanely Fast Whisper\n\n**Type:** Audio\n\nCustomization of OpenAI's whisper-large-v3, insanely fast, powered by Hugging Face Transformers\n\nStable Diffusion XL\n\n**Type:** Image\n\nA text-to-image generative AI model that creates beautiful images\n\nThe Vercel Modal integration can be accessed through the AI tab on your [Vercel dashboard](https://vercel.com/dashboard).\n\nTo follow this guide, you'll need the following:\n\n*   An existing [Vercel project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\n1.  Navigate to the AI tab in your [Vercel dashboard](https://vercel.com/dashboard)\n2.  Select Modal from the list of providers, and press Add\n3.  Review the provider information, and press Add Provider\n4.  You can now select which projects the provider will have access to. You can choose from All Projects or Specific Projects\n    *   If you select Specific Projects, you'll be prompted to select the projects you want to connect to the provider. The list will display projects associated with your scoped team\n    *   Multiple projects can be selected during this step\n5.  Select the Connect to Project button\n6.  You'll be redirected to the provider's website to complete the connection process\n7.  Once the connection is complete, you'll be redirected back to the Vercel dashboard, and the provider integration dashboard page. From here you can manage your provider settings, view usage, and more\n8.  Pull the environment variables into your project using [Vercel CLI](https://vercel.com/docs/cli/env)\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n9.  Connect your project using the code below:\n    \n    ```\n    // app/api/route.tsexport async function POST(request: Request) {  const jsonBody = await request?.json();  const body = JSON.stringify({    prompt: jsonBody.prompt || '',    height: 768,    width: 768,    num_outputs: 1,    negative_prompt: 'deformed, ugly',  });  const response = await fetch(    'https://modal-labs--instant-stable-diffusion-xl.modal.run/v1/inference',    {      method: 'POST',      headers: {        Authorization: `Token ${process.env.MODAL_TOKEN_ID}:${process.env.MODAL_TOKEN_SECRET}`,        'Content-Type': 'application/json',      },      body,    },  );  if (response.status !== 201) {    const message = await response.text();    return Response.json({ message }, { status: 500 });  }  const imageBuffer = await response.arrayBuffer();  return new Response(Buffer.from(imageBuffer), {    headers: { 'Content-Type': 'image/png' },  });}\n    ```\n    \n\n11.  Add the provider to your page using the code below:\n    \n    ```\n    // app/page.tsx'use client';import { useState } from 'react';export default function Page() {  const [prompt, setPrompt] = useState('A cute cartoon fox with a top-hat');  const [imageUrl, setImageUrl] = useState<string | null>(null);  const generateImage = async (e: React.FormEvent<HTMLFormElement>) => {    e.preventDefault();    // Making a POST request to Modal's instant Stable Diffusion endpoint    try {      const response = await fetch('/api', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          prompt,        }),      });      if (response.status === 200) {        const imageBuffer = await response.arrayBuffer();        const blob = new Blob([imageBuffer], { type: 'image/png' });        const imageUrl = URL.createObjectURL(blob);        setImageUrl(imageUrl);      } else {        const message = await response.text();        setImageUrl(null);        console.error(`Error: ${message}`);      }    } catch (error) {      console.error('Failed to fetch image:', error);    }  };  return (    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">      <form onSubmit={generateImage} className=\"flex gap-4 w-full\">        <input          type=\"text\"          placeholder=\"Enter a prompt\"          value={prompt}          onChange={(e) => setPrompt(e.target.value)}          className=\"input w-full\"        />        <button type=\"submit\" className=\"btn border border-black bg-white\">          Generate Image        </button>      </form>      {imageUrl && (        <img          src={imageUrl}          alt=\"Generated\"          className=\"mt-4 max-w-full h-auto\"        />      )}    </main>  );}\n    ```",
  "title": "Vercel Modal Integration",
  "description": "Learn how to integrate Modal with Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/sitecore",
  "markdown": "# Vercel and Sitecore XM Cloud Integration\n\n[Sitecore XM Cloud](https://www.sitecore.com/products/xm-cloud) is a CMS platform designed for both developers and marketers. It utilizes a headless architecture, which means content is managed independently from its presentation layer. This separation allows for content delivery across various channels and platforms.\n\nThis guide outlines the steps to integrate a headless JavaScript application on Vercel with Sitecore XM Cloud. In this guide, you will learn how to set up a new XM Cloud project in the XM Cloud Deploy app. Then, you will create a standalone Next.js JSS application that can connect to a new or an existing XM Cloud website. By the end, you'll understand how to create a new XM Cloud website and the steps necessary for connecting a Next.js application and deploying to Vercel.\n\nThe key parts you will learn from this guide are:\n\n1.  Configuring the GraphQL endpoint for content retrieval from Sitecore XM Cloud\n2.  Utilizing the Sitecore Next.js for JSS library for content integration\n3.  Setting up environment variables in Vercel for Sitecore API key, GraphQL endpoint, and JSS app name\n\n1.  Log in to your XM Cloud Deploy app account.\n    \n2.  Navigate to the Projects page and select Create project.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n3.  In the Create new project dialog, select Start from the XM Cloud starter foundation. Proceed by selecting Next.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-modal.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n4.  Select the XM Cloud Foundation starter template and select Next.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-modal-next.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n5.  Provide a name for your project in the Project name field and select Next.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-modal-name.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n6.  Choose your source control provider and select Next.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-modal-provider.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n7.  If you haven't already set up a connection, create a new source control connection and follow the instructions provided by your source control provider.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-modal-connection.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n8.  In the Repository name field, provide a unique name for your new repository and select Next.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-modal-repo.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n9.  *   Specify the environment name in the Environment name field\n    *   Determine if the environment is a production environment using the Production environment drop-down menu\n    *   Decide if you want automatic deployments upon commits to the linked repository branch using the Trigger deployment on commit to branch drop-down menu\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-modal-env.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n10.  Select Create and deploy.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-deploy.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n11.  *   When the deployment finishes, select Go to XM Cloud\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-project-click.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    *   Under Sites, select Create Website\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-website.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    *   Select Basic Site\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-website-basic.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    *   Enter a name for your site in the Site name field\n    *   Select Create website\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-website-name.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n12.  *   Select the Open in Pages option on the newly created website\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-website-open.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    *   Select Publish > Publish item with all sub-items\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-create-website-publish.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n\nTo help get you started, we built a [template](https://vercel.com/templates/next.js/sitecore-starter) using Sitecore JSS for Next.js with JSS SXA headless components. This template includes only the frontend Next.js application that connects to a new or existing hosted XM Cloud website. Note that it omits the Docker configuration for running XM Cloud locally. For details on local XM Cloud configuration, refer to Sitecore's [documentation](https://doc.sitecore.com/xmc/en/developers/xm-cloud/walkthrough--setting-up-your-full-stack-xm-cloud-local-development-environment.html).\n\nSitecore also offers a [JSS app initializer](https://doc.sitecore.com/xmc/en/developers/xm-cloud/the-jss-app-initializer.html) and templates for other popular JavaScript frameworks. You can also use the JSS application that's part of the XM Cloud starter foundation mentioned in the previous section.\n\nYou can either deploy the template above to Vercel with one-click, or use the steps below to clone it to your machine and deploy it locally.\n\n1.  You can clone the repo using the following command:\n    \n    ```\n    npx create-next-app --example cms-sitecore-xmcloud\n    ```\n    \n2.  Next, navigate to your newly created XM Cloud site under Sites and select Settings.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsitecore-dashboard.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Under the Developer Settings tab select Generate API Key.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fdeveloper-settings.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Save the `SITECORE_API_KEY`, `JSS_APP_NAME`, and `GRAPH_QL_ENDPOINT` values – you'll need it for the next step.\n    \n3.  Next, add the `JSS_APP_NAME`, `GRAPH_QL_ENDPOINT` , `SITECORE_API_KEY`, and `SITECORE_API_HOST` values as environment variables for running locally. Create a new `.env.local` file in your application, copy the contents of `.env.example` and set the 4 environment variables.\n    \n    ```\n    JSS_APP_NAME='your-jss-app-name'\n    GRAPH_QL_ENDPOINT='your-graphql-endpoint'\n    SITECORE_API_KEY='your-sitecore-api-key'\n    SITECORE_API_HOST='host-from-endpoint'\n    ```\n    \n4.  You can now start your application with the following command:\n    \n    ```\n    npm install && npm run build && npm run dev\n    ```\n    \n\nSitecore XM Cloud offers a GraphQL endpoint for its sites, serving as the primary mechanism for both retrieving and updating content. The Sitecore JSS library for Next.js provides the necessary components and tools for rendering and editing Sitecore data.\n\nThrough this integration, content editors can log into XM Cloud to not only modify content but also adjust the composition of pages.\n\nThe frontend application hosted on Vercel establishes a connection to Sitecore XM Cloud using the `GRAPH_QL_ENDPOINT` to determine the data source and the `SITECORE_API_KEY` to ensure secure access to the content.\n\nWith these components in place, developers can seamlessly integrate content from Sitecore XM Cloud into a Next.js application on Vercel.\n\nVercel Deployment Protection is enabled for new projects by [default](https://vercel.com/changelog/deployment-protection-is-now-enabled-by-default-for-new-projects) which limits access to preview and production URLs. This may impact Sitecore Experience Editor and Pages functionality. Refer to Deployment Protection [documentation](https://vercel.com/docs/security/deployment-protection) and Sitecore XM Cloud [documentation](https://doc.sitecore.com/xmc/en/developers/xm-cloud/use-vercel-s-deployment-protection-feature-with-jss-apps.html) for more details and integration steps.\n\n1.  Ensure your integrated application code is pushed to your git repository.\n    \n    ```\n    git init\n    git add .\n    git commit -m \"Initial commit\"\n    git remote add origin [repository url]\n    git push -u origin main\n    ```\n    \n2.  Log in to your Vercel account (or create one) and import your project into Vercel using the [import flow](https://vercel.com/new).\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fimport-vercel-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fimport-vercel-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n3.  Add the `FETCH_WITH`, `JSS_APP_NAME`, `GRAPH_QL_ENDPOINT` , `SITECORE_API_KEY`, and `SITECORE_API_HOST` environment variables to the Environment Variables section.\n    \n    ```\n    JSS_APP_NAME='your-jss-app-name'\n    GRAPH_QL_ENDPOINT='your-graphql-endpoint'\n    SITECORE_API_KEY='your-sitecore-api-key'\n    SITECORE_API_HOST='host-from-endpoint'\n    FETCH_WITH='GraphQL'\n    ```\n    \n    Select \"Deploy\" and your application will be live on Vercel!\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsuccess-vercel-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fsitecore%2Fsuccess-vercel-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)",
  "title": "Vercel and Sitecore XM Cloud Integration",
  "description": "Integrate Vercel with Sitecore XM Cloud to deploy your content.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/storage/edge-config/integrations/launchdarkly-edge-config",
  "markdown": "# Using Edge Config with LaunchDarkly\n\n[LaunchDarkly](https://docs.launchdarkly.com/home) allows you to enable and disable feature flags dynamically, decoupling feature rollouts from deployments.\n\nThe LaunchDarkly Edge Config integration enables you to evaluate flags at the edge without making network calls to LaunchDarkly.\n\nThe LaunchDarkly Edge Config integration is only available to **Enterprise** LaunchDarkly customers. However, you **do not** need to have a Vercel [Enterprise](https://vercel.com/docs/accounts/plans/enterprise) account.\n\nBefore using this integration, you should have:\n\n1.  The latest version of Vercel CLI. To check your version, use `vercel --version`. To [install](https://vercel.com/docs/cli#installing-vercel-cli) or update Vercel CLI, use:\n    \n2.  A project. If you don't have one, you can run the following terminal commands to create a Next project:\n    \n    ```\n    npx create-next-app@latest\n    ```\n    \n3.  A Vercel project. If you don't have one, see [Creating a Project](https://vercel.com/docs/projects/overview#creating-a-project)\n    \n4.  An Edge Config. If you don't have one, follow [the Edge Config quickstart](https://vercel.com/docs/storage/edge-config/get-started)\n    \n5.  The Edge Config SDK:\n    \n    ```\n    pnpm i @vercel/edge-config\n    ```\n    \n\nThe following steps will walk you through:\n\n*   Configuring Vercel's LaunchDarkly Edge Config integration\n*   Using it to check your feature flags from your frontend code\n\n1.  Visit [the LaunchDarkly page in the Integration Marketplace](https://vercel.com/integrations/launchdarkly) and select the Add Integration button. From the Integration dialog:\n    \n    1.  Select a Vercel team and project to connect the integration to\n    2.  Log into LaunchDarkly\n    3.  Select the Authorize button to allow the integration to access your LaunchDarkly account data\n    4.  Name the integration, and select an existing Edge Config or create a new one\n2.  To use the integration, you'll need your client-side ID from LaunchDarkly. Here's how to add it to your project:\n    \n    1.  [Go to the settings page of your LaunchDarkly dashboard](https://app.launchdarkly.com/settings/projects).\n    2.  Select the LaunchDarkly project your integration is connected to\n    3.  On the next page, copy the Client-side ID under the environment your integration is connected to (for example, Test or Production)\n    \n    Now, you must add the value to your project as an Environment Variable:\n    \n    1.  Navigate to [your Vercel dashboard](https://vercel.com/dashboard) and select the project you want to use LaunchDarkly with\n    2.  Under the Settings tab, navigate to Environment Variables, and create an `LD_CLIENT_SIDE_ID` variable with the value of your client-side ID\n    \n    [See our Environment Variables docs to learn more](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable).\n    \n3.  Open your project's code on your local machine and do the following:\n    \n    1.  Install LaunchDarkly's Vercel Server SDK:\n        \n        ```\n        pnpm i @launchdarkly/vercel-server-sdk\n        ```\n        \n    2.  Use [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli) to pull your Vercel project's environment variables:\n        \n        ```\n        vercel env pull .env.development.local\n        ```\n        \n    3.  Finally, create a `middleware.ts` file at the root of your project. This file will configure Edge Middleware that redirects your site visitors from `/homepage` to `/new-homepage` based on a feature flag fetched from LaunchDarkly:\n        \n        ```\n        import { init } from '@launchdarkly/vercel-server-sdk';\n        import { createClient } from '@vercel/edge-config';\n         \n        const edgeConfigClient = createClient(process.env.EDGE_CONFIG!);\n        const launchDarklyClient = init('YOUR CLIENT-SIDE ID', edgeConfigClient);\n         \n        export const config = {\n          // Only run the middleware on the dashboard route\n          matcher: '/homepage',\n        };\n         \n        export default function middleware(request: Request): Response {\n          await launchDarklyClient.initFromServerIfNeeded();\n          const launchDarklyContext = { kind: 'org', key: 'my-org-key' };\n          const showExperimentalHomepage = await launchDarklyClient.variation(\n            'experimental-homepage',\n            launchDarklyContext,\n            true,\n          );\n         \n          if (showExperimentalHomepage) {\n            const url = new URL(request.url);\n            url.pathname = '/new-homepage';\n            return Response.redirect(url);\n          }\n        }\n        ```",
  "title": "Using Edge Config with LaunchDarkly",
  "description": "Learn how to use Edge Config with Vercel's LaunchDarkly integration.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/shopify",
  "markdown": "# Vercel and Shopify Integration\n\n[Shopify](https://www.shopify.com/) is an ecommerce platform that allows you to build and manage online storefronts. Shopify does offer themes, but this integration guide will explain how to deploy your own, highly-performant, custom headless storefront using Next.js on Vercel's Frontend Cloud.\n\nThis guide uses the [Next.js Commerce template](https://vercel.com/templates/next.js/nextjs-commerce) to connect your Shopify store to a Vercel deployment. When you use this template, you'll be automatically prompted to connect your Shopify storefront during deployment.\n\nTo finish, the important parts that you need to know are:\n\n*   [Configure Shopify for use as a headless CMS](#configure-shopify)\n*   [Deploy your headless storefront on Vercel](#deploy-to-vercel)\n*   [Configure environment variables](#configure-environment-variables)\n\nEven if you are not using Next.js Commerce, you can still use this guide as a roadmap to create your own headless Shopify theme.\n\nTo help you get started, we built a [template](https://vercel.com/templates/nextjs/nextjs-commerce) using Next.js, Shopify, and Tailwind CSS.\n\nYou can either deploy the template above to Vercel or use the steps below to clone it to your machine and deploy it locally.\n\n1.  If you have an existing Shopify account and storefront, you can use it with the rest of these steps.\n    \n    If you do not have an existing Shopify account and storefront, you'll need to [create one](https://www.shopify.com/signup).\n    \n    Next.js Commerce will not work with a Shopify Starter plan as it does not allow installation of custom themes, which is required to run as a headless storefront.\n    \n2.  To use Next.js Commerce as your headless Shopify theme, you need to install the [Shopify Headless theme](https://github.com/instantcommerce/shopify-headless-theme). This enables a seamless flow between your headless site on Vercel and your Shopify hosted checkout, order details, links in emails, and more.\n    \n    Download [Shopify Headless Theme](https://github.com/instantcommerce/shopify-headless-theme).\n    \n    ![Download the Shopify Headless theme](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-theme-1.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/themes`, click `Add theme`, and then `Upload zip file`.\n    \n    ![Upload the Shopify Headless theme to Shopify](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-theme-2.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Select the downloaded zip file from above, and click the green `Upload file` button.\n    \n    ![Select downloaded Shopify Headless theme and upload file](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-theme-3.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click `Customize`.\n    \n    ![Customize the Shopify Headless theme](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-theme-4.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click `Theme settings` (the paintbrush icon), expand the `STOREFRONT` section, enter your headless store domain, click the gray `Publish` button.\n    \n    ![Set the headless domain in theme settings](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-theme-5.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Confirm the theme change by clicking the green `Save and publish` button.\n    \n    ![Confirm save and publish](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-theme-6.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    The headless theme should now be your current active theme.\n    \n    ![Shopify Headless theme is now the current and active theme](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-theme-7.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n3.  Shopify provides a [Storefront API](https://shopify.dev/docs/api/storefront) which allows you to fetch products, collections, pages, and more for your headless store. By installing the [Headless app](https://apps.shopify.com/headless), you can create an access token that can be used to authenticate requests from your Vercel deployment.\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/settings/apps` and click the green `Shopify App Store` button.\n    \n    ![Shopify App Store](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-app-1.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Search for `Headless` and click on the `Headless` app.\n    \n    ![Search and find Headless app](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-app-2.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click the black `Add app` button.\n    \n    ![Click add app on Headless app](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-app-3.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click the green `Add sales channel` button.\n    \n    ![Click add sales channel button](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-app-4.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click the green `Create storefront` button.\n    \n    ![Click create storefront button](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-app-5.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Copy the public access token as it will be used when we [configure environment variables](#configure-environment-variables).\n    \n    ![Copy the public access token value](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Finstall-headless-app-6.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    If you need to reference the public access token again, you can navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/headless_storefronts`.\n    \n4.  Even though you're creating a headless store, there are still a few aspects Shopify will control.\n    \n    *   Checkout\n    *   Emails\n    *   Order status\n    *   Order history\n    *   Favicon (for any Shopify controlled pages)\n    \n    You can use Shopify's admin to customize these pages to match your brand and design.\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/settings/checkout` and click the green `Customize` button.\n    \n    ![Customize checkout](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fbranding-1.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click `Branding` (the paintbrush icon) and customize your brand.\n    \n    There are three steps / pages to the checkout flow. Use the dropdown to change pages and adjust branding as needed on each page. Click `Save` when you are done.\n    \n    ![Customize checkout branding](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fbranding-2.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/settings/branding` and customize settings to match your brand.\n    \n    ![Customize order status and history branding](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fbranding-3.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/settings/email_settings` and customize settings to match your brand.\n    \n    ![Customize email branding](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fbranding-4.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/themes` and click the green `Customize` button.\n    \n    ![Customize favicon](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fbranding-5.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Click `Theme settings` (the paintbrush icon), expand the `FAVICON` section, upload favicon, then click the `Save` button.\n    \n    ![Save favicon customizations](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fbranding-6.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n5.  Utilizing [Shopify's webhooks](https://shopify.dev/docs/apps/webhooks), and listening for select [Shopify webhook event topics](https://shopify.dev/docs/api/admin-rest/2022-04/resources/webhook#event-topics), you can use Next'js [on-demand revalidation](https://vercel.com/docs/incremental-static-regeneration) to keep data fetches indefinitely cached until data in the Shopify store changes.\n    \n    Next.js Commerce is pre-configured to listen for the following Shopify webhook events and automatically revalidate fetches.\n    \n    *   `collections/create`\n    *   `collections/delete`\n    *   `collections/update`\n    *   `products/create`\n    *   `products/delete`\n    *   `products/update` (this includes when variants are added, updated, and removed as well as when products are purchased so inventory and out of stocks can be updated)\n    \n    Create your own secret or [generate a random UUID](https://www.uuidgenerator.net/guid).\n    \n    This secret value will be used when we [configure environment variables](#configure-environment-variables).\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/settings/notifications` and add webhooks for all six event topics listed above.\n    \n    You can add more sets for other preview urls, environments, or local development. Append `?secret=[your-secret]` to each url, where `[your-secret]` is the secret you created above.\n    \n    ![Shopify storefront webhooks](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fwebhooks-1.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    ![Add a Shopify storefront webhook](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fwebhooks-2.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    [ngrok](https://ngrok.com/) is the easiest way to test webhooks while developing locally.\n    \n    *   [Install and configure ngrok](https://ngrok.com/download) (you will need to create an account).\n    *   Run your app locally, `npm run dev`.\n    *   In a separate terminal session, run `ngrok http 3000`.\n    *   Use the url generated by ngrok and add or update your webhook urls in Shopify.\n    \n    ![ngrok information](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fwebhooks-3.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    ![Edit Shopify storefront webhook](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fwebhooks-4.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    You can now make changes to your store and your local app should receive updates. You can also use the `Send test notification` button to trigger a generic webhook test.\n    \n    ![Send a test notification from a Shopify storefront webhook](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fwebhooks-5.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n6.  Next.js Commerce is fully powered by Shopify in every way. All products, collections, pages header and footer menus, and SEO are controlled by Shopify.\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/products` to mange your products.\n    \n    *   Only `Active` products are shown. `Draft` products will not be shown until they are marked as `Active`.\n    *   `Active` products can still be hidden and not seen by navigating the site, by adding a `nextjs-frontend-hidden` tag on the product. This tag will also tell search engines to not index or crawl the product, but the product will still be directly accessible by url. This feature allows \"secret\" products to only be accessed by people you share the url with.\n    *   Product options and option combinations are driven from Shopify options and variants. When selecting options on the product detail page, other option and variant combinations will be visually validated and verified for availability, like Amazon does.\n    *   Products that are `Active` but no quantity remaining will still be displayed on the site, but will be marked as \"out of stock\". The ability to add the product to the cart is disabled.\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/collections` to manage your collections.\n    \n    All available collections will show on the search page as filters on the left, with one exception.\n    \n    Any collection names that start with the word `hidden` will not show up on the headless front end. Next.js Commerce comes pre-configured to look for two hidden collections. Collections were chosen for this over tags so that order of products could be controlled (collections allow for manual ordering).\n    \n    Create the following collections:\n    \n    *   `Hidden: Homepage Featured Items` — Products in this collection are displayed in the three featured blocks on the homepage.\n    *   `Hidden: Homepage Carousel` — Products in this collection are displayed in the auto-scrolling carousel section on the homepage.\n    \n    ![Shopify collections](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fcollections-1.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    ![Shopify collection details](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fcollections-2.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Navigate to `https://[your-shopify-store-subdomain].myshopify.com/admin/pages` to manage your pages.\n    \n    Next.js Commerce contains a dynamic `[page]` route. It will use the value to look for a corresponding page in Shopify.\n    \n    *   If a page is found, it will display its rich content using [Tailwind's typography plugin](https://tailwindcss.com/docs/typography-plugin) and `prose`.\n    *   If a page is not found, a `404` page is displayed.\n    \n    ![Shopify pages](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fpages-2.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    ![Shopify page details](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fpages-1.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    `https://[your-shopify-store-subdomain].myshopify.com/admin/menus`\n    \n    Next.js Commerce's header and footer navigation is pre-configured to be controlled by Shopify navigation menus. They can be to collections, pages, external links, and more, giving you full control of managing what displays.\n    \n    Create the following navigation menus:\n    \n    *   `Next.js Frontend Header Menu` — Menu items to be shown in the headless frontend header.\n    *   `Next.js Frontend Footer Menu` — Menu items to be shown in the headless frontend footer.\n    \n    ![Shopify navigation menus](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fnavigation-menus-1.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    ![Shopify navigation menu details](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fnavigation-menus-2.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Shopify's products, collections, pages, etc. allow you to create custom SEO titles and descriptions. Next.js Commerce is pre-configured to display these custom values, but also comes with sensible fallbacks if they are not provided.\n    \n    ![Shopify SEO](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fshopify%2Fseo.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n\nNow that your Shopify store is configured, you can deploy your code to Vercel.\n\n1.  You can clone the repo using the following command:\n    \n    ```\n    pnpm create next-app --example https://github.com/vercel/commerce\n    ```\n    \n2.  Publish your code to a Git provider like GitHub.\n    \n    ```\n    git init\n    git add .\n    git commit -m \"Initial commit\"\n    git remote add origin https://github.com/your-account/your-repo\n    git push -u origin main\n    ```\n    \n3.  Import the repository into a [new Vercel project](https://vercel.com/new).\n    \n    Vercel will automatically detect you are using Next.js and configure the optimal build settings.\n    \n4.  Create [Vercel Environment Variables](https://vercel.com/docs/projects/environment-variables) with the following names and values.\n    \n    *   `COMPANY_NAME` _(optional)_ — Displayed in the footer next to the copyright in the event the company is different from the site name, for example `Acme, Inc.`\n    *   `SHOPIFY_STORE_DOMAIN` — Used to connect to your Shopify storefront, for example `[your-shopify-store-subdomain].myshopify.com`\n    *   `SHOPIFY_STOREFRONT_ACCESS_TOKEN` — Used to secure API requests between Shopify and your headless site, which was created when you [installed the Shopify Headless app](#install-the-shopify-headless-app)\n    *   `SHOPIFY_REVALIDATION_SECRET` — Used to secure data revalidation requests between Shopify and your headless site, which was created when you [created a secret for secure revalidation](#create-a-secret-for-secure-revalidation)\n    *   `SITE_NAME` — Displayed in the header and footer navigation next to the logo, for example `Acme Store`\n    *   `TWITTER_CREATOR` — Used in Twitter OG metadata, for example `@nextjs`\n    *   `TWITTER_SITE` — Used in Twitter OG metadata, for example `https://nextjs.org`\n    \n    You can [use the Vercel CLI to setup your local development environment variables](https://vercel.com/docs/projects/environment-variables#development-environment-variables) to use these values.",
  "title": "Vercel and Shopify Integration",
  "description": "Integrate Vercel with Shopify to deploy your headless storefront.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/storage/edge-config/integrations/hypertune-edge-config",
  "markdown": "# Using Edge Config with Hypertune\n\nHypertune is a feature flag, A/B testing and app configuration platform with full type-safety and Git version control.\n\nThe Hypertune Edge Config integration enables you to access your feature flags and run A/B tests at ultra low latency at the edge.\n\nBefore using this integration, you should have:\n\n1.  A Hypertune project. If you don't have one, follow the [Hypertune getting started guide](https://docs.hypertune.com/getting-started/vercel-quickstart#integrate-with-an-existing-project)\n    \n2.  The latest version of Vercel CLI. To check your version, use `vercel --version`. To [install](https://vercel.com/docs/cli#installing-vercel-cli) or update Vercel CLI, use:\n    \n3.  A project. If you don't have one, you can run the following terminal commands to create a Next project:\n    \n    ```\n    npx create-next-app@latest\n    ```\n    \n4.  A Vercel project. If you don't have one, see [Creating a Project](https://vercel.com/docs/projects/overview#creating-a-project)\n    \n5.  An Edge Config. If you don't have one, follow [the Edge Config quickstart](https://vercel.com/docs/storage/edge-config/get-started)\n    \n6.  The Edge Config SDK:\n    \n    ```\n    pnpm i @vercel/edge-config\n    ```\n    \n\nThe following steps will walk you through:\n\n*   Configuring Vercel's Hypertune Edge Config integration\n*   Using it to check your feature flags from your frontend code\n\n1.  Visit [the Hypertune page in the Integration Marketplace](https://vercel.com/integrations/hypertune) and select the Add Integration button. Then:\n    \n    1.  Select a Vercel team and project\n    2.  Continue and log into Hypertune\n    3.  Connect your Hypertune project to an existing or new Edge Config store. Save the Hypertune Token, Connection String and Item Key for later\n    4.  Go to [your Vercel dashboard](https://vercel.com/dashboard) and select the project you want to use the Hypertune integration with. Go to Settings > Environment Variables and add the following:\n        *   `NEXT_PUBLIC_HYPERTUNE_TOKEN`, set to the Hypertune Token\n        *   `EDGE_CONFIG`, set to the Connection String\n        *   `EDGE_CONFIG_HYPERTUNE_ITEM_KEY`, set to the Item Key\n2.  First, install the Edge Config package:\n    \n    ```\n    pnpm i @vercel/edge-config\n    ```\n    \n    Then, pull your environment variables:\n    \n    Now, create a `hypertune.ts` file that initializes the Hypertune SDK.\n    \n    The following example passes an Edge Config client, your Hypertune Token, and your Edge Config Item Key to the Hypertune SDK:\n    \n    ```\n    import { initializeHypertune } from '../generated/generated';\n    import { createClient } from '@vercel/edge-config';\n     \n    const edgeConfigClient = createClient(process.env.EDGE_CONFIG!);\n     \n    const hypertune = initializeHypertune(\n      {},\n      {\n        token: process.env.NEXT_PUBLIC_HYPERTUNE_TOKEN,\n        vercelEdgeConfigClient: edgeConfigClient,\n        vercelEdgeConfigItemKey: process.env.EDGE_CONFIG_HYPERTUNE_ITEM_KEY,\n      },\n    );\n     \n    export default hypertune;\n    ```\n    \n    Finally, you can use the `hypertune` object you exported in the file above to check for feature flags in your Edge Middleware:\n    \n    ```\n    import { NextFetchEvent, NextRequest } from 'next/server';\n    import hypertune from './lib/hypertune';\n     \n    export const config = {\n      matcher: '/',\n    };\n     \n    export async function middleware(\n      request: NextRequest,\n      context: NextFetchEvent,\n    ) {\n      await hypertune.initFromServerIfNeeded();\n      const rootNode = hypertune.root({\n        context: {\n          user: { id: 'test', name: 'Test', email: 'test@test.com' },\n        },\n      });\n      const exampleFlag = rootNode.exampleFlag().get(/* fallback */ false);\n      console.log('Middleware feature flag: ', exampleFlag);\n    }\n    ```",
  "title": "Using Edge Config with Hypertune",
  "description": "Learn how to use Edge Config with Vercel's Hypertune integration.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/observability/checks-overview/checks-api",
  "markdown": "# Checks API Reference\n\nAPI endpoints allow integrations to interact with the Vercel platform. Integrations can run checks every time you create a deployment.\n\nThe `post` and `patch` endpoints must be called with an OAuth2, or it will produce a `400` error.\n\nAllows the integration to create and register checks. When the \"deployment\" event triggers, the endpoint registers new checks. It runs until the \"deployment.succeeded\" event. The endpoint will then set the check \"status\" to \"running\".\n\nAllows the integration to update existing checks with a new status or conclusion. This endpoint sets the status to “completed”. The value for the conclusion can be \"canceled\", \"failed\", \"neutral\", \"succeeded\", or \"skipped\".\n\nAllows integration to fetch all existing checks with all their attributes. For comparison purposes, you can use it to get information from a previous deployment.\n\nAllows integration to fetch only a single check with all the attributes. For comparison purposes, you can use it to get information from a previous deployment.\n\nAllows integration to return a new outcome or rewrite an existing check result. This endpoint is used for check reruns.",
  "title": "Checks API Reference",
  "description": "The Vercel Checks API let you create tests and assertions that run after each deployment has been built, and are powered by Vercel Integrations.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/getting-started",
  "markdown": "# Getting Started with Conformance\n\nTo [set up Conformance](#setting-up-conformance-in-your-repository) in your repository, you must:\n\n*   Set up [Vercel's private npm registry](https://vercel.com/docs/vercel-platform/private-registry) to install the necessary packages\n*   [Install and initialize](https://vercel.com/docs/workflow-collaboration/conformance/getting-started#setting-up-conformance-in-your-repository) Conformance in your repository\n*   [Add your repository](#adding-your-repository-to-the-vercel-dashboard) to your Vercel dashboard\n\nIf you've already set up Code Owners, you may have already completed some of these steps.\n\nTo enable Conformance for your Enterprise team, you'll need to request access through your Vercel account administrator.\n\n**Note:** Conformance is available for Enterprise teams. To add it to your contract or upgrade to Enterprise, contact us\n\n[Contact Sales](https://vercel.com/contact/sales)\n\nVercel distributes packages with the `@vercel-private` scope through our private npm registry, and requires that each user using the package authenticates through a Vercel account.\n\nTo use the private npm registry, you'll need to follow the documentation to:\n\n*   [Set up your local environment](https://vercel.com/docs/vercel-platform/private-registry#setting-up-your-local-environment) – This should be completed by the team owner, but each member of your team will need to log in\n*   [Set up Vercel](https://vercel.com/docs/vercel-platform/private-registry#setting-up-vercel) – This should be completed by the team owner\n*   [Optionally, set up Conformance for use with CI](https://vercel.com/docs/vercel-platform/private-registry#setting-up-your-ci-provider) – This should be completed by the team owner\n\nThis section guides you through setting up Conformance for your repository.\n\n1.  The Conformance CLI is separate to the [Vercel CLI](https://vercel.com/docs/cli), however it uses the Vercel CLI for authentication.\n    \n    Before continuing, please ensure that the Vercel CLI is [installed](https://vercel.com/docs/cli#installing-vercel-cli) and that you are [logged in](https://vercel.com/docs/cli/login).\n    \n2.  Use the CLI to automatically initialize Conformance in your project. Start by running this command in your repository's root:\n    \n    ```\n    pnpm --package=@vercel-private/conformance dlx vercel-conformance init\n    ```\n    \n    `yarn dlx` only works with Yarn version 2 or newer, for Yarn v1 use  \n    `yarn -DW add @vercel-private/conformance && yarn vercel-conformance init`\n    \n    After running, check the installation success by executing:\n    \n3.  The Conformance `init` command creates the following changes:\n    \n    *   First, it installs the CLI package in your root `package.json` and every workspace `package.json`, if your monorepo uses workspaces.\n    *   It also adds a `conformance` script to the `scripts` field of every `package.json`. This script runs Conformance.\n    *   It adds any existing Conformance errors to allowlists, letting you start using Conformance without immediate fixes and allowing you to gradually resolve these allowlist entries over time. Learn more about Conformance Allowlists in the [documentation](https://vercel.com/docs/workflow-collaboration/conformance/allowlist).\n    \n    Once you've reviewed these, open a pull request with the changes and merge it.\n    \n4.  \\*\\* This step assumes you have [set up Code Owners](https://vercel.com/docs/workflow-collaboration/code-owners/getting-started).\\*\\*\n    \n    Conformance allows specific individuals to review modifications to allowlist files. Add a `.vercel.approvers` file at your repository's root:\n    \n    ```\n    **/*.allowlist.json @org/team:required\n    ```\n    \n    Now, changes to allowlist files need a review from someone on `@org/team` before merging.\n    \n    Learn more about [wildcard syntax](https://vercel.com/docs/workflow-collaboration/code-owners/code-approvers#globstar-pattern) and [`:required` syntax](https://vercel.com/docs/workflow-collaboration/code-owners/code-approvers#required) from Code Owners.\n    \n5.  You can integrate Conformance in your CI to avoid merging errors into your code. To learn more, see [Setting up your CI provider](https://vercel.com/docs/vercel-platform/private-registry#setting-up-your-ci-provider).\n    \n\nAdding your repository to your team's Vercel [dashboard](https://vercel.com/dashboard), allows you to access the Conformance dashboard and see an overview of your Conformance stats.\n\n1.  1.  Ensure your team is selected in the [scope selector](https://vercel.com/docs/dashboard-features#scope-selector).\n    2.  From your [dashboard](https://vercel.com/dashboard), select the Add New button and from the dropdown select Repository.\n    3.  Then, from the Add a new repository screen, find your Git repository that you wish to import and select Connect.\n2.  Before you can connect a repository, you must ensure that the Vercel GitHub app has been [installed for your team](https://docs.github.com/en/apps/using-github-apps/installing-a-github-app-from-a-third-party#installing-a-github-app). You should ensure it is installed for either all repositories or for the repository you are trying to connect.\n    \n    Once installed, you'll be able to connect your repository.\n    \n3.  Connecting your repository brings you to the [repository overview](https://vercel.com/docs/workflow-collaboration/conformance/dashboard-overview) page.\n    \n    To view the Conformance dashboard at any time:\n    \n    1.  Select the List View option on your team's [dashboard](https://vercel.com/dashboard)\n    2.  Find your repository from the list and select the repository name\n    3.  View the [Conformance overview](https://vercel.com/docs/workflow-collaboration/conformance/dashboard-overview), including information on [Code Owners](https://vercel.com/docs/workflow-collaboration/code-owners) and other metadata",
  "title": "Getting Started with Conformance",
  "description": "Learn how to set up Conformance for your codebase.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/observability/checks-overview/creating-checks",
  "markdown": "# Anatomy of the Checks API\n\nChecks API extends the build and deploy process once your deployment is ready. Each check behaves like a webhook that triggers specific events, such as `deployment.created`, `deployment.ready`, and `deployment.succeeded`. The test are verified before domains are assigned.\n\nTo learn more, see the [Supported Webhooks Events docs](https://vercel.com/docs/integrations/webhooks-overview/webhooks-api#supported-event-types).\n\nThe workflow for registering and running a check is as follows:\n\n1.  A check is created after the `deployment.created` event\n2.  When the `deployment.ready` event triggers, the check updates its `status` to `running`\n3.  When the check is finished, the `status` updates to `completed`\n\nIf a check is \"rerequestable\", your integration users get an option to [rerequest and rerun the failing checks](#rerunning-checks).\n\nDepending on the type, checks can block the domain assignment stage of deployments.\n\n*   Blocking Checks: Prevents a successful deployment and returns a `conclusion` with a `state` value of `canceled` or `failed`. For example, a [Core Check](https://vercel.com/docs/observability/checks-overview#types-of-flows-enabled-by-checks-api) returning a `404` error results in a `failed` `conclusion` for a deployment\n*   Non-blocking Checks: Return test results with a successful deployment regardless of the `conclusion`\n\nA blocking check with a `failed` state is configured by the developer (and not the integration).\n\nChecks are always associated with a specific deployment that is tested and validated.\n\n| Attributes | Format | Purpose |\n| --- | --- | --- |\n| `blocking` | Boolean | Tells Vercel if this check needs to block the deployment |\n| `name` | String | Name of the check |\n| `detailsUrl` | String (optional) | URL to display in the Vercel dashboard |\n| `externalID` | String (optional) | ID used for external use |\n| `path` | String (optional) | Path of the page that is being checked |\n| `rerequestable` | Boolean (optional) | Tells Vercel if the check can rerun. Users can trigger a `deployment.check-rerequested` [webhook](https://vercel.com/docs/observability/webhooks-overview/webhooks-api#deployment.check-rerequested), through a button on the deployment page |\n| `conclusion` | String (optional) | The result of a running check. For [blocking checks](#types-of-checks) the values can be `canceled`, `failed`, `neutral`, `succeeded`, `skipped`. `canceled` and `failed` |\n| `status` | String (optional) | Tells Vercel the status of the check with values: `running` and `completed` |\n| `output` | Object (optional) | Details about the result of the check. Vercel uses this data to display actionable information for developers. This helps them debug failed checks |\n\nThe check gets a `stale` status if there is no status update for more than one hour (`status = registered`). The same applies if the check is running (`status = running`) for more than five minutes.\n\n| Response | Format | Purpose |\n| --- | --- | --- |\n| `status` | String | The status of the check. It expects specific values like `running` or `completed` |\n| `state` | String | Tells the current state of the connection |\n| `connectedAt` | Number | Timestamp (in milliseconds) of when the configuration was connected |\n| `type` | String | Name of the integrator performing the check |\n\n| Status | Outcome |\n| --- | --- |\n| `200` | Success |\n| `400` | One of the provided values in the request body is invalid, OR one of the provided values in the request query is invalid |\n| `403` | The provided token is not from an OAuth2 client OR you do not have permission to access this resource OR the API token doesn't have permission to perform the request |\n| `404` | The check was not found OR the deployment was not found |\n| `413` | The output provided is too large |\n\nThe `output` property can store any data like [Web Vitals](https://vercel.com/docs/speed-insights) and [Virtual Experience Score](https://vercel.com/docs/speed-insights#predictive-performance-metrics-with-virtual-experience-score). It is defined under a `metrics` field:\n\nEach of these keys has the following properties:\n\n| Key | [Type](#api-basics/types) | Description |\n| --- | --- | --- |\n| `value` | [Float](#api-basics/types) | The value measured for a particular metric, in milliseconds. For `virtualExperienceScore` this value is the percentage between 0 and 1 |\n| `previousValue` | [Float](#api-basics/types) | A previous value for comparison purposes |\n| `source` | [Enum](#api-basics/types) | `web-vitals` |\n\n`metrics` makes [Web Vitals](https://vercel.com/docs/speed-insights) visible on checks. It is defined inside `output` as follows:\n\n```\n{\n  \"path\": \"/\",\n  \"output\": {\n    \"metrics\": {\n        \"FCP\": {\n          \"value\": 1200,\n          \"previousValue\": 1400,\n          \"source\": \"web-vitals\"\n        }\n        \"LCP\": {\n          \"value\": 1200,\n          \"previousValue\": 1400,\n          \"source\": \"web-vitals\"\n        },\n        \"CLS\": {\n          \"value\": 1200,\n          \"previousValue\": 1400,\n          \"source\": \"web-vitals\"\n        },\n        \"TBT\": {\n          \"value\": 1200,\n          \"previousValue\": 1400,\n          \"source\": \"web-vitals\"\n        }\n      }\n    }\n  }\n}\n```\n\nAll fields are required except `previousValue`. If `previousValue` is present, the delta will be shown.\n\nA check can be \"rerequested\" using the `deployment.check-rerequested` webhook. Add the `rerequestable` attribute, and you can rerequest failed checks.\n\nA rerequested check triggers the`deployment.check-rerequested` webhook. It updates the check `status` to `running` and resets the `conclusion`, `detailsUrl`, `externalId`, and `output` fields.\n\nYou can \"Skip\" to stop and ignore check results without affecting the alias assignment. You cannot skip active checks. They continue running until built successfully, and assign domains as the last step.\n\nFor \"Running Checks\", only the [Automatic Deployment URL](https://vercel.com/docs/deployments/generated-urls) is available. [Automatic Branch URL](https://vercel.com/docs/deployments/generated-urls#url-with-git-branch) and [Custom Domains](https://vercel.com/docs/projects/domains/add-a-domain) will apply once the checks finish.\n\nChecks may take different times to run. Each integrator determines the running order of the checks. While [Vercel REST API](https://vercel.com/docs/rest-api/vercel-api-integrations) determines the order of check results.\n\nWhen Checks API begins running on your deployment, the `status` is set to `running`. Once it gets a `conclusion`, the `status` updates to `completed`. This results in a successful deployment.\n\nHowever, your deployment will fail if the `conclusion` updates to one of the following values:\n\n| Conclusion | `blocking=true` |\n| --- | --- |\n| `canceled` | Yes |\n| `failed` | Yes |\n| `neutral` | No  |\n| `succeeded` | No  |\n| `skipped` | No  |",
  "title": "Anatomy of the Checks API",
  "description": "Learn how to create your own Checks with Vercel Integrations. You can build your own Integration in order to register any arbitrary Check for your deployments.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/storage/edge-config/integrations/statsig-edge-config",
  "markdown": "# Using Edge Config with Statsig\n\nLearn how to use Edge Config with Vercel's Statsig integration.\n\nStatsig is a statistics engine that enables you to automate A/B testing and make data-driven decisions at scale.\n\nThe Statsig integration enables you to replace hard-coded values in your application with dynamic values on the server.\n\nBefore using this integration, you should have:\n\n1.  The latest version of Vercel CLI. To check your version, use `vercel --version`. To [install](https://vercel.com/docs/cli#installing-vercel-cli) or update Vercel CLI, use:\n    \n2.  A project. If you don't have one, you can run the following terminal commands to create a Next project:\n    \n    ```\n    npx create-next-app@latest\n    ```\n    \n3.  A Vercel project. If you don't have one, see [Creating a Project](https://vercel.com/docs/projects/overview#creating-a-project)\n    \n4.  An Edge Config. If you don't have one, follow [the Edge Config quickstart](https://vercel.com/docs/storage/edge-config/get-started)\n    \n5.  The Edge Config SDK:\n    \n    ```\n    pnpm i @vercel/edge-config\n    ```\n    \n\nThe following steps will walk you through:\n\n*   Configuring Vercel's Statsig integration\n*   Using the integration to manage Statsig experiments from your frontend code\n\n1.  Visit [the Statsig page in the Integration Marketplace](https://vercel.com/integrations/statsig) and select the Add Integration button. Then:\n    \n    1.  Select a Vercel team and Vercel project for your integration to be applied to\n    2.  Log into Statsig\n    3.  Select or create a new Edge Config to connect to Statsig\n    4.  Statsig will provide you with a [Connection String](https://vercel.com/docs/storage/edge-config/using-edge-config#using-a-connection-string) and Edge Config Item Key. Save both, as you'll need them later in the setup\n2.  Navigate to [your Vercel dashboard](https://vercel.com/dashboard), and select the project you want to use the Statsig integration with.\n    \n    Under the Settings tab, navigate to Environment Variables, and add the following variables:\n    \n    1.  `EDGE_CONFIG`: Set this to the value of your Connection String\n    2.  `EDGE_CONFIG_ITEM_KEY`: Set this to the value of your Edge Config Item Key\n    \n    See [our Environment Variables documentation](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable) to learn more.\n    \n3.  Statsig's [`statsig-node-vercel`](https://www.npmjs.com/package/statsig-node-vercel) package offers an `EdgeConfigDataAdapter` class, which you can use to initialize Statsig experiments with Edge Config.\n    \n    The following example sets up a Statsig experiment with Edge Config in an [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) file, using the `EDGE_CONFIG_ITEM_KEY` enviroment variable.\n    \n    ```\n    import { NextResponse } from 'next/server';\n    import type { NextRequest } from 'next/server';\n    import Statsig from 'statsig-node';\n    import { createClient } from '@vercel/edge-config';\n    import { EdgeConfigDataAdapter } from 'statsig-node-vercel';\n     \n    export const config = {\n      matcher: '/',\n    };\n     \n    const edgeConfigClient = createClient(process.env.EDGE_CONFIG!);\n    const dataAdapter = new EdgeConfigDataAdapter({\n      edgeConfigClient: edgeConfigClient,\n      edgeConfigItemKey: process.env.EDGE_CONFIG_ITEM_KEY!,\n    });\n     \n    export async function middleware(request: NextRequest) {\n      await Statsig.initialize('statsig-server-api-key-here', { dataAdapter });\n     \n      const experiment = await Statsig.getExperiment(\n        { userID: 'exampleId' },\n        'statsig_example_experiment',\n      );\n     \n      // Do any other experiment actions here\n     \n      return NextResponse.next();\n    }\n    ```\n    \n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Using Edge Config with Statsig",
  "description": "Learn how to use Edge Config with Vercel's Statsig integration.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/create-integration/submit-integration",
  "markdown": "# Requirements for listing an integration\n\nDefining the content specs helps you create the main cover page of your integration. On the marketplace listing, the cover page looks like this.\n\n![Integration overview page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1695916664%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fint-overview-new-light.png&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Integration overview page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1695916664%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fint-overview-new-dark.png&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nIntegration overview page.\n\nThe following requirements are located in the integrations console.\n\n*   Character Limit: 64\n*   Required: Yes\n\nThis is the integration title which appears on Integration overview. This title should be unique.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1695916663%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fint-name-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1695916663%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fint-name-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n*   Character Limit: 32\n*   Required: Yes\n\nThis will create the URL for your integration. It will be located at:\n\n```\nhttps://vercel.com/integrations/<slug>\n```\n\n*   Character Limit: 64\n*   Required: Yes\n\nThe name of the integration owner, generally a legal name.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448675%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-dev-light.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448675%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-dev-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n*   Required: Yes\n\nThere are two types of email that you must provide:\n\n*   Contact email: This is the contact email for the owner of the integration. It will not be publicly visible and will only be used by Vercel to contact you.\n*   Support contact email: The support email for the integration. This email will be publicly listed and used by developers to contact you about any issues.\n\n*   Character Limit: 40\n*   Required: Yes\n\nThe integration tagline on the Marketplace card, and the Integrations overview in the dashboard.\n\n*   Required: Yes\n\nThe image displayed in a circle, that appears throughout the dashboard and marketing pages. Like all assets, it will appear in both light and dark mode.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Ficon.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nYou must make sure that the images adhere to the following dimensions and aspect ratios:\n\n| Spec Name | Ratio | Size | Notes |\n| --- | --- | --- | --- |\n| Icon | 1:1 | 20-80px | High resolution bitmap image, non-transparent PNG, minimum 256px |\n\n*   Required: Yes\n\nThe category of your integration is used to help developers find your integration in the marketplace. You can choose from the following categories:\n\n*   Commerce\n*   Logging\n*   Databases\n*   CMS\n*   Monitoring\n*   Dev Tools\n*   Performance\n*   Analytics\n*   Experiments\n*   Security\n*   Searching\n*   Messaging\n*   Productivity\n*   Testing\n*   Observability\n*   Checks\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448675%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-category-light.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448675%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-category-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n*   Required: Yes\n\nThe following URLs must be submitted as part of your application:\n\n*   Website: A URL to the website related to your integration\n*   Documentation URL: A URL for users to learn how to use your integration\n*   EULA URL: The URL to your End User License Agreement (EULA) for your integration. For more information about your required EULA, see the [Integrations Marketplace Agreement, section 2.4.](https://vercel.com/legal/integrations-marketplace-agreement)\n*   Privacy Policy URL: The URL to your Privacy Policy for your integration. For more information about your required privacy policy, see the [Integrations Marketplace Agreement, section 2.4.](https://vercel.com/legal/integrations-marketplace-agreement)\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448675%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-url-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448675%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-url-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n*   Character Limit: 768\n*   Required: Yes\n\nThis is a long description about the integration. It should describe why and when a user may want to use this integration. Markdown is supported.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448675%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-overview-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448674%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-overview-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n*   Character Limit: 1024\n*   Required: No\n\nAdditional steps to install or configure your integrations. Include environment variables and their purpose. Markdown is supported.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448674%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-add-info-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694448674%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fdetails-add-info-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n*   Required: Yes\n\nThese are a collection of images displayed on the carousel at the top of your marketplace listing. We require at least 1 image, but you can add up to 5. The images and text must be of high quality.\n\nThese gallery images will appear in both light and dark mode. Avoid long text, as it may not be legible on smaller screens.\n\nAlso consider the 20% safe zone around the edges of the image by placing the most important content of your images within the bounds. This will ensure that no information is cut when cropped.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687474827%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fgallery.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687474827%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fgallery.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nYour media should adhere to the following dimensions and aspect ratios:\n\n| Spec Name | Ratio | Size | Notes |\n| --- | --- | --- | --- |\n| Gallery Images | 3:2 | 1440x960px | High resolution bitmap image, non-transparent PNG. Minimum 3 images, up to 5 can be uploaded. You can upload 1 video link too |\n\n*   Required: No\n\nAPI Scopes define the level of access your integration will have to the Vercel REST API. When setting up a new integration, you need to:\n\n*   Select only the API Scopes that are essential for your integration to function\n*   Choose the appropriate permission level for each scope: `None`, `Read`, or `Read/Write`\n\nAfter activation, your integration may collect specific user data based on the selected scopes. You are accountable for:\n\n*   The privacy, security, and integrity of this user data\n*   Compliance with [Vercel's Shared Responsibility Model](https://vercel.com/docs/security/shared-responsibility#shared-responsibilities)\n\n![Select API Scopes for your integration.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687474827%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fapi-scopes-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Select API Scopes for your integration.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687474827%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fcreating%2Fapi-scopes-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSelect API Scopes for your integration.\n\nLearn more about API scope permissions in the [Extending Vercel](https://vercel.com/docs/integrations/install-an-integration#understand-permissions) documentation.\n\n*   Required: No\n\nWith your integration, you can listen for events on the Vercel platform through Webhooks. The following events are available:\n\nThe following events are available for deployments:\n\nThe following events are available for configurations:\n\nThe following events are available for domains:\n\nThe following events are available for projects:\n\nThe following events are available for checks:\n\nSee the [Webhooks](https://vercel.com/docs/observability/webhooks-overview) documentation to learn more.\n\n*   Required: No\n\nTo allow the developer to configure an installed integration, you can specify a Configuration URL. This URL is used for the Configure button on each configuration page. Selecting this button will redirect the developer to your specified URL with a `configurationId` query parameter. See [Interacting with Configurations](https://vercel.com/docs/rest-api/vercel-api-integrations#interacting-with-configurations) to learn more.\n\nIf you leave the Configuration URL field empty, the Configure button will default to a Website button that links to the website URL you specified on integration settings.\n\n*   Required: Yes\n\nYou must agree to the [Vercel Integrations Marketplace Agreement](https://vercel.com/legal/integrations-marketplace-agreement) before your integration can be published.\n\n*   Required: Yes\n\nThe Redirect URL is an HTTP endpoint that handles the installation process by exchanging a code for an API token, serving a user interface, and managing project connections:\n\n*   Token Exchange: Exchanges a provided code for a [Vercel REST API access token](https://vercel.com/docs/rest-api/vercel-api-integrations#exchange-code-for-access-token)\n*   User Interface: Displays a responsive UI in a popup window during the installation\n*   Project Provisioning: Allows users to create new projects or connect existing ones in your system to their Vercel Projects\n*   Completion: Redirects the user back to Vercel upon successful installation\n\nFor local development and testing, you can specify a URL on `localhost`.\n\nUsage Scenario: For installations initiated from the [Vercel Marketplace](https://vercel.com/integrations).\n\n*   Post-Installation: After installation, the user is redirected to a page on your side to complete the setup\n*   Completion: Redirect the user to the provided next URL to close the popup and continue\n\n| Name | Definition | Example |\n| --- | --- | --- |\n| code | The code you received. | `jMIukZ1DBCKXHje3X14BCkU0` |\n| teamId | The ID of the team (only if a team is selected). | `team_LLHUOMOoDlqOp8wPE4kFo9pE` |\n| configurationId | The ID of the configuration. | `icfg_6uKSUQ359QCbPfECTAY9murE` |\n| next | Encoded URL to redirect to, once the installation process on your side is finished. | `https%3A%2F%2Fvercel.com%2F...` |\n| source | Source defines where the integration was installed from. | `marketplace` |\n\nUsage Scenario: When you're initiating the installation from your application.\n\n*   Starting Point: Use this URL to start the process: `https://vercel.com/integrations/:slug/new` - `:slug` is the name you added in the [Create Integration form](https://vercel.com/docs/integrations/create-integration#create-integration-form)\n\n| Name | Definition | Example |\n| --- | --- | --- |\n| code | The code you received. | `jMIukZ1DBCKXHje3X14BCkU0` |\n| teamId | The ID of the team (only if a team is selected). | `team_LLHUOMOoDlqOp8wPE4kFo9pE` |\n| configurationId | The ID of the configuration. | `icfg_6uKSUQ359QCbPfECTAY9murE` |\n| next | Encoded URL to redirect to, once the installation process on your side is finished. | `https%3A%2F%2Fvercel.com%2F...` |\n| state | Random string to be passed back upon completion. It is used to protect against CSRF attacks. | `xyzABC123` |\n| source | Source defines where the integration was installed from. | `external` |\n\nUsage Scenario: For installations using the [Vercel deploy button](https://vercel.com/docs/deployments/deploy-button).\n\n*   Post-Installation: The user will complete the setup on your side\n*   Completion: Redirect the user to the provided next URL to proceed\n\n| Name | Definition | Example |\n| --- | --- | --- |\n| code | The code you received. | `jMIukZ1DBCKXHje3X14BCkU0` |\n| teamId | The ID of the team (only if a team is selected). | `team_LLHUOMOoDlqOp8wPE4kFo9pE` |\n| configurationId | The ID of the configuration. | `icfg_6uKSUQ359QCbPfECTAY9murE` |\n| next | Encoded URL to redirect to, once the installation process on your side is finished. | `https%3A%2F%2Fvercel.com%2F...` |\n| currentProjectId | The ID of the created project. | `QmXGTs7mvAMMC7WW5ebrM33qKG32QK3h4vmQMjmY` |\n| external-id | Reference of your choice. See [External ID](https://vercel.com/docs/integrations/deploy-button/callback#external-id) for more details. | `1284210` |\n| source | Source defines where the integration was installed from. | `deploy-button` |\n\nIf the integration is already installed in the selected scope during the deploy button flow, the redirect URL will be called with the most recent `configurationId`.\n\nMake sure to store `configurationId` along with an access token such that if an existing `configurationId` was passed, you could retrieve the corresponding access token.",
  "title": "Requirements for listing an integration",
  "description": "Learn about all the requirements and guidelines needed when creating your Integration.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/storage/edge-config/integrations/split-edge-config",
  "markdown": "# Using Edge Config with Split\n\nSplit is a feature flag provider that tracks event data, enabling you to release features, target them to audiences, and measure their impact on customer experience metrics securely.\n\nThe Split Edge Config integration enables you to write your [Split rollout plan](https://help.split.io/hc/en-us/articles/9805284145549-Creating-a-rollout-plan) to an Edge Config. Doing so will allow you to evaluate feature flags at ultra-low latency with Vercel's Edge Network while tracking events and impressions data with Split.\n\nBefore using this integration, you should have:\n\n1.  The latest version of Vercel CLI. To check your version, use `vercel --version`. To [install](https://vercel.com/docs/cli#installing-vercel-cli) or update Vercel CLI, use:\n    \n2.  A project. If you don't have one, you can run the following terminal commands to create a Next project:\n    \n    ```\n    npx create-next-app@latest\n    ```\n    \n3.  A Vercel project. If you don't have one, see [Creating a Project](https://vercel.com/docs/projects/overview#creating-a-project)\n    \n4.  An Edge Config. If you don't have one, follow [the Edge Config quickstart](https://vercel.com/docs/storage/edge-config/get-started)\n    \n5.  The Edge Config SDK:\n    \n    ```\n    pnpm i @vercel/edge-config\n    ```\n    \n\nThe following steps will walk you through:\n\n*   Configuring Vercel's Split Edge Config integration\n*   Using it to evalute feature flags from your frontend code\n\nTo configure this integration, Split Admin access (Split Admin users can add feature flags and segments, and edit them at will) is required.\n\n1.  Visit [the Split page in the Vercel Integration Marketplace](https://vercel.com/integrations/split) and select the Add Integration button. From the Integration dialog:\n    \n    1.  Select a Vercel team and project to connect the integration to\n    2.  Log into Split\n    3.  Select the [Split Environment](https://help.split.io/hc/en-us/articles/360019915771-Environments) you want to use\n    4.  Select an existing Edge Config or create a new one\n    5.  Copy the Edge Config item key provided on this page. You'll need it to add it to your Environment Variables\n    \n    You can also find your Edge Config Split item key in [your dashboard on Vercel](https://vercel.com/dashboard/integrations) . In the **Integrations** tab, select **Manage**, then select **Configure** on the integration page. You should see the item key on the page that opens.\n    \n2.  If you already have existing feature flags, you can skip this step and use those. In this example, we'll create one called `New_Marketing_Page`. You can set the user targeting to Joe and Bobby.\n    \n    To create a feature flag in Split:\n    \n    1.  Log into your [Split management console](https://app.split.io/login) and select the workspace icon near the top-left of the page\n    2.  In the sidebar, under Target, select Feature flags. Add the name `New_Marketing_Page`, and set the traffic type to `user`. Select Create to finish\n    3.  With your feature flag created, select the feature flag and select the Definition tab. Select Initiate Environment to configure your flag\n    4.  Add valid users to the feature flag\n    5.  Scroll down to Targeting and select Add new individual target\n    6.  Under To user, add any username you want to test. This example uses `Joe`.\n    7.  Select Add new individual target, then set the Description option to `off`. Add another username under To user. This example uses `Bobby`\n    8.  Select Review Changes, then Create to finish\n    \n    Next, you need to add your credentials to your project's local environment to use the Split integration in your code.\n    \n3.  Next, you'll add the following credentials to your Vercel project:\n    \n    *   `SPLIT_SDK_CLIENT_API_KEY`\n    *   `EDGE_CONFIG_SPLIT_ITEM_KEY`\n    *   `EDGE_CONFIG`\n    \n    To add environment variables to your project, visit [your Vercel dashboard](https://vercel.com/dashboard) and select the project you want to use the Split integration with. Then select Settings > Environment Variables.\n    \n    To get your Split client-side API keys:\n    \n    1.  Log into your [Split management console](https://app.split.io/login) and select the workspace icon near the top-left of the page\n    2.  In the list of options that appears, select Admin Settings, then navigate to API Keys -> SDK API Keys\n    3.  Copy the client-side keys associated with the workspace and environment you're using\n    \n    To add your Edge Config Split item key, if you didn't copy it after setting up the integration on Vercel:\n    \n    1.  Visit [your dashboard on Vercel](https://vercel.com/dashboard/integrations)\n    2.  In the Integrations tab, select Manage\n    3.  On the integration page, select Configure\n    4.  You should see the item key on the page that opens. Copy it\n    \n    To add your Edge Config's connection string to your project:\n    \n    1.  Visit your project's page in [the dashboard](https://vercel.com/dashboard)\n    2.  Select the Storage tab. Select Connect Store and select the Edge Config associated with your Split integration. The `EDGE_CONFIG` environment variable will be set automatically.\n    \n    Now you're ready to use the Split Edge Config integration in your code.\n    \n4.  Open your project's code on your local machine and do the following:\n    \n    1.  Install Split's Browser SDK, Vercel integration utilities, and Vercel's Edge Config SDK:\n        \n        ```\n        pnpm i @splitsoftware/splitio-browserjs @splitsoftware/vercel-integration-utils @vercel/edge-config\n        ```\n        \n    2.  Create an API route in your project. The following example fetches a treatement based on which user is visiting. You can specify the user by appending `?userKey=Joe` or `?userKey=Bobby` to the URL when visiting the route:\n        \n    \n    ```\n    import {\n      SplitFactory,\n      PluggableStorage,\n      ErrorLogger,\n    } from '@splitsoftware/splitio-browserjs';\n    import { EdgeConfigWrapper } from '@splitsoftware/vercel-integration-utils';\n    import { createClient } from '@vercel/edge-config';\n     \n    export const runtime = 'edge';\n     \n    export async function GET(request: Request) {\n      const { EDGE_CONFIG_SPLIT_ITEM_KEY, SPLIT_SDK_CLIENT_API_KEY } = process.env;\n     \n      if (!SPLIT_SDK_CLIENT_API_KEY || !EDGE_CONFIG_SPLIT_ITEM_KEY)\n        return new Response(\n          `Failed to find your SDK Key (${SPLIT_SDK_CLIENT_API_KEY})\n          or item key ${EDGE_CONFIG_SPLIT_ITEM_KEY}`,\n        );\n     \n      const edgeConfigClient = createClient(process.env.EDGE_CONFIG);\n      const { searchParams } = new URL(request.url);\n      const userKey = searchParams.get('userKey') || 'anonymous';\n      const client = SplitFactory({\n        core: {\n          authorizationKey: SPLIT_SDK_CLIENT_API_KEY,\n          key: userKey,\n        },\n        mode: 'consumer_partial',\n        storage: PluggableStorage({\n          wrapper: EdgeConfigWrapper({\n            // The Edge Config item key where Split stores\n            // feature flag definitions\n            edgeConfigItemKey: EDGE_CONFIG_SPLIT_ITEM_KEY,\n            // The Edge Config client\n            edgeConfig: edgeConfigClient,\n          }),\n        }),\n        // Disable or keep only ERROR log level in production,\n        // to minimize performance impact\n        debug: ErrorLogger(),\n      }).client();\n     \n      await new Promise((resolve) => {\n        client.on(client.Event.SDK_READY, () => resolve);\n        client.on(client.Event.SDK_READY_TIMED_OUT, () => resolve);\n      });\n     \n      // Replace this with the feature flag you want\n      const FEATURE_FLAG = 'New_Marketing_Page';\n      const treatment = await client.getTreatment(FEATURE_FLAG);\n     \n      // Must await in app-router; waitUntil() is not\n      // yet supported\n      await client.destroy();\n     \n      // treatment will be 'control' if the SDK timed out\n      if (treatment == 'control') return new Response('Control marketing page');\n     \n      return treatment === 'on'\n        ? new Response('New marketing page')\n        : new Response('Old marketing page');\n    }\n    ```\n    \n5.  1.  Start a local development server. If you're using Vercel CLI, enter the following command in the terminal:\n    \n    1.  Navigate to [http://localhost:3000/api/split-example?userKey=Joe](http://localhost:3000/api/split-example?userKey=Joe). You should see either `New marketing page` or `Old marketing page` based on how your feature flags are configured in Split\n        *   Try changing the `userKey` search param's value to `Bobby`, or deleting it altogether, to see different responses when you visit the route",
  "title": "Using Edge Config with Split",
  "description": "Learn how to use Edge Config with Vercel's Split integration.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/external-platforms/kubernetes",
  "markdown": "# Integrating Vercel and Kubernetes\n\nKubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications. It has become a popular and powerful way for companies to manage their applications.\n\nYou can integrate Vercel with your existing Kubernetes infrastructure to optimizing the delivery of your frontend applications, reducing the number of applications your teams need to support.\n\nLet’s look at key Kubernetes concepts and how Vercel’s [managed infrastructure](https://vercel.com/products/managed-infrastructure) handles them:\n\n*   [Server management and provisioning](#server-management-and-provisioning)\n*   [Scaling and redundancy](#scaling-and-redundancy)\n*   [Managing environments and deployments](#managing-environments-and-deployments)\n*   [Managing access and security](#managing-access-and-security)\n*   [Observability](#observability)\n\nWe'll conclude with [how to migrate your frontend from Kubernetes to Vercel](#migrating-from-kubernetes-to-vercel).\n\nWith Kubernetes, you must define and configure a web server (e.g. Nginx), resources (CPU, memory), and networking (ingress, API Gateway, firewalls) for each of your nodes and clusters.\n\nVercel manages server provisioning for you. Through [framework-defined infrastructure](https://vercel.com/blog/framework-defined-infrastructure) and support for a [wide range of the most popular frontend frameworks](https://vercel.com/docs/frameworks), Vercel automatically provisions cloud infrastructure based on your frontend framework code. Vercel also manages every aspect of your [domain](https://vercel.com/docs/projects/domains), including generating, assigning, and renewing SSL certificates.\n\nIn a self-managed Kubernetes setup, you manually configure your Kubernetes cluster to scale horizontally (replicas) or vertically (resources). It takes careful planning and monitoring to find the right balance between preventing waste (over-provisioning) and causing unintentional bottlenecks (under-provisioning).\n\nIn addition to scaling, you may need to deploy your Kubernetes clusters to multiple regions to improve the availability, disaster recovery, and latency of applications.\n\nVercel automatically scales your applications based on end-user traffic. Vercel deploys your application globally on our [Edge Network](https://vercel.com/docs/edge-network/overview), reducing latency and improving end-user performance. In the event of regional downtime or an upstream outage, Vercel automatically reroutes your traffic to the next closest region, ensuring your applications are always available to your users.\n\nManaging the container lifecycle and promoting environments in a self-managed ecosystem typically involves three parts:\n\n*   Containerization (Docker): Packages applications and their dependencies into containers to ensure consistent environments across development, testing, and production.\n*   Container orchestration (Kubernetes): Manages containers (often Docker containers) at scale. Handles deployment, scaling, and networking of containerized applications.\n*   Infrastructure as Code (IaC) tool (Terraform): Provisions and manages the infrastructure (cloud, on-premises, or hybrid) in a consistent and repeatable manner using configuration files.\n\nThese parts work together by Docker packaging applications into containers, Kubernetes deploying and managing these containers across a cluster of machines, and Terraform provisioning the underlying infrastructure on which Kubernetes itself runs.\n\nAn automated or push-button CI/CD process facilities the rollout. Pods are warmed up, a health check is performed to ensure the application is running correctly, and traffic is cut to the new instances.\n\nVercel knows how to automatically configure your environment through our [framework-defined infrastructure](https://vercel.com/blog/framework-defined-infrastructure), removing the need for containerization, or manually implementing CI/CD for your frontend workload.\n\nOnce you connect a Vercel project to a Git repository, every push to a branch automatically creates a new deployment of your application with [our git integrations](https://vercel.com/docs/deployments/git). The default branch (usually `main`) is your production environment. Every time your team pushes to the default branch, Vercel creates a new production deployment. Vercel creates a [Preview Deployment](https://vercel.com/docs/deployments/preview-deployments) when you push to another branch besides the default branch. A Preview Deployment allows your team to test changes and leave feedback using [Preview Comments](https://vercel.com/docs/workflow-collaboration/comments) in a live deployment (using a [generated URL](https://vercel.com/docs/deployments/generated-urls)) before changes are merged to your Git production branch.\n\nEvery deploy is immutable, and these generated domains act as pointers. Reverting and deploying is an atomic swap operation. These infrastructure capabilities enable other Vercel features, like [Instant Rollbacks](https://vercel.com/docs/deployments/instant-rollback) and [Skew Protection](https://vercel.com/docs/deployments/skew-protection).\n\nIn a Kubernetes environment, you need to implement security measures such as Role-Based Access Control (RBAC), network policies, secrets management, and environment variables to protect the cluster and its resources by configuring access controls, integrating with existing identity providers (if necessary), and setting up user accounts and permissions. Regular maintenance of the Kubernetes environment is needed for security patches, version updates, and dependency management to defend against vulnerabilities.\n\nWith Vercel, you can securely configure [environment variables](https://vercel.com/docs/projects/environment-variables) and manage [user access, roles, and permissions](https://vercel.com/docs/accounts/team-members-and-roles) in the Vercel dashboard. Vercel handles all underlying infrastructure updates and security patches, ensuring your deployment environment is secure and up-to-date.\n\nA Kubernetes setup typically uses observability solutions to aid in troubleshooting, alerting, and monitoring of your applications. You could do this through third-party services like Splunk, DataDog, Grafana, and more.\n\nVercel provides built-in logging and monitoring capabilities through our [observability products](https://vercel.com/docs/observability) with real-time logs and built-in traffic analytics. These are all accessible through the Vercel dashboard. If needed, Vercel has [one-click integrations with leading observability platforms](https://vercel.com/integrations), so you can keep using your existing tools.\n\nTo incrementally move your frontend applications to Vercel:\n\n1.  Start by [creating a Vercel account](https://vercel.com/signup) and [team](https://vercel.com/docs/accounts/create-a-team), if needed.\n    \n2.  Keep your current frontend running in Kubernetes for now. Create a fork or a branch of your frontend codebase and connect it to a [new Vercel project](https://vercel.com/docs/projects/overview#creating-a-project).\n    \n    Once connected, Vercel will automatically build and deploy your application. It’s okay if the first deployment fails. [View the build logs](https://vercel.com/docs/deployments/logs) and [troubleshoot the build](https://vercel.com/docs/deployments/troubleshoot-a-build) failures. Changes might include:\n    \n    *   Adjustments to build scripts\n    *   Changes to the [project configuration](https://vercel.com/docs/projects/project-configuration)\n    *   Missing [environment variables](https://vercel.com/docs/projects/environment-variables)\n    \n    Continue addressing errors until you get a successful preview deployment.\n    \n    Depending on how you have your Kubernetes environment configured, you may need to adjust firewall and security policies to allow the applications to talk to each other. Vercel [provides some options](https://vercel.com/guides/how-to-allowlist-deployment-ip-address), including [Vercel Secure Compute](https://vercel.com/docs/security/secure-compute) for Enterprise teams, which allows you to establish secure connections between Vercel and backend environments.\n    \n    The goal is to use the Preview Deployment to test the integration with your Kubernetes-hosted backends, ensuring that API calls and dataflow work as expected.\n    \n3.  Use [Vercel’s dashboard](https://vercel.com/dashboard) to securely manage [user access, roles, and permissions](https://vercel.com/docs/accounts/team-members-and-roles), so your team can collaborate on the project.\n    \n4.  Once your preview deployment is passing all tests, and your team is happy with it, you can start to roll it out.\n    \n    We recommend following our [incremental migration guide](https://vercel.com/docs/incremental-migration/migration-guide) or our [Vercel Adoption](https://vercel.com/resources/the-architects-guide-to-adopting-vercel) guide to help you serve traffic to a Vercel-hosted frontend for any new paths and seamlessly fallback to your existing server for any old paths.\n    \n    Some other tools or strategies you may want to use:\n    \n5.  Continue running your backend services on Kubernetes, taking advantage of its strengths in container orchestration for applications your company may not want to move or are unable to move. Examples could include:\n    \n    *   APIs\n    *   Remote Procedure Calls (RPC)\n    *   Change Data Captures (CDC)\n    *   Extract Transfer Loads (ETL)\n    \n    Over time, you can evaluate whether specific backend services could also benefit from a serverless architecture and also be migrated to Vercel.\n    \n6.  With Vercel, your development processes become simpler and faster. Vercel combines all the tools you need for CI/CD, staging, testing, feedback, and QA into one streamlined [developer experience platform](https://vercel.com/products/dx-platform) to optimize the delivery of high-quality frontend applications. Instant deployments, live previews, and comments accelerate your feedback cycle, while uniform testing environments ensure the quality of your work. Letting you focus on what you do best: Building top-notch frontend applications.\n    \n    A [recent study](https://vercel.com/roi) found Vercel customers see:\n    \n    *   Up to 90% increase in site performance\n    *   Up to 80% reduction in time spent deploying\n    *   Up to 4x faster time to market\n\nIf you want to understand how Vercel builds and deploys serverless applications for maximum scalability, performance, and fast iterations, you can learn more in the [Behind the scenes of Vercel's infrastructure](https://vercel.com/blog/behind-the-scenes-of-vercels-infrastructure) blog post.",
  "title": "Integrating Vercel and Kubernetes",
  "description": "Deploy your frontend on Vercel alongside your existing Kubernetes infrastructure.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/cli",
  "markdown": "# vercel-conformance\n\nThe `vercel-conformance` command is used to run [Conformance](https://vercel.com/docs/workflow-collaboration/conformance) on your code.\n\nThe Conformance CLI is separate to the [Vercel CLI](https://vercel.com/docs/cli). However you must ensure that the Vercel CLI is [installed](https://vercel.com/docs/cli#installing-vercel-cli) and that you are [logged in](https://vercel.com/docs/cli/login) to use the Conformance CLI.\n\nThe following sub-commands are available for this CLI.\n\nThe `audit` command runs Conformance on code without needing to install any NPM dependencies or build any of the code. This is useful for viewing Conformance results on a repository that you don't own and may not have permissions to modify or build.\n\n```\npnpm --package=@vercel-private/conformance dlx vercel-conformance audit\n```\n\n`yarn dlx` only works with Yarn version 2 or newer, for Yarn v1 use the npx command.\n\nIf you would like to store the results of the conformance audit in a file, you can redirect `stderr` to a file:\n\n```\npnpm --package=@vercel-private/conformance dlx vercel-conformance audit\n&> /tmp/conformance-results.txt\n```\n\nThe `init` command installs Conformance in the repository. See [Getting Started](https://vercel.com/docs/workflow-collaboration/conformance/getting-started#initialize-conformance) for more information on using this command.",
  "title": "vercel-conformance",
  "description": "Learn how Conformance improves collaboration, productivity, and software quality at scale.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/dashboard-overview",
  "markdown": "# Dashboard\n\nOnce you have enabled Conformance for your repository, you'll be able to see an overview of Conformance metrics every time you view your Vercel [dashboard](https://vercel.com/dashboard) through the list view:\n\n![See metrics overview from your Vercel dashboard](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701775829%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fconformance-vercel-dashboard-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![See metrics overview from your Vercel dashboard](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701775829%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fconformance-vercel-dashboard-dark.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSee metrics overview from your Vercel dashboard\n\nTo see your Conformance information in more detail, select the repository name.\n\nThe projects and packages from your monorepo are listed with information pulled from the repository, such as the [Code Owners](https://vercel.com/docs/workflow-collaboration/code-owners) and [Conformance score](https://vercel.com/docs/workflow-collaboration/conformance).\n\nA _project_ is a workspace in your monorepo that could be deployed, such as a Next.js application. If you have deployed the project on Vercel, there will be a link directly to that Vercel project. A _package_ is a non-deployable workspace from the monorepo, such as shared libraries.\n\n1.  From your Conformance overview, you can use the tabs, search bar, or sorting drop-down to find your project or package\n2.  Select the project or package from the list to show information pulled from the source code. This information includes [Catalog metadata](https://vercel.com/docs/workflow-collaboration/conformance/dashboard-overview/catalog), such as links to Slack channels, issue trackers, or on-call rotations\n\n![View code information for each project and package in your repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701775104%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Frepo-overview-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![View code information for each project and package in your repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701775103%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Frepo-overview-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nView code information for each project and package in your repository\n\nOnce you have enabled Conformance, you can view the metrics in the Conformance overview. These metrics highlight top level information from that may need action. You can click through each of these metrics to review them in more detail.\n\n![View a summary of Conformance and Code Owners metrics](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701775103%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fmetrics-overview-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![View a summary of Conformance and Code Owners metrics](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701775103%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fmetrics-overview-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nView a summary of Conformance and Code Owners metrics\n\nInformation from the repository is displayed on the right so users can quickly find related data for the repository, such as the Slack channel to ask questions or file issues.\n\n![View the code metadata for your repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701775103%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fmetadata-overview-light.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![View the code metadata for your repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701775103%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fmetadata-overview-dark.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nView the code metadata for your repository",
  "title": "Dashboard",
  "description": "Learn how to use the Conformance dashboard",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/customize",
  "markdown": "# Customizing Conformance\n\nThe Conformance framework may be customized so that you can manage rules for different workspaces in your repository or to pass configuration to the rules.\n\nTo customize Conformance, first define a `conformance.config.jsonc` file in the root of your directory.\n\nBoth `conformance.config.jsonc` and `conformance.config.json` are supported, and both support JSONC (JSON with JavaScript-style comments). We recommend using the `.jsonc` extension as it helps other tools (i.e. VS Code) to provide syntax highlighting and validation.\n\nTo view Conformance metrics in the Vercel dashboard, you need to be using at least version [1.7.0](https://vercel.com/docs/workflow-collaboration/conformance/changelog#1.7.0) of the [Conformance CLI](https://vercel.com/docs/workflow-collaboration/conformance/cli) and also to add your team ID and repository ID to the Conformance configuration file.\n\n*   Instructions for finding your team ID can be found [here](https://vercel.com/docs/accounts/create-a-team#find-your-team-id).\n*   To find your repository ID, visit `https://vercel.com/{team name}/~/repos/{repository name}/settings` and copy the ID from the `Repo ID` section.\n\n```\n{\n  \"configuration\": {\n    \"repositoryId\": \"\",\n    \"teamId\": \"\",\n  },\n}\n```\n\nTo enable all Conformance rules by default, add the `defaultRules` field to the top level `configuration` section of the config file:\n\n```\n{\n  \"configuration\": {\n    \"defaultRules\": \"all\",\n  },\n}\n```\n\nEach Conformance override accepts a `restrictTo` parameter which controls what workspaces the configuration will apply to. If no `restrictTo` is specified, then the configuration will apply globally to every workspace.\n\n```\n{\n  \"overrides\": [\n    {\n      // NOTE: No `restrictTo` is specified here so this applies globally.\n      \"rules\": {},\n    },\n  ],\n}\n```\n\nConformance configuration can be applied to specific workspaces using either the name of the workspace or the directory of the workspace on the `restrictTo` field:\n\n*   Use the `workspaces` field, which accepts a list of workspace names:\n    \n    ```\n    {\n      \"overrides\": [\n        {\n          \"restrictTo\": {\n            \"workspaces\": [\"eslint-config-custom\"],\n          },\n          \"rules\": {},\n        },\n      ],\n    }\n    ```\n    \n*   Use the `directories` field to specify a directory. All workspaces that live under that directory will be matched:\n    \n    ```\n    {\n      \"overrides\": [\n        {\n          \"restrictTo\": {\n            \"directories\": [\"configs/\"],\n          },\n          \"rules\": {},\n        },\n      ],\n    }\n    ```\n    \n    This will match `configs/tsconfig` and `configs/eslint-config-custom`.\n*   Set the `root` field to true to match the root of the repository:\n    \n    ```\n    {\n      \"overrides\": [\n        {\n          \"restrictTo\": {\n            \"root\": true,\n          },\n          \"rules\": {},\n        },\n      ],\n    }\n    ```\n    \n\nIf multiple overrides are specified that affect the same workspace, the configurations will be unioned together. If there are conflicts between the overrides, the last specified value will be used.\n\nTo enable or disable a Conformance rule, use the `rules` field. This field is an object literal where the keys are the name of the [rule](https://vercel.com/docs/workflow-collaboration/conformance/rules) and the values are booleans or another object literal containing a [rule-specific configuration](#configuring-a-conformance-rule).\n\nFor example, this configuration will disable the `TYPESCRIPT_CONFIGURATION` rule:\n\n```\n{\n  \"overrides\": [\n    {\n      \"rules\": {\n        \"TYPESCRIPT_CONFIGURATION\": false,\n      },\n    },\n  ],\n}\n```\n\nAll rules are enabled by default unless explicitly disabled in the config.\n\nSome Conformance rules can be configured to alter behavior based on the project settings. Instead of a `boolean` being provided in the `rules` configuration, an object literal could be passed with the configuration for that rule.\n\nFor example, this configuration will require a specific list of ESLint plugins in every workspace:\n\n```\n{\n  \"overrides\": [\n    {\n      \"rules\": {\n        \"ESLINT_CONFIGURATION\": {\n          \"requiredPlugins\": [\"@typescript-eslint\"],\n        },\n      },\n    },\n  ],\n}\n```\n\nIf you want to specify additional information or link to project-specific documentation, you can add custom error messages to the output of any conformance rule. These messages can be added globally to all rules or on a per-rule basis.\n\nTo add an error message to the output of all rules, add `globalErrorMessage` to the `configuration` section of the override:\n\n```\n{\n  \"overrides\": [\n    {\n      \"configuration\": {\n        \"globalErrorMessage\": \"See link_to_docs for more information.\",\n      },\n    },\n  ],\n}\n```\n\nTo add an error message to the output of one specific rule, add an entry for that test to the `additionalErrorMessages` field:\n\n```\n{\n  \"overrides\": [\n    {\n      \"configuration\": {\n        \"additionalErrorMessages\": {\n          \"TYPESCRIPT_CONFIGURATION\": \"Please see project_link_to_typescript_docs for more information.\",\n        },\n      },\n    },\n  ],\n}\n```",
  "title": "Customizing Conformance",
  "description": "Learn how to manage and configure your Conformance rules.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/create-integration/approval-checklist",
  "markdown": "# Integration Approval Checklist\n\nUse this checklist to ensure all necessary steps have been taken for a great integration experience to get listed on the [Integration Marketplace](https://vercel.com/integrations). Make sure you read the [after integration creation guide](https://vercel.com/docs/integrations/create-integration#after-integration-creation) before you start.\n\nNavigate to `/integrations/:slug` to view the listing for the integration.\n\n*   Is the [logo](https://vercel.com/docs/integrations/create-integration/submit-integration#logo) properly centered and cropped? Does it look good in both light and dark mode?\n    \n\n*   Is the first image high-quality and suitable to be used in a [Open Graph (OG)](https://vercel.com/docs/functions/edge-functions/og-image-generation) image (that gets automatically generated)?\n    \n*   Check to see if any of the images are blurry or show info they shouldn't. Do they all look professional / well polished?\n    \n\nExamples:\n\n*   Does the description section use markdown where appropriate. For example, `[link](#)`\n    \n*   If there is an Instructions section, is it additional and helpful information? Avoid a step-by-step guide on how to install it.\n    \n*   Do the instructions clearly mention all [environment variables](https://vercel.com/docs/integrations/create-integration/submit-integration#additional-information) that get set and ideally, what they are used for? Use the [comment property](https://vercel.com/docs/rest-api/endpoints#projects/create-one-or-more-environment-variables/body-parameters) when creating environment variables.\n    \n*   Does additional documentation exist? If so, is the documentation URL set?\n    \n\nFrom clicking the install button, a wizard should pop up, guiding you through the setup process.\n\n*   Does the UI offer to select and map Vercel projects with the third-party? Important: Note that the project selection before the popup exists for security reasons. It does not imply the projects on which the user wants to install the integration.\n    \n*   Does the UI intelligently pre-select the first Vercel project to streamline the installation process and minimize user interaction?\n    \n*   If a user limits the scope to a single project within Vercel, does the popup obey this / make sense? Is the project selection disabled?\n    \n*   Are long project names on the project selection handled correctly without breaking the UI?\n    \n*   Does the UI come with sensible defaults during installation?\n    \n*   Are advanced settings hidden behind a toggle? For example, for a database integration selecting the region, RAM & CPU should be preselected and hidden so the UI is not bloated by many settings\n    \n*   Does the UI use pagination when listing all available projects? Users may have more than the pagination limit of the projects API.\n    \n*   Is it impossible for users to exit the installation flow? Links such as the logo or footer should always open in a new tab to prevent users from navigating away from the redirect URL during installation.\n    \n*   Does the authentication flow, such as sign-up, login, or forgotten password, work without interrupting the installation process? Can the user complete the installation successfully?\n    \n\n[\n\nDeploy Buttons\n\n](https://vercel.com/docs/deployments/deploy-button)\n\nallow users to install an integration together with an example repository on GitHub. This is a great way to get started with an integration.\n\n*   Does the integration crash if it's already present on the [selected scope](https://vercel.com/docs/integrations/create-integration/submit-integration#deploy-button-installation-flow)? The integration shouldn't treat the passed `configurationId` as a new installation since it was previously installed.\n    \n\nAfter we have installed an integration (through the Marketplace), you should be presented with the details of your installation.\n\n*   Is there a Configuration URL for the integration? Users should be able to modify linked projects by selecting projects in a similar way as during installation.\n    \n*   Are the environment variables set correctly with the right target?",
  "title": "Integration Approval Checklist",
  "description": "The integration approval checklist is used ensure all necessary steps have been taken for a great integration experience.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules",
  "markdown": "# Conformance Rules\n\n[ESLINT\\_NEXT\\_RULES\\_REQUIRED](https://vercel.com/docs/workflow-collaboration/conformance/rules/ESLINT_NEXT_RULES_REQUIRED)Requires that ESLint is configured for Next.js.[NEXTJS\\_MISSING\\_MODULARIZE\\_IMPORTS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_MODULARIZE_IMPORTS)Requires that Next.js applications that use libraries with barrel exports use `modularizeImports` to minimize impact on dev compilation speed and bundle size.[NEXTJS\\_MISSING\\_OPTIMIZE\\_PACKAGE\\_IMPORTS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_OPTIMIZE_PACKAGE_IMPORTS)Requires that Next.js applications that use libraries with barrel exports use `optimizePackageImports` to minimize impact on dev compilation speed and bundle size.[NEXTJS\\_MISSING\\_NEXT13\\_TYPESCRIPT\\_PLUGIN](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_NEXT13_TYPESCRIPT_PLUGIN)Applications using Next 13 should use the \"next\" TypeScript plugin for an improved Next.js experience.[NEXTJS\\_MISSING\\_REACT\\_STRICT\\_MODE](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_REACT_STRICT_MODE)Applications using Next.js should enable React Strict Mode to identify unsafe lifecycles and legacy API usage.[NEXTJS\\_MISSING\\_SECURITY\\_HEADERS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_SECURITY_HEADERS)Requires that important security headers are set correctly for Next.js apps and contain valid directives.[NEXTJS\\_NO\\_ASYNC\\_LAYOUT](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_LAYOUT)Ensures that the exported Next.js `layout` component and its transitive dependencies are not asynchronous, as that can block the rendering of the layout and the rest of the page.[NEXTJS\\_NO\\_ASYNC\\_PAGE](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_PAGE)Ensures that the exported Next.js `page` component and its transitive dependencies are not asynchronous, as that blocks the rendering of the page.[NEXTJS\\_NO\\_BEFORE\\_INTERACTIVE](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_BEFORE_INTERACTIVE)Requires review of usage of the `beforeInteractive` strategy in `Script` (`next/script`) elements as this can cause performance issues.[NEXTJS\\_NO\\_CLIENT\\_DEPS\\_IN\\_MIDDLEWARE](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_CLIENT_DEPS_IN_MIDDLEWARE)Disallows dependencies on client libraries to improve bundle size and execution time of Next.js middleware.[NEXTJS\\_NO\\_DYNAMIC\\_AUTO](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_DYNAMIC_AUTO)Prevent usage of `force-dynamic` as a dynamic page rendering strategy.[NEXTJS\\_NO\\_FETCH\\_IN\\_SERVER\\_PROPS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_FETCH_IN_SERVER_PROPS)Prevent relative `fetch` calls in `getServerSideProps` from being added to Next.js applications.[NEXTJS\\_NO\\_GET\\_INITIAL\\_PROPS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_GET_INITIAL_PROPS)Requires any use of `getInitialProps` in Next.js pages be reviewed and approved, and encourages using `getServerSideProps` or `getStaticProps` instead.[NEXTJS\\_NO\\_PRODUCTION\\_SOURCE\\_MAPS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_PRODUCTION_SOURCE_MAPS)Applications using Next.js should not enable production source maps so that they don't publicly share source code.[NEXTJS\\_NO\\_SELF\\_HOSTED\\_VIDEOS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_SELF_HOSTED_VIDEOS)Prevent video files from being added to Next.js applications to improve performance and bandwidth usage.[NEXTJS\\_NO\\_TURBO\\_CACHE](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_TURBO_CACHE)Prevent Turborepo from caching the Next.js `.next/cache` folder to prevent an oversized cache.[NEXTJS\\_REQUIRE\\_EXPLICIT\\_DYNAMIC](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_REQUIRE_EXPLICIT_DYNAMIC)Requires explicitly setting the `dynamic` route segment option for Next.js pages and routes.[NEXTJS\\_SAFE\\_NEXT\\_PUBLIC\\_ENV\\_USAGE](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_SAFE_NEXT_PUBLIC_ENV_USAGE)Usage process.env.NEXT_PUBLIC_\\* environment variables must be allowlisted.[NEXTJS\\_SAFE\\_SVG\\_IMAGES](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_SAFE_SVG_IMAGES)Prevent `dangerouslyAllowSVG` without Content Security Policy in Next.js applications.[NEXTJS\\_SAFE\\_URL\\_IMPORTS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_SAFE_URL_IMPORTS)Prevent unsafe URL Imports from being added to Next.js applications.[NEXTJS\\_UNNEEDED\\_GET\\_SERVER\\_SIDE\\_PROPS](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_UNNEEDED_GET_SERVER_SIDE_PROPS)Catches usages of `getServerSideProps` that could use static rendering instead, improving the performance of those pages.[NEXTJS\\_USE\\_NATIVE\\_FETCH](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NATIVE_FETCH)Requires using native `fetch` which Next.js provides, removing the need for third-party fetch libraries.[NEXTJS\\_USE\\_NEXT\\_FONT](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_FONT)Requires using `next/font` (when possible), which optimizes fonts for improved privacy and performance.[NEXTJS\\_USE\\_NEXT\\_IMAGE](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_IMAGE)Requires that `next/image` is used for all images for improved performance.[NEXTJS\\_USE\\_NEXT\\_SCRIPT](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_SCRIPT)Requires that `next/script` is used for all scripts for improved performance.[NO\\_FETCH\\_FROM\\_MIDDLEWARE](https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_FETCH_FROM_MIDDLEWARE)Requires that any `fetch` call that is depended on transitively by Next.js middleware be reviewed and approved before use for performance reasons.[REACT\\_NO\\_STATIC\\_IMPORTS\\_IN\\_EVENT\\_HANDLERS](https://vercel.com/docs/workflow-collaboration/conformance/rules/REACT_NO_STATIC_IMPORTS_IN_EVENT_HANDLERS)Prevent static imports that are referenced only in React event handlers from being eagerly loaded in React components.",
  "title": "Conformance Rules",
  "description": "Learn how Conformance improves collaboration, productivity, and software quality at scale.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/custom-rules",
  "markdown": "# Custom Rules\n\nVercel's built-in Conformance rules are crafted from extensive experience in developing large-scale codebases and high-quality web applications. Recognizing the unique needs of different companies, teams, and products, Vercel offers configurable, no-code custom rules. These allow for tailored solutions to specific challenges.\n\nCustom rules in Vercel feature unique error names and messages, providing deeper context and actionable resolution guidance. For example, they may include:\n\n*   Links to internal documentation\n*   Alternative methods for logging issues\n*   Information on who to contact for help\n\nYou can use custom rules to proactively prevent future issues, to reactively prevent issues from reoccuring, and/or as a mitigation tool.\n\nWe support the following custom rules types:\n\n| Type | Description |\n| --- | --- |\n| [`forbidden-code`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-code) | Disallows code and code patterns through string and regular expression matches. |\n| [`forbidden-properties`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-properties) | Disallows properties from being read, written, and/or called. |\n| [`forbidden-dependencies`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-dependencies) | Disallows one or more files from depending on one or more predefined modules. |\n| [`forbidden-imports`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-imports) | Disallows one or more files from importing one or more predefined modules. |\n| [`forbidden-packages`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-packages) | Disallows packages from being listed as dependencies in `package.json` files. |\n\nThe no-code custom rules are defined and [configured](https://vercel.com/docs/workflow-collaboration/conformance/customize) in `conformance.config.jsonc`.\n\nIn this example, you will set up a custom rule with the [`forbidden-imports`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-imports) type. This rule disallows importing a package called `api-utils`, and suggests to users that they should instead use a newer version of that package.\n\n1.  At the root of your directory, create a file named `conformance.config.jsonc`. If one already exists, skip to the next step.\n    \n2.  First, define a new custom rule in `conformance.customRules`.\n    \n    All custom rules require the properties:\n    \n    *   `ruleType`\n    *   `ruleName`\n    *   `errorMessage`\n    \n    Other required and optional configuration depends on the custom rule type. In this example, we're using the `forbidden-imports` type, which requires an `moduleNames` property.\n    \n    ```\n    {\n      \"customRules\": [\n        {\n          \"ruleType\": \"forbidden-imports\",\n          \"ruleName\": \"NO_API_UTILS\",\n          \"categories\": [\"code-health\"],\n          \"errorMessage\": \"The `api-utils` package has been deprecated. Please use 'api-utils-v2' instead, which includes more features.\",\n          \"errorLink\": \"https://vercel.com/docs\",\n          \"description\": \"Don't allow importing the deprecated `api-utils` package.\",\n          \"severity\": \"major\",\n          \"moduleNames\": [\"my-utils\"],\n        },\n      ],\n    }\n    ```\n    \n3.  As all custom rules are disabled by default, you'll need to [enable rules](https://vercel.com/docs/workflow-collaboration/conformance/customize#managing-a-conformance-rule) in `conformance.overrides`. Refer to the documentation for each custom rule type for more information.\n    \n    Rule names must be prefixed with `\"CUSTOM\"` when enabled, and any allowlist files and entries will also be prefixed with `\"CUSTOM\"`. This prefix is added to ensure that the names of custom rules don't conflict with built-in rules.\n    \n    In the example below, we're enabling the rule for the entire project by providing it with the required configuration (targeting all files in `src`).\n    \n    ```\n    {\n      \"overrides\": [\n        {\n          \"rules\": {\n            \"CUSTOM.NO_API_UTILS\": {\n              \"paths\": [\"src\"],\n            },\n          },\n        },\n      ],\n      \"customRules\": [\n        // ...\n      ],\n    }\n    ```\n    \n    In this example, we've used the same configuration as above, but have also restricted the rule and configuration to the `api-teams` workspace.\n    \n    ```\n    {\n      \"overrides\": [\n        {\n          \"restrictTo\": {\n            \"workspaces\": [\"api-teams\"],\n          },\n          \"rules\": {\n            \"CUSTOM.NO_API_UTILS\": {\n              \"paths\": [\"src\", \"!src/**/*.test.ts\"],\n            },\n          },\n        },\n      ],\n      \"customRules\": [\n        // ...\n      ],\n    }\n    ```\n    \n4.  In this example used the same configuration as above, but have also restricted the rule and configuration to the `api-teams` workspace:\n    \n    ```\n    {\n      \"overrides\": [\n        {\n          \"restrictTo\": {\n            \"workspaces\": [\"api-teams\"],\n          },\n          \"rules\": {\n            \"CUSTOM.NO_API_UTILS\": {\n              \"paths\": [\"src\", \"!src/**/*.test.ts\"],\n            },\n          },\n        },\n      ],\n      \"customRules\": [\n        // ...\n      ],\n    }\n    ```",
  "title": "Custom Rules",
  "description": "Learn how Conformance improves collaboration, productivity, and software quality at scale.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/cms/agility-cms",
  "markdown": "# Vercel Agility CMS Integration\n\nAgility CMS is a headless content management system designed for flexibility and scalability. It allows developers to create and manage digital content independently from the presentation layer, enabling seamless integration with various front-end frameworks and technologies.\n\nTo get started with the Agility CMS on Vercel deploy the template below:\n\nOr, follow the steps below to install the integration:\n\n1.  To pull in environment variables from Agility CMS to your Vercel project, you need to install the [Vercel CLI](https://vercel.com/docs/cli). Run the following command in your terminal:\n    \n2.  Navigate to the [Agility CMS integration](https://vercel.com/integrations/agility-cms) and follow the steps to install the integration.\n    \n3.  Once you've installed the Agility CMS integration, you can pull in environment variables from Agility CMS to your Vercel project. In your terminal, run:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nSee your installed CMSs documentation for next steps on how to use the integration.",
  "title": "Vercel Agility CMS Integration",
  "description": "Learn how to integrate Agility CMS with Vercel. Follow our tutorial to deploy the Agility CMS template or install the integration for flexible and scalable content management.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/deploy-button/integrations",
  "markdown": "# Using Integrations with the Deploy Button\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `integration-ids` | `string[]` | A comma-separated list of required Integrations IDs: `oac_4mkAfc68cuDV4suZRlgkn3R9, oac_JI9dt8xHo7UXmVV6mZTygMNZ` |\n\nThis parameter allows you to specify a list of Integration IDs. When specified, the corresponding Integrations will be required to be added before the Project can be imported. You can add up to 3 Integrations per Project.\n\nYou can find the IDs of your Integrations in the [Integrations Console](https://vercel.com/dashboard/integrations/console).\n\nIntegrations which contain a \"UI Hook URL\" cannot be rendered in the Deploy Flow.\n\nThe example below shows how to use the `integration-ids` parameter in a Deploy Button source URL:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&integration-ids=oac_1mkAfc68cuDV4suZRlgkn3Re\n```\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `skippable-integrations` | `number` | Mark the list of provided Integrations as optional |\n\nIf this parameter is present, the user will be able to add one of the provided Integrations or skip them entirely, instead of being forced to add all of them.\n\nBecause the user will only be able to select one (not multiple) of the optional Integrations, they should all serve the same purpose. For example, if the purpose is error tracking, the Integrations [Sentry](https://vercel.com/integrations/sentry) and [Datadog](https://vercel.com/integrations/datadog-logs) could be defined here.\n\nTo use this parameter, you also need to specify at least one Integration.\n\nThe example below shows how to use the `skippable-integrations` parameter in a Deploy Button source URL:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&integration-ids=oac_1mkAfc68cuDV4suZRlgkn3Re&skippable-integrations=1\n```",
  "title": "Using Integrations with the Deploy Button",
  "description": "Learn how to use Integrations with the Vercel Deploy Button.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/changelog",
  "markdown": "# Conformance changelog\n\n```\npnpm update --latest --recursive @vercel-private/conformance\n```\n\nThis patch update has the following changes:\n\n*   Optimize checking allowlists for existing Conformance issues\n*   Isolate some work by moving it to a worker thread\n*   Fix error when trying to parse empty JavaScript/TypeScript files\n\nThis patch update has the following changes:\n\n*   Parse ESLint JSON config with a JSONC parser\n*   Fix retrieving latest version of CLI during `init`\n\nThis patch update has the following changes:\n\n*   Fix updating allowlist files when entries conflict or already exist\n\nThis minor update has the following changes:\n\n*   Replace [`NEXTJS_MISSING_MODULARIZE_IMPORTS`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_MODULARIZE_IMPORTS) Next.js rule with [`NEXTJS_MISSING_OPTIMIZE_PACKAGE_IMPORTS`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_OPTIMIZE_PACKAGE_IMPORTS)\n*   Fix showing error messages for rules\n*   Update allowlist entry details for [`REQUIRE_CARET_DEPENDENCIES`](https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_CARET_DEPENDENCIES)\n\nThis minor update has the following changes:\n\n*   Ensure in-memory objects are cleaned up after each run\n*   Fix detection of Next.js apps in certain edge cases\n*   Bump dependencies for performance and security\n\nThis patch update has the following changes:\n\n*   Fix the init command for Yarn classic (v1)\n*   Update AST caching to prevent potential out of memory issues\n*   Fix requesting git authentication when sending Conformance metrics\n\nThis minor update has the following changes:\n\n*   Support non-numeric Node version numbers like `lts` in [`REQUIRE_NODE_VERSION_FILE`](https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_NODE_VERSION_FILE).\n*   Add version range support for [`forbidden-packages`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-packages) custom rules.\n*   Updates dependencies for performance and security.\n\nNew rules:\n\n*   [`REQUIRE_DOCS_ON_EXPORTED_FUNCTIONS`](https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_DOCS_ON_EXPORTED_FUNCTIONS). Requires that all exported functions have JSDoc comments.\n\nThis minor update captures and sends Conformance runs metrics to Vercel. Your team will be able to view those metrics in the Vercel dashboard.\n\nThe following rules also include these fixes:\n\nThis minor update introduces multiple new rules, fixes and improvements for existing rules and the CLI, and updates to some dependencies for performance and security.\n\nNotably, this release introduces a new `needsResolution` flag. This is used by the CLI and will be used in future metrics as a mechanism to opt-out of further tracking of this issue.\n\nThe following new rules have been added:\n\n*   [`NO_UNNECESSARY_PROP_SPREADING`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_UNNECESSARY_PROP_SPREADING): Disallows the usage of object spreading in JSX components.\n\nThe following rules had fixes and improvements:\n\n*   [`REQUIRE_CARET_DEPENDENCIES`](https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_CARET_DEPENDENCIES): Additional cases are now covered by this rule.\n*   [`NO_INSTANCEOF_ERROR`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_INSTANCEOF_ERROR): Multiple issues in the same file are no longer reported as a single issue.\n*   [`NO_INLINE_SVG`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_INLINE_SVG): Multiple issues in the same file are no longer reported as a single issue.\n*   [`REQUIRE_ONE_VERSION_POLICY`](https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_ONE_VERSION_POLICY): Multiple issues in the same file are now differentiated by the package name and the location of the entry in `package.json`.\n\nThis minor update introduces a new rule and improvements to our telemetry.\n\nThe following new rules have been added:\n\n*   [`NO_INSTANCEOF_ERROR`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_INSTANCEOF_ERROR): Disallows using `error instanceof Error` comparisons due to risk of false negatives.\n\nThis minor update introduces multiple new rules, fixes and improvements for existing rules and the CLI, and updates to some dependencies for performance and security.\n\nThe following new rules have been added:\n\n*   [`NEXTJS_SAFE_NEXT_PUBLIC_ENV_USAGE`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_SAFE_NEXT_PUBLIC_ENV_USAGE): Requires allowlist entries for any usage of `NEXT_PUBLIC_*` environment variables.\n*   [`NO_POSTINSTALL_SCRIPT`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_POSTINSTALL_SCRIPT): Prevents the use of `\"postinstall\"` script in package for performance reasons.\n*   [`REQUIRE_CARET_DEPENDENCIES`](https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_CARET_DEPENDENCIES): Requires that all `dependencies` and `devDependencies` have a `^` prefix.\n\nThe following rules had fixes and improvements:\n\n*   [`PACKAGE_MANAGEMENT_REQUIRED_README`](https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_MANAGEMENT_REQUIRED_README): Lowercase `readme.md` files are now considered valid.\n*   [`REQUIRE_NODE_VERSION_FILE`](https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_NODE_VERSION_FILE): Resolved an issue preventing this rule from correctly reporting issues.\n*   [`NO_INLINE_SVG`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_INLINE_SVG): Detection logic now handles template strings alongside string literals.\n*   The [`forbidden-imports`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-imports) custom rule type now supports `paths` being defined in [rule configuration](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-imports#configuring-this-rule-type).\n\nThis minor update introduces new rules to improve Next.js app performance, resolves an issue where TypeScript's `baseUrl` wasn't respected when traversing files, and fixes an issue with dependency traversal which caused some rules to return false positives in specific cases.\n\nThe following new rules have been added:\n\n*   [`NEXTJS_REQUIRE_EXPLICIT_DYNAMIC`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_REQUIRE_EXPLICIT_DYNAMIC): Requires explicitly setting the `dynamic` route segment option for Next.js pages and routes.\n*   [`NO_INLINE_SVG`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_INLINE_SVG): Prevents the use of `svg` tags inline, which can negatively impact the performance of both browser and server rendering.\n\nThis patch updates some Conformance dependencies for performance and security, and improves handling of edge case for both [`NEXTJS_NO_ASYNC_LAYOUT`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_LAYOUT) and [`NEXTJS_NO_ASYNC_PAGE`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_PAGE).\n\nThis minor update introduces a new rule, and improvements to both `NEXTJS_NO_ASYNC_LAYOUT` and `NEXTJS_NO_ASYNC_PAGE`.\n\nThe following new rules have been added:\n\n*   [`REQUIRE_NODE_VERSION_FILE`](https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_NODE_VERSION_FILE): Requires that workspaces have a valid Node.js version file (`.node-version` or `.nvmrc`) file defined.\n\nThis minor update introduces new rules to improve Next.js app performance, enhancements to the CLI output, and improvements to our telemetry. While telemetry improvements are not directly user-facing, they enhance our ability to monitor and optimize performance.\n\nThe following new rules have been added:\n\n*   [`NEXTJS_NO_ASYNC_PAGE`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_PAGE): Ensures that the exported Next.js page component and its transitive dependencies are not asynchronous, as that blocks the rendering of the page.\n*   [`NEXTJS_NO_ASYNC_LAYOUT`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_LAYOUT): Ensures that the exported Next.js layout component and its transitive dependencies are not asynchronous, as that can block the rendering of the layout and the rest of the page.\n*   [`NEXTJS_USE_NATIVE_FETCH`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NATIVE_FETCH): Requires using native `fetch` which Next.js polyfills, removing the need for third-party fetch libraries.\n*   [`NEXTJS_USE_NEXT_FONT`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_FONT): Requires using `next/font` (when possible), which optimizes fonts for improved privacy and performance.\n*   [`NEXTJS_USE_NEXT_IMAGE`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_IMAGE): Requires that `next/image` is used for all images for improved performance.\n*   [`NEXTJS_USE_NEXT_SCRIPT`](https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_SCRIPT): Requires that `next/script` is used for all scripts for improved performance.\n\nInitial release of Conformance.",
  "title": "Conformance changelog",
  "description": "Find out what's new in each release of Conformance.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/cms/butter-cms",
  "markdown": "# Vercel ButterCMS Integration\n\nLearn how to integrate ButterCMS with Vercel. Follow our tutorial to set up the ButterCMS template on Vercel and manage content seamlessly using ButterCMS API.\n\nButterCMS is a headless content management system that enables developers to manage and deliver content through an API.\n\nTo get started with the ButterCMS on Vercel deploy the template below:\n\nOr, follow the steps below to install the integration:\n\n1.  To pull in environment variables from ButterCMS to your Vercel project, you need to install the [Vercel CLI](https://vercel.com/docs/cli). Run the following command in your terminal:\n    \n2.  Navigate to the [ButterCMS integration](https://vercel.com/integrations/buttercms) and follow the steps to install the integration.\n    \n3.  Once you've installed the ButterCMS integration, you can pull in environment variables from ButterCMS to your Vercel project. In your terminal, run:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nSee your installed CMSs documentation for next steps on how to use the integration.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Vercel ButterCMS Integration",
  "description": "Learn how to integrate ButterCMS with Vercel. Follow our tutorial to set up the ButterCMS template on Vercel and manage content seamlessly using ButterCMS API.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/cms/dato-cms",
  "markdown": "# Vercel DatoCMS Integration\n\nDatoCMS is a headless content management system designed for creating and managing digital content with flexibility. It provides a powerful API and a customizable editing interface, allowing developers to build and integrate content into any platform or technology stack.\n\nTo get started with DatoCMS on Vercel, follow the steps below to install the integration:\n\n1.  To pull in environment variables from DatoCMS to your Vercel project, you need to install the [Vercel CLI](https://vercel.com/docs/cli). Run the following command in your terminal:\n    \n2.  Navigate to the [DatoCMS integration](https://vercel.com/integrations/datocms) and follow the steps to install the integration.\n    \n3.  Once you've installed the DatoCMS integration, you can pull in environment variables from DatoCMS to your Vercel project. In your terminal, run:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nSee your installed CMSs documentation for next steps on how to use the integration.\n\nContent Link enables you to edit content on websites using headless CMSs by providing links on elements that match a content model in the CMS. This real-time content visualization allows collaborators to make changes without needing a developer's assistance.\n\nContent Link can be enabled on a preview deployment through the Edit Mode button on the [Vercel Toolbar's](https://vercel.com/docs/workflow-collaboration/vercel-toolbar).\n\nThe corresponding model in the CMS determines an editable field. Hover over an element to display a link in the top-right corner of the element. Select the link to open the related CMS field for editing.\n\n![An editable element with a link to open the related field in the CMS](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fopen-in-sanity-light.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![An editable element with a link to open the related field in the CMS](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fopen-in-sanity-dark.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn editable element with a link to open the related field in the CMS\n\nUsing this feature doesn't require any additional configuration or code changes to the page you want to edit.",
  "title": "Vercel DatoCMS Integration",
  "description": "Learn how to integrate DatoCMS with Vercel. Follow our step-by-step tutorial to set up and manage your digital content seamlessly using DatoCMS API.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/allowlist",
  "markdown": "# Conformance Allowlists\n\nConformance allowlists enable developers to integrate code into the codebase, bypassing specific Conformance rules when necessary. This helps with collaboration, ensures gradual rule implementation, and serves as a systematic checklist for addressing issues.\n\nAn allowlist entry looks like the following:\n\n```\n{\n  \"testName\": \"NEXTJS_MISSING_SECURITY_HEADERS\",\n  \"entries\": [\n    {\n      \"testName\": \"NEXTJS_MISSING_SECURITY_HEADERS\",\n      \"reason\": \"TODO: This existed before the Conformance test was added but should be fixed.\",\n      \"location\": {\n        \"workspace\": \"dashboard\",\n        \"filePath\": \"next.config.js\"\n      },\n      \"details\": {\n        \"missingField\": \"headers\"\n      }\n    }\n  ]\n}\n```\n\nThe allowlist entry contains the following fields:\n\n*   `testName`: The name of the triggered test\n*   `needsResolution`: Whether the allowlist entry needs to be resolved\n*   `reason`: Why this code instance is allowed despite Conformance catching it\n*   `location`: The file path containing the error\n*   `details` (optionally): Details about the Conformance error\n\nAn allowlist entry will match an existing one when the `testName`, `location`, and `details` fields all match. The `reason` is only used for documentation purposes.\n\nThis field is used by the CLI and our metrics to assess if an allowlisted issue is something that needs to be resolved. The default value is `true`. When set to `false`, this issue is considered to be \"accepted\" by the team and will not show up in future metrics.\n\nAs this field was added after the release of Conformance, the value of this field is considered `true` when the field is missing from an allowlist entry.\n\nIn a monorepo, Conformance allowlists are located in an `.allowlists/` directory in the root directory of each workspace. For repository-wide rules, place allowlist entries in the top-level `.allowlists/` directory.\n\nThe Conformance CLI can add an allowlist entry for all the active errors. This can be useful when adding a new entry to the allowlist for review, or when a new check is being added to the codebase. To add an allowlist entry for all active errors in a package:\n\nFrom the package directory:\n\n```\npnpm conformance --allowlist-errors\n```\n\nFrom the root of a monorepo:\n\n```\npnpm --filter=<package-name> conformance --allowlist-errors\n```\n\nYou can use [Code Owners](https://vercel.com/docs/workflow-collaboration/code-owners) with allowlists for specific team reviews on updates. For instance, have the security team review security-related entries.\n\nTo configure Code Owners for all tests at the top level for the entire repository:\n\n```\n**/*.allowlist.json @org/team:required\n**/NO_CORS_HEADERS.* @org/security-team:required\n```\n\nFor a specific workspace, add a `.vercel.approvers` file in the `.allowlists` sub-directory:\n\n```\nNO_EXTERNAL_CSS_AT_IMPORTS.* @org/performance-team:required\n```\n\nThe `:required` check ensures any modifications need the specified owners' review.",
  "title": "Conformance Allowlists",
  "description": "Learn how to use allowlists to bypass your Conformance rules to merge changes into your codebase.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/cms/makeswift",
  "markdown": "# Vercel Makeswift Integration\n\nMakeswift is a no-code website builder designed for creating and managing React websites. It offers a drag-and-drop interface that allows users to design and build responsive web pages without writing code.\n\nTo get started with the Makeswift on Vercel deploy the template below:\n\nOr, follow the steps below to install the integration:\n\n1.  To pull in environment variables from Makeswift to your Vercel project, you need to install the [Vercel CLI](https://vercel.com/docs/cli). Run the following command in your terminal:\n    \n2.  Navigate to the [Makeswift integration](https://vercel.com/integrations/makeswift) and follow the steps to install the integration.\n    \n3.  Once you've installed the Makeswift integration, you can pull in environment variables from Makeswift to your Vercel project. In your terminal, run:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nSee your installed CMSs documentation for next steps on how to use the integration.",
  "title": "Vercel Makeswift Integration",
  "description": "Learn how to integrate Makeswift with Vercel. Makeswift is a no-code website builder designed for creating and managing React websites. Follow our tutorial to set up Makeswift and deploy your website on Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/security/pci-dss",
  "markdown": "# PCI DSS iframe Integration\n\nWhen you use an [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) to process payments, you create a secure conduit between your end users and your payment provider.\n\nIn accordance with Vercel's [shared responsibility model](https://vercel.com/docs/security/shared-responsibility), this approach facilitates:\n\n*   Data isolation: The payment card information entered in the `iframe` is isolated from Vercel’s environment and does not pass through Vercel's managed infrastructure\n*   Direct data transmission: Information entered in the `iframe` is sent directly to your payment processor so that Vercel never processes, stores, or has access to your end users’ payment card data\n*   Reduced PCI DSS scope: With isolation and direct data transmission, the scope of PCI DSS compliance is reduced. This simplifies compliance efforts and enhances security\n\n1.  Select a [payment provider](https://www.pcisecuritystandards.org/glossary/payment-processor/) that offers the following:\n    \n    *   End-to-end encryption\n    *   Data tokenization\n    *   Built-in fraud detection\n    *   3DS authentication protocol\n    *   Compliance with latest PCI DSS requirements\n2.  Embed the provider’s `iframe` in your application’s payment page\n    \n    This is an example code for a payment processor's `iframe`:\n    \n    ```\n    const PaymentProcessorIframe = (): JSX.Element => {\n      const paymentProcessorIframeURL = `https://${PAYMENT_PROCESSOR_BASE_URL}.com/secure-payment-form`;\n     \n      return (\n        <div className=\"container mx-auto my-10 rounded bg-white p-5 shadow-md\">\n          <iframe\n            src={paymentProcessorIframeURL}\n            frameBorder=\"0\"\n            width=\"100%\"\n            height=\"500px\"\n            sandbox=\"allow-forms allow-top-navigation allow-same-origin\"\n            className=\"h-auto w-full\"\n          />\n        </div>\n      );\n    };\n     \n    export default PaymentProcessorIframe;\n    ```\n    \n    The `sandbox` attribute and its values are often required by the payment processor:\n    \n    *   `allow-forms`: Enables form submissions in the `iframe`, essential for payment data entry\n    *   `allow-top-navigation`: Allows the `iframe` to change the full page URL. This is useful for post-transaction redirections\n    *   `allow-same-origin`: Permits the `iframe` to interact with resources from the hosting page's origin. This is important for functionality but slightly reduces isolation",
  "title": "PCI DSS iframe Integration",
  "description": "Learn how to integrate an iframe into your application to support PCI DSS compliance.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/code-owners/cli",
  "markdown": "# vercel-code-owners\n\nThe `vercel-code-owners` command provides functionality to initialize and validate Code Owners in your repository.\n\nThe Code Owners CLI is separate to the [Vercel CLI](https://vercel.com/docs/cli). However you must ensure that the Vercel CLI is [installed](https://vercel.com/docs/cli#installing-vercel-cli) and that you are [logged in](https://vercel.com/docs/cli/login) to use the Code Owners CLI.\n\nThe following sub-commands are available for this CLI.\n\nThe `init` command sets up code owners files in the repository. See [Getting Started](https://vercel.com/docs/workflow-collaboration/code-owners/getting-started#initalizing-code-owners) for more information on using this command.\n\nThe `validate` command checks the syntax for all Code Owners files in the repository for errors.\n\n```\npnpm vercel-code-owners validate\n```",
  "title": "vercel-code-owners",
  "description": "Learn how to use Code Owners with the CLI.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/code-owners/getting-started",
  "markdown": "# Getting Started with Code Owners\n\nTo [set up Code Owners](#setting-up-code-owners-in-your-repository) in your repository, you'll need to do the following:\n\n*   Set up [Vercel's private npm registry](https://vercel.com/docs/vercel-platform/private-registry) to install the necessary packages\n*   [Install and initialize](#setting-up-code-owners-in-your-repository) Code Owners in your repository\n*   [Add your repository](https://vercel.com/docs/workflow-collaboration/conformance/getting-started#adding-your-repository-to-the-vercel-dashboard) to your Vercel dashboard\n\nIf you've already set up Conformance, you may have already completed some of these steps.\n\nTo enable Code Owners for your Enterprise team, you'll need to request access through your Vercel account administrator.\n\n**Note:** Code Owners is available for Enterprise teams. To add it to your contract or upgrade to Enterprise, contact us\n\n[Contact Sales](https://vercel.com/contact/sales)\n\nVercel distributes packages with the `@vercel-private` scope through our private npm registry, and requires that each user using the package authenticates through a Vercel account.\n\nTo use the private npm registry, you'll need to follow the documentation to:\n\n*   [Set up your local environment](https://vercel.com/docs/vercel-platform/private-registry#setting-up-your-local-environment) – This should be completed by the team owner, but each member of your team will need to log in\n*   [Set up Vercel](https://vercel.com/docs/vercel-platform/private-registry#setting-up-vercel) – This should be completed by the team owner\n*   [Set up Code Owners for use with CI](https://vercel.com/docs/vercel-platform/private-registry#setting-up-your-ci-provider) – This should be completed by the team owner\n\nA GitHub App enables Code Owners functionality by adding reviewers and enforcing review checks for merging PRs.\n\n1.  The Code Owners CLI is separate to the [Vercel CLI](https://vercel.com/docs/cli), however it uses the Vercel CLI for authentication.\n    \n    Before continuing, please ensure that the Vercel CLI is [installed](https://vercel.com/docs/cli#installing-vercel-cli) and that you are [logged in](https://vercel.com/docs/cli/login).\n    \n2.  If you have an existing `CODEOWNERS` file in your repository, you can use the CLI to automatically migrate your repository to use Vercel Code Owners. Otherwise, you can skip this step.\n    \n    Start by running this command in your repository's root:\n    \n    ```\n    pnpm --package=@vercel-private/code-owners dlx vercel-code-owners init\n    ```\n    \n    `yarn dlx` only works with Yarn version 2 or newer, for Yarn v1 use the npx command.\n    \n    After running, check the installation success by executing:\n    \n3.  To install, you must be an organization owner or have the GitHub App Manager permissions.\n    \n    1.  Go to [https://github.com/apps/vercel/installations/new](https://github.com/apps/vercel/installations/new)\n    2.  Choose your organization for the app installation.\n    3.  Select repositories for the app installation.\n    4.  Click `Install` to complete the app installation in the chosen repositories.\n4.  After installation, define Code Owners files in your repository. Pull requests with changes in specified directories will automatically have reviewers added.\n    \n    Start by adding a `.vercel.approvers` file in a directory in your repository. List GitHub usernames or team names in the file, each on a new line:\n    \n    Then, run the [`validate`](https://vercel.com/docs/workflow-collaboration/code-owners/cli#validate) command to check the syntax and merge your changes into your repository:\n    \n    ```\n    pnpm vercel-code-owners validate\n    ```\n    \n5.  With the `.vercel.approvers` file merged into the main branch, test the flow by modifying any file within the same or child directory. Create a pull request as usual, and the system will automatically add one of the listed users as a reviewer.\n    \n6.  This step is optional\n    \n    By default, GitHub checks are optional and won't block merging. To make the Code Owners check mandatory, go to `Settings > Branches > [Edit] > Require status checks to pass before merging` in your repository settings.",
  "title": "Getting Started with Code Owners",
  "description": "Learn how to set up Code Owners for your codebase.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/code-owners/code-approvers",
  "markdown": "# Code Approvers\n\nCode Approvers are a list of [GitHub usernames or teams](https://docs.github.com/en/organizations/organizing-members-into-teams/about-teams) that can review and accept pull request changes to a directory or file.\n\nYou can enable Code Approvers for a directory by adding a `.vercel.approvers` file to that directory in your codebase. For example, this `.vercel.approvers` file defines the GitHub team `vercel/ui-team` as an approver for the `packages/design` directory:\n\nWhen a team is declared as an approver, all members of that team will be able to approve changes to the directory or file and at least one member of the team must approve the changes.\n\nCode Approvals by the correct owners are enforced through a GitHub check added by the Vercel GitHub App.\n\nWhen a pull request is opened, the GitHub App will check if the pull request contains changes to a directory or file that has Code Approvers defined.\n\nIf no Code Approvers are defined for the changes then the check will pass. Otherwise, the check will fail until the correct Code Approvers have approved the changes.\n\nCode Approvers are inherited from parent directories. If a directory does not have a `.vercel.approvers` file, then the approvers from the parent directory will be used. Furthermore, even if a directory does have a `.vercel.approvers` file, then the approvers from a parent directory with a `.vercel.approvers` file can also approve the changed files. This structure allows the most specific approver to review most of the code, but allows other approvers who have broader context and approval power to still review and approve the code when appropriate.\n\nFor example, the following `.vercel.approvers` file that's declared at the root of the codebase allows users `elmo` and `oscar` to approve changes to the `packages` directory as well.\n\nWhen a pull request is opened, the Vercel GitHub App will select the approvers for the changed files. `.vercel.approvers` files allow extensive definitions of file mappings to possible approvers. In many cases, there will be multiple approvers for the same changed file. The Vercel GitHub app selects the best reviewers for the pull request based on affinity of `.vercel.approvers` definitions and overall coverage of the changed files.\n\nYou can override the reviewer selection by specifying owners directly on the pull request description using:\n\n```\n[vercel:approver:@owner1]\n[vercel:approver:@owner2]\n```\n\nThe owners you specify must be valid approvers for the changed files in the pull request. Otherwise, Code Owners still requires approvals from the necessary owners.\n\nModifiers enhance the behavior of Code Approvers for individual users and teams. The available modifiers are: [silent](#silent), [notify](#notify), [required](#required), and [optional](#optional).\n\nA modifier doesn't affect the owner's ability to approve a pull request. However, it will affect how the approver is notified about the pull request and whether they are a blocking approver.\n\n```\n# Syntax for modifiers\n# Approver with no modifier\n@owner1\n# Approver with modifier\n@owner2:modifier\n```\n\nThe user or team is never requested for review. If the user is a non-silent approver in another `.vercel.approvers` file that is closer to the changed files in the directory structure, then they can still be requested for review.\n\nThe user or team is always notified through a comment on the pull request. This can be useful for teams that want to be notified on every pull request. Vercel will still rotate the selection of team members as the reviewer. This helps avoid the [bystander effect](https://en.wikipedia.org/wiki/Bystander_effect) in code reviews when teams are tagged instead of individuals.\n\n```\n# The team is always notified.\n@vercel/my-team:notify\n```\n\nThis user or team is always notified (through a comment) and is a required approver on the pull request. `required` reviews will block PR checks and do not respect ownership inheritance in the file hierarchy.\n\n```\n# Always notifed and are required reviewers.\n# The check won't pass until both `owner1` and `owner2` approve.\n@owner1:required\n@owner2:required\n```\n\nWhen you specify a team as a required reviewer only one member of that team is required to approve.\n\n```\n# The team is notifed and are required reviewers.\n# The check won't pass until one member of the team approves.\n@vercel/my-team:required\n```\n\nMost of the time you don't need to specify required approvers. Non-modified approvers are usually enough so that correct reviews are enforced.\n\nThe user or team is never requested for review. They are ignored as owners when computing review requirements. The owner can still approve files they have coverage over, including those that have other owners.\n\nThis is useful to grant a high level user or team authority over a large scope of the codebase. Any files that only have optional owners will not require approvals. But the optional owner will still have approval rights over their coverage.\n\nThe `.vercel.approvers` file supports specifying files with a limited set of glob patterns:\n\n*   [Directory](#directory-default)\n*   [Current Directory](#current-directory-pattern)\n*   [Globstar](#globstar-pattern)\n\nThe patterns are case-insensitive.\n\nThe default empty pattern represents ownership of the current directory and all subdirectories.\n\n```\n# Matches all files in the current directory and all subdirectories.\n@owner\n```\n\nA pattern that matches a file or set of files in the current directory.\n\n```\n# Matches the single `package.json` file in the current directory only.\npackage.json @package-owner\n \n# Matches all javascript files in the current directory only.\n*.js @js-owner\n```\n\nThe globstar pattern begins with `**/`. And represents ownership of files matching the glob in the current directory and its subdirectories.\n\n```\n# Matches all `package.json` files in the current directory and its subdirectories.\n**/package.json @package-owner\n \n# Matches all javascript files in the current directory and its subdirectories.\n**/*.js @js-owner\n```\n\nCode Owners files are meant to encourage distributed ownership definitions across a codebase. Thus, the globstar `**/` and `/` can only be used at the start of a pattern. They cannot be used in the middle of a pattern to enumerate subdirectories.\n\nFor example, the following patterns are not allowed:\n\n```\n# Instead add a `.vercel.approvers` file in the `src` directory.\nsrc/**/*.js @js-owner\n \n# Instead add a `.vercel.approvers` file in the `src/pages` directory.\nsrc/pages/index.js @js-owner\n```\n\nIf you would like to allow a certain directory or file to be approved by anyone, you can use the wildcard owner `*`. This is useful for files that are not owned by a specific team or individual. The wildcard owner cannot be used with [modifiers](#modifiers).\n\n```\n# Changes to the `pnpm-lock.yaml` file in the current directory can be approved by anyone.\npnpm-lock.yaml *\n \n# Changes to any README in the current directory or its subdirectories can be approved by anyone.\n**/readme.md *\n \n```",
  "title": "Code Approvers",
  "description": "Use Code Owners to define users or teams that are responsible for directories and files in your codebase",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/cms/formspree",
  "markdown": "# Vercel Formspree Integration\n\nFormspree is a form backend platform that handles form submissions on static websites. It allows developers to collect and manage form data without needing a server.\n\nTo get started with Formspree on Vercel, follow the steps below to install the integration:\n\n1.  To pull in environment variables from Formspree to your Vercel project, you need to install the [Vercel CLI](https://vercel.com/docs/cli). Run the following command in your terminal:\n    \n2.  Navigate to the [Formspree integration](https://vercel.com/integrations/formspree) and follow the steps to install the integration.\n    \n3.  Once you've installed the Formspree integration, you can pull in environment variables from Formspree to your Vercel project. In your terminal, run:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nSee your installed CMSs documentation for next steps on how to use the integration.",
  "title": "Vercel Formspree Integration",
  "description": "Learn how to integrate Formspree with Vercel. Follow our tutorial to set up Formspree and manage form submissions on your static website without needing a server. ",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/integrations/cms/sanity",
  "markdown": "# Vercel Sanity Integration\n\nSanity is a headless content management system that provides real-time collaboration and structured content management. It offers a highly customizable content studio and a powerful API, allowing developers to integrate and manage content across various platforms and devices.\n\nTo get started with the Sanity on Vercel deploy the template below:\n\nOr, follow the steps below to install the integration:\n\n1.  To pull in environment variables from Sanity to your Vercel project, you need to install the [Vercel CLI](https://vercel.com/docs/cli). Run the following command in your terminal:\n    \n2.  Navigate to the [Sanity integration](https://vercel.com/integrations/sanity) and follow the steps to install the integration.\n    \n3.  Once you've installed the Sanity integration, you can pull in environment variables from Sanity to your Vercel project. In your terminal, run:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nSee your installed CMSs documentation for next steps on how to use the integration.\n\nContent Link enables you to edit content on websites using headless CMSs by providing links on elements that match a content model in the CMS. This real-time content visualization allows collaborators to make changes without needing a developer's assistance.\n\nContent Link can be enabled on a preview deployment through the Edit Mode button on the [Vercel Toolbar's](https://vercel.com/docs/workflow-collaboration/vercel-toolbar).\n\nThe corresponding model in the CMS determines an editable field. Hover over an element to display a link in the top-right corner of the element. Select the link to open the related CMS field for editing.\n\n![An editable element with a link to open the related field in the CMS](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fopen-in-sanity-light.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![An editable element with a link to open the related field in the CMS](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Fopen-in-sanity-dark.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn editable element with a link to open the related field in the CMS\n\nUsing this feature doesn't require any additional configuration or code changes to the page you want to edit.",
  "title": "Vercel Sanity Integration",
  "description": "Learn how to integrate Sanity with Vercel. Follow our tutorial to deploy the Sanity template or install the integration for real-time collaboration and structured content management.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/security/deployment-protection/methods-to-bypass-deployment-protection/sharable-links",
  "markdown": "# Sharable Links\n\nShareable links provide a way to allow external users to access your branch-specific deployments through a secure parameter in the query string. Users with this link can view the latest deployment from a specific branch. Sharable links include the ability to leave [Comments](https://vercel.com/docs/workflow-collaboration/comments) these are enabled on your team.\n\n*   Non-Production Domains:\n*   Production Domains:\n\nUsers with the Admin, Member, and Developer roles can create or revoke Sharable Links for their team's Projects. Personal Accounts can also create or revoke sharable links for their own Hobby projects. Sharable Links are managed on a per-branch basis.\n\nDevelopers on the hobby plan can only create one shareable link in total per account.\n\nTo manage Sharable Links, do the following:\n\n1.  From your Vercel [dashboard](https://vercel.com/dashboard):\n    \n    1.  Select the project that you wish to enable Vercel Authentication for\n    2.  Go to the Deployments tab\n2.  From the list of Preview Deployments, select the deployment you wish to share.\n    \n3.  From the Deployment page, click Share to display the Share popover. From the popover, select Anyone with the link from the dropdown.\n    \n    ![The Share settings modal.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706185875%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fshareable-links-light.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The Share settings modal.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706185874%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fsharable-links-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    The Share settings modal.\n    \n4.  To revoke access for users, switch the dropdown option to Only people with access.\n    \n    If you have also [shared the deployment](https://vercel.com/docs/deployments/sharing-deployments) with individual users, you will need to remove them from the Share popover.\n    \n\nYou can view and manage all the existing Shareable Links for your team in the following way\n\n1.  From your [dashboard](https://vercel.com/dashboard) go to the Settings tab\n2.  Select Deployment Protection and then choose the Access tab\n3.  Click the All Access button and select `Shareable Links`\n\n![Dashboard > Settings > Deployment Protection > Access](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fshareable-links-list.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Dashboard > Settings > Deployment Protection > Access](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fshareable-links-list-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nDashboard > Settings > Deployment Protection > Access",
  "title": "Sharable Links",
  "description": "Learn how to share your deployments with external users.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/code-owners/changelog",
  "markdown": "# Code Owners changelog\n\n```\npnpm update --latest --recursive @vercel-private/code-owners\n```\n\nThis patch updates some dependencies for performance and security.\n\nThis patch updates some dependencies for performance and security.\n\nThis patch updates some dependencies for performance and security, and fixes an issue where CLI output was colorless in GitHub Actions.\n\nThis patch updates some dependencies for performance and security.\n\nThis patch delivers improvements to our telemetry. While these improvements are not directly user-facing, they enhance our ability to monitor and optimize performance.\n\nInitial release of Code Owners.",
  "title": "Code Owners changelog",
  "description": "Find out what's new in each release of Code Owners.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/observability/log-drains/configure-log-drains",
  "markdown": "# Configure Log Drains\n\nTeams on [Pro](https://vercel.com/docs/accounts/plans/pro) and [Enterprise](https://vercel.com/docs/accounts/plans/enterprise) plans can subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration. This allows you to use a `HTTP` service to receive logs through Vercel's log drains.\n\n1.  From the Vercel dashboard, go to Team Settings > Log Drains.\n    \n2.  ![Choose the scope of project(s) to collect log drains.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Flog-drains%2Ftarget-projects.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Choose the scope of project(s) to collect log drains.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Flog-drains%2Ftarget-projects-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Choose the scope of project(s) to collect log drains.\n    \n    Choose the scope of team projects for which logs will be collected. You can do it for all or some specific projects based on your requirements.\n    \n3.  ![Select one or more sources to collect log drains.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714050140%2Ffront%2Fdocs%2Flogs%2Fselect-sources_yykcmq.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Select one or more sources to collect log drains.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714050381%2Ffront%2Fdocs%2Flogs%2Fselect-sources-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Select one or more sources to collect log drains.\n    \n    The log data is typically collected from various sources, which will be forwarded to your webhook over a network connection. Make sure you select one of these sources when you add a new log drain:\n    \n    *   Static: Collect logs for static assets like HTML and CSS files\n    *   Edge: Outputs log data from Edge Functions like Middleware\n    *   Lambda: Outputs log data from Vercel Functions like API Routes\n    *   External: Collect log results for external [rewrites](https://vercel.com/docs/projects/project-configuration#rewrites) to a different domain\n    *   Build: Outputs log data from the Build Step\n4.  ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Flog-drains%2Fdelivery-format.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Flog-drains%2Fdelivery-format-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Select the mode that decides the format in which your log data gets delivered. You can to choose from the following format types:\n    \n    *   JSON: With the JSON format, the URL receives a `HTTPS` or `HTTP` request with a JSON array on the `POST` body.\n    *   NDJSON: With the Newline Delimited JSON (NDJSON) format, the URL receives a `HTTPS` or `HTTP POST` request with JSON objects delimited by newline (`\\\\n`) on the `HTTP POST` body.\n5.  ![Input optional custom secret string.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714051699%2Ffront%2Fdocs%2Flogs%2Fcustom-secret.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Input optional custom secret string.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714051730%2Ffront%2Fdocs%2Flogs%2Fcustom-secret-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Input optional custom secret string.\n    \n    After deciding the format, you can optionally input your custom secret which is required to be at least 32 characters.\n    \n6.  ![Select one or more environment to collect logs.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714051888%2Ffront%2Fdocs%2Flogs%2Fselect-environment.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Select one or more environment to collect logs.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714051876%2Ffront%2Fdocs%2Flogs%2Fselect-environment-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Select one or more environment to collect logs.\n    \n    You can collect logs from production or preview environment. Make sure to select at least one.\n    \n7.  ![Select the log sampling rate.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714052026%2Ffront%2Fdocs%2Flogs%2Fsampling-rate.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Select the log sampling rate.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714052041%2Ffront%2Fdocs%2Flogs%2Fsampling-rate-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Select the log sampling rate.\n    \n    You can select a sampling rate, at the percentage of which logs will be randomly collected.\n    \n8.  ![Define the endpoint URL for the log drains.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Flog-drains%2Fendpoint-selection.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Define the endpoint URL for the log drains.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Flog-drains%2Fendpoint-selection-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Define the endpoint URL for the log drains.\n    \n    The log drains endpoint acts as the destination for your logs and is provided by the provider ingesting the log drains. All logs data will be forwarded to this URL as a `POST` request. Once added, Vercel asks you to \"**Verify**\" the endpoint. The purpose is to validate the URL ownership that responds with a status code `200` with a header. For example:\n    \n    `   x-vercel-verify: f20eab3717014bdb9e7b9876789ea974c46bce5ce   `\n    \n    If you are unable to complete the endpoint verification step, it's recommended to contact Vercel [support team](https://vercel.com/help).\n    \n    The verification code is different for each team.\n    \n    ![Add custom headers to protect your endpoint URLs.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Flog-drains%2Fcustom-headers.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Add custom headers to protect your endpoint URLs.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Flog-drains%2Fcustom-headers-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Add custom headers to protect your endpoint URLs.\n    \n    You can optionally add up to 5 custom headers to your log drains URL.\n    \n    For example, a commonly required header is your [Vercel authentication token](https://vercel.com/docs/rest-api#authentication) as an authorization header (i.e., `Authorization: Bearer[TOKEN]` ).\n    \n    Other required headers for known providers:\n    \n    *   Dynatrace: `Content-Type: application/json; charset=utf-8`\n9.  Once you have set up the log drains and specified the endpoint URL, click the \"Add Log Drain\" button, and Vercel will start sending logs to the log drain whenever your application generates them.\n    \n    You can also click the \"Test Log Drain\" button to trigger a sample log (corresponding to the selected source(s)) to the target endpoint, so you can ensure the configuration is correct even before adding the log drain.\n    \n10.  ![View your active log drain list.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714052188%2Ffront%2Fdocs%2Flogs%2Factive-log-drains.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![View your active log drain list.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714052194%2Ffront%2Fdocs%2Flogs%2Factive-log-drains-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    View your active log drain list.\n    \n    After the endpoint is confirmed and successfully verified, the logs will start to flow and appear in your Active log drains list. While in [beta](https://vercel.com/docs/release-phases#beta), you can create and use up to 5 custom log drains at one time.\n    \n\nFor more information on log drains and how to use them, check out the following resources:",
  "title": "Configure Log Drains",
  "description": "Subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/security/secure-backend-access/oidc/aws",
  "markdown": "# Connect to Amazon Web Services (AWS)\n\nTo understand how AWS supports OIDC, and for a detailed user guide on creating an OIDC identity provider with AWS, consult the [AWS OIDC documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html).\n\n1.  1.  Navigate to the [AWS Console](https://console.aws.amazon.com/)\n    2.  Navigate to IAM then Identity Providers\n    3.  Select Add Provider\n    4.  Select OpenID Connect from the provider type\n    5.  Enter `https://oidc.vercel.com` in the Provider URL field\n    6.  Enter `https://vercel.com/[TEAM_SLUG]` in the Audience field, replacing `[TEAM_SLUG]` with the path from your Vercel team URL\n    7.  Select Add Provider\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718267924%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Faws-create-id-provider.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718267924%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Faws-create-id-provider.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n2.  To use AWS OIDC Federation you must have an [IAM role](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html). [IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) require a \"trust relationship\" (also known as a \"trust policy\") that describes which \"Principal(s)\" are allowed to assume the role under certain \"Condition(s)\".\n    \n    Here is an example of a trust policy:\n    \n    ```\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"Federated\": \"arn:aws:iam::[YOUR AWS ACCOUNT ID]:oidc-provider/oidc.vercel.com\"\n          },\n          \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n          \"Condition\": {\n            \"StringEquals\": {\n              \"oidc.vercel.com:sub\": \"owner:[TEAM SLUG]:project:[PROJECT NAME]:environment:production\",\n              \"oidc.vercel.com:aud\": \"https://vercel.com/[TEAM SLUG]\"\n            }\n          }\n        }\n      ]\n    }\n    ```\n    \n    The above policy's conditions are quite strict. It requires the `aud` sub `sub` claims to match exactly, but it's possible to configure less strict trust policies conditions:\n    \n    ```\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"Federated\": \"arn:aws:iam::[YOUR AWS ACCOUNT ID]:oidc-provider/oidc.vercel.com\"\n          },\n          \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n          \"Condition\": {\n            \"StringEquals\": {\n              \"oidc.vercel.com:aud\": \"https://vercel.com/[TEAM SLUG]\"\n            },\n            \"StringLike\": {\n              \"oidc.vercel.com:sub\": [\n                \"owner:[TEAM SLUG]:project:*:environment:preview\",\n                \"owner:[TEAM SLUG]:project:*:environment:production\"\n              ]\n            }\n          }\n        }\n      ]\n    }\n    ```\n    \n    This policy allows any project matched by the `*` that are targeted to `preview` and `production` but not `development`.\n    \n3.  Once you have created the role, copy the [role's ARN](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns) and [declare it as an environment variable](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable) in your Vercel project with key name `AWS_ROLE_ARN`.\n    \n    ```\n    AWS_ROLE_ARN=arn:aws:iam::accountid:user/username\n    ```\n    \n    You are now ready to connect to your AWS resource in your project's code. Review the examples below.\n    \n\nIn the following examples, you create a [Vercel function](https://vercel.com/docs/functions/quickstart#create-a-vercel-function) in the Vercel project where you have defined the OIDC role ARN environment variable. The function will connect to a specific resource in your AWS backend using OIDC and perform a specific action using the AWS SDK.\n\nInstall the following packages:\n\n```\npnpm i @aws-sdk/client-s3 @vercel/functions\n```\n\nIn the API route for the function, use the AWS SDK for JavaScript to list objects in an S3 bucket with the following code:\n\n```\nimport * as S3 from '@aws-sdk/client-s3';\nimport { awsCredentialsProvider } from '@vercel/functions/oidc';\n \nconst AWS_REGION = process.env.AWS_REGION!;\nconst AWS_ROLE_ARN = process.env.AWS_ROLE_ARN!;\nconst S3_BUCKET_NAME = process.env.S3_BUCKET_NAME!;\n \n// Initialize the S3 Client\nconst s3client = new S3.S3Client({\n  region: AWS_REGION,\n  // Use the Vercel AWS SDK credentials provider\n  credentials: awsCredentialsProvider({\n    roleArn: AWS_ROLE_ARN,\n  }),\n});\n \nexport async function GET() {\n  const result = await s3client.send(\n    new S3.ListObjectsV2Command({\n      Bucket: S3_BUCKET_NAME,\n    }),\n  );\n  return result?.Contents?.map((object) => object.Key) ?? [];\n}\n```\n\nVercel sends the OIDC token to the SDK using the `awsCredentialsProvider` function from `@vercel/functions`.\n\nInstall the following packages:\n\n```\npnpm i @aws-sdk/rds-signer @vercel/functions pg\n```\n\nIn the API route for the function, use the AWS SDK for JavaScript to perform a database `SELECT` query from an AWS RDS instance with the following code:\n\n```\nimport { awsCredentialsProvider } from '@vercel/functions/oidc';\nimport { Signer } from '@aws-sdk/rds-signer';\nimport { Pool } from 'pg';\n \nconst RDS_PORT = parseInt(process.env.RDS_PORT!);\nconst RDS_HOSTNAME = process.env.RDS_HOSTNAME!;\nconst RDS_DATABASE = process.env.RDS_DATABASE!;\nconst RDS_USERNAME = process.env.RDS_USERNAME!;\nconst RDS_CA_PEM = process.env.RDS_CA_PEM!;\nconst AWS_REGION = process.env.AWS_REGION!;\nconst AWS_ROLE_ARN = process.env.AWS_ROLE_ARN!;\n \n// Initialize the RDS Signer\nconst signer = new Signer({\n  // Use the Vercel AWS SDK credentials provider\n  credentials: awsCredentialsProvider({\n    roleArn: AWS_ROLE_ARN,\n  }),\n  region: AWS_REGION,\n  port: RDS_PORT,\n  hostname: RDS_HOSTNAME,\n  username: RDS_USERNAME,\n});\n \n// Initialize the Postgres Pool\nconst pool = new Pool({\n  password: signer.getAuthToken,\n  user: RDS_USERNAME,\n  host: RDS_HOSTNAME,\n  database: RDS_DATABASE,\n  port: RDS_PORT,\n});\n \n// Export the route handler\nexport async function GET() {\n  try {\n    const client = await pool.connect();\n    const { rows } = await client.query('SELECT * FROM my_table');\n    return Response.json(rows);\n  } finally {\n    client.release();\n  }\n}\n```",
  "title": "Connect to Amazon Web Services (AWS)",
  "description": "Learn how to configure your AWS account to trust Vercel's OpenID Connect (OIDC) Identity Provider (IdP).",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/security/secure-backend-access/oidc/azure",
  "markdown": "# Connect to Microsoft Azure\n\nTo understand how Azure supports OIDC through Workload Identity Federation, consult the [Azure documentation](https://learn.microsoft.com/en-us/entra/workload-id/workload-identity-federation).\n\n1.  *   Navigate to All services\n    *   Select Identity\n    *   Select Manage Identities and select Create\n    *   Choose your Azure Subscription, Resource Group, Region and Name\n2.  *   Go to Federated credentials and select Add Credential\n    *   In the Federated credential scenario field select Other\n    *   In the Issuer URL field use: `https://oidc.vercel.com`\n    *   In the Subject identifier field use: `owner:[TEAM_SLUG]:project[PROJECT_NAME]:environment:[preview | production | development]`\n        *   Replace `[TEAM_SLUG]` with your team identifier from the Vercel's team URL\n        *   Replace `[PROJECT_NAME]` with your [project's name](https://vercel.com/docs/projects/overview#project-name) in your [project's settings](https://vercel.com/docs/projects/overview#project-settings)\n    *   In the Name field, use a name for your own reference such as: `[Project name] - [Environment]`\n    *   In the Audience field use: `https://vercel.com/[TEAM_SLUG]`\n        *   Replace `[TEAM_SLUG]` with your team identifier from the Vercel's team URL\n    \n    Azure does not allow for partial claim conditions so you must specify the `Subject` and `Audience` fields exactly. However, it is possible to create mutliple federated credentials on the same managed identity to allow for the various `sub` claims.\n    \n3.  In order to connect to the Azure service that you would like to use, you need to allow your Managed Identity to access it.\n    \n    For example, to use Azure CosmosDB, associate a role definition to the Managed Identity using the Azure CLI, as explained in the [Azure CosmosDB documentation](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/tutorial-vm-managed-identities-cosmos?tabs=azure-cli#grant-access).\n    \n    You are now ready to connect to your Azure service from your project's code. Review the example below.\n    \n\nIn the following example, you create a [Vercel function](https://vercel.com/docs/functions/quickstart#create-a-vercel-function) in a Vercel project where you have [defined Azure account environment variables](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable). The function will connect to Azure using OIDC and use a specific resource that you have allowed the Managed Identity to access.\n\nInstall the following packages:\n\n```\npnpm i @azure/identity @azure/cosmos @vercel/functions\n```\n\nIn the API route for this function, use the following code to perform a database `SELECT` query from an Azure CosmosDB instance:\n\n```\nimport {\n  ClientAssertionCredential,\n  AuthenticationRequiredError,\n} from '@azure/identity';\nimport * as cosmos from '@azure/cosmos';\nimport { getVercelOidcToken } from '@vercel/functions/oidc';\n \n/**\n * The Azure Active Directory tenant (directory) ID.\n * Added to environment variables\n */\nconst AZURE_TENANT_ID = process.env.AZURE_TENANT_ID!;\n \n/**\n * The client (application) ID of an App Registration in the tenant.\n * Added to environment variables\n */\nconst AZURE_CLIENT_ID = process.env.AZURE_CLIENT_ID!;\nconst COSMOS_DB_ENDPOINT = process.env.COSMOS_DB_ENDPOINT!;\nconst COSMOS_DB_ID = process.env.COSMOS_DB_ID!;\nconst COSMOS_DB_CONTAINER_ID = process.env.COSMOS_DB_CONTAINER_ID!;\n \nconst tokenCredentials = new ClientAssertionCredential(\n  AZURE_TENANT_ID,\n  AZURE_CLIENT_ID,\n  getVercelOidcToken,\n);\n \nconst cosmosClient = new cosmos.CosmosClient({\n  endpoint: COSMOS_DB_ENDPOINT,\n  aadCredentials: tokenCredentials,\n});\n \nconst container = cosmosClient\n  .database(COSMOS_DB_ID)\n  .container(COSMOS_DB_CONTAINER_ID);\n \nexport async function GET() {\n  const { resources } = await container.items\n    .query('SELECT * FROM my_table')\n    .fetchAll();\n \n  return Response.json(resources);\n}\n```",
  "title": "Connect to Microsoft Azure",
  "description": "Learn how to configure your Microsoft Azure account to trust Vercel's OpenID Connect (OIDC) Identity Provider (IdP).",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/pricing/legacy",
  "markdown": "# Legacy Metrics\n\nLearn about Bandwidth, Requests, Serverless Function Invocations, and Serverless Function Execution metrics.\n\nBandwidth is the amount of data your deployments have sent or received. This chart includes traffic for both [preview](https://vercel.com/docs/deployments/preview-deployments) and [production](https://vercel.com/docs/deployments/environments#production) deployments.\n\nThe total traffic of your projects is the sum of the outgoing and incoming bandwidth.\n\n*   Outgoing: Outgoing bandwidth measures the amount of data that your deployments have sent to your users. Data used by [ISR](https://vercel.com/docs/incremental-static-regeneration) and the responses from the [Edge Network](https://vercel.com/docs/edge-network/overview) and [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) count as outgoing bandwidth\n*   Incoming: Incoming bandwidth measures the amount of data that your deployments have received from your users\n\nAn example of incoming bandwidth would be page views requested by the browser. All requests sent to the [Edge Network](https://vercel.com/docs/edge-network/overview) and [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) are collected as incoming bandwidth.\n\nIncoming bandwidth is usually much smaller than outgoing bandwidth for website projects.\n\nRequests are the number of requests made to your deployments. This chart includes traffic for both [preview](https://vercel.com/docs/deployments/preview-deployments) and [production](https://vercel.com/docs/deployments/environments#production) deployments.\n\nRequests can be filtered by:\n\n*   Ratio: The ratio of requests that are cached and uncached by the [Edge Network](https://vercel.com/docs/edge-network/overview)\n*   Projects: The projects that the requests are made to\n\nServerless Function Invocations are the number of times your [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) have receive a request, excluding cache hits.\n\nServerless Function Invocations can be filtered by:\n\n*   Ratio: The ratio of invocations that are Successful, Errored, or Timed out\n*   Projects: The projects that the invocations are made to\n\nServerless Function Execution is the amount of time your [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) have spent computing resources.\n\nServerless Function Execution can be filtered by:\n\n*   Ratio: The ratio of execution time that is Completed, Errored, or Timed out\n*   Projects: The projects that the execution time is spent on",
  "title": "Legacy Metrics",
  "description": "Learn about Bandwidth, Requests, Serverless Function Invocations, and Serverless Function Execution metrics.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/domains/custom-SSL-certificate",
  "markdown": "# Uploading Custom SSL Certificates\n\n**Note:** Do you need custom SSL certificates and dedicated support?\n\n[Contact Sales](https://vercel.com/contact/sales)\n\nBy default, Vercel provides all domains with a custom SSL certificates. However, Enterprise teams can upload a custom SSL certificate. This allows for Enterprise teams to serve their own SSL certificate on a Custom Domain at Vercel's edge network, rather than the automatically generated certificate.\n\nCustom SSL certificates can be uploaded through the [account domains configuration page](https://vercel.com/account/domains) (account-scoped domains), the Domains tab on your team's dashboard, or by using the [Vercel REST API](https://vercel.com/docs/rest-api/endpoints#upload-a-cert).\n\nUploading a custom certificate follows a three step process:\n\n1.  Providing the private key for the certificate\n2.  Providing the certificate itself\n3.  Providing the Certificate Authority root certificate such as one of [Let's Encrypt's ISRG root certificates](https://letsencrypt.org/certificates/). This will be provided by your certificate issuer and is different to the core certificate. This may be included in their download process or available for download on their website.\n\nThe content of each element must be copied and pasted into the input box directly. The certificate and private key can be extracted from the [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) files that are provided by your certificate issuer, and should be in the following format:\n\n```\n-----BEGIN CERTIFICATE-----\n<Certificate body will be here>\n-----END CERTIFICATE-----\n```\n\n```\n-----BEGIN PRIVATE KEY-----\n<Private key body will be here>\n-----END PRIVATE KEY-----\n```\n\nWhen uploading your SSL certificate, you should note the following:\n\n1.  The automatically generated certificate will remain in place, but a custom certificate is prioritized over the existing certificate. This means that if a custom certificate is uploaded and then later removed, Vercel will revert to the automatically generated certificate.\n2.  You can include canonical names CN's (CN's) for other subdomains on the certificate without needing to add these domains to Vercel. The certificate will be served on these domains if or when they are added.\n3.  Wildcards certificates can be uploaded\n4.  Certificates with an explicitly defined subdomain are prioritized over a wildcard certificate when both are valid for a given subdomain",
  "title": "Uploading Custom SSL Certificates",
  "description": "By default, Vercel provides all domains with a custom SSL certificates. However, Enterprise teams can upload their own custom SSL certificate.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/security/secure-backend-access/oidc/api",
  "markdown": "# Connect to your own API\n\nTo configure your own API to accept Vercel's OIDC tokens, you need to validate the tokens using Vercel's JSON Web Keys (JWTs), available at `https://oidc.vercel.com/.well-known/jwks`.\n\nInstall the following package:\n\nIn the code example below, you use the `jose.jwtVerify` function to verify the token. The `issuer`, `audience`, and `subject` are validated against the token's claims.\n\n```\nimport http from 'node:http';\nimport * as jose from 'jose';\n \nconst JWKS = jose.createRemoteJWKSet(\n  new URL('https://oidc.vercel.com/.well-known/jwks'),\n);\n \nconst server = http.createServer((req, res) => {\n  const token = req.headers['authorization']?.split('Bearer ')[1];\n \n  if (!token) {\n    res.statusCode = 401;\n    res.end('Unauthorized');\n    return;\n  }\n \n  try {\n    const { payload } = jose.jwtVerify(token, JWKS, {\n      issuer: 'https://oidc.vercel.com',\n      audience: 'https://vercel.com/[TEAM_SLUG]',\n      subject:\n        'owner:[TEAM_SLUG]:project:[PROJECT_NAME]:environment:[ENVIRONMENT]',\n    });\n \n    res.statusCode = 200;\n    res.end('OK');\n  } catch (error) {\n    res.statusCode = 401;\n    res.end('Unauthorized');\n  }\n});\n \nserver.listen(3000);\n```\n\nMake sure that you:\n\n*   Replace `[TEAM_SLUG]` with your team identifier from the Vercel's team URL\n*   Replace `[PROJECT_NAME]` with your [project's name](https://vercel.com/docs/projects/overview#project-name) in your [project's settings](https://vercel.com/docs/projects/overview#project-settings)\n*   Replace `[ENVIRONMENT]` with one of Vercel's [environments](https://vercel.com/docs/deployments/environments#deployment-environments), `development`, `preview` or `production`\n\nInstall the following package:\n\nIn the code example below, the `getVercelOidcToken` function is used to retrieve the OIDC token from your Vercel environment. You can then use this token to authenticate the request to the external API.\n\n```\nimport { getVercelOidcToken } from '@vercel/functions/oidc';\n \nexport const GET = async () => {\n  const result = await fetch('https://api.example.com', {\n    headers: {\n      Authorization: `Bearer ${await getVercelOidcToken()}`,\n    },\n  });\n \n  return Response.json(await result.json());\n};\n```",
  "title": "Connect to your own API",
  "description": "Learn how to configure your own API to trust Vercel's OpenID Connect (OIDC) Identity Provider (IdP)",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/security/secure-backend-access/oidc/gcp",
  "markdown": "# Connect to Google Cloud Platform (GCP)\n\nTo understand how GCP supports OIDC through Workload Identity Federation, consult the [GCP documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html).\n\n1.  1.  Navigate to the [Google Cloud Console](https://console.cloud.google.com/)\n    2.  Navigate to IAM & Admin then Workload Identity Federation\n    3.  Click on Create Pool\n2.  1.  Enter a name for the pool, e.g. `Vercel`\n    2.  Enter an ID for the pool, e.g. `vercel` and click Continue\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718262782%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-id-pool.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718262782%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-id-pool.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n3.  1.  Select `OpenID Connect (OIDC)` from the provider types\n    2.  Enter a name for the provider, e.g. `Vercel`\n    3.  Enter an ID for the provider, e.g. `vercel`\n    4.  In the `Issuer URL` field use: `https://oidc.vercel.com`\n    5.  Leave JWK file (JSON) empty\n    6.  Select `Allowed audiences` from \"Audience\"\n    7.  Enter `https://vercel.com/[TEAM_SLUG]` in the \"Audience 1\" field and click \"Continue\"\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263183%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-id-pool-2.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263183%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-id-pool-2.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n4.  1.  Assign the `google.subject` mapping to `assertion.sub`\n    2.  Click Save\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263183%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-id-pool-3.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263183%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-id-pool-3.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n5.  1.  Copy the IAM Principal from the pool details page from the previous step. It should look like `principal://iam.googleapis.com/projects/012345678901/locations/global/workloadIdentityPools/vercel/subject/SUBJECT_ATTRIBUTE_VALUE`\n    2.  Navigate to IAM & Admin then Service Accounts\n    3.  Click on Create Service Account\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718266097%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-copy-pool-id.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718266097%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-copy-pool-id.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n6.  1.  Enter a name for the service account, e.g. `Vercel`.\n    2.  Enter an ID for the service account, e.g. `vercel` and click Create and continue.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263605%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-service-account-1.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263605%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-service-account-1.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n7.  1.  Select a role or roles for the service account, e.g. `Storage Object Admin`.\n    2.  Click Continue.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263605%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-service-account-2.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263605%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-service-account-2.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n8.  1.  Paste in the IAM Principal copied from the pool details page in the Service account users role field.\n        *   Replace `SUBJECT_ATTRIBUTE_VALUE` with `owner:[VERCEL_TEAM]:project:[PROJECT_NAME]:environment:[ENVIRONMENT]`. e.g. `principal://iam.googleapis.com/projects/012345678901/locations/global/workloadIdentityPools/vercel/subject/owner:acme:project:my-project:environment:production`.\n        *   You can add multiple principals to this field, add a principal for each project and environment you want to grant access to.\n    2.  Click Done.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263605%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-service-account-3.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1718263605%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Foidc-tokens%2Fgcp-create-service-account-3.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n9.  Once you configured your GCP project with OIDC access, gather the following values from the Google Cloud Console:\n    \n    | Value | Location | Environment Variable | Example |\n    | --- | --- | --- | --- |\n    | Project ID | IAM & Admin -> Settings | `GCP_PROJECT_ID` | `my-project-123456` |\n    | Project Number | IAM & Admin -> Settings | `GCP_PROJECT_NUMBER` | `1234567890` |\n    | Service Account Email | IAM & Admin -> Service Accounts | `GCP_SERVICE_ACCOUNT_EMAIL` | `vercel@my-project-123456.iam.gserviceaccount.com` |\n    | Workload Identity Pool ID | IAM & Admin -> Workload Identity Federation -> Pools | `GPC_WORKLOAD_IDENTITY_POOL_ID` | `vercel` |\n    | Workload Identity Pool Provider ID | IAM & Admin -> Workload Identity Federation -> Pools -> Providers | `GPC_WORKLOAD_IDENTITY_POOL_PROVIDER_ID` | \\`ve |\n    \n    Then, [declare them as environment variables](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable) in your Vercel project.\n    \n    You are now ready to connect to your GCP resource from your project's code. Review the example below.\n    \n\nIn the following example, you create a [Vercel function](https://vercel.com/docs/functions/quickstart#create-a-vercel-function) in the Vercel project where you have defined the GCP account environment variables. The function will connect to GCP using OIDC and use a specific resource provided by Google Cloud services.\n\nInstall the following packages:\n\n```\npnpm i google-auth-library @ai-sdk/google-vertex ai @vercel/functions\n```\n\nIn the API route for this function, use the following code to perform the following tasks:\n\n*   Use `google-auth-library` to create an External Account Client\n*   Use it to authenticate with Google Cloud Services\n*   Use Vertex AI with [Google Vertex Provider](https://sdk.vercel.ai/providers/ai-sdk-providers/google-vertex) to generate text from a prompt\n\n```\nimport { getVercelOidcToken } from '@vercel/functions/oidc';\nimport { ExternalAccountClient } from 'google-auth-library';\nimport { createVertex } from '@ai-sdk/google-vertex';\nimport { generateText } from 'ai';\n \nconst GCP_PROJECT_ID = process.env.GCP_PROJECT_ID;\nconst GCP_PROJECT_NUMBER = process.env.GCP_PROJECT_NUMBER;\nconst GCP_SERVICE_ACCOUNT_EMAIL = process.env.GCP_SERVICE_ACCOUNT_EMAIL;\nconst GCP_WORKLOAD_IDENTITY_POOL_ID = process.env.GCP_WORKLOAD_IDENTITY_POOL_ID;\nconst GCP_WORKLOAD_IDENTITY_POOL_PROVIDER_ID =\n  process.env.GCP_WORKLOAD_IDENTITY_POOL_PROVIDER_ID;\n \n// Initialize the External Account Client\nconst authClient = ExternalAccountClient.fromJSON({\n  type: 'external_account',\n  audience: `//iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL_ID}/providers/${GCP_WORKLOAD_IDENTITY_POOL_PROVIDER_ID}`,\n  subject_token_type: 'urn:ietf:params:oauth:token-type:jwt',\n  token_url: 'https://sts.googleapis.com/v1/token',\n  service_account_impersonation_url: `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${GCP_SERVICE_ACCOUNT_EMAIL}:generateAccessToken`,\n  subject_token_supplier: {\n    // Use the Vercel OIDC token as the subject token\n    getSubjectToken: getVercelOidcToken,\n  },\n});\n \nconst vertex = createVertex({\n  project: GCP_PROJECT_ID,\n  location: 'us-central1',\n  googleAuthOptions: {\n    authClient,\n    projectId: GCP_PROJECT_ID,\n  },\n});\n \n// Export the route handler\nexport const GET = async (req: Request) => {\n  const result = generateText({\n    model: vertex('gemini-1.5-flash'),\n    prompt: 'Write a vegetarian lasagna recipe for 4 people.',\n  });\n  return Response.json(result);\n};\n```",
  "title": "Connect to Google Cloud Platform (GCP)",
  "description": "Learn how to configure your GCP project to trust Vercel's OpenID Connect (OIDC) Identity Provider (IdP).",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/accounts/team-members-and-roles/access-roles/team-level-roles",
  "markdown": "# Team Level Roles Reference\n\nTeam level roles are designed to provide a comprehensive level of control and access to the team as a whole. These roles are assigned to individuals and are applicable to all projects within the team. This allows for a centralized level of control and access, while still maintaining the security and integrity of the team as a whole.",
  "title": "Team Level Roles Reference",
  "description": "Learn about the different team level roles and the permissions they provide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/accounts/team-members-and-roles/access-roles/project-level-roles",
  "markdown": "# Project Level Roles Reference\n\nProject level roles are assigned to a team member on a project level. This means that the role is only valid for the project it is assigned to. The role is not valid for other projects in the team.\n\nIn the table below, the relationship between team and project roles is indicated by the column headers. For example, the team role \"Developer\" is equivalent to the \"Project Developer\" role.\n\n*   The [Developer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#developer-role) team role is equivalent to the [Project Developer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#project-developer) role\n*   The [Viewer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#viewer-role) and [Billing](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#billing-role) team roles are equivalent to the [Project Viewer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#project-viewer) role\n*   The [Owner](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role) and [Member](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#member-role) team roles are equivalent to the [Project Admin](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#project-administrators) role\n\nAll project level roles can be assigned to those with the [Contributor](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#contractor-role) team role.\n\nSee our [Access roles docs](https://vercel.com/docs/accounts/team-members-and-roles/access-roles) for a more comprehensive breakdown of the different roles.",
  "title": "Project Level Roles Reference",
  "description": "Learn about the project level roles and their permissions.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/security/vercel-waf/rule-configuration",
  "markdown": "# Rule Configuration Reference\n\nRequest PathThe full request path on the incoming request, always starting with a leading `/``/api`,`/signup/new`,Target PathThe framework determined `x-matched-path``/blog/[slug]`,When matching on the target path, the custom rule will run after middleware. If the rule blocks a request, middleware charges could be incurredMethodThe HTTP method used to make the request`GET`, `POST`User AgentThe HTTP user agent used to make the request`curl`,Request HeaderThe request header on the original request. Define both the header key and value you want to matchYou cannot match headers set by middleware, as the rule runs before middleware is invokedQueryAny incoming query parameter on the original request. Define both the query key and value you want to matchCookieAny incoming cookie on the original request. Define both the query key and value you want to matchHostnameThe hostname used for the incoming requestThis applies to projects with multiple domains such as platforms that assign a domain to each user of the platformIP AddressThe original or forwarded IP address on the incoming request`10.0.0.1`,`10.0.0.1/32`,ProtocolThe HTTP protocol of the original request`HTTP/1.1`, `HTTP/2.0`EnvironmentThe Vercel Environment that received this requestPreview or ProductionVercel RegionThe Vercel region that received this request[Regions list](https://vercel.com/docs/edge-network/regions#region-list)ContinentThe continent based on the client IP addressA shorthand for the `x-vercel-ip-continent` headerStateThe state (Country Region) based on the client IP addressA shorthand for the `x-vercel-ip-country-region` headerCountryThe country based on the client IP addressA shorthand for the `x-vercel-ip-country` headerCityThe city based on the client IP addressA shorthand for the `x-vercel-ip-city` headerAS NumberThe Autonomous System Number based on the client IP address`Digits only`,`ex. 12345`,Digits onlyJA3 DigestThe calculated TLS digest of the incoming requestJA4 DigestThe calculated TLS digest of the incoming request",
  "title": "Rule Configuration Reference",
  "description": "List of configurable options with the Vercel WAF",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/security/vercel-waf/examples",
  "markdown": "# Common Examples\n\nWhen reviewing your site's traffic in the live monitor of your project's Firewall tab, you notice a traffic spike coming from Ireland, where you do not have customers and/or do not expect much traffic.\n\nYou view the traffic by country by selecting Default Web Traffic from the traffic grouping drop-down and Country for the secondary drop-down\n\n1.  Select the Configure button on the top right\n2.  Select \\+ New Rule\n3.  Type \"Ireland Traffic\" as Name and \"Understand Ireland traffic spike\" as Description\n4.  In the If section of the Configure section\n\n*   Select Country in the first drop-down\n*   Leave Equals unchanged\n*   Select Ireland in the third drop-down\n\n5.  Leave the Log option in the Then section\n6.  Select Save Rule\n7.  Apply the changes:\n    *   When you make any change, you will see a Review Changes button appear or update on the top right with the number of changes requested\n    *   Select Review Changes and review the changes to be applied\n    *   Select Publish to apply the changes to your production deployment\n8.  Observe the traffic for this rule on the Firewall overview page\n9.  Update the rule's Then action to Deny and select Save Rule\n10.  Apply the changes\n11.  Review the live monitor. The traffic from that region should now be zero\n\nWhen reviewing your site's traffic in the live monitor of your project's Firewall tab, you notice a traffic spike coming from the IP address `11.22.33.44`.\n\nYou view the traffic by IP Address by selecting Default Web Traffic from the traffic grouping drop-down and IP Address for the secondary drop-down\n\n1.  Select the Configure button on the top right\n2.  Select \\+ New Rule\n3.  Scroll down to the IP Blocking section\n4.  Select the \\+ Add IP button\n5.  In the Configure New Domain Protection modal, type `11.22.33.44` for the IP Address field and match the Host field with the domain of your production deployment\n6.  Select the Create IP Block Rule button\n7.  Apply the changes:\n    *   When you make any change, you will see a Review Changes button appear or update on the top right with the number of changes requested\n    *   Select Review Changes and review the changes to be applied\n    *   Select Publish to apply the changes to your production deployment\n8.  Review the live monitor. The traffic from `11.22.33.44` should now be zero",
  "title": "Common Examples",
  "description": "Learn how to use Vercel WAF to protect your site in specific situations.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/accounts/plans/enterprise/billing",
  "markdown": "# Billing FAQ for Enterprise Plan\n\n### Interested in the Enterprise plan?\n\nElevate your enterprise with Vercel's tailored plan. Unleash high performance, advanced security, and dedicated support. Unlock a comprehensive suite of features to empower your organization\n\nThe Vercel Enterprise plan is perfect for [teams](https://vercel.com/docs/accounts/create-a-team) with increased performance, collaboration, and security needs. This page covers frequently asked questions around payments, invoices, and billing on the Enterprise plan.\n\n*   Pay by credit card: When the invoice is finalized in Stripe\n*   Pay by ACH/Wire: Due by due date on the invoice\n\n*   Credit card\n*   ACH/Wire\n\nYou can pay in any currency so long as the credit card provider allows charging in USD _after_ conversion.\n\nContact your Customer Success Manager if you feel payment might be delayed.\n\nYes.\n\n*   American Express\n*   China UnionPay (CUP)\n*   Discover & Diners\n*   Japan Credit Bureau (JCB)\n*   Mastercard\n*   Visa\n\nYes, when paying with ACH, the payment fee is often deducted by the sender. You need to add this fee to the amount you send, otherwise the payment may be rejected.\n\nYes. You are free to remove your current payment method, so long as you have ACH payments set up. Once you have ACH payments set up, notify your Customer Success Manager. They can verify your account changes.\n\n*   Yes. After checking the invoice, you can make a payment. You will receive a receipt after your credit card gets charged\n*   If you are paying with ACH, you will receive an email containing the bank account details you can wire the payment to\n*   If you are paying with ACH, you should provide the invoice number as a reference on the payment\n\nPayment was not received from you by the invoice due date. This could be due to an issue with your credit card, like reaching your payment limit or your card having expired.\n\nNo. Unless you provide specific justification to your Customer Success Manager. This addition will get added to future invoices, not to the current invoice.\n\nYes. Learn more about [Roles and Permissions](https://vercel.com/docs/accounts/team-members-and-roles).\n\n1.  *   Navigate to the [Dashboard](https://vercel.com/dashboard)\n    *   Select your team from the scope selector on the top left as explained [here](https://vercel.com/docs/teams-and-accounts/create-or-join-a-team#creating-a-team)\n    *   Select the Settings tab\n2.  Select Billing from the sidebar. Scroll down to find the following editable fields. You can update these if you are a [team owner](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role) or have the [billing role](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#billing-role):\n    \n    *   Invoice Email Recipient: A custom destination email for your invoices. By default, they get sent to the first owner of the team\n    *   Company Name: The company name that shows up on your invoices. By default, it is set to your team name\n    *   Billing Address: A postal address added to every invoice. By default, it is blank\n    *   Invoice Language: The language of your invoices which is set to English by default\n    *   Invoice Purchase Order: A line that includes a purchase order on your invoices. By default, it is blank\n    *   Tax ID: A line for rendering a specific tax ID on your invoices. By default, it is blank\n    \n    Your changes only affect future invoices, not existing ones.\n    \n\nPlease [open a support ticket](https://vercel.com/help#issues) to log your request, which will allow our support team to look into the case for you.\n\nWhen you contact support the following information will be needed:\n\n*   Invoice ID\n*   The account email\n*   The Team name\n*   If the query is related to the monthly plan, or usage billing\n\n[Vercel automatically mitigates against L3, L4, and L7 DDoS attacks](https://vercel.com/docs/security/ddos-mitigation) at the platform level for all plans. Vercel does not charge customers for traffic that gets blocked by the Firewall.\n\nUsage will be incurred for requests that are successfully served prior to us automatically mitigating the event. Usage will also be incurred for requests that are not recognized as a DDoS event, which may include bot and crawler traffic.\n\nFor an additional layer of security, we recommend that you enable [Attack Challenge Mode](https://vercel.com/docs/security/attack-challenge-mode) when you are under attack, which is available for free on all plans. While some malicious traffic is automatically challenged, enabling Attack Challenge Mode will challenge all traffic, including legitimate traffic to ensure that only real users can access your site.\n\nYou can monitor usage in the [Vercel Dashboard](https://vercel.com/dashboard) under the Usage tab, although you will [receive notifications](https://vercel.com/docs/dashboard-features/notifications#on-demand-usage-notifications) when nearing your usage limits.\n\nThe billing cycle refers to the period of time between invoices. The start date depends on when you created the account. You will be billed every 1, 2, 3, 6, or 12 months depending on your contract.",
  "title": "Billing FAQ for Enterprise Plan",
  "description": "This page covers frequently asked questions around payments, invoices, and billing on the Enterprise plan.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/domains/assign-domain-to-a-git-branch",
  "markdown": "# Assigning a Domain to a Git Branch\n\nEvery commit pushed to the [Production Branch](https://vercel.com/docs/deployments/git#production-branch) of your [connected Git repository](https://vercel.com/docs/deployments/git) will be assigned the domains configured in your project.\n\nIn order to automatically assign a domain to a different branch, you can enter it in the Git Branch field of your Domain:\n\n![A Custom Domain that is automatically assigned to the `staging` Git Branch.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fbranch-domains.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A Custom Domain that is automatically assigned to the `staging` Git Branch.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fbranch-domains-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA Custom Domain that is automatically assigned to the \\`staging\\` Git Branch.",
  "title": "Assigning a Domain to a Git Branch",
  "description": "Learn how to assign a domain to a different Git branch with this guide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/domains/view-and-search-domains",
  "markdown": "# Viewing & Searching Domains\n\nTo view all your registered domains, go to the Domains tab in your Vercel dashboard.\n\nThe domains list will show you all domains that are currently active on your account, and are split into the following columns:\n\n*   Domain - The domain name\n*   Registrar - The domain registrar (Vercel or Third Party)\n*   Nameservers - The nameservers for the domain (Vercel or Third Party)\n*   Expiration date - The expiration date of the domain\n*   Creator - The person who created the domain, indicated by their avatar\n*   Age - The age of the domain, from when it was added to now\n\nYou can search for a specific domain by using the search bar above the domains list.\n\nIt is not possible to search a multi-level wildcard subdomain. It is only possible to search a subdomain at one level down.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705022739%2Ffront%2Fdocs%2Fdomains%2Fsearch-light.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705022739%2Ffront%2Fdocs%2Fdomains%2Fsearch-dark.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)",
  "title": "Viewing & Searching Domains",
  "description": "Learn how to view and search all registered domains that are assigned to Vercel Projects through the Vercel dashboard.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/domains/renew-a-domain",
  "markdown": "# Renewing a Domain to Your Account\n\nCustom domains purchased through or registered with Vercel are automatically renewed by default. You can see the expiration or [renewal date](#filter-on-renewal-status) of your domains in the Domains tab of either your [Account Settings](https://vercel.com/account/domains) page (account-scoped domains) or your team's dashboard.\n\n![Expiration column of the Domains table.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdomain-renewal-date-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Expiration column of the Domains table.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdomain-renewal-date-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nExpiration column of the Domains table.\n\nTo manage renewal settings for your domains, do the following:\n\n1.  You can choose to prevent the automatic renewal of a Domain from the Domains tab on the Vercel Dashboard.\n    \n2.  Once on the Domains tab, click on a domain to view its Advanced Settings:\n    \n    ![Advanced settings section with auto-renewal status visible.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdomain-advanced-settings-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Advanced settings section with auto-renewal status visible.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdomain-advanced-settings-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Advanced settings section with auto-renewal status visible.\n    \n3.  If Vercel is the registrar of the domain, the auto renewal status of your Domain will be displayed here.\n    \n4.  You can toggle auto renewal from the details menu in the top right:\n    \n    ![The menu item for toggling the auto renewal status of your Domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fauto-renewal-menu.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The menu item for toggling the auto renewal status of your Domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fauto-renewal-menu-dark.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    The menu item for toggling the auto renewal status of your Domain.\n    \n\nIf auto renewal is off, Vercel will not try to re-register the Domain when it expires at the end of the registration period. You will not be charged for the Domain any longer, but you will lose access to the Domain when it expires. Recovering the Domain, if even possible, may be subject to a redemption fee. Please [contact our support team](https://vercel.com/help#issues) as soon as possible.\n\nVercel will send you three emails regarding the Domain before this happens. 24 and 14 days before the Domain is set to expire, you will be notified that auto renewal is off and the Domain will expire soon. A final email will notify you when the Domain expires.\n\nIf auto renewal is on, Vercel will begin daily attempts to renew the domain one week before the domain expires. You will receive three emails regarding the renewal process: 17 days and 7 days before renewal attempts begin, and finally when the Domain has either been successfully renewed or failed to renew.\n\nRenewal attempts may begin earlier than 7 days in advance for certain TLDs.\n\nYou can filter your Vercel owned domains by their renewal status by clicking the filter icon in the top right of the Domains table:\n\n![Filter Domains table by renewal status.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Frenew-domain-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Filter Domains table by renewal status.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Frenew-domain-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nFilter Domains table by renewal status.\n\nThird-Party Domains (ones not purchased with or transferred into Vercel) are not subject to auto-renewal. Please refer to your Domain name registrar's policy regarding renewals.",
  "title": "Renewing a Domain to Your Account",
  "description": "Learn how to toggle auto renewal on and off for custom domains purchased through or registered with Vercel, and renew third-party domains with this guide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/accounts/team-members-and-roles/access-groups",
  "markdown": "# Access Groups\n\nAccess Groups provide a way to manage groups of Vercel users across projects on your team. They are a set of project role assignations, a combination of Vercel users and the projects they work on.\n\nAn Access Group consists of one or many projects in a team and assigns project roles to team members. Any team member included in an Access Group gets assigned the projects in that Access Group. They also get a default role.\n\nTeam administrators can apply automatic role assignments for default roles. And for more restricted projects, you can ensure only a subset of users have access to those projects. This gets handled with project-level role-based access control (RBAC).\n\n![Example access group relationship diagram](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694093182%2Ffront%2Fdocs%2Frbac%2Faccess-groups-light.png%3Flightbox&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Example access group relationship diagram](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694093183%2Ffront%2Fdocs%2Frbac%2Faccess-groups-dark.png%3Flightbox&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nExample access group relationship diagram\n\n1.  Navigate to your team’s Settings tab and then Access Groups (`<team-name>/~/settings/access-groups`)\n2.  Select Create Access Group\n3.  Create a name for your Access Group\n4.  Select the projects and [project roles](https://vercel.com/docs/accounts/team-members-and-roles/access-roles/project-level-roles) to assign\n5.  Select the Members tab\n6.  Add members with the Developer and Contributor role to the Access Group\n7.  Create your Access Group by pressing Create\n\n1.  Navigate to your team’s Settings tab and then Access Groups (`<team-name>/~/settings/access-groups`)\n2.  Press the Edit Access Group button for the Access Group you wish to edit from your list of Access Groups\n3.  Either:\n    *   Remove a project using the remove button to the right of a project\n    *   Add more projects using the Add more button below the project list and using the selection controls\n\n1.  Navigate to your team’s Settings tab and then Access Groups (`<team-name>/~/settings/access-groups`)\n2.  Press the Edit Access Group button for the Access Group you wish to edit from your list of Access Groups\n3.  Select the Members tab\n4.  Either:\n    *   Remove an Access Group member using the remove button to the right of a member\n    *   Add more members using the Add more button and the search controls\n\nYou can do this in two ways:\n\n1.  From within your team's members page using the Manage Access button (recommended for convenience). Access this by navigating to your team's Settings tab and then Members\n2.  By [editing each Access Group](#add-and-remove-members-from-an-access-group) using the Edit Access Group button and editing the Members list\n\nWhen configuring Access Groups, there are some key things to be aware of:\n\n*   Team roles cannot be overridden. An Access Group manages project roles only\n*   Only a subset of team role and project role combinations are valid:\n    *   [Owner](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role), [Member](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#member-role), [Billing](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#billing-role), [Viewer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#viewer-role): All project role assignments are ignored\n    *   [Developer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#developer-role): [Admin](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#project-administrators) assignment is valid on selected projects. [Project Developer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#project-developer) and [Project Viewer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#project-viewer) role assignments are ignored\n    *   [Contributor](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#contributor-role): `Admin`, `Project Developer`, or `Project Viewer` roles are valid in selected projects\n*   When a `Contributor` belongs to multiple access groups the computed role will be:\n    *   `Admin` permissions in the project if any of the access groups they get assigned has a project mapping to `Admin`\n    *   `Project Developer` permissions in the project if any of the access groups they get assigned has a project mapping to `Project Developer` and there is none to `Admin` for that project\n    *   `Project Viewer` permissions in the project if any of the access groups they get assigned has a project mapping to `Project Viewer` and there is none to `Admin` and none to `Project Developer` for that project\n*   When a `Developer` belongs to multiple access groups the role assignation will be:\n    *   `Admin` permissions in the project if any of the access groups they get assigned has a project mapping to Admin\n    *   In all other cases the member will have `Developer` permissions\n*   Access Group assignations are not deleted when a team role gets changed. This allows a temporal increase of permissions without having to modify all Access Group assignations\n*   Direct project assignations also affect member roles. Consider these examples:\n    *   A direct project assignment assigns a member as `Admin`. That member is within an Access Group that assigns `Developer`. The computed role is `Admin`.\n    *   A direct project assignment assigns a member as `Developer`. That member is within an Access Group that assigns `Admin`. The computed role is `Admin`.\n\nContributors and Developers can increase their level of permissions in a project but they can never reduce their level of permissions\n\nIf you use [Directory sync](https://vercel.com/docs/security/directory-sync), you are able to map a Directory Group with an Access Group. this will grant all users that belong to the Directory Group access to the projects that get assigned in the Access Group.\n\nSome things to note:\n\n*   The final role the user will have in a specific project will depend on the mappings of all Access Groups the user belongs to\n*   Assignations using directory sync can lead to `Owners`, `Members` `Billing` and `Viewers` being part of an Access Group dependent on these mappings. In this scenario, access groups assignations will get ignored\n*   When a Directory Group is mapped to an Access Group, members of that group will default to `Contributor` role at team level. This is unless another Directory Group assignation overrides the team role",
  "title": "Access Groups",
  "description": "Learn how to configure access groups for team members on a Vercel account.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/domains/transfer-your-domain",
  "markdown": "# Transferring Domains to Another Team or Project\n\n1.  You can move domains to another profile or team using the Domains tab of your [Account Settings](https://vercel.com/account/domains) page (account-scoped domains) or your team's dashboard.\n    \n2.  Once on the Domains tab, select the context menu next to the domain you wish to move, and click Move. You can also use checkbox next to each domain to select more than one domain\n    \n    ![Selecting which domains to move from the Domains tab.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705023197%2Ffront%2Fdocs%2Fdomains%2Fmove-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Selecting which domains to move from the Domains tab.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705023197%2Ffront%2Fdocs%2Fdomains%2Fmove-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Selecting which domains to move from the Domains tab.\n    \n3.  After selecting the domain(s) and clicking Move, you will be asked to confirm which profile or team you wish to move them to.\n    \n    ![Entering a new profile or team destination for a domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1709837964%2Ffront%2Fdocs%2Fdomains%2Fmove-modal.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Entering a new profile or team destination for a domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1709837964%2Ffront%2Fdocs%2Fdomains%2Fmove-modal-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Entering a new profile or team destination for a domain.\n    \n    When selecting the input field, you will be provided with a list of teams you belong to. If the profile or team you wish to move the domain(s) to is not present, enter the `slug` value instead. You can find the `slug` value in Settings page for both profiles and teams.\n    \n    When moving domains to another team or user, all existing project domains associated with them will remain and not be moved to prevent service disruption. However, any [custom aliases](https://vercel.com/docs/cli/alias) that are not part of project domains will be removed immediately.\n    \n4.  To confirm the change, select Move. The domains will be transferred to the new profile of team immediately.\n    \n\nYou can use the Dashboard to remove a domain from a project and then re-add it to another. However, this could potentially end up with some site down-time. For more information on transferring domains with zero downtime, see [How to move a domain between Vercel projects with \"Zero Downtime\"?](https://vercel.com/guides/how-to-move-a-domain-between-vercel-projects-with-zero-downtime)\n\n1.  Due to [ICANN rules](https://www.icann.org/resources/pages/text-2012-02-25-en#:~:text=Please%20note%20that%20you%20may,60%20days%20after%20a%20transfer), a domain must be registered with a registrar for 60 days before it can be transferred to another.\n    \n    You can verify that your domain has been registered with Vercel for at least 60 days by visiting the [Domains Dashboard](https://vercel.com/account/domains). If the registrar is Vercel and the age greater than 60 days, it is eligible to transfer.\n    \n2.  Select the **Domains** tab\n    \n    For domains that are registered with Vercel, you can retrieve an authorization code for transferring out to another registrar from the **Domains** tab of the Dashboard.\n    \n3.  Once on the **Domains** tab, click on the triple-dot menu button for the relevant domain. A menu-item button to transfer the domain out will be presented if the domain is registered with Vercel.\n    \n    ![Menu item button for getting domain's transfer authorization code.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705023197%2Ffront%2Fdocs%2Fdomains%2Ftransfer-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Menu item button for getting domain's transfer authorization code.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705023197%2Ffront%2Fdocs%2Fdomains%2Ftransfer-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Menu item button for getting domain's transfer authorization code.\n    \n    If under a Team scope, only [Team Owners](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role) will see the menu-item button.\n    \n4.  After clicking the menu-item button, a modal will open up with the authorization code required to transfer the domain. Use this authorization code with your new registrar to confirm that you want to transfer the domain. There is no additional confirmation that you need to do on the Vercel side. Transferring a domain can take up to a week.\n    \n    ![Modal for domain's transfer authorization code.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Ftransfer-out-modal.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Modal for domain's transfer authorization code.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Ftransfer-out-modal-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Modal for domain's transfer authorization code.\n    \n\nBy transferring your domain into Vercel, you allow Vercel to manage the DNS records for the domain and can use it with any Projects listed under the account the domain is owned by.\n\n1.  Due to [ICANN rules](https://www.icann.org/resources/pages/text-2012-02-25-en#:~:text=Please%20note%20that%20you%20may,60%20days%20after%20a%20transfer), a domain must be registered with a registrar for 60 days before it can be transferred to another. You will need to confirm this with your registrar before attempting the transfer to Vercel.\n    \n    If the domain has not been registered with the current registrar for at least 60 days, the domain transfer will fail.\n    \n    NOTE: To find further information on ICANN rules, visit the [ICANN website](https://www.icann.org/resources/pages/text-2012-02-25-en#:~:text=Please%20note%20that%20you%20may,60%20days%20after%20a%20transfer).\n    \n2.  Once you have verified your domain's eligibility to transfer, proceed with unlocking your domain in your registrar's domain settings. Most domains are usually locked by default to prevent unauthorized changes.\n    \n    The domain lock feature appears in different forms across registrars. Sign into the host where your domain is registered and look for a Domain Lock or similar option to unlock your domain. If this option is not available, contact your registrar to change this.\n    \n3.  After unlocking the domain, you will need to obtain an authorization code. The code will be sent to the email address associated with your domain by your registrar. In some cases, your authorization code pops up on your dashboard. This may be available in the domain registrars dashboard. If it is not available, contact your registrar to obtain this.\n    \n4.  When transferring a domain, you will have two options to choose from. Either using the Vercel Dashboard or Vercel CLI.\n    \n    Option 1: Using Vercel Dashboard\n    \n    After obtaining the authorization code, click on the Transfer in button in the Vercel Domains Dashboard and enter in your domain and respective authorization code.\n    \n    Option 2: Using Vercel CLI\n    \n    With Vercel CLI, you can run the following command from your terminal.\n    \n    ```\n    vercel domains transfer-in [your-domain]\n    ```\n    \n    You will be requested to provide an authorization code from your registrar after running this command. Once you get the authorization code from your registrar, paste it into the prompt and the transfer will begin.\n    \n    In a case where your domain cannot be transferred, check that it has been over 60 days since the domain has been registered or previously transferred. If it still does not work, contact your registrar.\n    \n5.  After activating a domain transfer-in, you will be informed that the DNS settings for your domain will not be transferred along with the domain. Instead, you will need to download a zone file from your registrar and upload it to Vercel.\n    \n    You can import the zone file to Vercel DNS by running the following command:\n    \n    ```\n    vercel dns import [your-domain] [zonefile]\n    ```\n    \n    If you do not apply a custom zone file, transferring in a domain automatically applies the default Vercel DNS settings.\n    \n6.  You can deploy your app with Vercel once the domain has been successfully added to your account.\n    \n    By setting a production domain from your projects' Domains dashboard, you will be able to use the following command with Vercel CLI:\n    \n    This command will deploy your project and make it accessible at the production domain that you have setup.",
  "title": "Transferring Domains to Another Team or Project",
  "description": "Domains can be transferred to another team or project within Vercel, or to and from a third-party registrar. Learn how to transfer domains with this guide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/observability/webhooks-overview/webhooks-api",
  "markdown": "# Webhooks API Reference\n\nVercel Integrations allow you to subscribe to certain trigger-based events through webhooks. An example use-cases for webhooks might be cleaning up resources after someone removes your Integration.\n\nThe webhook payload is a JSON object with the following keys.\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Description |\n| --- | --- | --- |\n| type | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The [event type](#supported-event-types). |\n| id  | [ID](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The ID of the webhook delivery. |\n| createdAt | [Number](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The webhook delivery timestamp. |\n| region | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The region the event occurred in (possibly null). |\n| payload | [Object](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The payload of the webhook. See [Supported Event Types](#supported-event-types) for more information. |\n\nOccurs whenever a deployment is created.\n\nOccurs whenever a deployment is ready.\n\nThis event gets fired after all blocking Checks have passed. See [`deployment-prepared`](https://vercel.com/docs/integrations#webhooks/events/deployment-prepared) if you registered Checks.\n\nOccurs whenever a deployment is successfully built and your integration has registered at least one [check](https://vercel.com/docs/integrations/checks-overview).\n\nOccurs whenever a deployment is promoted.\n\nThis event gets fired after a production deployment is [promoted](https://vercel.com/docs/deployments/managing-deployments#staging-and-promoting-a-production-deployment) to start serving production traffic. This can happen automatically after a successful build, or after running the [promote](https://vercel.com/docs/cli/promote) command.\n\nOccurs whenever a deployment is canceled.\n\nOccurs whenever a deployment has failed.\n\nOccurs when a user has requested for a [check](https://vercel.com/docs/integrations/checks-overview) to be rerun after it failed.\n\nOccurs whenever a project has been created.\n\nThis event is sent only when the Integration has access to all projects in a Vercel scope.\n\nOccurs whenever a project has been removed.\n\nThis event is sent only when the integration has access to all projects in a Vercel scope.\n\nOccurs whenever the user confirms pending scope changes.\n\nOccurs whenever an integration has been removed.\n\nOccurs whenever the user changes the project permission for an integration.\n\nOccurs whenever a domain has been created.\n\nThe legacy webhook payload is a JSON object with the following keys.\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Description |\n| --- | --- | --- |\n| type | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The [legacy event type](#introduction/legacy-event-types). |\n| id  | [ID](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The ID of the webhook delivery. |\n| createdAt | [Number](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The webhook delivery timestamp. |\n| region | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The region the event occurred in (possibly null). |\n| clientId | [ID](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The ID of integration's client. |\n| ownerId | [ID](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The ID of the event owner (user or team). |\n| teamId | [ID](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The ID of the event's team (possibly null). |\n| userId | [ID](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The ID of the event's users. |\n| webhookId | [ID](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The ID of the webhook. |\n| payload | [Object](https://vercel.com/docs/rest-api#introduction/api-basics/types) | The payload of the webhook. See [Legacy Event Types](#introduction/legacy-event-types) for more information. |\n\nThe following event types have been deprecated and webhooks that listen for them can no longer be created. Vercel will continue to deliver the deprecated events to existing webhooks.\n\nThis event is replaced by [deployment.created](#deployment.created) .\n\nOccurs whenever a deployment is created.\n\nThis event is replaced by [deployment.succeeded](#deployment.succeeded) .\n\nOccurs whenever a deployment is ready.\n\nThis event gets fired after all blocking checks have passed. See [`deployment-prepared`](https://vercel.com/docs/integrations#webhooks/events-types/deployment-prepared) if you registered Checks.\n\nThis event is replaced by [deployment.ready](#deployment.ready) .\n\nOccurs whenever a deployment is successfully built and your integration has registered at least one [check](https://vercel.com/docs/integrations/checks-overview).\n\nThis event is replaced by [deployment.canceled](#deployment.canceled) .\n\nOccurs whenever a deployment is canceled.\n\nThis event is replaced by [deployment.error](#deployment.error) .\n\nOccurs whenever a deployment has failed.\n\nThis event is replaced by [deployment.check-rerequested](#deployment.check-rerequested) .\n\nOccurs when a user has requested for a [check](https://vercel.com/docs/integrations/checks-overview) to be rerun after it failed.\n\nThis event has been removed. [deployment.succeeded](#deployment.succeeded) can be used for the same purpose.\n\nOccurs when all checks for a deployment have completed. This does not indicate that they have all passed, only that they are no longer running. It is possible for webhook to occur multiple times for a single deployment if any checks are [re-requested](https://vercel.com/docs/observability/checks-overview/creating-checks#rerunning-checks).\n\nThis event is replaced by [project.created](#project.created) .\n\nOccurs whenever a project has been created.\n\nThis event is sent only when the Integration has access to all projects in a Vercel scope.\n\n  \n\nThis event is replaced by [project.removed](#project.removed) .\n\nOccurs whenever a Project has been removed.\n\nThis event is sent only when the Integration has access to all Projects in a Vercel scope.\n\n  \n\nThis event is replaced by [integration-configuration.removed](#integration-configuration.removed) .\n\nOccurs whenever an integration has been removed.\n\nThis event is replaced by [integration-configuration.permission-upgraded](#integration-configuration.permission-upgraded) .\n\nOccurs whenever the user changes the project permission for an integration.\n\nThis event is replaced by [integration-configuration.scope-change-confirmed](#integration-configuration.scope-change-confirmed) .\n\nOccurs whenever the user confirms pending scope changes.\n\nThis event is replaced by [domain.created](#domain.created) .\n\nOccurs whenever a domain has been created.\n\nOnce your server is configured to receive payloads, it will listen for any payload sent to the endpoint you configured. By knowing the URL of your webhook, anybody can send you requests. Therefore, it is recommended to check whether the requests are coming from Vercel or not.\n\nThe recommended method to check is to use the [`x-vercel-signature`](https://vercel.com/docs/edge-network/headers#x-vercel-signature) security header you receive with each request. The value of this header corresponds to the `sha1` of the request body using your [client secret](https://vercel.com/docs/observability/webhooks-overview#enter-your-endpoint-url).\n\nFor example, you can validate a webhook request as follows:\n\n```\nimport crypto from 'crypto';\n \nexport async function GET(request: Request) {\n  const { INTEGRATION_SECRET } = process.env;\n \n  if (typeof INTEGRATION_SECRET != 'string') {\n    throw new Error('No integration secret found');\n  }\n \n  const rawBody = await request.text();\n  const rawBodyBuffer = Buffer.from(rawBody, 'utf-8');\n  const bodySignature = sha1(rawBodyBuffer, INTEGRATION_SECRET);\n \n  if (bodySignature !== request.headers.get('x-vercel-signature')) {\n    return Response.json({\n      code: 'invalid_signature',\n      error: \"signature didn't match\",\n    });\n  }\n \n  const json = JSON.parse(rawBodyBuffer.toString('utf-8'));\n \n  switch (json.type) {\n    case 'project.created':\n    // ...\n  }\n \n  return new Response('Webhook request validated', {\n    status: 200,\n  });\n}\n \nfunction sha1(data: Buffer, secret: string): string {\n  return crypto.createHmac('sha1', secret).update(data).digest('hex');\n}\n```\n\nExample on how to validate a webhook message.\n\nYou can compute the signature using an HMAC hexdigest from the secret token of OAuth2 and request body, then compare it with the value of the [`x-vercel-signature`](https://vercel.com/docs/edge-network/headers#x-vercel-signature) header to validate the payload.\n\nYou should consider this HTTP request to be an event. Once you receive the request, you should schedule a task for your action.\n\nThis request has a timeout of 30 seconds. That means if a `2XX` HTTP response is not received within 30 seconds, the request will be aborted.\n\nIf your HTTP endpoint does not respond with a `2XX` HTTP status code, we attempt to deliver the webhook event up to 24 hours with an exponential backoff. Events that could not be delivered within 24 hours will not be retried and will be discarded.",
  "title": "Webhooks API Reference",
  "description": "Vercel Integrations allow you to subscribe to certain trigger-based events through webhooks. Learn about the supported webhook events and how to use them.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/getting-started-with-vercel/buy-domain",
  "markdown": "# Buy a domain\n\nUse this snippet to purchase a new domain from Vercel:\n\n```\nvercel domains buy [domain]\n```\n\nUse Vercel to find and buy a domain that resonates with your brand, establishes credibility, and captures your visitors' attention.\n\n1.  Go to [https://vercel.com/domains](https://vercel.com/domains) and search for a domain that matches you or your brand. You could try \"SuperDev\"!\n    \n    ![Domains marketplace](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fdomain-view-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Domains marketplace](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fdomain-view-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Domains marketplace\n    \n    Depending on the TLD (top-level domain), you’ll see the purchase price. More popular TLDs will be more expensive.\n    \n2.  Select an address, or continue searching until you find the perfect one. Once you’ve selected it, choose the account or team you wish to assign it to and select Confirm.\n    \n3.  You'll need to enter credit card details to purchase the domain. These details are saved for [auto renewal](https://vercel.com/docs/projects/domains/renew-a-domain).\n    \n4.  Once you are happy with your purchase, Vercel will ask if you are sure you want to buy the domain. Select Yes.\n    \n5.  From the dashboard, select your project and go to the Settings tab. From the Project Settings, go to Domains and enter the new domain that you just purchased. From the Add Domain dialog, select the recommended option, and select Add.\n    \n    ![Connecting your Git provider and creating a new repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fnew-domain-addition-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Connecting your Git provider and creating a new repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fnew-domain-addition-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Connecting your Git provider and creating a new repository\n    \n\nNext, learn how to take advantage of Vercel's collaboration features as part of your developer workflow:",
  "title": "Buy a domain",
  "description": "Purchase your domain with Vercel. Expand your online reach and establish a memorable online identity.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/getting-started-with-vercel/template",
  "markdown": "# Use a template\n\nClone the template to your local machine and use the following snippet to deploy the template with Vercel CLI:\n\n```\nvercel --cwd [path-to-project]\n```\n\nAccelerate your development on Vercel with [Templates](https://vercel.com/templates). This guide will show you how to use templates to fast-track project setup, leverage popular frontend frameworks, and maximize Vercel's features.\n\n1.  From [https://vercel.com/templates](https://vercel.com/templates), select the template you’d like to deploy. You can use the filters to select a template based on use case, framework, and other requirements.\n    \n    Not sure which one to use? How about [exploring Next.js](https://vercel.com/templates/next.js/nextjs-boilerplate).\n    \n    ![Viewing the templates marketplace](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Ftemplates-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Viewing the templates marketplace](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Ftemplates-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Viewing the templates marketplace\n    \n2.  Once you've selected a template, Click Deploy on the template page to start the process.\n    \n    ![Deploying your chosen template](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fdeploying-template-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Deploying your chosen template](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fdeploying-template-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Deploying your chosen template\n    \n3.  To ensure you can easily update your project after deploying it, Vercel will create a new repository with your chosen [Git provider](https://vercel.com/docs/deployments/git). Every push to that Git repository will be deployed automatically.\n    \n    First, select the Git provider that you'd like to connect to. Once you’ve signed in, you’ll need to set the scope and repository name. At this point, Vercel will clone a copy of the source code into your Git account.\n    \n    ![Connecting your Git provider and creating a new repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fgit-provider-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Connecting your Git provider and creating a new repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fgit-provider-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Connecting your Git provider and creating a new repository\n    \n4.  Once the project has been cloned to your git provider, Vercel will automatically start deploying the project. This starts with [building your project](https://vercel.com/docs/deployments/builds), then [assigning the domain](https://vercel.com/docs/deployments/generated-urls), and finally celebrating your deployed project with confetti.\n    \n    ![Deploying a template](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fdeploy-template-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Deploying a template](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fdeploy-template-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Deploying a template\n    \n5.  At this point, you’ve created a production deployment, with its very own domain assigned. If you continue to your [dashboard](https://vercel.com/dashboard), you can click on the domain to preview a live, accessible URL that is instantly available on the internet.\n    \n    ![Viewing your deployment information](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fprod-view-light.png%3Flightbox&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Viewing your deployment information](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fprod-view-dark.png%3Flightbox&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Viewing your deployment information\n    \n6.  Finally, you'll want to clone the source files to your local machine so that you can make some changes later. To do this from your dashboard, select the Git repository button and clone the repository.\n    \n\nBecause you used a template, we’ve automatically included any additional environment set up as part of the template. You can customize your project by configuring environment variables and build options.\n\nEnvironment Variables are key-value pairs that can be defined in your project settings for each [Environment](https://vercel.com/docs/projects/environment-variables#environments) . Teams can also use [shared environment variables](https://vercel.com/docs/projects/environment-variables/shared-environment-variables) that are linked between multiple projects.\n\nVercel automatically configures builds settings based on your framework, but you can [customize the build](https://vercel.com/docs/deployments/configure-a-build) in your project settings or within a [vercel.json](https://vercel.com/docs/projects/project-configuration) file.\n\nNext, learn how to assign a domain to your new deployment.",
  "title": "Use a template",
  "description": "Create a new project on Vercel by using a template",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/getting-started-with-vercel/use-existing",
  "markdown": "# Use an existing domain\n\nUse this snippet to add a domain that you own to a Vercel project:\n\n```\nvercel domains add [domain] [project]\n```\n\nAlready have a domain you love? Seamlessly integrate it with Vercel to leverage the platform's powerful features and infrastructure. Whether you're migrating an existing project or want to maintain your established online presence, you can use the steps below to add your custom domain.\n\n1.  Select your project and select the Settings tab. Then, select the Domains menu item.\n    \n2.  From the Domains page, enter the domain you wish to add to the project.\n    \n    ![Connecting your Git provider and creating a new repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348178%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fnew-domain-addition-light.png%3Flightbox&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Connecting your Git provider and creating a new repository](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348178%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fnew-domain-addition-dark.png%3Flightbox&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Connecting your Git provider and creating a new repository\n    \n    If you add an apex domain (e.g. `example.com`) to the project, Vercel will prompt you to add the `www`subdomain prefix, the apex domain, and [some basic redirection options](https://vercel.com/docs/projects/domains/deploying-and-redirecting).\n    \n    For more information on which redirect option to choose, see [Redirecting `www` domains](https://vercel.com/docs/projects/domains/deploying-and-redirecting#redirecting-www-domains).\n    \n3.  Configure the DNS records of your domain with your registrar so it can be used with your Project. The dashboard will automatically display different methods for configuring it:\n    \n    ![Instructions on configuring an apex domain from the Project Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fconfigure-apex-domain.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Instructions on configuring an apex domain from the Project Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fconfigure-apex-domain-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Instructions on configuring an apex domain from the Project Domains page.\n    \n    *   If the domain is in use by another Vercel account, you will need to [verify access to the domain](https://vercel.com/docs/projects/domains/add-a-domain#verify-domain-access), with a TXT record\n    *   If you're using an [Apex domain](https://vercel.com/docs/projects/domains/add-a-domain#apex-domains) (e.g. example.com), you will need to configure it with an A record\n    *   If you're using a [Subdomain](https://vercel.com/docs/projects/domains/add-a-domain#subdomains) (e.g. docs.example.com), you will need to configure it with a CNAME record\n    \n    Both apex domains and subdomains can also be configured using the [Nameservers](https://vercel.com/docs/projects/domains/add-a-domain#vercel-nameservers) method. Wildcard domains must use the nameservers method for verification. For more information see [Add a custom domain](https://vercel.com/docs/projects/domains/add-a-domain).\n    \n\nNext, learn how to take advantage of Vercel's collaboration features as part of your developer workflow:",
  "title": "Use an existing domain",
  "description": "Seamlessly integrate your existing domain with Vercel. Maximize flexibility and maintain your established online presence.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/getting-started-with-vercel/import",
  "markdown": "# Import an existing project\n\nUse the following snippet to deploy your existing project with Vercel CLI:\n\n```\nvercel --cwd [path-to-project]\n```\n\nYour existing project can be any web project that outputs static HTML content (such as a website that contains HTML, CSS, and JavaScript). When you use any of Vercel's [supported frameworks](https://vercel.com/docs/frameworks), we'll automatically detect and set the optimal build and deployment configurations for your framework.\n\n1.  On the [New Project](https://vercel.com/new) page, under the Import Git Repository section, select the Git provider that you would like to import your project from.\n    \n    Follow the prompts to sign in to either your [GitHub](https://vercel.com/docs/deployments/git/vercel-for-github), [GitLab](https://vercel.com/docs/deployments/git/vercel-for-gitlab), or [BitBucket](https://vercel.com/docs/deployments/git/vercel-for-bitbucket) account.\n    \n2.  Find the repository in the list that you would like to import and select Import.\n    \n3.  Vercel will automatically detect the framework and any necessary build settings. However, you can also configure the Project settings at this point including the [build and output settings](https://vercel.com/docs/deployments/configure-a-build#build-and-development-settings) and [Environment Variables](https://vercel.com/docs/projects/environment-variables). These can also be set later.\n    \n    *   To update the [framework](https://vercel.com/docs/deployments/configure-a-build#framework-preset), [build command](https://vercel.com/docs/deployments/configure-a-build#build-command), [output directory](https://vercel.com/docs/deployments/configure-a-build#output-directory), [install command](https://vercel.com/docs/deployments/configure-a-build#install-command), or [development command](https://vercel.com/docs/deployments/configure-a-build#development-command), expand the Build & Output Settings section and update as needed.\n    *   To set environment variables, expand the Environment Variables section and either paste or copy them in.\n    *   You can also configure additional properties by adding a [vercel.json](https://vercel.com/docs/projects/project-configuration) to your project. You can either do this now, before you deploy, or add it later and redeploy your project.\n4.  Press the Deploy button. Vercel will create the Project and deploy it based on the chosen configurations.\n    \n5.  To view your deployment, select the Project in the dashboard and then select the Domain. This page is now visible to anyone who has the URL.\n    \n    ![Accessing auto-generated domain](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fprod-view-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Accessing auto-generated domain](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686348180%2Fdocs-assets%2Fstatic%2Fdocs%2Fgetting-started-with-vercel%2Fprod-view-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Accessing auto-generated domain\n    \n\nNext, learn how to assign a domain to your new deployment.",
  "title": "Import an existing project",
  "description": "Create a new project on Vercel by importing your existing frontend project, built on any of our supported frameworks.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/access-groups",
  "markdown": "# Access Groups\n\npost/v1/access-groups\n\nAllows to create an access group\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   accessGroupIdstringRequired\n    \n    ID of the access group.\n    \n    Example: `ag_123a6c5209bc3778245d011443644c8d27dc2c50`\n    \n*   createdAtstringRequired\n    \n    Timestamp in milliseconds when the access group was created.\n    \n    Example: `1588720733602`\n    \n*   membersCountnumberRequired\n    \n*   namestringRequired\n    \n    The name of this access group.\n    \n    Example: `my-access-group`\n    \n*   projectsCountnumberRequired\n    \n*   teamIdstringRequired\n    \n    ID of the team that this access group belongs to.\n    \n    Example: `team_123a6c5209bc3778245d011443644c8d27dc2c50`\n    \n*   updatedAtstringRequired\n    \n    Timestamp in milliseconds when the access group was last updated.\n    \n    Example: `1588720733602`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/access-groups/{idOrName}\n\nAllows to delete an access group\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required |\n\nN/A\n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/access-groups/{idOrName}/members\n\nList members of an access group\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required<br><br>The ID or name of the Access Group.<br><br>Example:`ag_pavWOn1iLObbXLRiwVvzmPrTWyTf` |\n\n*   membersarrayRequired\n    \n*   Properties\n    \n*   paginationobjectRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/access-groups/{idOrName}/projects\n\nList projects of an access group\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required<br><br>The ID or name of the Access Group.<br><br>Example:`ag_pavWOn1iLObbXLRiwVvzmPrTWyTf` |\n\n*   paginationobjectRequired\n    \n*   Properties\n    \n*   projectsarrayRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/access-groups\n\nList access groups\n\n| Query Parameter | Description |\n| --- | --- |\n| limit | integer<br><br>Limit how many access group should be returned.<br><br>`>=1``<=100`<br><br>Example:`20` |\n| membersLimit | integer<br><br>Number of members to include in the response.<br><br>`>=1``<=100`<br><br>Example:`20` |\n| next | string<br><br>Continuation cursor to retrieve the next page of results. |\n| projectId | string<br><br>Filter access groups by project.<br><br>Example:`prj_pavWOn1iLObbx3RowVvzmPrTWyTf` |\n| projectsLimit | integer<br><br>Number of projects to include in the response.<br><br>`>=1``<=100`<br><br>Example:`20` |\n| search | string<br><br>Search for access groups by name.<br><br>Example:`example` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/access-groups/{idOrName}\n\nAllows to read an access group\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required |\n\n*   accessGroupIdstringRequired\n    \n    ID of the access group.\n    \n    Example: `ag_123a6c5209bc3778245d011443644c8d27dc2c50`\n    \n*   createdAtstringRequired\n    \n    Timestamp in milliseconds when the access group was created.\n    \n    Example: `1588720733602`\n    \n*   isDsyncManagedbooleanRequired\n    \n*   membersCountnumberRequired\n    \n    Number of members in the access group.\n    \n    Example: `5`\n    \n*   namestringRequired\n    \n    The name of this access group.\n    \n    Example: `my-access-group`\n    \n*   projectsCountnumberRequired\n    \n    Number of projects in the access group.\n    \n    Example: `2`\n    \n*   teamIdstringRequired\n    \n    ID of the team that this access group belongs to.\n    \n    Example: `team_123a6c5209bc3778245d011443644c8d27dc2c50`\n    \n*   updatedAtstringRequired\n    \n    Timestamp in milliseconds when the access group was last updated.\n    \n    Example: `1588720733602`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npost/v1/access-groups/{idOrName}\n\nAllows to update an access group metadata\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required |\n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |",
  "title": "Access Groups",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/authentication",
  "markdown": "# Authentication\n\npost/v3/user/tokens\n\nCreates and returns a new authentication token for the currently authenticated User. The `bearerToken` property is only provided once, in the response body, so be sure to save it on the client for use with API requests.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\nSuccessful response.\n\n*   bearerTokenstringRequired\n    \n    The authentication token's actual value. This token is only provided in this response, and can never be retrieved again in the future. Be sure to save it somewhere safe!\n    \n    Example: `uRKJSTt0L4RaSkiMj41QTkxM`\n    \n*   tokenRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response. |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v3/user/tokens/{tokenId}\n\nInvalidate an authentication token, such that it will no longer be valid for future HTTP requests.\n\n| Path Parameter | Description |\n| --- | --- |\n| tokenId | string<br><br>required<br><br>The identifier of the token to invalidate. The special value \"current\" may be supplied, which invalidates the token that the HTTP request was authenticated with.<br><br>Example:`5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391` |\n\nAuthentication token successfully deleted.\n\n*   tokenIdstringRequired\n    \n    The unique identifier of the token that was deleted.\n    \n    Example: `5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Authentication token successfully deleted. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | Token not found with the requested `tokenId`. |\n\npost/registration\n\nRequest a new login for a user to get a token. This will respond with a verification token and send an email to confirm the request. Once confirmed you can use the verification token to get an authentication token.\n\n| Body Parameter | Description |\n| --- | --- |\n| email | string<br><br>required<br><br>The user email.<br><br>Example:`\"user@mail.com\"` |\n| tokenName | string<br><br>The desired name for the token. It will be displayed on the user account details.<br><br>Example:`\"Your Client App Name\"` |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The request was successful and an email was sent |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   The provided email is invalid because the owner is blocked |\n\nget/v5/user/tokens/{tokenId}\n\nRetrieve metadata about an authentication token belonging to the currently authenticated User.\n\n| Path Parameter | Description |\n| --- | --- |\n| tokenId | string<br><br>required<br><br>The identifier of the token to retrieve. The special value \"current\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with.<br><br>Example:`5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391` |\n\nSuccessful response.\n\n*   tokenRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response. |\n| `400` | One of the provided values in the request query is invalid. |\n| `403` | You do not have permission to access this resource. |\n| `404` | Token not found with the requested `tokenId`. |\n\nget/v5/user/tokens\n\nRetrieve a list of the current User's authentication tokens.\n\n*   paginationRequired\n    \n*   testingToken\n    \n*   tokensarrayRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` |     |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/registration/verify\n\nVerify the user accepted the login request and get a authentication token. The user email address and the token received after requesting the login must be added to the URL as a query string with the names `email` and `token`.\n\n| Query Parameter | Description |\n| --- | --- |\n| token | string<br><br>required<br><br>The token returned when the login was requested. |\n| email | string<br><br>Email to verify the login. |\n| landingPage | string<br><br>The page on which the user started their session. |\n| oppId | string |\n| pageBeforeConversionPage | string<br><br>The page that sent the user to the signup page. |\n| sessionReferrer | string<br><br>Referrer to the session. |\n| ssoUserId | string<br><br>The SAML Profile ID, when connecting a SAML Profile to a Team member for the first time. |\n| teamName | string<br><br>The name of this user's team. |\n| teamPlan | string of the following<br><br>The plan for this user's team (pro or hobby).<br><br>Allowed values:`pro``hobby` |\n| teamSlug | string<br><br>The slug for this user's team. |\n| tokenName | string<br><br>The desired name for the token. It will be displayed on the user account details.<br><br>Example:`Your Client App Name` |\n| utmCampaign | string |\n| utmMedium | string |\n| utmSource | string |\n| utmTerm | string |\n\n*   emailstringRequired\n    \n    Email address of the authenticated user.\n    \n    Example: `amy@example.com`\n    \n*   teamIdstring\n    \n    When completing SAML Single Sign-On authentication, this will be the ID of the Team that was authenticated for.\n    \n    Example: `team_LLHUOMOoDlqOp8wPE4kFo9pE`\n    \n*   tokenstringRequired\n    \n    The user authentication token that can be used to perform API requests.\n    \n    Example: `1ioXyz9Ue4xdCYGROet1dlKd`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The verification was successful. |\n| `400` | *   One of the provided values in the request query is invalid.<br>    <br>*   The slug is already in use<br>    <br>*   The provided token exists but is not yet confirmed |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The verification sso token is invalid or not found<br>    <br>*   The verification token is invalid or not found |\n| `404` |     |\n| `503` |     |",
  "title": "Authentication",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/artifacts",
  "markdown": "# Artifacts\n\nhead/v8/artifacts/{hash}\n\nCheck that a cache artifact with the given `hash` exists. This request returns response headers only and is equivalent to a `GET` request to this endpoint where the response contains no body.\n\n| Path Parameter | Description |\n| --- | --- |\n| hash | string<br><br>required<br><br>The artifact hash<br><br>Example:`12HKQaOmR5t5Uy6vdcQsNIiZgHGB` |\n\nThe artifact was found and headers are returned\n\n| Code | Description |\n| --- | --- |\n| `200` | The artifact was found and headers are returned |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.<br>    <br>*   The Remote Caching usage limit has been reached for this account for this billing cycle.<br>    <br>*   Remote Caching has been disabled for this team or user. An owner can enable it in the billing settings. |\n| `404` | The artifact was not found |\n\npost/v8/artifacts\n\nQuery information about an array of artifacts.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   object\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.<br>    <br>*   The Remote Caching usage limit has been reached for this account for this billing cycle.<br>    <br>*   Remote Caching has been disabled for this team or user. An owner can enable it in the billing settings. |\n\nget/v8/artifacts/{hash}\n\nDownloads a cache artifact indentified by its `hash` specified on the request path. The artifact is downloaded as an octet-stream. The client should verify the content-length header and response body.\n\n| Path Parameter | Description |\n| --- | --- |\n| hash | string<br><br>required<br><br>The artifact hash<br><br>Example:`12HKQaOmR5t5Uy6vdcQsNIiZgHGB` |\n\nAn octet stream response that will be piped to the response stream.\n\n*   string (binary)\n    \n    An octet stream response that will be piped to the response stream.\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The artifact was found and is downloaded as a stream. Content-Length should be verified. |\n| `400` | *   One of the provided values in the request query is invalid.<br>    <br>*   One of the provided values in the headers is invalid |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.<br>    <br>*   The Remote Caching usage limit has been reached for this account for this billing cycle.<br>    <br>*   Remote Caching has been disabled for this team or user. An owner can enable it in the billing settings. |\n| `404` | The artifact was not found |\n\npost/v8/artifacts/events\n\nRecords an artifacts cache usage event. The body of this request is an array of cache usage events. The supported event types are `HIT` and `MISS`. The source is either `LOCAL` the cache event was on the users filesystem cache or `REMOTE` if the cache event is for a remote cache. When the event is a `HIT` the request also accepts a number `duration` which is the time taken to generate the artifact in the cache.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\nSuccess. Event recorded.\n\n| Code | Description |\n| --- | --- |\n| `200` | Success. Event recorded. |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the headers is invalid |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.<br>    <br>*   The Remote Caching usage limit has been reached for this account for this billing cycle.<br>    <br>*   Remote Caching has been disabled for this team or user. An owner can enable it in the billing settings. |\n\nget/v8/artifacts/status\n\nCheck the status of Remote Caching for this principal. Returns a JSON-encoded status indicating if Remote Caching is enabled, disabled, or disabled due to usage limits.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   statusstringRequired\n    \n    One of: `disabled` | `enabled` | `over_limit` | `paused`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` |     |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n\nput/v8/artifacts/{hash}\n\nUploads a cache artifact identified by the `hash` specified on the path. The cache artifact can then be downloaded with the provided `hash`.\n\n| Path Parameter | Description |\n| --- | --- |\n| hash | string<br><br>required<br><br>The artifact hash<br><br>Example:`12HKQaOmR5t5Uy6vdcQsNIiZgHGB` |\n\n*   urlsarrayRequired\n    \n    Array of URLs where the artifact was updated\n    \n    Example: `[\"https://api.vercel.com/v2/now/artifact/12HKQaOmR5t5Uy6vdcQsNIiZgHGB\"]`\n    \n\n| Code | Description |\n| --- | --- |\n| `202` | File successfully uploaded |\n| `400` | *   One of the provided values in the request query is invalid.<br>    <br>*   One of the provided values in the headers is invalid<br>    <br>*   File size is not valid |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.<br>    <br>*   The Remote Caching usage limit has been reached for this account for this billing cycle.<br>    <br>*   Remote Caching has been disabled for this team or user. An owner can enable it in the billing settings. |",
  "title": "Artifacts",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/certs",
  "markdown": "# Certs\n\nget/v7/certs/{id}\n\nGet cert by id\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required<br><br>The cert id |\n\n*   autoRenewbooleanRequired\n    \n*   cnsarrayRequired\n    \n*   createdAtnumberRequired\n    \n*   expiresAtnumberRequired\n    \n*   idstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npost/v7/certs\n\nIssue a new cert\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   autoRenewbooleanRequired\n    \n*   cnsarrayRequired\n    \n*   createdAtnumberRequired\n    \n*   expiresAtnumberRequired\n    \n*   idstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `449` |     |\n| `500` |     |\n\ndelete/v7/certs/{id}\n\nRemove cert\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required<br><br>The cert id to remove |\n\n*   object\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nput/v7/certs\n\nUpload a cert\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   autoRenewbooleanRequired\n    \n*   cnsarrayRequired\n    \n*   createdAtnumberRequired\n    \n*   expiresAtnumberRequired\n    \n*   idstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `402` | This feature is only available for Enterprise customers. |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |",
  "title": "Certs",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/checks",
  "markdown": "# Checks\n\npost/v1/deployments/{deploymentId}/checks\n\nCreates a new check. This endpoint must be called with an OAuth2 or it will produce a 400 error.\n\n| Path Parameter | Description |\n| --- | --- |\n| deploymentId | string<br><br>required<br><br>The deployment to create the check for.<br><br>Example:`dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6` |\n\n*   blockingbooleanRequired\n    \n*   completedAtnumber\n    \n*   conclusionstring\n    \n    One of: `canceled` | `failed` | `neutral` | `succeeded` | `skipped` | `stale`\n    \n*   createdAtnumberRequired\n    \n*   deploymentIdstringRequired\n    \n*   detailsUrlstring\n    \n*   externalIdstring\n    \n*   idstringRequired\n    \n*   integrationIdstringRequired\n    \n*   namestringRequired\n    \n*   outputobject\n    \n*   Properties\n    \n*   pathstring\n    \n*   rerequestableboolean\n    \n*   startedAtnumber\n    \n*   statusstringRequired\n    \n    One of: `registered` | `running` | `completed`\n    \n*   updatedAtnumberRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid.<br>    <br>*   Cannot create check for finished deployment<br>    <br>*   The provided token is not from an OAuth2 Client |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The deployment was not found |\n\nget/v1/deployments/{deploymentId}/checks\n\nList all of the checks created for a deployment.\n\n| Path Parameter | Description |\n| --- | --- |\n| deploymentId | string<br><br>required<br><br>The deployment to get all checks for<br><br>Example:`dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6` |\n\n*   checksarrayRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The deployment was not found |\n\nget/v1/deployments/{deploymentId}/checks/{checkId}\n\nReturn a detailed response for a single check.\n\n| Path Parameter | Description |\n| --- | --- |\n| checkId | string<br><br>required<br><br>The check to fetch<br><br>Example:`check_2qn7PZrx89yxY34vEZPD31Y9XVj6` |\n| deploymentId | string<br><br>required<br><br>The deployment to get the check for.<br><br>Example:`dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6` |\n\n*   blockingbooleanRequired\n    \n*   completedAtnumber\n    \n*   conclusionstring\n    \n    One of: `canceled` | `failed` | `neutral` | `succeeded` | `skipped` | `stale`\n    \n*   createdAtnumberRequired\n    \n*   deploymentIdstringRequired\n    \n*   detailsUrlstring\n    \n*   externalIdstring\n    \n*   idstringRequired\n    \n*   integrationIdstringRequired\n    \n*   namestringRequired\n    \n*   outputobject\n    \n*   Properties\n    \n*   pathstring\n    \n*   rerequestableboolean\n    \n*   startedAtnumber\n    \n*   statusstringRequired\n    \n    One of: `registered` | `running` | `completed`\n    \n*   updatedAtnumberRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The provided token is not from an OAuth2 Client that created the Check |\n| `404` | *   Check was not found<br>    <br>*   The deployment was not found |\n\npost/v1/deployments/{deploymentId}/checks/{checkId}/rerequest\n\nRerequest a selected check that has failed.\n\n| Path Parameter | Description |\n| --- | --- |\n| checkId | string<br><br>required<br><br>The check to rerun<br><br>Example:`check_2qn7PZrx89yxY34vEZPD31Y9XVj6` |\n| deploymentId | string<br><br>required<br><br>The deployment to rerun the check for.<br><br>Example:`dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6` |\n\n*   object\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | *   The deployment was not found<br>    <br>*   Check was not found |\n\npatch/v1/deployments/{deploymentId}/checks/{checkId}\n\nUpdate an existing check. This endpoint must be called with an OAuth2 or it will produce a 400 error.\n\n| Path Parameter | Description |\n| --- | --- |\n| checkId | string<br><br>required<br><br>The check being updated<br><br>Example:`check_2qn7PZrx89yxY34vEZPD31Y9XVj6` |\n| deploymentId | string<br><br>required<br><br>The deployment to update the check for.<br><br>Example:`dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6` |\n\n*   blockingbooleanRequired\n    \n*   completedAtnumber\n    \n*   conclusionstring\n    \n    One of: `canceled` | `failed` | `neutral` | `succeeded` | `skipped` | `stale`\n    \n*   createdAtnumberRequired\n    \n*   deploymentIdstringRequired\n    \n*   detailsUrlstring\n    \n*   externalIdstring\n    \n*   idstringRequired\n    \n*   integrationIdstringRequired\n    \n*   namestringRequired\n    \n*   outputobject\n    \n*   Properties\n    \n*   pathstring\n    \n*   rerequestableboolean\n    \n*   startedAtnumber\n    \n*   statusstringRequired\n    \n    One of: `registered` | `running` | `completed`\n    \n*   updatedAtnumberRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid.<br>    <br>*   The provided token is not from an OAuth2 Client |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | *   Check was not found<br>    <br>*   The deployment was not found |\n| `413` | The output provided is too large |",
  "title": "Checks",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/domains",
  "markdown": "# Domains\n\npost/v5/domains/buy\n\nAllows to purchase the specified domain.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   domainobjectRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `201` | Successful response for purchasing a Domain. |\n| `202` | Domain purchase is being processed asynchronously. |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |\n| `429` |     |\n\nget/v4/domains/price\n\nCheck the price to purchase a domain and how long a single purchase period is.\n\n| Query Parameter | Description |\n| --- | --- |\n| name | string<br><br>required<br><br>The name of the domain for which the price needs to be checked.<br><br>Example:`example.com` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n| type | string of the following<br><br>In which status of the domain the price needs to be checked.<br><br>Example:`new`<br><br>Allowed values:`new``renewal` |\n\nSuccessful response which returns the price of the domain and the period.\n\n*   periodnumberRequired\n    \n    The number of years the domain could be held before paying again.\n    \n    Example: `1`\n    \n*   pricenumberRequired\n    \n    The domain price in USD.\n    \n    Example: `20`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response which returns the price of the domain and the period. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v4/domains/status\n\nCheck if a domain name is available for purchase.\n\n| Query Parameter | Description |\n| --- | --- |\n| name | string<br><br>required<br><br>The name of the domain for which we would like to check the status.<br><br>Example:`example.com` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   availablebooleanRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response checking if a Domain's name is available. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npost/v5/domains\n\nThis endpoint is used for adding a new apex domain name with Vercel for the authenticating user. Can also be used for initiating a domain transfer request from an external Registrar to Vercel.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   domainarrayRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |\n\ndelete/v6/domains/{domain}\n\nDelete a previously registered domain name from Vercel. Deleting a domain will automatically remove any associated aliases.\n\n| Path Parameter | Description |\n| --- | --- |\n| domain | string<br><br>required<br><br>The name of the domain.<br><br>Example:`example.com` |\n\n*   uidstringRequired\n    \n    The id of the newly created DNS record\n    \n    Example: `rec_V0fra8eEgQwEpFhYG2vTzC3K`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response removing a domain. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |\n\nget/v5/domains/{domain}\n\nGet information for a single domain in an account or team.\n\n| Path Parameter | Description |\n| --- | --- |\n| domain | string<br><br>required<br><br>The name of the domain.<br><br>Example:`example.com` |\n\n*   domainobjectRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response retrieving an information for a specific domains. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v6/domains/{domain}/config\n\nGet a Domain's configuration.\n\n| Path Parameter | Description |\n| --- | --- |\n| domain | string<br><br>required<br><br>The name of the domain.<br><br>Example:`example.com` |\n\n*   acceptedChallengesarray\n    \n    Which challenge types the domain can use for issuing certs.\n    \n*   configuredBystring or null\n    \n    One of: `CNAME` | `A` | `http` | `dns-01`\n    \n    How we see the domain's configuration. - `CNAME`: Domain has a CNAME pointing to Vercel. - `A`: Domain's A record is resolving to Vercel. - `http`: Domain is resolving to Vercel but may be behind a Proxy. - `dns-01`: Domain is not resolving to Vercel but dns-01 challenge is enabled. - `null`: Domain is not resolving to Vercel.\n    \n*   misconfiguredbooleanRequired\n    \n    Whether or not the domain is configured AND we can automatically generate a TLS certificate.\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/domains/{domain}/registry\n\nFetch domain transfer availability or transfer status if a transfer is in progress.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   reasonstringRequired\n    \n    Description associated with transferable state.\n    \n*   statusstringRequired\n    \n    One of: `pending_owner` | `pending_admin` | `pending_registry` | `completed` | `cancelled` | `undef` | `unknown`\n    \n    The current state of an ongoing transfer. `pending_owner`: Awaiting approval by domain's admin contact (every transfer begins with this status). If approval is not given within five days, the transfer is cancelled. `pending_admin`: Waiting for approval by Vercel Registrar admin. `pending_registry`: Awaiting registry approval (the transfer completes after 7 days unless it is declined by the current registrar). `completed`: The transfer completed successfully. `cancelled`: The transfer was cancelled. `undef`: No transfer exists for this domain. `unknown`: This TLD is not supported by Vercel's Registrar.\n    \n*   transferPolicystring or nullRequired\n    \n    One of: `charge-and-renew` | `no-charge-no-change` | `no-change` | `new-term` | `not-supported`\n    \n    The domain's transfer policy (depends on TLD requirements). `charge-and-renew`: transfer will charge for renewal and will renew the existing domain's registration. `no-charge-no-change`: transfer will have no change to registration period and does not require charge. `no-change`: transfer charge is required, but no change in registration period. `new-term`: transfer charge is required and a new registry term is set based on the transfer date. `not-supported`: transfers are not supported for this domain or TLD. `null`: This TLD is not supported by Vercel's Registrar.\n    \n*   transferablebooleanRequired\n    \n    Whether or not the domain is transferable\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` |     |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v5/domains\n\nRetrieves a list of domains registered for the authenticated user or team. By default it returns the last 20 domains if no limit is provided.\n\n| Query Parameter | Description |\n| --- | --- |\n| limit | number<br><br>Maximum number of domains to list from a request.<br><br>Example:`20` |\n| since | number<br><br>Get domains created after this JavaScript timestamp.<br><br>Example:`1609499532000` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n| until | number<br><br>Get domains created before this JavaScript timestamp.<br><br>Example:`1612264332000` |\n\n*   domainsarrayRequired\n    \n*   Properties\n    \n*   paginationRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response retrieving a list of domains. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |\n\npatch/v3/domains/{domain}\n\nUpdate or move apex domain.\n\n| Path Parameter | Description |\n| --- | --- |\n| domain | string |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |",
  "title": "Domains",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/aliases",
  "markdown": "# Aliases\n\npost/v2/deployments/{id}/aliases\n\nCreates a new alias for the deployment with the given deployment ID. The authenticated user or team must own this deployment. If the desired alias is already assigned to another deployment, then it will be removed from the old deployment and assigned to the new one.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string of the following<br><br>required<br><br>The ID of the deployment the aliases should be listed for<br><br>Example:`dpl_FjvFJncQHQcZMznrUm9EoB8sFuPa`<br><br>type: `string` |\n\n*   aliasstringRequired\n    \n    The assigned alias name\n    \n    Example: `my-alias.vercel.app`\n    \n*   createdstring (date-time)Required\n    \n    The date when the alias was created\n    \n    Example: `2017-04-26T23:00:34.232Z`\n    \n*   oldDeploymentIdstring or null\n    \n    The unique identifier of the previously aliased deployment, only received when the alias was used before\n    \n    Example: `dpl_FjvFJncQHQcZMznrUm9EoB8sFuPa`\n    \n*   uidstringRequired\n    \n    The unique identifier of the alias\n    \n    Example: `2WjyKQmM8ZnGcJsPWMrHRHrE`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The alias was successfully assigned to the deployment |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid.<br>    <br>*   The cert for the provided alias is not ready<br>    <br>*   The deployment is not READY and can not be aliased<br>    <br>*   The supplied alias is invalid |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   If no .vercel.app alias exists then we fail (nothing to mirror) |\n| `404` | *   The domain used for the alias was not found<br>    <br>*   The deployment was not found |\n| `409` | *   The provided alias is already assigned to the given deployment<br>    <br>*   The domain is not allowed to be used |\n\ndelete/v2/aliases/{aliasId}\n\nDelete an Alias with the specified ID.\n\n| Path Parameter | Description |\n| --- | --- |\n| aliasId | string of the following<br><br>required<br><br>The ID or alias that will be removed<br><br>Example:`2WjyKQmM8ZnGcJsPWMrHRHrE`<br><br>type: `string` |\n\n*   statusstringRequired\n    \n    One of: `SUCCESS`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The alias was successfully removed |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The alias was not found |\n\nget/v4/aliases/{idOrAlias}\n\nRetrieves an Alias for the given host name or alias ID.\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrAlias | string<br><br>required<br><br>The alias or alias ID to be retrieved<br><br>Example:`example.vercel.app` |\n\n*   array\n    \n*   Array\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The alias information |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The alias was not found |\n\nget/v4/aliases\n\nRetrieves a list of aliases for the authenticated User or Team. When `domain` is provided, only aliases for that domain will be returned. When `projectId` is provided, it will only return the given project aliases.\n\n| Query Parameter | Description |\n| --- | --- |\n| domain | array <= 20 items \\| string of the following<br><br>Get only aliases of the given domain name<br><br>`<= 20 items`<br><br>Example:`my-test-domain.com`<br><br>type: `array`<br><br>type: `string` |\n| from | number<br><br>deprecated<br><br>Get only aliases created after the provided timestamp<br><br>Example:`1540095775951` |\n| limit | number<br><br>Maximum number of aliases to list from a request<br><br>Example:`10` |\n| projectId | string<br><br>Filter aliases from the given `projectId`<br><br>Example:`prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB` |\n| rollbackDeploymentId | string<br><br>Get aliases that would be rolled back for the given deployment<br><br>Example:`dpl_XXX` |\n| since | number<br><br>Get aliases created after this JavaScript timestamp<br><br>Example:`1540095775941` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n| until | number<br><br>Get aliases created before this JavaScript timestamp<br><br>Example:`1540095775951` |\n\n*   aliasesarrayRequired\n    \n*   Properties\n    \n*   paginationRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The paginated list of aliases |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v2/deployments/{id}/aliases\n\nRetrieves all Aliases for the Deployment with the given ID. The authenticated user or team must own the deployment.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required<br><br>The ID of the deployment the aliases should be listed for<br><br>Example:`dpl_FjvFJncQHQcZMznrUm9EoB8sFuPa` |\n\n*   aliasesarrayRequired\n    \n    A list of the aliases assigned to the deployment\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The list of aliases assigned to the deployment |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The deployment was not found |",
  "title": "Aliases",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/dns",
  "markdown": "# DNS\n\npost/v2/domains/{domain}/records\n\nCreates a DNS record for a domain.\n\n| Path Parameter | Description |\n| --- | --- |\n| domain | string<br><br>required<br><br>The domain used to create the DNS record.<br><br>Example:`example.com` |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response showing the uid of the newly created DNS record. |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |\n\nget/v4/domains/{domain}/records\n\nRetrieves a list of DNS records created for a domain name. By default it returns 20 records if no limit is provided. The rest can be retrieved using the pagination options.\n\n| Path Parameter | Description |\n| --- | --- |\n| domain | string<br><br>required<br><br>Example:`example.com` |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response retrieving a list of paginated DNS records. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v2/domains/{domain}/records/{recordId}\n\nRemoves an existing DNS record from a domain name.\n\n| Path Parameter | Description |\n| --- | --- |\n| domain | string<br><br>required<br><br>Example:`example.com` |\n| recordId | string<br><br>required<br><br>Example:`rec_V0fra8eEgQwEpFhYG2vTzC3K` |\n\n*   object\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response by removing the specified DNS record. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npatch/v1/domains/records/{recordId}\n\nUpdates an existing DNS record for a domain name.\n\n| Path Parameter | Description |\n| --- | --- |\n| recordId | string<br><br>required<br><br>The id of the DNS record<br><br>Example:`rec_2qn7pzrx89yxy34vezpd31y9` |\n\n*   commentstring\n    \n*   createdAtnumber or null\n    \n*   creatorstringRequired\n    \n*   domainstringRequired\n    \n*   idstringRequired\n    \n*   namestringRequired\n    \n*   recordTypestringRequired\n    \n    One of: `A` | `AAAA` | `ALIAS` | `CAA` | `CNAME` | `HTTPS` | `MX` | `SRV` | `TXT` | `NS`\n    \n*   ttlnumber\n    \n*   typestringRequired\n    \n    One of: `record` | `record-sys`\n    \n*   valuestringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |",
  "title": "DNS",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/deployments",
  "markdown": "# Deployments\n\npatch/v12/deployments/{id}/cancel\n\nThis endpoint allows you to cancel a deployment which is currently building, by supplying its `id` in the URL.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required<br><br>The unique identifier of the deployment.<br><br>Example:`dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd` |\n\nThe private deployment representation of a Deployment.\n\n*   aliasarray\n    \n*   aliasAssignedbooleanRequired\n    \n*   aliasAssignedAtOne of the following objects or null\n    \n*   One of\n    \n*   aliasErrorobject or null\n    \n*   Properties\n    \n*   aliasFinalstring or null\n    \n*   aliasWarningobject or null\n    \n*   Properties\n    \n*   alwaysRefuseToBuildboolean\n    \n*   autoAssignCustomDomainsboolean\n    \n    applies to custom domains only, defaults to `true`\n    \n*   automaticAliasesarray\n    \n*   bootedAtnumberRequired\n    \n*   buildobjectRequired\n    \n*   Properties\n    \n*   buildErrorAtnumber\n    \n*   buildSkippedbooleanRequired\n    \n*   buildingAtnumberRequired\n    \n*   buildsarray\n    \n*   canceledAtnumber\n    \n*   checksConclusionstring\n    \n    One of: `succeeded` | `failed` | `skipped` | `canceled`\n    \n*   checksStatestring\n    \n    One of: `registered` | `running` | `completed`\n    \n*   connectBuildsEnabledboolean\n    \n*   connectConfigurationIdstring\n    \n*   createdAtnumberRequired\n    \n*   createdInstringRequired\n    \n*   creatorobjectRequired\n    \n*   Properties\n    \n*   cronsarray\n    \n*   Properties\n    \n*   customEnvironmentOne of the following objects\n    \n*   One of\n    \n*   deletedAtnumber or null\n    \n*   envarrayRequired\n    \n*   errorCodestring\n    \n*   errorLinkstring\n    \n*   errorMessagestring or null\n    \n*   errorStepstring\n    \n*   flagsOne of the following objects\n    \n*   One of\n    \n*   functionsobject or null\n    \n*   gitRepoOne of the following objects or null\n    \n*   One of\n    \n*   gitSourceOne of the following objects\n    \n*   One of\n    \n*   idstringRequired\n    \n*   initReadyAtnumber\n    \n*   inspectorUrlstring or nullRequired\n    \n*   isFirstBranchDeploymentboolean\n    \n*   isInConcurrentBuildsQueuebooleanRequired\n    \n*   lambdasarray\n    \n*   Properties\n    \n*   metaobjectRequired\n    \n*   monorepoManagerstring or null\n    \n*   namestringRequired\n    \n*   oidcTokenClaimsobject\n    \n*   One of\n    \n*   ownerIdstringRequired\n    \n*   passiveConnectConfigurationIdstring\n    \n    Since November 2023 this field defines a connect configuration that will only be used to deploy passive lambdas to (as in passiveRegions)\n    \n*   passiveRegionsarray\n    \n    Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service\n    \n*   planstringRequired\n    \n    One of: `pro` | `enterprise` | `hobby`\n    \n*   previewCommentsEnabledboolean\n    \n*   projectobject\n    \n*   Properties\n    \n*   projectIdstringRequired\n    \n*   projectSettingsobjectRequired\n    \n*   Properties\n    \n*   publicbooleanRequired\n    \n*   readynumber\n    \n*   readyStatestringRequired\n    \n    One of: `BUILDING` | `ERROR` | `INITIALIZING` | `QUEUED` | `READY` | `CANCELED`\n    \n*   readyStateReasonstring\n    \n*   readySubstatestring\n    \n    One of: `STAGED` | `PROMOTED`\n    \n    Since June 2023 Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - PROMOTED: has seen production traffic\n    \n*   regionsarrayRequired\n    \n*   routesarray or nullRequired\n    \n\nOne of:\n\n*   Properties\n    \n*   Properties\n    \n*   Properties\n    \n*   sourcestring\n    \n    One of: `api-trigger-git-deploy` | `cli` | `clone/repo` | `git` | `import` | `import/repo` | `redeploy`\n    \n*   statusstringRequired\n    \n    One of: `BUILDING` | `ERROR` | `INITIALIZING` | `QUEUED` | `READY` | `CANCELED`\n    \n*   targetstring or null\n    \n    One of: `staging` | `production`\n    \n*   teamobject\n    \n*   Properties\n    \n*   ttyBuildLogsboolean\n    \n*   typestringRequired\n    \n    One of: `LAMBDAS`\n    \n*   undeletedAtnumber\n    \n*   urlstringRequired\n    \n*   userAliasesarray\n    \n*   versionnumberRequired\n    \n    One of: `2`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npost/v13/deployments\n\nCreate a new deployment with all the required and intended data. If the deployment is not a git deployment, all files must be provided with the request, either referenced or inlined. Additionally, a deployment id can be specified to redeploy a previous deployment.\n\n| Query Parameter | Description |\n| --- | --- |\n| forceNew | string of the following<br><br>Forces a new deployment even if there is a previous similar deployment<br><br>Allowed values:`0``1` |\n| skipAutoDetectionConfirmation | string of the following<br><br>Allows to skip framework detection so the API would not fail to ask for confirmation<br><br>Allowed values:`0``1` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\nThe successfully created deployment\n\n*   aliasarray\n    \n*   aliasAssignedbooleanRequired\n    \n*   aliasAssignedAtOne of the following objects or null\n    \n*   One of\n    \n*   aliasErrorobject or null\n    \n*   Properties\n    \n*   aliasFinalstring or null\n    \n*   aliasWarningobject or null\n    \n*   Properties\n    \n*   alwaysRefuseToBuildboolean\n    \n*   autoAssignCustomDomainsboolean\n    \n    applies to custom domains only, defaults to `true`\n    \n*   automaticAliasesarray\n    \n*   bootedAtnumberRequired\n    \n*   buildobjectRequired\n    \n*   Properties\n    \n*   buildErrorAtnumber\n    \n*   buildSkippedbooleanRequired\n    \n*   buildingAtnumberRequired\n    \n*   buildsarray\n    \n*   canceledAtnumber\n    \n*   checksConclusionstring\n    \n    One of: `succeeded` | `failed` | `skipped` | `canceled`\n    \n*   checksStatestring\n    \n    One of: `registered` | `running` | `completed`\n    \n*   connectBuildsEnabledboolean\n    \n*   connectConfigurationIdstring\n    \n*   createdAtnumberRequired\n    \n*   createdInstringRequired\n    \n*   creatorobjectRequired\n    \n*   Properties\n    \n*   cronsarray\n    \n*   Properties\n    \n*   customEnvironmentOne of the following objects\n    \n*   One of\n    \n*   deletedAtnumber or null\n    \n*   envarrayRequired\n    \n*   errorCodestring\n    \n*   errorLinkstring\n    \n*   errorMessagestring or null\n    \n*   errorStepstring\n    \n*   flagsOne of the following objects\n    \n*   One of\n    \n*   functionsobject or null\n    \n*   gitRepoOne of the following objects or null\n    \n*   One of\n    \n*   gitSourceOne of the following objects\n    \n*   One of\n    \n*   idstringRequired\n    \n*   initReadyAtnumber\n    \n*   inspectorUrlstring or nullRequired\n    \n*   isFirstBranchDeploymentboolean\n    \n*   isInConcurrentBuildsQueuebooleanRequired\n    \n*   lambdasarray\n    \n*   Properties\n    \n*   metaobjectRequired\n    \n*   monorepoManagerstring or null\n    \n*   namestringRequired\n    \n*   oidcTokenClaimsobject\n    \n*   One of\n    \n*   ownerIdstringRequired\n    \n*   passiveConnectConfigurationIdstring\n    \n    Since November 2023 this field defines a connect configuration that will only be used to deploy passive lambdas to (as in passiveRegions)\n    \n*   passiveRegionsarray\n    \n    Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service\n    \n*   planstringRequired\n    \n    One of: `pro` | `enterprise` | `hobby`\n    \n*   previewCommentsEnabledboolean\n    \n*   projectobject\n    \n*   Properties\n    \n*   projectIdstringRequired\n    \n*   projectSettingsobjectRequired\n    \n*   Properties\n    \n*   publicbooleanRequired\n    \n*   readynumber\n    \n*   readyStatestringRequired\n    \n    One of: `CANCELED` | `ERROR` | `QUEUED` | `BUILDING` | `INITIALIZING` | `READY`\n    \n*   readyStateReasonstring\n    \n*   readySubstatestring\n    \n    One of: `STAGED` | `PROMOTED`\n    \n    Since June 2023 Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - PROMOTED: has seen production traffic\n    \n*   regionsarrayRequired\n    \n*   routesarray or nullRequired\n    \n\nOne of:\n\n*   Properties\n    \n*   Properties\n    \n*   Properties\n    \n*   sourcestring\n    \n    One of: `cli` | `git` | `import` | `import/repo` | `clone/repo` | `api-trigger-git-deploy` | `redeploy`\n    \n*   statusstringRequired\n    \n    One of: `CANCELED` | `ERROR` | `QUEUED` | `BUILDING` | `INITIALIZING` | `READY`\n    \n*   targetstring or null\n    \n    One of: `staging` | `production`\n    \n*   teamobject\n    \n*   Properties\n    \n*   ttyBuildLogsboolean\n    \n*   typestringRequired\n    \n    One of: `LAMBDAS`\n    \n*   undeletedAtnumber\n    \n*   urlstringRequired\n    \n*   userAliasesarray\n    \n*   versionnumberRequired\n    \n    One of: `2`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The successfully created deployment |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated<br>    <br>*   Deploying to Serverless Functions to multiple regions requires a plan update |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` | The deployment project is being transferred |\n\ndelete/v13/deployments/{id}\n\nThis API allows you to delete a deployment, either by supplying its `id` in the URL or the `url` of the deployment as a query parameter. You can obtain the ID, for example, by listing all deployments.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required<br><br>The ID of the deployment to be deleted<br><br>Example:`dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd` |\n\n*   statestringRequired\n    \n    One of: `DELETED`\n    \n    A constant with the final state of the deployment.\n    \n*   uidstringRequired\n    \n    The removed deployment ID.\n    \n    Example: `dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The deployment was successfully deleted |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The deployment was not found |\n\nget/v13/deployments/{idOrUrl}\n\nRetrieves information for a deployment either by supplying its ID (`id` property) or Hostname (`url` property). Additional details will be included when the authenticated user or team is an owner of the deployment.\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrUrl | string<br><br>required<br><br>The unique identifier or hostname of the deployment.<br><br>Example:`dpl_89qyp1cskzkLrVicDaZoDbjyHuDJ` |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | *   The deployment including only public information<br>    <br>*   The deployment including both public and private information |\n| `400` | One of the provided values in the request query is invalid. |\n| `403` | You do not have permission to access this resource. |\n| `404` | The deployment was not found |\n\nget/v3/deployments/{idOrUrl}/events\n\nGet the build logs of a deployment by deployment ID and build ID. It can work as an infinite stream of logs or as a JSON endpoint depending on the input parameters.\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrUrl | string<br><br>required<br><br>The unique identifier or hostname of the deployment.<br><br>Example:`dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd` |\n\n*   array\n    \n*   Array\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | *   A stream of jsonlines where each line is a deployment log item.<br>    <br>*   Array of deployment logs for the provided query. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The deployment was not found |\n\nget/v7/deployments/{id}/files/{fileId}\n\nAllows to retrieve the content of a file by supplying the file identifier and the deployment unique identifier. The response body will contain a JSON response containing the contents of the file encoded as base64.\n\n| Path Parameter | Description |\n| --- | --- |\n| fileId | string<br><br>required<br><br>The unique file identifier |\n| id  | string<br><br>required<br><br>The unique deployment identifier |\n\nNone\n\n| Code | Description |\n| --- | --- |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | *   File not found<br>    <br>*   Deployment not found |\n| `410` | Invalid API version. |\n\nget/v6/deployments\n\nList deployments under the authenticated user or team. If a deployment hasn't finished uploading (is incomplete), the `url` property will have a value of `null`.\n\n| Query Parameter | Description |\n| --- | --- |\n| app | string<br><br>Name of the deployment.<br><br>Example:`docs` |\n| from | number<br><br>deprecated<br><br>Gets the deployment created after this Date timestamp. (default: current time)<br><br>Example:`1612948664566` |\n| limit | number<br><br>Maximum number of deployments to list from a request.<br><br>Example:`10` |\n| projectId | string<br><br>Filter deployments from the given ID or name.<br><br>Example:`QmXGTs7mvAMMC7WW5ebrM33qKG32QK3h4vmQMjmY` |\n| rollbackCandidate | boolean<br><br>Filter deployments based on their rollback candidacy |\n| since | number<br><br>Get Deployments created after this JavaScript timestamp.<br><br>Example:`1540095775941` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| state | string<br><br>Filter deployments based on their state (`BUILDING`, `ERROR`, `INITIALIZING`, `QUEUED`, `READY`, `CANCELED`)<br><br>Example:`BUILDING,READY` |\n| target | string of the following<br><br>Filter deployments based on the environment.<br><br>Example:`production`<br><br>Allowed values:`production``preview` |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n| to  | number<br><br>deprecated<br><br>Gets the deployment created before this Date timestamp. (default: current time)<br><br>Example:`1612948664566` |\n| until | number<br><br>Get Deployments created before this JavaScript timestamp.<br><br>Example:`1540095775951` |\n| users | string<br><br>Filter out deployments based on users who have created the deployment.<br><br>Example:`kr1PsOIzqEL5Xg6M4VZcZosf,K4amb7K9dAt5R2vBJWF32bmY` |\n\n*   deploymentsarrayRequired\n    \n*   Properties\n    \n*   paginationRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `422` |     |\n\nget/v6/deployments/{id}/files\n\nAllows to retrieve the file structure of a deployment by supplying the deployment unique identifier.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required<br><br>The unique deployment identifier |\n\n*   array\n    \n*   Array\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Retrieved the file tree successfully |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | *   File tree not found<br>    <br>*   Deployment not found |\n\npost/v2/files\n\nBefore you create a deployment you need to upload the required files for that deployment. To do it, you need to first upload each file to this endpoint. Once that's completed, you can create a new deployment with the uploaded files. The file content must be placed inside the body of the request. In the case of a successful response you'll receive a status code 200 with an empty body.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | *   File already uploaded<br>    <br>*   File successfully uploaded |\n| `400` | *   One of the provided values in the headers is invalid<br>    <br>*   Digest is not valid<br>    <br>*   File size is not valid |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |",
  "title": "Deployments",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/logDrains",
  "markdown": "# Log Drains\n\npost/v1/log-drains\n\nCreates a configurable log drain. This endpoint must be called with a team AccessToken (integration OAuth2 clients are not allowed)\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   clientIdstring\n    \n*   compressionstring\n    \n    One of: `gzip` | `zstd` | `none`\n    \n*   configurationIdstring\n    \n*   createdAtnumberRequired\n    \n*   createdFromstring\n    \n    One of: `self-served`\n    \n*   deletedAtnumber or nullRequired\n    \n*   deliveryFormatstringRequired\n    \n    One of: `json` | `ndjson` | `syslog`\n    \n*   disabledAtnumber\n    \n*   disabledBystring\n    \n*   disabledReasonstring\n    \n    One of: `disabled-by-owner` | `feature-not-available` | `account-plan-downgrade` | `disabled-by-admin`\n    \n*   environmentsarrayRequired\n    \n*   firstErrorTimestampnumber\n    \n*   headersobject\n    \n*   idstringRequired\n    \n*   namestringRequired\n    \n*   ownerIdstringRequired\n    \n*   projectIdsarray\n    \n*   samplingRatenumber\n    \n*   secretstring\n    \n    The secret to validate the log-drain payload\n    \n*   sourcesarray\n    \n*   statusstring\n    \n    One of: `enabled` | `disabled` | `errored`\n    \n*   teamIdstring or null\n    \n*   updatedAtnumberRequired\n    \n*   urlstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npost/v2/integrations/log-drains\n\nCreates an Integration log drain. This endpoint must be called with an OAuth2 client (integration), since log drains are tied to integrations. If it is called with a different token type it will produce a 400 error.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   branchstring\n    \n    The branch regexp of log drain\n    \n    Example: `feature/*`\n    \n*   clientIdstring\n    \n    The oauth2 client application id that created this log drain\n    \n    Example: `oac_xRhY4LAB7yLhUADD69EvV7ct`\n    \n*   configurationIdstring\n    \n    The client configuration this log drain was created with\n    \n    Example: `icfg_cuwj0AdCdH3BwWT4LPijCC7t`\n    \n*   createdAtnumberRequired\n    \n    A timestamp that tells you when the log drain was created\n    \n    Example: `1558531915505`\n    \n*   createdFromstring\n    \n    One of: `self-served` | `integration`\n    \n    Whether the log drain was created by an integration or by a user\n    \n    Example: `integration`\n    \n*   deliveryFormatstring\n    \n    One of: `json` | `ndjson` | `syslog`\n    \n    The delivery log format\n    \n    Example: `json`\n    \n*   environmentsarrayRequired\n    \n    The environment of log drain\n    \n    Example: `[\"production\"]`\n    \n*   headersobject\n    \n    The headers to send with the request\n    \n    Example: `{\"Authorization\": \"Bearer 123\"}`\n    \n*   idstringRequired\n    \n    The unique identifier of the log drain. Always prefixed with `ld_`\n    \n    Example: `ld_nBuA7zCID8g4QZ8g`\n    \n*   namestringRequired\n    \n    The name of the log drain\n    \n    Example: `My first log drain`\n    \n*   ownerIdstringRequired\n    \n    The identifier of the team or user whose events will trigger the log drain\n    \n    Example: `kr1PsOIzqEL5Xg6M4VZcZosf`\n    \n*   projectIdstring or null\n    \n    Example: `AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb`\n    \n*   projectIdsarray\n    \n    The identifier of the projects this log drain is associated with\n    \n    Example: `AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb`\n    \n*   samplingRatenumber\n    \n    The sampling rate of log drain\n    \n    Example: `0.5`\n    \n*   sourcesarray\n    \n    The sources from which logs are currently being delivered to this log drain.\n    \n    Example: `[\"build\",\"edge\"]`\n    \n*   urlstringRequired\n    \n    The URL to call when logs are generated\n    \n    Example: `https://example.com/log-drain`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The log drain was successfully created |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   The provided token is not from an OAuth2 Client |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/log-drains/{id}\n\nDeletes a Configurable Log Drain. This endpoint must be called with a team AccessToken (integration OAuth2 clients are not allowed). Only log drains owned by the authenticated team can be deleted.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required |\n\nN/A\n\n| Code | Description |\n| --- | --- |\n| `204` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/integrations/log-drains/{id}\n\nDeletes the Integration log drain with the provided `id`. When using an OAuth2 Token, the log drain can be deleted only if the integration owns it.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required<br><br>ID of the log drain to be deleted |\n\nThe log drain was successfully deleted\n\n| Code | Description |\n| --- | --- |\n| `204` | The log drain was successfully deleted |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The log drain was not found |\n\nget/v1/log-drains\n\nRetrieves a list of all the Log Drains owned by the account. This endpoint must be called with an account AccessToken (integration OAuth2 clients are not allowed). Only log drains owned by the authenticated account can be accessed.\n\n| Query Parameter | Description |\n| --- | --- |\n| projectId | string |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   array\n    \n*   Array\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/log-drains/{id}\n\nRetrieves a Configurable Log Drain. This endpoint must be called with a team AccessToken (integration OAuth2 clients are not allowed). Only log drains owned by the authenticated team can be accessed.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required |\n\n*   clientIdstring\n    \n*   compressionstring\n    \n    One of: `gzip` | `zstd` | `none`\n    \n*   configurationIdstring\n    \n*   createdAtnumberRequired\n    \n*   createdFromstring\n    \n    One of: `self-served`\n    \n*   deletedAtnumber or nullRequired\n    \n*   deliveryFormatstringRequired\n    \n    One of: `json` | `ndjson` | `syslog`\n    \n*   disabledAtnumber\n    \n*   disabledBystring\n    \n*   disabledReasonstring\n    \n    One of: `disabled-by-owner` | `feature-not-available` | `account-plan-downgrade` | `disabled-by-admin`\n    \n*   environmentsarrayRequired\n    \n*   firstErrorTimestampnumber\n    \n*   headersobject\n    \n*   idstringRequired\n    \n*   namestringRequired\n    \n*   ownerIdstringRequired\n    \n*   projectIdsarray\n    \n*   samplingRatenumber\n    \n*   secretstringRequired\n    \n*   sourcesarray\n    \n*   statusstring\n    \n    One of: `enabled` | `disabled` | `errored`\n    \n*   teamIdstring or null\n    \n*   updatedAtnumberRequired\n    \n*   urlstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v2/integrations/log-drains\n\nRetrieves a list of all Integration log drains that are defined for the authenticated user or team. When using an OAuth2 token, the list is limited to log drains created by the authenticated integration.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   array\n    \n*   Array\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | A list of log drains |\n| `400` |     |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |",
  "title": "Log Drains",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/secrets",
  "markdown": "# Secrets\n\npost/v2/secrets/{name}\n\nAllows to create a new secret.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   createdstring (date-time)Required\n    \n    The date when the secret was created.\n    \n    Example: `2021-02-10T13:11:49.180Z`\n    \n*   createdAtnumber\n    \n    Timestamp for when the secret was created.\n    \n    Example: `1609492210000`\n    \n*   decryptableboolean\n    \n    Indicates whether the secret value can be decrypted after it has been created.\n    \n    Example: `true`\n    \n*   namestringRequired\n    \n    The name of the secret.\n    \n    Example: `my-api-key`\n    \n*   projectIdstring\n    \n    The unique identifier of the project which the secret belongs to.\n    \n    Example: `prj_2WjyKQmM8ZnGcJsPWMrHRHrE`\n    \n*   teamIdstring or null\n    \n    The unique identifier of the team the secret was created for.\n    \n    Example: `team_LLHUOMOoDlqOp8wPE4kFo9pE`\n    \n*   uidstringRequired\n    \n    The unique identifier of the secret.\n    \n    Example: `sec_XCG7t7AIHuO2SBA8667zNUiM`\n    \n*   userIdstring\n    \n    The unique identifier of the user who created the secret.\n    \n    Example: `2qDDuGFTWXBLDNnqZfWPDp1A`\n    \n*   valueobjectRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response showing the created secret. |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `410` |     |\n\ndelete/v2/secrets/{idOrName}\n\nThis deletes the user or team’s secret defined in the URL.\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required<br><br>The name or the unique identifier to which the secret belongs to.<br><br>Example:`sec_RKc5iV0rV3ZSrFrHiruRno7k` |\n\n*   creatednumberRequired\n    \n    The date when the secret was created.\n    \n    Example: `2021-02-10T13:11:49.180Z`\n    \n*   namestringRequired\n    \n    The name of the deleted secret.\n    \n    Example: `my-api-key`\n    \n*   uidstringRequired\n    \n    The unique identifier of the deleted secret.\n    \n    Example: `sec_XCG7t7AIHuO2SBA8667zNUiM`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `410` |     |\n\nget/v3/secrets/{idOrName}\n\nRetrieves the information for a specific secret by passing either the secret id or name in the URL.\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required<br><br>The name or the unique identifier to which the secret belongs to.<br><br>Example:`sec_RKc5iV0rV3ZSrFrHiruRno7k` |\n\nData representing a secret.\n\n*   createdstring (date-time)Required\n    \n    The date when the secret was created.\n    \n    Example: `2021-02-10T13:11:49.180Z`\n    \n*   createdAtnumber\n    \n    Timestamp for when the secret was created.\n    \n    Example: `1609492210000`\n    \n*   decryptableboolean\n    \n    Indicates whether the secret value can be decrypted after it has been created.\n    \n    Example: `true`\n    \n*   namestringRequired\n    \n    The name of the secret.\n    \n    Example: `my-api-key`\n    \n*   projectIdstring\n    \n    The unique identifier of the project which the secret belongs to.\n    \n    Example: `prj_2WjyKQmM8ZnGcJsPWMrHRHrE`\n    \n*   teamIdstring or null\n    \n    The unique identifier of the team the secret was created for.\n    \n    Example: `team_LLHUOMOoDlqOp8wPE4kFo9pE`\n    \n*   uidstringRequired\n    \n    The unique identifier of the secret.\n    \n    Example: `sec_XCG7t7AIHuO2SBA8667zNUiM`\n    \n*   userIdstring\n    \n    The unique identifier of the user who created the secret.\n    \n    Example: `2qDDuGFTWXBLDNnqZfWPDp1A`\n    \n*   valuestring\n    \n    The value of the secret.\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response retrieving a secret. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `410` |     |\n\nget/v3/secrets\n\nRetrieves the active Vercel secrets for the authenticated user or team. By default it returns 20 secrets. The rest can be retrieved using the pagination options. The body will contain an entry for each secret.\n\n| Query Parameter | Description |\n| --- | --- |\n| id  | string<br><br>deprecated<br><br>Filter out secrets based on comma separated secret ids.<br><br>Example:`sec_RKc5iV0rV3ZSrFrHiruRno7k,sec_fGc5iV0rV3ZSrFrHiruRnouQ` |\n| projectId | string<br><br>deprecated<br><br>Filter out secrets that belong to a project.<br><br>Example:`prj_2WjyKQmM8ZnGcJsPWMrHRHrE` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   paginationRequired\n    \n*   secretsarrayRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response retrieving a list of secrets. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `410` |     |\n\npatch/v2/secrets/{name}\n\nEnables to edit the name of a secret. The name has to be unique to the user or team’s secrets.\n\n| Path Parameter | Description |\n| --- | --- |\n| name | string<br><br>required<br><br>The name of the secret.<br><br>Example:`my-api-key` |\n\n*   createdstring (date-time)Required\n    \n*   namestringRequired\n    \n*   oldNamestringRequired\n    \n*   uidstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `410` |     |",
  "title": "Secrets",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/projectMembers",
  "markdown": "# Project Members\n\npost/v1/projects/{idOrName}/members\n\nAdds a new member to the project.\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required<br><br>The ID or name of the Project.<br><br>Example:`prj_pavWOn1iLObbXLRiwVvzmPrTWyTf` |\n\nResponds with the project ID on success.\n\n*   idstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Responds with the project ID on success. |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `500` |     |\n\nget/v1/projects/{idOrName}/members\n\nLists all members of a project.\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required<br><br>The ID or name of the Project.<br><br>Example:`prj_pavWOn1iLObbXLRiwVvzmPrTWyTf` |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Paginated list of members for the project. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/projects/{idOrName}/members/{uid}\n\nRemove a member from a specific project\n\n| Path Parameter | Description |\n| --- | --- |\n| idOrName | string<br><br>required<br><br>The ID or name of the Project.<br><br>Example:`prj_pavWOn1iLObbXLRiwVvzmPrTWyTf` |\n| uid | string<br><br>required<br><br>The user ID of the member.<br><br>Example:`ndlgr43fadlPyCtREAqxxdyFK` |\n\n*   idstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |",
  "title": "Project Members",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/integrations",
  "markdown": "# Integrations\n\ndelete/v1/integrations/configuration/{id}\n\nAllows to remove the configuration with the `id` provided in the parameters. The configuration and all of its resources will be removed. This includes Webhooks, LogDrains and Project Env variables.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required |\n\nThe configuration was successfully removed\n\n| Code | Description |\n| --- | --- |\n| `204` | The configuration was successfully removed |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The configuration was not found |\n\nget/v1/integrations/configuration/{id}\n\nAllows to retrieve a the configuration with the provided id in case it exists. The authenticated user or team must be the owner of the config in order to access it.\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required<br><br>ID of the configuration to check<br><br>Example:`icfg_cuwj0AdCdH3BwWT4LPijCC7t` |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The configuration with the provided id |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The configuration was not found |\n\nget/v1/integrations/configurations\n\nAllows to retrieve all configurations for an authenticated integration. When the `project` view is used, configurations generated for the authorization flow will be filtered out of the results.\n\n| Query Parameter | Description |\n| --- | --- |\n| view | string of the following<br><br>required<br><br>Allowed values:`account``project` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The list of configurations for the authenticated user |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n\nget/v1/integrations/git-namespaces\n\nLists git namespaces for a supported provider. Supported providers are `github`, `gitlab` and `bitbucket`. If the provider is not provided, it will try to obtain it from the user that authenticated the request.\n\n| Query Parameter | Description |\n| --- | --- |\n| host | string<br><br>The custom Git host if using a custom Git provider, like GitHub Enterprise Server<br><br>Example:`ghes-test.now.systems` |\n| provider | string of the following<br><br>Allowed values:`github``github-custom-host``gitlab``bitbucket` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   array\n    \n*   Array\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `403` | You do not have permission to access this resource. |\n\nget/v1/integrations/search-repo\n\nLists git repositories linked to a namespace `id` for a supported provider. A specific namespace `id` can be obtained via the `git-namespaces` endpoint. Supported providers are `github`, `gitlab` and `bitbucket`. If the provider or namespace is not provided, it will try to obtain it from the user that authenticated the request.\n\n| Query Parameter | Description |\n| --- | --- |\n| host | string<br><br>The custom Git host if using a custom Git provider, like GitHub Enterprise Server<br><br>Example:`ghes-test.now.systems` |\n| installationId | string |\n| namespaceId |     |\n| provider | string of the following<br><br>Allowed values:`github``github-custom-host``gitlab``bitbucket` |\n| query | string |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   gitAccountobjectRequired\n    \n*   Properties\n    \n*   reposarrayRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `403` | You do not have permission to access this resource. |",
  "title": "Integrations",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/teams",
  "markdown": "# Teams\n\npost/v1/teams\n\nCreate a new Team under your account. You need to send a POST request with the desired Team slug, and optionally the Team name.\n\nBody ParameterDescription\n\nslug\n\nstring\n\nrequired\n\nThe desired slug for the Team\n\n`<= 48 characters`\n\nExample:`\"a-random-team\"`\n\nattribution\n\nobject\n\nAttribution information for the session or current page\n\nlandingPage\n\nstring\n\nSession landing page\n\npageBeforeConversionPage\n\nstring\n\nReferrer to the signup page\n\nsessionReferrer\n\nstring\n\nSession referrer\n\nutm\n\nobject\n\n|     |     |\n| --- | --- |\n| utmCampaign | string<br><br>UTM campaign |\n| utmMedium | string<br><br>UTM medium |\n| utmSource | string<br><br>UTM source |\n| utmTerm | string<br><br>UTM term |\n\nname\n\nstring\n\nThe desired name for the Team. It will be generated from the provided slug if nothing is provided\n\n`<= 256 characters`\n\nExample:`\"A Random Team\"`\n\nThe team was created successfully\n\n*   billingobjectRequired\n    \n*   Properties\n    \n*   idstringRequired\n    \n    Id of the created team\n    \n    Example: `team_nLlpyC6RE1qxqglFKbrMxlud`\n    \n*   slugstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The team was created successfully |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   The slug is already in use |\n| `403` | You do not have permission to access this resource. |\n\ndelete/v1/teams/{teamId}\n\nDelete a team under your account. You need to send a `DELETE` request with the desired team `id`. An optional array of reasons for deletion may also be sent.\n\n| Path Parameter | Description |\n| --- | --- |\n| teamId | string<br><br>required<br><br>The Team identifier to perform the request on behalf of. |\n\nThe Team was successfully deleted\n\n*   idstringRequired\n    \n    The ID of the deleted Team\n    \n    Example: `team_LLHUOMOoDlqOp8wPE4kFo9pE`\n    \n*   newDefaultTeamIdErrorboolean\n    \n    Signifies whether the default team update has failed, when newDefaultTeamId is provided in request query.\n    \n    Example: `true`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The Team was successfully deleted |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` |     |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The authenticated user can't access the team |\n| `404` | The team was not found |\n| `409` |     |\n\ndelete/v1/teams/{teamId}/invites/{inviteId}\n\nDelete an active Team invite code.\n\n| Path Parameter | Description |\n| --- | --- |\n| inviteId | string<br><br>required<br><br>The Team invite code ID.<br><br>Example:`2wn2hudbr4chb1ecywo9dvzo7g9sscs6mzcz8htdde0txyom4l` |\n\n*   idstringRequired\n    \n    ID of the team.\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successfully deleted Team invite code. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   Invite managed by directory sync<br>    <br>*   Not authorized to access this team. |\n| `404` | *   Team invite code not found.<br>    <br>*   No team found. |\n\nget/v2/teams/{teamId}\n\nGet information for the Team specified by the `teamId` parameter.\n\n| Path Parameter | Description |\n| --- | --- |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n| Code | Description |\n| --- | --- |\n| `200` | The requested team |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   Not authorized to access the team. |\n| `404` | Team was not found. |\n\nget/v1/teams/{teamId}/request/{userId}\n\nCheck the status of a join request. It'll respond with a 404 if the request has been declined. If no `userId` path segment was provided, this endpoint will instead return the status of the authenticated user.\n\n| Path Parameter | Description |\n| --- | --- |\n| userId | string |\n\n*   accessRequestedAtnumberRequired\n    \n    Timestamp in milliseconds when the user requested access to the team.\n    \n    Example: `1588720733602`\n    \n*   bitbucketobject or nullRequired\n    \n    Map of the connected Bitbucket account.\n    \n*   Properties\n    \n*   confirmedbooleanRequired\n    \n    Current status of the membership. Will be `true` if confirmed, if pending it'll be `false`.\n    \n*   githubobject or nullRequired\n    \n    Map of the connected GitHub account.\n    \n*   Properties\n    \n*   gitlabobject or nullRequired\n    \n    Map of the connected GitLab account.\n    \n*   Properties\n    \n*   joinedFromobjectRequired\n    \n    A map that describes the origin from where the user joined.\n    \n*   Properties\n    \n*   teamNamestringRequired\n    \n    The name of the team.\n    \n    Example: `My Team`\n    \n*   teamSlugstringRequired\n    \n    The slug of the team.\n    \n    Example: `my-team`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successfully |\n| `400` | *   One of the provided values in the request query is invalid.<br>    <br>*   User is already a confirmed member of the team and did not request access. Only visible when the authenticated user does have access to the team. |\n| `403` | You do not have permission to access this resource. |\n| `404` | *   The provided user doesn't have a membership.<br>    <br>*   Team was not found. |\n\nget/v2/teams/{teamId}/members\n\nGet a paginated list of team members for the provided team.\n\n| Query Parameter | Description |\n| --- | --- |\n| eligibleMembersForProjectId | string<br><br>Include team members who are eligible to be members of the specified project. |\n| excludeProject | string<br><br>Exclude members who belong to the specified project. |\n| limit | number<br><br>Limit how many teams should be returned<br><br>`>=1`<br><br>Example:`20` |\n| role | string of the following<br><br>Only return members with the specified team role.<br><br>Example:`OWNER`<br><br>Allowed values:`OWNER``MEMBER``DEVELOPER``VIEWER``BILLING``CONTRIBUTOR` |\n| search | string<br><br>Search team members by their name, username, and email. |\n| since | number<br><br>Timestamp in milliseconds to only include members added since then.<br><br>Example:`1540095775951` |\n| until | number<br><br>Timestamp in milliseconds to only include members added until then.<br><br>Example:`1540095775951` |\n\n*   emailInviteCodesarray\n    \n*   Properties\n    \n*   membersarrayRequired\n    \n*   Properties\n    \n*   paginationobjectRequired\n    \n*   Properties\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | No team was found. |\n\nget/v2/teams\n\nGet a paginated list of all the Teams the authenticated User is a member of.\n\n| Query Parameter | Description |\n| --- | --- |\n| limit | number<br><br>Maximum number of Teams which may be returned.<br><br>Example:`20` |\n| since | number<br><br>Timestamp (in milliseconds) to only include Teams created since then.<br><br>Example:`1540095775951` |\n| until | number<br><br>Timestamp (in milliseconds) to only include Teams created until then.<br><br>Example:`1540095775951` |\n\nA paginated list of teams.\n\n*   paginationRequired\n    \n*   teamsarrayRequired\n    \n\nOne of:\n\n| Code | Description |\n| --- | --- |\n| `200` | A paginated list of teams. |\n| `400` | One of the provided values in the request query is invalid. |\n| `403` | You do not have permission to access this resource. |\n\npost/v1/teams/{teamId}/members\n\nInvite a user to join the team specified in the URL. The authenticated user needs to be an `OWNER` in order to successfully invoke this endpoint. The user can be specified with an email or an ID. If both email and ID are provided, ID will take priority.\n\nBody ParameterDescription\n\nemail\n\nstring\n\nThe email address of the user to invite\n\nExample:`\"john@example.com\"`\n\nprojects\n\narray of object\n\n|     |     |\n| --- | --- |\n| projectId | string<br><br>required<br><br>The ID of the project.<br><br>`<= 64 characters`<br><br>Example:`prj_ndlgr43fadlPyCtREAqxxdyFK` |\n| role | string of the following<br><br>required<br><br>Sets the project roles for the invited user<br><br>Example:`ADMIN`<br><br>Allowed values:`ADMIN``PROJECT_VIEWER``PROJECT_DEVELOPER` |\n\nrole\n\nstring of the following\n\nThe role of the user to invite\n\nExample:`[MEMBER,VIEWER]`\n\nAllowed values:`OWNER``MEMBER``DEVELOPER``BILLING``VIEWER``CONTRIBUTOR`\n\nuid\n\nstring\n\nThe id of the user to invite\n\nExample:`\"kr1PsOIzqEL5Xg6M4VZcZosf\"`\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The member was successfully added to the team |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid.<br>    <br>*   The user already requested access to the team<br>    <br>*   Hobby teams are not allowed to add seats.<br>    <br>*   The team reached the maximum allowed amount of members |\n| `401` |     |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   The authenticated user must be a team owner to perform the action |\n| `404` | The team was not found |\n| `503` |     |\n\npost/v1/teams/{teamId}/members/teams/join\n\nJoin a team with a provided invite code or team ID.\n\n| Body Parameter | Description |\n| --- | --- |\n| inviteCode | string<br><br>The invite code to join the team.<br><br>Example:`\"fisdh38aejkeivn34nslfore9vjtn4ls\"` |\n\nSuccessfully joined a team.\n\n*   fromstringRequired\n    \n    The origin of how the user joined.\n    \n    Example: `email`\n    \n*   namestringRequired\n    \n    The name of the team the user joined.\n    \n    Example: `My Team`\n    \n*   slugstringRequired\n    \n    The slug of the team the user joined.\n    \n    Example: `my-team`\n    \n*   teamIdstringRequired\n    \n    The ID of the team the user joined.\n    \n    Example: `team_LLHUOMOoDlqOp8wPE4kFo9pE`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successfully joined a team. |\n| `400` | One of the provided values in the request body is invalid. |\n| `402` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npatch/v2/teams/{teamId}\n\nUpdate the information of a Team specified by the `teamId` parameter. The request body should contain the information that will be updated on the Team.\n\n| Path Parameter | Description |\n| --- | --- |\n| teamId | string<br><br>required<br><br>The Team identifier to perform the request on behalf of. |\n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `402` |     |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   Not authorized to update the team. Must be an OWNER. |\n| `404` | Team was not found. |\n\ndelete/v1/teams/{teamId}/members/{uid}\n\nRemove a Team Member from the Team, or dismiss a user that requested access, or leave a team.\n\n| Path Parameter | Description |\n| --- | --- |\n| uid | string<br><br>required<br><br>The user ID of the member.<br><br>Example:`ndlgr43fadlPyCtREAqxxdyFK` |\n\n*   idstringRequired\n    \n    ID of the team.\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successfully removed a member of the team. |\n| `400` | *   One of the provided values in the request query is invalid.<br>    <br>*   Cannot leave the team as the only owner. |\n| `401` |     |\n| `403` | *   You do not have permission to access this resource.<br>    <br>*   Not authorized to update the team. |\n| `404` | *   A user with the specified ID does not exist.<br>    <br>*   No team found. |\n| `503` |     |\n\npost/v1/teams/{teamId}/request\n\nRequest access to a team as a member. An owner has to approve the request. Only 10 users can request access to a team at the same time.\n\nBody ParameterDescription\n\njoinedFrom\n\nobject\n\nrequired\n\n|     |     |\n| --- | --- |\n| commitId | string<br><br>The commit sha if the origin is a git provider.<br><br>Example:`f498d25d8bd654b578716203be73084b31130cd7` |\n| gitUserId | One of the following<br><br>The ID of the Git account of the user who requests access.<br><br>Example:`103053343`<br><br>type: `string`<br><br>type: `number` |\n| gitUserLogin | string<br><br>The login name for the Git account of the user who requests access.<br><br>Example:`jane-doe` |\n| origin | string of the following<br><br>required<br><br>The origin of the request.<br><br>Example:`github`<br><br>Allowed values:`import``teams``github``gitlab``bitbucket``feedback``organization-teams` |\n| repoId | string<br><br>The ID of the repository for the given Git provider.<br><br>Example:`67753070` |\n| repoPath | string<br><br>The path to the repository for the given Git provider.<br><br>Example:`jane-doe/example` |\n\n*   accessRequestedAtnumber\n    \n*   bitbucketobject or nullRequired\n    \n*   Properties\n    \n*   confirmedboolean\n    \n*   githubobject or nullRequired\n    \n*   Properties\n    \n*   gitlabobject or nullRequired\n    \n*   Properties\n    \n*   joinedFromobject\n    \n*   Properties\n    \n*   teamNamestringRequired\n    \n*   teamSlugstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successfuly requested access to the team. |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | The team was not found. |\n| `503` |     |\n\npatch/v1/teams/{teamId}/members/{uid}\n\nUpdate the membership of a Team Member on the Team specified by `teamId`, such as changing the _role_ of the member, or confirming a request to join the Team for an unconfirmed member. The authenticated user must be an `OWNER` of the Team.\n\n| Path Parameter | Description |\n| --- | --- |\n| uid | string<br><br>required<br><br>The ID of the member.<br><br>Example:`ndfasllgPyCtREAqxxdyFKb` |\n\n*   idstringRequired\n    \n    ID of the team.\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successfully updated the membership. |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid.<br>    <br>*   Cannot disconnect SSO from a Team member that does not have a SSO connection.<br>    <br>*   Cannot confirm a member that is already confirmed.<br>    <br>*   Cannot confirm a member that did not request access. |\n| `401` | Team members can only be updated by an owner, or by the authenticated user if they are only disconnecting their SAML connection to the Team. |\n| `402` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` | *   The provided user is not part of this team.<br>    <br>*   A user with the specified ID does not exist.<br>    <br>*   Team not found. |\n| `500` |     |",
  "title": "Teams",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/edge-config",
  "markdown": "# Edge Config\n\npost/v1/edge-config\n\nCreates an Edge Config.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\nAn Edge Config\n\n*   createdAtnumber\n    \n*   digeststring\n    \n*   idstring\n    \n*   itemCountnumberRequired\n    \n*   ownerIdstring\n    \n*   schemaobject\n    \n*   sizeInBytesnumberRequired\n    \n*   slugstring\n    \n    Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).\n    \n*   transferobject\n    \n    Keeps track of the current state of the Edge Config while it gets transferred.\n    \n*   Properties\n    \n*   updatedAtnumber\n    \n\n| Code | Description |\n| --- | --- |\n| `201` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npost/v1/edge-config/{edgeConfigId}/token\n\nAdds a token to an existing Edge Config.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\n*   idstringRequired\n    \n*   tokenstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `201` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/edge-config/{edgeConfigId}\n\nDelete an Edge Config by id.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\nN/A\n\n| Code | Description |\n| --- | --- |\n| `204` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/edge-config/{edgeConfigId}/schema\n\nDeletes the schema of existing Edge Config.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\nN/A\n\n| Code | Description |\n| --- | --- |\n| `204` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/edge-config/{edgeConfigId}/tokens\n\nDeletes one or more tokens of an existing Edge Config.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\nN/A\n\n| Code | Description |\n| --- | --- |\n| `204` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/edge-config/{edgeConfigId}\n\nReturns an Edge Config.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\nThe EdgeConfig.\n\n*   createdAtnumber\n    \n*   digeststring\n    \n*   idstring\n    \n*   itemCountnumberRequired\n    \n*   ownerIdstring\n    \n*   schemaobject\n    \n*   sizeInBytesnumberRequired\n    \n*   slugstring\n    \n    Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).\n    \n*   transferobject\n    \n    Keeps track of the current state of the Edge Config while it gets transferred.\n    \n*   Properties\n    \n*   updatedAtnumber\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The EdgeConfig. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/edge-config/{edgeConfigId}/item/{edgeConfigItemKey}\n\nReturns a specific Edge Config Item.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n| edgeConfigItemKey | string<br><br>required |\n\n| Code | Description |\n| --- | --- |\n| `200` | The EdgeConfig. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/edge-config/{edgeConfigId}/items\n\nReturns all items of an Edge Config.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\n| Code | Description |\n| --- | --- |\n| `200` | The EdgeConfig. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/edge-config/{edgeConfigId}/schema\n\nReturns the schema of an Edge Config.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\nThe EdgeConfig.\n\n*   object or null\n    \n    The EdgeConfig.\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | The EdgeConfig. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/edge-config/{edgeConfigId}/token/{token}\n\nReturn meta data about an Edge Config token.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n| token | string<br><br>required |\n\n| Code | Description |\n| --- | --- |\n| `200` | The EdgeConfig. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/edge-config/{edgeConfigId}/tokens\n\nReturns all tokens of an Edge Config.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\n| Code | Description |\n| --- | --- |\n| `200` | The EdgeConfig. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/edge-config\n\nReturns all Edge Configs.\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\nList of all edge configs.\n\n*   createdAtnumber\n    \n*   digeststring\n    \n*   idstring\n    \n*   itemCountnumberRequired\n    \n*   ownerIdstring\n    \n*   schemaobject\n    \n*   sizeInBytesnumberRequired\n    \n*   slugstring\n    \n    Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).\n    \n*   transferobject\n    \n    Keeps track of the current state of the Edge Config while it gets transferred.\n    \n*   Properties\n    \n*   updatedAtnumber\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | List of all edge configs. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\npatch/v1/edge-config/{edgeConfigId}/items\n\nUpdate multiple Edge Config Items in batch.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\n*   statusstringRequired\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |\n\npost/v1/edge-config/{edgeConfigId}/schema\n\nUpdate an Edge Config's schema.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\nThe JSON schema uploaded by the user\n\n*   object or null\n    \n    The JSON schema uploaded by the user\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nput/v1/edge-config/{edgeConfigId}\n\nUpdates an Edge Config.\n\n| Path Parameter | Description |\n| --- | --- |\n| edgeConfigId | string<br><br>required |\n\nAn Edge Config\n\n*   createdAtnumber\n    \n*   digeststring\n    \n*   idstring\n    \n*   itemCountnumberRequired\n    \n*   ownerIdstring\n    \n*   schemaobject\n    \n*   sizeInBytesnumberRequired\n    \n*   slugstring\n    \n    Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).\n    \n*   transferobject\n    \n    Keeps track of the current state of the Edge Config while it gets transferred.\n    \n*   Properties\n    \n*   updatedAtnumber\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | *   One of the provided values in the request body is invalid.<br>    <br>*   One of the provided values in the request query is invalid. |\n| `401` |     |\n| `402` | *   The account was soft-blocked for an unhandled reason.<br>    <br>*   The account is missing a payment so payment method must be updated |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |",
  "title": "Edge Config",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/edge-network/security-headers",
  "markdown": "# Content Security Policy\n\nContent Security Policy is a browser feature designed to prevent cross-site scripting (XSS) and related code-injection attacks. CSP provides developers with the ability to define an allowlist of sources of trusted content, effectively restricting the browser from loading any resources from non-allowlisted sources.\n\nWhen a browser receives the `Content-Security-Policy` HTTP header from a web server it adheres to the defined policy, blocking or allowing content loads based on the provided rules.\n\n[XSS](https://vercel.com/guides/understanding-xss-attacks) remains one of the most prevalent web application vulnerabilities. In an XSS attack, malicious scripts are injected into websites, which run on the end user's browser, potentially leading to stolen data, session hijacking, and other malicious actions.\n\nCSP can reduce the likelihood of XSS by:\n\n*   Allowlisting content sources – CSP works by specifying which sources of content are legitimate for a web application. You can define a list of valid sources for scripts, images, stylesheets, and other web resources. Any content not loaded from these approved sources will be blocked. Thus, if an attacker tries to inject a script from an unauthorized source, CSP will prevent it from loading and executing.\n*   Inline script blocking – A common vector for XSS is through inline scripts, which are scripts written directly within the HTML content. CSP can be configured to block all inline scripts, rendering script tags injected by attackers (like `<script>alert('XSS Attack!')</script>`) ineffective.\n*   Disallowing `eval()` – The `eval()` function in JavaScript can be misused to execute arbitrary code, which can be a potential XSS vector. CSP can be set up to disallow the use of `eval()` and its related functions.\n*   Nonce and hashes – If there's a need to allow certain inline scripts (while still blocking others), CSP supports a nonce (number used once) that can be added to a script tag. Only scripts with the correct nonce value will be executed. Similarly, CSP can use hashes to allow the execution of specific inline scripts by matching their hash value.\n*   Reporting violations – CSP can be set in `report-only` mode where policy violations don't result in content being blocked but instead send a report to a specified URI. This helps website administrators detect and respond to potential XSS attempts, allowing them to patch vulnerabilities and refine their CSP rules.\n*   Plugin restrictions – Some XSS attacks might exploit browser plugins. With CSP, you can limit the types of plugins that can be invoked, further reducing potential attack vectors.\n\nWhile input sanitization and secure coding practices are essential, CSP acts as a second line of defense, reducing the risk of [XSS exploits](https://vercel.com/guides/understanding-xss-attacks#how-xss-attacks-occur).\n\nBeyond XSS, CSP can prevent the unauthorized loading of content, protecting users from other threats like clickjacking and data injection.\n\n```\nContent-Security-Policy: default-src 'self'; script-src 'self' cdn.example.com; img-src 'self' img.example.com; style-src 'self';\n```\n\nThis policy permits:\n\n*   All content to be loaded only from the site's own origin.\n*   Scripts to be loaded from the site's own origin and cdn.example.com.\n*   Images from the site's own origin and img.example.com\n*   Styles only from the site's origin.\n\n*   Before enforcing a CSP, start with the `Content-Security-Policy-Report-Only` header. You can do this to keep an eye on possible violations without actually blocking any content. Change to enforcing mode once you know your policy won't break any features.\n*   Avoid using `unsafe-inline` and `unsafe-eval` . The use of `eval()` and inline scripts/styles can pose security risks. Avoid enabling these unless absolutely necessary as a best practice. Use nonces or hashes to allowlist particular scripts or styles if you need to allow inline scripts or styles.\n*   Use nonces for inline scripts and styles. To allow that particular inline content, a nonce (number used once) can be added to a script or style tag, the CSP header, or both. This ensures that only the inline scripts and styles you have explicitly permitted will be used.\n*   Be as detailed as you can, and avoid using too general sources like `.` . List the specific subdomains you want to allow rather than allowing all subdomains (`.domain.com`).\n*   Keep directives updated. As your project evolves, the sources from which you load content might change. Ensure you update your CSP directives accordingly.\n\nKeep in mind that while CSP is a robust security measure, it's part of a multi-layered security strategy. Input validation, output encoding, and other security practices remain crucial.\n\nAdditionally, while CSP is supported by modern browsers, nuances exist in their implementations. Ensure you test your policy across diverse browsers, accounting for variations and ensuring the same security postures.",
  "title": "Content Security Policy",
  "description": "Learn how the Content Security Policy (CSP) offers defense against web vulnerabilities, its key features, and best practices.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/solutions/cms",
  "markdown": null,
  "title": "",
  "description": null,
  "languageCode": null
},
{
  "url": "https://vercel.com/docs/functions/streaming/quickstart",
  "markdown": "# Vercel Streaming Quickstart\n\nLearn how to stream responses from Serverless and Edge Functions to provide an improved user experience.\n\nIn this quickstart, you'll learn how to get started with streaming on Vercel. The guide will cover:\n\n*   Creating a Vercel Function\n*   Using the Web Streams API to stream an API response\n*   Running your function locally\n\n1.  You should have the latest version of Vercel CLI installed. To check your version, use `vercel --version`. To [install](https://vercel.com/docs/cli#installing-vercel-cli) or update Vercel CLI, use:\n    \n2.  You should be using [Node.js 18](https://vercel.com/docs/functions/serverless-functions/runtimes/node-js#node.js-version) or later.\n    \n3.  You should have an existing project. If you don't have one, you can run the following terminal commands to create a Next project:\n    \n\n```\nnpx create-next-app@latest\n```\n\nVercel supports streaming responses from Vercel Functions:\n\n*   Most of the time, functions will be created as part of your framework code. For example, using a Next.js Route Handler\n*   Using the `edge` [runtime](https://vercel.com/docs/functions/streaming#edge-runtime), will always allow for streaming. Learn more about selecting a runtime in [Choosing a Runtime](https://vercel.com/docs/functions/streaming#choosing-a-runtime)\n*   For serverless streaming using the `nodejs` runtime, you can either:\n    *   Use a framework that supports streaming\n    *   Use the Web Handler [signature](https://vercel.com/docs/functions/functions-api-reference#function-signature)\n    *   Use `supportsResponseStreaming:true` with the Node.js [signature](https://vercel.com/docs/functions/streaming#streaming-signature)\n\n1.  1.  To get started, first create `app/api/streaming-example/route.ts`\n    \n    2.  Then, add the following code, which sets up a basic Function with a route handler method:\n    \n    ```\n    export const runtime = 'nodejs';\n    export const dynamic = 'force-dynamic'; // always run dynamically\n     \n    export async function GET() {\n      // Streaming code will go here\n    }\n    ```\n    \n2.  This example will demonstrate a basic example of streaming on response from your function. Add the following code to your function:\n    \n    ```\n    export async function GET() {\n      const customReadable = new ReadableStream({\n        start(controller) {...},\n      });\n    }\n    ```\n    \n3.  Use a [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder) to emit a stream of text as UTF-8 bytes:\n    \n    ```\n    export async function GET() {\n      const encoder = new TextEncoder();\n      const customReadable = new ReadableStream({\n        start(controller) {\n          controller.enqueue(encoder.encode('Basic Streaming Test'));\n          // Prevent anything else being added to the stream\n          controller.close();\n        },\n      });\n    }\n    ```\n    \n4.  Next, start producing a streaming response from your function:\n    \n    ```\n    export async function GET() {\n      ...\n     \n      return new Response(customReadable, {\n        headers: { 'Content-Type': 'text/html; charset=utf-8' },\n      });\n    }\n    ```\n    \n    Finally, the whole file should look like this:\n    \n    ```\n    export const runtime = 'nodejs';\n    export const dynamic = 'force-dynamic'; // always run dynamically\n     \n    export async function GET() {\n      // This encoder will stream your text\n      const encoder = new TextEncoder();\n      const customReadable = new ReadableStream({\n        start(controller) {\n          // Start encoding 'Basic Streaming Test',\n          // and add the resulting stream to the queue\n          controller.enqueue(encoder.encode('Basic Streaming Test'));\n          // Prevent anything else being added to the stream\n          controller.close();\n        },\n      });\n     \n      return new Response(customReadable, {\n        headers: { 'Content-Type': 'text/html; charset=utf-8' },\n      });\n    }\n    ```\n    \n5.  Use `next dev` to start a local development server:\n    \n    Navigate to [http://localhost:3000/api/streaming-example](http://localhost:3000/api/streaming-example) to see the streamed response from your route.\n    \n    The page should display the message \"Basic Streaming Text\".\n    \n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Vercel Streaming Quickstart",
  "description": "Learn how to stream responses from Serverless and Edge Functions to provide an improved user experience.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/webhooks",
  "markdown": "# Webhooks\n\npost/v1/webhooks\n\nCreates a webhook\n\n| Query Parameter | Description |\n| --- | --- |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   createdAtnumberRequired\n    \n    A number containing the date when the webhook was created in in milliseconds\n    \n    Example: `1567024758130`\n    \n*   eventsarrayRequired\n    \n    The webhooks events\n    \n    Example: `deployment.created`\n    \n*   idstringRequired\n    \n    The webhook id\n    \n    Example: `account_hook_GflD6EYyo7F4ViYS`\n    \n*   ownerIdstringRequired\n    \n    The unique ID of the team the webhook belongs to\n    \n    Example: `ZspSRT4ljIEEmMHgoDwKWDei`\n    \n*   projectIdsarray\n    \n    The ID of the projects the webhook is associated with\n    \n    Example: `[\"prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB\"]`\n    \n*   secretstringRequired\n    \n    The webhook secret used to sign the payload\n    \n*   updatedAtnumberRequired\n    \n    A number containing the date when the webhook was updated in in milliseconds\n    \n    Example: `1567024758130`\n    \n*   urlstringRequired\n    \n    A string with the URL of the webhook\n    \n    Example: `https://my-webhook.com`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request body is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/webhooks/{id}\n\nDeletes a webhook\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required |\n\nN/A\n\n| Code | Description |\n| --- | --- |\n| `204` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/webhooks/{id}\n\nGet a webhook\n\n| Path Parameter | Description |\n| --- | --- |\n| id  | string<br><br>required |\n\n*   createdAtnumberRequired\n    \n    A number containing the date when the webhook was created in in milliseconds\n    \n    Example: `1567024758130`\n    \n*   eventsarrayRequired\n    \n    The webhooks events\n    \n    Example: `deployment.created`\n    \n*   idstringRequired\n    \n    The webhook id\n    \n    Example: `account_hook_GflD6EYyo7F4ViYS`\n    \n*   ownerIdstringRequired\n    \n    The unique ID of the team the webhook belongs to\n    \n    Example: `ZspSRT4ljIEEmMHgoDwKWDei`\n    \n*   projectIdsarray\n    \n    The ID of the projects the webhook is associated with\n    \n    Example: `[\"prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB\"]`\n    \n*   updatedAtnumberRequired\n    \n    A number containing the date when the webhook was updated in in milliseconds\n    \n    Example: `1567024758130`\n    \n*   urlstringRequired\n    \n    A string with the URL of the webhook\n    \n    Example: `https://my-webhook.com`\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\nget/v1/webhooks\n\nGet a list of webhooks\n\n| Query Parameter | Description |\n| --- | --- |\n| projectId | string |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n\n*   One of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` |     |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |",
  "title": "Webhooks",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/rest-api/endpoints/user",
  "markdown": "# User\n\nget/v2/user\n\nRetrieves information related to the currently authenticated User.\n\nSuccessful response.\n\n*   userRequiredOne of the following objects\n    \n*   One of\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response. |\n| `302` |     |\n| `400` |     |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n| `409` |     |\n\nget/v3/events\n\nRetrieves a list of \"events\" generated by the User on Vercel. Events are generated when the User performs a particular action, such as logging in, creating a deployment, and joining a Team (just to name a few). When the `teamId` parameter is supplied, then the events that are returned will be in relation to the Team that was specified.\n\n| Query Parameter | Description |\n| --- | --- |\n| limit | number<br><br>Maximum number of items which may be returned.<br><br>Example:`20` |\n| since | string<br><br>Timestamp to only include items created since then.<br><br>Example:`2019-12-08T10:00:38.976Z` |\n| slug | string<br><br>The Team slug to perform the request on behalf of. |\n| teamId | string<br><br>The Team identifier to perform the request on behalf of. |\n| types | string<br><br>Comma-delimited list of event \"types\" to filter the results by.<br><br>Example:`login,team-member-join,domain-buy` |\n| until | string<br><br>Timestamp to only include items created until then.<br><br>Example:`2019-12-09T23:00:38.976Z` |\n| userId | string<br><br>When retrieving events for a Team, the `userId` parameter may be specified to filter events generated by a specific member of the Team.<br><br>Example:`aeIInYVk59zbFF2SxfyxxmuO` |\n| withPayload | string<br><br>When set to `true`, the response will include the `payload` field for each event.<br><br>Example:`true` |\n\nSuccessful response.\n\n*   eventsarrayRequired\n    \n    Array of events generated by the User.\n    \n\n| Code | Description |\n| --- | --- |\n| `200` | Successful response. |\n| `400` | One of the provided values in the request query is invalid. |\n| `401` |     |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |\n\ndelete/v1/user\n\nInitiates the deletion process for the currently authenticated User, by sending a deletion confirmation email. The email contains a link that the user needs to visit in order to proceed with the deletion process.\n\nBody ParameterDescription\n\nreasons\n\narray of object\n\nOptional array of objects that describe the reason why the User account is being deleted.\n\n|     |     |\n| --- | --- |\n| description | string<br><br>required<br><br>Description of the reason why the User account is being deleted. |\n| slug | string<br><br>required<br><br>Idenitifier slug of the reason why the User account is being deleted. |\n\n*   emailstringRequired\n    \n    Email address of the User who has initiated deletion.\n    \n*   idstringRequired\n    \n    Unique identifier of the User who has initiated deletion.\n    \n*   messagestringRequired\n    \n    User deletion progress status.\n    \n    Example: `Verification email sent`\n    \n\n| Code | Description |\n| --- | --- |\n| `202` | Response indicating that the User deletion process has been initiated, and a confirmation email has been sent. |\n| `400` | One of the provided values in the request body is invalid. |\n| `403` | You do not have permission to access this resource. |\n| `404` |     |",
  "title": "User",
  "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/vercel-ignore",
  "markdown": "# Exclude Files from Deployments with .vercelignore\n\nThe `.vercelignore` file can be used to specify files and directories that should be excluded from the deployment process when using Vercel. This file works similarly to a `.gitignore` file, but it is specific to Vercel.\n\nThe `.vercelignore` file should be placed in the root directory of your project and should contain a list of files and directories, one per line, that should be excluded from deployment. For example, to prevent an `/image` directory and `/private.html` file within a project from being uploaded to Vercel, you would add them to the `.vercelignore` file like this:\n\nA typical `.vercelignore` file assumes all files are allowed and each entry is a pattern to ignore. Alternatively, you can ignore all files and each entry is a pattern to allow.\n\nAdd a wildcard `/*` as the first line in `.vercelignore` to ensure all directories and files in the project root are ignored. The following lines must then start with a `!` to invert the ignore action and ensure the directory or file is allowed.\n\n```\n# Ignore everything (folders and files) on root only\n/*\n!api\n!vercel.json\n!*.html\n```\n\nAside from the [default exclusions](https://vercel.com/docs/deployments/build-features#ignored-files-and-folders), all files within your project are uploaded to Vercel if no source path is specified to be excluded in a `.vercelignore` configuration file\n\nThe complete list of files and directories excluded by default can be found in the [ignored files and folders](https://vercel.com/docs/deployments/build-features#ignored-files-and-folders) documentation.\n\nThe use of a `.vercelignore` configuration file allows you to keep private files safe and also makes your deployment faster by uploading only the essential files. Non-targeted files are prevented from being deployed and served on Vercel.\n\nIf you have a monorepo, a `.vercelignore` in the project root directory always takes precedence over one that is defined at the root level. If there is no `.vercelignore` to be found at the project level, Vercel will use the `.vercelignore` at the root level.",
  "title": "Exclude Files from Deployments with .vercelignore",
  "description": "The .vercelignore file allows you to define which files and directories should be ignored when uploading your project to Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/infrastructure/compute",
  "markdown": "# Compute on Vercel\n\n\"Compute\" is an encompassing term used to describe the actions taken by a computer. When we talk about it with regards to web development and at Vercel, we use compute to describe actions such as (but not limited to) building and rendering - essential operations needed to turn your code into a site that appears for users.\n\nWhen you build your application, the build tools in your framework transform your code into production-optimized files, which are ready to be deployed to servers and delivered to users. These files include:\n\n*   HTML files for statically generated pages\n*   JavaScript code for rendering pages on the server\n*   JavaScript code for making pages interactive on the client (e.g. like a button)\n*   CSS files for styling pages\n\nHaving these files is only the first step. For your site to be consumed by your users, it must be rendered. Rendering converts the code you write into the HTML representation of your UI, which the user's browser can display. Rendering can occur on a server or the client and can happen either ahead of time at build-time or during runtime when the user has requested the site.\n\nThe next section takes a closer look at _where_ this compute happens, and describes some of the advantages and disadvantages.\n\nTraditionally with web applications, we talk about two main locations:\n\n*   Client – This is the browser on your _user's_ device that sends a request to a server for your application code. It then turns the response it receives from the server into an interface the user can interact with.\n*   Server – This is the computer in a data center that stores your application code. It receives requests from a client, does some computation, and sends back an appropriate response.\n\n![Diagram showing client and server relationship](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Frequest-response.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Diagram showing client and server relationship](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Frequest-response-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nDiagram showing client and server relationship\n\nWhether the computation happens on the client or server is dependent on the method of content generation that you use:\n\nWith Next.js apps (and the same for comparable frameworks), a combination of these methods are used. For example, the initial HTTP response returns HTML, while all subsequent navigations are client-side-rendered.\n\nWhen a user makes a request to your site, the server responds with an empty HTML shell along with the JavaScript instructions to construct the UI. This response can be cached by a CDN and delivered quickly to the user. However, they still won't be able to see your site at this stage. The user's browser is then responsible for the initial rendering based on the JavaScript instructions. CSR has the perception of being fast and allows for dynamic interactions. However, performance and capabilities are limited based on the user's device.\n\n![Diagram showing Client-Side Rendering](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fclient-side-rendering.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Diagram showing Client-Side Rendering](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fclient-side-rendering-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nDiagram showing Client-Side Rendering\n\nWhen a user makes a request to your site, your server — usually in \"the cloud\"— generates the HTML at that time (runtime) and then returns the HTML, JSON data, and JavaScript instructions back to the client's browser.\n\nThe HTML is used by the browser to show a fast non-interactive page, while the JSON and JavaScript make components interactive.\n\nWith SSR, the server is running all the time, which can be costly. While you have flexibility over the scale and resources, this is also a potential overhead. Most importantly, with Vercel, your server is in one fixed location, meaning that your users could be far away from the server, which means greater latency for them seeing your site.\n\nTangentially related to SSR is Serverless Functions. These functions, which also run in one specified location (or [region](https://vercel.com/docs/functions/serverless-functions/regions)), allow you to write small chunks of code to provide additional functionality in your application, such as handle authentication, form submissions, and database queries.\n\nWhen a user makes a request to your site, a serverless function will run on-demand, without you needing to manage the infrastructure, provision servers, or upgrade hardware.\n\n![Diagram showing pre-rendering](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fpre-rendering.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Diagram showing pre-rendering](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fpre-rendering-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nDiagram showing pre-rendering\n\nWhen a Serverless Function boots up from scratch, that is known as a _cold boot_. When it is re-used, we can say the function was _warm_.\n\nRe-using a function means the underlying container that hosts it does not get discarded. State, such as temporary files, memory caches, sub-processes, is preserved. This empowers the developer not just to minimize the time spent in the _booting_ process, but to also take advantage of caching data (in memory or filesystem) and [memoizing](https://en.wikipedia.org/wiki/Memoization) expensive computations.\n\nIt is important to note that Serverless Functions, even while the underlying container is hot, cannot leave tasks running. If a sub-process is running by the time the response is returned, the entire container is _frozen_. When a new invocation happens, if the container is re-used, it is unfrozen, which allows sub-processes to continue running.\n\nWith Static Site Generation, all of the pages in your site are built ahead of time on the server. The HTML that is generated is then cached on a server (or CDN), so when a user makes a request to your site, the content can be delivered with no additional runtime. With SSG the compute time is separate to the user's request. This removes compute time from the user's request, i.e. they don't need to wait for the site to be built, just delivered to them. While one of the benefits here is speed, a downside of doing this, traditionally, is that you can't have dynamic content (unless you use client-side compute) or personalization. However, you can now use [Vercel Edge Middleware](https://vercel.com/docs/functions/edge-middleware) as one mechanism for enabling personalization on your static content.\n\nAs we've described in the previous section, the computation of your app, the cache where it is stored, or where your app runs can happen on a server in numerous places. Usually, there are three places your code can be stored:\n\n*   Origin Server – The server that stores and runs the original version of your app code. When the origin server receives a request, it does some computation before sending a response. The result of this computation work may be moved to a CDN.\n*   CDN (Content Delivery Network) – This stores static content, such as HTML, in multiple locations around the globe, placed between the client who is requesting and the origin server that is responding. When a user sends a request, the closest CDN will respond with its cached response.\n*   The Edge – The edge refers to the edge of the network, closest to the user. While CDNs could be part of the edge, which are also distributed around the world, some Edge servers can also run code. This means that caching and code execution can be done at the edge, closer to the user. On Vercel, there are two ways to deploy to the [Edge Network](https://vercel.com/docs/edge-network/overview): [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) and [Edge Functions](https://vercel.com/docs/functions/edge-functions).\n\nIn the previous section, we talked about how the Edge works and its benefits. [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) and [Edge Functions](https://vercel.com/docs/functions/edge-functions) are two ways developers who deploy their app on Vercel can take advantage of Edge infrastructure.\n\n![Overview of Vercel's infrastructure](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fvercel-infra-overview.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Overview of Vercel's infrastructure](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fvercel-infra-overview-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nOverview of Vercel's infrastructure\n\nMiddleware is a type of function that sits on the [Edge Network](https://vercel.com/docs/edge-network/overview), before your cached content. When a user makes a request to your site, it first hits the middleware which will access the request then send an appropriate response from the server. Some examples where middleware are useful:\n\n*   Authentication – e.g. is the user logged in? If so, they'll be able to access the content. If not, you can direct them to a different page.\n*   Geolocation – e.g. where is the user located? If they're located in the EU, you can smartly display additional privacy warnings.\n*   Language – e.g. what language is the users system in? If they're in the US, we can send them to the English version of the site, If they're in Germany, we can send them to the German version of the content.\n*   A/B testing – e.g. what cohort are they in? If you're A/B testing a page, you can automatically display the correct page, without any lag or flicker.\n*   Bot identification – e.g. are they a bot?\n\nBecause middleware runs before the cache, it's an effective way of providing personalization to statically generated content. In essence, the middleware is deciding _which_ version of an entire page to show your users. This allows you to deliver pre-rendered, personalized content to users with very low latency because it's running on the edge. As a developer, this gives you more control over the user experience, without bloating the size of your client application and providing sub-par performance.\n\nEdge Functions work in a very similar way to Serverless Functions, but instead of running on a single region, they are copied across the [Edge Network](https://vercel.com/docs/edge-network/overview) and so every time the function is invoked, the region closest to the request will run the function. This results in a much lower latency, and combined with zero cold-start time, allows you to provide personalization at speed.\n\nEdge Functions run _after_ the cache and so are ideal to be used on specific, dynamic parts of your site once the page is loaded, such a date-picker with availability or a weather component on your site. This response can be cached on the [Edge Network](https://vercel.com/docs/edge-network/overview) making future invocations even faster.\n\nIt is important to note that [Edge Functions](https://vercel.com/docs/functions/edge-functions) are just one solution and not a \"one size fits all\" solution. It is possible that the database for your site sits far from the Edge server. That means that even though the edge function can be invoked quickly, it might take twice as long to get the data than if the function was located closer to the data. In this scenario, you may want to use a Serverless Function.\n\nSee the [regional Edge Functions invocation](https://vercel.com/docs/functions/edge-functions#regional-edge-function-invocation) documentation to learn more.",
  "title": "Compute on Vercel",
  "description": "At Vercel, we use compute to describe actions such as (but not limited to) building and rendering. Learn more about compute on Vercel with this guide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/functions/runtimes/go",
  "markdown": "# Using the Go Runtime with Serverless Functions\n\nThe Go runtime is used by Vercel to compile Go Serverless Functions that expose a single HTTP handler, from a `.go` file within an `/api` directory at your project's root.\n\nFor example, define an `index.go` file inside an `/api` directory as follows:\n\n```\npackage handler\n \nimport (\n  \"fmt\"\n  \"net/http\"\n)\n \nfunc Handler(w http.ResponseWriter, r *http.Request) {\n  fmt.Fprintf(w, \"<h1>Hello from Go!</h1>\")\n}\n```\n\nAn example `index.go` file inside an `/api` directory.\n\nFor advanced usage, such as using private packages with your Go projects, see the [Advanced Go Usage section](#advanced-go-usage).\n\nThe exported function needs to include the [`HandlerFunc`](https://golang.org/pkg/net/http/#HandlerFunc) signature type, but can use any valid Go exported function declaration as the function name.\n\nThe Go runtime will automatically detect the `go.mod` file at the root of your Project to determine the version of Go to use.\n\nIf `go.mod` is missing or the version is not defined, the default version 1.20 will be used.\n\nThe first time the Go version is detected, it will be automatically downloaded and cached. Subsequent deployments using the same Go version will use the cached Go version instead of downloading it again.\n\nThe Go runtime will automatically detect the `go.mod` file at the root of your Project to install dependencies.\n\nYou can provide custom build flags by using the `GO_BUILD_FLAGS` [Environment Variable](https://vercel.com/docs/projects/environment-variables).\n\n```\n{\n  \"build\": {\n    \"env\": {\n      \"GO_BUILD_FLAGS\": \"-ldflags '-s -w'\"\n    }\n  }\n}\n```\n\nAn example `-ldflags` flag with `-s -w`. This will remove debug information from the output file. This is the default value when no `GO_BUILD_FLAGS` are provided.\n\nIn order to use this runtime, no configuration is needed. You only need to create a file inside the `api` directory.\n\nThe entry point of this runtime is a global matching `.go` files that export a function that implements the `http.HandlerFunc` signature.\n\nTo install private packages with `go get`, add an [Environment Variable](https://vercel.com/docs/projects/environment-variables) named `GIT_CREDENTIALS`.\n\nThe value should be the URL to the Git repo including credentials, such as `https://username:token@github.com`.\n\nAll major Git providers are supported including GitHub, GitLab, Bitbucket, as well as a self-hosted Git server.\n\nWith GitHub, you will need to [create a personal token](https://github.com/settings/tokens) with permission to access your private repository.",
  "title": "Using the Go Runtime with Serverless Functions",
  "description": "Learn how to use the Go runtime to compile Go Serverless Functions on Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit",
  "markdown": "# Course Intro\n\nWelcome to Beginner SvelteKit: the complete course to start your journey building Svelte applications.\n\nThis course covers the Svelte basics as well as SvelteKit features. We'll be building an ecommerce site during this course. Each module contains the code for that specific part, so feel free to clone it and use it for reference as you follow along.\n\nThis course does not require prior Svelte knowledge. Having a basic understanding of JavaScript, however, will be helpful.\n\nIn this course, we will begin by covering the Svelte basics:\n\nAfter covering the basics of Svelte, we will begin learning about SvelteKit features like:\n\nBy the end of this course, you will have a complete and solid foundation to begin building apps with SvelteKit.\n\nIf you're already familiar with some Svelte topics, feel free to jump ahead past certain modules. If you're completely new, let's spend some time discussing why we are using Svelte and why you might consider learning it.\n\nSvelte allows us to build lightweight, modern, web applications. Rather than being a framework, Svelte is actually a compiler. This compiler takes your Svelte code as an input and uses it to generate optimized JavaScript code. Svelte allows us to ship as little code as possible to the client that is not only small in size, but also very efficient. As a result, Svelte is known for being extremely fast and minimal.\n\nSvelte also allows us to achieve true reactivity in our app. Most other JavaScript frameworks rely on an API to tell it when data changed in order to know when to update the virtual DOM. If you are unfamiliar with the virtual DOM, it can be thought of as a copy of the original DOM, which can be easily manipulated and updated without the developer having to use DOM methods (e.g. `document.createElement`).\n\nToday, most popular frameworks utilize the virtual DOM. This means that the reactivity of these frameworks is tied to the virtual DOM. Without the virtual DOM, it would be completely unaware when there are changes to the data. Svelte, however, takes a different approach. Instead of looking at the virtual DOM for changes, Svelte writes code that surgically updates the DOM when your app's state changes, allowing us to achieve true reactivity.\n\nSvelte itself is just the UI layer. It allows us to build the user interface by taking our Svelte code and compiling it into JavaScript. However, it doesn't handle routing and server-side rendering. This is where SvelteKit comes in. It provides us with a built-in router, server-side rendering, code splitting, layouts, as well as many other features that provide increased performance and a better developer experience.\n\nIn the next module, we will create a new SvelteKit project and go through each file to understand the structure of a SvelteKit project.\n\nContinue learning SvelteKit on Vercel:\n\n[](https://vercel.com/docs/beginner-sveltekit/getting-started)\n\n#### [Getting Started](https://vercel.com/docs/beginner-sveltekit/getting-started)\n\n[In this video you will learn how to create a new SvelteKit project. We will explore the SvelteKit demo app to get familiar with the codebase.](https://vercel.com/docs/beginner-sveltekit/getting-started)",
  "title": "Course Intro",
  "description": "Welcome to the beginning of your SvelteKit journey! In this video you I will give you an overview of the course as well as explain why SvelteKit is something worth learning.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/functions/runtimes/python",
  "markdown": "# Using the Python Runtime with Serverless Functions\n\nThe Python runtime enables you to write Python code, including using [Django](https://vercel.com/new/git/external?repository-url=https://github.com/vercel/examples/tree/main/python/django) and [Flask](https://vercel.com/new/git/external?repository-url=https://github.com/vercel/examples/tree/main/python/flask), with Vercel Serverless Functions. You can use a specific [Python version](#python-version) as well as use a `requirements.txt` file to [install dependencies](#python-dependencies).\n\nYou can create your first function, available at the `/api` route, as follows:\n\n```\nfrom http.server import BaseHTTPRequestHandler\n \nclass handler(BaseHTTPRequestHandler):\n \n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/plain')\n        self.end_headers()\n        self.wfile.write('Hello, world!'.encode('utf-8'))\n        return\n```\n\nA hello world Python API using Vercel Serverless Functions.\n\nBy default, new projects will use the latest Python version available on Vercel.\n\nCurrent available versions are:\n\n*   3.12 (default)\n*   3.9 (requires [legacy build image](https://vercel.com/docs/deployments/build-image/build-image-legacy))\n\nYou can specify which of the available Python versions to use by defining `python_version` in `Pipfile`:\n\n```\n[[source]]\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n \n[packages]\nflask = \"*\"\n \n[requires]\npython_version = \"3.12\"\n```\n\nAn example `Pipfile` generated with `pipenv install flask`.\n\nThe `python_version` must exactly match one of the options above or it will be ignored. When upgrading to `3.12`, ensure you set Node.js `20.x` in your [project settings](https://vercel.com/docs/functions/runtimes/node-js#setting-the-node.js-version-in-project-settings).\n\nYou can install dependencies for your Python projects by defining them in `requirements.txt` or a `Pipfile` with corresponding `Pipfile.lock`.\n\nAn example `requirements.txt` file that defines `Flask` as a dependency.\n\nFor basic usage of the Python runtime, no configuration is required. Advanced usage of the Python runtime, such as with Flask and Django, requires some configuration.\n\nThe entry point of this runtime is a glob matching `.py` source files with one of the following variables defined:\n\n*   `handler` that inherits from the `BaseHTTPRequestHandler` class\n*   `app` that exposes a WSGI or ASGI Application\n\nPython uses the current working directory when a relative file is passed to [open()](https://docs.python.org/3/library/functions.html#open).\n\nThe current working directory is the base of your project, not the `api/` directory.\n\nFor example, the following directory structure:\n\n```\n├── README.md\n├── api\n|  ├── user.py\n├── data\n|  └── file.txt\n└── requirements.txt\n```\n\nWith the above directory structure, your function in `api/user.py` can read the contents of `data/file.txt` in a couple different ways.\n\nYou can use the path relative to the project's base directory.\n\n```\n \nfrom http.server import BaseHTTPRequestHandler\nfrom os.path import join\n \nclass handler(BaseHTTPRequestHandler):\n \n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/plain')\n        self.end_headers()\n        with open(join('data', 'file.txt'), 'r') as file:\n          for line in file:\n            self.wfile.write(line.encode())\n        return\n```\n\nOr you can use the path relative to the current file's directory.\n\n```\n \nfrom http.server import BaseHTTPRequestHandler\nfrom os.path import dirname, abspath, join\ndir = dirname(abspath(__file__))\n \nclass handler(BaseHTTPRequestHandler):\n \n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/plain')\n        self.end_headers()\n        with open(join(dir, '..', 'data', 'file.txt'), 'r') as file:\n          for line in file:\n            self.wfile.write(line.encode())\n        return\n```\n\nThe Web Server Gateway Interface (WSGI) is a calling convention for web servers to forward requests to web applications written in Python. You can use WSGI with frameworks such as Flask or Django.\n\nThe Asynchronous Server Gateway Interface (ASGI) is a calling convention for web servers to forward requests to asynchronous web applications written in Python. You can use ASGI with frameworks such as [Sanic](https://sanic.readthedocs.io/).\n\nInstead of defining a `handler`, define an `app` variable in your Python file.\n\nFor example, define a `api/index.py` file as follows:\n\n```\nfrom sanic import Sanic\nfrom sanic.response import json\napp = Sanic()\n \n \n@app.route('/')\n@app.route('/<path:path>')\nasync def index(request, path=\"\"):\n    return json({'hello': path})\n```\n\nAn example `api/index.py` file, using Sanic for a ASGI application.\n\nInside `requirements.txt` define:\n\nAn example `requirements.txt` file, listing `sanic` as a dependency.",
  "title": "Using the Python Runtime with Serverless Functions",
  "description": "Learn how to use the Python runtime to compile Python Serverless Functions on Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/functions/runtimes/ruby",
  "markdown": "# Using the Ruby Runtime with Serverless Functions\n\nThe Ruby runtime is used by Vercel to compile Ruby Serverless Functions that define a singular HTTP handler from `.rb` files within an `/api` directory at your project's root.\n\nRuby files must have one of the following variables defined:\n\n*   `Handler` proc that matches the `do |request, response|` signature.\n*   `Handler` class that inherits from the `WEBrick::HTTPServlet::AbstractServlet` class.\n\nFor example, define a `index.rb` file inside a `/api` directory as follows:\n\n```\nrequire 'cowsay'\n \nHandler = Proc.new do |request, response|\n  name = request.query['name'] || 'World'\n \n  response.status = 200\n  response['Content-Type'] = 'text/text; charset=utf-8'\n  response.body = Cowsay.say(\"Hello #{name}\", 'cow')\nend\n```\n\nAn example `index.rb` file inside an `/api` directory.\n\nInside a `Gemfile` define:\n\n```\nsource \"https://rubygems.org\"\n \ngem \"cowsay\", \"~> 0.3.0\"\n```\n\nAn example `Gemfile` file that defines `cowsay` as a dependency.\n\nNew deployments use Ruby 3.3.x as the default version.\n\nYou can specify the version of Ruby by defining `ruby` in a `Gemfile`, like so:\n\n```\nsource \"https://rubygems.org\"\nruby \"~> 3.3.x\"\n```\n\nWhen defining a Ruby version, the following Ruby versions can be selected:\n\n*   3.3.x (default)\n*   3.2.x (default for [legacy build image](https://vercel.com/docs/deployments/build-image/build-image-legacy))\n\nThe following Ruby versions were previously available, but now have been disabled:\n\n*   2.7.x (disabled since December 7th 2023)\n*   2.5.x (disabled since November 30th 2021)\n\nIf the patch part of the version is defined, like `3.3.1` it will be ignored and assume the latest `3.3.x`.\n\nThis runtime supports installing dependencies defined in the `Gemfile`. Alternatively, dependencies can be vendored with the `bundler install --deployment` command (useful for gems that require native extensions). In this case, dependencies are not built on deployment.",
  "title": "Using the Ruby Runtime with Serverless Functions",
  "description": "Learn how to use the Ruby runtime to compile Ruby Serverless Functions on Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/functions/configuring-functions/memory",
  "markdown": "# Configuring Memory and CPU for Vercel Functions\n\nYou can only configure memory and CPU for Serverless Functions, Edge Functions have a [fixed memory limit](https://vercel.com/docs/functions/runtimes#size-limits).\n\nThe memory configuration of a function determines how much memory and CPU a function can use while executing. By default, on Pro and Enterprise, functions execute with 1769 MB (1 vCPU) of memory. On Hobby, they will always execute with 1024 MB (0.6 vCPU). You can change the [default memory size for all functions](#setting-your-default-function-memory-/-cpu-size) in a project or set a [custom memory size for individual functions](#setting-custom-function-memory-size).\n\nYou should consider the following points when changing the memory size of your functions:\n\n*   Performance: Increasing memory size can improve the performance of your functions, allowing them to run faster\n*   Cost: Serverless Functions are billed based on the function duration, which is affected by the memory size. While increasing the function CPU can increase costs if the function duration stays the same, the increase in CPU can also make functions execute faster. If your function executes faster, it is possible for it to incur less overall function duration usage. This is especially important if your function runs CPU-intensive tasks. See [Pricing](#pricing) for more information on how function duration is calculated\n\nUsers on Pro and Enterprise plans can configure the default memory from 1769 MB (1 vCPU). Any [custom memory size](https://vercel.com/docs/functions/configuring-functions/memory#setting-custom-function-memory-size) set on a per-function basis in the `vercel.json` file will take precedence over the default memory size set in the dashboard.\n\nTo change the default function memory size in the dashboard:\n\n1.  Choose the appropriate project from your [dashboard](https://vercel.com/dashboard) on Vercel\n2.  Navigate to the Settings tab\n3.  From the left side, select Functions\n4.  In the Function CPU section, select your preferred memory size option:\n    \n    ![The Function CPU setting in a Vercel project's dashboard](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1709900663%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Ffunction-memory-selection-light-4.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The Function CPU setting in a Vercel project's dashboard](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1709900663%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Ffunction-memory-selection-dark-4.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    The Function CPU setting in a Vercel project's dashboard\n    \n5.  The change will be applied to all future deployments made by your team. You must create a new deployment for your changes to take effect\n\nThe memory size you select will also determine the CPU allocated to your Serverless Functions. The following table shows the memory and CPU allocation for each type:\n\n| Type | Memory / CPU | Use |\n| --- | --- | --- |\n| Basic | 1024 MB / 0.6 vCPU | Cost-effective option for lightweight apps and APIs. Default for Hobby. |\n| StandardDefault | 1769 MB / 1 vCPU | Predictable performance for production workloads. |\n| Performance | 3009 MB / 1.7 vCPUs | Increased performance for latency-sensitive applications and SSR workloads. |\n\nUsers on the Hobby plan can only use the default memory size of 1024 MB (0.6 vCPU). Hobby users cannot configure this size.\n\nProject created before 2019-11-08T00:00:00.000Z have the default function memory size set to 1024 MB/0.6 vCPU for Hobby plan, and 3008 MB/1.67 vCPU for Pro and Enterprise plan. Although the dashboard may not have any memory size option selected by default for those projects, you can start using the new memory size options by selecting your preferred memory size in the dashboard.\n\nTo configure the memory size for individual functions up to the [allowed limits for your plan](https://vercel.com/docs/functions/runtimes#memory-size-limits):\n\n1.  Use the `functions` [property](https://vercel.com/docs/projects/project-configuration#functions) within your `vercel.json` config file\n2.  Use a [glob pattern](https://github.com/isaacs/node-glob#glob-primer) to [specify the path](https://vercel.com/docs/projects/project-configuration#glob-pattern)\n3.  Specify an integer defining the `memory` size in MB for your Serverless Function (between 128 and 3009)\n\nThe order in which you specify file patterns is important. For more information, see [Glob pattern](https://vercel.com/docs/projects/project-configuration#glob-pattern-order).\n\n```\n{\n  \"functions\": {\n    \"api/test.js\": {\n      \"memory\": 3009\n    },\n    \"api/*.js\": {\n      \"memory\": 3009,\n      \"maxDuration\": 30\n    }\n  }\n}\n```\n\nTo check the memory size of your functions in the [dashboard](https://vercel.com/dashboard), follow these steps:\n\n1.  Find the project you want to review and select the Deployments tab\n2.  Go to the deployment you want to review\n3.  From the deployment overview, click on the Functions tab\n4.  Select the function from the dropdown menu, and the memory size of the function will be displayed in the Memory Size section\n\nTo learn more about the maximum size of your function's memory, see [Max memory size](https://vercel.com/docs/functions/runtimes#memory-size-limits).\n\nWhile memory / CPU size is not an explicitly billed metric, it is fundamental in how the billed metric of [Function Duration](https://vercel.com/docs/pricing/serverless-functions#managing-function-duration) is calculated.\n\nYou are charged based on the amount of time your Serverless Functions have spent computing responses to the requests they’ve received. This is calculated in [GB-Hours](https://vercel.com/guides/what-are-gb-hrs-for-serverless-function-execution), which is the memory allocated for each Function in GB x the time in hours they were running.\n\nFor example, if a function [has](https://vercel.com/docs/functions/configuring-functions/memory) 1.7 GB (1769 MB) of memory and is executed 1 million times at a 1-second duration:\n\n*   Total Seconds: 1M \\* (1s) = 1,000,000 Seconds\n*   Total GB-Seconds: 1769/1024 GB \\* 1,000,000 Seconds = 1,727,539.06 GB-Seconds\n*   Total GB-Hrs: 1,727,539.06 GB-Seconds / 3600 = 479.87 GB-Hrs\n*   The total Serverless Function Execution is 479.87 GB-Hrs.\n\nTo see your current usage, navigate to the Usage tab on your team's [Dashboard](https://vercel.com/dashboard) and go to Serverless Functions > Duration. You can use the Ratio option to see the total amount of execution time across all projects within your team, including the completions, errors, and timeouts.\n\nYou can also view [Invocations](https://vercel.com/docs/pricing/serverless-functions#managing-function-invocations) to see the number of times your Functions have been invoked. To learn more about the cost of Serverless Functions, see [Serverless Function Pricing](https://vercel.com/docs/pricing/serverless-functions).",
  "title": "Configuring Memory and CPU for Vercel Functions",
  "description": "Learn how to set the memory / CPU of a Vercel Function.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/functions/configuring-functions/runtime",
  "markdown": "# Configuring the Runtime for Vercel Functions\n\nThe runtime of your function determines the environment in which your function will execute. Vercel supports various runtimes including [Node.js](#node.js), [Edge](#edge), [Python](#python), [Ruby](#ruby), and [Go](#go). You can also configure [other runtimes](https://vercel.com/docs/functions/runtimes#community-runtimes) using the `vercel.json` file. Here's how to set up each:\n\nBy default, a function with no additional configuration will be deployed as a Serverless Function on the Node.js runtime. To explicitly set it, add the following highlighted code to your function:\n\n```\nexport const runtime = 'nodejs';\n \nexport function GET(request: Request) {\n  return new Response(`I am a Serverless Function`, {\n    status: 200,\n  });\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nTo use the Edge runtime, add the following code to your function:\n\n```\nexport const runtime = 'edge'; // 'nodejs' is the default\n \nexport function GET(request: Request) {\n  return new Response(`I am an Edge Function!`, {\n    status: 200,\n  });\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nFor Go, expose a single HTTP handler from a `.go` file within an `/api` directory at your project's root. For example:\n\n```\npackage handler\n \nimport (\n  \"fmt\"\n  \"net/http\"\n)\n \nfunc Handler(w http.ResponseWriter, r *http.Request) {\n  fmt.Fprintf(w, \"<h1>Hello from Go!</h1>\")\n}\n```\n\nFor Python, create a function by adding the following code to `api/index.py`:\n\n```\nfrom http.server import BaseHTTPRequestHandler\n \nclass handler(BaseHTTPRequestHandler):\n \n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/plain')\n        self.end_headers()\n        self.wfile.write('Hello, world!'.encode('utf-8'))\n        return\n```\n\nFor Ruby, define an HTTP handler from `.rb` files within an `/api` directory at your project's root. Ruby files must have one of the following variables defined:\n\n*   `Handler` proc that matches the `do |request, response|` signature\n*   `Handler` class that inherits from the `WEBrick::HTTPServlet::AbstractServlet` class\n\nFor example:\n\n```\nrequire 'cowsay'\n \nHandler = Proc.new do |request, response|\n  name = request.query['name'] || 'World'\n \n  response.status = 200\n  response['Content-Type'] = 'text/text; charset=utf-8'\n  response.body = Cowsay.say(\"Hello #{name}\", 'cow')\nend\n```\n\nDon't forget to define your dependencies inside a `Gemfile`:\n\n```\nsource \"https://rubygems.org\"\n \ngem \"cowsay\", \"~> 0.3.0\"\n```\n\nYou can configure other runtimes by using the `functions` property in your `vercel.json` file. For example:\n\n```\n{\n  \"functions\": {\n    \"api/test.php\": {\n      \"runtime\": \"vercel-php@0.5.2\"\n    }\n  }\n}\n```\n\nIn this case, the function at `api/hello.ts` would use the custom runtime specified.\n\nFor more information, see [Community runtimes](https://vercel.com/docs/functions/runtimes#community-runtimes)",
  "title": "Configuring the Runtime for Vercel Functions",
  "description": "Learn how to configure the runtime for Vercel Functions.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/functions/edge-functions/vercel-edge-package",
  "markdown": null,
  "title": "",
  "description": null,
  "languageCode": null
},
{
  "url": "https://vercel.com/docs/deployments/git/vercel-for-azure-pipelines",
  "markdown": "# Deploying Azure DevOps Pipelines with Vercel\n\nThe [Vercel Deployment Extension](https://marketplace.visualstudio.com/items?itemName=Vercel.vercel-deployment-extension) allows you to automatically deploy to Vercel from [Azure DevOps](https://azure.microsoft.com/en-us/products/devops) [Pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops). You can add the extension to your Azure DevOps Projects through the [Visual Studio marketplace](https://marketplace.visualstudio.com/).\n\nOnce the Vercel extension is set up, your Azure DevOps project is connected to your [Vercel Project](https://vercel.com/docs/projects/overview). You can then use your Azure Pipeline(s) inside your Azure DevOps project to trigger a [Vercel Deployment](https://vercel.com/docs/deployments/overview).\n\nThis page will help you use the extension in your own use case. You can:\n\n*   Follow the [quickstart](#quickstart) to set up the extension and trigger a production deployment based on commits to the `main` branch\n*   Use the [full-featured pipeline](#full-featured-azure-pipeline-creation) for a similar setup as [Vercel's other git integrations](https://vercel.com/docs/deployments/git). This includes preview deployment creation on pull requests and production deployments on merging to the `main` branch\n*   Review the [extension task reference](#extension-task-reference) to customize the pipeline for your specific use case\n\nAt the end of this quickstart, your Azure DevOps Pipeline will trigger a Vercel production deployment whenever you commit a change to the `main` branch of your code. To get this done, we will follow these steps:\n\n1.  Create a Vercel Personal Access Token\n2.  Create secret variables\n3.  Set up the Vercel Deployment Extension from the Visual Studio marketplace\n4.  Set up a basic Azure Pipeline to trigger production deployments on Vercel\n5.  Test your workflow\n\nOnce you have the Vercel Deployment extension set up, you only need to modify your Azure DevOps Pipeline (Steps 4 and 5) to change the deployment workflow to fit your use case.\n\nAn **empty** Vercel Project with no Git integration\n\nTo create an empty Vercel project:\n\n1.  Use the [Vercel CLI](https://vercel.com/docs/cli/project) with the `add` command\n\n2.  Or through the [dashboard](https://vercel.com/docs/projects/overview#creating-a-project) and then disconnect the [Git integration](https://vercel.com/docs/projects/overview#git) that you would have set up\n\n1.  *   Follow [Creating an Access Token](https://vercel.com/docs/rest-api#creating-an-access-token) to create an access token with the scope of access set to the team where your Vercel Project is located\n    *   Copy this token to a secure location\n2.  For security purposes, you should use the above created token in your Azure Pipeline through [secret variables](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-secret-variables).\n    \n    *   For this quickstart, we will create the secret variables when we create the pipeline. Once created, these variables will always be accessible to that pipeline\n    *   Otherwise, you can create them before you create the pipeline in a [variable group](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-secret-variables?view=azure-devops&tabs=yaml%2Cbash#set-a-secret-variable-in-a-variable-group) or a [key vault](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-secret-variables?view=azure-devops&tabs=yaml%2Cbash#link-secrets-from-an-azure-key-vault) as long as you make sure that your Azure Project has the right access\n3.  *   Go to the [Vercel Deployment Extension Visual Studio marketplace page](https://marketplace.visualstudio.com/items?itemName=Vercel.vercel-deployment-extension)\n    *   Click Get it free and select the Azure DevOps organization where your Azure Project is located\n4.  This step assumes that your code exists as a repository in your Azure Project's Repos and that your Vercel Project is named `azure-devops-extension`.\n    \n    ![Azure DevOps Pipeline creation at the review stage to create variables and save/edit your pipeline](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2FAzure-pipeline-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Azure DevOps Pipeline creation at the review stage to create variables and save/edit your pipeline](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2FAzure-pipeline-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Azure DevOps Pipeline creation at the review stage to create variables and save/edit your pipeline\n    \n    *   From your Azure DevOps Project, select Pipelines from the left side bar\n    *   Select the New Pipeline button\n    *   Select where your code is located (In this example, we uploaded the code as an Azure Repos Git. Select Azure Repos Git and then select your uploaded repository)\n    *   Select Node.js for the pipeline configuration\n    *   In the Review your pipeline YAML step, select Variables on the top right\n        *   Select New Variable, use `VERCEL_TOKEN` as the name and the value of the Vercel Personal Access Token you created earlier. Check the secret option. Select Ok\n    *   Close the Variables window and paste the following code to replace the code in `azure-pipelines.yml` that you can rename to `vercel-pipeline.yml`\n    \n    ```\n    trigger:\n    - main\n     \n    pool:\n      vmImage: ubuntu-latest\n     \n    steps:\n    - task: vercel-deployment-task@1\n      inputs:\n        vercelProjectId: 'prj_mtYj0MP83muZkYDs2DIDfasdas' //Example Vercel Project ID\n        vercelOrgId: '3Gcd2ASTsPxwxTsYBwJTB11p' //Example Vercel Personal Account ID\n        vercelToken: $(VERCEL_TOKEN)\n        production: true\n    ```\n    \n    Look for Project ID located on the Vercel Project's Settings page at Project Settings > General.\n    \n    *   If your Project is located under your Hobby account, look for Your ID under your Vercel Personal Account [Settings](https://vercel.com/account)\n    *   If your Project is located under a Team, look for Team ID under Team Settings > General\n    *   Select Save and Run\n    *   This should trigger a production deployment in your Vercel Project as no code was committed before\n5.  *   Make a change in your code inside Azure Repos from the `main` branch and commit the change\n    *   This should trigger another deployment in your Vercel Project\n\nYour Azure DevOps project is now connected to your Vercel project with automatic production deployments on the `main` branch. You can update or create pipelines in the Azure DevOps project to customize the Vercel deployment behavior by using the [options](#extension-task-reference) of the Vercel Deployment Extension.\n\nIn a production environment, you will often want the following to happen:\n\n*   Trigger preview deployments for pull requests to the `main` branch\n*   Trigger production deployments only for commits to the `main` branch\n\nBefore you update your pipeline file to enable preview deployments, you need to configure Azure DevOps with pull requests.\n\nIn order to allow pull requests in your Azure repository to create a deployment and report back with a comment, you need the following:\n\n*   An Azure DevOps Personal Access Token\n*   A build validation policy for your branch\n\n1.  Go to your [Azure DevOps account](https://dev.azure.com/) and select the user settings icon on the top right\n2.  Select Personal access tokens from the menu option\n3.  Select the New Token button\n4.  After completing the basic token information such as Name, Organization, and Expiration, select the Custom defined option under Scopes\n5.  At the bottom of the form, select Show all scopes\n6.  Browse down the scopes list until Pull Request Threads. Select the Read & Write checkbox\n7.  Select Create at the bottom of the form\n8.  Make sure you copy the token to a secure location before you close the prompt\n\n![Azure Build Validation under Branch Policies of Project settings](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2FAzure-build-policy-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Azure Build Validation under Branch Policies of Project settings](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2FAzure-build-policy-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAzure Build Validation under Branch Policies of Project settings\n\n1.  Go to your Azure DevOps Project's page\n2.  Select Project settings in the lower left corner\n3.  From the Project settings left side bar, select Repositories under Repos\n4.  Select the repository where your vercel pipeline is set up\n5.  Select the Policies tab on the right side\n6.  Scroll down to Branch Policies, and select the `main` branch\n7.  Scroll down to Build Validation and select on the + button to create a new validation policy\n8.  Select the pipeline you created earlier and keep the policy marked as Required so that commits directly to main are prevented\n9.  Select Save\n\nCreate a pull request to the `main` branch. This will trigger the pipeline, run the deployment and comment back on the pull request with the deployment URL.\n\n*   From your Azure DevOps Project, select Pipelines from the left side bar\n*   Select the pipeline that you want to edit by selecting the icon\n*   Select the Variables button and add a new secret variable called `AZURE_TOKEN` with the value of the Azure DevOps Personal Access Token you created earlier. Select Ok\n*   Close the Variables window and paste the following code to replace the code in `vercel-pipelines.yml`\n\n```\ntrigger:\n- main\n \npool:\n  vmImage: ubuntu-latest\n \nvariables:\n  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]\n \nsteps:\n- task: vercel-deployment-task@1\n  name: 'Deploy'\n  inputs:\n    condition: or(eq(variables.isMain, true), eq(variables['Build.Reason'], 'PullRequest'))\n    vercelProjectId: 'azure-devops-extension'\n    vercelOrgId: '3Gcd2ASTsPxwxTsYBwJTB11p' //Example Vercel Personal Account ID\n    vercelToken: $(VERCEL_TOKEN)\n    production: $(isMain)\n- task: vercel-azdo-pr-comment-task@1\n  inputs:\n    azureToken: $(AZURE_TOKEN)\n    deploymentTaskMessage: $(Deploy.deploymentTaskMessage)\n```\n\n*   Select Save\n\nThe `vercel-deployment-task` creates an [output variable](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables) called `deploymentTaskMessage`. By setting the `name:` of the step to `'Deploy'`, you can access it using `$(Deploy.deploymentTaskMessage)` which you can then assign to the input option `deploymentTaskMessage` of the `vercel-azdo-pr-comment-task` task step.\n\n*   Create a new branch in your Azure DevOps repository and push a commit\n*   Open a pull request against the `main` branch\n*   This will trigger a pipeline execution and create a preview deployment on Vercel\n*   Once the deployment has completed, you will see a comment on the pull request in Azure DevOps with the preview URL\n\nHere, you can find a list of available properties for each of the available tasks in the Vercel Deployment Extension.\n\n| Property | Required | Type | Description |\n| --- | --- | --- | --- |\n| `vercelProjectId` | No  | string | The [ID of your Vercel Project](#value-of-vercelprojectid). It can alternatively be set as the environment variable VERCEL\\_PROJECT\\_ID |\n| `vercelOrgId` | No  | string | The [ID of your Vercel Org](#value-of-vercelorgid). It can alternatively be set as the environment variable VERCEL\\_ORG\\_ID |\n| `vercelToken` | No  | string | A [Vercel personal access](https://vercel.com/docs/rest-api#creating-an-access-token) token with deploy permissions for your Vercel Project. It can alternatively be set as the environment variable VERCEL\\_TOKEN |\n| `vercelCWD` | No  | string | The working directory where the Vercel deployment task will run. When omitted, the task will run in the current directory (default value is `System.DefaultWorkingDirectory`). It can alternatively be set as the environment variable VERCEL\\_CWD |\n| `production` | No  | boolean | Boolean value specifying if the task should create a production deployment. When omitted or set to `false`, the task will create preview deployments |\n| `debug` | No  | boolean | Boolean value that enables the `--debug` option for the internal Vercel CLI operations |\n\n| Variable | Type | Description |\n| --- | --- | --- |\n| `deploymentTaskMessage` | string | The message output taken from the deployment. It can be used in tasks that follow |\n\n| Property | Required | Type | Description |\n| --- | --- | --- | --- |\n| `azureToken` | Yes | string | An [Azure personal access token](#create-an-azure-devops-personal-access-token) with the Git `PullRequestContribute` permission for your Azure DevOps Organization |\n| `deploymentTaskMessage` | Yes | string | The message that will added as a comment on the pull request. It is normally created by the Vercel Deployment Task |",
  "title": "Deploying Azure DevOps Pipelines with Vercel",
  "description": "​Vercel for Azure DevOps allows you to deploy Azure Pipelines to Vercel automatically.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/build-image/build-image",
  "markdown": "# Build image\n\nThe build image uses [Amazon Linux 2023](https://aws.amazon.com/linux/amazon-linux-2023/) as base image and Vercel will automatically use it for all deployments with the `20.x` Node.js version [project setting](https://vercel.com/docs/functions/runtimes/node-js#setting-the-node.js-version-in-project-settings).\n\nThe following packages are pre-installed in the build image with `dnf`, the default package manager for Amazon Linux 2023.\n\n| **Pre-installed packages** |\n| --- | --- | --- |\n| `alsa-lib` | `at-spi2-atk` | `atk` |\n| `autoconf` | `automake` | `bsdtar` |\n| `bzip2` | `bzip2-devel` | `cups-libs` |\n| `expat-devel` | `gcc` | `gcc-c++` |\n| `git` | `glib2-devel` | `glibc-devel` |\n| `gtk3` | `gzip` | `ImageMagick-devel` |\n| `iproute` | `java-11-amazon-corretto-headless` | `libXScrnSaver` |\n| `libXcomposite` | `libXcursor` | `libXi` |\n| `libXrandr` | `libXtst` | `libffi-devel` |\n| `libglvnd-glx` | `libicu` | `libjpeg` |\n| `libjpeg-devel` | `libpng` | `libpng-devel` |\n| `libstdc++` | `libtool` | `libwebp-tools` |\n| `make` | `nasm` | `ncurses-libs` |\n| `ncurses-compat-libs` | `openssl` | `openssl-devel` |\n| `openssl-libs` | `pango` | `procps` |\n| `readline-devel` | `ruby-devel` | `strace` |\n| `tar` | `unzip` | `which` |\n| `zlib-devel` | `zstd` |\n\nVercel does not provide the build image itself, but you can use the Amazon Linux 2023 base image to test things locally:\n\n```\ndocker run --rm -it amazonlinux:2023.2.20231011.0 sh\n```\n\nWhen you are done, run `exit` to return.\n\nYou can install additional packages into the build container by configuring the [Install Command](https://vercel.com/docs/deployments/configure-a-build#install-command) within the dashboard or the `[\"installCommand\"](https://vercel.com/docs/projects/project-configuration#installcommand)` in your `vercel.json` to use any of the following commands.\n\nThe build image includes access to repositories with stable versions of popular packages. You can list all packages with the following command:\n\nYou can search for a package by name with the following command:\n\n```\ndnf search my-package-here\n```\n\nYou can install a package by name with the following command:\n\n```\ndnf install -y my-package-here\n```",
  "title": "Build image",
  "description": "Learn about the container image used for Vercel builds that use Node.js 20.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/build-image/build-image-legacy",
  "markdown": "# Build image (legacy)\n\nThe build image (legacy) uses [Amazon Linux 2](https://aws.amazon.com/amazon-linux-2/) as base image and Vercel will automatically use it for all deployments with the `16.x` or `18.x` Node.js version [project setting](https://vercel.com/docs/functions/runtimes/node-js#setting-the-node.js-version-in-project-settings).\n\nThe following packages are pre-installed in the build image with `yum`, the default package manager for Amazon Linux 2.\n\n| **Pre-installed packages** |\n| --- | --- | --- |\n| `alsa-lib` | `at-spi2-atk` | `atk` |\n| `autoconf` | `automake` | `bsdtar` |\n| `bzip2` | `bzip2-devel` | `cups-libs` |\n| `expat-devel` | `gcc` | `gcc-c++` |\n| `git` | `glib2-devel` | `glibc-devel` |\n| `gtk3` | `gzip` | `ImageMagick-devel` |\n| `iproute` | `java-11-amazon-corretto-headless` | `libXScrnSaver` |\n| `libXcomposite` | `libXcursor` | `libXi` |\n| `libXrandr` | `libXtst` | `libffi-devel` |\n| `libglvnd-glx` | `libicu` | `libjpeg` |\n| `libjpeg-devel` | `libpng` | `libpng-devel` |\n| `libstdc++` | `libtool` | `libwebp-tools` |\n| `libyaml-devel` | `make` | `nasm` |\n| `ncurses-libs` | `ncurses-compat-libs` | `openssl` |\n| `openssl-devel` | `openssl-libs` | `openssl11` |\n| `openssl11-libs` | `pango` | `procps` |\n| `readline-devel` | `ruby-devel` | `strace` |\n| `tar` | `unzip` | `which` |\n| `zlib-devel` | `zstd` |\n\nVercel does not provide the build image itself, but you can use the Amazon Linux 2 base image to test things locally:\n\n```\ndocker run --rm -it amazonlinux:2.0.20191217.0 sh\n```\n\nWhen you are done, run `exit` to return.\n\nYou can install additional packages into the build container by configuring the [Install Command](https://vercel.com/docs/deployments/configure-a-build#install-command) within the dashboard or the `[\"installCommand\"](https://vercel.com/docs/projects/project-configuration#installcommand)` in your `vercel.json` to use any of the following commands.\n\nTo add `php` to your path, run the following command:\n\n```\namazon-linux-extras install php7.4\n```\n\nTo add `cargo` to your path, run the following command:\n\n```\namazon-linux-extras install rust1\n```\n\nTo add `go` to your path, run the following command:\n\n```\namazon-linux-extras install golang1.11\n```\n\nLearn more about [Amazon Linux Extras](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-ami-basics.html#extras-library).\n\nThe build image includes access to repositories with stable versions of popular packages. You can list all packages with the following command:\n\nYou can search for a package by name with the following command:\n\n```\nyum search my-package-here\n```\n\nYou can install a package by name with the following command:\n\n```\nyum install my-package-here -y\n```\n\nYou can use [Amazon Linux Extras](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-ami-basics.html#extras-library) if you need a new or newer version of an existing software package that is not included in the default repositories.\n\nYou can list extra packages with the following command:\n\nYou can install extra packages with the following command:\n\n```\namazon-linux-extras install my-package-here\n```",
  "title": "Build image (legacy)",
  "description": "Learn about the container image used for Vercel builds that use Node.js 16 or 18.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/monorepos/nx",
  "markdown": "# Deploying Nx to Vercel\n\nNx is an extensible build system with support for monorepos, integrations, and Remote Caching on Vercel.\n\nRead the [Intro to Nx](https://nx.dev/getting-started/intro) docs to learn about the benefits of using Nx to manage your monorepos.\n\n1.  If you haven't already connected your monorepo to Nx, you can follow the [Getting Started](https://nx.dev/recipe/adding-to-monorepo) on the Nx docs to do so.\n    \n    To ensure the best experience using Nx with Vercel, the following versions and settings are recommended:\n    \n    *   Use `nx` version `14.6.2` or later\n    *   Use `nx-cloud` version `14.6.0` or later\n    \n    There are also additional settings if you are [using Remote Caching](https://vercel.com/docs/monorepos/nx#setup-remote-caching-for-nx-on-vercel)\n    \n    All Nx starters and examples are preconfigured with these settings.\n    \n2.  [Create a new Project](https://vercel.com/docs/projects/overview#creating-a-project) on the Vercel dashboard and [import](https://vercel.com/docs/getting-started-with-vercel/import) your monorepo project.\n    \n    Vercel handles all aspects of configuring your monorepo, including setting [build commands](https://vercel.com/docs/deployments/configure-a-build#build-command), the [Root Directory](https://vercel.com/docs/deployments/configure-a-build#root-directory), the correct directory for npm workspaces, and the [ignored build step](https://vercel.com/docs/projects/overview#ignored-build-step).\n    \n3.  Your Nx monorepo is now configured and ready to be used with Vercel!\n    \n    You can now [setup Remote Caching for Nx on Vercel](#setup-remote-caching-for-nx-on-vercel) or configure additional deployment options, such as [environment variables](https://vercel.com/docs/deployments/environments#environment-variables).\n    \n\n`nx-ignore` provides a way for you to tell Vercel if a build should continue or not. For more details and information on how to use `nx-ignore`, see the [documentation](https://github.com/nrwl/nx-labs/tree/main/packages/nx-ignore).\n\nBefore using remote caching with Nx, do one of the following:\n\n*   Ensure the `NX_CACHE_DIRECTORY=/tmp/nx-cache` is set\n\nor\n\n*   Set the `cacheDirectory` option to `/tmp/nx-cache` at `tasksRunnerOptions.{runner}.options` in your `nx.json`. For example:\n\n```\n\"tasksRunnerOptions\": {\n  \"default\": {\n    \"runner\": \"nx/tasks-runners/default\",\n    \"options\": {\n      \"cacheDirectory\": \"/tmp/nx-cache\"\n    }\n  }\n}\n```\n\nTo configure Remote Caching for your Nx project on Vercel, use the [`@vercel/remote-nx`](https://github.com/vercel/remote-cache/tree/main/packages/remote-nx) plugin.\n\n1.  ```\n    npm install --save-dev @vercel/remote-nx\n    ```\n    \n2.  In your `nx.json` file you will find a `tasksRunnerOptions` field. Update this field so that it's using the installed `@vercel/remote-nx`:\n    \n    ```\n    {\n      \"tasksRunnerOptions\": {\n        \"default\": {\n          \"runner\": \"@vercel/remote-nx\",\n          \"options\": {\n            \"cacheableOperations\": [\"build\", \"test\", \"lint\", \"e2e\"],\n            \"token\": \"<token>\",\n            \"teamId\": \"<teamId>\"\n          }\n        }\n      }\n    }\n    ```\n    \n    You can specify your `token` and `teamId` in your nx.json or set them as environment variables.\n    \n    | Parameter | Description | Environment Variable / .env | `nx.json` |\n    | --- | --- | --- | --- |\n    | Vercel Access Token | Vercel access token with access to the provided team | `NX_VERCEL_REMOTE_CACHE_TOKEN` | `token` |\n    | Vercel [Team ID](https://vercel.com/docs/accounts/create-a-team#find-your-team-id) (optional) | The Vercel Team ID that should share the Remote Cache | `NX_VERCEL_REMOTE_CACHE_TEAM` | `teamId` |\n    \n    When deploying on Vercel, these variables will be automatically set for you.\n    \n3.  Clear your local cache and rebuild your project.\n    \n    ```\n    npx nx reset\n    npx nx build\n    ```",
  "title": "Deploying Nx to Vercel",
  "description": "Nx is an extensible build system with support for monorepos, integrations, and Remote Caching on Vercel. Learn how to deploy Nx to Vercel with this guide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/functions/og-image-generation/og-image-api",
  "markdown": "# @vercel/og Reference\n\n`@vercel/og` only supports the [Edge runtime](https://vercel.com/docs/functions/edge-functions/edge-functions-api). The default Node.js runtime will not work.\n\nThe package exposes an `ImageResponse` constructor, with the following parameters:\n\n```\nimport { ImageResponse } from '@vercel/og'\n \nnew ImageResponse(\n  element: ReactElement,\n  options: {\n    width?: number = 1200\n    height?: number = 630\n    emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji',\n    fonts?: {\n      name: string,\n      data: ArrayBuffer,\n      weight: number,\n      style: 'normal' | 'italic'\n    }[]\n    debug?: boolean = false\n \n    // Options that will be passed to the HTTP response\n    status?: number = 200\n    statusText?: string\n    headers?: Record<string, string>\n  },\n)\n```\n\n| Parameter | Type | Default | Description |\n| --- | --- | --- | --- |\n| `element` | `ReactElement` | —   | The React element to generate the image from. |\n| `options` | `object` | —   | Options to customize the image and HTTP response. |\n\n| Parameter | Type | Default | Description |\n| --- | --- | --- | --- |\n| `width` | `number` | `1200` | The width of the image. |\n| `height` | `number` | `630` | The height of the image. |\n| `emoji` | `twemoji` `blobmoji` `noto` `openmoji` `twemoji` | The emoji set to use. |     |\n| `debug` | `boolean` | `false` | Debug mode flag. |\n| `status` | `number` | `200` | The HTTP status code for the response. |\n| `statusText` | `string` | —   | The HTTP status text for the response. |\n| `headers` | `Record<string, string>` | —   | The HTTP headers for the response. |\n\n| Parameter | Type | Default | Description |\n| --- | --- | --- | --- |\n| `name` | `string` | —   | The name of the font. |\n| `data` | `ArrayBuffer` | —   | The font data. |\n| `weight` | `number` | —   | The weight of the font. |\n| `style` | `normal` `italic` | —   | The style of the font. |\n\nBy default, the following headers will be included by `@vercel/og`:\n\n```\n \n'content-type': 'image/png',\n'cache-control': 'public, immutable, no-transform, max-age=31536000',\n \n```\n\nSee the [code examples](https://vercel.com/docs/functions/edge-functions/og-image-generation/og-image-examples) for implementation details.\n\nRefer to [Satori's documentation](https://github.com/vercel/satori#documentation) for a list of supported HTML and CSS features.\n\nBy default, `@vercel/og` only has the Noto Sans font included. If you need to use other fonts, you can pass them in the `fonts` option. View the [custom font example](https://vercel.com/docs/functions/edge-functions/og-image-generation/og-image-examples#using-a-custom-font) for more details.",
  "title": "@vercel/og Reference",
  "description": "This reference provides information on how the @vercel/og package works on Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/using-an-external-dynamic-image",
  "markdown": "# Using an external image as OG image\n\nYou can use the following code sample to explore using parameters and different content types with [`next/og`](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx). To learn more about OG Image Generation, see [Open Graph Image Generation](https://vercel.com/docs/functions/og-image-generation).\n\nCreate an api route with `route.tsx` in `/app/api/og/` and paste the following code:\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const username = searchParams.get('username');\n  if (!username) {\n    return new ImageResponse(<>Visit with &quot;?username=vercel&quot;</>, {\n      width: 1200,\n      height: 630,\n    });\n  }\n \n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          fontSize: 60,\n          color: 'black',\n          background: '#f6f6f6',\n          width: '100%',\n          height: '100%',\n          paddingTop: 50,\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <img\n          width=\"256\"\n          height=\"256\"\n          src={`https://github.com/${username}.png`}\n          style={{\n            borderRadius: 128,\n          }}\n        />\n        <p>github.com/{username}</p>\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 630,\n    },\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nPreview the OG route locally by running the following command:\n\nThen, browse to `http://localhost:3000/api/og`. You will see the following image:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-dynamic-img.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage generated using a github profile dynamic image for username=vercel",
  "title": "Using an external image as OG image",
  "description": "Learn how to pass the username as a URL parameter to pull an external profile image for the image generation.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/dynamic-text-as-image",
  "markdown": "# Using dynamic text as your OG Image\n\nYou can use the following code sample to explore using parameters and different content types with [`next/og`](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx). To learn more about OG Image Generation, see [Open Graph Image Generation](https://vercel.com/docs/functions/og-image-generation).\n\nCreate an api route with `route.tsx` in `/app/api/og/` and paste the following code:\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n \n    // ?title=<title>\n    const hasTitle = searchParams.has('title');\n    const title = hasTitle\n      ? searchParams.get('title')?.slice(0, 100)\n      : 'My default title';\n \n    return new ImageResponse(\n      (\n        <div\n          style={{\n            backgroundColor: 'black',\n            backgroundSize: '150px 150px',\n            height: '100%',\n            width: '100%',\n            display: 'flex',\n            textAlign: 'center',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexDirection: 'column',\n            flexWrap: 'nowrap',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              justifyItems: 'center',\n            }}\n          >\n            <img\n              alt=\"Vercel\"\n              height={200}\n              src=\"data:image/svg+xml,%3Csvg width='116' height='100' fill='white' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M57.5 0L115 100H0L57.5 0z' /%3E%3C/svg%3E\"\n              style={{ margin: '0 30px' }}\n              width={232}\n            />\n          </div>\n          <div\n            style={{\n              fontSize: 60,\n              fontStyle: 'normal',\n              letterSpacing: '-0.025em',\n              color: 'white',\n              marginTop: 30,\n              padding: '0 120px',\n              lineHeight: 1.4,\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {title}\n          </div>\n        </div>\n      ),\n      {\n        width: 1200,\n        height: 630,\n      },\n    );\n  } catch (e: any) {\n    console.log(`${e.message}`);\n    return new Response(`Failed to generate the image`, {\n      status: 500,\n    });\n  }\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nPreview the OG route locally by running the following command:\n\nThen, browse to `http://localhost:3000/api/og`. You will see the following image:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-param.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage generated using title=my post title",
  "title": "Using dynamic text as your OG Image",
  "description": "Learn how to pass the image title as a URL parameter.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/using-custom-font",
  "markdown": "# Using a custom font in your OG Image\n\nYou can use the following code sample to explore using parameters and different content types with [`next/og`](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx). To learn more about OG Image Generation, see [Open Graph Image Generation](https://vercel.com/docs/functions/og-image-generation).\n\n*   Place your custom font `TYPEWR__.ttf` (Available [here](https://www.1001freefonts.com/typewriter.font)) under the `/assets` folder from the project root\n\nCreate an api route with `route.tsx` in `/app/api/og/` and paste the following code:\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nexport async function GET() {\n  // Make sure the font exists in the specified path:\n  const fontData = await fetch(\n    new URL('../../../../assets/TYPEWR__.ttf', import.meta.url),\n  ).then((res) => res.arrayBuffer());\n \n  return new ImageResponse(\n    (\n      <div\n        style={{\n          backgroundColor: 'white',\n          height: '100%',\n          width: '100%',\n          fontSize: 100,\n          fontFamily: '\"Typewriter\"',\n          paddingTop: '100px',\n          paddingLeft: '50px',\n        }}\n      >\n        Hello world!\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 630,\n      fonts: [\n        {\n          name: 'Typewriter',\n          data: fontData,\n          style: 'normal',\n        },\n      ],\n    },\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nPreview the OG route locally by running the following command:\n\nThen, browse to `http://localhost:3000/api/og`. You will see the following image:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-font.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage generated using the custom font typewriter",
  "title": "Using a custom font in your OG Image",
  "description": "Learn how to use a custom font from the tile system in your OG images.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/using-emoji-in-image",
  "markdown": "# Using emoji in your OG image\n\nYou can use the following code sample to explore using parameters and different content types with [`next/og`](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx). To learn more about OG Image Generation, see [Open Graph Image Generation](https://vercel.com/docs/functions/og-image-generation).\n\nCreate an api route with `route.tsx` in `/app/api/og/` and paste the following code:\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nexport async function GET() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 100,\n          color: 'black',\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          padding: '50px 200px',\n          textAlign: 'center',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        👋, 🌎\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 630,\n      // Supported options: 'twemoji', 'blobmoji', 'noto', 'openmoji', 'fluent' and 'fluentFlat'\n      // Default to 'twemoji'\n      emoji: 'twemoji',\n    },\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nPreview the OG route locally by running the following command:\n\nThen, browse to `http://localhost:3000/api/og`. You will see the following image:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-emoji.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage generated using emojis 👋, 🌎",
  "title": "Using emoji in your OG image",
  "description": "Learn how to use emojis to generate an OG image.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/using-different-languages",
  "markdown": "# Using languages in your OG image\n\nYou can use the following code sample to explore using parameters and different content types with [`next/og`](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx). To learn more about OG Image Generation, see [Open Graph Image Generation](https://vercel.com/docs/functions/og-image-generation).\n\nIn this example, your post image uses different languages.\n\nCreate an api route with `route.tsx` in `/app/api/og/` and paste the following code:\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nexport async function GET() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 40,\n          color: 'black',\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          padding: '50px 200px',\n          textAlign: 'center',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        👋 Hello 你好 नमस्ते こんにちは สวัสดีค่ะ 안녕 добрий день Hallá\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 630,\n    },\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nPreview the OG route locally by running the following command:\n\nThen, browse to `http://localhost:3000/api/og`. You will see the following image:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-language.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage generated using other languages\n\nPlease note that right to left languages are not currently supported.",
  "title": "Using languages in your OG image",
  "description": "Learn how to use other languages in the text of your OG image.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/encrypting-parameters",
  "markdown": "# Encrypting parameters\n\nYou can use the following code sample to explore using parameters and different content types with [`next/og`](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx). To learn more about OG Image Generation, see [Open Graph Image Generation](https://vercel.com/docs/functions/og-image-generation).\n\nThis is the directory structure for these files:\n\n*   app\n    *   api\n        *   encrypted\n            *   route.tsx\n    *   encrypted\n        *   \\[id\\]\n            *   page.tsx\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nconst key = crypto.subtle.importKey(\n  'raw',\n  new TextEncoder().encode('my_secret'),\n  { name: 'HMAC', hash: { name: 'SHA-256' } },\n  false,\n  ['sign'],\n);\n \nfunction toHex(arrayBuffer: ArrayBuffer) {\n  return Array.prototype.map\n    .call(new Uint8Array(arrayBuffer), (n) => n.toString(16).padStart(2, '0'))\n    .join('');\n}\n \nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n \n  const id = searchParams.get('id');\n  const token = searchParams.get('token');\n \n  const verifyToken = toHex(\n    await crypto.subtle.sign(\n      'HMAC',\n      await key,\n      new TextEncoder().encode(JSON.stringify({ id })),\n    ),\n  );\n \n  if (token !== verifyToken) {\n    return new Response('Invalid token.', { status: 401 });\n  }\n \n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          fontSize: 40,\n          color: 'black',\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          padding: '50px 200px',\n          textAlign: 'center',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <h1>Card generated, id={id}.</h1>\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 630,\n    },\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nThen, you need to create a frontend component that can take an `id` query parameter, which will be passed to the API route you created above.\n\nCreate the dynamic route `[id]/page` under `/app/encrypted` and paste the following code:\n\n```\n// This page generates the token to prevent generating OG images with random parameters (`id`).\nimport { createHmac } from 'node:crypto';\n \nfunction getToken(id: string): string {\n  const hmac = createHmac('sha256', 'my_secret');\n  hmac.update(JSON.stringify({ id: id }));\n  const token = hmac.digest('hex');\n  return token;\n}\n \ninterface PageParams {\n  params: {\n    id: string;\n  };\n}\n \nexport default function Page({ params }: PageParams) {\n  console.log(params);\n  const { id } = params;\n  const token = getToken(id);\n \n  return (\n    <div>\n      <h1>Encrypted Open Graph Image.</h1>\n      <p>Only /a, /b, /c with correct tokens are accessible:</p>\n      <a\n        href={`/api/encrypted?id=${id}&token=${token}`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <code>\n          /api/encrypted?id={id}&token={token}\n        </code>\n      </a>\n    </div>\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nRun your project locally and browse to `http://localhost/encrypted/a`(`b` or `c` will also work).\n\nClick on the generated link to be directed to the generated image.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-encrypted.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage generated using\n\n`/api/encrypted?id=a&token=634dd7e46ec814fb105074b73e26755b0d9966c031dca05d7e7cc65a1619058e`\n\nIn your actual implementation, you will use the code in `/app/encrypted/[id]/page.tsx` with a page to create your post html that will look like this.",
  "title": "Encrypting parameters",
  "description": "Learn how to encrypt parameters so that only certain values can be passed to generate your image.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/using-tailwind",
  "markdown": "# Using Tailwind CSS with your OG Image\n\nYou can use the following code sample to explore using parameters and different content types with [`next/og`](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx). To learn more about OG Image Generation, see [Open Graph Image Generation](https://vercel.com/docs/functions/og-image-generation).\n\nCreate an api route with `route.tsx` in `/app/api/og/` and paste the following code:\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nexport async function GET() {\n  return new ImageResponse(\n    (\n      // Modified based on https://tailwindui.com/components/marketing/sections/cta-sections\n      <div\n        style={{\n          height: '100%',\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundColor: 'white',\n        }}\n      >\n        <div tw=\"bg-gray-50 flex\">\n          <div tw=\"flex flex-col md:flex-row w-full py-12 px-4 md:items-center justify-between p-8\">\n            <h2 tw=\"flex flex-col text-3xl sm:text-4xl font-bold tracking-tight text-gray-900 text-left\">\n              <span>Ready to dive in?</span>\n              <span tw=\"text-indigo-600\">Start your free trial today.</span>\n            </h2>\n            <div tw=\"mt-8 flex md:mt-0\">\n              <div tw=\"flex rounded-md shadow\">\n                <a\n                  href=\"#\"\n                  tw=\"flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-5 py-3 text-base font-medium text-white\"\n                >\n                  Get started\n                </a>\n              </div>\n              <div tw=\"ml-3 flex rounded-md shadow\">\n                <a\n                  href=\"#\"\n                  tw=\"flex items-center justify-center rounded-md border border-transparent bg-white px-5 py-3 text-base font-medium text-indigo-600\"\n                >\n                  Learn more\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 630,\n    },\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nPreview the OG route locally by running the following command:\n\nThen, browse to `http://localhost:3000/api/og`. You will see the following image:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-tailwind.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage generated using tailwind css",
  "title": "Using Tailwind CSS with your OG Image",
  "description": "Learn how to use Tailwind CSS to style your OG images.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/project-configuration/git-configuration",
  "markdown": "# Git Configuration\n\nThe following configuration options can be used through a `vercel.json` file like the [Project Configuration](https://vercel.com/docs/projects/project-configuration).\n\nType: `Object` of key branch identifier `String` and value `Boolean`, or `Boolean`.\n\nSpecify the branches that will not trigger an auto-deployment when committing to them. Any non specified branch is `true` by default.\n\nProperty's default value is `true`. In case you want to turn auto-deployments off for every branch, property value must be set to `false`.\n\n```\n{\n  \"git\": {\n    \"deploymentEnabled\": {\n      \"main\": false\n    }\n  }\n}\n```\n\nType: `Boolean`.\n\nWhen set to `false`, [Vercel for GitHub](https://vercel.com/docs/deployments/git/vercel-for-github) will not apply the alias upon merge.\n\n```\n{\n  \"github\": {\n    \"autoAlias\": false\n  }\n}\n```\n\nType: `Boolean`.\n\nWhen set to false, [Vercel for GitHub](https://vercel.com/docs/deployments/git/vercel-for-github) will always build pushes in sequence without cancelling a build for the most recent commit.\n\n```\n{\n  \"github\": {\n    \"autoJobCancelation\": false\n  }\n}\n```\n\nThe `github.silent` property has been deprecated in favor of the new settings in the dashboard, which allow for more fine-grained control over which comments appear on your connected Git repositories. These settings can be found in [the Git section of your project's settings](https://vercel.com/docs/deployments/git/vercel-for-github#silence-github-comments).\n\nType: `Boolean`.\n\nWhen set to `true`, [Vercel for GitHub](https://vercel.com/docs/deployments/git/vercel-for-github) will stop commenting on pull requests and commits.\n\n```\n{\n  \"github\": {\n    \"silent\": true\n  }\n}\n```\n\nThe `github.enabled` property has been deprecated in favor of [git.deploymentEnabled](https://vercel.com/docs/projects/project-configuration/git-configuration#git.deploymentenabled), which allows you to disable auto-deployments for your project.\n\nType: `Boolean`.\n\nWhen set to `false`, [Vercel for GitHub](https://vercel.com/docs/deployments/git/vercel-for-github) will not deploy the given project regardless of the GitHub app being installed.\n\n```\n{\n  \"github\": {\n    \"enabled\": false\n  }\n}\n```",
  "title": "Git Configuration",
  "description": "Learn how to configure Git for your project through the vercel.json file.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/functions/streaming/streaming-examples",
  "markdown": "# Streaming Examples\n\nExplore streaming on Vercel with code samples that work out of the box.\n\nVercel supports streaming in Edge and Serverless functions with [some limitations](https://vercel.com/docs/functions/streaming#choosing-a-runtime). This page provides examples of techniques for processing data from streams.\n\nTo learn how streaming on Vercel works, see [Streaming Concepts](https://vercel.com/docs/functions/streaming). To start immediately, deploy a streaming template:\n\n1.  To use these examples, you should know how to create a Function with your preferred framework, which you can learn in the [Functions quickstart](https://vercel.com/docs/functions/quickstart)\n    \n2.  You should also have a fundamental understanding of how streaming works on Vercel. To learn more see the [Streaming overview](https://vercel.com/docs/functions/streaming) and [Streaming quickstart](https://vercel.com/docs/functions/streaming/quickstart)\n    \n3.  You should be using Node.js 18 or later and the [latest version](https://vercel.com/docs/cli#updating-vercel-cli) of the Vercel CLI.\n    \n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Streaming Examples",
  "description": "Explore streaming on Vercel with code samples that work out of the box.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/cli/logs",
  "markdown": "# vercel logs\n\nThe `vercel logs` command is used to retrieve logs data for a specific deployment. You can find more detailed logs on the Deployment Overview page from the Vercel Dashboard.\n\n```\nvercel logs [deployment-url]\n```\n\nUsing the `vercel logs` command to retrieve logs for a specific deployment.\n\nThese are options that only apply to the `vercel logs` command.\n\nThe `--follow` option, shorthand `-f`, can be used to watch for additional logs output.\n\nUsing the `vercel logs` command with the `--follow` option.\n\nThe `--number` option, shorthand `-n`, can be used to specify the number of log lines to output.\n\nUsing the `vercel logs` command with the `--number` option.\n\nThe `--output` option, shorthand `-o`, can be used to specify the format of the logs output, this can be either `short` (default) or `raw`.\n\nUsing the `vercel logs` command with the `--output` option.\n\nThe `--since` option can be used to return logs only after a specific date, using the ISO 8601 format.\n\n```\nvercel logs --since 2019-09-04T07:05:43+00:00\n```\n\nUsing the `vercel logs` command with the `--since` option.\n\nThe `--query` option, shorthand `-q`, can be used to return logs against a search query.\n\nUsing the `vercel logs` command with the `--query` option.\n\nThe `--until` option can be used to return logs only up until a specific date, using the ISO 8601 format.\n\n```\nvercel logs --until 2019-09-04T07:05:43+00:00\n```\n\nUsing the `vercel logs` command with the `--until` option.\n\nThe following [global options](https://vercel.com/docs/cli/global-options) can be passed when using the `vercel logs` command:\n\nFor more information on global options and their usage, refer to the [options section](https://vercel.com/docs/cli/global-options).",
  "title": "vercel logs",
  "description": "Learn how to list out all logs for a specific deployment using the vercel logs CLI command.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/domains/remove-a-domain",
  "markdown": "# Removing a Domain from a Project\n\nWhen you add a domain to any project, it will be connected to your account until you choose to delete it. This guide demonstrates how to remove a domain from a Project and from your account completely.\n\n1.  To remove a domain that is assigned to a project, navigate to the Domains tab from the Project Overview and click the Edit button for the domain you want to remove.\n    \n2.  Once the Edit button has been clicked, you will be presented with further options. Click the Remove button to remove the domain from the project.\n    \n3.  Optionally, if you wish to remove a domain from all Projects, as well as your Account, navigate to the Domains section of your dashboard. In the list of all the domains under your account, find the domain you wish to remove. Then, from the context menu, click the Delete menu item.\n    \n    ![Option to delete domain(s) from the Domains tab.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fremove-domains.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Option to delete domain(s) from the Domains tab.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fremove-domains-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Option to delete domain(s) from the Domains tab.\n    \n    If the domain was purchased through Vercel, you must first wait for the domain to expire before you can remove it from your account.",
  "title": "Removing a Domain from a Project",
  "description": "Learn how to remove a domain from a Project and from your account completely with this guide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/pricing/observability",
  "markdown": "# Manage and optimize usage for Observability\n\nThe Observability section covers usage for Web Analytics and Speed insights\n\nThe Events chart shows the number of page views and custom events that were tracked across all of your projects. You can filter the data by Count or Projects.\n\nEvery plan has an included limit of events per month. On Pro, Pro with Web Analytics Plus, and Enterprise plans, you're billed based on the usage over the plan limit. You can see the total number of events used by your team by selecting Count in the chart.\n\n*   Your usage is based on the total number of events used across all projects within your team. You can see this number by selecting Projects in the chart, which will allow you to figure out which projects are using the most events and can therefore be optimized\n*   Reduce the amount of custom events they send. Users can find the most sent events in the [events panel](https://vercel.com/docs/analytics#panels) in Web Analytics\n*   Use [beforeSend](https://vercel.com/docs/analytics/package#beforesend) to exclude page views and events that might not be relevant\n*   [Web Analytics Plus](https://vercel.com/docs/analytics/limits-and-pricing#pro-with-web-analytics-plus) includes a higher limit of events per month. If you're on a Pro plan and you're consistently exceeding the limit, it may be more cost effective to upgrade to Pro with Web Analytics Plus\n\nYou are initially billed a set amount for each project on which you enable Speed Insights. Each plan includes a set number of data points. After that, you're charged a set price per unit of additional data points.\n\nData points are a single unit of information that represent a measurement of a specific Web Vital metric during a user's visit to your website. Data points get collected on hard navigations. See [Understanding Data Points](https://vercel.com/docs/speed-insights/metrics#understanding-data-points) for more information.\n\n*   To reduce cost, you can change the sample rate at a project level by using the `@vercel/speed-insights` package as explained in [Sample rate](https://vercel.com/docs/speed-insights/package#samplerate). You can also provide a cost limit under your team's Billing settings page to ensure no more data points are collected for the rest of the billing period once the limit has been reached\n*   Use [beforeSend](https://vercel.com/docs/speed-insights/package#beforesend) to exclude page views and events that might not be relevant\n*   You may want to [disable speed insights](https://vercel.com/docs/speed-insights/disable) for projects that no longer need it. This will stop data points getting collected for a project\n\nVercel creates a data point each time a request is made to your website. These data points include unique parameters such as execution time and bandwidth used. For a complete list, see the [visualize](https://vercel.com/docs/observability/monitoring/monitoring-reference#visualize) and [group by](https://vercel.com/docs/observability/monitoring/monitoring-reference#group-by) docs.\n\nHow to use Monitoring usage\n\nYou pay for monitoring based on the total number of data points used above the included limit included in your plan. You can see this number by selecting Count in the chart.\n\nYou can also view the number of data points used by each project in your team by selecting Projects in the chart. This will show you the number of data points used by each project in your team, allowing you to optimize your usage.\n\nTo estimate your cost:\n\n1.  Set the date filter to Current Billing Cycle or Last 30 days if that option is not available\n2.  Scroll to the Networking > Requests chart and take the sum of both cached and uncached requests\n\nYou'll also be charged a base fee for monitoring every month.\n\nBecause data points are based on the amount of requests to your site, there is no way to optimize the number of data points used.\n\nYou can optimize your log drains usage by:\n\n*   [Filtering by environment](https://vercel.com/docs/observability/log-drains/log-drains-reference#log-environments): You can filter logs by environment to reduce the number of logs sent to your log drain. By filtering by only your [production environment](https://vercel.com/docs/deployments/environments#production) you can avoid the costs of sending logs from your [preview deployments](https://vercel.com/docs/deployments/preview-deployments)\n*   [Sampling rate](https://vercel.com/docs/observability/log-drains/log-drains-reference#sampling-rate): You can reduce the number of logs sent to your log drain by using a sampling rate. This will send only a percentage of logs to your log drain, reducing the number of logs sent and the cost of your log drain",
  "title": "Manage and optimize usage for Observability",
  "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of Web Analytics and Speed Insights.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/cli/env",
  "markdown": "# vercel env\n\nThe `vercel env` command is used to manage [Environment Variables](https://vercel.com/docs/projects/environment-variables) of a Project, providing functionality to list, add, remove, and export.\n\nTo leverage environment variables in local tools (like `next dev` or `gatsby dev`) that want them in a file (like `.env`), run `vercel env pull <file>`. This will export your Project's environment variables to that file. After updating environment variables on Vercel (through the dashboard, `vercel env add`, or `vercel env rm`), you will have to run `vercel env pull <file>` again to get the updated values.\n\nSome frameworks make use of environment variables during local development through CLI commands like `next dev` or `gatsby dev`. The `vercel env pull` sub-command will export development environment variables to a local `.env` file or a different file of your choice.\n\nTo override environment variable values temporarily, use:\n\n```\nMY_ENV_VAR=\"temporary value\" next dev\n```\n\n  \n\nIf you are using [`vercel build`](https://vercel.com/docs/cli/build) or [`vercel dev`](https://vercel.com/docs/cli/dev), you should use [`vercel pull`](https://vercel.com/docs/cli/pull) instead. Those commands operate on a local copy of environment variables and Project settings that are saved under `.vercel/`, which `vercel pull` provides.\n\nUsing the `vercel env` command to list all Environment Variables in a Vercel Project.\n\nUsing the `vercel env` command to add an Environment Variable to a Vercel Project.\n\nUsing the `vercel env` command to remove an Environment Variable from a Vercel Project.\n\n```\nvercel env ls [environment]\n```\n\nUsing the `vercel env` command to list Environment Variables for a specific Environment in a Vercel Project.\n\n```\nvercel env ls [environment] [gitbranch]\n```\n\nUsing the `vercel env` command to list Environment Variables for a specific Environment and Git branch.\n\nUsing the `vercel env` command to add an Environment Variable to all Environments to a Vercel Project.\n\n```\nvercel env add [name] [environment]\n```\n\nUsing the `vercel env` command to add an Environment Variable for a specific Environment to a Vercel Project.\n\n```\nvercel env add [name] [environment] [gitbranch]\n```\n\nUsing the `vercel env` command to add an Environment Variable to a specific Git branch.\n\n```\nvercel env add [name] [environment] < [file]\n```\n\nUsing the `vercel env` command to add an Environment Variable to a Vercel Project using a local file's content as the value.\n\n```\necho [value] | vercel env add [name] [environment]\n```\n\nUsing the `echo` command to generate the value of the Environment Variable and piping that value into the `vercel dev` command. Warning: this will save the value in bash history, so this is not recommend for secrets.\n\n```\nvercel env add [name] [environment] [gitbranch] < [file]\n```\n\nUsing the `vercel env` command to add an Environment Variable with Git branch to a Vercel Project using a local file's content as the value.\n\n```\nvercel env rm [name] [environment]\n```\n\nUsing the `vercel env` command to remove an Environment Variable from a Vercel Project.\n\nUsing the `vercel env` command to download Development Environment Variables from the cloud and write to a specific file.\n\n```\nvercel env pull --environment=preview\n```\n\nUsing the `vercel env` command to download Preview Environment Variables from the cloud and write to the `.env.local` file.\n\n```\nvercel env pull --environment=preview --git-branch=feature-branch\n```\n\nUsing the `vercel env` command to download \"feature-branch\" Environment Variables from the cloud and write to the `.env.local` file.\n\nThese are options that only apply to the `vercel env` command.\n\nThe `--yes` option can be used to bypass the confirmation prompt when overwriting an environment file or removing an environment variable.\n\nUsing the `vercel env pull` command with the `--yes` option to overwrite an existing environment file.\n\n```\nvercel env rm [name] --yes\n```\n\nUsing the `vercel env rm` command with the `--yes` option to skip the remove confirmation.\n\nThe following [global options](https://vercel.com/docs/cli/global-options) can be passed when using the `vercel env` command:\n\nFor more information on global options and their usage, refer to the [options section](https://vercel.com/docs/cli/global-options).",
  "title": "vercel env",
  "description": "Learn how to manage your environment variables in your Vercel Projects using the vercel env CLI command.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/streaming-from-llm",
  "markdown": "# Streaming responses from LLMs\n\nAI providers can be slow when producing responses, but many make their responses available in chunks as they're processed. Streaming enables you to show users those chunks of data as they arrive rather than waiting for the full response, improving the perceived speed of AI-powered apps.\n\nVercel recommends using [Vercel's AI SDK](https://sdk.vercel.ai/docs) to stream responses from LLMs and AI APIs. It reduces the boilerplate necessary for streaming responses from AI providers.\n\nThis example demonstrates a function that sends a message to one of Open AI's GPT models and streams the response:\n\n*   You must have installed the `ai` and `openai` packages:\n    \n    ```\n    pnpm install ai openai zod\n    ```\n    \n*   Copy an OpenAI API key in the `.env.local` file with name `OPENAI_API_KEY`. See the [AI SDK docs](https://sdk.vercel.ai/docs/getting-started#configure-openai-api-key) for more information on how to do this\n*   You should be using Node.js 18 or later\n\n```\nimport OpenAI from 'openai';\nimport { OpenAIStream, StreamingTextResponse } from 'ai';\n \nconst openai = new OpenAI({\n  apiKey: process.env.OPEN_API_KEY,\n});\n// This method must be named GET\nexport async function GET() {\n  // Make a request to OpenAI's API based on\n  // a placeholder prompt\n  const response = await openai.chat.completions.create({\n    model: 'gpt-3.5-turbo',\n    stream: true,\n    messages: [{ role: 'user', content: 'Say this is a test.' }],\n  });\n  // Log the response\n  for await (const part of response) {\n    console.log(part.choices[0].delta);\n  }\n  // Convert the response into a friendly text-stream\n  const stream = OpenAIStream(response);\n  // Respond with the stream\n  return new StreamingTextResponse(stream);\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nBuild your app and visit `localhost:3000/api/chat-example`. You should see the text `\"This is a test.\"` in the browser.",
  "title": "Streaming responses from LLMs",
  "description": "Explore streaming on Vercel with code samples that work out of the box.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes",
  "markdown": "# GuidesGuides\n\n[\n\nFEATUREDMay 7 2023\n\n#### How to Build a Fullstack App with Next.js, Prisma, and Vercel Postgres\n\nCreate a fullstack application with Next.js, Prisma, Vercel Postgres, and deploy to Vercel\n\nDatabases & CMSBuild, Deployment & Git\n\n\n\n](https://vercel.com/guides/nextjs-prisma-postgres)",
  "title": "Guides",
  "description": "How-tos and Tutorials.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/pricing/edge-middleware",
  "markdown": "# Manage and optimize usage for Edge Middleware\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nEdge Middleware is priced based on the number of times your middleware is invoked. This page explains how to manage and optimize your usage for Edge Middleware.\n\nYou are charged based on the number of times your Middleware get invoked.\n\nWhen viewing your Invocations graph, you can group by Count to see the total of all invocations across your team's projects.\n\n*   Use the Projects option to see the total number of invocations for each project within your team. This can help you identify which projects are using the most invocations happen and where you can optimize\n*   By default, Middleware is invoked for every route in your project. You should take advantage of the config `matcher` property to limit the routes where your Middleware is invoked. This can help reduce the number of invocations and optimize your usage. See [Config object](https://vercel.com/docs/functions/edge-middleware/middleware-api#config-object) for more information\n\nThis is the time your [Middleware](https://vercel.com/docs/functions/edge-middleware) has spent computing responses to requests. The compute time refers to the actual net CPU time used, not the execution time. Operations such as network access do not count towards the CPU time.\n\nYou can view CPU time in two ways:\n\n*   Average - This shows the average time for computation across all projects using Middleware within your team. You can hover over the line to see an average for each project on any chosen day. The [fair use guidelines](https://vercel.com/docs/limits/fair-use-guidelines) denote an average CPU time limit of 50ms/invocation within a one hour period across all your team's projects\n*   Project - This shows the _total_ time each project using Middleware within your team has spent computing responses to requests\n\n*   Group by Projects to see the total amount of CPU time for each project within your team. This can help you identify which projects are using the most CPU time and where you can optimize\n*   While not directly related to CPU time, you should avoid using `fetch()` in Middleware as it will slow down the [Time To First Byte (TTFB)](https://vercel.com/docs/speed-insights/metrics#time-to-first-byte-ttfb) for all requests using the Middleware",
  "title": "Manage and optimize usage for Edge Middleware",
  "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage for Edge Middleware.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/handling-backpressure",
  "markdown": "# Handling Backpressure\n\nWhen the server streams data faster than the client can process it, excess data will queue up in the client's memory. This issue is called backpressure, and it can lead to memory overflow errors, or data loss when the client's memory reaches capacity.\n\nIn this recipe, you create an API endpoint that:\n\n*   Simulates backpressure by generating data faster than a stream can read it\n*   Handles backpressure by pushing data into a stream as it's needed, rather than as it's ready\n\nJump to the [full example](#full-example) to see the full recipe.\n\nIn this case, it will be [a generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) that yields a new integer indefinitely\n\n```\n// A generator that will yield positive integers\nasync function* integers() {\n  let i = 1;\n  while (true) {\n    console.log(`yielding ${i}`);\n    yield i++;\n \n    await sleep(100);\n  }\n}\n// Add a custom sleep function to create\n// a delay that simulates how slow some\n// Function responses are.\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n```\n\nNext, create a method that adds the generator function to a `ReadableStream`. Using the `pull` handler, you can prevent new data being added from the generator to the stream if no more data is being requested\n\n```\n// Wraps a generator into a ReadableStream\nfunction createStream(iterator::AsyncGenerator<number, void, unknown>) {\n  return new ReadableStream({\n    // The pull method controls what happens\n    // when data is added to a stream.\n    async pull(controller) {\n      const { value, done } = await iterator.next();\n      // done == true when the generator will yield\n      // no more new values. If that's the case,\n      // close the stream.\n      if (done) {\n        controller.close();\n      } else {\n        controller.enqueue(value);\n      }\n    },\n  });\n}\n```\n\nFinally, iterate through a loop and read data from the stream. Without the code that checks if the generator is done, the stream would continue taking values from `integers()` indefinitely, filling up memory. Because the code checks if the generator is done, the stream closes after you iterator as many times as `loopCount`:\n\n```\n// Demonstrate handling backpressure\nasync function backpressureDemo() {\n  // Set up a stream of integers\n  const stream = createStream(integers());\n \n  // Read values from the stream\n  const reader = stream.getReader();\n  const loopCount = 5;\n  // Read as much data as you want\n  for (let i = 0; i < loopCount; i++) {\n    // Get the newest value added to the stream\n    const { value } = await reader.read();\n    console.log(`Stream value: ${value}`);\n    await sleep(1000);\n  }\n}\n```\n\nThe final file, including the route handler function, will look like this:\n\n```\n// A generator that will yield positive integers\nasync function* integers() {\n  let i = 1;\n  while (true) {\n    console.log(`yielding ${i}`);\n    yield i++;\n \n    await sleep(100);\n  }\n}\n// Add a custom sleep function to create\n// a delay that simulates how slow some\n// Function responses are.\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n// Wraps a generator into a ReadableStream\nfunction createStream(iterator: AsyncGenerator<number, void, unknown>) {\n  return new ReadableStream({\n    // The pull method controls what happens\n    // when data is added to a stream.\n    async pull(controller) {\n      const { value, done } = await iterator.next();\n      // done == true when the generator will yield\n      // no more new values. If that's the case,\n      // close the stream.\n      if (done) {\n        controller.close();\n      } else {\n        controller.enqueue(value);\n      }\n    },\n  });\n}\n// Demonstrate handling backpressure\nasync function backpressureDemo() {\n  // Set up a stream of integers\n  const stream = createStream(integers());\n  // Read values from the stream\n  const reader = stream.getReader();\n  const loopCount = 5;\n  // Read as much data as you want\n  for (let i = 0; i < loopCount; i++) {\n    // Get the newest value added to the stream\n    const { value } = await reader.read();\n    console.log(`Stream value: ${value}`);\n    await sleep(1000);\n  }\n}\n \nexport async function GET() {\n  backpressureDemo();\n  return new Response('Check your console to see the result!');\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`",
  "title": "Handling Backpressure",
  "description": "Learn how to handle backpressure by pushing data into a steam as it's needed, rather than as it's ready.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/pricing/artifacts",
  "markdown": "# Manage and optimize usage for Remote Cache Artifacts\n\nThe Artifacts section shows the following charts:\n\nArtifacts are blobs of data or files that are uploaded and downloaded using the [Vercel Remote Cache API](https://vercel.com/docs/monorepos/remote-caching), including calls made using [Turborepo](https://vercel.com/docs/monorepos/turborepo#setup-remote-caching-for-turborepo-on-vercel) and the [Remote Cache SDK](https://github.com/vercel/remote-cache). Once uploaded, artifacts can be downloaded during the [build](https://vercel.com/docs/deployments/configure-a-build) by any [team members](https://vercel.com/docs/accounts/team-members-and-roles).\n\nUploaded artifacts on Vercel automatically expire after 7 days.\n\nArtifacts get annotated with a task duration, which is the time required for the task to run and generate the artifact. The time saved is the sum of that task duration for each artifact multiplied by the number of times that artifact is reused from a cache.\n\n*   Remote Cache: The time saved by using artifacts cached on the Vercel Remote Cache API\n*   Local Cache: The time saved by using artifacts cached on your local filesystem cache\n\nWhen your team enables [Vercel Remote Cache](https://vercel.com/docs/monorepos/remote-caching#enable-and-disable-remote-caching-for-your-team), Vercel will automatically cache [Turborepo](https://vercel.com/docs/monorepos/turborepo) outputs (such as files and logs) and create cache artifacts from your builds. This can help speed up your builds by reusing artifacts from previous builds. To learn more about what is cached, see the Turborepo docs on [caching](https://turbo.build/repo/docs/core-concepts/caching).\n\nFor other monorepo implementations like [Nx](https://vercel.com/docs/monorepos/nx), you need to manually configure your project using the [Remote Cache SDK](https://github.com/vercel/remote-cache) after you have enabled Vercel Remote Cache.\n\nYou are not charged based on the number of artifacts, but rather the size in GB downloaded.\n\nThe total size graph shows the ratio of artifacts uploaded and downloaded from the Vercel Remote Cache. Multiple uploads or downloads of the same artifact count as distinct events when calculating these sizes.\n\nYou are charged based on the total size of artifacts downloaded from the Remote Cache API. Each plan has a limit for the total size of artifacts that can be downloaded from the Remote Cache. Anything beyond this limit is charged per additional GB of downloaded artifacts: Learn More\n\nYou can do this by ensuring that you only cache the files that need to be restored for cache hits.\n\nFor example, the `.next` folder contains your build artifacts. You can avoid caching the `.next/cache` folder since it is only used for development and will not speed up your production builds.",
  "title": "Manage and optimize usage for Remote Cache Artifacts",
  "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of artifacts.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/processing-data-chunks",
  "markdown": "# Processing Data Chunks\n\nChunks in web streams are fundamental data units that can be of many different types depending on the content, such as `String` for text or `Uint8Array` for binary files. While standard Function responses contain full payloads of data processed on the server, streamed responses typically send data in chunks over time.\n\nTo do this, you [create a ReadableStream](#create-a-readablestream) and add a data source, then [transform](#transform-the-stream's-data-chunks) the stream's data chunks before they're read by the client. Finally, you [write stream the data chunk by chunk](#write-stream-the-data-chunk-by-chunk) as a Function response.\n\nJump to the [full example](#full-example) to see the finished recipe.\n\nCreate a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) and add a data source. In this case, you'll create your own data by encoding text with [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder):\n\n```\n// TextEncoder objects turn text content\n// into streams of UTF-8 characters.\n// You'll add this encoder to your stream\nconst encoder = new TextEncoder();\n// This is the stream object, which clients can read from\n// when you send it as a Function response\nconst readableStream = new ReadableStream({\n  // The start method is where you'll add the stream's content\n  start(controller) {\n    const text = 'Stream me!';\n    // Queue the encoded content into the stream\n    controller.enqueue(encoder.encode(text));\n    // Prevent more content from being\n    // added to the stream\n    controller.close();\n  },\n});\n```\n\nYou then need to transform the stream's data chunks before they're read by the client. First, you'll decode the chunks with `TextDecoder`, then transform the text to uppercase before encoding the text again:\n\n```\n// TextDecoders can decode streams of\n// encoded content. You'll use this to\n// transform the streamed content before\n// it's read by the client\nconst decoder = new TextDecoder();\n// TransformStreams can transform a stream's chunks\n// before they're read in the client\nconst transformStream = new TransformStream({\n  transform(chunk, controller) {\n    // Decode the content, so it can be transformed\n    const text = decoder.decode(chunk);\n    // Make the text uppercase, then encode it and\n    // add it back to the stream\n    controller.enqueue(encoder.encode(text.toUpperCase()));\n  },\n});\n```\n\nFinally, write stream the data chunk by chunk as a Function response:\n\n```\n// Finally, send the streamed response. Result:\n// \"STREAM ME!\" will be displayed in the client\nreturn new Response(readableStream.pipeThrough(transformStream), {\n  headers: {\n    'Content-Type': 'text/html; charset=utf-8',\n  },\n});\n```\n\nThe final file will look like this:\n\n```\n// This method must be named GET\nexport async function GET() {\n  // TextEncoder objects turn text content\n  // into streams of UTF-8 characters.\n  // You'll add this encoder to your stream\n  const encoder = new TextEncoder();\n  // This is the stream object, which clients can read from\n  // when you send it as a Function response\n  const readableStream = new ReadableStream({\n    // The start method is where you'll add the stream's content\n    start(controller) {\n      const text = 'Stream me!';\n      // Queue the encoded content into the stream\n      controller.enqueue(encoder.encode(text));\n      // Prevent more content from being\n      // added to the stream\n      controller.close();\n    },\n  });\n \n  // TextDecoders can decode streams of\n  // encoded content. You'll use this to\n  // transform the streamed content before\n  // it's read by the client\n  const decoder = new TextDecoder();\n  // TransformStreams can transform a stream's chunks\n  // before they're read in the client\n  const transformStream = new TransformStream({\n    transform(chunk, controller) {\n      // Decode the content, so it can be transformed\n      const text = decoder.decode(chunk);\n      // Make the text uppercase, then encode it and\n      // add it back to the stream\n      controller.enqueue(encoder.encode(text.toUpperCase()));\n    },\n  });\n \n  // Finally, send the streamed response. Result:\n  // \"STREAM ME!\" will be displayed in the client\n  return new Response(readableStream.pipeThrough(transformStream), {\n    headers: {\n      'Content-Type': 'text/html; charset=utf-8',\n    },\n  });\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nBuild your app and visit `localhost:3000/api/chunk-example`. You should see the text `\"STREAM ME!\"` in the browser.\n\nSee [Understanding Chunks](https://vercel.com/docs/functions/streaming#understanding-chunks) to learn more.\n\nRun your app locally and visit `localhost:3000/api/data-chunks`. You should see the text `\"STREAM ME!\"` in the browser.\n\nSee [Understanding Chunks](https://vercel.com/docs/functions/streaming#understanding-chunks) to learn more.",
  "title": "Processing Data Chunks",
  "description": "Learn how to create an API endpoint that processes data chunks.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/errors/OPTIMIZED_EXTERNAL_IMAGE_REQUEST_INVALID",
  "markdown": "# OPTIMIZED\\_EXTERNAL\\_IMAGE\\_REQUEST\\_INVALID\n\nThe `OPTIMIZED_EXTERNAL_IMAGE_REQUEST_INVALID` error occurs when the external image request is invalid.",
  "title": "OPTIMIZED_EXTERNAL_IMAGE_REQUEST_INVALID",
  "description": "The external image request is invalid. This is a request error.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/pricing/image-optimization",
  "markdown": "# Manage and optimize usage for Image Optimization\n\nThe [Image Optimization](https://vercel.com/docs/image-optimization) section shows the following charts:\n\nThe distinct number of [source images](https://vercel.com/docs/image-optimization/limits-and-pricing#source-images).\n\nA source image is the original, unaltered image determined by the `src` prop. If the same source image gets used many times with different transformations, it is only counted once for the current billing period. For example, if you specified `<Image src=\"/hero.png\" width=\"700\" height=\"745\" />`, `/hero.png` would be counted as one source image, but could produce multiple optimized images for different devices (e.g. `/_next/image?url=%2Fhero.png&w=750&q=75`, `/_next/image?url=%2Fhero.png&w=828&q=75`, `/_next/image?url=%2Fhero.png&w=1080&q=75`).\n\nYou pay for Source Images based on the total number of unique source images used above the included limit in your plan. You can see this number by selecting Count in the chart.\n\nYou can also view the number of Source Images used by each project in your team by selecting Projects in the chart. This allows you to optimize your usage for each project.\n\nFor tips on ensuring efficient use of Image Optimization, see [Managing Image Optimization costs](https://vercel.com/docs/image-optimization/managing-image-optimization-costs#minimizing-image-optimization-costs).",
  "title": "Manage and optimize usage for Image Optimization",
  "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of resources.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/pricing/edge-config",
  "markdown": "# Manage and optimize usage for Edge Config\n\nLearn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of Edge Config.\n\nThe Edge Config section shows the following charts:\n\n*   Keep the number of stores to a minimum. Fewer large stores improves your overall latency\n\nThe Reads chart shows the number of times your [Edge Config](https://vercel.com/docs/functions/edge-config) has been read. You can filter the data by Count or Projects.\n\n*   Select the Project tab to identify which project has the most Edge Config reads\n*   Review how you access the stores through both the [REST API](https://vercel.com/docs/storage/edge-config/vercel-api) and the [SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk). They both count toward your reads\n*   Where possible, use [`getAll()`](https://vercel.com/docs/storage/edge-config/edge-config-sdk#read-multiple-values) instead of separate [`get(key)`](https://vercel.com/docs/storage/edge-config/edge-config-sdk#read-a-single-value) calls with the SDK, so that they count as a single read\n\nThe Writes chart shows the number of times your [Edge Configs](https://vercel.com/docs/functions/edge-config) were updated. You can filter the data by Count or Edge Configs.\n\n*   Select the Edge Configs tab to identify which Edge Config has the most Edge Config writes\n*   Review your points of updating the stores through the [REST API](https://vercel.com/docs/storage/edge-config/vercel-api) as they count towards your writes",
  "title": "Manage and optimize usage for Edge Config",
  "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of Edge Config.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/deploy-button/demo",
  "markdown": "# Deploy Button Demo\n\n| Parameter | Type | Value | Required |\n| --- | --- | --- | --- |\n| `demo-title` | `string` | The title of an example deployment. | Yes |\n\nThis parameter allows you to specify the title of an example of a successful deployment.\n\nThe parameter is part of the Demo Card parameters. The Demo Card should showcase an example of a successful deployment to the user clicking the Deploy Button and entering the Project creation flow.\n\nThe Demo card is displayed only when all `demo-*` parameters are provided.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1690376794%2Fdocs-assets%2Fstatic%2Fdocs%2Fdeploy-button%2Fdeploy-title-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1690376795%2Fdocs-assets%2Fstatic%2Fdocs%2Fdeploy-button%2Fdeploy-title.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Demo Title parameter is displayed on the Demo Card.\n\nThe example below shows how to use the `demo-title` parameter in the Deploy Button source URL:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&demo-title=APM%20Story\n```\n\n| Parameter | Type | Value | Required |\n| --- | --- | --- | --- |\n| `demo-description` | `string` | The description of an example deployment. | Yes |\n\nThis parameter allows you to specify the description of an example of a successful deployment.\n\nThe parameter is part of the Demo Card parameters. The Demo Card should showcase an example of a successful deployment to the user clicking the Deploy Button and entering the Project creation flow.\n\nThe Demo card is displayed only when all `demo-*` parameters are provided.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1690376794%2Fdocs-assets%2Fstatic%2Fdocs%2Fdeploy-button%2Fdeploy-description-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1690376794%2Fdocs-assets%2Fstatic%2Fdocs%2Fdeploy-button%2Fdeploy-description.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Demo Description is displayed on the Demo Card.\n\nThe example below shows how to use the `demo-description` parameter in the Deploy Button source URL:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&demo-description=A%20statically%20generated%20blog%20example%20using%20Next.js%20%and%20DatoCMS\n```\n\n| Parameter | Type | Value | Required |\n| --- | --- | --- | --- |\n| `demo-url` | `string` | The URL of an example deployment. | Yes |\n\nThis parameter allows you to specify the URL of an example of a successful deployment.\n\nThe parameter is part of the Demo Card parameters. The Demo Card should showcase an example of a successful deployment to the user clicking the Deploy Button and entering the Project creation flow.\n\nThe Demo card is displayed only when all `demo-*` parameters are provided.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1690376794%2Fdocs-assets%2Fstatic%2Fdocs%2Fdeploy-button%2Fdeploy-url-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1690376794%2Fdocs-assets%2Fstatic%2Fdocs%2Fdeploy-button%2Fdeploy-url.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nClicking on the Demo Card will link the user to the URL specified by Demo URL.\n\nThe example below shows how to use the `demo-url` parameter in the Deploy Button source URL:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&demo-url=https%3A%2F%2Fnextjs.org\n```\n\n| Parameter | Type | Value | Required |\n| --- | --- | --- | --- |\n| `demo-image` | `string` | The URL of the screenshot of an example deployment. | Yes |\n\nThis parameter allows you to specify the URL of the screenshot of an example of a successful deployment.\n\nThe parameter is part of the Demo Card parameters. The Demo Card should showcase an example of a successful deployment to the user clicking the Deploy Button and entering the Project creation flow.\n\nThe Demo card is displayed only when all `demo-*` parameters are provided.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1690376794%2Fdocs-assets%2Fstatic%2Fdocs%2Fdeploy-button%2Fdeploy-image-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1690376795%2Fdocs-assets%2Fstatic%2Fdocs%2Fdeploy-button%2Fdeploy-image.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe image specified by Demo Image is displayed on the Demo Card.\n\nThe example below shows how to use the `demo-image` parameter in the Deploy Button source URL:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&demo-image=https%3A%2F%2Fexample.com%2Fimage.png\n```",
  "title": "Deploy Button Demo",
  "description": "Learn how to use the Deploy Button Demo parameters to showcase an example of a successful deployment to the user when clicking the Deploy Button and entering the Project creation flow.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/pricing/kv",
  "markdown": "# Manage and optimize usage for Vercel KV\n\nLearn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of resources.\n\nThe KV section shows the following charts:\n\nThe Requests chart shows the total number of Redis commands made to all the [KV](https://vercel.com/docs/storage/vercel-kv) stores on your Team. Each plan includes a set number of requests. Additional requests made above the included limit in your plan get charged at a set price per unit.\n\n*   You can replicate Vercel KV databases in multiple regions to reduce latency and improve availability. However, this means that the number of requests will increase as each write command will be issued once to your primary database and once to each read replicas you have configured\n*   To disable or stop incurring charges, you should reduce some of your read replicas or stop querying the database\n\nThe Data transfer chart shows the amount of data transferred between your [KV](https://vercel.com/docs/storage/vercel-kv) stores and your compute endpoints. Each plan includes a set amount of data transfer. After that you're charged a set price per unit of additional data transfer made above the included limit in your plan.\n\n*   To disable or stop incurring charges, you should reduce some of your read replicas or stop querying the database\n\nThe Storage chart shows the maximum amount of data stored on average in all your [KV](https://vercel.com/docs/storage/vercel-kv) stores per month. Each plan includes a set amount of storage. After that you're charged a set price per unit of additional storage used above the included limit in your plan.\n\n*   To reduce cost, you can delete unused data from your KV stores or delete unused stores entirely if they are no longer queried\n*   Note that read replicas count towards your storage usage, so reducing the number of read replicas can help reduce your storage usage\n\nThe Databases chart shows the number of [KV](https://vercel.com/docs/storage/vercel-kv) databases (including [read replicas](https://vercel.com/docs/storage/vercel-kv/usage-and-pricing#databases-including-read-replicas)) that are currently active on your team. Each plan includes 1 KV database. After that, you're charged a set price for each additional database up to the plan maximum. On the Pro plan, you can have a maximum of five databases per month and that each database can have a maximum of five read replicas.\n\n*   You get charged based on each database and read replica. You may want to consider deleting read replicas if they are no longer needed",
  "title": "Manage and optimize usage for Vercel KV",
  "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of resources.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/pricing/postgres",
  "markdown": "# Manage and optimize usage for Vercel Postgres\n\nThe Postgres section shows the following charts:\n\nVercel calculates compute time based on the active time of your database, multiplied by the number of CPUs available per month. The active time includes periods when the database is receiving requests and for a duration (default 300 seconds) after the last request is received. Following this period of inactivity, the database scales down to zero, effectively pausing compute time billing.\n\nThe usage chart shows the total amount of time your Postgres store was active and responding to requests during the selected period. Each plan includes a set amount of compute time, once you exceed this limit you're charged a set price per CPU hour. Learn More.\n\nTo reduce cost, you can reduce the Compute Size or the period of inactivity before the database scales down to zero. To manage these settings:\n\n1.  Go to the [Vercel Dashboard](https://vercel.com/dashboard)\n2.  Click on the Storage tab and select your database\n3.  From the Settings menu item, under Performance, adjust the settings as required\n\nVercel calculates storage as the average amount of storage used across all projects within your team in the past month. Each plan includes a set amount of storage, and once you exceed this limit you're charged a set price per GB of storage. Learn More.\n\n*   You should note that each Postgres database uses 33MB of storage space, even before any data is stored. This is the default storage footprint of the Postgres server itself. Therefore, you should delete the database completely if you no longer need it\n\nVercel calculates Data Transfer as the amount of data transferred out of the database. Each plan includes a set amount of storage, and once you exceed this limit you're charged a set price per GB of data transfer. Learn More.\n\n*   To stop incurring usage or costs for data transfer, you should stop querying the database or delete it when it is no longer required\n\nVercel calculates written data by the amount of data changes that are committed from compute resources to storage. It encompasses all operations that modify data within your tables, including: inserting, updating, deleting, and migrating data. For more information, see the [Vercel Postgres docs](https://vercel.com/docs/storage/vercel-postgres/usage-and-pricing#written-data).\n\nYou are charged based on the total volume of written data (measured in GB) multiplied by the price per GB. This includes both user-initiated data modifications and the initial written data from setting up new databases. Each plan includes a set amount of written data, and once you exceed this limit you're charged a set price per GB of written data. Learn More.\n\n*   Frequent Updates or Deletions: High volumes of update or delete operations can contribute to written data volume.\n*   Database Initialization: The initial setup of a database contributes to written data volume, as explained [above](https://vercel.com/docs/pricing/postgres#optimizing-postgres-data-storage).\n*   System Operations: Background tasks and system maintenance operations that ensure the health and performance of your database also contribute to written data.\n\nThe Databases chart shows the total number of [Postgres](https://vercel.com/docs/storage/vercel-postgres) databases that your team currently has active. Each plan includes 1 Postgres database. After that you're charged a set price each month for each additional database, up to the plan maximum. Learn More",
  "title": "Manage and optimize usage for Vercel Postgres",
  "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of Postgres.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/deploy-button/source",
  "markdown": "# Deploy Button Source\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `repository-url` | `string` | The source Git repository URL |\n\nThe Repository URL parameter allows you to define a Git repository URL, optionally including the subdirectory within a repository, that users will clone into their GitHub, GitLab, or Bitbucket account when going through the Vercel Project creation flow.\n\nThe example below shows how to use the Repository URL parameter to set the repository URL to `hello-world`:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world\n```\n\nThe Repository URL parameter is required when sending a user to the Vercel Project creation flow to set up a project from a GitHub, GitLab, or Bitbucket repository.\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `project-name` | `string` | A default project name |\n\nThe Project Name parameter allows you to define a default project name.\n\nThis parameter is useful for cases where already know what the user would like to name their project. For example, if you are sending the user to the Project creation flow from an application that has already set up a project for the user that will connect to the created Vercel project.\n\nIf there is an existing project using the name passed with this parameter, the user will be required to define a new project name, and therefore the project is not guaranteed to have the specified name.\n\nThe example below shows how to use the Project Name parameter to set the project name to \"my-awesome-project\":\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&project-name=my-awesome-project\n```\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `repository-name` | `string` | A default repository name (no spaces) |\n\nThe Repository Name parameter allows you to define a default repository name.\n\nSimilar to the [Project Name](#project-name) parameter, this parameter is useful in cases where you already know what the user wants to name their repository.\n\nThe example below shows how to use the Repository Name parameter to set the repository name to \"my-awesome-project\":\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&repository-name=my-awesome-project\n```",
  "title": "Deploy Button Source",
  "description": "Learn how to use the Vercel Deploy Button source URL parameters.\n  ",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/deploy-button/environment-variables",
  "markdown": "# Using Environment Variables with the Deploy Button\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `env` | `string[]` | A comma-separated list of required Environment Variable keys. |\n\nThe Required Environment Variables parameter allows you to require users to fill in values of Environment Variables the new project needs to run successfully.\n\nThe example below shows how to use the `env` parameter in a Deploy Button source URL:\n\n```\nhttps://vercel.com/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&env=PUBLIC_API_KEY,API_SECRET_KEY\n```\n\nYou cannot pass Environment Variable values using this parameter due to the URL being saved in the browser history, and thus not being a secure method.\n\n| Parameter | Value | Type |\n| --- | --- | --- |\n| `envDescription` | A short description of the [Required Environment Variables](#required-environment-variables): `Enter your public API Key.` | String |\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `envDescription` | `string` | A short description of the required Environment Variables |\n\nThe Environment Variables Description parameter allows you to define a URL encoded string that describes to a user what the [Required Environment Variables](#required-environment-variables) are used for.\n\nThe description provided through this parameter will only show if Required Environment Variables are set.\n\nThe example below shows how to use the `envDescription` parameter in a Deploy Button source URL:\n\n```\nhttps://vercel.com/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&env=PUBLIC_API_KEY&envDescription=Enter%20your%20public%20API%20Key.\n```\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `envLink` | `string` | A link to an explanation of the required Environment Variables |\n\nThe Environment Variable Link parameter allows you to attach a link to external documentation that helps the user find more information about where the values for the Environment Variables can be found and what they are for.\n\nThe description provided through this parameter will only show if Required Environment Variables are set.\n\nThe example below shows how to use the `envLink` parameter in a Deploy Button source URL. Make sure you provide users with a specific link instead of top-level documentation:\n\n```\nhttps://vercel.com/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&env=PUBLIC_API_KEY&envLink=https%3A%2F%2Fvercel.com%2Fdocs\n```",
  "title": "Using Environment Variables with the Deploy Button",
  "description": "Learn how to use Environment Variables with the Vercel Deploy Button.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_NODE_VERSION_FILE",
  "markdown": "# REQUIRE\\_NODE\\_VERSION\\_FILE\n\nConformance Rules\n\nThis rule is available from version 1.2.0.\n\nUsing a Node.js version file (`.node-version` or `.nvmrc`) ensures that all developers and tooling (e.g., CI systems) use the same version of Node.js. This practice helps to avoid inconsistencies between environments and can even prevent bugs from being shipped to production.\n\nAs another benefit, committing a Node.js version file improves developer experience, as many Node.js version management tools can automatically detect and use the version defined in the file. This includes [GitHub Actions](https://docs.github.com/en/actions), and popular Node.js version managers such as [`fnm`](https://github.com/Schniz/fnm) and [`nvm`](https://github.com/nvm-sh/nvm).\n\nThis rule also validates to ensure that the version in the file is defined in a way that is compatible with common tooling.\n\nBy default, this rule is disabled. To enable it, refer to [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nIf you hit this issue, you can resolve it by adding a Node.js version file at the root of your workspace.\n\nThe example `.node-version` file below requires that Node.js `20.9` is used in the workspace, allowing for any patch version (i.e. `20.9.1`). The level of strictness can be adjusted based on your teams needs.",
  "title": "REQUIRE_NODE_VERSION_FILE",
  "description": "Requires that workspaces have a valid Node.js version file (`.node-version` or `.nvmrc`) file defined.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/deploy-button/build-settings",
  "markdown": "# Build Settings\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `build-command` | `string` | Setting this value is equivalent to enabling the Override toggle for that field in the dashboard. |\n\nThis allows you to define a custom Build command that is normally automatically configured based on your Project's framework.\n\nThe example below shows a source URL using the `build-command` parameter to set the Build command to `npm run build`:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&build-command=npm%20run%20build\n```\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `install-command` | `string` | Setting this value is equivalent to enabling the Override toggle for that field in the dashboard. |\n\nThis allows you to define a custom Install command that is normally automatically configured based on the following:\n\n| Lock File | Install Command | Package Manager Version |\n| --- | --- | --- |\n| `pnpm-lock.yaml` | `pnpm install` | `pnpm 7` if `\"lockfileVersion\": 5.4`, otherwise `pnpm 6` |\n| `package-lock.json` | `npm install` | `npm 8` if `\"lockfileVersion\": 2`, otherwise `npm 6` |\n| `bun.lockb` | `bun install` | `bun 1` |\n| None | `yarn install` | N/A |\n\nThe example below shows a source URL using the `install-command` parameter to set the Install command to `npm install`:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&install-command=npm%20install\n```\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `dev-command` | `string` | Setting this value is equivalent to enabling the Override toggle for that field in the dashboard. |\n\nThis allows you to define a custom development command if you are using `vercel dev` to test your project locally. Each framework has its own development command and this will be set automatically based on your selected framework.\n\nThe example below shows a source URL using the `dev-command` parameter to set the Development command to `next dev --port $PORT`:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&dev-command=next%20dev%20--port%20%24PORT\n```\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `ignore-command` | `string` | Setting this value is equivalent to enabling the Override toggle for that field in the dashboard. |\n\nThis allows you to define an Ignored Build Step to determine when your project should build and deploy.\n\nThe example below shows a source URL using the `ignore-command` parameter to set the Ignored Build Step command to `npx turbo-ignore`:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&ignore-command=npx%20turbo-ignore\n```\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `root-directory` | `string` | Setting this value is equivalent to enabling the Override toggle for that field in the dashboard. |\n\nThis allows you to define the path of the directory relative to the root of the Project folder where your source code is located. By default it is empty and equivalent to the root of the repository.\n\nThe example below shows a source URL using the `root-directory` parameter to set the Root Directory to `apps/frontend`:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel-support%2Fyarn-ws-monorepo&root-directory=apps%2Ffrontend\n```\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `output-directory` | `string` | Setting this value is equivalent to enabling the Override toggle for that field in the dashboard. |\n\nThis allows you to define the output directory's path relative to the Project folder's root. Usually, this is automatically configured based on your Project's framework.\n\nThe example below shows a source URL using the `output-directory` parameter for a monorepo where the application output is generated to `dist/apps/app/.next`:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&output-directory=dist%2Fapps%2Fapp%2F.next\n```",
  "title": "Build Settings",
  "description": "Learn how to configure the Build & Development settings for your Vercel Deploy Button.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/deployments/deploy-button/callback",
  "markdown": "# Using Callbacks with the Deploy Button\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `redirect-url` | `string` | The URL to redirect the user to in the event of a successful deployment. |\n\nThe Redirect URL parameter allows you to define a URL, other than the newly created Vercel project, to send the user to after a successful deployment.\n\nThis parameter is helpful if you are sending a user from an application, to deploy a project with Vercel, but want the user to continue with your application with a project created and deployed.\n\nThe example below shows a Deploy Button source URL using the Redirect URL parameter:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&redirect-url=https%3A%2F%2Fmy-headless-application.com\n```\n\nProvide a custom name and logo for the redirect UI by using the [Developer ID](#developer-id) parameter.\n\nVercel additionally attaches some \"Callback Parameters\" to the defined Redirect URL when the user is redirected. The following parameters give you access to information about the project the user has created and deployed, for you to integrate with Vercel after the user is sent back to you.\n\n| Parameter | Description |\n| --- | --- |\n| `project-dashboard-url` | The URL to view the Project that was created through the Project creation flow on the Vercel Dashboard. |\n| `project-name` | The Name of the Project that was created through the Project creation flow. |\n| `deployment-dashboard-url` | The URL to view the Deployment that was created through the Project creation flow on the Vercel Dashboard. |\n| `deployment-url` | The URL of the deployment that was created through the Project creation flow. This contains the default production domain that was automatically generated for the project that was created. |\n| `repository-url` | The URL of the Git repository that was created through the Project creation flow, within the user's selected Git account (GitHub, GitLab, or Bitbucket). |\n| `production-deploy-hook-url` ([conditional](#deploy-hook)) | The URL of a Deploy Hook. Requires [the `production-deploy-hook` parameter](#deploy-hook). |\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `developer-id` | `string` | The Client ID of an Integration. |\n\nThe Developer ID parameter allows you to define a [Vercel Integration](https://vercel.com/docs/integrations) Client ID which will then attach your logo and name to the UI when using the [Redirect URL](#redirect-url) parameter.\n\nYou can find the Developer ID listed as \"Client ID\" in your [Integrations Developer Console](https://vercel.com/dashboard/integrations/console).\n\nThis parameter requires the [Redirect URL](#redirect-url) parameter to be set and also that the Integration website field matches the Redirect URL value.\n\nThe example below shows a Deploy Button source URL using the Redirect URL and Developer ID parameters:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&redirect-url=https%3A%2F%2Fmy-headless-application.com&developer-id=oac_7rUTiCMow23Gyfao9RQQ3Es2\n```\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `external-id` | `string` | An external ID or reference of your choice. |\n\nThis parameter allows you to pass the ID or reference of your choice to the Project creation flow.\n\nThe query parameter will be relayed to the [Redirect URL](https://vercel.com/docs/integrations/create-integration) of each required [Integration](https://vercel.com/docs/integrations/deploy-button/integrations) when the user adds them in the Project creation flow.\n\nTo use this parameter, you also need to specify at least one [Integration](https://vercel.com/docs/integrations/deploy-button/integrations).\n\nThe example below shows a Deploy Button source URL using the Integration ID and External ID parameters:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&integration-ids=oac_1mkAfc68cuDV4suZRlgkn3Re&external-id=1284210\n```\n\n| Parameter | Type | Value |\n| --- | --- | --- |\n| `production-deploy-hook` | `string` | The name of the Deploy Hook to set up. |\n\nThe Deploy Hook parameter allows you to receive [a URL](https://vercel.com/docs/deployments/deploy-hooks) when also using the Redirect URL parameter, which you can use to redeploy user's projects for them.\n\nThis is useful if you are directing a user to deploy a project that works with your application, for example a headless CMS, and you need to redeploy the user's project in case of a content change that needs to be rebuilt.\n\nThe value of this parameter should be the name of the [Deploy Hook](https://vercel.com/docs/deployments/deploy-hooks) you want to create for the user.\n\nWhen redirected back to your application upon a successful deployment for the user, you will get the `production-deploy-hook-url` callback parameter in addition to [the default callback parameters](#callback-parameters).\n\nThis parameter requires the [Redirect URL](#redirect-url) parameter to also be set.\n\nThe example below shows a Deploy Button source URL using the Redirect URL and production Deploy Hook URL parameters:\n\n```\nhttps://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world&redirect-url=https%3A%2F%2Fmy-headless-application.com&production-deploy-hook=MyHeadlessProject\n```",
  "title": "Using Callbacks with the Deploy Button",
  "description": "Learn how to use the Deploy Button's callback parameters to redirect users to your application after a successful deployment.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/domains/managing-dns-records",
  "markdown": "# Managing DNS Records\n\nOnce a domain has been added and is using Vercel's nameservers, all of its DNS Records can be found by selecting the domain from the [Domains page](https://vercel.com/account/domains). From there, you can view, [add](#adding-dns-records), [verify](#verifying-dns-records), and [remove the records](#removing-dns-records). You can also adjust the [email presets](#dns-email-presets), if necessary.\n\nThis document will guide you through each of these options.\n\nTo make sure DNS records are applied, and to allow you to manage them, your domain needs to use [Vercel's nameservers](https://vercel.com/docs/projects/domains/managing-nameservers) . If you are using a third-party domain, you will be provided with the Vercel nameservers to copy and use with your registrar.\n\n1.  On the [Account Settings](https://vercel.com/account/domains) page (account-scoped domains) or your team's dashboard (team-scoped domains), click on the Domains tab. From the Domains tab, click on a domain of your choice to view its Advanced Settings page.\n    \n2.  Once on the Advanced Settings page of your domain, select the Enable Vercel DNS button to fill out the DNS Record form. Once complete, click on the Add button.\n    \n    ![DNS Records form to add a new DNS Record.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdns-records-form.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![DNS Records form to add a new DNS Record.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdns-records-form-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    DNS Records form to add a new DNS Record.\n    \n    You can then create a new DNS record with the following data:\n    \n    *   Name: The prefix or location of the record. For [www.example.com](http://www.example.com/), the name argument would be [www](http://www/).\n    *   Type: Types can be `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HTTPS`, `MX`, `NS`, `SRV`, or `TXT`.\n    *   Value: The value of the record.\n    *   TTL: Default is 60 seconds. For advanced users, this value can be customized.\n    *   Comment: An optional comment to provide context on what this record is for.\n    *   More: Some records will require more data. MX records, for example, will request \"priority\".\n    \n    Once a DNS record has been added, it can take up to 24 hours to the DNS records to fully update and any local caches to be cleared.\n    \n\nOnce DNS records have been changed, you may wish to check that these have been set correctly. There are many third-party tools that do this, such as DNS Checker and DNS Map - these show the state of your DNS records in different regions of the world.\n\nYou can also use the terminal to check the DNS record for your domain, examples of doing this for the records above are found below:\n\n```\n$ dig A api.example.com +short\n```\n\nVerifying the A record set for a domain using the terminal.\n\n```\n$ dig MX example.com +short\n```\n\nVerifying the MX record set for a domain using the terminal.\n\nIf you need to remove DNS records, you can do so once again by using the DNS UI. Select the elipses (⋯) to access the menu then select Delete DNS Zone. Follow the prompts to delete the record.\n\nDefault records can't be removed. However, new records can override them if required.\n\n![Removing a DNS record from the DNS UI.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdelete-dns-record.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Removing a DNS record from the DNS UI.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdelete-dns-record-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nRemoving a DNS record from the DNS UI.\n\nVercel does not provide an email service. To be able to receive emails through a Domain that you've added to Vercel, you need to add the respective DNS Records of type `MX`.\n\nFor most common third-party email providers, Vercel helps with this process by allowing you to add those missing DNS Records using so-called DNS Email Presets on your dashboard.\n\nIn order to make use of them, navigate to the Domains page of your Personal Account or Team, click the Domain of your choice and click the Add Email Preset button on the right:\n\n![Adding a DNS Email Preset by clicking the Add Email Preset button.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdns-records-email-presets.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Adding a DNS Email Preset by clicking the Add Email Preset button.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdns-records-email-presets-dark.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAdding a DNS Email Preset by clicking the Add Email Preset button.\n\nYou will be presented with a list of commonly used third-party email providers. If yours is in the list, select it and the necessary `MX` DNS Records will automatically be configured on your Domain.\n\nIf your email provider is not in the list, please refer to their documentation and dashboard to find out which `MX` DNS Records you need to add.",
  "title": "Managing DNS Records",
  "description": "Learn how to add, verify, and remove DNS records for your domains on Vercel with this guide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_REACT_STRICT_MODE",
  "markdown": "# NEXTJS\\_MISSING\\_REACT\\_STRICT\\_MODE\n\nApplications using Next.js should enable React Strict Mode\n\nConformance Rules\n\nWe strongly suggest you enable Strict Mode in your Next.js application to better prepare your application for the future of React. See the [Next.js doc on React Strict Mode](https://nextjs.org/docs/api-reference/next.config.js/react-strict-mode) for more information.\n\nAdd the following to your `next.config.js` file.\n\n```\nmodule.exports = {\n  reactStrictMode: true,\n}\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_MISSING_REACT_STRICT_MODE",
  "description": "Applications using Next.js should enable React Strict Mode",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/use-crypto-web-api",
  "markdown": "# Using the crypto Web API to redirect requests with a unique token\n\nLearn how to use the Crypto Web API in your Edge Middleware.\n\nThe following example shows how to use the [`crypto` Web API](https://vercel.com/docs/functions/edge-middleware/edge-runtime#crypto-apis) in your Edge Middleware to redirect requests with a unique token.\n\nYour `middleware` file should be placed at the root of your project. If you are using the `src` directory, the file should be placed in the `src` directory.\n\n```\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n \nexport const config = {\n  matcher: '/',\n};\n \nexport function middleware(request: NextRequest) {\n  const token = crypto.randomUUID();\n  const url = request.nextUrl;\n \n  url.pathname = '/api/crypto';\n  url.searchParams.set('token', token);\n \n  return NextResponse.redirect(url);\n}\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Using the crypto Web API to redirect requests with a unique token",
  "description": "Learn how to use the Crypto Web API in your Edge Middleware.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/accounts/plans/pro/billing",
  "markdown": "# Billing FAQ for Pro Plan\n\nThe Vercel Pro plan is perfect for [Teams](https://vercel.com/docs/accounts/create-a-team) with collaboration requirements. This page covers frequently asked questions around payments, invoices, and billing on the Pro plan.\n\nSee the [pricing page](https://vercel.com/docs/pricing).\n\nAt the beginning of each [billing cycle](#what-is-a-billing-cycle). Each invoice charges for the upcoming billing cycle. It includes any additional usage that occurred during the previous billing cycle.\n\nCredit card only.\n\n*   American Express\n*   China UnionPay (CUP)\n*   Discover & Diners\n*   Japan Credit Bureau (JCB)\n*   Mastercard\n*   Visa\n\nYou can pay in any currency so long as the credit card provider allows charging in USD _after_ conversion.\n\nWhen an account goes overdue, some account features are restricted until you make a payment. This means:\n\n*   You can't create new Projects\n*   You can't add new team members\n*   You can't redeploy existing projects\n\nAfter 14 days, all deployments on your account will become paused unless a payment is successfully made.\n\nYou can be overdue when:\n\n*   The card attached to the team expires\n*   The bank declined the payment\n    *   Possible incorrect card details\n    *   The card is reported lost or stolen\n*   There was no card on record or a payment method was removed\n\nTo fix, you can add a new payment method to bring your account back online.\n\nNo, you cannot delay your payment.\n\nNo. Only monthly payments are supported. You can pay annually if you upgrade to an [Enterprise](https://vercel.com/pricing) plan. The Enterprise plan offers increased performance, collaboration, and security needs.\n\nYes. You will have to add a new payment method before you can remove the old one. To do this:\n\n1.  From your dashboard, select your team in the Scope selector\n2.  Go to the Settings tab and select Billing from the left nav\n3.  Scroll to Payment Method and select the Add new card button\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fscope-selector-light.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fscope-selector-dark.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nScope selector to switch between teams and accounts.\n\nYes. If you have a card on file, Vercel will charge it automatically. A receipt is then sent to you after your credit card gets charged. To view your past invoices:\n\n*   From your [dashboard](https://vercel.com/docs/dashboard-features), go to the Team's page from the scope selector\n*   Select the Settings tab followed by the Invoices link on the left\n\nIf you do not have a card on file, then you will have to add a payment method, and you will receive a receipt of payment.\n\nWe were unable to charge your payment method for your latest invoice. This likely means that the payment was not successfully processed with the credit card on your account profile.\n\nSome senders deduct a payment fee for transaction costs. This could mean that the amount charged on the invoice, does not reflect the amount due. To fix this make sure you add the transaction fee to the amount you send.\n\nSee [What happens when I cannot pay](#what-happens-when-i-cannot-pay) for more information.\n\nInvoice details must be accurate before adding a credit card at the end of a trial, or prior to the upcoming invoice being finalized. You can update your billing details on the [Billing settings page](https://vercel.com/account/billing).\n\nIf your account was migrated to Vercel's new billing system during a subscription period, you will receive two invoices connected to two charges on your account:\n\n*   The first invoice and charge includes costs for the previous billing cycle generated by the legacy billing system\n*   The second invoice and charge includes costs for the upcoming billing cycle generated by the new billing system\n\nYou will not have to pay anything extra.\n\nPro add-ons are billed in the subsequent billing cycle as a line item on your invoice.\n\n[Open a support ticket](https://vercel.com/help#issues) for your request and our team will assist you.\n\nPlease [open a support ticket](https://vercel.com/help#issues) and provide the following information:\n\n*   Invoice ID\n*   The account email\n*   The Team name\n*   If your query relates to the monthly plan, or usage billing\n\n[Vercel automatically mitigates against L3, L4, and L7 DDoS attacks](https://vercel.com/docs/security/ddos-mitigation) at the platform level for all plans. Vercel does not charge customers for traffic that gets blocked by the Firewall.\n\nUsage will be incurred for requests that are successfully served prior to us automatically mitigating the event. Usage will also be incurred for requests that are not recognized as a DDoS event, which may include bot and crawler traffic.\n\nFor an additional layer of security, we recommend that you enable [Attack Challenge Mode](https://vercel.com/docs/security/attack-challenge-mode) when you are under attack, which is available for free on all plans. While some malicious traffic is automatically challenged, enabling Attack Challenge Mode will challenge all traffic, including legitimate traffic to ensure that only real users can access your site.\n\nYou can monitor usage in the [Vercel Dashboard](https://vercel.com/dashboard) under the Usage tab, although you will [receive notifications](https://vercel.com/docs/dashboard-features/notifications#on-demand-usage-notifications) when nearing your usage limits.\n\nThe billing cycle refers to the period of time between invoices. The start date depends on when you created the account, or the account's trial phase ended. You can view your current and previous billing cycles on the Usage tab of your dashboard.\n\nThe second tab indicates the range of the billing cycle. During this period, you would get billed for:\n\n*   The amount of Team seats you have, and any addons you have purchased - Billed for the next 30 days of usage\n*   The usage consumed during the last billing cycle - Billed for the last 30 days of additional usage\n\nYou can't change a billing cycle or the dates on which you get billed. You can view the current billing cycle by going to the Settings tab and selecting Billing.\n\nAs a Team Owner, you can start a trial of the Pro plan when you first create an account. For more information, see the [Trials](https://vercel.com/docs/accounts/plans/pro/trials) guide.\n\nThere is a limit of two Pro plan trials per user account.",
  "title": "Billing FAQ for Pro Plan",
  "description": "This page covers frequently asked questions around payments, invoices, and billing on the Pro plan.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_BEFORE_INTERACTIVE",
  "markdown": "# NEXTJS\\_NO\\_BEFORE\\_INTERACTIVE\n\nRequires review of usage of the beforeInteractive strategy in Script (next/script) elements.\n\nConformance Rules\n\nThe default [loading strategy](https://nextjs.org/docs/basic-features/script#strategy) for [`next/script`](https://nextjs.org/docs/basic-features/script) is optimised for fast page loads.\n\nSetting the strategy to [`beforeInteractive`](https://nextjs.org/docs/api-reference/next/script#beforeinteractive) forces the script to load before any Next.js code and before hydration occurs, which delays the page from becoming interactive.\n\nFor further reading, see:\n\nThis rule will catch the following code.\n\n```\nimport Script from 'next/script';\n \nexport default function MyPage() {\n  return (\n    <Script src=\"https://example.com/script.js\" strategy=\"beforeInteractive\" />\n  );\n}\n```\n\nThis rule flags any usage of `beforeInteractive` for review. If approved, the exception should be added to the allowlist.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_NO_BEFORE_INTERACTIVE",
  "description": "Requires review of usage of the beforeInteractive strategy in Script (next/script) elements.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/TESTS_NO_CONDITIONAL_ASSERTIONS",
  "markdown": "# TESTS\\_NO\\_CONDITIONAL\\_ASSERTIONS\n\nConformance Rules\n\nWhen possible, conditional test assertions should be avoided as they can lead to false test passes if and when conditions are not evaluated as expected.\n\nIf you can't avoid using a condition in your test, you can satisfy this rule by using an `expect.assertions` statement.\n\nIn this abstract example, there are two potential points of failure:\n\n1.  The button could throw a ButtonError during `render(Button)`, causing the first (`try`) assertion to be skipped.\n2.  The `throwError()` function could fail to throw, causing the second (`catch`) assertion to be skipped.\n\n```\ndescribe('button', () => {\n  it('should render', () => {\n    try {\n      const button = render(Button);\n      expect(button).not.toBe(null);\n      button.throwAnError();\n    } catch (error) {\n      expect(error).toBeInstanceOf(ButtonError);\n    }\n  });\n});\n```\n\nThere are two ways to resolve this error:\n\n1.  Refactor the test code to ensure that assertions are no longer conditional.\n2.  Use `expect.assertions` to inform the test runner that it should fail if the required number of assertions were not called during the test.\n\nTaking our previous example, we can apply the second fix:\n\n```\ndescribe('button', () => {\n  it('should render', () => {\n    try {\n      const button = render(Button);\n      expect(button).not.toBe(null);\n      button.throwAnError();\n    } catch (error) {\n      expect(error).toBeInstanceOf(ButtonError);\n    }\n    expect.assertions(2);\n  });\n});\n```\n\nMost test frameworks and runners support `expect.assertions`, and this is the preferred approach to resolving this error if you can't refactor your test code.\n\nTo satisfy this rule, the test must not conditionally call `expect.assertions`. This rule doesn't count or report on the number of assertions.\n\nThere may be cases where you can't use `expect.assertions` (i.e. your test framework or runner doesn't support it), and refactoring the test code is not a viable solution. In those cases, you have the following options:\n\n1.  You can use allowlists to allow individual violations (see: [Conformance Allowlists](https://vercel.com/docs/workflow-collaboration/conformance/allowlist)).\n2.  You can disable this test (see: [Customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize)).\n\nThe default pattern matches the default patterns for Jest and Vitest, however you can provide your own patterns through the `paths` property.\n\nThe default configuration is:\n\n```\n{\n  \"configuration\": [\n    \"testPatterns\": [\"**/unit-tests/**/*.{js,jsx}\"]\n  ]\n}\n```",
  "title": "TESTS_NO_CONDITIONAL_ASSERTIONS",
  "description": "Requires that assertions are not conditional, or that expect.assertions is used.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/projects/domains/managing-nameservers",
  "markdown": "# Managing Nameservers\n\n[Nameservers](https://vercel.com/docs/projects/domains/working-with-nameservers) are used to resolve domain names to IP addresses. For domains with Vercel as the registrar, nameservers can be viewed, edited, and reset by selecting the domain from the Domains tab on either your [Account Settings](https://vercel.com/account/domains) page (account-scoped domains) or your team's dashboard.\n\nSometimes, however, you may need to delegate nameserver management to another host. For domains registered with Vercel, you can [add custom nameservers](#add-custom-nameservers) to your Vercel-hosted domain, directly from the dashboard, allowing for delegation to other DNS providers. You can add up to four nameservers at once, and [revert to your previous settings](#restore-original-nameservers) if necessary.\n\nFor domains that are not registered with Vercel, you can change the nameservers directly from the domain registrar's dashboard.\n\nNameserver changes can take up to 48 hours to complete due to [DNS propagation](https://ns1.com/resources/dns-propagation).\n\n1.  Ensure your account or team is selected in the scope selector\n    \n2.  Navigate to the Domains tab and select the domain\n    \n3.  On your domain's settings page, under Nameservers, click the Edit button:\n    \n    ![Nameservers section showing the Edit button.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fnameservers.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Nameservers section showing the Edit button.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fnameservers-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Nameservers section showing the Edit button.\n    \n4.  In the Edit Nameservers modal, add the new nameservers:\n    \n    ![Adding custom nameservers on the Edit Nameservers modal.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fedit-nameservers.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Adding custom nameservers on the Edit Nameservers modal.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fedit-nameservers-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Adding custom nameservers on the Edit Nameservers modal.\n    \n\nBefore using Vercel's nameservers, you should ensure that you own the domain.\n\n1.  Ensure your account or team is selected in the scope selector\n2.  Navigate to the Domains tab and select the domain\n3.  On your domain's settings page, under DNS Records, click the Enable Vercel DNS button to opt in\n4.  You then must configure the following nameservers from the domain registrar's dashboard\n\n1.  Ensure your account or team is selected in the scope selector\n2.  Navigate to the Domains tab and select the domain\n3.  Under Nameservers, select the Restore Original Nameservers button\n4.  On the Restore Original Nameservers modal confirm the nameservers that will be present after the change\n\nVercel will present a message when you have successfully submitted the nameserver change.\n\n![Restoring original nameservers by clicking the Restore button.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Frestore-original-nameservers.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Restoring original nameservers by clicking the Restore button.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Frestore-original-nameservers-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nRestoring original nameservers by clicking the Restore button.",
  "title": "Managing Nameservers",
  "description": "Learn how to add custom nameservers and restore original nameservers for your domains on Vercel with this guide.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/recipes/using-svg-image",
  "markdown": "# Using an SVG image in your OG image\n\nYou can use the following code sample to explore using parameters and different content types with [`next/og`](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx). To learn more about OG Image Generation, see [Open Graph Image Generation](https://vercel.com/docs/functions/og-image-generation).\n\nCreate an api route with `route.tsx` in `/app/api/og/` and paste the following code:\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nexport async function GET() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          fontSize: 40,\n          color: 'black',\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          textAlign: 'center',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <svg fill=\"black\" viewBox=\"0 0 284 65\">\n          <path d=\"M141.68 16.25c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zm117.14-14.5c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zm-39.03 3.5c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9v-46h9zM37.59.25l36.95 64H.64l36.95-64zm92.38 5l-27.71 48-27.71-48h10.39l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10v14.8h-9v-34h9v9.2c0-5.08 5.91-9.2 13.2-9.2z\" />\n        </svg>\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 630,\n    },\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nPreview the OG route locally by running the following command:\n\nThen, browse to `http://localhost:3000/api/og`. You will see the following image:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-svg.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage generated using the Vercel logo SVG",
  "title": "Using an SVG image in your OG image",
  "description": "Learn how to use SVG embedded content to generate your OG images.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/speed-insights/api",
  "markdown": "# Speed Insights Intake API\n\nVercel Speed Insights supports Next.js, Nuxt.js, and Gatsby with zero configuration through build plugins. You can use Speed Insights with any frontend framework or project through the Speed Insights API as shown below.\n\n#### POST /v1/vitals\n\nSend web vitals data to the Vercel Speed Insights API.\n\nTo use the Speed Insights API, you'll need to retrieve the analytics ID for your Vercel project. This value is exposed during the build and can be accessed by `process.env.VERCEL_ANALYTICS_ID` inside Node.js.\n\nInside your framework or Node.js script, you can then use this value in the `body` of your request to the Vercel Speed Insights API.\n\n`vercel pull` does not pull `VERCEL_ANALYTICS_ID` as the Vercel Analytics ID environment variable is inlined during the build process. It is not part of your project Environment Variables, which can be pulled locally using Vercel CLI.\n\nYou can view an example of the following code implemented inside our [Create React App](https://github.com/vercel/vercel/tree/main/examples/create-react-app) and [SvelteKit](https://github.com/vercel/vercel/tree/main/examples/sveltekit) starters.\n\n```\nimport { getCLS, getFCP, getFID, getLCP, getTTFB } from 'web-vitals';\n \nconst vitalsUrl = 'https://vitals.vercel-analytics.com/v1/vitals';\n \nfunction getConnectionSpeed() {\n  return 'connection' in navigator &&\n    navigator['connection'] &&\n    'effectiveType' in navigator['connection']\n    ? navigator['connection']['effectiveType']\n    : '';\n}\n \nfunction sendToAnalytics(metric, options) {\n  const page = Object.entries(options.params).reduce(\n    (acc, [key, value]) => acc.replace(value, `[${key}]`),\n    options.path,\n  );\n \n  const body = {\n    dsn: options.analyticsId, // qPgJqYH9LQX5o31Ormk8iWhCxZO\n    id: metric.id, // v2-1653884975443-1839479248192\n    page, // /blog/[slug]\n    href: location.href, // https://{my-example-app-name-here}/blog/my-test\n    event_name: metric.name, // TTFB\n    value: metric.value.toString(), // 60.20000000298023\n    speed: getConnectionSpeed(), // 4g\n  };\n \n  if (options.debug) {\n    console.log('[Analytics]', metric.name, JSON.stringify(body, null, 2));\n  }\n \n  const blob = new Blob([new URLSearchParams(body).toString()], {\n    // This content type is necessary for `sendBeacon`\n    type: 'application/x-www-form-urlencoded',\n  });\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(vitalsUrl, blob);\n  } else\n    fetch(vitalsUrl, {\n      body: blob,\n      method: 'POST',\n      credentials: 'omit',\n      keepalive: true,\n    });\n}\n \nexport function webVitals(options) {\n  try {\n    getFID((metric) => sendToAnalytics(metric, options));\n    getTTFB((metric) => sendToAnalytics(metric, options));\n    getLCP((metric) => sendToAnalytics(metric, options));\n    getCLS((metric) => sendToAnalytics(metric, options));\n    getFCP((metric) => sendToAnalytics(metric, options));\n  } catch (err) {\n    console.error('[Analytics]', err);\n  }\n}\n```",
  "title": "Speed Insights Intake API",
  "description": "Learn how to use Speed Insights in Vercel with any frontend framework or project through the Speed Insights intake API.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/storage/vercel-kv/configuring-a-database",
  "markdown": null,
  "title": "",
  "description": null,
  "languageCode": null
},
{
  "url": "https://vercel.com/docs/recipes/sending-sample-to-speed-insights",
  "markdown": "# Sending a sample of events to Speed Insights\n\nLearn how to send a sample of your data to Speed insights.\n\nBy default, all events are sent to Speed Insights.\n\nTo send only a sample of your data, you can add the Speed Insights component with the [`sampleRate`](https://vercel.com/docs/speed-insights/package#samplerate) prop to your app's root layout. The [`sampleRate`](https://vercel.com/docs/speed-insights/package#samplerate) prop accepts a number between 0 and 1, where 0 is 0% and 1 is 100%:\n\n```\nimport { SpeedInsights } from '@vercel/speed-insights/next';\n \nexport default function RootLayout({ children, }: {children: React.ReactNode;}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Next.js</title>\n      </head>\n      <body>\n        {children}\n        <SpeedInsights sampleRate={0.5} />\n      </body>\n    </html>\n  );\n}\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "Sending a sample of events to Speed Insights",
  "description": "Learn how to send a sample of your data to Speed insights.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/vercel-toolbar/in-production-and-localhost/add-to-localhost",
  "markdown": "# Add the Vercel Toolbar to your local environment\n\nTo enable the toolbar in your local environment, add it to your project using the [`@vercel/toolbar`](https://www.npmjs.com/package/@vercel/toolbar) package, or with an injection script.\n\n1.  Install the package using the following command:\n    \n    Then link your local project to your Vercel project with the [`vercel link`](https://vercel.com/docs/cli/link) command using [Vercel CLI](https://vercel.com/docs/cli).\n    \n    ```\n    vercel link [path-to-directory]\n    ```\n    \n2.  To use the Vercel Toolbar locally in a Next.js project, define `withVercelToolbar` in your `next.config.js` file and export it, as shown below:\n    \n    ```\n    /** @type {import('next').NextConfig} */\n    const nextConfig = {\n      // Config options here\n    };\n     \n    const withVercelToolbar = require('@vercel/toolbar/plugins/next')();\n    // Instead of module.exports = nextConfig, do this:\n    module.exports = withVercelToolbar(nextConfig);\n    ```\n    \n    Then add the following code to your `layout.tsx` or `layout.jsx` file:\n    \n    ```\n    import { VercelToolbar } from '@vercel/toolbar/next';\n     \n    export default function RootLayout({\n      children,\n    }: {\n      children: React.ReactNode;\n    }) {\n      const shouldInjectToolbar = process.env.NODE_ENV === 'development';\n      return (\n        <html lang=\"en\">\n          <body>\n            {children}\n            {shouldInjectToolbar && <VercelToolbar />}\n          </body>\n        </html>\n      );\n    }\n    ```",
  "title": "Add the Vercel Toolbar to your local environment",
  "description": "Learn how to use the Vercel Toolbar in your local environment.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags",
  "markdown": "# Toolbar Flags Reference\n\nFeature flags have three main concepts: flag values, flag definitions, and the API Endpoint. Before supporting feature flag overrides, you should familiarise yourself these concepts.\n\nIf you set either a feature flag's value or definition, the Vercel Toolbar will display that flag.\n\nFlag definitions are metadata for your feature flags, which communicate:\n\n*   Name\n*   URL for where to manage a flag\n*   Description\n*   Possible values and their (optional) labels\n\nSee [Supporting feature flags](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flag-definitions) for more information.\n\nA definition can never communicate the value of a flag as they load independently from [flag values](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flag-values).\n\n```\n{\n  \"bannerFlag\": {\n    \"origin\": \"https://example.com/flag/bannerFlag\",\n    \"description\": \"Determines whether the banner is shown\",\n    \"options\": [\n      { \"value\": true, \"label\": \"on\" },\n      { \"value\": false, \"label\": \"off\" }\n    ]\n  }\n}\n```\n\nThis is how Vercel Toolbar shows flag definitions:\n\n![Feature Flag in Vercel Toolbar](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1715057622%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Ffeature-flags%2Fbanner-light.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Feature Flag in Vercel Toolbar](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1715057622%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Ffeature-flags%2Fbanner-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nFeature Flag in Vercel Toolbar\n\nThis is the actual value that a feature flag resolves to by default. Vercel Toolbar will display the value for convenience. Any JSON-serializable values are supported. Vercel Toolbar combines these values with any definitions, if they are present.\n\nSee [Supporting feature flags](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flag-values) for detailed explanations.\n\n```\n{ \"bannerFlag\": true, \"docsFlag\": false }\n```\n\nThis is how Vercel Toolbar shows flag values:\n\n![Feature Flag in Vercel Toolbar](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1715057622%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Ffeature-flags%2Fflag-values-light.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Feature Flag in Vercel Toolbar](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1715057622%2Fdocs-assets%2Fstatic%2Fdocs%2Fworkflow-collaboration%2Ffeature-flags%2Fflag-values-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nFeature Flag in Vercel Toolbar\n\nIf you have set the [`FLAGS_SECRET`](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flags_secret-environment-variable) environment variable in your project, Vercel Toolbar will request your application's [`/.well-known/vercel/flags`](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flags-api-endpoint) endpoint. This endpoint should return a configuration for the toolbar that includes the flag definitions.\n\nThis secret gates access to the Flags API endpoint, and optionally for signing and encrypting feature flag overrides set by Vercel Toolbar. Use [`verifyAccess`](https://vercel.com/docs/workflow-collaboration/feature-flags/vercel-flags#verifyaccess) to ensure the request is authenticated in your [Flags API endpoint](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flags-api-endpoint).\n\nThe `FLAGS_SECRET` value must have a specific length (32 random bytes encoded in base64) to work as an encryption key. You can create one using node:\n\n```\nnode -e \"console.log(crypto.randomBytes(32).toString('base64url'))\"\n```\n\nIn your local environment, pull your environment variables with `vercel env pull` to make them available to your project.\n\nAdding the environment variable locally is not enough. Vercel Toolbar reads it from your project settings in the Vercel dashboard.\n\nA basic endpoint should call `verifyAccess` to ensure the request to load flags originates from Vercel Toolbar. This will check the `Authorization` header Vercel Toolbar sends. This header contains proof that whoever made this request has access to `FLAGS_SECRET`, but the secret itself is not sent over the network. Return status code 401 and no response body when the `verifyAccess` check fails.\n\nWhen the `verifyAccess` check was successful you can return the feature flag definitions and other configuration as JSON.\n\n```\nimport { NextResponse, type NextRequest } from 'next/server';\nimport { verifyAccess, type ApiData } from '@vercel/flags';\n \nexport async function GET(request: NextRequest) {\n  const access = await verifyAccess(request.headers.get('Authorization'));\n  if (!access) return NextResponse.json(null, { status: 401 });\n \n  return NextResponse.json<ApiData>({\n    definitions: {\n      newFeature: {\n        description: 'Controls whether the new feature is visible',\n        origin: 'https://example.com/#new-feature',\n        options: [\n          { value: false, label: 'Off' },\n          { value: true, label: 'On' },\n        ],\n      },\n    },\n  });\n}\n```\n\nThe JSON response must have the following shape\n\n```\ntype ApiData = {\n  definitions: Record<\n    string,\n    {\n      description?: string;\n      origin?: string;\n      options?: { value: any; label?: string }[];\n    }\n  >;\n  hints?: { key: string; text: string }[];\n  overrideEncryptionMode?: 'plaintext' | 'encrypted';\n};\n```\n\nThese are your application's feature flags. You can return the following data for each definition:\n\n*   `description` _(optional)_: A description of what this feature flag is for.\n*   `origin` _(optional)_: The URL where feature flag is managed. This usually points to the flag details page in your feature flag provider.\n*   `options` _(optional)_: An array of `{ value: any, label?: string }`. These options will be available as overrides in Vercel Toolbar.\n\nYou can optionally tell Vercel Toolbar about the actual value flags resolved to. The Flags API Endpoint can not return this as the value might differ for each request. See [Flag values](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flag-values) instead.\n\nIn some cases you might need to fetch your feature flag definitions from your feature flag provider before you can return them from the Flags API Endpoint.\n\nIn case this request fails you can use `hints`. Any hints returned will show up in the UI.\n\nThis is useful when you are fetching your feature flags from multiple sources. In case one request fails you might still want to show the remaining flags on a best effort basis, while also displaying a hint that fetching a specific source failed. You can return `definitions` and `hints` simultaneously to do so.\n\nWhenever you create an override Vercel Toolbar will set a cookie called `vercel-flag-overrides`.\n\nThe `overrideEncryptionMode` setting controls the value of the cookie:\n\n*   `plaintext`: The cookie will contain the overrides as plain JSON. Be careful not to trust those overrides as users can manipulate the value easily.\n*   `encrypted`: Vercel Toolbar will encrypt overrides using the `FLAGS_SECRET` before storing them in the cookie. This prevents manipulation, but requries decrypting them on your end before usage.\n\nWe highly recommend using `encrypted` mode as it protects against manipulation.\n\nVercel Toolbar uses a [MutationObserver](https://developer.mozilla.org/docs/Web/API/MutationObserver) to find all script tags with `data-flag-values` and `data-flag-definitions` attributes. Any changes to content get detected by the toolbar.\n\nYour Flags API Endpoint should return information about your application's feature flags like their key, description, origin, and available options.\n\nHowever the Flags API Endpoint can not return the value a flag evaluated to, since this value might depend on the request which rendered the page initially.\n\nThe requested page can embed script tags to communicate the value of each flag used to render it.\n\nIf you are using React or Next.js, use the [`FlagValues`](https://vercel.com/docs/workflow-collaboration/feature-flags/vercel-flags#flagvalues) component.\n\n```\nimport { FlagValues } from '@vercel/flags/react';\n \nexport function Page() {\n  return (\n    <div>\n      {/* Some other content */}\n      <FlagValues values={{ exampleFlag: true }} />\n    </div>\n  );\n}\n```\n\nIf you are using another framework or no framework at all you can render these script tags manually. The expected shape is:\n\n```\ntype FlagValues = Record<string, any>;\n```\n\nExample communicating feature flag values manually through the DOM:\n\n```\n<script type=\"application/json\" data-flag-definitions>\n  {\n    \"showBanner\": true,\n    \"showAds\": false,\n    \"pricing\": 5\n  }\n</script>\n```\n\nUsing `JSON.stringify` within script tags leads to [XSS vulnerabilities](https://owasp.org/www-community/attacks/xss/). Use `safeJsonStringify` exported by `@vercel/flags` to stringify safely.\n\nVercel Toolbar will combine these values with the definitions returned through the Flags API Endpoint.\n\nWe strongly recommend communicating your feature flag definitions through the [Flags API Endpoint](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#flags-api-endpoint).\n\nIn rare cases it can be useful to communicate them through the HTML response instead. Vercel Toolbar will pick up any script tags included in the DOM which have a `data-flag-definitions` attribute.\n\nIf you are using React or Next.js, use the [`FlagsDefinitions`](https://vercel.com/docs/workflow-collaboration/feature-flags/vercel-flags#flagdefinitions) component. If you are using another framework or no framework at all you can render these script tags manually. The expected shape is:\n\n```\ntype FlagDefinitionsType = Record<\n  string,\n  {\n    options?: {\n      value: any;\n      label?: string;\n    }[];\n    origin?: string;\n    description?: string;\n  }\n>;\n```\n\nThis example shows how to communicate a feature flag definition through the DOM:\n\n```\n<script type=\"application/json\" data-flag-definitions>\n  {\n    \"showBanner\": {\n      \"description\": \"Shows or hide the banner\",\n      \"origin\": \"https://example.com/showBanner\",\n      \"options\": [\n        { \"value\": false, \"label\": \"Hide\" },\n        { \"value\": true, \"label\": \"Show\" }\n      ]\n    }\n  }\n</script>\n```\n\nYou can also encrypt the definitions before emitting them to prevent leaking your feature flags through the DOM.\n\n```\nimport { safeJsonStringify } from '@vercel/flags';\n \n<script type=\"application/json\" data-flag-definitions>\n  ${safeJsonStringify(definitions)}\n</script>;\n```\n\nUsing `JSON.stringify` within script tags leads to [XSS vulnerabilities](https://owasp.org/www-community/attacks/xss/). Use `safeJsonStringify` exported by `@vercel/flags` to stringify safely.\n\nVercel Toolbar sets a cookie called `vercel-flag-overrides` whenever you apply overrides.\n\nDepending on the [`overrideEncryptionMode`](https://vercel.com/docs/workflow-collaboration/feature-flags/supporting-feature-flags#override-mode) setting, the cookie value will either be plain JSON or encrypted JSON.\n\nRead this cookie in your applications to make your application respect the overrides set by Vercel Toolbar.",
  "title": "Toolbar Flags Reference",
  "description": "In-depth reference for configuring Vercel Toolbar's feature flag support",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/feature-flags/nextjs-flags-reference",
  "markdown": "# @vercel/flags/next Reference\n\nThe flags pattern and precomputed flags pattern exported from `@vercel/flags/next` are experimental. We are still actively researching and have further iterations planned. These exports are not covered by semantic versioning as indicated by the `unstable_` prefix.\n\nThe `@vercel/flags/next` submodule implements the [Feature Flags pattern](https://vercel.com/docs/workflow-collaboration/feature-flags/feature-flags-pattern#flags-pattern) for Next.js App Router.\n\nTo learn more about the Flags pattern and the precomputed Flags pattern:\n\nDescription: Declares a feature flag\n\nA feature flag declared this way will automatically respect overrides set by Vercel Toolbar and integrate with Runtime Logs, Web Analytics, and more.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `key` | `string` | Key of the feature flag. |\n| `decide` | `function` | Resolves the value of the feature flag. |\n| `defaultValue` (Optional) | `any` | Fallback value in case the `decide` function returns `undefined` or throws an error. |\n| `description` (Optional) | `string` | Description of the feature flag. |\n| `origin` (Optional) | `string` | The URL where this feature flag can be managed. |\n| `options` (Optional) | `{ label?: string, value: any }[]` | Possible values a feature flag can resolve to, which are displayed in Vercel Toolbar. |\n\nThe `key`, `description`, `origin`, and `options` appear in Vercel Toolbar.\n\n```\nexport const showSummerSale = flag<boolean>({\n  key: 'summer-sale',\n  async decide() {\n    return false;\n  },\n  origin: 'https://example.com/flags/summer-sale/',\n  description: 'Show Summer Holiday Sale Banner, 20% off',\n  defaultValue: false,\n  options: [\n    // options are not necessary for boolean flags, but we customize their labels here\n    { value: false, label: 'Hide' },\n    { value: true, label: 'Show' },\n  ],\n});\n```\n\nDescription: Turns flags declared using `unstable_flag` into Vercel Toolbar compatible definitions.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flags` | `Record<string, Flag>` | A record where the values are feature flags. The keys are not used. |\n\nThese APIs are relevant for [precomputing feature flags](https://vercel.com/docs/workflow-collaboration/feature-flags/flags-pattern-nextjs#precomputing-flags).\n\nDescription: Evaluates multiple feature flags. Returns their values encoded to a single signed string.\n\nThis call is a shorthand for calling `unstable_evaluate` and `unstable_serialize` manually.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flags` | `function[]` | Flags |\n| `code` | `string` | Precomputation code generated by the original `precompute` call. |\n\nDescription: Evaluates multiple feature flags and returns their values.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flags` | `function[]` | An array of flags declared using `unstable_flag`. |\n| `context` (Optional) | `any` | A value which will be made available through `unstable_getPrecomputationContext` from within a flag's `decide` function. |\n\n```\nconst values = await unstable_evaluate(precomputeFlags, context);\n```\n\nDescription: Evaluates multiple feature flags and returns their values.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flags` | `function[]` | An array of flags declared using `unstable_flag`. |\n| `context` (Optional) | `any` | A value which will be made available through `unstable_getPrecomputationContext` from within a flag's `decide` function. |\n\n```\nconst values = await unstable_evaluate(precomputeFlags, context);\n```\n\nDescription: Turns evaluated feature flags into their serialized representation.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flags` | `function[]` | Feature Flags to be serialized. |\n| `values` | `unknown[]` | The value each flag declared in `flags` resolved to. |\n| `secret` (Optional) | `string` | The secret used to sign the returned representation. |\n\n```\nconst values = await unstable_precompute(precomputeFlags, context);\nconst code = await unstable_serialize(precomputeFlags, values);\n```\n\nNote that `unstable_serialize` compresses to a tiny format, with only two bytes per feature flag and a few bytes overhead for JWS signature.\n\nThe underlying algorithm basically has special values for boolean values and `null`. If your feature flag can return non-boolean values, it's advised to declare them in `options` when declaring the flag using `unstable_flag`. That way this serialization can store the index of the matched option instead of its values, which further shortens the emitted.\n\nDescription: Retrieves the value of one or multiple feature flags from the precomputation and returns them as an array.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flag` | `function \\| function[]` | A flag or an array of flags declared using `unstable_flag` whose values should be extracted from the precomputation . |\n| `precomputeFlags` | `function[]` | Flags used when `precompute` was called and created the precomputation code. |\n| `code` | `string` | Precomputation code generated by the original `precompute` call. |\n\n```\nconst precomputeFlags = [\n  showSummerBannerFlag,\n  showFreeDeliveryBannerFlag,\n  countryFlag,\n];\n \nconst code = await unstable_precompute(precomputeFlags);\n \nconst [showSummerBanner, showFreeDeliveryBanner] =\n  await unstable_getPrecomputed(\n    [showSummerBannerFlag, showFreeDeliveryBannerFlag],\n    precomputeFlags,\n    code,\n  );\n```\n\nIt is recommended to call the feature flag directly, for example:\n\n```\nconst showSummerSale = unstable_flag({\n  key: 'summer-sale',\n  decide: () => false,\n});\n \nconst precomputeFlags = [\n  showSummerSale,\n  /*...*/\n];\n \nconst code = await precompute(precomputeFlags);\n \n// This will not actually invoke `showSummerSale`'s `decide` function, it will just read the result.\nconst sale = await showSummerSale(code, precomputeFlags);\n```\n\nDescription: Retrieves the value of all feature flags and returns them as a record. Keys will be the `key` passed to when declaring flags using `unstable_flag`. Returns `Record<string, unknown>`.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flags` | `function[]` | Flags |\n| `code` | `string` | Precomputation code generated by the original `precompute` call. |\n\nReads the second context supplied by `unstable_precompute(flags, context)` or `unstable_evaluate(flags, context)`.\n\nWhen invoking flags using `precompute` an optional second argument can be supplied as context. This would typically forward a feature flag client or other information which needs flow from middleware into a feature flag's `decide` function.\n\n```\n// middleware.ts\n// any context, in this example we're forwarding a customer's plan\nconst context = { plan: 'pro' };\nawait unstable_precompute(flags, context);\n \n// flags.ts\nconst plan = unstable_flag({\n  key: 'plan',\n  decide: () => {\n    // this function now has access to the context supplied earlier\n    const context = unstable_getPrecomputationContext();\n    return context.plan;\n  },\n});\n```\n\nDescription: Calculates all precomputations of the options of the provided flags.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `flags` | `function[]` | Flags |\n| `filter` (Optional) | `function` | This function is called with every possible precomputation of the flag's options. Return `true` to keep the option. |\n| `secret` (Optional) | `string` | The secret used to sign the generated code. Defaults to `process.env.FLAGS_SECRET` |\n\nExample usage in `generateStaticParams`:\n\n```\nexport async function generateStaticParams() {\n  const codes = await unstable_generatePermutations(precomputeFlags);\n  return codes.map((code) => ({ code }));\n}\n```",
  "title": "@vercel/flags/next Reference",
  "description": "The reference for the @vercel/flags/next submodule",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/vercel-toolbar/in-production-and-localhost/add-to-production",
  "markdown": "# Add the Vercel Toolbar to your production environment\n\nTo enable the toolbar in your production environment, you can add it using the Vercel Chrome Extension, the command menu, or the `@vercel/toolbar` package.\n\nYou can add the Vercel Toolbar to your production environment using the [Vercel Chrome Extension](https://chromewebstore.google.com/detail/vercel/lahhiofdgnbcgmemekkmjnpifojdaelb). The extension allows you to access the toolbar on any website hosted on Vercel.\n\nTo add the Vercel Toolbar to your production environment:\n\n1.  Install the [Vercel Chrome Extension](https://chromewebstore.google.com/detail/vercel/lahhiofdgnbcgmemekkmjnpifojdaelb) from the Chrome Web Store\n2.  Ensure that you are logged in to your Vercel account on vercel.com. You must be signed in for the extension to know which domains you own\n3.  Ensure that you have deployed to production. Older deployments do not support injection through the browser extension\n\nTo enable the toolbar on production environments from the command menu:\n\n1.  Open a preview deployment of your project\n2.  Select the menu icon in the toolbar\n3.  Scroll down to Enable Vercel Toolbar in Production and select it\n4.  Choose the domain you want to enable the toolbar on\n\nTo add the Vercel Toolbar to your development or production environments, follow the steps below:\n\n1.  Install the package using the following command:\n    \n    Then link your local project to your Vercel project with the [`vercel link`](https://vercel.com/docs/cli/link) command using [Vercel CLI](https://vercel.com/docs/cli).\n    \n    ```\n    vercel link [path-to-directory]\n    ```\n    \n2.  Before using the Vercel Toolbar in a production deployment Vercel recommends conditionally injecting the toolbar. Otherwise, all visitors will be prompted to log in when visiting your site.\n    \n    The following example demonstrates code that will show the Vercel Toolbar on a production deployment.\n    \n    ```\n    'use client';\n    import { VercelToolbar } from '@vercel/toolbar/next';\n    import { useIsEmployee } from 'lib/auth'; // Your auth library\n     \n    export function StaffToolbar() {\n      const isEmployee = useIsEmployee();\n      return isEmployee ? <VercelToolbar /> : null;\n    }\n    ```\n    \n    ```\n    import { Suspense } from 'react';\n    import { StaffToolbar } from '@components/staff-toolbar';\n     \n    export default function RootLayout({\n      children,\n    }: {\n      children: React.ReactNode;\n    }) {\n      return (\n        <html lang=\"en\">\n          <body>\n            {children}\n            <Suspense>\n              <StaffToolbar />\n            </Suspense>\n          </body>\n        </html>\n      );\n    }\n    ```\n    \n3.  Unlike comments on preview deployments, alerts for new comments won't be sent to a specific user by default. Vercel recommends [linking your project to Slack with the integration](https://vercel.com/integrations/slack), or directly mentioning someone when starting a new comment thread in production to ensure new comments are seen",
  "title": "Add the Vercel Toolbar to your production environment",
  "description": "Learn how to add the Vercel Toolbar to your production environment to enable commenting and collaboration.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_MODULARIZE_IMPORTS",
  "markdown": "# NEXTJS\\_MISSING\\_MODULARIZE\\_IMPORTS\n\nConformance Rules\n\nThis rule has been deprecated as of version [1.10.0](https://vercel.com/docs/workflow-collaboration/conformance/changelog#1.10.0)and will be removed in 1.10.0.\n\n`modularizeImports` is a feature of Next 13 that can reduce dev compilation times when importing packages that are exported as barrel files. Barrel files are convenient ways to export code from a package from a single file to make it straightforward to import any of the code from the package. However, since they export a lot of code from the same file, importing these packages can cause tools to do a lot of additional work analyzing files that are unused in the application.\n\nTo fix this, you can add a `modularizeImports` config to `next.config.js` for the package that uses barrel files. For example:\n\n```\nmodularizeImports: {\n  lodash: {\n    transform: 'lodash/{{member}}';\n  }\n}\n```\n\nThe exact format of the transform may differ by package, so double check how the package uses barrel files first.\n\nSee the [Next.js docs](https://nextjs.org/docs/architecture/nextjs-compiler#modularize-imports) for more information.\n\nYou can also specify required `modularizeImports` config for your own packages.\n\nIn your `conformance.config.jsonc` file, add:\n\n```\nNEXTJS_MISSING_MODULARIZE_IMPORTS: {\n  requiredModularizeImports: [\n    {\n      moduleDependency: 'your-package-name',\n      requiredConfig: {\n        transform: 'your-package-name/{{member}}',\n      },\n    },\n  ];\n}\n```\n\nThis will require that any workspace in your monorepo that uses the `your-package-name` package must use the provided `modularizeImports` config in their `next.config.js` file.\n\nSee [Customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize) for more information.",
  "title": "NEXTJS_MISSING_MODULARIZE_IMPORTS",
  "description": "modularizeImports can improve dev compilation speed for packages that use barrel files.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_NEXT13_TYPESCRIPT_PLUGIN",
  "markdown": "# NEXTJS\\_MISSING\\_NEXT13\\_TYPESCRIPT\\_PLUGIN\n\nApplications using Next 13 should use the \"next\" TypeScript plugin.\n\nConformance Rules\n\nNext 13 introduced a TypeScript plugin to provide richer information for Next.js applications using TypeScript. See the [Next.js docs](https://nextjs.org/docs/app/building-your-application/configuring/typescript#using-the-typescript-plugin) for more information.\n\nAdd the following to `plugins` in the `compilerOptions` of your `tsconfig.json` file.\n\n```\n  \"compilerOptions\": {\n    \"plugins\": [{ \"name\": \"next\" }]\n  }\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_MISSING_NEXT13_TYPESCRIPT_PLUGIN",
  "description": "Applications using Next 13 should use the \"next\" TypeScript plugin.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_OPTIMIZE_PACKAGE_IMPORTS",
  "markdown": "# NEXTJS\\_MISSING\\_OPTIMIZE\\_PACKAGE\\_IMPORTS\n\nConformance Rules\n\n[`optimizePackageImports`](https://nextjs.org/docs/pages/api-reference/next-config-js/optimizePackageImports) is a feature added in Next 13.5 that improves compilation speed when importing packages that use barrel exports and export many named exports. This replaces the [`modularizeImports`](https://nextjs.org/docs/architecture/nextjs-compiler#modularize-imports) configuration option as it optimizes many of the most popular open source libraries automatically.\n\nBarrel files make the process of exporting code from a package convenient by allowing all the code to be exported from a single file. This makes it easier to import any part of the package into your application. However, since they export a lot of code from the same file, importing these packages can cause tools to do additional work analyzing files that are unused in the application.\n\nFor further reading, see:\n\nAs of Next.js 14.2.3, this configuration option is still experimental. Check the Next.js documentation for the latest information here: [`optimizePackageImports`](https://nextjs.org/docs/pages/api-reference/next-config-js/optimizePackageImports).\n\nTo fix this, you can add a `modularizeImports` config to `next.config.js` for the package that uses barrel files. For example:\n\n```\nexperimental: {\n  optimizePackageImports: ['geist/components'];\n}\n```",
  "title": "NEXTJS_MISSING_OPTIMIZE_PACKAGE_IMPORTS",
  "description": "optimizePackageImports improves compilation speed for packages that use barrel files or export many modules.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_LAYOUT",
  "markdown": "# NEXTJS\\_NO\\_ASYNC\\_LAYOUT\n\nConformance Rules\n\nThis rule is in preview, please give us your feedback!\n\n  \n\nThis rule is available from version 1.1.0.\n\nThis rule examines all Next.js app router layout files and their transitive dependencies to ensure none are asynchronous or return new Promise instances. Even if the layout component itself is not asynchronous, importing an asynchronous component somewhere in the layout's dependency tree can silently cause the layout to render dynamically. This can cause a blank layout to be displayed to the user while Next.js waits for long promises to resolve.\n\nBy default, this rule is disabled. To enable it, refer to [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nFor further reading, these resources may be helpful:\n\n*   [Loading UI and Streaming in Next.js](https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming): This guide discusses strategies for loading UI components and streaming content in Next.js applications.\n*   [Next.js Layout File Conventions](https://nextjs.org/docs/app/api-reference/file-conventions/layout): This document provides an overview of file conventions related to layout in Next.js.\n*   [Next.js Parallel Routes](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes): This guide discusses how to use parallel routes to improve performance in Next.js applications.\n*   [Next.js Route Segment Config](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic): This document provides an overview of the `dynamic` export and how it can be used to force the dynamic behaviour of a layout.\n\nThis rule will catch the following code.\n\n```\nexport default async function RootLayout() {\n  const data = await fetch();\n  return <div>{data}</div>;\n}\n```\n\n```\nasync function AuthButton() {\n  const isAuthorized = await auth();\n  return <div>{isAuthorized ? 'Authorized' : 'Unauthorized'}</div>;\n}\n \nexport default function Layout() {\n  return <AuthButton />;\n}\n```\n\nYou can fix this error by wrapping your async component with a `<Suspense/>` boundary that has a fallback UI to indicate to Next.js that it should use the fallback until the promise resolves.\n\nYou can also move the asynchronous component to a [parallel route](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes) which allows Next.js to render one or more pages within the same layout.\n\nAlternatively, you can manually force the dynamic behaviour of the layout by exporting a `dynamic` value. This rule will only error if `dynamic` is not specified or is set to `auto`. Read more [here](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic).\n\n```\nexport const dynamic = 'force-static';\n \nexport default async function RootLayout() {\n  const data = await fetch();\n  return <div>{data}</div>;\n}\n```",
  "title": "NEXTJS_NO_ASYNC_LAYOUT",
  "description": "Ensures that the exported Next.js `layout` component and its transitive dependencies are not asynchronous, as that can block the rendering of the layout and the rest of the page.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/dashboard-overview/catalog",
  "markdown": "# Catalog\n\nConformance allows you to expose metadata related to your code on the Conformance overview page so that other team members can discover information such as contact info, issue trackers, on-call rotations, and monitoring dashboards. You define these files next to the code that they represent.\n\nThe `.vercel.catalog.json` file allows you to configure metadata that will be shown on the Conformance overview in the Vercel dashboard. The available fields include:\n\n*   [contact](#contact)\n*   [help](#help)\n*   [issues](#issues)\n*   [links](#links)\n*   [name](#name) (required)\n*   [production](#production)\n\nThe contact field represents the way that people should contact you if they need to reach out.\n\nType: Contact `Object`.\n\nValid values: A contact definition.\n\n```\n{\n  \"contact\": {\n    \"name\": \"#security\",\n    \"url\": \"https://app.slack.com/client/...\",\n    \"type\": \"slack\"\n  }\n}\n```\n\n| Property | Description |\n| --- | --- |\n| `name` | The name of the link to display in the UI. |\n| `url` | The URL that this link points to. |\n| `type` | Supported types are `slack`. |\n\nThe help field represents the mechanism that people should reach out to you if they are specifically looking for help. This can be useful to differentiate from `contact` if you want to separate how people reach out to your team for support questions compared to other types of engagements.\n\nType: Help `Object`.\n\nValid values: A help definition.\n\n```\n{\n  \"help\": {\n    \"name\": \"#help-experiments\",\n    \"url\": \"https://app.slack.com/client/...\",\n    \"type\": \"slack\"\n  }\n}\n```\n\n| Property | Description |\n| --- | --- |\n| `name` | The name of the link to display in the UI. |\n| `url` | The URL that this link points to. |\n| `type` | Supported types are `slack`. |\n\nThe issues field represents the location that people should file issues if they need to report any issues for the code.\n\nType: Issue `Object`.\n\nValid values: An issue definition.\n\n```\n{\n  \"issues\": {\n    \"name\": \"Monitoring Dashboard\",\n    \"url\": \"https://github.com/vercel/next.js/issues\",\n    \"type\": \"github\"\n  }\n}\n```\n\n| Property | Description |\n| --- | --- |\n| `name` | The name of the link to display in the UI. |\n| `url` | The URL that this link points to. |\n| `type` | Supported types are `linear` or `github`. |\n\nThe links field represents a generic list of links that will be displayed for the code in the Vercel [dashboard](https://vercel.com/dashboard). This can be useful for surfacing additional links outside the above fields, such as to contributing guides, testing guidelines, or team documentation.\n\nType: `Array` of link `Object`.\n\nValid values: list of link definitions.\n\n```\n{\n  \"links\": [\n    {\n      \"name\": \"Monitoring Dashboard\",\n      \"url\": \"https://www.example.com/monitoring-dashboard\"\n    },\n    {\n      \"name\": \"Team Documentation\",\n      \"url\": \"https://www.notion.so/...\"\n    }\n  ]\n}\n```\n\n| Property | Description |\n| --- | --- |\n| `name` | The name of the link to display in the UI. |\n| `url` | The URL that this link points to. |\n\nType: `string`\n\nValid values: Any `string`.\n\nThe name field is a unique identifier for a Catalog. It serves as a human-readable identifier, allowing you to distinguish between different Catalogs based on a descriptive label.\n\nThe production field represents information related to running this code in production, such as on-call rotations, runbooks, or the criticality of the service to your business.\n\nType: Production `Object`.\n\nValid values: A production definition.\n\n```\n{\n  \"production\": {\n    \"sla\": \"SLA_CRITICAL\",\n    \"oncall\": {\n      \"type\": \"pagerduty\",\n      \"url\": \"...\"\n    },\n    \"runbook\": \"https://www.example.com/link-to-runbook\"\n  }\n}\n```\n\n| Property | Description |\n| --- | --- |\n| `oncall` | A [links](#links) object defining the rotation that manages production issues. |\n| `runbook` | The URL to the runbooks for debugging production issues with the service. |\n| `sla` | The level of criticality for this service to your business. Valid values are `SLA_CRITICAL` or `SLA_BEST_EFFORT`. |",
  "title": "Catalog",
  "description": "Use this reference to define metadata that will appear in your dashboard",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_DYNAMIC_AUTO",
  "markdown": "# NEXTJS\\_NO\\_DYNAMIC\\_AUTO\n\nConformance Rules\n\nChanging the dynamic behavior of a layout or page using \"force-dynamic\" is not recommended in App Router. This is because this will force only dynamic rendering of those pages and opt-out \"fetch\" request from the fetch cache. Furthermore, opting out will also prevent future optimizations such as partially static subtrees and hybrid server-side rendering, which can significantly improve performance.\n\nSee [Next.js Segment Config docs](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config) for more information on the different migration strategies that can be used and how they work.\n\nUsage of `force-dynamic` can be avoided and instead `no-store` or `fetch` calls can be used instead. Alternatively, usage of `cookies()` can also avoid the need to use `force-dynamic`.\n\n```\n// Example of how to use `no-store` on `fetch` calls.\nconst data = fetch(someURL, { cache: 'no-store' });\n```",
  "title": "NEXTJS_NO_DYNAMIC_AUTO",
  "description": "Prevent usage of force-dynamic as a dynamic page rendering strategy.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_PRODUCTION_SOURCE_MAPS",
  "markdown": "# NEXTJS\\_NO\\_PRODUCTION\\_SOURCE\\_MAPS\n\nApplications using Next.js should not enable production source maps so that they don't publicly share source code.\n\nConformance Rules\n\nThis rule is available from version 1.1.0.\n\nEnabling production source maps in your Next.js application will publicly share your application's source code and should be done with caution. This rule flags any usage of `productionBrowserSourceMaps` for review. If intentional, the exception should be added to an allowlist.\n\nFor further reading, see:\n\nThis rule will catch the following code.\n\n```\nmodule.exports = {\n  productionBrowserSourceMaps: true,\n};\n```\n\nTo fix this issue, either set the value of `productionBrowserSourceMaps` configuration to false, or if intentional add an exception to an allowlist.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_NO_PRODUCTION_SOURCE_MAPS",
  "description": "Applications using Next.js should not enable production source maps so that they don't publicly share source code.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_FETCH_IN_SERVER_PROPS",
  "markdown": "# NEXTJS\\_NO\\_FETCH\\_IN\\_SERVER\\_PROPS\n\nPrevent relative fetch calls in getServerSideProps from being added to Next.js applications.\n\nConformance Rules\n\nSince both `getServerSideProps` and API routes run on the server, calling `fetch` on a non-relative URL will trigger an additional network request.\n\nInstead of using `fetch` to make a call to the API route, you can instead share the code in a shared library or module to avoid another network request. You can then import this hared logic and call directly within your `getServerSideProps` function, avoiding additional network requests entirely.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_NO_FETCH_IN_SERVER_PROPS",
  "description": "Prevent relative fetch calls in getServerSideProps from being added to Next.js applications.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_CLIENT_DEPS_IN_MIDDLEWARE",
  "markdown": "# NEXTJS\\_NO\\_CLIENT\\_DEPS\\_IN\\_MIDDLEWARE\n\nConformance Rules\n\nThis check disallows dependencies on client libraries, such as `react` and `next/router` in Next.js middleware. Since middleware runs on the server and runs on every request, this code is not able to run any client side code and it should have a small bundle size to improve loading and execution times.\n\nAn example of when this check could manifest is when middleware transitively depends on a file that also uses `react` within the same file.\n\nFor example:\n\n```\nimport { createContext, type Context } from 'react';\n \nexport function createExperimentContext(): Context<ExperimentContext> {\n  return createContext<ExperimentContext>({\n    experiments: () => {\n      return EXPERIMENT_DEFAULTS;\n    },\n  });\n}\n \nexport async function getExperiments() {\n  return activeExperiments;\n}\n```\n\n```\nexport async function middleware(\n  request: NextRequest,\n  event: NextFetchEvent,\n): Promise<Response> {\n  const experiments = await getExperiments();\n \n  if (experiments.includes('new-marketing-page)) {\n    return NextResponse.rewrite(MARKETING_PAGE_URL);\n  }\n  return NextResponse.next();\n}\n```\n\nIn this example, the `experiments.ts` file both fetches the active experiments as well as provides helper functions to use experiments on the client in React.\n\nClient dependencies used or transitively depended on by middleware files should be refactored to avoid depending on the client libraries. In the example above, the code that is used by middleware to fetch experiments should be moved to a separate file from the code that provides the React functionality.",
  "title": "NEXTJS_NO_CLIENT_DEPS_IN_MIDDLEWARE",
  "description": "Disallows dependency on client libraries inside of middleware to improve performance of middleware.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_GET_INITIAL_PROPS",
  "markdown": "# NEXTJS\\_NO\\_GET\\_INITIAL\\_PROPS\n\nConformance Rules\n\n`getInitialProps` is an older Next.js API for server-side rendering that can usually be replaced with `getServerSideProps` or `getStaticProps` for more performant and secure code.\n\n`getInitialProps` runs on both the server and the client after page load, so the JavaScript bundle will contain any dependencies used by `getInitialProps`. This means that it is possible for unintended code to be included in the client side bundle, for example, code that should only be used on the server such as database connections.\n\nIf you need to avoid a server-round trip when performing a client side transition, `getInitialProps` could be used. However, if you do not, `getServerSideProps` is a good API to use instead so that the code remains on the server and does not bloat the JavaScript bundle, or `getStaticProps` can be used if the page can be statically generated at build time.\n\nThis rule is for highlighting these concerns and while there are still valid use cases for using `getInitialProps` if you do need to do data fetching on both the client and the server, they should be reviewed and approved.\n\nAn example of when this check would fail:\n\n```\nimport { type NextPage } from 'next';\n \nconst Home: NextPage = ({ users }) => {\n  return (\n    <ul>\n      {users.map((user) => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n};\n \nHome.getInitialProps = async () => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js');\n  const json = await res.json();\n  return { stars: json.stargazers_count };\n};\n \nexport default Home;\n```\n\nIn this example, the `getInitialProps` function is used to fetch data from an API, but it isn't necessary that we fetch the data on both the client and the server so we can fix it below.\n\nInstead, we should use `getServerSideProps` instead of `getInitialProps`:\n\n```\nimport { type GetServerSideProps } from 'next';\n \nconst Home = ({ users }) => {\n  return (\n    <ul>\n      {users.map((user) => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n};\n \nexport getServerSideProps: GetServerSideProps = async () => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js');\n  const json = await res.json();\n  return {\n    props: {\n      stars: json.stargazers_count\n    },\n  };\n};\n \nexport default Home;\n```",
  "title": "NEXTJS_NO_GET_INITIAL_PROPS",
  "description": "Requires any use of getInitialProps in Next.js pages be reviewed and approved, and encourages using getServerSideProps or getStaticProps instead.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_SELF_HOSTED_VIDEOS",
  "markdown": "# NEXTJS\\_NO\\_SELF\\_HOSTED\\_VIDEOS\n\nPrevent video files from being added to Next.js applications.\n\nConformance Rules\n\nVideo files, which are typically large, can consume a lot of bandwidth for your Next.js application. Video files are better served from a dedicated video CDN that is optimized for serving videos.\n\nVercel Blob can be used for storing and serving large files such as videos.\n\nYou can use either [server uploads or client uploads](https://vercel.com/docs/storage/vercel-blob#server-and-client-uploads) depending on the file size:\n\n*   [Server uploads](https://vercel.com/docs/storage/vercel-blob/quickstart#server-uploads) are suitable for files up to 4.5 MB\n*   [Client uploads](https://vercel.com/docs/storage/vercel-blob/quickstart#client-uploads) allow for uploading larger files directly from the browser to Vercel Blob, supporting files up to 5 TB (5,000 GB)\n\nSee the [best practices for hosting videos on Vercel](https://vercel.com/guides/best-practices-for-hosting-videos-on-vercel-nextjs-mp4-gif) guide to learn more about various other options for hosting videos.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_NO_SELF_HOSTED_VIDEOS",
  "description": "Prevent video files from being added to Next.js applications.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_REQUIRE_EXPLICIT_DYNAMIC",
  "markdown": "# NEXTJS\\_REQUIRE\\_EXPLICIT\\_DYNAMIC\n\nConformance Rules\n\nThis rule is available from version 1.3.0.\n\n  \n\nThis rule conflicts with the experimental Next.js feature [Partial Prerendering (PPR)](https://vercel.com/blog/partial-prerendering-with-next-js-creating-a-new-default-rendering-model). If you enable PPR in your Next.js app, you should not enable this rule.\n\nFor convenience, Next.js defaults to automatically selecting the rendering mode for pages and routes.\n\nWhilst this works well, it also means that rendering modes can be changed unintentionally (i.e. through an update to a component that a page depends on). These changes can lead to unexpected behaviors, including performance issues.\n\nTo mitigate the chance that rendering modes change unexpectedly, you should explicitly set the `dynamic` route segment option to the desired mode. Note that the default value is `auto`, which will not satisfy this rule.\n\nBy default, this rule is disabled. To enable it, refer to [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nFor further reading, see:\n\nThis rule will catch any pages or routes that:\n\n*   Do not have the `dynamic` option set to a valid value.\n*   Have the `dynamic` option set to `'auto'` (which is the default value).\n\nIn the following example, the page component does not have the `dynamic` route segment option set.\n\n```\nexport default function Page() {\n  // ...\n}\n```\n\nThe next example sets the `dynamic` route segment option, however it sets it to `'auto'`, which is already the default behavior and will not satisfy this rule.\n\n```\nexport const dynamic = 'auto';\n \nexport default function Page() {\n  // ...\n}\n```\n\nIf you see this issue in your codebase, you can resolve it by explicitly setting the `dynamic` route segment option for the page or route.\n\nIn this example, the `dynamic` route segment option is set to `error`, which forces the page to static, and will throw an error if any components use [dynamic functions](https://nextjs.org/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions) or uncached data.\n\n```\nexport const dynamic = 'error';\n \nexport default function Page() {\n  const text = 'Hello world';\n  return <div>{text}</div>;\n}\n```",
  "title": "NEXTJS_REQUIRE_EXPLICIT_DYNAMIC",
  "description": "Requires explicitly setting the `dynamic` route segment option for Next.js pages and routes.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_SAFE_NEXT_PUBLIC_ENV_USAGE",
  "markdown": "# NEXTJS\\_SAFE\\_NEXT\\_PUBLIC\\_ENV\\_USAGE\n\nConformance Rules\n\nThis rule is available from version 1.4.0.\n\nThe use of `process.env.NEXT_PUBLIC_*` environment variables may warrant a review from other developers to ensure there are no unintended leakage of environment variables.\n\nWhen enabled, this rule requires that all usage of `NEXT_PUBLIC_*` must be included in the [allowlist](https://vercel.com/docs/workflow-collaboration/conformance/allowlist).\n\nThis rule will catch any pages or routes that are using `process.env.NEXT_PUBLIC_*` environment variables.\n\nIn the following example, we are using a local variable to initialize our analytics service. As the variable will be visible in the client, a review of the code is required, and the usage should be added to the [allowlist](https://vercel.com/docs/workflow-collaboration/conformance/allowlist).\n\n```\nsetupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID);\n \nfunction HomePage() {\n  return <h1>Hello World</h1>;\n}\n \nexport default HomePage;\n```\n\nIf you hit this issue, include the entry in the [Conformance allowlist file](https://vercel.com/docs/workflow-collaboration/conformance/allowlist).",
  "title": "NEXTJS_SAFE_NEXT_PUBLIC_ENV_USAGE",
  "description": "Usage process.env.NEXT_PUBLIC_* environment variables must be allowlisted.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_TURBO_CACHE",
  "markdown": "# NEXTJS\\_NO\\_TURBO\\_CACHE\n\nConformance Rules\n\nThis rule prevents the `.next/cache` folder from being added to the Turborepo cache. This is important because including the `.next/cache` folder in the Turborepo cache can cause the cache to grow to an excessive size. Vercel also already includes this cache in the build container cache.\n\nThe following `turbo.json` config will be caught by this rule for Next.js apps:\n\n```\n{\n  \"extends\": [\"//\"],\n  \"pipeline\": {\n    \"build\": {\n      \"outputs\": [\".next/**\"]\n    }\n  }\n}\n```\n\nTo fix, add `\"!.next/cache/**\"` to the list of outputs for the task.\n\n```\n{\n  \"extends\": [\"//\"],\n  \"pipeline\": {\n    \"build\": {\n      \"outputs\": [\".next/**\", \"!.next/cache/**\"]\n    }\n  }\n}\n```",
  "title": "NEXTJS_NO_TURBO_CACHE",
  "description": "Prevent Turborepo from caching the Next.js .next/cache folder to prevent an oversized cache.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_SAFE_URL_IMPORTS",
  "markdown": "# NEXTJS\\_SAFE\\_URL\\_IMPORTS\n\nConformance Rules\n\nURL imports are an experimental feature that allows you to import modules directly from external servers (instead of from the local disk). When you opt-in, and supply URL prefixes inside `next.config.js`, like so:\n\n```\nmodule.exports = {\n  experimental: {\n    urlImports: ['https://example.com/assets/', 'https://cdn.skypack.dev'],\n  },\n};\n```\n\nIf any of the URLs have not been added to the safe import comformance configuration, then this will cause this rule to fail.\n\nEngineers should reach out to the appropriate engineer(s) or team(s) for a security review of the URL import configuration.\n\nWhen requesting a review, please provide as much information as possible around the proposed URL being added, and if there any security implications for using the URL.\n\nIf this URL is deemed safe for general use, it can be added to the list of approved URL imports. This can be done by following the [Customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize#configuring-a-conformance-rule) docs to add the URL to your `conformance.config.jsonc` file:\n\n```\n\"NEXTJS_SAFE_URL_IMPORTS\": {\n  urlImports: [theUrlToAdd],\n}\n```",
  "title": "NEXTJS_SAFE_URL_IMPORTS",
  "description": "Prevent unsafe URL Imports from being added to Next.js applications.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_UNNEEDED_GET_SERVER_SIDE_PROPS",
  "markdown": "# NEXTJS\\_UNNEEDED\\_GET\\_SERVER\\_SIDE\\_PROPS\n\nConformance Rules\n\nThis rule will analyze each Next.js page's `getServerSideProps` to see if the context parameter is being used and if not then it will fail.\n\nWhen using `getServerSideProps` to render a Next.js page on the server, if the page doesn't require any information from the request, consider using [SSG](https://nextjs.org/docs/basic-features/data-fetching/get-static-props) with `getStaticProps`. If you are using `getServerSideProps` to refresh the data on each page load, consider using [ISR](https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration) instead with a `revalidate` property to control how often the page is regenerated. If you are using `getServerSideProps` to randomize the data on each page load, consider moving that logic to the client instead and use `getStaticProps` to reuse the statically generated page.\n\nAn example of when this check would fail:\n\n```\nimport { type GetServerSideProps } from 'next';\n \nexport const getServerSideProps: GetServerSideProps = async () => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js');\n  const json = await res.json();\n  return {\n    props: { stargazersCount: json.stargazers_count },\n  };\n};\n \nfunction Home({ stargazersCount }) {\n  return <h1>The Next.js repo has {stargazersCount} stars.</h1>;\n}\n \nexport default Home;\n```\n\nIn this example, the `getServerSideProps` function is used to pass data from an API to the page, but it isn't using any information from the context argument so `getServerSideProps` is unnecessary.\n\nInstead, we can convert the page to use [SSG](https://nextjs.org/docs/basic-features/data-fetching/get-static-props) with `getStaticProps`. This will generate the page at build time and serve it statically. If you need the page to be updated more frequently, then you can also use [ISR](https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration) with the revalidate option:\n\n```\nimport { type GetStaticProps } from 'next';\n \nexport const getStaticProps: GetStaticProps = async () => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js');\n  const json = await res.json();\n  return {\n    props: { stargazersCount: json.stargazers_count },\n    revalidate: 60, // Using ISR, regenerate the page every 60 seconds\n  };\n};\n \nfunction Home({ stargazersCount }) {\n  return <h1>The Next.js repo has {stargazersCount} stars.</h1>;\n}\n \nexport default Home;\n```\n\nOr, you can use information from the context argument to customize the page:\n\n```\nimport { type GetServerSideProps } from 'next';\n \nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  const res = await fetch(\n    `https://api.github.com/repos/vercel/${context.query.repoName}`,\n  );\n  const json = await res.json();\n  return {\n    props: {\n      repoName: context.query.repoName,\n      stargazersCount: json.stargazers_count,\n    },\n  };\n};\n \nfunction Home({ repoName, stargazersCount }) {\n  return (\n    <h1>\n      The {repoName} repo has {stargazersCount} stars.\n    </h1>\n  );\n}\n \nexport default Home;\n```",
  "title": "NEXTJS_UNNEEDED_GET_SERVER_SIDE_PROPS",
  "description": "Catches usages of getServerSideProps that could use static rendering instead, improving the performance of those pages.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NATIVE_FETCH",
  "markdown": "# NEXTJS\\_USE\\_NATIVE\\_FETCH\n\nRequires using native \\`fetch\\` which Next.js provides, removing the need for third-party fetch libraries.\n\nConformance Rules\n\nThis rule is available from version 1.1.0.\n\nNext.js extends the native [Web `fetch` API](https://nextjs.org/docs/app/api-reference/functions/fetch) with additional caching capabilities which means third-party fetch libraries are not needed. Including these libraries in your app can increase bundle size and negatively impact performance.\n\nThis rule will detect any usage of the following third-party fetch libraries:\n\n*   `isomorphic-fetch`\n*   `whatwg-fetch`\n*   `node-fetch`\n*   `cross-fetch`\n*   `axios`\n\nIf there are more libraries you would like to restrict, consider using a [custom rule](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules).\n\nBy default, this rule is disabled. You can enable it by [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nFor further reading, see:\n\nThis rule will catch the following code.\n\n```\nimport fetch from 'isomorphic-fetch';\n \nexport async function getAuth() {\n  const auth = await fetch('/api/auth');\n  return auth.json();\n}\n```\n\nReplace the third-party fetch library with the native `fetch` API Next.js provides.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_USE_NATIVE_FETCH",
  "description": "Requires using native `fetch` which Next.js provides, removing the need for third-party fetch libraries.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_FONT",
  "markdown": "# NEXTJS\\_USE\\_NEXT\\_FONT\n\nRequires using next/font to load local fonts and fonts from supported CDNs.\n\nConformance Rules\n\nThis rule is available from version 1.1.0.\n\n[`next/font`](https://nextjs.org/docs/pages/api-reference/components/font) automatically optimizes fonts and removes external network requests for improved privacy and performance.\n\nBy default, this rule is disabled. Enable it by [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nThis means you can optimally load web fonts with zero layout shift, thanks to the underlying CSS size-adjust property used.\n\nFor further reading, see:\n\nThis rule will catch the following code.\n\n```\n@font-face {\n  font-family: Foo;\n  src:\n    url(https://fonts.gstatic.com/s/roboto/v30/KFOiCnqEu92Fr1Mu51QrEz0dL-vwnYh2eg.woff2)\n      format('woff2'),\n    url(/custom-font.ttf) format('truetype');\n  font-display: block;\n  font-style: normal;\n  font-weight: 400;\n}\n```\n\n```\nfunction App() {\n  return (\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Krona+One&display=optional\"\n      rel=\"stylesheet\"\n    />\n  );\n}\n```\n\nReplace any `@font-face` at-rules and `link` elements that are caught by this rule with [`next/font`](https://nextjs.org/docs/api-reference/next/font).\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_USE_NEXT_FONT",
  "description": "Requires using next/font to load local fonts and fonts from supported CDNs.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_SCRIPT",
  "markdown": "# NEXTJS\\_USE\\_NEXT\\_SCRIPT\n\nRequires that next/script is used for all scripts.\n\nConformance Rules\n\nThis rule is available from version 1.1.0.\n\n[`next/script`](https://nextjs.org/docs/pages/api-reference/components/script) automatically optimizes scripts for improved performance through customizable loading strategies. By default, `next/script` loads scripts so that they're non-blocking, meaning that they load after the page has loaded.\n\nAdditionally, `next/script` has built in event handlers for common events such as `onLoad` and `onError`.\n\nBy default, this rule is disabled. Enable it by [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nFor further reading, see:\n\nThis rule will catch the following code.\n\n```\nfunction insertScript() {\n  const script = document.createElement('script');\n  script.src = process.env.SCRIPT_PATH;\n  document.body.appendChild(script);\n}\n```\n\n```\nfunction App() {\n  return (\n    <script\n      dangerouslySetInnerHTML={{ __html: \"console.log('Hello world');\" }}\n    />\n  );\n}\n```\n\nReplace any `document.createElement('script')` calls and `<script>` elements that are caught by this rule with [`next/script`](https://nextjs.org/docs/pages/api-reference/components/script).\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NEXTJS_USE_NEXT_SCRIPT",
  "description": "Requires that next/script is used for all scripts.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_SAFE_SVG_IMAGES",
  "markdown": "# NEXTJS\\_SAFE\\_SVG\\_IMAGES\n\nConformance Rules\n\nSVG can do many of the same things that HTML/JS/CSS can, meaning that it can be dangerous to execute SVG as this can lead to vulnerabilities without proper [Content Security Policy](https://nextjs.org/docs/advanced-features/security-headers) (CSP) headers.\n\nIf you need to serve SVG images with the default Image Optimization API, you can set `dangerouslyAllowSVG` inside your `next.config.js`:\n\n```\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n};\n```\n\nIn addition, it is strongly recommended to also set `contentDispositionType` to force the browser to download the image, as well as `contentSecurityPolicy` to prevent scripts embedded in the image from executing.",
  "title": "NEXTJS_SAFE_SVG_IMAGES",
  "description": "Prevent dangerouslyAllowSVG without Content Security Policy in Next.js applications.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/REACT_NO_STATIC_IMPORTS_IN_EVENT_HANDLERS",
  "markdown": "# REACT\\_NO\\_STATIC\\_IMPORTS\\_IN\\_EVENT\\_HANDLERS\n\nConformance Rules\n\nThis rule has been deprecated as of version [1.8.0](https://vercel.com/docs/workflow-collaboration/conformance/changelog#1.8.0)and will be removed in 2.0.0.\n\nReact event handlers are async, and as such, this means we can defer loading the associated code until we interact with the UI, triggering that event handler. Specifically, this means we can improve initial code size and the overhead of loading the code until it is actually needed.\n\nInstead of using static imports at the top of your module, you can use dynamic imports as needed in your React event handlers.\n\nBefore:\n\n```\nimport foo from 'foo';\n \nconst onClick = () => {\n  foo.doSomething();\n};\n```\n\nAfter:\n\n```\nconst onClick = () => {\n  import('foo').then((foo) => {\n    foo.doSomething();\n  });\n};\n```\n\nAdditionally, you can [configure](https://vercel.com/docs/workflow-collaboration/conformance/customize) the rule for only specific React event handlers:\n\n```\n\"REACT_NO_STATIC_IMPORTS_IN_EVENT_HANDLERS\": {\n  eventAllowList: ['onClick'],\n}\n```",
  "title": "REACT_NO_STATIC_IMPORTS_IN_EVENT_HANDLERS",
  "description": "Prevent static imports that are referenced only in React event handlers from being eagerly loaded in React components.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/BFCACHE_INTEGRITY_NO_UNLOAD_LISTENERS",
  "markdown": "# BFCACHE\\_INTEGRITY\\_NO\\_UNLOAD\\_LISTENERS\n\nConformance Rules\n\nThis rule disallows the use of the `unload` and `beforeunload` events to improve the integrity of the Back-Forward Cache in browsers.\n\nThe Back-Forward Cache (bfcache) is a browser feature that allows pages to be cached in memory when the user navigates away from them. When the user navigates back to the page, it can be loaded almost instantly from the cache instead of having to be reloaded from the network. Breaking the bfcache's integrity can cause a page to be reloaded from the network when the user navigates back to it, which can be slow and jarring.\n\nThe most important rule for maintaining the integrity of the bfcache is to not use the `unload` event. This event is fired when the user navigates away from the page, but it is unreliable and disables the cache on most browsers.\n\nThe `beforeunload` event can also make your page ineligible for the cache in browsers so it is better to avoid using. However there are some legitimate use cases for this event, such as checking if the user has unsaved work before they exit the page. In this case it is recommended to add the listener conditionally and remove it as soon as the work as been saved.\n\nAlternative events that can be considered are `pagehide` or `visibilitychange`, which are more reliable events that do not break the bfcache and will fire when the user navigates away from or unfocuses the page.\n\nTo learn more about the bfcache, see the [web.dev docs](https://web.dev/bfcache).\n\nTwo examples of when this check would fail:\n\n```\nexport function handleUserNavigatingAway() {\n  window.onunload = (event) => {\n    console.log('Page has unloaded.');\n  };\n}\n \nexport function handleUserAboutToNavigateAway() {\n  window.onbeforeunload = (event) => {\n    console.log('Page is about to be unloaded.');\n  };\n}\n```\n\n```\nexport function handleUserNavigatingAway() {\n  window.addEventListener('unload', (event) => {\n    console.log('Page has unloaded.');\n  });\n}\n \nexport function handleUserAboutToNavigateAway() {\n  window.addEventListener('beforeunload', (event) => {\n    console.log('Page is about to be unloaded.');\n  });\n}\n```\n\nInstead, we can use the `pagehide` event to detect when the user navigates away from the page.\n\n```\nexport function handleUserNavigatingAway() {\n  window.onpagehide = (event) => {\n    console.log('Page is about to be hidden.');\n  };\n}\n```\n\n```\nexport function handleUserNavigatingAway() {\n  window.addEventListener('pagehide', (event) => {\n    console.log('Page is about to be hidden.');\n  });\n}\n```",
  "title": "BFCACHE_INTEGRITY_NO_UNLOAD_LISTENERS",
  "description": "Disallows the use of the unload and beforeunload events to eliminate a source of eviction from the browser's Back-Forward Cache.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_FETCH_FROM_MIDDLEWARE",
  "markdown": "# NO\\_FETCH\\_FROM\\_MIDDLEWARE\n\nConformance Rules\n\n[Next.js middleware](https://nextjs.org/docs/advanced-features/middleware) runs code at the Edge. This means that the code is globally distributed. When middleware makes a `fetch` call, it may be to a backend that is not globally distributed, in which case the latency of the middleware function will be really slow. To prevent this, `fetch` calls that can be made from middleware are flagged and reviewed to make sure that it looks like an appropriate use.\n\nThis check will fail when a `fetch` call is detected from Next.js middleware or transitive dependencies used by the middleware file.\n\nIn this example, there are two files. An experiments file asynchronously fetches experiments using `fetch`. The middleware file uses the experiments library to fetch the experiments and then decide to rewrite the URL.\n\n```\nexport async function getExperiments() {\n  const res = await fetch('/experiments');\n  return res.json();\n}\n```\n\n```\nexport async function middleware(\n  request: NextRequest,\n  event: NextFetchEvent,\n): Promise<Response> {\n  const experiments = await getExperiments();\n \n  if (experiments.includes('new-marketing-page)) {\n    return NextResponse.rewrite(MARKETING_PAGE_URL);\n  }\n  return NextResponse.next();\n}\n```\n\nThe correct fix will depend on the specific situation. If the server that is being called is globally distributed, then this asynchronous call may be okay. If not, then the code should try to remove the `fetch` statement to avoid making a request that would add latency to middleware.",
  "title": "NO_FETCH_FROM_MIDDLEWARE",
  "description": "Requires that any fetch call that is depended on transitively by Next.js middleware be reviewed and approved before use.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_USE_NEXT_IMAGE",
  "markdown": "# NEXTJS\\_USE\\_NEXT\\_IMAGE\n\nConformance Rules\n\nThis rule is available from version 1.1.0.\n\nThe Next.js Image component ([`next/image`](https://nextjs.org/docs/pages/api-reference/components/image)) extends the HTML `<img>` element with features for automatic image optimization.\n\nIt optimizes image sizes for different devices using modern image formats, improves visual stability by preventing layout shifts during image loading, and speeds up page loads with lazy loading and optional blur-up placeholders.\n\nAdditionally, it provides the flexibility of on-demand image resizing, even for images hosted on remote servers. This may incur costs from your managed hosting provider (see [below](#important-note-on-costs) for more information)\n\nBy default, this rule is disabled. Enable it by [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nFor further reading, see:\n\nUsing image optimization may incur costs from your managed hosting provider. You can opt out of image optimization by setting the optional [`unoptimized` prop](https://nextjs.org/docs/pages/api-reference/components/image#unoptimized).\n\nPlease check with your hosting provider for details.\n\nIf self-hosting, you'll need to install the optional package [`sharp`](https://www.npmjs.com/package/sharp), which Next.js will use to optimize images. Optimized images will require more available storage on your server.\n\nThis rule will catch the following code.\n\n```\nfunction App() {\n  return <img src=\"/media/image.png\" alt=\"Example\" />;\n}\n```\n\nThe following code will not be caught by this rule.\n\n```\nfunction App() {\n  return (\n    <picture>\n      <source srcSet=\"/hero.avif\" type=\"image/avif\" />\n      <source srcSet=\"/hero.webp\" type=\"image/webp\" />\n      <img src=\"/hero.jpg\" alt=\"Landscape picture\" width={800} height={500} />\n    </picture>\n  );\n}\n```\n\nReplace any `<img>` elements that are caught by this rule with [`next/image`](https://nextjs.org/docs/pages/api-reference/components/image).\n\nAgain, please check with your managed hosting provider for image optimization costs.",
  "title": "NEXTJS_USE_NEXT_IMAGE",
  "description": "Requires that next/image is used for all images.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-code",
  "markdown": "# forbidden-code\n\nThe `forbidden-code` rule type enables you to disallow code and code patterns through string and regular expression matches.\n\n*   Disallowing comments\n    *   You want to disallow `// TODO` comments\n    *   You want to disallow usage of `@ts-ignore`\n*   Disallowing specific strings\n    *   You want to enforce a certain casing for one or more strings\n    *   You want to disallow specific strings from being used within code\n\nIf you want to disallow specific operations on a property, you should instead use the [`forbidden-properties`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-properties) rule type.\n\nTo create a custom `forbidden-code` rule, you'll need to configure the below required properties:\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `ruleType` | `\"forbidden-code\"` | The custom rule's type. |\n| `ruleName` | `string` | The custom rule's name. |\n| `categories` | `(\"nextjs\" \\| \"performance\" \\| \"security\" \\| \"code-health\")[]` (optional) | The custom rule's categories. Default is `[\"code-health\"]`. |\n| `errorMessage` | `string` | The error message, which is shown to users when they encounter this rule. |\n| `errorLink` | `string` (optional) | An optional link to show alongside the error message. |\n| `description` | `string` (optional) | The rule description, which is shown in the Vercel Compass dashboard and included in allowlist files. |\n| `severity` | `\"major\" \\| \"minor\"` (optional) | The rule severity added to the allowlists and used to calculate a project's conformance score. |\n| `patterns` | `(string \\| { pattern: string, flags: string })[]` | An array of regular expression patterns to match against. |\n| `strings` | `string[]` | An array of exact string to match against (case sensitive). |\n\nMulti-line strings and patterns are currently unsupported by this custom rule type.\n\nThe example below configures a rule named `NO_DISALLOWED_USAGE` that disallows:\n\n*   Any usage of `\"and\"` at the start of a line (case-sensitive).\n*   Any usage of `\"but\"` in any case.\n*   Any usage of `\"TODO\"` (case-sensitive).\n\n```\n{\n  \"customRules\": [\n    {\n      \"ruleType\": \"forbidden-imports\",\n      \"ruleName\": \"NO_DISALLOWED_USAGE\",\n      \"categories\": [\"code-health\"],\n      \"errorMessage\": \"References to \\\"and\\\" at the start of a line are not allowed.\",\n      \"description\": \"Disallows using \\\"and\\\" at the start of a line.\",\n      \"severity\": \"major\",\n      \"patterns\": [\"^and\", { \"pattern\": \"but\", \"flags\": \"i\" }],\n      \"strings\": [\"TODO\"],\n    },\n  ],\n}\n```\n\nThis custom rule type always sets the `\"g\"` (or global) flag for regular expressions. This ensures that all regular expression matches are reported, opposed to only reporting on the first match.\n\nWhen providing flags through an object in `patterns`, you can omit the `\"g\"` as this will automatically be set.\n\nTo learn more about regular expression flags, see [the MDN guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) on advanced searching with flags.\n\nIf you're not familiar with regular expressions, you can use tools like [regex101](https://regex101.com/) and/or [RegExr](https://regexr.com/) to help you understand and write regular expressions.\n\nRegular expressions can vary in complexity, depending on what you're trying to achieve. We've added some examples below to help you get started.\n\n| Pattern | Description |\n| --- | --- |\n| `^and` | Matches `\"and\"`, but only if it occurs at the start of a line (`^`). |\n| `(B\\|a)ar$` | Matches `\"But\"` and `\"but\"`, but only if it occurs at the end of a line (`$`). |\n| `regexp?` | Matches `\"regexp\"` and `\"regex\"`, with or without the `\"p\"` (`?`). |\n| `(?<!-)so` | Matches `\"so\"`, but only when not following a hyphen (`(?<!-)`). |\n\nTo enable this rule type, you can set the rule to `true`, or provide the following configuration.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `paths` | `string[]` (optional) | An optional array of exact paths or glob expressions\\*.<br><br>_\\*Note that paths containing square brackets need to be escaped, i.e. `[folder-name]\\page.tsx` would become `\\[folder-name\\]\\page.tsx`._ |\n\nThe example below enables the `NO_DISALLOWED_USAGE` custom rule for all files in the `src/` directory, excluding files in `src/legacy/`. In this example, the custom rule is also restricted to the `dashboard` and `marketing-site` workspaces, which is optional.\n\n```\n{\n  \"overrides\": [\n    {\n      \"restrictTo\": {\n        \"workspaces\": [\"dashboard\", \"marketing-site\"],\n      },\n      \"rules\": {\n        \"CUSTOM.NO_DISALLOWED_USAGE\": {\n          \"paths\": [\"src\", \"!src/legacy\"],\n        },\n      },\n    },\n  ],\n  \"customRules\": [\n    // ...\n  ],\n}\n```\n\nThis next example enables the `NO_DISALLOWED_USAGE` custom rule for all files, and without workspace restrictions.\n\n```\n{\n  \"overrides\": [\n    {\n      \"rules\": {\n        \"CUSTOM.NO_DISALLOWED_USAGE\": true,\n      },\n    },\n  ],\n  \"customRules\": [\n    // ...\n  ],\n}\n```\n\n;",
  "title": "forbidden-code",
  "description": "Learn how to set custom rules to disallow code and code patterns through string and regular expression matches.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-packages",
  "markdown": "# forbidden-packages\n\nThe `forbidden-packages` rule type enables you to disallow packages from being listed as dependencies in `package.json`.\n\n*   Deprecating packages\n    *   You want to disallow importing a deprecated package, and to recommend a different approach\n*   Standardization\n    *   You want to ensure that projects depend on the same set of packages when performing similar tasks (i.e. using `jest` or `vitest` consistently across a monorepo)\n*   Visibility and approval\n    *   You want to enable a workflow where team-owned packages can't be depended upon without acknowledgement or approval from that team. This helps owning teams to better plan and understand the impacts of their work\n\nTo create a custom `forbidden-packages` rule, you'll need to configure the below required properties:\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `ruleType` | `\"forbidden-packages\"` | The custom rule's type. |\n| `ruleName` | `string` | The custom rule's name. |\n| `categories` | `(\"nextjs\" \\| \"performance\" \\| \"security\" \\| \"code-health\")[]` (optional) | The custom rule's categories. Default is `[\"code-health\"]`. |\n| `errorMessage` | `string` | The error message, which is shown to users when they encounter this rule. |\n| `errorLink` | `string` (optional) | An optional link to show alongside the error message. |\n| `description` | `string` (optional) | The rule description, which is shown in the Vercel Compass dashboard and included in allowlist files. |\n| `severity` | `\"major\" \\| \"minor\"` (optional) | The rule severity added to the allowlists and used to calculate a project's conformance score. |\n| `packageNames` | `string[]` | An array of exact package names or glob expressions. |\n| `packageVersions` | `string[]` (optional) | Added in Conformance `1.8.0`. An optional array of exact package versions or [semver](https://docs.npmjs.com/cli/v6/using-npm/semver) ranges. |\n\nThe example below configures a rule named `NO_TEAM_PACKAGES` that disallows importing any package from the `team` workspace except for `@team/utils`.\n\n```\n{\n  \"customRules\": [\n    {\n      \"ruleType\": \"forbidden-packages\",\n      \"ruleName\": \"NO_TEAM_PACKAGES\",\n      \"errorMessage\": \"Packages from the team workspace have been deprecated in favour of '@team/utils'.\",\n      \"description\": \"Disallow importing packages from the team workspace.\",\n      \"severity\": \"major\",\n      \"packageNames\": [\"@team/*\", \"!@team/utils\"],\n    },\n  ],\n}\n```\n\nThe next example restricts the `utils` package, only allowing versions equal to or above `2.0.0`. This option requires Conformance `1.8.0` or later.\n\n```\n{\n  \"customRules\": [\n    {\n      \"ruleType\": \"forbidden-packages\",\n      \"ruleName\": \"NO_OLD_UTIL_PACKAGES\",\n      \"errorMessage\": \"Versions of `utils` below `2.0.0` are not allowed for security reasons.\",\n      \"description\": \"Disallow importing `utils` versions below version `2.0.0`.\",\n      \"severity\": \"major\",\n      \"packageNames\": [\"utils\"],\n      \"packageVersions: [\"<=2.0.0\"]\n    },\n  ],\n}\n```\n\nThe example below enables the `NO_TEAM_PACKAGES` custom rule. In this example, the custom rule is also restricted to the `dashboard` and `marketing-site` workspaces, which is optional.\n\n```\n{\n  \"overrides\": [\n    {\n      \"restrictTo\": {\n        \"workspaces\": [\"dashboard\", \"marketing-site\"],\n      },\n      \"rules\": {\n        \"CUSTOM.NO_TEAM_PACKAGES\": true,\n      },\n    },\n  ],\n  \"customRules\": [\n    // ...\n  ],\n}\n```",
  "title": "forbidden-packages",
  "description": "Learn how to set custom rules to disallow packages from being listed as dependencies.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-dependencies",
  "markdown": "# forbidden-dependencies\n\nThe `forbidden-dependencies` rule type enables you to disallow one or more files from depending on one or more predefined modules.\n\nUnlike [`forbidden-imports`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-imports), this rule type will check for indirect (or transitive) dependencies, where a module may not directly import the disallowed dependency, but the disallowed dependency is present in the dependency chain. This makes it slower, but more powerful than the `forbidden-imports` rule type.\n\nFor example, below we have a `logger` utility that imports a package that may cause security keys to be exposed.\n\n```\nimport { SECURITY_KEY } from 'secret-package';\n```\n\nWe can use this rule type to create a custom rule that prevents any module in `src/app` from importing any file that depends on our potentially dangerous `secret-package`.\n\n```\nimport { log } from '../utils/logger';\n// Would result in an error\n```\n\n*   Performance\n    *   You want to prevent importing packages that are known to increase the size of your client side code\n    *   You want to prevent using a package that is known to perform poorly in specific environments\n*   Security\n    *   You want to disallow client-side code from depending on a file that exposes secrets\n*   Error prevention\n    *   You want to prevent errors by disallowing server-side code from importing a module where some methods require browser APIs\n\nTo create a custom `forbidden-dependencies` rule, you'll need to configure the required properties below:\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `ruleType` | `\"forbidden-dependencies\"` | The custom rule's type. |\n| `ruleName` | `string` | The custom rule's name. |\n| `categories` | `(\"nextjs\" \\| \"performance\" \\| \"security\" \\| \"code-health\")[]` (optional) | The custom rule's categories. Default is `[\"code-health\"]`. |\n| `errorMessage` | `string` | The error message, which is shown to users when they encounter this rule. |\n| `errorLink` | `string` (optional) | An optional link to show alongside the error message. |\n| `description` | `string` (optional) | The rule description, which is shown in the Vercel Compass dashboard and included in allowlist files. |\n| `severity` | `\"major\" \\| \"minor\"` (optional) | The rule severity added to the allowlists and used to calculate a project's conformance score. |\n| `moduleNames` | `string[]` | An array of exact module names or glob expressions\\*.<br><br>_\\*Note that paths containing square brackets need to be escaped, i.e. `[folder-name]\\page.tsx` would become `\\[folder-name\\]\\page.tsx`._ |\n| `paths` | `string[]` (optional) | An optional array of exact paths or glob expressions, which restricts the paths that this custom rule applies to. This acts as the overridable default value for `paths`\\*.<br><br>_\\*Note that paths containing square brackets need to be escaped, i.e. `[folder-name]\\page.tsx` would become `\\[folder-name\\]\\page.tsx`._ |\n| `traverseNodeModules` | `boolean` (optional) | When `true`, this rule will also traverse `node_modules` for transient dependencies. |\n\nWhen using `traverseNodeModules`, module names currently need to be prefixed with `node_modules` (i.e., `[\"disallowed\", \"node_modules/disallowed\"]`). We're working to improve this in the near future.\n\nThe example below configures a rule named `NO_SUPER_SECRET_IN_CLIENT` that disallows depending on any package from the `super-secret` workspace except for `@super-secret/safe-exports`.\n\n```\n{\n  \"customRules\": [\n    {\n      \"ruleType\": \"forbidden-dependencies\",\n      \"ruleName\": \"NO_SUPER_SECRET_IN_CLIENT\",\n      \"categories\": [\"code-health\"],\n      \"errorMessage\": \"Depending on packages from the 'super-secret' workspace may result in secrets being exposed in client-side code. Please use '@super-secret/safe-exports' instead.\",\n      \"description\": \"Prevents depending on packages from the 'super-secret' workspace.\",\n      \"severity\": \"major\",\n      \"moduleNames\": [\"@super-secret/*\", \"!@super-secret/safe-exports\"],\n    },\n  ],\n}\n```\n\nTo enable this rule type, you can set the rule to `true`, or provide the following configuration.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `paths` | `string[]` (optional) | An optional array of exact paths or glob expressions, which restricts the paths that this custom rule applies to\\*.<br><br>_\\*Note that paths containing square brackets need to be escaped, i.e. `[folder-name]\\page.tsx` would become `\\[folder-name\\]\\page.tsx`._ |\n\nThe example below enables the `NO_SUPER_SECRET_IN_CLIENT` custom rule for all files in the `src/` directory, excluding test files. In this example, the custom rule is also restricted to the `dashboard` and `marketing-site` workspaces, which is optional.\n\n```\n{\n  \"overrides\": [\n    {\n      \"restrictTo\": {\n        \"workspaces\": [\"dashboard\", \"marketing-site\"],\n      },\n      \"rules\": {\n        \"CUSTOM.NO_SUPER_SECRET_IN_CLIENT\": {\n          \"paths\": [\"src\", \"!src/**/*.test.ts\"],\n        },\n      },\n    },\n  ],\n  \"customRules\": [\n    // ...\n  ],\n}\n```\n\nThis next example enables the `NO_SUPER_SECRET_IN_CLIENT` custom rule for all files, and without workspace restrictions.\n\n```\n{\n  \"overrides\": [\n    {\n      \"rules\": {\n        \"CUSTOM.NO_SUPER_SECRET_IN_CLIENT\": true,\n      },\n    },\n  ],\n  \"customRules\": [\n    // ...\n  ],\n}\n```",
  "title": "forbidden-dependencies",
  "description": "Learn how to set custom rules to disallow one or more files from depending on one or more predefined module",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-properties",
  "markdown": "# forbidden-properties\n\nThe `forbidden-properties` rule type enables you to disallow reading from, writing to, and/or calling one or more properties.\n\n*   Disallowing use of global properties\n    *   You want to disallow calling `document.write`\n    *   You want to disallow using browser-only APIs in a component library that may be server-rendered\n    *   You want to disallow calls to usage of `window.location` in favor of another solution.\n*   Disallowing use of deprecated features\n    *   You want to disallow using `event.keyCode`\n    *   You want to disallow specific strings from being used within code\n\nTo create a custom `forbidden-properties` rule, you'll need to configure the below required properties:\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `ruleType` | `\"forbidden-properties\"` | The custom rule's type. |\n| `ruleName` | `string` | The custom rule's name. |\n| `errorMessage` | `string` | The error message, which is shown to users when they encounter this rule. |\n| `errorLink` | `string` (optional) | An optional link to show alongside the error message. |\n| `description` | `string` (optional) | The rule description, which is shown in the Vercel Compass dashboard and included in allowlist files. |\n| `severity` | `\"major\" \\| \"minor\"` (optional) | The rule severity added to the allowlists and used to calculate a project's conformance score. |\n| `forbiddenProperties` | [`ForbiddenProperty[]`](#forbiddenproperty) | One or more properties and their forbidden operations. |\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `property` | `string` | The property to target. |\n| `operations` | `{ call?: boolean, read?: boolean, write?: boolean }` | The operation(s) to target. At least one operation is required. |\n\nThe example below configures a rule named `NO_DOCUMENT_WRITE_CALLS` that disallows calling `document.write`.\n\n```\n{\n  \"customRules\": [\n    {\n      \"ruleType\": \"forbidden-properties\",\n      \"ruleName\": \"NO_DOCUMENT_WRITE_CALLS\",\n      \"errorMessage\": \"Calling 'document.write' is not allowed.\",\n      \"description\": \"Disallows calls to `document.write`.\",\n      \"severity\": \"major\",\n      \"forbiddenProperties\": [\n        {\n          \"property\": \"document.write\",\n          \"operations\": {\n            \"call\": true,\n          },\n        },\n      ],\n    },\n  ],\n}\n```\n\nNote that a property's assignments are tracked by this custom rule type.\n\nUsing our example `NO_DOCUMENT_WRITE_CALLS` rule (above), the following calls will both result in errors.\n\n```\ndocument.write();\n \nconst writer = document.write;\nwriter();\n```\n\nThe example below enables the `NO_DOCUMENT_WRITE_CALLS` custom rule. In this example, the custom rule is also restricted to the `dashboard` and `marketing-site` workspaces, which is optional.\n\n```\n{\n  \"overrides\": [\n    {\n      \"restrictTo\": {\n        \"workspaces\": [\"dashboard\", \"marketing-site\"],\n      },\n      \"rules\": {\n        \"CUSTOM.NO_DOCUMENT_WRITE_CALLS\": true,\n      },\n    },\n  ],\n  \"customRules\": [\n    // ...\n  ],\n}\n```\n\n;",
  "title": "forbidden-properties",
  "description": "Learn how to set custom rules to disallow reading from,\nwriting to, and/or calling one or more properties",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/ESLINT_NEXT_RULES_REQUIRED",
  "markdown": "# ESLINT\\_NEXT\\_RULES\\_REQUIRED\n\nConformance Rules\n\nThis Conformance check requires that ESLint plugins for Next.js are configured correctly in your application, including:\n\nThese plugins help to catch common Next.js issues, including performance.\n\n```\nA Conformance error occurred in test \"ESLINT_NEXT_RULES_REQUIRED\".\n \nThese ESLint plugins must have rules configured to run: @next/next\n \nTo find out more information and how to fix this error, visit\nhttps://vercel.com/docs/workflow-collaboration/conformance/rules/ESLINT_NEXT_RULES_REQUIRED.\n \nIf this violation should be ignored, add the following entry to\n/apps/dashboard/.allowlists/ESLINT_NEXT_RULES_REQUIRED.allowlist.json and\nget approval from the appropriate person.\n \n{\n  \"testName\": \"ESLINT_NEXT_RULES_REQUIRED\",\n  \"reason\": \"TODO: Add reason why this violation is allowed to be ignored.\",\n  \"location\": {\n    \"workspace\": \"dashboard\"\n  },\n}\n```\n\nThis check requires that certain ESLint plugins are installed and rules within those plugins are configured to be errors. If you are missing required plugins, you will receive an error such as:\n\n```\nESLint configuration is missing required security plugins:\n  Missing plugins: @next/next\n  Registered plugins: import and @typescript-eslint\n```\n\nFor more information on ESLint plugins and rules, see [plugins](https://eslint.org/docs/latest/user-guide/configuring/plugins) and [rules](https://eslint.org/docs/latest/user-guide/configuring/rules).\n\nThe recommended approach for configuring ESLint in a monorepo is to have a shared ESLint config in an internal package. See the [Turbo docs on ESLint](https://turbo.build/repo/docs/handbook/linting/eslint) to get started.\n\nOnce your monorepo has a shared ESLint config, you can add a `.eslintrc.cjs` file to the root folder of your workspace with the contents:\n\n```\nmodule.exports = {\n  root: true,\n  extends: ['eslint-config-custom/base'],\n};\n```\n\nYou should also add `\"eslint-config-custom\": \"workspace:*\"` to your `devDependencies`.",
  "title": "ESLINT_NEXT_RULES_REQUIRED",
  "description": "Requires that a workspace package is configured with required Next.js plugins and rules",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-imports",
  "markdown": "# forbidden-imports\n\nThe `forbidden-imports` rule type enables you to disallow one or more files from importing one or more predefined modules.\n\nUnlike [`forbidden-dependencies`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-dependencies), this rule type wont check for indirect (transitive) dependencies. This makes this rule faster, but limits its effectiveness.\n\n*   Deprecating packages or versions\n    *   You want to disallow importing a deprecated package, and to recommend a different approach\n*   Recommending an alternative package\n    *   You want to require that users import custom/wrapped methods from `test-utils` instead of directly from a testing library\n\nIf you want to prevent depending on a module for performance or security reasons, you should instead use the [`forbidden-dependencies`](https://vercel.com/docs/workflow-collaboration/conformance/custom-rules/forbidden-dependencies) rule type.\n\nTo create a custom `forbidden-imports` rule, you'll need to configure the below required properties:\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `ruleType` | `\"forbidden-imports\"` | The custom rule's type. |\n| `ruleName` | `string` | The custom rule's name. |\n| `categories` | `(\"nextjs\" \\| \"performance\" \\| \"security\" \\| \"code-health\")[]` (optional) | The custom rule's categories. Default is `[\"code-health\"]`. |\n| `errorMessage` | `string` | The error message, which is shown to users when they encounter this rule. |\n| `errorLink` | `string` (optional) | An optional link to show alongside the error message. |\n| `description` | `string` (optional) | The rule description, which is shown in the Vercel Compass dashboard and included in allowlist files. |\n| `severity` | `\"major\" \\| \"minor\"` (optional) | The rule severity added to the allowlists and used to calculate a project's conformance score. |\n| `moduleNames` | `string[]` | An array of exact module names or glob expressions\\*.<br><br>_\\*Note that paths containing square brackets need to be escaped, i.e. `[folder-name]\\page.tsx` would become `\\[folder-name\\]\\page.tsx`._ |\n| `importNames` | `string[]` (optional) | An array of exact module names of import names. |\n| `paths` | `string[]` (optional) | Added in Conformance `1.4.0`. An optional array of exact paths or glob expressions, which restricts the paths that this custom rule applies to. This acts as the overridable default value for `paths`\\*.<br><br>_\\*Note that paths containing square brackets need to be escaped, i.e. `[folder-name]\\page.tsx` would become `\\[folder-name\\]\\page.tsx`._ |\n| `disallowDefaultImports` | `boolean` (optional) | Flags default imports (i.e. `import foo from 'foo';`) as errors. |\n| `disallowNamespaceImports` | `boolean` (optional) | Flags namespace imports (i.e. `import * as foo from 'foo';`) as errors. |\n\nNote that when using `moduleNames` alone, imports are not allowed at all from that module. When used with conditions like `importNames`, the custom rule will only report an error when those conditions are also met.\n\nThe example below configures a rule named `NO_TEAM_IMPORTS` that disallows importing any package from the `team` workspace except for `@team/utils`. It also configures a rule that disallows importing `oldMethod` from `@team/utils`, but restricts that rule to the `src/new/` directory.\n\n```\n{\n  \"customRules\": [\n    {\n      \"ruleType\": \"forbidden-imports\",\n      \"ruleName\": \"NO_TEAM_IMPORTS\",\n      \"categories\": [\"security\"],\n      \"errorMessage\": \"Packages from the team workspace have been deprecated in favour of '@team/utils'.\",\n      \"description\": \"Disallows importing packages from the team workspace.\",\n      \"severity\": \"major\",\n      \"moduleNames\": [\"@team/*\", \"!@team/utils\"],\n    },\n    {\n      \"ruleType\": \"forbidden-imports\",\n      \"ruleName\": \"NO_TEAM_OLD_METHOD_IMPORTS\",\n      \"categories\": [\"performance\"],\n      \"errorMessage\": \"'oldMethod' has been deprecated in favour of 'newMethod'.\",\n      \"description\": \"Disallows using the deprecated method 'oldMethod' from '@team/utils'.\",\n      \"severity\": \"minor\",\n      \"moduleNames\": [\"@team/utils\"],\n      \"importNames\": [\"oldMethod\"],\n      \"paths\": [\"src/new/**\"],\n    },\n  ],\n}\n```\n\nTo enable this rule type, you can set the rule to `true`, or provide the following configuration.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `paths` | `string[]` (optional) | An optional array of exact paths or glob expressions, which restricts the paths that this custom rule applies to\\*.<br><br>_\\*Note that paths containing square brackets need to be escaped, i.e. `[folder-name]\\page.tsx` would become `\\[folder-name\\]\\page.tsx`._ |\n\nThe example below enables the `NO_TEAM_IMPORTS` custom rule for all files in the `src/` directory, excluding files in `src/legacy/`. In this example, the custom rule is also restricted to the `dashboard` and `marketing-site` workspaces, which is optional.\n\n```\n{\n  \"overrides\": [\n    {\n      \"restrictTo\": {\n        \"workspaces\": [\"dashboard\", \"marketing-site\"],\n      },\n      \"rules\": {\n        \"CUSTOM.NO_TEAM_IMPORTS\": {\n          \"paths\": [\"src\", \"!src/legacy\"],\n        },\n      },\n    },\n  ],\n  \"customRules\": [\n    // ...\n  ],\n}\n```\n\n;",
  "title": "forbidden-imports",
  "description": "Learn how to set custom rules to disallow one or more files from importing one or more predefined modules",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_UNNECESSARY_PROP_SPREADING",
  "markdown": "# NO\\_UNNECESSARY\\_PROP\\_SPREADING\n\nConformance Rules\n\nThis rule is available from version 1.6.0.\n\nThis rule detects the usage of the spread operator when spreading an object as a prop within a JSX component.\n\nWhen spreading an object in the component, the data types of the object's properties are not validated, potentially causing unexpected runtime errors or unintended behavior.\n\nIn the following example, the `Header` component contains an object with the spread operator being applied to it.\n\nWe don't know if the props that the `Header` component reads will accept all the values contained in the `foo` object.\n\n```\nfunction HomePage() {\n  return <Header {...{ foo }}>Hello World</Header>;\n}\n \nexport default HomePage;\n```\n\nYou can remove the spread operator from the JSX component, and list all props explicitly.\n\n```\nfunction HomePage() {\n  return (\n    <Header bar={foo.bar} baz={foo.baz}>\n      Hello World\n    </Header>\n  );\n}\n \nexport default HomePage;\n```\n\nIn the example above, [TypeScript](https://www.typescriptlang.org/) will be able to type-check all props.",
  "title": "NO_UNNECESSARY_PROP_SPREADING",
  "description": "Disallows the usage of object spreading in a JSX component.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/WORKSPACE_MISSING_PACKAGE_JSON",
  "markdown": "# WORKSPACE\\_MISSING\\_PACKAGE\\_JSON\n\nConformance Rules\n\nAll directories that match a glob used to configure package manager workspaces must be defined as a package and contain a `package.json` file. This check prevents confusion where a new directory may be placed within a directory that is configured to be a workspace but the new directory is not actually a workspace.\n\nThe repository configures pnpm workspaces in this file:\n\n```\npackages:\n  - 'apps/*'\n  - 'packages/*'\n```\n\nIf a directory is defined in `packages/not-a-package`, then this test will fail saying that the `not-a-package` directory must contain a `package.json` file.\n\nDirectories that match a workspace glob but do not have a `package.json` file should either be converted to a package, be moved to a different directory, or be excluded in the workspaces configuration.",
  "title": "WORKSPACE_MISSING_PACKAGE_JSON",
  "description": "All directories that match a workspace glob must include a package.json file.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_CARET_DEPENDENCIES",
  "markdown": "# REQUIRE\\_CARET\\_DEPENDENCIES\n\nConformance Rules\n\nThis rule is available from version 1.4.0.\n\nUsing a caret (\"^\") as a prefix in the version of your dependencies is recommended. [Caret Ranges](https://github.com/npm/node-semver?tab=readme-ov-file#caret-ranges-123-025-004) allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0, and no updates for versions 0.0.X. This rule is applicable to `\"dependencies\"` and `\"devDependencies\"`, and it helps maintain the security and health of your codebase.\n\nBy default, this rule is disabled. To enable it, refer to [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nThis rule will catch any `package.json` files:\n\n*   Using `~` or `*` as a prefix of the version, like `~1.0.0`.\n*   Version without a prefix, such as `1.0.0`.\n\n```\n{\n  \"dependencies\": {\n    \"chalk\": \"~5.3.0\",\n    \"ms\": \"*2.1.3\",\n  },\n  \"devDependencies\": {\n    \"semver\": \"7.6.0\"\n  },\n}\n```\n\nIf you hit this issue, you can resolve it by adding a `\"^\"` to the version of your dependency. If you want to keep using a pinned version, or another prefix, you can include the dependency in the [Allowlist](https://vercel.com/docs/workflow-collaboration/conformance/allowlist).\n\n```\n{\n  \"dependencies\": {\n    \"semver\": \"^7.6.0\"\n  },\n}\n```",
  "title": "REQUIRE_CARET_DEPENDENCIES",
  "description": "Prevent the use of dependencies without a caret (\"^\") as a prefix.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_INSTANCEOF_ERROR",
  "markdown": "# NO\\_INSTANCEOF\\_ERROR\n\nConformance Rules\n\nThis rule is available from version 1.5.0.\n\nA common pattern for checking if an object is an error is to use `error instanceof Error`.\n\nThis pattern is problematic because errors can come from other [realms](https://tc39.es/ecma262/#realm). Errors from other realms are instantiated from the realm's global `Error` constructor, and are therefore not instances of the current realm's global `Error` constructor and will not pass the `instanceof` check.\n\nSome examples of where you might hit this include:\n\n*   In Node.js, errors from a workers are instances of `Error` from the worker's global environment.\n*   In browser environments, errors from `iframe` are instances of `Error` from the `iframe`'s global environment (i.e. `iframe.contentWindow.Error`).\n\nBy default, this rule is disabled. To enable it, refer to [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nIn this example, an error is returned from a [`vm`](https://nodejs.org/api/vm.html) context. As this error was created in a different realm, `instanceof Error` returns false.\n\n```\nconst vm = require('node:vm');\n \nconst context = vm.createContext({});\nconst error = vm.runInContext('new Error()', context);\n \nif (error instanceof Error) {\n  // Returns `false` because `error` is from a different realm.\n}\n```\n\nYou can use [`isNativeError`](https://nodejs.org/api/util.html#utiltypesisnativeerrorvalue) in Node.js environments, which will return `true` for errors from other realms.\n\n```\nimport { isNativeError } from 'node:util/types';\nconst vm = require('node:vm');\n \nconst context = vm.createContext({});\nconst error = vm.runInContext('new Error()', context);\n \nif (isNativeError(error)) {\n  // ...\n}\n```\n\nUse a library like [`is-error`](https://www.npmjs.com/package/is-error) to ensure you cover errors from other realms.\n\nYou can also use `Object.prototype.toString.call(error) === '[object Error]'` in some cases. This method will not work for custom errors, and you'll need to traverse the prototype chain (i.e. `Object.getPrototypeOf(error)`)to handle those cases.\n\nThe following code is a simplified version of the code used in the `is-error` library:\n\n```\nfunction isError(error) {\n  if (typeof error !== 'object') {\n    return false;\n  }\n \n  if (error instanceof Error) {\n    return true;\n  }\n \n  let currentError = error;\n  while (currentError) {\n    if (Object.prototype.toString.call(currentError) === '[object Error]') {\n      return true;\n    }\n    currentError = Object.getPrototypeOf(currentError);\n  }\n \n  return false;\n}\n```",
  "title": "NO_INSTANCEOF_ERROR",
  "description": "Disallows using `error instanceof Error` comparisons due to risk of false negatives.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_INLINE_SVG",
  "markdown": "# NO\\_INLINE\\_SVG\n\nPrevent the use of \\`svg\\` tags inline.\n\nConformance Rules\n\nThis rule is available from version 1.3.0.\n\nPreventing the use of `<svg></svg>` inline improves the health of your codebase at the page level. Using inlined `svg` tags in excess can cause hydration issues, negatively impact the performance of both the browser and the server rendering.\n\nBy default, this rule is disabled. To enable it, refer to [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nIf you hit this issue, you can resolve it by using SVGs as an [`<Image>`](https://nextjs.org/docs/pages/api-reference/components/image) component. Don't forget to enable [`dangerouslyAllowSVG`](https://nextjs.org/docs/pages/api-reference/components/image#dangerouslyallowsvg) in your application's `next.config.js` file, and use the `unoptimized` component prop.\n\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"/logo.svg\"\n      width={100}\n      height={100}\n      alt=\"Logo of ACME\"\n      unoptimized\n    />\n  )\n}\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NO_INLINE_SVG",
  "description": "Prevent the use of `svg` tags inline.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_POSTINSTALL_SCRIPT",
  "markdown": "# NO\\_POSTINSTALL\\_SCRIPT\n\nPrevent the use of \\`\"postinstall\"\\` script in packages.\n\nConformance Rules\n\nThis rule is available from version 1.4.0.\n\nModifying, adding, or updating any dependencies in your application triggers the execution of the `\"postinstall\"` script. Consequently, incorporating a `\"postinstall\"` script in your application's package.json leads to increased installation times for all users.\n\nIf you hit this issue, you can resolve it by removing the `\"postinstall\"` script in the `package.json` file.\n\n```\n{\n  \"scripts\": {\n    \"postinstall\": \"sleep 360\"\n  },\n}\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NO_POSTINSTALL_SCRIPT",
  "description": "Prevent the use of `\"postinstall\"` script in packages.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_DOCS_ON_EXPORTED_FUNCTIONS",
  "markdown": "# REQUIRE\\_DOCS\\_ON\\_EXPORTED\\_FUNCTIONS\n\nConformance Rules\n\nThis rule is available from version 1.8.0.\n\nAdding JSDoc to exported functions helps engineers to quickly understand the purpose and application of those functions when reviewing or using them.\n\nThis is particularly important in packages where the source code may be minified and/or obfuscated, and can save users time by avoiding the need to find usage information in external documentation.\n\nFor more information on JSDoc, see [Getting started with JSDoc](https://jsdoc.app/about-getting-started).\n\nAdditionally, for non-TypeScript projects, JSDoc can be used to declare type information for function parameters and return values. For packages, these declarations can provide type information for both JavaScript and TypeScript consumers.\n\nThe below function is a minimal example of a function that would be caught by this rule.\n\n```\nexport function appendWorld(str: string): string {\n  return str + ' world';\n}\n```\n\nThis rule will also catch references within the same file, and different ways of declaring functions. For example:\n\n```\nconst appendWorld = function (str: string): string {\n  return str + ' world';\n};\n \nexport default appendWorld;\n```\n\nThis rule non-function exports and re-exports of functions.\n\nTo resolve this issue, add a JSDoc comment to the exported function.\n\n```\n/**\n * Modifies a string by appending `' world'` to it.\n */\nexport function appendWorld(str: string): string {\n  return str + ' world';\n}\n```\n\nYou can add additional information to the JSDoc comment, such as descriptions of the function's parameters and return value.\n\n```\n/**\n * Modifies a string by appending `' world'` to it.\n *\n * @param str - The string to modify.\n * @returns The modified string.\n */\nexport function appendWorld(str: string): string {\n  return str + ' world';\n}\n```\n\nThe example above doesn't provide type information in the JSDoc comment, as this information is already provided by the function signature. When working without TypeScript, you can also provide this information using JSDoc.\n\n```\n/**\n * Modifies a string by appending `' world'` to it.\n *\n * @param {string} str - The string to modify.\n * @returns {string} The modified string.\n */\nexport function appendWorld(str) {\n  return str + ' world';\n}\n```",
  "title": "REQUIRE_DOCS_ON_EXPORTED_FUNCTIONS",
  "description": "Requires that all exported functions have JSDoc comments.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/REQUIRE_ONE_VERSION_POLICY",
  "markdown": "# REQUIRE\\_ONE\\_VERSION\\_POLICY\n\nConformance Rules\n\nDependency mismatch is a common and easily preventable problem. When there are multiple versions of a single dependency, not only is there additional complexity in maintaining different versions of that dependency, there are also code size complications with bundling. Having multiple versions of a given dependency will likely result in bloated code size as each dependency version will need to be bundled independently. Having multiple versions might also leave developers confused and lead to possible security implications.\n\nAdditionally – keeping versions consistent reduces the possibility of type mismatches across the monorepo.\n\nBy default, this rule is disabled. Enable it by [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nEnsure all `package.json` files in your monorepo that have a `dependency` are aligned to all have the same version. Version ranges are not always reliable, so it's recommended that you pin all versions to the same given version to ensure consistency.\n\nSometimes it is useful to temporarily have two or more versions of a dependency whilst incrementally migrating a monorepo to having the same version policy. In which case, it's acceptable to allowlist this rule on specific parts of the codebase using by [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize) until all packages have been successfully migrated.",
  "title": "REQUIRE_ONE_VERSION_POLICY",
  "description": "Requires all dependencies in a monorepo to have the same version policy.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/reactivity",
  "markdown": "# Svelte's Reactivity\n\n[**Svelte's Reactivity**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/03-reactivity)\n\nIn this module, we will go over how Svelte's reactivity works, covering some of the Svelte basics along the way. We will start off by creating reactive assignments, followed by reactive declarations, and finally we will learn how to use reactive statements. Keeping the DOM in sync with an app's state is one of the most important features of a modern frontend framework, and Svelte achieves this in a slick and unique way. Let's dive into how reactivity works with Svelte.\n\nIn the last module we created a new SvelteKit skeleton app, which we will be working out of today. To run this project locally, run the command `npm run dev` in the terminal. This will allow you to see all the changes you make real time. Let’s start by adding some static HTML to our root page.\n\n```\n<div>Your shopping cart has 5 items.</div>\n```\n\nHere, we are displaying our shopping cart quantity within a `<div>`. In this case, our quantity will always be five, since it is a hard coded value. To make this dynamic, we need to create a reactive assignment. To do this, we need to add a `<script>` tag, and define a variable `quantity` using `let`. We can then display this variable in our template using single curly braces. Our updated code will look like this.\n\n```\n<script>\n  let quantity = 0;\n</script>\n \n<div>Your shopping cart has {quantity} items.</div>\n```\n\nNow, for the fun part – let’s make this variable reactive. We can add a button to our HTML that will call a function `addToCart` anytime it is clicked. This function will increment `quantity` by one.\n\n```\n<script>\n  let quantity = 0;\n  function addToCart() {\n    quantity = ++quantity;\n  }\n</script>\n \n<div>Your shopping cart has {quantity} items.</div>\n<button on:click=\"{addToCart}\">Add To Cart</button>\n```\n\nIf you run this in the browser and test it out, you will see each time the value of `quantity` changes, our HTML is automatically updated with the new value. Svelte almost feels like magic here; It doesn’t use any special APIs to re-render our UI – it uses normal javascript assignment through the equals sign to notify our UI to update. This is the core idea behind how Svelte’s reactivity system works.\n\nNow, let’s talk about arrays.\n\n```\n<script>\n  let quantity = 0;\n  let inventory = [];\n  function addToCart() {\n    inventory.push(quantity);\n    inventory = inventory;\n    quantity = ++quantity;\n  }\n  let inventory = [];\n</script>\n \n<div>Your shopping cart has {quantity} items.</div>\n<button on:click=\"{addToCart}\">Add To Cart</button>\n<div>{inventory}</div>\n```\n\nIn the above code we’ve created a new variable, `inventory`, which will start off as an empty array. Next, in our `addToCart` function, prior to incrementing `quantity` we are adding it to this array. Notice after pushing `quantity` to our array, I write `inventory = inventory`. This may seem a little redundant as it may be tempting to call `inventory.push(quantity)` – but if you were to test this out in the browser, you would see that our inventory array is not updating. This is because the `Array.push` method in Javascript actually mutates an existing array, but it leaves the overall Array object itself unchanged. To actually re-render our app we need to make sure to always use the assignment operator. Adding `inventory = inventory` on the next line is necessary to trigger an update. The general takeaway here is, if you want to update a reactive variable, always use the equals sign.\n\nAssignments to properties of arrays and objects work the same way as assignments to the values themselves. Let’s look at an example of changing the property of an object.\n\n```\n<script>\n  let user = { name: 'Steph' };\n  function updateUser() {\n    user.name = 'Lee';\n  }\n</script>\n \n<button on:click=\"{updateUser}\">Update User</button>\n<div>{user.name}</div>\n```\n\nIn this example, we can update the value of `name` by writing `user.name =` . In the above example, you will see the template update with the new name, 'Lee', when the button is clicked. As long as we’re referencing a value that gets reassigned through the assignment operator, the template will update. But if we ever want to update an entire Object or Array, we’ll need to make sure to remember to update the entire thing, rather than using one of Javascript’s mutation-based methods like `Array.push`.\n\nSvelte's reactivity is not limited to variable assignments. Often, some parts of a component's state need to be computed from _other_ parts. For example, let's write the following:\n\n```\n<script>\n  let quantity = 0;\n  function addToCart() {\n    quantity = ++quantity;\n  }\n  let remaining = 10 - quantity;\n</script>\n \n<button on:click=\"{addToCart}\">Add To Cart</button>\n<div>Remaining Inventory: {remaining}</div>\n```\n\nHere, we are displaying our new variable, `remaining`, in the HTML, which is between 10 and our `quantity` value. We would expect this value to change as our `quantity` value is incremented, but if we click `addToCart`, we see that `remaining` is always `10`, even though the value of `quantity` is changing. This is because `remaining` is not being recomputed as `quantity` changes. In order to recompute `remaining` anytime `quantity` changes, we need to use reactive declarations, which are marked using a `$:`. They look like this:\n\n```\n<script>\n  let quantity = 0;\n  function addToCart() {\n    quantity = ++quantity;\n  }\n  $: remaining = 10 - quantity;\n</script>\n \n<button on:click=\"{addToCart}\">Add To Cart</button>\n<div>Remaining Inventory: {remaining}</div>\n```\n\nNow, `remaining` is reactive and will be recomputed anytime `quantity` changes. The syntax here may seem a bit unfamiliar, but it's valid JavaScript, which Svelte interprets to mean 're-run this code whenever any of the referenced values change'. Reactive statements can use as many variables as you'd like. For example, let's add another variable called `price` and a reactive statement called `totalCost` that multiplies our `quantity` and `price`.\n\n```\n<script>\n  let quantity = 0;\n  function addToCart() {\n    quantity = ++quantity;\n  }\n  $: remaining = 10 - quantity;\n  let price = 5;\n  $: totalCost = quantity * price;\n  function increasePrice() {\n    price = price + 2;\n  }\n</script>\n \n<button on:click=\"{addToCart}\">Add To Cart</button>\n<div>Remaining Inventory: {remaining}</div>\n<div>Item Price: {price}</div>\n<button on:click=\"{increasePrice}\">Increase Price</button>\n<div>Total Cost: {totalCost}</div>\n```\n\nNow, `totalCost` will update anytime `quantity` changes, and also anytime `price` changes.\n\nWe're not limited to declaring reactive values — we can also run statements reactively. For example, once again using the `$:` syntax, we can log the value of `quantity` whenever it changes:\n\n```\n<script>\n  let quantity = 0;\n  let inventory = [];\n  function addToCart() {\n    inventory.push(quantity);\n    inventory = inventory;\n    quantity = ++quantity;\n  }\n  $: console.log(`the quantity is ${quantity}`);\n</script>\n \n<div>Your shopping cart has {quantity} items.</div>\n<button on:click=\"{addToCart}\">Add To Cart</button>\n```\n\nIn the above example, every time the value of `quantity` is changed, this statement runs, and `quantity` is logged in our console. We can even group statements within a block like this:\n\n```\n<script>\n  let quantity = 0;\n  function addToCart() {\n    inventory.push(quantity);\n    inventory = inventory;\n    quantity = ++quantity;\n  }\n  let inventory = [];\n  let user = { name: 'Steph' };\n  $: remaining = 10 - quantity;\n  $: console.log(`the quantity is ${quantity}`);\n  $: {\n    console.log(`the quantity is ${quantity}`);\n    alert(`There are ${remaining} products remaining`);\n  }\n</script>\n \n<div>Your shopping cart has {quantity} items.</div>\n<button on:click=\"{addToCart}\">Add To Cart</button>\n```\n\nNow, this entire block of code will run anytime a referenced value changes. We can even take this one step further and put the `$:` in front of things like `if` blocks:\n\n```\n<script>\n  let quantity = 0;\n  function addToCart() {\n    inventory.push(quantity);\n    inventory = inventory;\n    quantity = ++quantity;\n  }\n  let inventory = [];\n  let user = { name: 'Steph' };\n  $: remaining = 10 - quantity;\n  $: console.log(`the quantity is ${quantity}`);\n  $: {\n    console.log(`the quantity is ${quantity}`);\n    alert(`There are ${remaining} products remaining`);\n  }\n  $: if (quantity >= 10) {\n    alert(`You have too many items in your cart!`);\n    quantity = 9;\n  }\n</script>\n \n<div>Your shopping cart has {quantity} items.</div>\n<button on:click=\"{addToCart}\">Add To Cart</button>\n```\n\nNow, every time `quantity` changes Svelte will check if it is greater than or equal to 10. If it is, it will execute the statements within our block.\n\nNow that we understand how reactivity works in Svelte, as well as a little Svelte-specific syntax, let’s continue in the next module with element directives.\n\n[](https://vercel.com/docs/beginner-sveltekit/element-directives)\n\n#### [Element Directives](https://vercel.com/docs/beginner-sveltekit/element-directives)\n\n[In this module, we will go over a couple different element directives and events we have at our disposal with Svelte, and how to use them.](https://vercel.com/docs/beginner-sveltekit/element-directives)",
  "title": "Svelte's Reactivity",
  "description": "In this module, we will go over how Svelte's reactivity works, covering some of the Svelte basics along the way. We will start off by creating reactive assignments, followed by reactive declarations, and then reactive statements.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_MANAGEMENT_REQUIRED_README",
  "markdown": "# PACKAGE\\_MANAGEMENT\\_REQUIRED\\_README\n\nEvery workspace is required to have a README.md file in the root of the workspace.\n\nConformance Rules\n\nA `README.md` file helps orient readers to the purpose of a workspace and instructions how to use it, which makes it straightforward for people browsing the code to understand its purpose, whether they should use it, and how to make changes to the code.\n\nAdd a `README.md` file in the workspace directory. This file can contain a description of the package, and any instructions for developers or users to build or use the package.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "PACKAGE_MANAGEMENT_REQUIRED_README",
  "description": "Every workspace is required to have a README.md file in the root of the workspace.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/working-with-components",
  "markdown": "# Working With Components\n\n[**Working With Components**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/08-components)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Changed `index.svelte` to `+page.svelte`.\n    \n\nIn this module will learn how to work with Svelte components. Up to this point we have mostly been working out of one component, our `+page.svelte` component. Typically, a Svelte project would be composed of many different components. For example, a basic website might have a header, footer, dropdown menu, etc. We would then combine these components in a tree-like structure to compose our application.\n\nIf we take a look at this diagram, we see that our parent component is the home page. Within our page components we can have child components such as a header, footer, and article component. These child components can have their own child components and so on. Our application is built out of all these different components and pages that form a tree like structure.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fbeginner-sveltekit%2Fcomponent-tree.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nNow, it’s important to make a clear distinction between pages and components. All pages are components, but not all components are pages. For instance, we have been working out of this `+page.svelte` component, which is a page component, meaning it corresponds to a specific url that we can visit in our browser. Components that define a page or a layout, such as our index page, can import and use child components, but they themselves cannot be imported as a child.\n\nFor instance, our `+page.svelte` page can import components such as our `GridTile.svelte` component, but our `GridTile.svelte` file can not import our `+page.svelte` page. If we attempt to do so, we will get an error. Now, one more time, just to really drill this into your head, pages can never be imported by another page or component.\n\nLet’s learn how to create Svelte components. Any file that ends with `.svelte` is a Svelte component. If this file lives in the `/src/routes` directory, it will be a page, meaning it has a coresponding route that we can navigate to in our browser. If the file lives in our `/src/lib` directory, it is just a basic svelte component that can be imported and used by other components. Now, let’s look at the structure of a `.svelte` file in the code snippet below. At this point, we've already been working out of a Svelte component, so it should look pretty familiar. A `.svelte` file is a superset of HTML, so just like an HTML file, it has a `<script>` tag, where we put all of our logic, the file can also contain HTML, as well as a `<style>` tag for CSS. We covered CSS two modules ago and how to install tailwind in the last module, so we will just be using tailwind from here on out.\n\nNow if you are not too familiar with component-driven development, components are reusable blocks of code that encapsulate HTML, CSS, and JavaScript in a single file. For example, a dropdown menu is an example of a component. This allows us to easily reuse the same chunk of code as many times as we want without re-writing it. It also keeps our JavaScript and CSS scoped to that specific component. In our example, we see our GridTile component displayed in our browser, and everything needed to build this component is bundled in a single re-useable file. To use a component we import it in the parent’s script tag, and use it in our HTMl like this.\n\n```\n<script>\n  import GridTile from '$lib/GridTile.svelte';\n</script>\n \n<GridTile />\n```\n\nNow, since components are re-useable, we can add this as many times as we want. Instead of copying and pasting all the code needed to make this component, you only need to add one more tag like this:\n\n```\n<script>\n  import GridTile from '$lib/GridTile.svelte';\n</script>\n \n<GridTile />\n<GridTile />\n<GridTile />\n```\n\nNow, let’s declare a variable `products` which is a list of product objects each containing a `name`, `src`, and `price`. We can use an each block to iterate through this list and display a grid tile for each item.\n\n```\n<script>\n  import GridTile from '$lib/GridTile.svelte';\n  let products = [\n    {\n      title: 'Mug',\n      cost: '$10',\n      src: '/path.png',\n    },\n    {\n      title: 'Shirt',\n      cost: '$10',\n      src: '/path.png',\n    },\n  ];\n</script>\n \n<main>\n  {#each products as product (product.title)}\n  <GridTile />\n  {/each}\n</main>\n```\n\nThe problem here is that all of the info being displayed in our component is hard coded, so we will see the same image, name and cost for each item. Just like CSS, logic is also scoped to the component. If we move into our GridTile component and try to log `products`, we will see it throws an error that `products` is not defined. How can we use the value of each `product` in our GridTile component? We can do this using properties.\n\nProps give us a way to set data in a child component from the parent. To do this, we first need to export `product` from our GridTile component like this.\n\n```\n<script>\n  export let product;\n  console.log(product);\n</script>\n \n<div class=\"h-[50vh] w-full overflow-hidden bg-indigo-600\">\n  <div class=\"relative flex h-full w-full items-center justify-center\">\n    <img\n      src=\"https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Cup-front-black.png?v=1623159405\"\n      class=\"w-full flex-none transition duration-300 ease-in-out md:w-1/2 lg:w-full\"\n      alt=\"\"\n    />\n    <div class=\"absolute left-0 top-0 text-white\">\n      <div class=\"bg-black p-3 text-2xl  font-medium\">Cup</div>\n      <div class=\"w-fit bg-black p-3 text-sm\">$20.00</div>\n    </div>\n  </div>\n</div>\n```\n\nThis will expose the variable to the parent from the child, where we can then assign its value. In our parent component we can add `product` as a param to our GridTile component and assign its value to `product` like this:\n\n```\n<script>\n  import GridTile from '$lib/GridTile.svelte';\n \n  let products = [\n    {\n      title: 'Mug',\n      cost: '$10',\n      src: '/path.png',\n    },\n    {\n      title: 'Shirt',\n      cost: '$10',\n      src: '/path.png',\n    },\n  ];\n</script>\n \n<main>\n  {#each products as product (product.title)}\n  <GridTile product=\"{product}\" />\n  {/each}\n</main>\n```\n\nNow that we’re passing in the value of each product into our grid tile component as a parameter, we will no longer get an error and the value of each product is logged in our component. We can now update the `title`, `src`, and `cost` to use the values passed in with our prop. Now if you were to run this in the browser, you would see the values of each `product` in our array displayed on the page. Anytime `product` changes in the parent, it will also update in our child component. To prove this, let's add a button to the parent component that will call an `updateCost` function which will change the cost of the first item in our array.\n\n```\n<script>\n  import GridTile from '$lib/GridTile.svelte';\n \n  let products = [\n    {\n      title: 'Cup',\n      cost: '$10',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Cup-front-black.png?v=1623159405',\n    },\n    {\n      title: 'Shirt',\n      cost: '$10',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/short-sleeve-t-shirt-0.png?v=1622902418',\n    },\n  ];\n \n  function updateCost() {\n    products[0].cost = '$50';\n  }\n</script>\n \n<button on:click=\"{updateCost}\" class=\"my-4 bg-pink-500 p-2 text-white\">\n  Change Price\n</button>\n{#each products as product}\n<GridTile product=\"{product}\" />\n{/each}\n```\n\nNow, if we click this button, when the value of the price changes in the parent, the child component is updated as well. But what would happen if we didn’t pass a value in for our prop? Let’s test this out. I’ll add another GridTile tag, this time without defining our prop product. Now we will be thrown an error. We can fix this by giving our prop a default value. This way, if the parent component does not set the value, it will default to whatever we set in the child component. Let's move back into our GridTile component and give our property `product` a default value like this:\n\n```\n<script>\n  export let product = {\n    title: 'No product provided',\n    src: 'https://img.icons8.com/ios/500/no-image.png',\n    cost: '$0',\n  };\n</script>\n \n<div class=\"h-[50vh] w-full overflow-hidden bg-indigo-600\">\n  <div class=\"relative flex h-full w-full items-center justify-center\">\n    <img\n      src=\"{product.src}\"\n      class=\"w-full flex-none transition duration-300 ease-in-out md:w-1/2 lg:w-full\"\n      alt=\"\"\n    />\n    <div class=\"absolute left-0 top-0 text-white\">\n      <div class=\"bg-black p-3 text-2xl  font-medium\">{product.title}</div>\n      <div class=\"w-fit bg-black p-3 text-sm\">{product.cost}</div>\n    </div>\n  </div>\n</div>\n```\n\nNow, if the GridTile component is ever used without setting the value of `product`, the default values will be displayed.\n\nOne last thing. Here, the property name, `product`, and the value it is being set to in the parent, also `product`, have the same name. Because of this, we can use shorthand. Instead of saying `product={product}`, we can say `{product}`.\n\n```\n<main>\n  {#each products as product}\n  <GridTile {product} />\n  {/each}\n</main>\n```\n\nNow we know how to pass data from the parent component into the child, but what if we want to pass from child to parent? We will go over how to do this in the next module.\n\n[](https://vercel.com/docs/beginner-sveltekit/data-binding-and-event-handling)\n\n#### [Data Binding and Event Forwarding](https://vercel.com/docs/beginner-sveltekit/data-binding-and-event-handling)\n\n[In this module, we will learn how to pass data from a child component to the parent using data bindings and event handling.](https://vercel.com/docs/beginner-sveltekit/data-binding-and-event-handling)",
  "title": "Working With Components",
  "description": "In this module will learn how to create Svelte components and how they work.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/endpoints",
  "markdown": "# Endpoints\n\n[**Endpoints**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/16-endpoints)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Updated from using the old file based router to the new folder based router, changed HTTP verbs to uppercase, and updated to return the new `Response` object.\n    \n\nAt this point in the course we've gone over routing to pages, but we can also route to endpoints. Endpoints are server-side routes, so They provide \"backend\" functionality within the SvelteKit application providing a great place to, for example, make an external API request.\n\nEndpoints are modules written in `.js` or `.ts` files that export functions corresponding to HTTP methods. These endpoint files become API routes in our application.\n\nSimilarly to pages, you can define routes with a `+server.js` file, which gives you full control over the response. These are referred to as API routes, or endpoints. `+server.js` files export functions corresponding to HTTP verbs like `GET`, `POST`, `PATCH`, `PUT` and `DELETE` that take a [`RequestEvent`](https://kit.svelte.dev/docs/types#public-types-requestevent) argument and return a [`Response`](https://developer.mozilla.org/docs/Web/API/Response) object. These endpoints live in the `/src/routes/api` directory. Let's create and endpoint that we can fetch product data from. In our api directory, let's add a server route (`/src/api/getProduct/+server.js`).\n\nAs mentioned earlier, endpoints export request handler functions corresponding to HTTP methods. Request handlers make it possible to read and write data that is only available on the server. For example, within this file we can export a `GET`, `POST`, `PATCH`, `DELETE` ... or any valid HTTP method. Endpoints also have access to `fetch` in case you need to request data from external APIs. For example, within our endpoint file, we can make a `GET` request on this route by exporting an async function called get like this.\n\n```\nexport async function GET() {}\n```\n\nNow, we can reach out to a database and retrieve some data. Since we do not have a database set up, let's instead return an object with some hard coded data representing the response. In our example, let's declare our value product, and return the product in our body like this.\n\n```\nimport { error } from '@sveltejs/kit';\n \nexport async function GET() {\n  const product = {\n\t\tname: 'sticker'\n\t\tsrc: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Cup-front-black.png?v=1623159405'\n\t\tprice: '$10'\n\t};\n  if (!product) {\n    throw error(400, 'No product exists.');\n  }\n  return new Response(JSON.stringify(product));\n}\n```\n\nThe first argument to `Response` can be a `ReadableStream` which makes it possible to stream large amounts of data.\n\nIf an error is thrown (`throw error(...)` or an unexpected error), the response will be a JSON representation of the error or a fallback error page. This is different than the `+error.svelte` page discussed in the previous module. In this instance, the error page can be customised in `src/error.html`.\n\nFor security reasons, we typically need to be more mindful of what information we expose in client side code. However, since this is all server side, we can reach out directly to a database and use sensitive information here usually provided by environment variables, as an example.\n\nBy exporting POST/PUT/PATCH/DELETE handlers, `+server.js` files can be used to create a complete API, which we have done in the above example. We can receive data from this api using fetch from any page, component or layout like this:\n\n```\nlet product = {};\n \nasync function getProduct() {\n  const response = await fetch('/api/getProduct');\n  product = await response.json();\n}\n```\n\nCurrently, our endpoint is only returning our sticker data. However, we want it to use a dynamic parameter like our product page does so we can dynamically fetch data associated with whatever product page we are currently on. We can use dynamic params with our endpoints like we do with pages. Let's re-name our endpoint `/[product]/+server.js`. Now when we fetch data from this endpoint, instead of fetching data from `/api/getProduct` we will fetch it from `/api/[product]` where `[product]` can be any product name. We will pass in the name of the product page we are currently on using `$page.params` like this:\n\n```\nimport { page } from '$app/stores';\n \nlet product = {};\n \nasync function getProduct(name) {\n  const response = await fetch(`/api/${name}`);\n  product = await response.json();\n}\n \n$: {\n  getProduct($page.params.name);\n}\n```\n\nNow, we can access the product name passed into our endpoint using the `params` parameter like this:\n\n```\nimport { error } from '@sveltejs/kit';\n \nexport async function GET({params}) {\n  const productName = params.product;\n  const product = {\n\t\tname: 'sticker'\n\t\tsrc: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Cup-front-black.png?v=1623159405'\n\t\tprice: '$10'\n\t};\n  if (!product) {\n    throw error(400, 'No product exists.');\n  }\n  return new Response(JSON.stringify(product));\n}\n```\n\nNow we could use this to reach out to a database and fetch data associated with this specific product. We don't have a database set up, but for the sake of example that might look something like this.\n\n```\nimport { error } from '@sveltejs/kit';\nimport db from database;\n \nexport async function GET({params}) {\n  const productName = params.product;\n  const product = db.collection.find(productName)\n  if (!product) {\n    throw error(400, 'No product exists.');\n  }\n  return new Response(JSON.stringify(product));\n}\n```\n\nWe are going add a hard coded array of products, and use `productName` to search this array and return the correct product to sort of mock a database.\n\n```\nimport { error } from '@sveltejs/kit';\n \nconst products = [\n  {\n    name: 'cup',\n    price: '$10',\n    quantity: 1,\n    src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Cup-front-black.png?v=1623159405',\n  },\n  {\n    name: 'shirt',\n    price: '$10',\n    quantity: 1,\n    src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/short-sleeve-t-shirt-0.png?v=1622902418',\n  },\n  {\n    name: 'jacket',\n    src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/bomber-jacket-0.png?v=1622902777',\n    price: '$80.00',\n    quantity: 1,\n  },\n  {\n    name: 'sticker',\n    src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Sticker-mock.png?v=1623256356',\n    price: '$8.00',\n    quantity: 1,\n  },\n];\n \nexport async function GET({ params }) {\n  const productName = params.product;\n  let product = products.find((product) => product.name === productName);\n \n  if (!product) {\n    throw error(400, 'No product exists.');\n  }\n  return new Response(JSON.stringify(product));\n}\n```\n\nAs you can see, page endpoints allow you to run code server side in Svelte by exporting an async function. It is common for a page or layout to need to load data before it can be rendered. In the next module, we will learn a more convenient way to load data into pages and layouts.\n\n[](https://vercel.com/docs/beginner-sveltekit/loading)\n\n#### [Loading Data](https://vercel.com/docs/beginner-sveltekit/loading)\n\n[In this module, we will learn how to fetch and manipulate data before rendering the page using the load function.](https://vercel.com/docs/beginner-sveltekit/loading)",
  "title": "Endpoints",
  "description": "In this module, we will learn how to create server-side routes using SvelteKit endpoints.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/routing",
  "markdown": "# Routing\n\n[**Routing**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/14-routing)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Updated from using the old file based router to the new folder based router.\n    \n\nSvelteKit includes a folder based router that updates the page contents after intercepting navigations. This means that the folder structure of the `/src/routes` folder is going to be the route structure of our application.\n\nRight now, the only files we have within our routes folder is our `+page.svelte` file and `+layout.svelte` file. Our `+page` file is what we've mostly been working out of up to this point. If we go to our browser, this is the page we see at our root url. Let's go ahead and create a new page in our routes folder. First, we need to add a new folder. Let's name it `products`. Within this folder we can add a `+page.svelte` file and paste in some code that will display different products on the page. Now, if we go back to our browser and navigate to `/products`, we will see our new products page is being displayed.\n\nAs we can see, the folder name determines the route. If we change the name of our folder from 'products' to 'shop', we see there is no longer a page at `/products` and instead it lives at `/shop`.\n\nIn order to create nested routes, we need to create a folder for each sub-route. For example, if we are going to have a collection of products and we want each product to have a `/product` sub-route, we can do this by creating a new folder within our `products` folder called `product`. Now, let's add a product page within this folder by adding another folder called `cup` with a `+page.svelte` file within it. In this page, let's add some code to display our cup product info. Now, if we go to our browser and view the page at the route `/products/product/cup`, we will see our `cup` page is being displayed.\n\nWe can add as many folders as we want within this `product` folder and they will all be a sub-route of `/products/product`. We can even add more folders within the product folder to created deep nested routes. For instance, if we add another folder within our product folder called `apparel` and add yet another folder within that one called `t-shirt` and a page file, we will see this page displayed at the route `products/product/apparel/t-shirt`.\n\nNow, this is great, but if we were to visit `/products/product/apparel`, we will get an error page because this route does not exist. Every folder within our routes folder can have a `+page.svelte` file within it which will become the root page of that route. If we add `+page.svelte` within our `apparel` folder, a page now exists at this route.\n\nWe can also use advanced routing with SvelteKit using dynamic parameters. For example, our product pages will all be the same structure, and the only thing changing is the content. Rather than duplicating all the code for each page, we can pass a dynamic parameter in the url, such as the product's name, and we can use that param to then fetch the data associated with that product name and display the specified product info on our page.\n\nTo do this, we can change the name of our `cup/+page.svelte` page to be the name of dynamic parameter within square brackets. In this case, our dynamic parameter is the product's name, so we can update the file name to be `[name]/+page.svelte`. Now, within this page, we can access that dynamic parameter from the page variable in the package `$app/stores`. In our script, let's import `page` from `$app/stores`, and our dynamic parameter will be under an object called `params`. Let's also add an `<h1>` tag displaying the current product name.\n\n```\n<script>\n  import { page } from '$app/stores';\n</script>\n \n<h1>Our Product name is: {$page.params.name}</h1>\n```\n\nNow, in our browser if we go to the path `/product/cup`, we will see that our page is displaying our dynamic parameter, `name`, which in this case is 'cup'. If we change the route to `/product/sticker`, the dynamic param will update to 'sticker'. Now we can use this name to dynamically set the pages data. Let's create an array of available products and use the dynamic parameter to dynamically update the value of `product`.\n\n```\n<script>\n  import { page } from '$app/stores';\n  let product;\n  let products = [\n    {\n      name: 'Sticker',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Sticker-mock.png?v=1623256356',\n      price: '$8.00',\n      quantity: 1,\n    },\n    {\n      name: 'Cup',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Cup-front-black.png?v=1623159405',\n      price: '$10.00',\n      quantity: 1,\n    },\n    {\n      name: 'Jacket',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/bomber-jacket-0.png?v=1622902777',\n      price: '$80.00',\n      quantity: 1,\n    },\n  ];\n  $: {\n    product = products.find((product) => product.name === $page.params.name);\n  }\n</script>\n \n<h1>{product.name}</h1>\n<div>Cost: {product.price}</div>\n<img src=\"{product.src}\" />\n```\n\nNow the value of `product` updates when we change the route, and we see this reflected in the pages contents! This is a pretty basic example, but dynamic parameters are very powerful. In the future, you may use this parameter to fetch data from a database or api.\n\nThat sums up SvelteKit's client based routing. In the next module we will learn about layouts.\n\n[](https://vercel.com/docs/beginner-sveltekit/layouts)\n\n#### [Layouts](https://vercel.com/docs/beginner-sveltekit/layouts)\n\n[In this module, we will learn how to use the SvelteKit layout component.](https://vercel.com/docs/beginner-sveltekit/layouts)",
  "title": "Routing",
  "description": "In this module, we will learn how SvelteKit's built in folder based router works.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/getting-started",
  "markdown": "# Getting Started\n\n[**Getting Started**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/02-getting-started)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Updated to use the new default demo project.\n    \n\nIn this module, we are going to create a new SvelteKit project and explore the SvelteKit demo app. We will take a deep dive into the codebase to get a basic understanding of what's going on.\n\nLet's start by creating a demo app and running it locally.\n\nIf you do not have Node.js installed, you'll need to do that first. If you are unsure what version of Node.js you have, you can check by running the command `node -v` in your terminal. If you need to update Node.js, or you don't have it installed at all, you can do that at [nodejs.org](https://nodejs.org/).\n\nTo install Node.js, click the button that says \"current\" and then install it onto your computer.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fbeginner-sveltekit%2Fnodejs-home-page.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nNext, initiate a new SvelteKit project by running the following command in our terminal:\n\n```\nnpm create svelte@latest svelteKit-app\n```\n\n`svelteKit-app` is the name of your project (and the folder on your computer).\n\nAfter running this command, we are prompted to answer a few questions in the terminal.\n\n1.  We need to install this `create-svelte@next` package, so the terminal asks if we wish to proceed. We do, so we can respond with ‘y'. Now, SvelteKit is installed and we can finish creating our project.\n2.  Next, we are asked which template we would like to start from. For this example let's select \"SvelteKit demo app\". This will create a new SvelteKit project with a counter, todo list, and routing for us to look through and learn from. In the future you can start from a blank project by selecting the second option \"Skeleton project\", but for learning purposes we will start with the demo app.\n3.  We are then prompted to answer a few more questions, to which your responses do not really matter. Feel free to set up your project however you prefer. In this example, however, we will respond 'no' to TypeScript, 'yes' to ESLint and Prettier, which is a code formatter, and no testing currently.\n\nNext, move into our project directory using the `cd` command and install dependencies with `npm install`. The next recommended step that our terminal gives us is to commit the project to GitHub, however, we are going to skip this step since we are just using this demo project for learning purposes. We will go over how to commit your work to GitHub later in the course when we go over [adapters](https://vercel.com/docs/beginner-sveltekit/adapters) and deploying to Vercel.\n\nFinally, we can run the following command to view the demo locally in our browser.\n\nNow that our demo app is running in the browser, let's go through each file and get an understanding of what's going on. Looking in the browser, we see we have our welcome page with a counter component.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fbeginner-sveltekit%2Fdemo-app-home-page.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nIf you click on this counter, you'll notice it has a nice animation. We will go over [animations](https://vercel.com/docs/beginner-sveltekit/animations-and-transitions) with SvelteKit in a later module. At the top of our app, we have a navigation bar. If we click 'about' and 'todos', we will observe a route change. We will cover [routing](https://vercel.com/docs/beginner-sveltekit/routing) in detail in a future video.\n\nLet's explore the code.\n\n1.  First, we have `node_modules`, which is normal if you are working with a Node.js application. This folder includes all of the dependencies that are installed through your `package.json` file.\n2.  Moving into `package.json`, we see a few dependencies, but the only one we absolutely need to create an application is `svelte`. All of the other dependencies are optional. For example, we have this `adapter-auto`, which we actually will end up using later, but is not necessarily required. I'll go over what this is later in the course when we cover adapters and deploying our app.\n3.  `svelte.config.js` is the configuration file for SvelteKit. We will work out of this file a bit in the future when adding SCSS and working with adapters.\n\nNow, let's dive into our folders.\n\n1.  First we have our `static` folder. This folder is the home of our static assets such as images, icons, and more.\n2.  Next, we have our source or `src` folder. This is where we will mostly be working out of. Within this folder, we have our `lib` folder, `routes` folder, `app.css`, `app.html`, and our `hooks.js`. Let's dive a little deeper into these.\n\nFirst, we have this `hooks.js` file, which is not something we need to be too concerned with. It is just a JavaScript file containing a single method for parsing cookies and looking for a user ID. It does not really involve Svelte and is just some logic to make the demo work correctly. This file is not present in a skeleton project.\n\nWe also have `app.html` in our `src` folder, which is the main entry point for the application. Notice we have some template replacement tags. Here we have `%sveltekit.head%` which takes our `meta` data and inserts it here. We also have `%sveltekit.body%`, which is basically a `<div>` that Svelte will insert the entire application into.\n\nLet's open our `routes` folder and move into our `+layout.svelte` file. Every file within the routes folder corresponds to a route, unless it is a layout. Within our layout file, notice that we are importing our `app.css`. This layout will be applied to the entire app, making it an appropriate place to import our default CSS.\n\nThe most important thing to point out in this file is our `<slot/>` tag. Slot is where everything is inserted into, such as any of our page routes. The only requirement of a layout is that it contains a slot tag. We will take a deep dive into [layouts](https://vercel.com/docs/beginner-sveltekit/layouts) and [slots](https://vercel.com/docs/beginner-sveltekit/slots) in future videos.\n\nNext, let's take a look at `+page.svelte`. This is an example of a page, so the layout we just looked at will be applied here. This is actually our _root_ page, so if we look in our browser we see it lives at our root URL. We also see the header, which is part of our layout, as well as all the content written within our `+page.svelte` file. Looking at the code, we see that our counter component is imported, as we'd expect, and we also have this `<svelte:head>` tag which allows us to insert metadata.\n\nWe also have an `/about/+page.svelte` page within our `routes` folder. Anytime a file exists in the `routes` folder, a URL is automatically generated for the page. This is a bit different, however, because `/about` displays our `+page.svelte` within the `about` folder. This is because SvelteKit uses file-based routing. We will talk about [routes](https://vercel.com/docs/beginner-sveltekit/routing) in-depth in a future module. Within our `todos` folder we see another interesting file, `+page.server.js`. This is a server-side route, or an endpoint, which we will cover more in the future.\n\nComponents that are not pages can be found within the `lib` folder. For example, we have a JavaScript file for form validation, and we also have reusable components written in `.svelte` files, which are a superset of HTML files.\n\nIn our `.svelte` files, we have a `<script>` tag and `<style>` tag – as well as HTML. The styles within `.svelte` files are scoped to the specific file. For example, down in the style tag within our `/lib/header/Header.svelte` file, we are styling our `<header>`. In this case, it is talking about the header _within_ this single file. We can use `<header>` anywhere else in the app and it will not get these styles. Scoping CSS offers a lot of benefits which we will cover in the [CSS](https://vercel.com/docs/beginner-sveltekit/css) module.\n\nNow that we understand our project structure and have a basic idea of what's going on in our code base, let's get into the Svelte fundamentals. In the next module, we will start by learning about Svelte's reactivity.\n\n[](https://vercel.com/docs/beginner-sveltekit/reactivity)\n\n#### [Svelte's Reactivity](https://vercel.com/docs/beginner-sveltekit/reactivity)\n\n[In this module, we will go over how Svelte's reactivity works, covering some of the Svelte basics along the way. We will start off by creating reactive assignments, followed by reactive declarations, and then reactive statements.](https://vercel.com/docs/beginner-sveltekit/reactivity)",
  "title": "Getting Started",
  "description": "In this video you will learn how to create a new SvelteKit project. We will explore the SvelteKit demo app to get familiar with the codebase.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/adapters",
  "markdown": "# Adapters\n\n[**Adapters**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/19-adapters)\n\n[![](https://assets.vercel.com/image/upload/v1689795055/docs-assets/static/topics/icons/svelte.svg)Deploy our SvelteKit template, or view a live example.](https://vercel.com/templates/svelte/sveltekit-boilerplate)\n\nBefore we can deploy our project, we have to adapt it based on where we want to host it. Svelte's solution to becoming serverless-first in a world with many serverless platforms is through the use of adapters. While these serverless providers such as Vercel and Netlify offer similar functionality, they each have their own vendor-specific implementation. In order to ensure that Svelte runs smoothly with each of them, Svelte provides us with adapters. These adaptors are plugins that take your app as input during build and generates an output suitable for deployment on a specific platform.\n\nIf we take a look at SvelteKit's documentation on adapters, we see it provides adapters for Vercel, Netlify, Cloudflare pages, as well as two non-service based adapters: `adapter-static` and `adapter-node`. Depending on where you are hosting your app, you must import the appropriate adapter. For instance, if you were to host your app using Vercel, which we're going to do in a bit, you would first need to install the `vercel-adapter`. Recently, however, a new adaptor was created, `adapter-auto`. This is the default adapter, so anytime you create a new SvelteKit project this adapter will already be installed, and makes deploying SvelteKit apps feel like magic.\n\nIf we move into our `svelte.config.js` file, we will see that we are importing `adapter-auto` and using it in this project. There's no additional work needed on our end. We do not need to install any adapters ourselves, and with `adapter-auto` this app can already be hosted on Vercel, as well as other platforms. Now, if you're familiar with SvelteKit you're probably wondering, \"Hey, Don't we need to install the `vercel-adapter`?\" A few months ago this would have been true. You would have needed to use the `vercel-adapter` in your `svelte.config.js` file before deploying it. Now we have the `adapter-auto`, this step is unnecessary. When we deploy this to Vercel, the adapter will automatically choose the appropriate adapter for the current environment. In our case, when we deploy to Vercel, it will detect that we are using Vercel and it will add the `vercel-adapter` for us! The `vercel-adapter` will then create a Vercel app, using a function for dynamic server rendering.\n\nLet's go ahead and test this out by deploying it to Vercel. First, I'm going to create a new repo on GitHub for this project and commit the code to it.\n\nNow if we head to [vercel.com](http://vercel.com/) we can deploy this instantly. In our Vercel dashboard we can click this button that says \"deploy now\", and you'll notice that our new repo is now available for deployment. We will import that repo and then click 'deploy'! Now our `adapter-auto` is detecting that we are using Vercel and adding the `vercel-adapter` for us. From here, Vercel is doing all of the configuration behind the scenes, and just like that the app is deployed! You can click on it to check it out. This app is no longer running locally on the computer. Anyone can come visit it now! When deploying a SvelteKit app to Vercel using the default `adapter-auto`, it is important to note that not all platforms are supported by `adapter-auto`.\n\nIn the case that you encounter a platform that is not supported by adapter auto, you may need to add that platforms adapter yourself, or you may need to use one of the non-service based adapters. Let's learn how to add the `adapter-node` to our project. To do this install by running the command `npm i -D @sveltejs/adapter-node`. Then we will swap our `adapter-auto` for `adapter-node` in our `svelte.config.js` file. Now that we have the `adapter-node` installed, when we build our app it will generate a self-contained Node app inside the `build` directory. Let's go ahead and run the command `npm run build` in our terminal and look at what `adapter-node` generates.\n\nUp at the top of our project directory we have this `.svelte-kit` folder which contains our svelte code input. Depending on what adapter we use, this code will be used as the input to generate an output in our build folder. If we open the build folder up, we can see our compiled code. Notice there is no trace of Svelte. In this case, we are using the `adapter-node`, so the output will be a straight up Node.js app which can be hosted anywhere that hosts node.js. Within the build folder we see we have an `index.js` file, which is our main node server. Since this is just a node application, we are able to run it in production by running the command `node build/index.js`. Now, if we check this out in the browser we can see a production build of our site running in node!\n\nContinue learning SvelteKit on Vercel:\n\n[](https://vercel.com/docs/beginner-sveltekit/conclusion)\n\n#### [Conclusion](https://vercel.com/docs/beginner-sveltekit/conclusion)\n\n[This concludes the course! Thanks for learning!](https://vercel.com/docs/beginner-sveltekit/conclusion)",
  "title": "Adapters",
  "description": "In this module, we will learn how to adapt our app and deploy it to Vercel.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/layouts",
  "markdown": "# Layouts\n\n[**Layouts**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/15-layouts)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Updated from using the old file based router to the new folder based router. Also updated to use grouped layouts in place of named layouts.\n    \n\nIn the last module we went over routing to our pages, and up to this point, we've treated our pages as standalone components: upon navigation, the existing page is destroyed, and a new one takes its place. But this is not necessarily the case. Oftentimes, there are elements that should be displayed on every page. For example, you may want a header and footer to always exist throughout the app. Thankfully with SvelteKit, this is very intuitive to do. Instead of adding these to every single page file, we can use layout components.\n\nPages can be wrapped in a layout component using the `<slot>` tag, which indicates where the child component should be placed within the parent layout. If you're unfamiliar with slots, you can check out one of my previous modules in this course on the topic.\n\nTo create a layout component that applies to every page, in our routes folder, we need to create a file called `+layout.svelte`, which you may remember making back when we covered CSS. This layout component needs to contain a single `<slot>` tag, but we can add whatever markup, styles, and behavior we want as well.\n\nWithin our layout file we have some html and tailwind classes that are creating our header and shopping cart, as well as some logic to show and hide our cart. This means that every single page in our application will display our header, and will also be able to open and close our shopping cart. If we check out some different routes we can confirm this. Now, we can put anything we want in this file, the only rule is that it must contain a slot tag for our pages to be inserted into. Just remember, whatever you add to this layout will be shown on every page in your app.\n\nWe can also create nested layouts similar to how we used nested routes. Each folder within our routes folder can have its own layout. In our example, we created a root layout that will be applied to every page in our app, but we can also create a layout file in our product folder that will only be applied to the pages within the folder. Let's create a `+layout.svelte` file in our product folder to add a suggested items section to these pages.\n\n```\n<script>\n  import CollectionCard from '$lib/CollectionCard.svelte';\n  import { setContext } from 'svelte';\n  let newItems = [\n    {\n      name: 'Graphic T',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Front-NoModel_ec3be051-d579-4c03-b55b-64449d0b0445.png?v=1623255893',\n      price: '$60.00',\n    },\n    {\n      name: 'Jacket',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/bomber-jacket-0.png?v=1622902777',\n      price: '$80.00',\n    },\n  ];\n  setContext('newItemsContext', newItems);\n</script>\n \n<slot />\n<div class=\"pb-40\">\n  <CollectionCard />\n</div>\n```\n\nNow if we check this out in our browser, we only see our root layout, but if we navigate to `/product/cup`, we see both the root layout as well as our product layout. It is important to remember that adding a nested layout will not cancel out the root layout, it will display both.\n\nBy default, the layout hierarchy mirrors the route hierarchy. However, there may be some instances where this isn't necessarily what you want. For instance, within our `src/routes/product/apparel` directory we have two pages, our root page and `/t-shirt` page. What if we wanted to add two different layouts to each of these pages?\n\nLet's go ahead and try to do this. First let's add the following layout to our `apparel` folder:\n\n```\n<div class=\"\">\n  <div class=\"p-4 text-center font-bold text-white\">\n    Hoodies on sale for a limited time only!\n  </div>\n  <slot />\n</div>\n```\n\nAnd within our `/t-shirt` directory we will add another layout like this:\n\n```\n<div class=\"\">\n  <div class=\"p-4 text-center font-bold text-white\">\n    Hurry, this product is almost out of stock!\n  </div>\n  <slot />\n</div>\n```\n\nNow, if we navigate to `/product/apparel` we see our layout that says 'Hoodies on sale for a limited time only!', and if we navigate to `/product/apparel/t-shirt` we see both of our new layouts. This is because the layout in the `/t-shirt` directory inherits the parent layout in the `/apparel` directory. However, this is not what we want. We only want the layout within the `/t-shirt` directory to apply to this page.\n\nTo do this, we can group these routes with a directory whose name is wrapped in parentheses. Let's go ahead and move the root page and layout into a directory called `(app)` and our `t-shirt` directory into one called `(item)` like this:\n\n```\nsrc/routes/product/apparel\n├ (app)/\n│ ├ +page.svelte\n│ └ +layout.svelte\n└ (item)/\n  ├ t-shirt/\n  │ └ +page.svelte\n  └ +layout.svelte\n```\n\nDirectories whose names are wrapped in parentheses, such as `(app)` and `(item)`, do not affect the URL pathname of the routes inside them. Now, any page our layout from one group will not inherit any layout from the other group.\n\nPages can break out of the current layout hierarchy on a route-by-route basis. To exemplify this, let's add another page, `/cup/+page.svelte`, within our `(item)` group. Ordinarily, this would inherit the root layout, the `/product` layout, and the `/(item)` layout. We can reset to one of those layouts by appending @ followed by the segment name — or, for the root layout, the empty string. For example, if we only want to inherit the root layout, we can name our page like this: `+page@.svelte`. Now in the browser if we route to `/product/apparel/cup` we do not see the product or (item) layouts, only the root layout is present. If we update our page name to be `+page@product.svelte`, we now see both the root and `product` layout, but not our `(item)` layout.\n\nLike pages, layouts can break out of their parent layout hierarchy, using the same technique. For example, a `+layout@.svelte` component would reset the hierarchy for all its child routes.\n\nThe last thing to go over in this module is error pages. If a page fails to load, SvelteKit will render an error page. For example, it we try to route to a page that doesn't exist, we will get this default error page. When a page fails to load, SvelteKit will render the error page within the layout, if one exists. If you do not supply an error page, SvelteKit will use the default one, which we see here.\n\nYou can customize this page by creating error components alongside your layout and page components. Just like for layouts, each folder within the routes folder can have an error page. We create these error components by naming a file `+error.svelte`. Let's create an error page in the root of our routes folder.\n\n```\n<h1>There was an error loading this page</h1>\n```\n\nThis is the root error page, which means it will be displayed for all pages unless a different error page is specified.\n\nThat covers everything layout related. We now have an efficient way to share specific components, styles, and logic throughout our app without destroying it on each page change. In the next module, we will learn about SvelteKit endpoints.\n\n[](https://vercel.com/docs/beginner-sveltekit/endpoints)\n\n#### [Endpoints](https://vercel.com/docs/beginner-sveltekit/endpoints)\n\n[In this module, we will learn how to create server-side routes using SvelteKit endpoints.](https://vercel.com/docs/beginner-sveltekit/endpoints)",
  "title": "Layouts",
  "description": "In this module, we will learn how to use the SvelteKit layout component.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/prefetch",
  "markdown": "# Prefetch\n\n[**Prefetch**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/18-prefetch)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Prefetch attribute changed from `sveltekit:prefetch` to `data-sveltekit-prefetch`.\n    \n\nSvelteKit uses code-splitting to break up your app into small chunks of code, one per route. This ensures fast startup times since your app only has to load the code that you currently need. We can ensure even faster startup times by using SvelteKit's `prefetch` anchor on link tags. This prefetches the code for a page before you actually route to it.\n\nFor example, let's look at our dynamic route `/product/cup`. In order to render this page, we need to fetch the product's data, which we can't do until we know the product's name. This may result in a lag as the browser waits for the data to come back from the server, especially if we're fetching a lot of data. We can mitigate this delay by _prefetching_ the data.\n\nIn our GridTile component, we can add a prefetch attribute by typing `data-sveltekit-prefetch` like this.\n\n```\n<a data-sveltekit-prefetch href=\"/product/cup\">\n  Cup\n</a>\n```\n\nThis attribute will cause SvelteKit to run the page's `load` function as soon as the user hovers over the link (on a desktop) or touches it (on mobile), rather than waiting for the `click` event to trigger navigation.\n\nTo visualize this, we can log our `product` value in the `load` function from our `/product/[name]/+page.js` file. Now back in our app, we will see when we hover over a product, the data for that product is being logged in the console. This is because the page's data is now being prefetched. This means that if the user then navigates to that page, the page will load almost instantaneously.\n\nWe can even apply this behaviour across the board by adding the attribute to a parent element. In our root layout we can add `data-sveltekit-prefetch` to the outermost div, and now every page will be pre-fetched.\n\nTypically, prefetching buys us an extra couple of hundred milliseconds, which is the difference between a user interface that feels laggy, and one that feels snappy.\n\nPrefetching helps make your app feel snappy. Now that we have a product built out that feels fast and looks good, let's learn how to deploy it to Vercel using adapters in the next module.\n\n[](https://vercel.com/docs/beginner-sveltekit/adapters)\n\n#### [Adapters](https://vercel.com/docs/beginner-sveltekit/adapters)\n\n[In this module, we will learn how to adapt our app and deploy it to Vercel.](https://vercel.com/docs/beginner-sveltekit/adapters)",
  "title": "Prefetch",
  "description": "In this module, we will learn how to prefetch data before routing to the page to make our app feel extra snappy.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/REACT_STABLE_CONTEXT_PROVIDER_VALUE",
  "markdown": "# REACT\\_STABLE\\_CONTEXT\\_PROVIDER\\_VALUE\n\nConformance Rules\n\nWhen non-stable values (i.e. object identities) are used as the `value` prop for `Context.Provider`, React will trigger cascading updates to all components that use this context value on each render, causing needless re-renders (affecting application performance) or causing unintended consequences that may negatively affect the user-experience.\n\nExamples of incorrect code for this rule:\n\n```\nreturn <SomeContext.Provider value={{ foo: 'bar' }}>...</SomeContext.Provider>;\n```\n\nExamples of correct code for this rule:\n\n```\nconst foo = useMemo(() => ({ foo: 'bar' }), []);\n \nreturn <SomeContext.Provider value={foo}>...</SomeContext.Provider>;\n```\n\nOne way to fix this issue may be to wrap the value in a `useMemo()`. If the value is a function then `useCallback()` can be used as well. See the above examples for a reference on how you might fix this by wrapping with `useMemo`.",
  "title": "REACT_STABLE_CONTEXT_PROVIDER_VALUE",
  "description": "Prevent non-stable values from being used in React Context providers that could cause unnecessary re-renders.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/ESLINT_RULES_REQUIRED",
  "markdown": "# ESLINT\\_RULES\\_REQUIRED\n\nConformance Rules\n\nThis Conformance check requires that ESLint plugins are configured correctly in your application, including:\n\nThese plugins help to catch common issues, and ensure that ESLint is set up to work with TypeScript where applicable.\n\n```\nA Conformance error occurred in test \"ESLINT_RULES_REQUIRED\".\n \nThese ESLint plugins must have rules configured to run: @typescript-eslint and import\n \nTo find out more information and how to fix this error, visit\nhttps://vercel.com/docs/workflow-collaboration/conformance/rules/ESLINT_RULES_REQUIRED.\n \nIf this violation should be ignored, add the following entry to\n/apps/dashboard/.allowlists/ESLINT_RULES_REQUIRED.allowlist.json and\nget approval from the appropriate person.\n \n{\n  \"testName\": \"ESLINT_RULES_REQUIRED\",\n  \"reason\": \"TODO: Add reason why this violation is allowed to be ignored.\",\n  \"location\": {\n    \"workspace\": \"dashboard\"\n  },\n}\n```\n\nThis check requires that certain ESLint plugins are installed and rules within those plugins are configured to be errors. If you are missing required plugins, you will receive an error such as:\n\n```\nESLint configuration is missing required security plugins:\n  Missing plugins: eslint-comments\n  Registered plugins: import and @typescript-eslint\n```\n\nIf all the required plugins are installed but some rules are not configured to run or configured to be errors, you will receive an error such as:\n\n```\n`eslint-comments/no-unlimited-disable` must be specified as an error in the ESLint configuration, but is specified as off.\n```\n\nAs a part of this test, some rules are forbidden from being disabled. If you disable those rules, you will receive an error such as:\n\n```\nDisabling these ESLint rules is not allowed.\nPlease see the ESLint documentation for each rule for how to fix.\neslint-comments/disable-enable-pair\neslint-comments/no-restricted-disable\n```\n\nFor more information on ESLint plugins and rules, see [plugins](https://eslint.org/docs/latest/user-guide/configuring/plugins) and [rules](https://eslint.org/docs/latest/user-guide/configuring/rules).\n\nThe recommended approach for configuring ESLint in a monorepo is to have a shared ESLint config in an internal package. See the [Turbo docs on ESLint](https://turbo.build/repo/docs/handbook/linting/eslint) to get started.\n\nOnce your monorepo has a shared ESLint config, you can add a `.eslintrc.cjs` file to the root folder of your workspace with the contents:\n\n```\nmodule.exports = {\n  root: true,\n  extends: ['eslint-config-custom/base'],\n};\n```\n\nYou should also add `\"eslint-config-custom\": \"workspace:*\"` to your `devDependencies`.",
  "title": "ESLINT_RULES_REQUIRED",
  "description": "Requires that a workspace package is configured with required ESLint plugins and rules",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_ASSIGN_WINDOW_LOCATION",
  "markdown": "# NO\\_ASSIGN\\_WINDOW\\_LOCATION\n\nPrevent unsafe assignment to window.location.href in your application.\n\nConformance Rules\n\nDirect assignments to \"window.location.href\" or \"window.location\" should be avoided due to possible XSS attacks that can occur from lack of sanitization of input to the \"href\".\n\nThe recommended approach for Next.js applications is to use a custom `redirectTo` function. This provides a clear way to use `router.push()` or `window.location.href` to provide an experience that is best for the user (client-side navigation only, or a full page refresh). Here's an example of how you might do this using Next.js:\n\nBefore:\n\n```\nwindows.location.href = '/login';\n```\n\nAfter:\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NO_ASSIGN_WINDOW_LOCATION",
  "description": "Prevent unsafe assignment to window.location.href in your application.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/BFCACHE_INTEGRITY_REQUIRE_NOOPENER_ATTRIBUTE",
  "markdown": "# BFCACHE\\_INTEGRITY\\_REQUIRE\\_NOOPENER\\_ATTRIBUTE\n\nConformance Rules\n\nThe Back-Forward Cache (bfcache) is a browser feature that allows pages to be cached in memory when the user navigates away from them. When the user navigates back to the page, it can be loaded almost instantly from the cache instead of having to be reloaded from the network. Breaking the bfcache's integrity can cause a page to be reloaded from the network when the user navigates back to it, which can be slow and jarring.\n\nPages opened with `window.open` that do not use the `noopener` attribute can both be a security risk and also will prevent browsers from caching the page in the bfcache. This is because the new window can access the `window.opener` property of the original window, so putting the original page into the bfcache could break the new window when attempting to access it.\n\nUsing the `noreferrer` attribute will also set the `noopener` attribute to true, so it can also be used to ensure the page is placed into the bfcache.\n\nTo learn more about the bfcache, see the [web.dev docs](https://web.dev/bfcache).\n\nExamples of when this check would fail:\n\n```\nwindow.open('https://example.com', '_blank');\nwindow.open('https://example.com');\n```\n\nInstead, use the `noopener` or `noreferrer` attributes:\n\n```\nwindow.open('https://example.com', '_blank', 'noopener');\nwindow.open('https://example.com', '_top', 'noreferrer');\n```",
  "title": "BFCACHE_INTEGRITY_REQUIRE_NOOPENER_ATTRIBUTE",
  "description": "Requires that links opened with window.open use the noopener attribute to eliminate a source of eviction from the browser's Back-Forward Cache.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/ESLINT_CONFIGURATION",
  "markdown": "# ESLINT\\_CONFIGURATION\n\nConformance Rules\n\n[ESLint](https://eslint.org/) is a tool to statically analyze code to find and report problems. ESLint is required to be enabled for every workspace package in a monorepo so that all code in the monorepo is checked for these problems. Additionally, repositories can enforce that particular ESLint plugins are installed and that specific rules are treated as errors.\n\nThis rule requires that:\n\n*   An ESLint config exists in the current workspace.\n*   A script to run ESLint exists in `package.json` in the current workspace.\n*   `reportUnusedDisableDirectives` is set to `true`, which detects and can autofix unused ESLint disable comments.\n*   `root` is set to `true`, which ensures that workspaces don't inherit unintended rules and configuration from ESLint configuration files in parent directories.\n\n```\nA Conformance error occurred in test \"ESLINT_CONFIGURATION\".\n \nESLint configuration must specify `reportUnusedDisableDirectives` to be `true`\n \nTo find out more information and how to fix this error, visit\n/docs/workflow-collaboration/conformance/rules/ESLINT_CONFIGURATION.\n \nIf this violation should be ignored, add the following entry to\n/apps/dashboard/.allowlists/ESLINT_CONFIGURATION.allowlist.json and get approval from the appropriate person.\n \n{\n  \"testName\": \"ESLINT_CONFIGURATION\",\n  \"reason\": \"TODO: Add reason why this violation is allowed to be ignored.\",\n  \"location\": {\n    \"workspace\": \"dashboard\"\n  }\n}\n```\n\nSee the [ESLint docs](https://eslint.org/docs/latest/use/configure/) for more information on how to configure ESLint, including plugins and rules.\n\nThe recommended approach for configuring ESLint in a monorepo is to have a shared ESLint config in an internal package. See the [Turbo docs on ESLint](https://turbo.build/repo/docs/handbook/linting/eslint) to get started.\n\nOnce your monorepo has a shared ESLint config, you can add a `.eslintrc.cjs` file to the root folder of your workspace with the contents:\n\n```\nmodule.exports = {\n  root: true,\n  extends: ['eslint-config-custom/base'],\n};\n```\n\nYou should also add `\"eslint-config-custom\": \"workspace:*\"` to your `devDependencies`.",
  "title": "ESLINT_CONFIGURATION",
  "description": "Requires that a workspace package has ESLint installed and configured correctly",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/ESLINT_REACT_RULES_REQUIRED",
  "markdown": "# ESLINT\\_REACT\\_RULES\\_REQUIRED\n\nConformance Rules\n\nThis Conformance check requires that ESLint plugins for React are configured correctly in your application, including:\n\nThese plugins help to catch common React issues, such as incorrect React hooks usage, helping to reduce bugs and to improve application accessibility.\n\n```\nA Conformance error occurred in test \"ESLINT_REACT_RULES_REQUIRED\".\n \nThese ESLint plugins must have rules configured to run: @next/next\n \nTo find out more information and how to fix this error, visit\nhttps://vercel.com/docs/workflow-collaboration/conformance/rules/ESLINT_REACT_RULES_REQUIRED.\n \nIf this violation should be ignored, add the following entry to\n/apps/dashboard/.allowlists/ESLINT_REACT_RULES_REQUIRED.allowlist.json and\nget approval from the appropriate person.\n \n{\n  \"testName\": \"ESLINT_REACT_RULES_REQUIRED\",\n  \"reason\": \"TODO: Add reason why this violation is allowed to be ignored.\",\n  \"location\": {\n    \"workspace\": \"dashboard\"\n  },\n}\n```\n\nThis check requires that certain ESLint plugins are installed and rules within those plugins are configured to be errors. If you are missing required plugins, you will receive an error such as:\n\n```\nESLint configuration is missing required security plugins:\n  Missing plugins: react, react-hooks, and jsx-a11y\n  Registered plugins: import and @typescript-eslint\n```\n\nFor more information on ESLint plugins and rules, see [plugins](https://eslint.org/docs/latest/user-guide/configuring/plugins) and [rules](https://eslint.org/docs/latest/user-guide/configuring/rules).\n\nThe recommended approach for configuring ESLint in a monorepo is to have a shared ESLint config in an internal package. See the [Turbo docs on ESLint](https://turbo.build/repo/docs/handbook/linting/eslint) to get started.\n\nOnce your monorepo has a shared ESLint config, you can add a `.eslintrc.cjs` file to the root folder of your workspace with the contents:\n\n```\nmodule.exports = {\n  root: true,\n  extends: ['eslint-config-custom/base'],\n};\n```\n\nYou should also add `\"eslint-config-custom\": \"workspace:*\"` to your `devDependencies`.",
  "title": "ESLINT_REACT_RULES_REQUIRED",
  "description": "Requires that a workspace package is configured with required React plugins and rules",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/element-directives",
  "markdown": "# Element Directives\n\n[**Element Directives**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/04-element-directives)\n\nIn the last module on Svelte’s reactivity, we used the `on:` directive to listen for a click event. That may have been a little foreign to you, as every framework has its own way of controlling an elements behavior. In this module, we will go over a couple different element directives and events we have at our disposal with Svelte, and how to use them.\n\nLet’s start off with the `on` directive, which you will find yourself using a lot. The `on` directive is used to listen to DOM events. To use it, you say `on` followed by a `:` and the event name.\n\nI’ve added a button and a function called `handleClick`. We want to call this `handleClick` method anytime the button is clicked. We can listen for this click event using `on:click`, passing in our `handleClick` method within single curly braces like this.\n\n```\n<script>\n  function handleClick() {\n    alert('Click has been handled');\n  }\n</script>\n \n<button on:click=\"{handleClick}\">Click Me!</button>\n```\n\nNow, if you test this in the browser, clicking the button will call the `handleClick` function, and you will see the alert. Now, what if we want to pass a string into our method to be logged? For example, let’s pass our string in as a parameter and log that parameter instead.\n\n```\n<script>\n  function handleClick(string) {\n    alert(string);\n  }\n</script>\n \n<button on:click=\"{handleClick('Click has been handled')}\">Click Me!</button>\n```\n\nIf you test this in the browser, you’ll see that the alert shows right away, even though the button hasn’t been clicked. This is because the `handleClick` method is being automatically invoked by these parenthesis. What we should do instead is create an inline function that we are not invoking, so it will not run until we click the button. Then, within this function we can invoke `handleString`.\n\n```\n<script>\n  function handleClick(string) {\n    alert(string);\n  }\n</script>\n \n<button on:click=\"{()=>{handleClick('Click has been handled')}}\">\n  Click Me!\n</button>\n```\n\nNow, if you were to test this again, you won’t see the alert until the button is clicked. Handlers can also be declared inline, so instead of calling our `handleClick` function, we can directly call `alert` inline like this.\n\n```\n<script>\n  function handleClick(string) {\n    alert(string);\n  }\n</script>\n \n<button on:click=\"{() => alert('Click has been handled')}\">Click Me!</button>\n```\n\nWe can even add one or more modifiers to DOM events using the vertical-line `|` character by placing this before each modifier name. For instance, let’s add a green `<div>`, and place a red `<div>` within it. Now, to our outer green `<div>`, let's once again call our `handleClick` function which will alert when it is clicked. If you test this out, you’ll notice that we see the alert when the green `<div>` is clicked, but also when the red child `<div>` is clicked. We can use the `self` modifier to only alert when the green `<div>` itself is clicked, but not any of its children. To our outer div where we listen for the click event, we can add the vertical line character followed by the `self` modifier like this:\n\n```\n<script>\n  function handleClick(string) {\n    alert(string);\n  }\n</script>\n \n<button on:click=\"{() => {alert('Click has been handled')}}\">Click Me!</button>\n<div\n  on:click|self=\"{() => {alert('Our green div was clicked!')}}\"\n  class=\"greenDiv\"\n>\n  You can click the green.\n  <div class=\"redDiv\">You can't click the red</div>\n</div>\n \n<style>\n  .greenDiv {\n    background: LawnGreen;\n    padding: 20px;\n  }\n  .redDiv {\n    background: OrangeRed;\n    padding: 20px;\n  }\n</style>\n```\n\nNow, clicking the red child `<div>` will not alert, only clicking the green parent `<div>` itself will. You are not limited to using a single modifier. You can chain multiple modifiers together by just adding another `|` followed by the next modifier like this:\n\n```\n<script>\n  function handleClick(string) {\n    alert(string);\n  }\n</script>\n \n<button on:click=\"{() => {alert('Click has been handled')}}\">Click Me!</button>\n<div\n  on:click|self|once=\"{() => {alert('Our green div was clicked!')}}\"\n  class=\"greenDiv\"\n>\n  You can click the green.\n  <div class=\"redDiv\">You can't click the red</div>\n</div>\n \n<style>\n  .greenDiv {\n    background: LawnGreen;\n    padding: 20px;\n  }\n  .redDiv {\n    background: OrangeRed;\n    padding: 20px;\n  }\n</style>\n```\n\nNow it will only alert if we click the green parent `<div>`, but only the first it is clicked. If we check out the Svelte documentation under [Element Directives](https://svelte.dev/docs#template-syntax-element-directives), you can view a list of available modifiers and what they do.\n\nI also want to make sure I point out that the `on` directive can be used with any DOM events, not just clicks. Let’s remove our event modifiers and change this `on` directive to say `on:mousemove` instead of `on:click`. Let’s continue to call the `handleClick` function. The `on` directive provides you with the event object as an argument of your handler, so let’s pass in `event` and instead of alerting, log it. The updated code should look like this:\n\n```\n<script>\n  function handleClick(event) {\n    console.log(event);\n  }\n</script>\n \n<button on:click=\"{() => {alert('Click has been handled')}}\">Click Me!</button>\n<div on:mousemove=\"{handleClick}\" class=\"greenDiv\">\n  You can click the green.\n  <div class=\"redDiv\">You can't click the red</div>\n</div>\n \n<style>\n  .greenDiv {\n    background: LawnGreen;\n    padding: 20px;\n  }\n  .redDiv {\n    background: OrangeRed;\n    padding: 20px;\n  }\n</style>\n```\n\nNow every time the mouse is moved within the green div, the mouse event will be logged in the console.\n\nTypically, data flows down stream, from parent to child, but oftentimes we need to send data the opposite direction, from child to parent. For example, let’s look at the following code:\n\n```\n<script>\n  let searchedValue = '';\n  function setSearchedValue() {\n    searchedValue = document.getElementById('myText').value;\n  }\n</script>\n \n<div>{searchedValue}</div>\n<input on:keypress=\"{setSearchedValue}\" type=\"text\" id=\"myText\" value=\"\" />\n```\n\nHere we have an `<input>`, and the `on` directive is being used to listen for the keypress event so that we can call our `setSearchedValue` method any time the input’s value changes. This function just sets the value of our `searchedValue` variable to the value entered in the input. If you were to test this in the browser, you would see that as you type in the input, `searchedValue` is updated. While this achieves our goal, Svelte provides us with a much simpler way of doing this using the `bind` directive. We use this directive by saying `bind:` followed by the property we want to bind. Let’s update this example to use it. We can delete our `setSearchedValue` function and no longer need to listen for the keypress event. Now, we can replace the input’s value with `bind:value={searchedValue}`.\n\n```\n<script>\n  let searchedValue = '';\n</script>\n \n<div>{searchedValue}</div>\n<input type=\"text\" id=\"myText\" bind:value=\"{searchedValue}\" />\n```\n\nThe value of our input is now bound with `searchedValue`, so anytime our input changes, `searchedValue` will as well, and vice versa. We could also, for instance, bind a value to whether or not a checkbox is checked. To do that, we would add a checkbox with `checked` as our bound property:\n\n```\n<script>\n  let name = '';\n  let checked = false;\n</script>\n \n<p>{name}</p>\n<p>{checked}</p>\n<input type=\"text\" bind:value=\"{name}\" />\n<input type=\"checkbox\" bind:checked=\"{checked}\" />\n```\n\nHere, we’ve once again created a new variable, `checked`, and its value will start off as `false`. Now if we add another input, this time with type 'checkbox', we can bind the value of `checked` to this input by saying `bind:checked={checked}`. Now, our value `checked` is bound to whether our not our checkbox is checked. In cases like this, where property name matches the variable name, we can use a shorthand. Instead of writing it how we currently have it, we can instead write `bind:checked`.\n\nNow in this module I just scratched the surface of element directives. In future videos we will dive a bit deeper into both the `on:` and `bind:` directives when it comes to creating custom events and binding data between components. We’ll also go over the `animation` and `transition` directives. The other element directives are not quite as common, so I won’t be covering them in this course, but they are all listed in the Svelte documentation under element directives if you’d like to check them out yourself.\n\nNow that we understand how to handle our DOM events and bind values, let’s learn how to work with conditionals and loops in the next module.\n\n[](https://vercel.com/docs/beginner-sveltekit/conditionals-and-loops)\n\n#### [Conditionals and Loops](https://vercel.com/docs/beginner-sveltekit/conditionals-and-loops)\n\n[In this module, we will go over how to express logic in our HTML using conditionals and loops.](https://vercel.com/docs/beginner-sveltekit/conditionals-and-loops)",
  "title": "Element Directives",
  "description": "In this module, we will go over a couple different element directives and events we have at our disposal with Svelte, and how to use them.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/WORKSPACE_MISSING_CONFORMANCE_SCRIPT",
  "markdown": "# WORKSPACE\\_MISSING\\_CONFORMANCE\\_SCRIPT\n\nConformance Rules\n\nConformance requires a script to exist in every workspace in the repository. This makes sure that Conformance rules are running on all code. This test throws an error if a workspace does not define a `conformance` script in the `package.json` file.\n\nA workspace contains a `package.json` file that looks like:\n\n```\n{\n  \"name\": \"test-workspace\",\n  \"scripts\": {\n    \"build\": \"tsc -b\"\n  }\n}\n```\n\nIt does not contain a `conformance` script, so this check will fail.\n\nInstall the `@vercel-private/conformance` package in this workspace and define a `conformance` script in the `package.json` file.\n\n```\n{\n  \"name\": \"test-workspace\",\n  \"scripts\": {\n    \"build\": \"tsc -b\",\n    \"conformance\": \"vercel conformance\"\n  },\n  \"devDependencies\": {\n    \"@vercel-private/conformance\": \"^1.0.0\"\n  }\n}\n```",
  "title": "WORKSPACE_MISSING_CONFORMANCE_SCRIPT",
  "description": "All packages must define a conformance script that invokes the Conformance package.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_MANAGEMENT_NO_UNRESOLVED_IMPORTS",
  "markdown": "# PACKAGE\\_MANAGEMENT\\_NO\\_UNRESOLVED\\_IMPORTS\n\nConformance Rules\n\nAll imports must be able to be resolved to a file local to the workspace or a package declared as a dependency within the `package.json` file. This ensures that the workspace has not missed any dependencies and is not relying on global dependencies.\n\n```\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\n```\n\nThe `package.json` is missing a dependency on the `next` package.\n\n```\n{\n  \"name\": \"shared-component-pkg\",\n  \"dependencies\": {\n    \"react\": \"19.0.0-beta-4508873393-20240430\"\n  }\n}\n```\n\nIf the workspace is missing a package dependency, add the appropriate one to the `package.json` file of the workspace. In the example above, a dependency on the `next` package should be added.",
  "title": "PACKAGE_MANAGEMENT_NO_UNRESOLVED_IMPORTS",
  "description": "Import statements that can not be resolved to a local file or a package from package.json dependencies are not allowed.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/conclusion",
  "markdown": "# Conclusion\n\nCongratulations! You have successfully completed the beginner SvelteKit course! You should now be comfortable enough to begin writing your own SvelteKit apps.\n\nYou can get started instantly with the SvelteKit demo app:\n\n[![](https://assets.vercel.com/image/upload/v1689795055/docs-assets/static/topics/icons/svelte.svg)Deploy our SvelteKit template, or view a live example.](https://vercel.com/templates/svelte/sveltekit-boilerplate)\n\nAlternatively, clone the [SvelteKit Commerce](https://vercel.com/templates/svelte/sveltekit-commerce) template and start from here. You can find a demo of SvelteKit Commerce [here](https://sveltekit-commerce.vercel.app/).\n\nThanks for following along, and good luck with the rest of your SvelteKit journey!",
  "title": "Conclusion",
  "description": "This concludes the course! Thanks for learning!",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/loading",
  "markdown": "# Loading Data\n\n[**Loading Data**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/17-loading)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Changed to the new `load` function API.\n    \n\nIn the last module we learned how to create endpoints and fetch data from them. In the example we created, we fetch product data using the dynamic param, `[name]`, of the page that we are on. While this works, there is a more convenient way to load data into a page using a sibling `+page.js` file.\n\nA `+page.svelte` file can have a sibling `+page.js` (or `+page.ts`) that exports a `load` function. The return value of this function is available to the page through the `data` prop.\n\nLet's create the new file `/src/routes/product/[name]/+page.js`, which will export a load function like this:\n\n```\nexport function load() {}\n```\n\nThis will have the same functionality as the endpoint created in the last module, so we will use the dynamic `name` param to find the product data in an array of products. Similar to our endpoint, the load function has access to dynamic parameters through the parameter `params`. Let's use this to get our product name like this:\n\n```\nexport function load({ params }) {\n  const productName = params.name;\n}\n```\n\nNow, let's add a hard coded array of products, and use `productName` to search this array and return the correct product.\n\n```\nexport function load({ params }) {\n  const productName = params.product;\n  const product = products.find((product) => product.name === productName);\n  return {\n    product,\n  };\n}\n```\n\nFinally, instead of fetching data from our endpoint in `/src/routes/product/[name]/+page.svelte`, we can use the `data` prop like this:\n\n```\nexport let data;\nlet product = data.product;\n```\n\nHere we are exporting our prop, `data`, making it available to our sibling `+page.js` file where its value will be assigned. As soon as we route to this page, the `load` function will automatically be called, and the value of `data` will be set to the value returned from the `load` function in `+page.js`. We can then use this `data` in `+page.svelte`!\n\nTesting this out in the browser, you will see the page has the same functionality using much less code!\n\nWe will learn more about how the `load` function works later on in this module .The most important thing to know is that is runs on both the client and the server, unlike endpoints which only run on the server. This means that you should not use any sensitive information here. _However_, if your `load` function should always run on the server (because it uses private environment variables, accesses a database, etc.) then you can put it in a `+page.server.js` instead.\n\nLayouts can also load data through `+layout.js` or `+layout.server.js`. It works the exact same way as pages, accessing the returned data through the `data` prop. Any data returned from layout `load` functions is also available to child `+layout.svelte` components and the `+page.svelte` component in addition to the layout that it belongs to. If multiple `load` functions return data with the same key, the last one will take priority. For example, if we are using `data.product` in a page where its layout returns `{product: 'T-Shirt'}` and the page also returns `{product: 'Cup'}`, then `data.product` will be `Cup`.\n\nAt this point we've learned that a `+page.svelte` component, and each `+layout.svelte` component above it, has access to its own data as well as all the data from its parents.\n\nIn some cases, we might need the opposite — a parent layout might need to access data from a page or a child layout. For example, the root layout might want to access the `product` property returned from our load function in `/src/routes/product/[name]/+page.js`. We can do this using `$page.data`.\n\nIn our root layout, let's import `page`. As we learned in the previous module on stores, we can reference a store value by prefixing the store name with a dollar sign. Let's log `$page.data.product` like this:\n\n```\nimport { page } from '$app/stores';\nconsole.log($page.data.product);\n```\n\nNow, if we navigate to our product page, we see that our product object is logged in our layout!\n\nAs we've seen there are two types of load functions. `+page.js` and `+layout.js` files export `load` functions that are shared between server and browser, while `+page.server.js` and `+layout.server.js` files export `load` functions that are server-only. Conceptually, they're the same thing, but there are some key differences.\n\nBoth shared and server-only load functions have access to three properties (`params`, `route`, and `url`) and various functions (`depends`, `fetch`, and `parent`).\n\nServer-only `load` functions are called with a `ServerLoadEvent`, which inherits `clientAddress`, `cookies`, `locals`, `platform`, and `request` from `RequestEvent`.\n\nShared `load` functions are called with a `LoadEvent`, which has a `data` property. If you have `load` functions in both `+page.js` and `+page.server.js`, the return value of the server-only `load` function is the `data` property of the shared `load` function's argument.\n\nA shared `load` function can return an object containing any values, including things like custom classes and component constructors.\n\nA server-only `load` function must return data that can be serialized with devalue such as anything that can be represented as JSON or things like `BigInt`, `Date`, etc. — so that it can be transported over the network.\n\nNow that we know the correct way to load data into our app using the `load` function, in the next module we will learn how to prefetch our data to make our app feel extra snappy.\n\n[](https://vercel.com/docs/beginner-sveltekit/prefetch)\n\n#### [Prefetch](https://vercel.com/docs/beginner-sveltekit/prefetch)\n\n[In this module, we will learn how to prefetch data before routing to the page to make our app feel extra snappy.](https://vercel.com/docs/beginner-sveltekit/prefetch)",
  "title": "Loading Data",
  "description": "In this module, we will learn how to fetch and manipulate data before rendering the page using the load function.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/css",
  "markdown": "# CSS\n\n[**CSS**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/06-css)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Changed `index.svelte` and `__layout.svelte` to `+page.svelte` and `+layout.svelte` respectively.\n    \n\nInside of our `+page.svelte` file we are displaying each item in our `products` array, which we created in the last module. Let’s say that we want to make the background of every `<div>` orange. We can do that by adding a `<style>` tag and then writing our CSS within it. Let’s go ahead and add the following to our code.\n\n```\n<script>\n  let products = [\n    { name: 't-shirt', quantity: 10 },\n    { name: 'mug', quantity: 30 },\n    { name: 'sticker', quantity: 8 },\n    { name: 'sweatshirt', quantity: 12 },\n  ];\n</script>\n \n{#each products as product, i (product.name)}\n<div>{product.name}</div>\n<div>Index: {i}</div>\n{/each}\n \n<style>\n  div {\n    background-color: orange;\n  }\n</style>\n```\n\nNow, the background of each `<div>` is orange. Right now we are only working out of one component. Let’s add another component to our project called `GridTile.svelte`, and within this component add a `<div>` with the text \"This is our GridTile component\". Now we can import this component in our index page and add it to our HTML.\n\nSide note: I will cover working with component with SvelteKit in depth in a future video.\n\nNow, the background of our child component’s `<div>` is not orange. This is because CSS in `.svelte` files is scoped to that component. This means that any CSS written within a `.svelte` file will only be applied to that individual component. Our CSS from the `+page.svelte` file will not be applied to elements in our `GridTile.svelte` file. This prevents styles from one component affecting other components. You can also delete CSS without having to worry about deleting rules that are used in other parts of your application. In our `GridTile.svelte` file, let’s change the text and background color as well as add some bottom margin like this:\n\n```\n<style>\n  div {\n    color: LavenderBlush;\n    background-color: HotPink;\n    margin-bottom: 12px;\n  }\n</style>\n```\n\nOnce again the CSS within the GridTile component will not affect the styles of the other components. We will not see this pink background in any `<div>` tags outside of the GridTile component. Now, what if we want to write global CSS, meaning CSS that is applied to every page and component? We can do this by creating a layout file and adding CSS to the layout using the global modifier. I won’t go into layouts in a lot of depth in this module, but there will be a module covering layouts later in this course.\n\nNow create a layout file. We can do this by creating a new file in our `routes` folder called `+layout.svelte`. Now, within this file we need to add a `<slot/>` tag, which again I will explain what this is in a future module. Now, within this layout file we can add a style tag, and any CSS written here with a global modifier will be applied to all of our pages. If we were to add:\n\n```\n<main>\n  <slot />\n</main>\n \n<style>\n  :global(div) {\n    font-family: Arial, Helvetica, sans-serif;\n    font-style: italic;\n  }\n</style>\n```\n\nThe font family and style will be applied to every `<div>` in all components within the application. We can also write global CSS rules by creating a CSS file and importing it into our layout or `app.html` file. Let’s remove this CSS from our layout and create a new file called `app.css`. Within this file we can add any css, and then we can import it into our layout like this:\n\n```\n<script>\n  import './app.css';\n</script>\n```\n\nNow, the CSS written within our `app.css` file will be applied to the entire app.\n\nNow we understand that CSS can either be scoped at the page and component level or specified as global in our layout, but how exactly does this work? Behind the scenes, Svelte creates component specific classes when it compiles the code. This keeps the CSS scoped to that specific component and avoids duplicate classes or ID’s. If we inspect these elements in the browser, you’ll see different svelte classes, each with a random string of letters and numbers on the end. Each of these corresponds to an element in a specific component. This means that if you use the ID \"container\" in one component, you can use the same ID in a different component and the CSS styling will still be scoped. This prevents any leaking of the CSS.\n\nBy default, Svelte uses PostCSS which is a tool for transforming CSS with JavaScript. But what if we want to use SASS/SCSS? For example, if we were to try and style our `<h3>` tags back in the `+page.svelt` file using SCSS like this, the app will break.\n\n```\n<div>\n  This is my text\n  <p>Additional Text</p>\n</div>\n \n<style>\n  div {\n    h3 {\n      color: white;\n    }\n  }\n</style>\n```\n\nThis is because Svelte is expecting CSS and this nesting is not valid CSS. There are four things we’ll need to do to use SASS.\n\n1.  First is to add `lang=\"scss\"` in the style tag.\n2.  Then we’ll need to install `svelte-preprocess` by running `npm install svelte-preprocess` in our terminal.\n3.  After it’s installed, let’s head into our `svelte.config.js` file and import `svelte-preprocess` and then add another property below kit, `preprocess`, that will be set to `sveltepreprocess()`.\n4.  Finally, we need to install `node-sass`. This is a Node library that binds Node.JS with LibSass and is necessary to write SASS code. We can install it by running the command `npm install --save node-sass`, and then restart the server. This is because Svelte is expecting CSS and this nesting is not valid CSS. There are four things we’ll need to do to use Sass.\n5.  Add `lang=\"scss\"` in the style tag.\n6.  Install `svelte-preprocess` by running `npm install svelte-preprocess` in our terminal.\n7.  In `svelte.config.js`, import `svelte-preprocess` and then add another property below kit, `preprocess`, that will be set to `sveltepreprocess()`.\n8.  Install `node-sass`. This is a Node.js library that binds Node.js with libsass. We can install it by running the command `npm install --save node-sass`, and then restarting the dev server.\n\nOur `svelte.config.js` file should now look like the following.\n\n```\nimport adapter from '@sveltejs/adapter-auto';\nimport sveltePreprocess from 'svelte-preprocess';\n \n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  kit: {\n    adapter: adapter(),\n \n    // hydrate the <div id=\"svelte\"> element in src/app.html\n    target: '#svelte',\n  },\n  preprocess: sveltePreprocess(),\n};\n \nexport default config;\n```\n\nNow if you test this in the browser, the SASS is styling the app!\n\nThat concludes using CSS with SvelteKit. In the next video, we will go over how to install Tailwind CSS into a SvelteKit project.\n\n[](https://vercel.com/docs/beginner-sveltekit/tailwind)\n\n#### [Tailwind CSS](https://vercel.com/docs/beginner-sveltekit/tailwind)\n\n[In this module, we're going to cover how to add Tailwind to our SvelteKit project.](https://vercel.com/docs/beginner-sveltekit/tailwind)",
  "title": "CSS",
  "description": "In this module, we’re going to cover how to use CSS and SASS/SCSS in our Svelte Applications.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/animations-and-transitions",
  "markdown": "# Animations and Transitions\n\n[**Animations and Transitions**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/13-animations-and-transitions)\n\nOne way to make your user interfaces more appealing is by adding transitions and animations. Svelte makes working with Animations and transitions extremely convenient. They come built-in with Svelte, so you don’t need to download extra packages. This means we can add beautiful interactions to applications without sacrificing performance.\n\nLet’s start with transitions. The `svelte/transition` module exports seven functions:\n\n1.  [`fade`](https://svelte.dev/docs#run-time-svelte-transition-fade)\n2.  [`blur`](https://svelte.dev/docs#run-time-svelte-transition-blur)\n3.  [`fly`](https://svelte.dev/docs#run-time-svelte-transition-fly)\n4.  [`slide`](https://svelte.dev/docs#run-time-svelte-transition-slide)\n5.  [`scale`](https://svelte.dev/docs#run-time-svelte-transition-scale)\n6.  [`draw`](https://svelte.dev/docs#run-time-svelte-transition-draw)\n7.  [`crossfade`](https://svelte.dev/docs#run-time-svelte-transition-crossfade)\n\nEach can be used to apply different transitions to DOM elements.\n\nFor example, right now when we open our shopping cart it just appears. Wouldn’t it look nicer if it faded in and out when we open and close it instead? We can do this using the `fade` function, which we can import from `svelte/transition`. Now, by adding `transition:fade` as a property of our outermost div in our shopping cart component, we will get a nice fade in and out transition.\n\n```\n<script>\n  import { fade } from 'svelte/transition';\n</script>\n \n<div transition:fade>\n  <ShoppingCart />\n</div>\n```\n\nIf you test this out in the browser, you’ll see that when you click the cart button, the shopping cart fades in when it opens, and out when it closes. In this example, we are using the transition directive which will transition both in and out, but we can also use the `in` or `out` directives. For example, if we only want this transition to fade in, we can replace `transition` with `in`. Now, the cart only fades in and no longer fades out.\n\n```\n<script>\n  import { fade } from 'svelte/transition';\n</script>\n \n<div in:fade>\n  <ShoppingCart />\n</div>\n```\n\nWe can also pass parameters into this transition to specify the `delay`, `duration`, and `easing`. For example, if we want this transition last for 2000ms we can pass an object in as a parameter with the key `duration` and the value we wish to set it to. If we also wanted it to be _delayed_ by 2000ms, we would pass in another parameter like this.\n\n```\n<script>\n  import { fade } from 'svelte/transition';\n</script>\n \n<div in:fade=\"{{delay: 2000, duration: 2000}}\">\n  <code />\n</div>\n```\n\nIf we were to test this out in the browser, we would notice first the delay, and then the longer duration. Different transitions can accept different parameters. To know which params are available for each transition you should check out the [svelte documentation](https://svelte.dev/docs#run-time-svelte-transition) under the ‘svelte/transition’ tab. This is where you can find a list of all the transitions, as well as the params they accept.\n\nSimilar to Svelte transitions, svelte also provides a built-in animate directive to apply motion to the elements in the code.\n\nI've added a new function `shuffle`, which will move the most recently edited item to the top of our list. For instance, if we change the `quantity` of one of our items in our shopping cart, it would move to the top. Let's use Svelte’s built in animations to animate this movement. To use the animate directive, we first need to import the `flip` function from `svelte-animations`. Flip stands for first, last, invert, play. The `flip` function calculates the start and end position of an element and animates between them, translating the X and Y values. It accepts three parameters, `delay`, `duration`, and `easing`, which we're already familiar with from transitions. Now that we are importing flip from svelte-animate, we can add the animate directive to our div within the each block like this. Now, any time the quantity of an item changes, it will animate to the top of the list. This is such as smooth animation, and it was so fun to create.\n\n```\n<script>\n  import { flip } from 'svelte/animate';\n  function addOne(i) {\n    shuffle(i);\n    cartItems[i].quantity = cartItems[i].quantity + 1;\n  }\n  function removeOne(i) {\n    shuffle(i);\n    cartItems[i].quantity = cartItems[i].quantity - 1;\n  }\n  const shuffle = (i) => {\n    var element = cartItems[i];\n    cartItems.splice(i, 1);\n    cartItems.splice(0, 0, element);\n  };\n</script>\n{#each cartItems as item, i (item.name)}\n<div animate:flip>...</div>\n{/each}\n```\n\nSvelte makes adding animations and transitions to your code smooth and elevates your app to the next level, making it a convenient feature to have at your disposal. In the next module, we'll go over routing with SvelteKit.\n\n[](https://vercel.com/docs/beginner-sveltekit/routing)\n\n#### [Routing](https://vercel.com/docs/beginner-sveltekit/routing)\n\n[In this module, we will learn how SvelteKit's built in folder based router works.](https://vercel.com/docs/beginner-sveltekit/routing)",
  "title": "Animations and Transitions",
  "description": "In this module, we will learn how to use Svelte's built-in animations and transitions to take our app to the next level.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/data-binding-and-event-handling",
  "markdown": "# Data Binding and Event Forwarding\n\n[**Data Binding and Event Forwarding**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/09-data-binding-and-event-forwarding)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Changed `index.svelte` and `__layout.svelte` to `+page.svelte` and `+layout.svelte` respectively.\n    \n\nIn the last video, we went over passing data from a parent component to the child component using props, but what if we want to pass data upstream from child to parent? In this video, we will learn how to do just that.\n\nThe first topic we will go over is component bindings. Just as you can bind to properties of DOM elements, you can also bind properties to component props. Let's take a look at a scenario where we would want to do this.\n\nIn our layout file, we have a variable called `cartItems` which is an array of objects representing each item in our cart. Each object contains a `name`, `src`, `price`, and `quantity`. We are displaying the total number of items in our cart in the header, and we have this banner which gives us the option to add a new item into our cart. Clicking the ‘Add to Cart’ button calls the `addItemToCart` method which adds the `newItem` object to our `cartItems` array.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fbeginner-sveltekit%2Fshopping-cart-component.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nIn our layout we are also importing a component called `ShoppingCart`. This component is wrapped in an if block and will conditionally show based on the value of `showCart`, which is `false` until we click our cart button.\n\n```\n<script>\n  import ShoppingCart from '$lib/ShoppingCart.svelte';\n \n  let showCart = false;\n  let cartItems = [\n    {\n      name: 'Cup',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Cup-front-black.png?v=1623159405',\n      price: '$10.00',\n      quantity: 1,\n    },\n    {\n      name: 'Quarter Zip',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/QZSide-Model.png?v=1623256247',\n      price: '$30.00',\n      quantity: 1,\n    },\n  ];\n  let newItem = {\n    name: 'T-Shirt',\n    src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Front-NoModel_ec3be051-d579-4c03-b55b-64449d0b0445.png?v=1623255893',\n    price: '$80.00',\n    quantity: 1,\n  };\n  function addItemToCart() {\n    cartItems = [...cartItems, newItem];\n  }\n</script>\n \n<div>\n  <div>\n    <nav class=\"flex items-center border-b border-zinc-700 p-4 lg:px-6\">\n      <button on:click=\"{()\" =\"\">\n        { showCart = true; }} class=\"uppercase text-white flex items-center\" >\n        <div>Cart</div>\n        <div\n          class=\"ml-2 flex h-5 w-5 items-center justify-center rounded-full bg-white text-xs font-bold text-black\"\n        >\n          {cartCount}\n        </div>\n      </button>\n    </nav>\n    <div class=\"flex items-center justify-between bg-zinc-900 px-6 py-1\">\n      <div class=\"relative flex items-center\">\n        <img src=\"{newItem.src}\" class=\"mr-2 h-10 bg-white\" alt=\"cup\" />\n        <p class=\"font-medium uppercase\">{newItem.name}</p>\n        <div\n          class=\"absolute left-0 top-0 -ml-4 flex items-center justify-center rounded-full bg-white px-1 py-px font-medium text-black\"\n          style=\"font-size: 10px;\"\n        >\n          NEW!\n        </div>\n      </div>\n      <button\n        on:click=\"{addItemToCart}\"\n        class=\"bg-white/90 p-1 text-xs font-medium uppercase text-black\"\n      >\n        Add to Cart\n      </button>\n    </div>\n  </div>\n  <div class=\"relative\">\n    {#if showCart}\n    <ShoppingCart {cartItems} />\n    {/if}\n    <slot />\n  </div>\n</div>\n```\n\nNow, we see our cart is displaying each item in our `cartItems` array, which is being passed into the component as a prop. For each item in our cart we have two buttons to either increase or decrease the quantity of that item.\n\nIf you remember from the last module, props pass data in only one direction, from the parent component to the child. This means that if we add an item to our cart, since this logic is happening in the parent component, it will update the child component with the new value of `cartItems`. In the last video we also talked about how logic is scoped to the component. This means that our parent component is completely unaware of the changes we’re making to the data in the child component. To demonstrate this, we can increase the quantity of one of our items by clicking the \"Plus\" button in our cart. We will see that the cart component is reflecting this change, but the parent is completely unaware, so our total cart quantity is still four. What we need to do is bind these values so that `cartItems` in the parent component and `cartItems` in the ShoppingCart component are always in-sync.\n\nLuckily, Svelte makes binding components extremely intuitive. All we have to do is go into our parent component where the ShoppingCart component is being used and add the bind directive, `bind:`, wherever we are passing in our prop.\n\n```\n<div class=\"relative\">\n  {#if showCart}\n  <ShoppingCart bind:cartItems />\n  {/if}\n  <slot />\n</div>\n```\n\nNow, if we increment the quantity of our first item, we see our total cart quantity is now reflecting this change. This is because the value of cartItems is bound between the parent and child, so anytime it changes in the parent, the child will be updated, and vice versa.\n\nCurrently in our example, the cart is being conditionally shown based on the value of `showCart`, which is `false` until we click our cart button. The issue is, right now we have no way to close our cart without refreshing the page. Let’s update our cart to close when we click the ‘close’ button. There are a couple different ways we can do this. We could bind the value of `showCart` like we did with or `cartItems`. this way if we change the value of `showCart` to `false` in our cart component, it will also update in our parent component. _Or_ we can forward the click event from our cart to the layout using component event forwarding. By doing this, anytime the close button is clicked it will forward the event, and a click event will be emitted wherever the component is being used. The way we do this is by registering the click event, but not actually handling it in the component. Let’s move into our shopping cart component, and at our close button, let’s listen for the click event using the on directive, but not set it equal to anything. When we don't handle this click event, it will forward the click event to where we are using this component in our layout. Now we can listen to that `on:click` event in the parent component and toggle the value of showCart to false.\n\n```\n<button on:click class=\"text-sm uppercase opacity-80 hover:opacity-100\">\n  close\n</button>\n```\n\n```\n<ShoppingCart\n  bind:cartItems\n  on:click={() => {\n    showCart = false;\n  }}\n/>\n```\n\nNow our cart component will emit that click event whenever the button is clicked, and when that happens we will change the value of `showCart` in the parent component to `false`, thus closing the cart.\n\nNow, this example is extremely basic. Oftentimes, we need to communicate more than just a click event to the parent component. For instance, we may need to pass data from the child component to the parent component along with the click event.\n\nCurrently, we have a banner in our parent component which shows a highlighted product that we can add to our cart. Anytime this button is clicked, it calls our `addToCart` function and updates the value of `cartItems` to include the new item. But what if we want to move this banner out of the parent component and into the cart component, while keeping the logic in the parent? In this scenario we would not only need to forward the click event, but we would also have to pass the product data along with it so our parent component can add it to our `cartItems` array.\n\nIn SvelteKit, we can send data from the child component to the parent by dispatching a custom event from our component using `createEventDispatcher()`. To do this we have to import and call `createEventDispatcher()` when the component is initiated. First, we need to import `createEventDispatcher` from svelte, and set `dispatch` equal to `createEventDispatcher()`, which links `dispatch` to the component instance. Now, we can use `dispatch` to emit the name of the event as well as any data we want to send with it.\n\nIn our example, let's dispatch an event when the ‘Add to Cart’ button is clicked. We can do this by calling a function `addItemToCart` on the click event, which will create an event called `addItemToCart` with an object containing a single key, item, which will be our newItem variable.\n\n```\n<script>\n  import { createEventDispatcher } from 'svelte';\n  const dispatch = createEventDispatcher();\n  let newItem = {\n    name: 'T-Shirt',\n    src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Front-NoModel_ec3be051-d579-4c03-b55b-64449d0b0445.png?v=1623255893',\n    price: '$80.00',\n    quantity: 1,\n  };\n  function addItemToCart() {\n    dispatch('addItemToCart', {\n      item: newItem,\n    });\n  }\n</script>\n```\n\nNow, anytime the button is clicked, this event will be dispatched to the parent component, but the app will not react to it yet. We need to listen for this event in the parent component using the `on:addItemToCart` directive. This directive is an attribute prefixed with `on:` followed by the event name that we are dispatching, in this case, `addItemToCart`.\n\nNext let's listen for this custom event in our parent component by adding `on:addItemToCart`, and call our function `addItemToCart` whenever the event is dispatched. Since this function is being called with our custom event, we can pass `event` in as a parameter which allows us to access our product data, which exists under the key name detail. In our `addToCart` method, we can push `event.detail.item` into our `cartItems` array. Now our new item will be successfully added to our cart!\n\n```\n<script>\n  function addItemToCart(event) {\n    cartItems = [...cartItems, event.detail.item];\n  }\n</script>\n \n<ShoppingCart bind:cartItems on:click=\"{()\" =\"\">\n  { showCart = false; }} on:addItemToCart={addItemToCart} /></ShoppingCart\n>\n```\n\nIn this example we have a single key, `item`, We can dispatch our data with as many keys as we'd like, allowing you to be extremely flexible in what data you dispatch with your event.\n\nWe have now learned how to send data from parent to child, how to bind data between components, and how to send data upstream from child to parent. In the next module, we will learn how to send data between nested components.\n\n[](https://vercel.com/docs/beginner-sveltekit/context-api)\n\n#### [Context API](https://vercel.com/docs/beginner-sveltekit/context-api)\n\n[In this module, we will learn how to pass data to deeply nested components using the Context API.](https://vercel.com/docs/beginner-sveltekit/context-api)",
  "title": "Data Binding and Event Forwarding",
  "description": "In this module, we will learn how to pass data from a child component to the parent using data bindings and event handling.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/TYPESCRIPT_ONLY",
  "markdown": "# TYPESCRIPT\\_ONLY\n\nConformance Rules\n\n[TypeScript](https://typescriptlang.org/) is a superset of JavaScript that adds optional static typing. Using TypeScript in your codebase provides the following benefits:\n\n*   Type Safety: TypeScript is a strongly-typed language, which means that it allows you to catch errors at compile-time rather than at runtime. This can help you catch bugs earlier in the development process, making your code more reliable and easier to maintain over time.\n*   Tooling: TypeScript has excellent tooling support, including autocompletion, type checking, and refactoring tools. This can help you write code faster and with fewer errors.\n*   JavaScript Compatibility: TypeScript is a superset of JavaScript, which means that any valid JavaScript code is also valid TypeScript code. This means that you can gradually introduce TypeScript into your project without having to rewrite your entire codebase.\n*   Scalability: TypeScript is designed to work well with large-scale applications. With features like interfaces and classes, it allows you to write code that is easier to read and maintain, even as your project grows in complexity.\n\n```\nConformance errors found!\n \nA Conformance error occurred in test \"TYPESCRIPT_ONLY\".\n \nJavaScript files are not allowed. Please convert the file to TypeScript.\n \nTo find out more information and how to fix this error, visit\n/docs/workflow-collaboration/conformance/rules/TYPESCRIPT_ONLY.\n \nIf this violation should be ignored, add the following entry to\n/apps/docs/.allowlists/TYPESCRIPT_ONLY.allowlist.json\nand get approval from the appropriate person.\n \n{\n  \"testName\": \"TYPESCRIPT_ONLY\",\n  \"reason\": \"TODO: Add reason why this violation is allowed to be ignored.\",\n  \"location\": {\n    \"filePath\": \"apps/docs/src/add-numbers.js\"\n  }\n}\n```\n\nTo fix this error, you must convert the JavaScript file to TypeScript. You can do this by changing the file extension from `.js` to `.ts` or `.jsx` to `.tsx` and adding the appropriate type annotations.\n\n```\n--- a/apps/docs/src/add-numbers.js\n+++ b/apps/docs/src/add-numbers.ts\n-export function addNumbers(a, b) {\n+export function addNumbers(a: number, b: number): number {\n  return a + b;\n}\n```\n\nThe check supports custom file globs and ignore file globs that can be specified on `conformance.config.jsonc`. The globs take effect from the root of the workspace package.\n\n```\n{\n  \"rules\": {\n    \"TYPESCRIPT_ONLY\": {\n      \"files\": [\"**/*.js\", \"**/*.jsx\"],\n      \"ignoreFiles\": [\"**/*.custom-config.js\"]\n    }\n  }\n}\n```\n\nThe default configuration is:\n\n```\n{\n  \"rules\": {\n    \"TYPESCRIPT_ONLY\": {\n      \"files\": [\"**/*.{cjs,mjs,js,jsx}\"],\n      \"ignoreFiles\": [\n        \"dist/**\",\n        \"node_modules/**\",\n        \".next/**\", // Next.js output\n        \".eslintrc.{cjs,js}\", // Common ESLint config file name\n        \"*.config.{cjs,mjs,js}\", // Common config file name\n        \"*.setup.{cjs,mjs,js}\", // Common setup file name\n      ],\n    },\n  },\n}\n```",
  "title": "TYPESCRIPT_ONLY",
  "description": "Requires that a workspace package may only contain TypeScript files and no JavaScript or JSX files.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/slots",
  "markdown": "# Slots\n\n[**Slots**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/12-slots)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Changed `index.svelte` to `+page.svelte`.\n    \n\nAt this point, we've learned a few different ways to pass data between components, allowing us to dynamically update the component's content. But the element is not very flexible when it comes to the template. Just like HTML Tables let us pass arbitrary html into the table rows and table cells, we can make our custom Svelte components also accept arbitrary HTML using Slots. In this module, we will learn how.\n\nHere we have a basic modal component with no content in it. It is a white card with a black transparent overlay. We are importing this component in our layout where we are dynamically displaying it based on the value of show modal which I've set to true by default.\n\n```\n<div\n  on:click|self\n  class=\"absolute inset-0 flex h-full w-full items-center justify-center bg-black bg-opacity-30\"\n>\n  <div class=\"rounded-md bg-white p-8\"></div>\n</div>\n```\n\n```\n<script>\n  let showModal = false;\n  function closeModal() {\n    showModal = false;\n  }\n</script>\n \n<button on:click=\"{showModal\" =\"true}\">Show Modal</button>\n{#if showModal}\n<Modal on:click=\"{closedModal}\" />\n{/if}\n```\n\nLet's say we have two instances where we need to use this modal. The first is to alert the user that there is a sale, and the second is to display a form for them sign up to a mailing list. We _could_ make two separate modal components, each displaying the appropriate content, but this would mean lots of repeated code. Just like elements can have children, so can components. Since the two modals are nearly identical, there is a lot of code to be shared. Instead, we can pass in the HTML attributes as a child of the component. But before a component can accept children, it needs to know where to put them. We do this with the `<slot>` element. Let's add a slot to our modal like this\n\n```\n<div\n  on:click|self\n  class=\"absolute inset-0 flex h-full w-full items-center justify-center bg-black bg-opacity-30\"\n>\n  <div class=\"rounded-md bg-white p-8\">\n    <slot> </slot>\n  </div>\n</div>\n```\n\nNow, in `+page.svelte` we can add any content we want within our modal tags and it will be inserted into our slot. For example, let's add some text and a button as children of our modal component like this:\n\n```\n<script>\n  let showModal = true;\n  function closeModal() {\n    showModal = false;\n  }\n</script>\n \n{#if showModal}\n<Modal on:click=\"{closedModal}\">\n  <p>Everything is 20% off this week!</p>\n  <button on:click=\"{showModal\" =\"false}\">Got It!</button>\n</Modal>\n{/if}\n```\n\nNow, our modal will display this content that we are passing in. This allows us to re-use the modal throughout the app displaying unique content each time.\n\nWe can also add a fallback to our slots. This way, if our modal component is ever left empty, the fallback content will be displayed. We can do this by adding content within the slot tag in our modal component. If we move into our modal component, we can add a default `<p>` tag that says \"no content provided\" and a button to close the modal.\n\n```\n<div\n  on:click|self\n  class=\"absolute inset-0 flex h-full w-full items-center justify-center bg-black bg-opacity-30\"\n>\n  <div class=\"rounded-md bg-white p-8\">\n    <slot>\n      <p>no content was provided</p>\n      <button on:click>Close</button>\n    </slot>\n  </div>\n</div>\n```\n\nNow, if we were to delete the HTML we're passing in from our root page, rather than seeing a blank white card, this fallback content will be displayed instead.\n\nIn this example, the component renders the direct child, but sometimes we need more control over placement. For instance, let's say this modal will always have a title, some content, and a button. We can add three different slots, each with their own fallback content, and then we need to add a name parameter to each.\n\n```\n<div\n  on:click|self\n  class=\"absolute inset-0 flex h-full w-full items-center justify-center bg-black bg-opacity-30\"\n>\n  <div class=\"rounded-md bg-white p-8\">\n    <div>\n      <slot name=\"title\">\n        <p>no title was provided</p>\n      </slot>\n    </div>\n    <div>\n      <slot name=\"content\">\n        <p>no content was provided</p>\n      </slot>\n    </div>\n    <div>\n      <slot name=\"button\">\n        <button on:click>Close</button>\n      </slot>\n    </div>\n  </div>\n</div>\n \n<slot>\n  <p class=\"mb-6 text-center text-xl font-bold text-black\">\n    No content was provided.\n  </p>\n  <button\n    on:click\n    class=\"rounded-md bg-black p-2 font-medium uppercase text-white\"\n  >\n    Close\n  </button>\n</slot>\n```\n\nSince we have fallback content for each slot, that's what will be displayed, but in our parent component, we can pass in three children to this component using the provided slot names.\n\n```\n<script>\n  let showModal = true;\n  function closeModal() {\n    showModal = false;\n  }\n</script>\n \n{#if showModal}\n<Modal on:click=\"{closedModal}\">\n  <span slot=\"title\"> Sale </span>\n \n  <span slot=\"content\"> The whole store is 20% off! </span>\n \n  <span slot=\"button\">\n    <button on:click=\"{showModal\" =\"false}\">Awesome!</button>\n  </span>\n</Modal>\n{/if}\n```\n\nNow, the modal will display the content that we are passing into each named slot.\n\nIn some cases, we may want to control parts of the component based on whether the parent passes in content for a certain slot. For instance, lets move back into our modal component and remove our title fallback and add a wrapper around out title slot to add padding and a background color, like this:\n\n```\n<div\n  on:click|self\n  class=\"absolute inset-0 flex h-full w-full items-center justify-center bg-black bg-opacity-30\"\n>\n  <div class=\"rounded-md bg-white p-8\">\n    <div class=\"bg-gray-100 p-2\">\n      <slot name=\"title\"> </slot>\n    </div>\n    <div>\n      <slot name=\"content\">\n        <p>no content was provided</p>\n      </slot>\n    </div>\n    <div>\n      <slot name=\"button\">\n        <button on:click>Close</button>\n      </slot>\n    </div>\n  </div>\n</div>\n```\n\nNow, the purple container will be visible even though there is no content being passed in. In this case, we will want to be able to hide the wrapper if the slot is empty. We can check if the slot is empty by checking the properties of the special `$$slots` variable. `$$slots` is an object whose keys are the names of the slots passed in by the parent component. If the parent leaves a slot empty, then `$$slots` will not have an entry for that slot. In our modal component, we want to use `$$slots` to make sure we only render the title container when the parent passes in content for the title slot. We can do that by checking if `$$slots.title` has an entry, and wrap the container in an if block like this:\n\n```\n<div\n  on:click|self\n  class=\"absolute inset-0 flex h-full w-full items-center justify-center bg-black bg-opacity-30\"\n>\n  <div class=\"rounded-md bg-white p-8\">\n    {#if $$slots.title}\n    <div class=\"bg-gray-100 p-2\">\n      <slot name=\"title\"> </slot>\n    </div>\n    {/if}\n    <div>\n      <slot name=\"content\">\n        <p>no content was provided</p>\n      </slot>\n    </div>\n    <div>\n      <slot name=\"button\">\n        <button on:click>Close</button>\n      </slot>\n    </div>\n  </div>\n</div>\n```\n\nNow the title container won't render when the `title` slot is empty.\n\nThe last thing to go over regarding slots is slot props. There may be a time when you need a slot to track some state and send that data back to the parent component in order to update the contents of that slot. For instance, let's say in our modal component we want to change the button text when it is hovered. To do this, let's create a new variable called `hover` and toggle it to `true` on `mouseenter` and `false` on `mouseleave`.\n\n```\n<script>\n  let hover = false;\n</script>\n \n<div\n  on:click|self\n  class=\"absolute inset-0 flex h-full w-full items-center justify-center bg-black bg-opacity-30\"\n>\n  <div class=\"rounded-md bg-white p-8\">\n    {#if $$slots.title}\n    <div class=\"bg-gray-100 p-2\">\n      <slot name=\"title\"> </slot>\n    </div>\n    {/if}\n    <div>\n      <slot name=\"content\">\n        <p>no content was provided</p>\n      </slot>\n    </div>\n    <div on:mouseenter=\"{()\" =\"\">\n      {hover = true}} on:mouseleave={()=> {hover = false}}>\n      <slot name=\"button\">\n        <button\n          on:click\n          class=\"font-mediump-2 rounded-md bg-black uppercase text-white\"\n        >\n          Close\n        </button>\n      </slot>\n    </div>\n  </div>\n</div>\n```\n\nNow, we want to access the value of hover in our parent component in order to update the content being passed into the slot. To get this value in the parent, we can pass it as a property of the slot, just like how we pass props between components. We will add `hover={hover}` in our slot tag.\n\n```\n<script>\n  let hover = false;\n</script>\n \n<div\n  on:click|self\n  class=\"absolute inset-0 flex h-full w-full items-center justify-center bg-black bg-opacity-30\"\n>\n  <div class=\"rounded-md bg-white p-8\">\n    {#if $$slots.title}\n    <div class=\"bg-gray-100 p-2\">\n      <slot name=\"title\"> </slot>\n    </div>\n    {/if}\n    <div>\n      <slot name=\"content\">\n        <p>no content was provided</p>\n      </slot>\n    </div>\n    <div on:mouseenter=\"{()\" =\"\">\n      {hover = true}} on:mouseleave={()=> {hover = false}}>\n      <slot name=\"button\" hover=\"{hover}\">\n        <button on:click>Close</button>\n      </slot>\n    </div>\n  </div>\n</div>\n```\n\nNow, to expose `hover` to the contents of the modal component, we use the `let` directive. In our button slot within the modal component we can add `let:hover={hovering}` now the value of `hovering` will toggle with that of hover from our modal component. This allows us to conditionally display different content in our slot depending on the value of `hovering`. I will go ahead and add an if block to display ‘Are you sure you want to close' whenever they hover on the close button.\n\n```\n<script>\n  let showModal = true;\n  function closeModal() {\n    showModal = false;\n  }\n</script>\n \n{#if showModal}\n<Modal on:click=\"{closedModal}\">\n  <span slot=\"title\"> Sale </span>\n \n  <span slot=\"content\"> The whole store is 20% off! </span>\n \n  <span slot=\"button\" let:hover=\"{hovering}\">\n    <button on:click=\"{showModal\" =\"false}\">\n      {#if hovering} Are you sure you want to close? {:else} Close {/if}\n    </button>\n  </span>\n</Modal>\n{/if}\n```\n\nThat sums up everything related to slots and customizing svelte components! I'll see you in the next video where we will spice that app up with some animations and transitions.\n\n[](https://vercel.com/docs/beginner-sveltekit/animations-and-transitions)\n\n#### [Animations and Transitions](https://vercel.com/docs/beginner-sveltekit/animations-and-transitions)\n\n[In this module, we will learn how to use Svelte's built-in animations and transitions to take our app to the next level.](https://vercel.com/docs/beginner-sveltekit/animations-and-transitions)",
  "title": "Slots",
  "description": "In this module, we will learn how to dynamically change a component's markup using the slot tag.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/conditionals-and-loops",
  "markdown": "# Conditionals and Loops\n\n[**Conditionals and Loops**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/05-conditionals-and-loops)\n\nSometimes in our code, we need to output different HTML elements depending on different conditions. For example, you may need to create a navigation menu that can toggle between hidden and shown. To achieve these different scenarios, you need to check the condition and then conditionally output HTML depending on that condition. How do we do this with Svelte? We use what's known as conditional statements, or `if/else` statements.\n\nLet's start off with a basic example.\n\n```\n<script>\n  let product = {\n    name: 't-shirt',\n    quantity: 0,\n  };\n  function increment() {\n    product.quantity += 1;\n  }\n</script>\n \n<button on:click=\"{increment}\">Increment</button>\n<div>This product is in stock</div>\n<div>Current {product.name} Quantity: {product.quantity}</div>\n```\n\nHere we have declared a variable `product` which is an object with the product’s `name`, `‘t-shirt’`, and `quantity`. We also have a function called `increment` which adds one to `quantity` anytime it’s called. We have a button that will call `increment` any time it’s clicked, as well as a `<div>` displaying the values of `product.name` and `product.quantity`. Lastly, we have a div alerting the user that the product is in stock, but we only want to show this div when the value of `quantity` exceeds 10. To conditionally render some markup with Svelte, we can wrap it in an `if` block. In our current example, we would add:\n\n```\n<script>\n  let product = {\n    name: 't-shirt',\n    quantity: 0,\n  };\n  function increment() {\n    product.quantity += 1;\n  }\n</script>\n \n<button on:click=\"{increment}\">Increment</button>\n{#if product.quantity > 10}\n<h3>This product is in stock</h3>\n{/if}\n<div>Current {product.name} Quantity: {product.quantity}</div>\n```\n\nHere we have declared a variable `product` which is an object with the product’s `name`, `‘t-shirt’`, and `quantity`. We also have a function called `increment` which adds one to `quantity` anytime it’s called. We have a button that will call `increment` any time it’s clicked, as well as a `<div>` displaying the values of `product.name` and `product.quantity`. Lastly, we have a div alerting the user that the product is in stock, but we only want to show this div when the value of `quantity` exceeds 10. To conditionally render some markup with Svelte, we can wrap it in an `if` block. In our current example, we would add:\n\n```\n<script>\n  let product = {\n    name: 't-shirt',\n    quantity: 0,\n  };\n  function increment() {\n    product.quantity += 1;\n  }\n</script>\n \n<button on:click=\"{increment}\">Increment</button>\n{#if product.quantity > 10}\n<h3>This product is in stock</h3>\n{/if}\n<div>Current {product.name} Quantity: {product.quantity}</div>\n```\n\nNow if you were to test this out in the browser, you will see the div appear once `quantity` reaches 11. In this example, we don’t see anything until `quantity` is greater than 10, but what if we want to display a different sentence if `quantity` is not greater than 10? Since these two conditions are mutually exclusive (i.e. `quantity` is either greater than 10 or not, it cannot be both), we can do this using an `else` block before closing our `if` block. In our code, we would add:\n\n```\n<script>\n  let product = {\n    name: 't-shirt',\n    quantity: 0,\n  };\n  function increment() {\n    product.quantity += 1;\n  }\n</script>\n \n<button on:click=\"{increment}\">Increment</button>\n{#if product.quantity > 10}\n<div>This product is in stock</div>\n{:else}\n<h3>Only a few items left in stock!</h3>\n{/if}\n<div>Current {product.name} Quantity: {product.quantity}</div>\n```\n\nNow, we will see the `<div>` displaying \"Only a few items left in stock!\" until `quantity` reaches 11, at which point the other `<div>` is displayed. We can take this a step further and display yet _another_ `<div>` if `quantity` is 0. With Svelte, multiple conditions can be chained together with `else if`. In our example we would add:\n\n```\n<script>\n  let product = {\n    name: 't-shirt',\n    quantity: 0,\n  };\n  function increment() {\n    product.quantity += 1;\n  }\n</script>\n \n<button on:click=\"{increment}\">Increment</button>\n{#if product.quantity > 10}\n<div>This product is in stock</div>\n{:else if product.quantity === 0}\n<div>This product is out of stock</div>\n{:else}\n<div>Only a few items left in stock!</div>\n{/if}\n<div>Current {product.name} Quantity: {product.quantity}</div>\n```\n\nNow we will see three different sentences displayed depending on whether `quantity` is 0, greater than 0 but less than or equal to 10, or greater than 10.\n\nLooking back at our code, this syntax probably feels unfamiliar, so let's go over it. A `#` character always indicates a block opening tag. A `/` character always indicates a block closing tag. A `:` character, as in `:else`, indicates a block continuation tag. Thankfully, this is almost all of the unique syntax that Svelte adds to HTML, and the same block syntax is used to loop over lists of data. Let's learn how to do that.\n\nLet’s start off by creating an array called `products` containing multiple product objects, each with a `name` and `quantity`.\n\n```\nlet products = [\n  { name: 't-shirt', quantity: 10 },\n  { name: 'mug', quantity: 30 },\n  { name: 'sticker', quantity: 8 },\n  { name: 'sweatshirt', quantity: 12 },\n];\n```\n\nIn order to iterate through this array and display the name of each product, we will once again use our block syntax, this time using an each block. Our code will look like the following:\n\n```\n<script>\n  let products = [\n    { name: 't-shirt', quantity: 10 },\n    { name: 'mug', quantity: 30 },\n    { name: 'sticker', quantity: 8 },\n    { name: 'sweatshirt', quantity: 12 },\n  ];\n</script>\n \n{#each products as product}\n<h3>{product.name}</h3>\n{/each}\n```\n\nHere, we have created an each block which will loop through our array. In this example, the expression, `products`, is our array, but it can be any array or array-like object (i.e. anything that has a `length` property), and `product` is the alias for each item in our `products` array. This alias can be anything we’d like it to be. It could just as easily be `{#each products as p}` or even `{#each products as hello}`. We can also get the current index as a second argument, like this:\n\n```\n<script>\n  let products = [\n    { name: 't-shirt', quantity: 10 },\n    { name: 'mug', quantity: 30 },\n    { name: 'sticker', quantity: 8 },\n    { name: 'sweatshirt', quantity: 12 },\n  ];\n</script>\n \n{#each products as product, i}\n<div>{product.name}</div>\n<div>Index: {i}</div>\n{/each}\n```\n\nWhen we use each blocks like this, it’s considered good practice specify a unique identifier, or a key, for each element within our array. In our example, let's add parentheses after our index, and within it I will put `product.name`. Now, each item in our array has its own unique key.\n\n```\n<script>\n  let products = [\n    { name: 't-shirt', quantity: 10 },\n    { name: 'mug', quantity: 30 },\n    { name: 'sticker', quantity: 8 },\n    { name: 'sweatshirt', quantity: 12 },\n  ];\n</script>\n \n{#each products as product, i (product.name)}\n<div>{product.name}</div>\n<div>Index: {i}</div>\n{/each}\n```\n\nIn this case, the unique identifier for each item is the item's name. This works because each item's name is different, but if there were two items with the same name this wold not work. Each item’s key _must_ be unique. Why is it important to key our each blocks? Svelte can use the key to keep track of which DOM element is connected to which item in the array.\n\nBy default, any time you modify the value of an `each` block, it will add and remove items at the _end_ of the block, and update any values that have changed, which often times is not what you want. This is easier to show than to explain. Let’s remove our key and add a checkbox in this each block as well as a button that calls the method `addProduct` when it is clicked. This method adds a new product to out `products` array.\n\n```\n<script>\n  let products = [\n    { name: 't-shirt', quantity: 10 },\n    { name: 'mug', quantity: 30 },\n    { name: 'sticker', quantity: 8 },\n    { name: 'sweatshirt', quantity: 12 },\n  ];\n  function addProduct() {\n    let cup = { name: 'cup', quantity: 4 };\n    products = [cup, ...products];\n  }\n</script>\n<button on:click=\"{addProduct}\">Add Product</button>\n{#each products as product, i}\n<div>{product.name}</div>\n<div>Index: {i}</div>\n<input type=\"checkbox\" />\n{/each}\n```\n\nNow, if you test this in the browser and check this first checkbox alongside the 't-shirt' product and then click the button, you will see the checked checkbox is now aligned to the new product, 'cup', not 't-shirt'. Whats happening is the DOM is adding a new node, and then updating each node to match our each block. Instead, we want to add a new DOM node, and leave the others unaffected. This is done by keying our each block. To avoid this issue, it’s good practice to always specify a unique identifier, or a key, for each element within our array when working with each blocks. Let's add our key back in. Now, each item in our array once again has its own unique key which Svelte can use to keep track of which DOM element is connected to which item in the array.\n\n```\n<script>\n  let products = [\n    { name: 't-shirt', quantity: 10 },\n    { name: 'mug', quantity: 30 },\n    { name: 'sticker', quantity: 8 },\n    { name: 'sweatshirt', quantity: 12 },\n  ];\n  function addProduct() {\n    let cup = { name: 'cup', quantity: 4 };\n    products = [cup, ...products];\n  }\n</script>\n<button on:click=\"{addProduct}\">Add Product</button>\n{#each products as product, i (product.name)}\n<div>{product.name}</div>\n<div>Index: {i}</div>\n<input type=\"checkbox\" />\n{/each}\n```\n\nNow, each block is linked under the hood with a specific piece of data in the array. If you check one of these check boxes and click the button, the correct checkbox will still be checked. This step can potentially be skipped over if not careful, but keying your each blocks is a really good habit to get into.\n\nThat sums up this module, in the next module we will learn how to add some style to our app with CSS!\n\n[](https://vercel.com/docs/beginner-sveltekit/css)\n\n#### [CSS](https://vercel.com/docs/beginner-sveltekit/css)\n\n[In this module, we’re going to cover how to use CSS and SASS/SCSS in our Svelte Applications.](https://vercel.com/docs/beginner-sveltekit/css)",
  "title": "Conditionals and Loops",
  "description": "In this module, we will go over how to express logic in our HTML using conditionals and loops.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_MANAGEMENT_NO_CIRCULAR_IMPORTS",
  "markdown": "# PACKAGE\\_MANAGEMENT\\_NO\\_CIRCULAR\\_IMPORTS\n\nConformance Rules\n\nThis check ensures that there is no path through import statements back to the original file. This helps to keep dependencies between files clean, which aids in dependency analysis and refactoring.\n\n```\nimport Badge from './component-b';\n \nexport function withHigherOrderComponent({ children }) {\n  return <div>{children}</div>;\n}\n \nexport function Page() {\n  return (\n    <div>\n      <Badge />\n    </div>\n  );\n}\n```\n\n```\nimport { withHigherOrderComponent } from './component-a';\n \nfunction Badge() {\n  return <div>Badge</div>;\n}\n \nexport default withHigherOrderComponent(Badge);\n```\n\nThe exports in the file that has a circular import should be refactored so that the circular import doesn't exist anymore. This might be fixed by moving some of the exports in a file to a separate file so that the imports don't cause a circular import. In some cases, it may be necessary to refactor the code to avoid the circular import.",
  "title": "PACKAGE_MANAGEMENT_NO_CIRCULAR_IMPORTS",
  "description": "Circular imports between two files are not allowed.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/TYPESCRIPT_CONFIGURATION",
  "markdown": "# TYPESCRIPT\\_CONFIGURATION\n\nConformance Rules\n\nUsing TypeScript in a workspace requires a few items to be set up correctly:\n\n*   There should be a `tsconfig.json` file at the root of the workspace.\n*   The `tsconfig.json` should extend from the repo's shared `tsconfig.json` file.\n*   The `tsconfig.json` file should specify a `tsBuildInfoFile` to speed up incremental compilation.\n*   The `tsconfig.json` file should have certain compiler options set for improved type safety.\n*   The workspace should have a `type-check` command that runs the TypeScript compiler to check for type issues.\n\nThese changes will ensure that the TypeScript compiler picks up the right compiler settings for the project and that the TypeScript type checking will run when the `type-check` command is run for the entire repository.\n\n```\nConformance errors found!\n \nA Conformance error occurred in test \"TYPESCRIPT_CONFIGURATION\".\n \npackage.json in \"docs\" should have a \"type-check\" script that runs TypeScript type checking.\n \nTo find out more information and how to fix this error, visit\n/docs/workflow-collaboration/conformance/rules/TYPESCRIPT_CONFIGURATION.\n \nIf this violation should be ignored, add the following entry to\n/apps/docs/.allowlists/TYPESCRIPT_CONFIGURATION.allowlist.json\nand get approval from the appropriate person.\n \n{\n  \"testName\": \"TYPESCRIPT_CONFIGURATION\",\n  \"reason\": \"TODO: Add reason why this violation is allowed to be ignored.\",\n  \"location\": {\n    \"workspace\": \"docs\"\n  }\n}\n```\n\nThe shared `tsconfig.json` should have at least the following defined:\n\n```\n{\n  \"compilerOptions\": {\n    \"incremental\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"strict\": true\n  }\n}\n```\n\nFor other configuration issues, the project's `tsconfig.json` may need to be updated. Most files that don't require customization should look like:\n\n```\n{\n  \"extends\": \"your_shared_tsconfig/base.json\",\n  \"exclude\": [\"dist\", \"node_modules\"],\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"node_modules/.cache/tsbuildinfo.json\"\n  }\n}\n```\n\nAdditionally, the project's `package.json` file may need to be updated. A `type-check` command needs to be added to the `scripts` section:\n\n```\n{\n  \"scripts\": {\n    ...,\n    \"type-check\": \"tsc -p tsconfig.json --noEmit\"\n  }\n}\n```\n\nThe dependency on the repository's shared TypeScript must also exist:\n\n```\n{\n  \"devDependencies\": {\n    \"your_shared_tsconfig\": \"workspace:*\"\n  }\n}\n```",
  "title": "TYPESCRIPT_CONFIGURATION",
  "description": "Requires that a workspace package that uses TypeScript files has configured TypeScript correctly for that workspace.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/tailwind",
  "markdown": "# Tailwind CSS\n\n[**Tailwind CSS**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/07-tailwind)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Changed `__layout.svelte` to `+layout.svelte`.\n    \n\nLet's install Tailwind CSS for styling. First, head over to the [SvelteKit Framework Guide](https://tailwindcss.com/docs/guides/sveltekit) in the Tailwind docs. Things are constantly changing, so while these are the steps at the time of this recording, make sure you check the docs in case they change.\n\nWe can skip this first step since we've already created our SvelteKit app, and move on to copying the following commands and running them in our terminal.\n\n```\nnpm install -D tailwindcss postcss autoprefixer svelte-preprocess npx\ntailwindcss init tailwind.config.cjs -p\nmv postcss.config.js postcss.config.cjs\n```\n\nThis first command will install Tailwind, and the others will generate two files, \\*\\*`tailwind.config.cjs`\\*\\*and `postcss.config.cjs`.\n\nIf you open up the code in your text editor, you'll see that tailwind is installed, and the two new files have been generated. Our `postccs.config.js` file is where we can specify what PostCSS plugins we want to use. All we need to do is export an object that contains a key called plugins, which is an array of plugins that should be used to process our CSS. We need to require Tailwind CSS since of course we want to use Tailwind as well as autoprefixer, so we can automatically add vendor prefixes to our CSS, but this has already been done for us, so we don't need to touch this file.\n\n```\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n    tailwindcss: {},\n  },\n};\n```\n\nWe can skip over step three. Next, let's move into our `tailwind.config.cjs` file where we need to add the paths to all of our templates. We can just copy and paste this code into the file.\n\n```\nmodule.exports = {\n  content: ['./src/**/*.{html,js,svelte,ts}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\nFinally, we need to add the `@tailwind` directives for each of Tailwind's layers in our `app.css` and make sure we are importing this file in `+layout.svelte`.\n\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nNow we can just re-start our app and tailwind should kick in! If you run the app locally in your browser, you will see tailwind is working because it has stripped all default element stylings. If you try adding some tailwind classes to your app, you should see the app update instantly in the browser with these changes.\n\nNow that we've got tailwind installed, we will use it to build out the rest of our UI in future videos. Next up we're going to learn about working with Svelte components.\n\n[](https://vercel.com/docs/beginner-sveltekit/working-with-components)\n\n#### [Working With Components](https://vercel.com/docs/beginner-sveltekit/working-with-components)\n\n[In this module will learn how to create Svelte components and how they work.](https://vercel.com/docs/beginner-sveltekit/working-with-components)",
  "title": "Tailwind CSS",
  "description": "In this module, we're going to cover how to add Tailwind to our SvelteKit project.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/context-api",
  "markdown": "# Context API\n\n[**Context API**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/10-context-api)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Changed `index.svelte` to `+page.svelte`.\n    \n\nIn this module, we will learn about the context API. The context API provides a mechanism for components to communicate data without passing it through the component tree as props. Let's start by reviewing _when_ we would use the context API, and then we will go over _how_ to use it.\n\nImagine we have an application built with components like this.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fbeginner-sveltekit%2Fcomponent-tree.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nYou can see we have our root component, `homepage`, and within that component are three child components: `header`, `article`, and `footer`. The header component has its own child components, `logo`, `title`, and `nav`. And nav also uses a child component, `link`. This example visualizes nested components as they may appear in a project.\n\nLet's assume that we want one of the link components to display the value of `pageTitle` which is declared in the root component, `homePage`. Using the knowledge we have from previous videos, we can achieve this by passing `pageTitle` as a prop to each component. For example, to get `pageTitle` to the link component, we will have to first pass it to the header, then to the nav component, and finally into the link component. Even though header and nav components do not need `pageTitle`, we have to send it to them in order for them to pass it to components further down in the tree. If you've worked with other component libraries before, you may have heard of this as Prop drilling or Middleman components. Now, in this example that may not seem so bad, but imagine if this were nested 10 levels deep, or even more, as it may be in a real project. That would become a headache to implement, and will make debugging very confusing in the future.\n\nWouldn't it be nice if we could make `pageTitle` directly available to the component without having to forward it through the component tree as props? This is where the context API comes in handy. The context API provides us with a way to pass data through the component tree without having to pass it manually as props. The context API offers two methods, `setContext` and `getContext`, which can access data associated with a key on the context. The context is just an arbitrary object with some set of keys and values, so anything that can be stored in an object can go in the context. A component can call `setContext`, passing in the key and some data as params, and this context becomes available to any of its child components through the use of `getContext`.\n\nLet's learn how to use the context API in a real life example.\n\nHere in our index page, we see we are importing a new component, `CollectionCard` that displays a highlighted collection, in this case `newItems`, which is an array of products that we are then passing into the `CollectionCard` component as a prop.\n\n```\n<script>\n  import GridTile from '$lib/GridTile.svelte';\n  import CollectionCard from '$lib/CollectionCard.svelte';\n \n  let products = [\n    {\n      title: 'Cup',\n      cost: '$10',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Cup-front-black.png?v=1623159405',\n    },\n    {\n      title: 'Shirt',\n      cost: '$10',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/short-sleeve-t-shirt-0.png?v=1622902418',\n    },\n  ];\n  let newItems = [\n    {\n      name: 'Graphic T',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Front-NoModel_ec3be051-d579-4c03-b55b-64449d0b0445.png?v=1623255893',\n      price: '$60.00',\n    },\n    {\n      name: 'Jacket',\n      src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/bomber-jacket-0.png?v=1622902777',\n      price: '$80.00',\n    },\n  ];\n</script>\n \n<main>\n  <CollectionCard collection=\"{newItems}\" />\n  {#each products as product}\n  <GridTile {product} />\n  {/each}\n</main>\n```\n\nIf we migrate into the `CollectionCard` component, we see we are importing another component, `ItemsGrid`, which we are again passing our items into as a prop.\n\n```\n<script>\n  import ItemsGrid from '$lib/ItemsGrid.svelte';\n  export let collection;\n</script>\n \n<ItemsGrid items=\"{collection}\" />\n```\n\nFinally, we are actually using the value of our `items` prop in this `ItemsGrid` component.\n\n```\n<script>\n  export let items;\n</script>\n \n<div class=\"flex items-center\">\n  {#each items as item}\n  <div\n    class=\"relative m-2 flex h-40 w-1/2 items-center justify-center overflow-hidden bg-white/20\"\n  >\n    <img src=\"{item.src}\" class=\"h-full\" alt=\"\" />\n    <div class=\"absolute bottom-0 right-0 bg-black p-2\">{item.name}</div>\n  </div>\n  {/each}\n</div>\n```\n\nNow let’s use the context API to set the value of items in our root component, and get that data in our `ItemsGrid` component, without forwarding it through the component tree.\n\nNow in order to get the value of `newItems` from our root component into this component, we first need to provide the context value in our root component. Next move back to `+page.svelte` and import the `setContext` function that is provided to us by Svelte.\n\nNow in our script we can invoke `setContext` which accepts two arguments, the `key` and `value`. The context object can be anything, so let’s set our newItems context like this,\n\n```\nimport { setContext } from 'svelte';\nsetContext('newItemsContext', newItems);\n```\n\nWhere the string `newItemsContext` is our key and we are setting its value to that of `newItems`. Now the context is set, so we can go back to our `ItemsGrid` component and get the `newItemsContext` value. To do this, we will import the `getContext` method from Svelte. We can then use this method to get the value of our `newItemsContext`. To do this we write:\n\n```\nimport { getContext } from 'svelte';\nlet items = getContext('newItemsContext');\n```\n\nNow, let’s go through each component and remove their props. If we check out our browser, we can see the value of `newItems` is successfully being displayed. To double check, we can change the value of `newItems` in our root component. Let’s move into `+page.svelte` and change the title from ‘T-Shirt’ to ‘Graphic T’. Looking back in our browser we see that our component updated with the new value.\n\nWe now have an efficient way to pass data down the component tree, even a deeply nested one! It is important to remember that using the context API only passes data downstream, so from parent to child. Now, eventually, most apps will have values that need to be accessed by multiple unrelated components. In the next module we will learn how to share state between all components using stores.\n\n[](https://vercel.com/docs/beginner-sveltekit/svelte-stores)\n\n#### [Svelte Stores](https://vercel.com/docs/beginner-sveltekit/svelte-stores)\n\n[In this module, we will learn how to share state between unrelated components through the use of Svelte stores.](https://vercel.com/docs/beginner-sveltekit/svelte-stores)",
  "title": "Context API",
  "description": "In this module, we will learn how to pass data to deeply nested components using the Context API.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_JSON_TYPE_REQUIRED",
  "markdown": "# PACKAGE\\_JSON\\_TYPE\\_REQUIRED\n\nRequires that every package.json file has the type field set to encourage using ES Modules since commonjs is the default.\n\nConformance Rules\n\nThis check ensures that every `package.json` has a `type` field. This field determines how files within the workspace are treated by default. Files are treated as [CommonJS](https://nodejs.org/api/modules.html) by default. However, the new recommendation is to use [ES Modules](https://nodejs.org/api/esm.html).\n\nThis field is required so that packages explicitly choose which module format to use, preferring ES Modules when possible.\n\nSee the [Node.js docs](https://nodejs.org/api/packages.html#type) for more information.\n\nThe `type` field should be set to `module` when possible, although there are still situations where `commonjs` has to be used.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "PACKAGE_JSON_TYPE_REQUIRED",
  "description": "Requires that every package.json file has the type field set to encourage using ES Modules since commonjs is the default.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_JSON_DESCRIPTION_REQUIRED",
  "markdown": "# PACKAGE\\_JSON\\_DESCRIPTION\\_REQUIRED\n\nRequires that every package.json file has the description field set.\n\nConformance Rules\n\nThis check ensures that every `package.json` has a `description` field. This field is used to describe the workspace's purpose within the monorepo.\n\nSee the [Node.js docs](https://nodejs.org/api/packages.html#description) for more information.\n\nAdd the `description` field to the `package.json` file that explains what the package does and when it should be used.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "PACKAGE_JSON_DESCRIPTION_REQUIRED",
  "description": "Requires that every package.json file has the description field set.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/TESTS_NO_ONLY",
  "markdown": "# TESTS\\_NO\\_ONLY\n\nConformance Rules\n\nFocusing tests can help to write and debug test suites, but focused tests should be unfocused before committing changes.\n\nThis rule disallows focused tests so that they can't be committed without an allowlist entry.\n\n```\ndescribe('button', () => {\n  it.only('should render', () => {\n    // ...\n  });\n});\n```\n\nNote that the following patterns (and variants of these patterns) will be reported as errors by this test. These should cover popular test frameworks and runners, including:\n\n```\n// Most test frameworks and runners\ndescribe.only(/* ... */);\nit.concurrent.only(/* ... */);\ntest.only.each([])(/* ... */);\n// Jest - supported in addition to the above\nfdescribe(/* ... */);\nfit.each([])(/* ... */);\nftest(/* ... */);\n```\n\nThis error will be resolved when debugging is complete and the test has been unfocused.\n\nThe default pattern matches the default patterns for Jest and Vitest, however you can provide your own patterns through the `paths` property.\n\nThe default configuration is:\n\n```\n{\n  \"configuration\": [\n    \"testPatterns\": [\"**/unit-tests/**/*.{js,jsx}\"]\n  ]\n}\n```",
  "title": "TESTS_NO_ONLY",
  "description": "Requires that focused tests (i.e. it.only()) are unfocused.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_JSON_SIDE_EFFECTS_REQUIRED",
  "markdown": "# PACKAGE\\_JSON\\_PRIVATE\\_REQUIREDPACKAGE\\_JSON\\_SIDE\\_EFFECTS\\_REQUIRED\n\nRequires that every package.json file has the sideEffects field set to ensure tree-shaking works optimally.\n\nConformance Rules\n\nThis check ensures that every `package.json` has a `sideEffects` field. The `sideEffects` field is required for shared packages. This field helps bundlers make assumptions about packages that improve tree shaking, or pruning files that aren't used and don't have any global side effects.\n\nSee [https://webpack.js.org/guides/tree-shaking/](https://webpack.js.org/guides/tree-shaking/) for more information.\n\nThe `sideEffects` field should be set to `false` unless the code in that workspace has global side effects, in which case it should be set to `true` or an array of glob patterns for files that do have side effects.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "PACKAGE_JSON_PRIVATE_REQUIREDPACKAGE_JSON_SIDE_EFFECTS_REQUIRED",
  "description": "Requires that every package.json file has the sideEffects field set to ensure tree-shaking works optimally.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_JSON_PRIVATE_REQUIRED",
  "markdown": "# PACKAGE\\_JSON\\_PRIVATE\\_REQUIRED\n\nRequires that every package.json file has the private field set to prevent accidental publishing to npm.\n\nConformance Rules\n\nThis check ensures that every `package.json` has the `private` field set to true or false. This field ensures that the workspace is not accidentally published to npm. In a monorepo, this should be the default to prevent packages from being accidentally published and can be explicitly set to `false` to indicate that the package can be published.\n\nPackages should set `private` to `true` unless the package is intended to be published in which case it can be explicitly set to `false`.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "PACKAGE_JSON_PRIVATE_REQUIRED",
  "description": "Requires that every package.json file has the private field set to prevent accidental publishing to npm.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_JSON_NAME_REQUIRED",
  "markdown": "# PACKAGE\\_JSON\\_NAME\\_REQUIRED\n\nRequires that every package.json file has the name field set to ensure each workspace has a unique identifier.\n\nConformance Rules\n\nThis check ensures that every `package.json` has a `name` field. This field is important because it used to identify the workspace in the monorepo.\n\nSee the [Node.js docs](https://nodejs.org/api/packages.html#name) for more information.\n\nAdd the `name` field to the `package.json` file that contains a unique name for this package. The name should be understandable by someone viewing or using the package as to what it does.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "PACKAGE_JSON_NAME_REQUIRED",
  "description": "Requires that every package.json file has the name field set to ensure each workspace has a unique identifier.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_VARIABLE_IMPORT_REFERENCES",
  "markdown": "# NO\\_VARIABLE\\_IMPORT\\_REFERENCES\n\nConformance Rules\n\n`import` and `require` statements load code from another file. When the location of the import is influenced by user input, the user may be able to load code that would otherwise be inaccessible to them. Such imports should protect against this by adding guards to make sure that arbitrary code can not be loaded from the import statement.\n\nThe following code would be flagged by this rule:\n\n```\nfunction loadDynamicCode(moduleName: string) {\n  return import(moduleName);\n}\n```\n\nIn this example, it can not be guaranteed that the `moduleName` that is provided would not be arbitrary input that could load unintended code.\n\nInstances of this rule should be reviewed by a knowledgeable security person. If user input is used to select which module is loaded, guards against arbitrary strings should be added, such as only allowing access to a list of valid options. If no user input is involved in the import, then this code could be allowlisted after being reviewed by a security team member, but developers should be careful to ensure that only the desired code can be loaded.",
  "title": "NO_VARIABLE_IMPORT_REFERENCES",
  "description": "import and require statements must be passed string literals to avoid arbitrary user access to code.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/PACKAGE_JSON_DUPLICATE_DEPENDENCIES",
  "markdown": "# PACKAGE\\_JSON\\_DUPLICATE\\_DEPENDENCIES\n\nConformance Rules\n\nPackages that are listed in the `dependencies` section of `package.json` should not be listed in `devDependencies` or `peerDependencies`. A package in the `dependencies` section says that the package are required for the functionality of your workspace, in which case there is no reason to also list it in `devDependencies` or `peerDependencies`.\n\nThis `package.json` file would cause the check to fail:\n\n```\n{\n  \"name\": \"workspace\",\n  \"dependencies\": {\n    \"@next/mdx\": \"13.1.5\"\n  },\n  \"devDependencies\": {\n    \"@next/mdx\": \"13.1.5\"\n  }\n}\n```\n\nIf the package is needed to use the package from your workspace, you can remove the package from the `devDependencies` and `peerDependencies` sections. If the package is only needed for development of your workspace or if the package is only needed to express version compatibility requirements and it is not needed for the functionality of your workspace when people use your package, then it can be left in `devDependencies` or `peerDependencies` and be removed from `dependencies`.",
  "title": "PACKAGE_JSON_DUPLICATE_DEPENDENCIES",
  "description": "Found duplicate dependencies between the list of dependencies and devDependencies or peerDependencies in a package.json file..",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_CORS_HEADERS",
  "markdown": "# NO\\_CORS\\_HEADERS\n\nConformance Rules\n\nMisconfiguring CORS ([Cross Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)) headers can introduce security risks, potentially exposing private and/or secure information such as API keys and user data.\n\nThis rule is not meant to block usage of CORS. Instead, it is designed to flag potentially risky configuration for review by the appropriate engineer(s) or team(s).\n\nFor more information around the risks associated with CORS, including testing for potential vulnerabilities, see:\n\nThe examples below are common approaches to settings CORS headers in JavaScript applications. All of these examples will be caught by this rule.\n\n```\nresponse.headers.set('Access-Control-Allow-Origin', '*');\n \nconst headers = {\n  'Access-Control-Allow-Credentials': true,\n};\n \nconst options = {\n  headers: [\n    {\n      key: 'Access-Control-Max-Age',\n      value: 600,\n    },\n  ],\n};\n \nconst headers = new Headers();\nheaders.append('Access-Control-Allow-Methods', '*');\n```\n\nAdditionally, this rule will catch partial matches, such as a template literal. In this example, the rule will match the `\"Access-Control-\"` part of the template literal.\n\n```\nconst headers = new Headers();\nheaders.append(`Access-Control-${HEADER_TYPE}`, '*');\n```\n\nEngineers should reach out to the appropriate engineer(s) or team(s) for a security review of the configuration.\n\nWhen requesting a review, please provide as much information as possible around the proposed CORS configuration. Where applicable, include information around alternative approaches, and why this approach is preferable.\n\nAs there are many ways to configure CORS headers in applications, this rule will match any string that looks like a possible CORS header. We've tried to mitigate the risk of false-positives, but if they occur they will need to be added to the allowlists.",
  "title": "NO_CORS_HEADERS",
  "description": "Warns when CORS header (or header-like) configuration is detected, requiring that configuration to be allowlisted.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_SERIAL_ASYNC_CALLS",
  "markdown": "# NO\\_SERIAL\\_ASYNC\\_CALLS\n\nConformance Rules\n\nSequential execution of async/await calls can significantly impact performance because each await call prevents further execution until resolving its Promise. This rule aims to refactor sequential async/await calls into parallel executions to enhance performance.\n\nYou should note that this rule might not flag some async/await usage patterns. For example:\n\n*   Patterns involving conditional statements\n*   Call expressions\n*   Patterns that await in a manner that suggests non-serial dependencies between calls\n\nFor instance, scenarios where async calls depend conditionally on each other or are part of complex expressions are not flagged. This includes cases where one async call's outcome is necessary for subsequent calls, requiring serial execution due to logical or dependency reasons.\n\nThe following example will not be flagged by this rule:\n\n```\nasync function updateDatabase() {\n  const result1 = await async1();\n  const result2 = await async2();\n  doSomething(result1, result2);\n}\n```\n\nThese patterns fall outside the scope of this rule because safely suggesting parallelization requires more context, and the rule uses conservative heuristics to avoid false positives.\n\nInstead, of executing async logic sequentially, opt to refactor the logic so it can be run parallel.\n\nThis can be fixed using `Promise.all`:\n\n```\nexport async function getStaticProps() {\n  const firstThing = await getFirstThing();\n  const secondThing = await getSecondThing();\n \n  return {\n    props: {\n      firstThing,\n      secondThing,\n    },\n  };\n}\n```\n\nWe can extract both `await` expressions into a single `Promise.all`, as follows:\n\n```\nexport async function getStaticProps() {\n  const [firstThing, secondThing] = await Promise.all([\n    getFirstThing(),\n    getSecondThing(),\n  ]);\n \n  return {\n    props: {\n      firstThing,\n      secondThing,\n    },\n  };\n}\n```",
  "title": "NO_SERIAL_ASYNC_CALLS",
  "description": "Prevent blocking serial async await calls in your applications.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_DANGEROUS_HTML",
  "markdown": "# NO\\_DANGEROUS\\_HTML\n\nPrevent the unsafe creation of DOM via HTML methods in your application.\n\nConformance Rules\n\nUnsafe creation of DOM can be done a variety of ways:\n\n*   `element.innerHTML`\n*   `element.outerHTML`\n*   `DOMParser.parseFromString()`\n*   `element.insertAdjacentHTML()`\n*   `srcdoc` on iframe elements\n*   `dangerouslySetInnerHTML` prop in React apps\n\nUsage of these methods is deemed an unsafe coding practice as the HTML might result in security vulnerabilities.\n\nIt is recommended to instead use alternative approaches for HTML construction - such as `document.createElement()` or a HTML sanitizer.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NO_DANGEROUS_HTML",
  "description": "Prevent the unsafe creation of DOM via HTML methods in your application.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_MIXED_ASYNC_MODULES",
  "markdown": "# NO\\_MIXED\\_ASYNC\\_MODULES\n\nConformance Rules\n\nTop-level await expressions in modules that are imported by other modules in sync prevent possible lazy module optimizations from being deployed on the module containing the top-level await.\n\nOne such optimization this prevents is inline lazy imports. Inline lazy imports allow for modules to be lazily evaluated and executed when they're used, rather than at initialization time of the module that uses them, improving initialization performance.\n\nThis is particularly impactful for modules that might only be used conditionally or given a user's interaction which might happen much latter in an application. Without this optimization, the module initialization times, such as for cold boots on serverless functions, could be slowed down for every request.\n\nConsider refactoring the import to a dynamic import instead, or removing the top-level await in favor of standard import.\n\nIf a top-level await is important, then it's important that any other modules importing the module with the top-level await do so dynamically, as to avoid affecting initialization performance.\n\nFor example, this can be refactored:\n\n```\n// Contains a top-level await\nimport { asyncConfig } from 'someModule';\n \nfunction doSomething(data) {\n  processData(data, asyncConfig);\n}\n```\n\nTo this:\n\n```\nfunction doSomething(data) {\n  import('someModule').then(({ asyncConfig }) => {\n    processData(data, asyncConfig);\n  });\n}\n```\n\nOr this:\n\n```\nimport { asyncConfig } from 'someModule';\n \n// Note the async keyword on the function\nasync function doSomething(data) {\n  processData(data, asyncConfig);\n}\n```",
  "title": "NO_MIXED_ASYNC_MODULES",
  "description": "Prevent imports to modules that contain top-level awaits in your applications.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/cli/env",
  "markdown": "# vercel env\n\nThe `vercel env` command is used to manage [Environment Variables](https://vercel.com/docs/projects/environment-variables) of a Project, providing functionality to list, add, remove, and export.\n\nTo leverage environment variables in local tools (like `next dev` or `gatsby dev`) that want them in a file (like `.env`), run `vercel env pull <file>`. This will export your Project's environment variables to that file. After updating environment variables on Vercel (through the dashboard, `vercel env add`, or `vercel env rm`), you will have to run `vercel env pull <file>` again to get the updated values.\n\nSome frameworks make use of environment variables during local development through CLI commands like `next dev` or `gatsby dev`. The `vercel env pull` sub-command will export development environment variables to a local `.env` file or a different file of your choice.\n\nTo override environment variable values temporarily, use:\n\n```\nMY_ENV_VAR=\"temporary value\" next dev\n```\n\n  \n\nIf you are using [`vercel build`](https://vercel.com/docs/cli/build) or [`vercel dev`](https://vercel.com/docs/cli/dev), you should use [`vercel pull`](https://vercel.com/docs/cli/pull) instead. Those commands operate on a local copy of environment variables and Project settings that are saved under `.vercel/`, which `vercel pull` provides.\n\nUsing the `vercel env` command to list all Environment Variables in a Vercel Project.\n\nUsing the `vercel env` command to add an Environment Variable to a Vercel Project.\n\nUsing the `vercel env` command to remove an Environment Variable from a Vercel Project.\n\n```\nvercel env ls [environment]\n```\n\nUsing the `vercel env` command to list Environment Variables for a specific Environment in a Vercel Project.\n\n```\nvercel env ls [environment] [gitbranch]\n```\n\nUsing the `vercel env` command to list Environment Variables for a specific Environment and Git branch.\n\nUsing the `vercel env` command to add an Environment Variable to all Environments to a Vercel Project.\n\n```\nvercel env add [name] [environment]\n```\n\nUsing the `vercel env` command to add an Environment Variable for a specific Environment to a Vercel Project.\n\n```\nvercel env add [name] [environment] [gitbranch]\n```\n\nUsing the `vercel env` command to add an Environment Variable to a specific Git branch.\n\n```\nvercel env add [name] [environment] < [file]\n```\n\nUsing the `vercel env` command to add an Environment Variable to a Vercel Project using a local file's content as the value.\n\n```\necho [value] | vercel env add [name] [environment]\n```\n\nUsing the `echo` command to generate the value of the Environment Variable and piping that value into the `vercel dev` command. Warning: this will save the value in bash history, so this is not recommend for secrets.\n\n```\nvercel env add [name] [environment] [gitbranch] < [file]\n```\n\nUsing the `vercel env` command to add an Environment Variable with Git branch to a Vercel Project using a local file's content as the value.\n\n```\nvercel env rm [name] [environment]\n```\n\nUsing the `vercel env` command to remove an Environment Variable from a Vercel Project.\n\nUsing the `vercel env` command to download Development Environment Variables from the cloud and write to a specific file.\n\n```\nvercel env pull --environment=preview\n```\n\nUsing the `vercel env` command to download Preview Environment Variables from the cloud and write to the `.env.local` file.\n\n```\nvercel env pull --environment=preview --git-branch=feature-branch\n```\n\nUsing the `vercel env` command to download \"feature-branch\" Environment Variables from the cloud and write to the `.env.local` file.\n\nThese are options that only apply to the `vercel env` command.\n\nThe `--yes` option can be used to bypass the confirmation prompt when overwriting an environment file or removing an environment variable.\n\nUsing the `vercel env pull` command with the `--yes` option to overwrite an existing environment file.\n\n```\nvercel env rm [name] --yes\n```\n\nUsing the `vercel env rm` command with the `--yes` option to skip the remove confirmation.\n\nThe following [global options](https://vercel.com/docs/cli/global-options) can be passed when using the `vercel env` command:\n\nFor more information on global options and their usage, refer to the [options section](https://vercel.com/docs/cli/global-options).",
  "title": "vercel env",
  "description": "Learn how to manage your environment variables in your Vercel Projects using the vercel env CLI command.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/cli/logs",
  "markdown": "# vercel logs\n\nThe `vercel logs` command is used to retrieve logs data for a specific deployment. You can find more detailed logs on the Deployment Overview page from the Vercel Dashboard.\n\n```\nvercel logs [deployment-url]\n```\n\nUsing the `vercel logs` command to retrieve logs for a specific deployment.\n\nThese are options that only apply to the `vercel logs` command.\n\nThe `--follow` option, shorthand `-f`, can be used to watch for additional logs output.\n\nUsing the `vercel logs` command with the `--follow` option.\n\nThe `--number` option, shorthand `-n`, can be used to specify the number of log lines to output.\n\nUsing the `vercel logs` command with the `--number` option.\n\nThe `--output` option, shorthand `-o`, can be used to specify the format of the logs output, this can be either `short` (default) or `raw`.\n\nUsing the `vercel logs` command with the `--output` option.\n\nThe `--since` option can be used to return logs only after a specific date, using the ISO 8601 format.\n\n```\nvercel logs --since 2019-09-04T07:05:43+00:00\n```\n\nUsing the `vercel logs` command with the `--since` option.\n\nThe `--query` option, shorthand `-q`, can be used to return logs against a search query.\n\nUsing the `vercel logs` command with the `--query` option.\n\nThe `--until` option can be used to return logs only up until a specific date, using the ISO 8601 format.\n\n```\nvercel logs --until 2019-09-04T07:05:43+00:00\n```\n\nUsing the `vercel logs` command with the `--until` option.\n\nThe following [global options](https://vercel.com/docs/cli/global-options) can be passed when using the `vercel logs` command:\n\nFor more information on global options and their usage, refer to the [options section](https://vercel.com/docs/cli/global-options).",
  "title": "vercel logs",
  "description": "Learn how to list out all logs for a specific deployment using the vercel logs CLI command.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_EXTERNAL_CSS_AT_IMPORTS",
  "markdown": "# NO\\_EXTERNAL\\_CSS\\_AT\\_IMPORTS\n\nConformance Rules\n\nImporting CSS through ([`@import`](https://developer.mozilla.org/en-US/docs/Web/CSS/@import)) is render blocking, causing browsers to sequentially download and parse the imported CSS (a [critical request chain](https://developer.chrome.com/en/docs/lighthouse/performance/critical-request-chains/)).\n\n```\n@import url('https://fonts.googleapis.com/css2?family=Inter');\n```\n\nThis can result in a [flash of unstyled content (FOUC)](https://en.wikipedia.org/wiki/Flash_of_unstyled_content), where page content is briefly shown without complete styles until all required CSS has been downloaded and parsed, along with slower page load times.\n\nImports to relative paths are processed by frameworks like Next.js, and will not be affected by this issue.\n\n```\n/* This import is safe. */\n@import './globals.css';\n```\n\nNote that this rule currently only parses CSS and not CSS written in Less, Sass, or other CSS preprocessor syntaxes.\n\nIf you're importing a font, you can use [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) which will automatically optimize your fonts (including custom fonts) and remove external network requests.\n\nIf you're importing CSS, such as Bootstrap, avoid loading it from external sources, such as a CDN or the [Next.js public folder](https://nextjs.org/docs/basic-features/static-file-serving). Instead, you can import that CSS relatively, or from a package.\n\n```\n// CSS imported relatively from a local file.\nimport './globals.css';\n// CSS from a package in `node_modules`.\nimport 'bootstrap/dist/css/bootstrap.css';\n \ninterface RootLayoutProps {\n  children: React.ReactNode;\n}\n \nexport default function RootLayout({ children }: RootLayoutProps) {\n  return (\n    <html lang=\"en\">\n      <head />\n      <body>{children}</body>\n    </html>\n  );\n}\n```",
  "title": "NO_EXTERNAL_CSS_AT_IMPORTS",
  "description": "Disallows @import at-rules that import from URLs.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/beginner-sveltekit/svelte-stores",
  "markdown": "# Svelte Stores\n\n[**Svelte Stores**View the code for this module.](https://github.com/vercel/beginner-sveltekit/tree/main/course/11-stores)\n\n**Course Version History**  \n\n*   **Nov. 21, 2022** - Updated to SvelteKit v1.0.0-next.549. Changed `index.svelte` to `+page.svelte`.\n    \n\nAt this point in the course, we are familiar with how data can be passed between components, even deeply nested components with the Context API, but not all application state belongs inside the application's component hierarchy. The app is bound to have values that need to be accessed by multiple unrelated components, or a regular JavaScript module.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fbeginner-sveltekit%2Fnested-components.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nIn this diagram of nested components, we may have some state gathered in component E that component D also needs to have access to. In this case, since the two components are not related, the only way to do this would be to pass data up and down through the tree. This method, however, will quickly become messy and hard to manage as the component tree grows. Wouldn’t it be nice to store the data in a single centralized location? Svelte comes with built in state management, so we can do this by creating a Svelte store without having to install an additional package. A store is a global object with a subscribe method that allows components to be notified whenever the store value changes. We can create a central store of data where we can register data, and then any component that needs access to this data can subscribe to this store. We can even update this data directly from the subscribed components, and any other subscribed component will automatically get the updated data. This makes it much easier to manage our data, especially as the application grows.\n\nCurrently in our project, within our layout file we are importing our shopping cart component which accepts a bound property, `cartItems`. Since it is bound, any time we change the quantity of an item in our cart, the parent is also updated. We can also add a new item to our cart. Clicking the 'add to cart' button in our shopping cart dispatches an event to the layout which adds the `newItem` to our `catItems` array. In this case we have a single source of truth, `cartItems`, which lives in our layout component.\n\nNow, I’ve added a new button to our `GridTile` component, so now we can add items to our cart from this component as well. The issue here is, this component is not being imported in our layout, it being used in our root page. How can we update our cart when we click these new 'add to cart' buttons while maintaining a single source of truth? This is where stores come in handy.\n\nIn our project, let’s create a store. First, create a new file called `Store.js` in out `src` root. Notice this is a `.js` file, not `.svelte`. We are not creating a Svelte component here, we are just creating a store to store our data. Now in this file, the first thing we need to do is import `writable` from `svelte/store` like this.\n\n```\nimport { writable } from svelte/store\n```\n\nWritable means we can both write and read from this store, and is probably the most common type of store. `writable` has three methods, `subscribe`, `set`, and `update`. `subscribe` will subscribe a component to the store so that the component can read and write to it. `set` takes one argument which is the value to be set, and `update` takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.\n\nNow that we have `writable` imported, we need to actually create the store. We can do this by invoking `writable` like this.\n\n```\nimport { writable } from svelte/store\n \nconst cart = writable();\n```\n\nNow we have a writable store of data. We can pass in some initial data into this store if we’d like. Let’s go ahead and paste in our `carItems` array.\n\n```\nimport { writable } from 'svelte/store';\n \nconst CartItemsStore = writable([\n  {\n    name: 'Sticker',\n    src: 'https://cdn.shopify.com/s/files/1/0434/0285/4564/products/Sticker-mock.png?v=1623256356',\n    price: '$8.00',\n    quantity: 1,\n  },\n]);\n \nexport default CartItemsStore;\n```\n\nNow this writable store is storing this array of data. Next, we need to export this cart items store. Now we can subscribe to this from any component. Let’s first move into our `ShoppingCart` component, and we can import this store like this.\n\n```\nimport CartItemsStore from '../Store.js';\n```\n\nNow that we are importing the store, we can use the `subscribe` method to subscribe to the data within it. Below where we import the store we can just say `CartItemsStore.subscribe()` which will fire a callback function. This callback takes the data we get from the store as a parameter. This parameter, `data`, will be whatever data is currently in the store. We can test this out by logging it in the console for now. Now, if we check this out in the browser, we’ll see that we have successfully subscribed to this store and the data is being logged in the console. Whenever this data changes from anywhere in the app, this callback function will be re-fired, and the new updated data will be passed to it.\n\nNow, instead of accepting `cartItems` as a prop, let’s instead set `cartItems` equal to the array returned from our store.\n\n```\nimport CartItemsStore from '../Store.js';\n \nlet cartItems;\nCartItemsStore.subscribe((data) => {\n  cartItems = data;\n});\n```\n\nNow, we need to update the store when the cart changes. Currently we are using the `subscribe` method to read from the store, but in this case we want to write to it. We can do this using the `update` method.\n\nRight now when we click our ‘add to cart’ button, we are dispatching an event with our `newItem` data to our parent component where the `newItem` was then being added to the cart. Instead, let’s use the update method to update our store with the new item directly from the shopping cart component. We can say `CartItemsStore.update()` and this will once again fire a callback function that takes in the current data in our store as a param, and from this callback we need to return the value of the updated data. For example, if we were to return an empty array, the whole value of our Store will become an empty array, and we would see our cart is empty.\n\n```\nCartItemsStore.update((currentData) => {\n  return [];\n});\n```\n\nThat’s not what we want to do here. Instead, we want to return an array with all the current items, as well as the new one. Let’s return an array with our new item as well as all the current items in our store like this.\n\n```\n<script>\n  function addItemToCart() {\n    CartItemsStore.update((currentData) => {\n      return [newItem, ...currentData];\n    });\n  }\n</script>\n```\n\nNow when we click the 'add to cart' button, our store will be updated with the new item. It’s important to remember that anytime our store is updated, the callback will be fired and this data will be updated wherever the store is being subscribed to. When we updated our store, our subscribe method that we added earlier is called again, so our cart will update automatically.\n\nThe header, however, is not updated with the new car item. This is because we are not using a single source of truth right now. The header component is still getting `cartItems` from our layout component, which the cart is no longer bound to. Back in our layout file, let’s once again import and subscribe to our store and set `cartItems` to our stores data like this.\n\n```\nimport CartItemsStore from '../Store.js';\n \nlet cartItems;\nCartItemsStore.subscribe((data) => {\n  cartItems = data;\n});\n```\n\nNow, when we add the new item to our cart, the header will also be updated. Remember, anytime the store changes, every component that is subscribed to it will automatically be updated.\n\nFinally, we can head into our `GridTile` component and update our store when we click the 'add to cart' button here as well. Now, a new item can be added to our cart from this component, and both the header and shopping cart components will be updated even though they are unrelated to our GridTile component.\n\nThere is, however, a subtle bug in our current code. The store is subscribed to, but never unsubscribed. If the component was instantiated and destroyed many times, this would result in a memory leak, so we need to unsubscribe from the store. Calling a `subscribe` method returns an `unsubscribe` function, so let’s go ahead and declare `unsubscribe` in our layout page, and set it to your subscribe method. Now, we can call this on through the `onDestroy` lifecycle hook.\n\n```\nimport CartItemsStore from '../Store.js';\n \nlet cartItems;\nconst unsubscribe = CartItemsStore.subscribe((data) => {\n  cartItems = data;\n});\nimport BlogStore from '../../Store.js';\n \nonDestroy(unsubscribe);\n```\n\nThis works, but it starts to resemble a boilerplate, especially if your component subscribes to multiple stores. Instead, Svelte has a nifty trick we can use. We can reference a store value by prefixing the store name with a dollar sign. Instead we can say:\n\n```\ncartItems = $CartItemsStore;\n```\n\nMuch simpler! We call this auto-subscribing to the store, and it works because any name beginning with `$` is assumed to refer to a store value. This simplifies our code a lot, and also fixes our bug! Anywhere we subscript to the store, we can update it with this shorthand!\n\nNow that we know how to manage our applications state with stores, let’s learn how to dynamically change component templates through the use of slots in the next module.\n\n[](https://vercel.com/docs/beginner-sveltekit/slots)\n\n#### [Slots](https://vercel.com/docs/beginner-sveltekit/slots)\n\n[In this module, we will learn how to dynamically change a component's markup using the slot tag.](https://vercel.com/docs/beginner-sveltekit/slots)",
  "title": "Svelte Stores",
  "description": "In this module, we will learn how to share state between unrelated components through the use of Svelte stores.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_DOCUMENT_WRITE",
  "markdown": "# NO\\_DOCUMENT\\_WRITE\n\nPrevent unsafe usage of document.write() in your application.\n\nConformance Rules\n\nCalls to `document.write()` or `document.writeln()` manipulate DOM directly without any sanitization and should be avoided.\n\nFurthermore, these APIs can also cause performance issues and trigger will clear the page contents if used after page load.\n\nAvoid usage of `document.write()` entirely in your application, and instead either use UI framework like React to handle writing to the document, or use safer DOM APIs, such as `document.createElement()` instead.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
  "title": "NO_DOCUMENT_WRITE",
  "description": "Prevent unsafe usage of document.write() in your application.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NO_EVAL",
  "markdown": "# NO\\_EVAL\n\nConformance Rules\n\nJavaScript's `eval()` function is potentially dangerous, is often misused, and might cause security issues. Using `eval()` on untrusted code can open an application up to several different injection attacks.\n\nThis rule will also catch eval-like function usage (or _implied eval_), such as passing a string as the first argument to `setTimeout`.\n\nThis is especially dangerous when working with data from external sources.\n\n```\nconst dontDoThis = req.body;\nsetTimeout(dontDoThis, 1000);\n```\n\nFor more information on why you should never use evaluation, see the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!).\n\nThe lines below (and variations of those) will all be caught by this rule.\n\n```\neval('() => console.log(\"DROP TABLE\")');\n \nsetTimeout('() => console.log(\"DROP TABLE\")', 1000);\n \nwindow.setInterval('() => console.log(\"DROP TABLE\")', 1000);\n \nnew Function('() => console.log(\"DROP TABLE\")');\n```\n\nConformance rules are not type-aware, but will follow variable references within the current module (or file).\n\n```\nimport { importedVar } from 'foo';\n \n// No error reported, as this rule doesn't have access to the value.\nsetTimeout(importedVar, 100);\n \nconst localVar = 'bar';\n \n// An error will be reported, as the variable was declared in this file.\nsetTimeout(localVar, 100);\n```\n\nAvoid usage of this type of evaluation entirely in your application. Instead, you should write the same functionality as raw code (not within a string).\n\n```\nsetTimeout(() => {\n  console.log('Safe usage');\n});\n```",
  "title": "NO_EVAL",
  "description": "Prevent unsafe usage of eval() in your application.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_PAGE",
  "markdown": "# NEXTJS\\_NO\\_ASYNC\\_PAGE\n\nConformance Rules\n\nThis rule is in preview, please give us your feedback!\n\n  \n\nThis rule is available from version 1.1.0.\n\nThis rule examines all Next.js app router page files and their transitive dependencies to ensure none are asynchronous or return new Promise instances. Even if the page component itself is not asynchronous, importing an asynchronous component somewhere in the page's dependency tree can silently cause the page to render dynamically. This can cause a blank page to be displayed to the user while Next.js waits for long promises to resolve.\n\nThis rule will not error if it detects a sibling [loading.js](https://nextjs.org/docs/app/api-reference/file-conventions/loading) file beside the page.\n\nBy default, this rule is disabled. To enable it, refer to [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nFor further reading, you may find these resources helpful:\n\n*   [Loading UI and Streaming in Next.js](https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming): This guide discusses strategies for loading UI components and streaming content in Next.js applications.\n*   [Next.js Loading File Conventions](https://nextjs.org/docs/app/api-reference/file-conventions/loading): This document provides an overview of file conventions related to loading in Next.js.\n*   [Next.js Route Segment Config](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic): This document provides an overview of the `dynamic` export and how it can be used to force the dynamic behaviour of a layout.\n\nThis rule will catch the following code.\n\n```\nexport default async function Page() {\n  const data = await fetch();\n  return <div>{data}</div>;\n}\n```\n\n```\nasync function AuthButton() {\n  const isAuthorized = await auth();\n  return <div>{isAuthorized ? 'Authorized' : 'Unauthorized'}</div>;\n}\n \nexport default function Page() {\n  return <AuthButton />;\n}\n```\n\nYou can fix this error by wrapping your async component with a `<Suspense/>` boundary that has a fallback UI to indicate to Next.js that it should use the fallback until the promise resolves.\n\nAlternatively, you can manually force the dynamic behaviour of the page by exporting a `dynamic` value. This rule will only error if `dynamic` is not specified or is set to `auto`. Read more [here](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic).\n\n```\nexport const dynamic = 'force-static';\n \nexport default async function Page() {\n  const data = await fetch();\n  return <div>{data}</div>;\n}\n```",
  "title": "NEXTJS_NO_ASYNC_PAGE",
  "description": "Ensures that the exported Next.js page component and its transitive dependencies are not asynchronous, as that blocks the rendering of the page.",
  "languageCode": "en"
},
{
  "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_NO_ASYNC_PAGE",
  "markdown": "# NEXTJS\\_NO\\_ASYNC\\_PAGE\n\nConformance Rules\n\nThis rule is in preview, please give us your feedback!\n\n  \n\nThis rule is available from version 1.1.0.\n\nThis rule examines all Next.js app router page files and their transitive dependencies to ensure none are asynchronous or return new Promise instances. Even if the page component itself is not asynchronous, importing an asynchronous component somewhere in the page's dependency tree can silently cause the page to render dynamically. This can cause a blank page to be displayed to the user while Next.js waits for long promises to resolve.\n\nThis rule will not error if it detects a sibling [loading.js](https://nextjs.org/docs/app/api-reference/file-conventions/loading) file beside the page.\n\nBy default, this rule is disabled. To enable it, refer to [customizing Conformance](https://vercel.com/docs/workflow-collaboration/conformance/customize).\n\nFor further reading, you may find these resources helpful:\n\n*   [Loading UI and Streaming in Next.js](https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming): This guide discusses strategies for loading UI components and streaming content in Next.js applications.\n*   [Next.js Loading File Conventions](https://nextjs.org/docs/app/api-reference/file-conventions/loading): This document provides an overview of file conventions related to loading in Next.js.\n*   [Next.js Route Segment Config](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic): This document provides an overview of the `dynamic` export and how it can be used to force the dynamic behaviour of a layout.\n\nThis rule will catch the following code.\n\n```\nexport default async function Page() {\n  const data = await fetch();\n  return <div>{data}</div>;\n}\n```\n\n```\nasync function AuthButton() {\n  const isAuthorized = await auth();\n  return <div>{isAuthorized ? 'Authorized' : 'Unauthorized'}</div>;\n}\n \nexport default function Page() {\n  return <AuthButton />;\n}\n```\n\nYou can fix this error by wrapping your async component with a `<Suspense/>` boundary that has a fallback UI to indicate to Next.js that it should use the fallback until the promise resolves.\n\nAlternatively, you can manually force the dynamic behaviour of the page by exporting a `dynamic` value. This rule will only error if `dynamic` is not specified or is set to `auto`. Read more [here](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic).\n\n```\nexport const dynamic = 'force-static';\n \nexport default async function Page() {\n  const data = await fetch();\n  return <div>{data}</div>;\n}\n```",
  "title": "NEXTJS_NO_ASYNC_PAGE",
  "description": "Ensures that the exported Next.js page component and its transitive dependencies are not asynchronous, as that blocks the rendering of the page.",
  "languageCode": "en"
}]