[
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/f16round",
    "markdown": "# Math.f16round() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.f16round()`** static method returns the nearest [16-bit half precision](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) float representation of a number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nMath.f16round(doubleFloat)\n```\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe nearest [16-bit half precision](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) float representation of `doubleFloat`.\n\n## [Description](#description)\n\n`Math.f16round` is the 16-bit counterpart of [`Math.fround()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround). It is intended to smooth some rough edges when interacting with float16 numbers, such as when reading from a [`Float16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array). Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a \"round to even\" on the 10th bit of the mantissa, and sets all following mantissa bits to `0`. If the number is outside the range of a 16-bit float, [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) or `-Infinity` is returned.\n\nBecause `f16round()` is a static method of `Math`, you always use it as `Math.f16round()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.f16round()](#using_math.f16round)\n\nThe number 1.5 can be precisely represented in the binary numeral system, and is identical in 16-bit and 64-bit:\n\n```\nMath.f16round(1.5); // 1.5\nMath.f16round(1.5) === 1.5; // true\n```\n\nHowever, the number 1.337 cannot be precisely represented in the binary numeral system, so it differs in 16-bit and 64-bit:\n\n```\nMath.f16round(1.337); // 1.3369140625\nMath.f16round(1.337) === 1.337; // false\n```\n\n100000 is too big for a 16-bit float, so `Infinity` is returned:\n\n```\nMath.f16round(100000); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Float16Array  <br>\\# sec-math.f16round](https://tc39.es/proposal-float16array/#sec-math.f16round) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.f16round() - JavaScript | MDN",
    "description": "The Math.f16round() static method returns the nearest 16-bit half precision float representation of a number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array",
    "markdown": "# Int32Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Int32Array()`** constructor creates [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Int32Array()\nnew Int32Array(length)\nnew Int32Array(typedArray)\nnew Int32Array(object)\n\nnew Int32Array(buffer)\nnew Int32Array(buffer, byteOffset)\nnew Int32Array(buffer, byteOffset, length)\n```\n\n**Note:** `Int32Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create an Int32Array](#different_ways_to_create_an_int32array)\n\n```\n// From a length\nconst int32 = new Int32Array(2);\nint32[0] = 42;\nconsole.log(int32[0]); // 42\nconsole.log(int32.length); // 2\nconsole.log(int32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Int32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Int32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int32FromIterable = new Int32Array(iterable);\nconsole.log(int32FromIterable);\n// Int32Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Int32Array() constructor - JavaScript | MDN",
    "description": "The Int32Array() constructor creates Int32Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array",
    "markdown": "# Uint32Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint32Array()`** constructor creates [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Uint32Array()\nnew Uint32Array(length)\nnew Uint32Array(typedArray)\nnew Uint32Array(object)\n\nnew Uint32Array(buffer)\nnew Uint32Array(buffer, byteOffset)\nnew Uint32Array(buffer, byteOffset, length)\n```\n\n**Note:** `Uint32Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint32Array](#different_ways_to_create_a_uint32array)\n\n```\n// From a length\nconst uint32 = new Uint32Array(2);\nuint32[0] = 42;\nconsole.log(uint32[0]); // 42\nconsole.log(uint32.length); // 2\nconsole.log(uint32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Uint32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Uint32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint32FromIterable = new Uint32Array(iterable);\nconsole.log(uint32FromIterable);\n// Uint32Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Uint32Array() constructor - JavaScript | MDN",
    "description": "The Uint32Array() constructor creates Uint32Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray",
    "markdown": "# Uint8ClampedArray() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint8ClampedArray()`** constructor creates [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Uint8ClampedArray()\nnew Uint8ClampedArray(length)\nnew Uint8ClampedArray(typedArray)\nnew Uint8ClampedArray(object)\n\nnew Uint8ClampedArray(buffer)\nnew Uint8ClampedArray(buffer, byteOffset)\nnew Uint8ClampedArray(buffer, byteOffset, length)\n```\n\n**Note:** `Uint8ClampedArray()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint8ClampedArray](#different_ways_to_create_a_uint8clampedarray)\n\n```\n// From a length\nconst uint8c = new Uint8ClampedArray(2);\nuint8c[0] = 42;\nuint8c[1] = 1337;\nconsole.log(uint8c[0]); // 42\nconsole.log(uint8c[1]); // 255 (clamped)\nconsole.log(uint8c.length); // 2\nconsole.log(uint8c.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8ClampedArray([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8ClampedArray(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8ClampedArray(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8cFromIterable = new Uint8ClampedArray(iterable);\nconsole.log(uint8cFromIterable);\n// Uint8ClampedArray [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Uint8ClampedArray() constructor - JavaScript | MDN",
    "description": "The Uint8ClampedArray() constructor creates Uint8ClampedArray objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array",
    "markdown": "# Uint8Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint8Array()`** constructor creates [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Uint8Array()\nnew Uint8Array(length)\nnew Uint8Array(typedArray)\nnew Uint8Array(object)\n\nnew Uint8Array(buffer)\nnew Uint8Array(buffer, byteOffset)\nnew Uint8Array(buffer, byteOffset, length)\n```\n\n**Note:** `Uint8Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint8Array](#different_ways_to_create_a_uint8array)\n\n```\n// From a length\nconst uint8 = new Uint8Array(2);\nuint8[0] = 42;\nconsole.log(uint8[0]); // 42\nconsole.log(uint8.length); // 2\nconsole.log(uint8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8FromIterable = new Uint8Array(iterable);\nconsole.log(uint8FromIterable);\n// Uint8Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Uint8Array() constructor - JavaScript | MDN",
    "description": "The Uint8Array() constructor creates Uint8Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array",
    "markdown": "# Uint16Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint16Array()`** constructor creates [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Uint16Array()\nnew Uint16Array(length)\nnew Uint16Array(typedArray)\nnew Uint16Array(object)\n\nnew Uint16Array(buffer)\nnew Uint16Array(buffer, byteOffset)\nnew Uint16Array(buffer, byteOffset, length)\n```\n\n**Note:** `Uint16Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint16Array](#different_ways_to_create_a_uint16array)\n\n```\n// From a length\nconst uint16 = new Uint16Array(2);\nuint16[0] = 42;\nconsole.log(uint16[0]); // 42\nconsole.log(uint16.length); // 2\nconsole.log(uint16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Uint16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Uint16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint16FromIterable = new Uint16Array(iterable);\nconsole.log(uint16FromIterable);\n// Uint16Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Uint16Array() constructor - JavaScript | MDN",
    "description": "The Uint16Array() constructor creates Uint16Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales",
    "markdown": "# Intl.getCanonicalLocales() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.getCanonicalLocales()`** static method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.getCanonicalLocales(locales)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA list of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values for which to get the canonical locale names.\n\n### [Return value](#return_value)\n\nAn array containing the canonical locale names.\n\n## [Examples](#examples)\n\n### [Using getCanonicalLocales](#using_getcanonicallocales)\n\n```\nIntl.getCanonicalLocales(\"EN-US\"); // [\"en-US\"]\nIntl.getCanonicalLocales([\"EN-US\", \"Fr\"]); // [\"en-US\", \"fr\"]\n\nIntl.getCanonicalLocales(\"EN_US\");\n// RangeError:'EN_US' is not a structurally valid language tag\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.getcanonicallocales](https://tc39.es/ecma402/#sec-intl.getcanonicallocales) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.getCanonicalLocales() - JavaScript | MDN",
    "description": "The Intl.getCanonicalLocales() static method returns an array\n  containing the canonical locale names. Duplicates will be omitted and elements will be\n  validated as structurally valid language tags.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf",
    "markdown": "# Intl.supportedValuesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.supportedValuesOf()`** static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.\n\nDuplicates are omitted and the array is sorted in ascending lexicographical order (or more precisely, using [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) with an `undefined` compare function).\n\nThe method can be used to feature-test whether values are supported in a particular implementation and download a polyfill only if necessary. It can also be used to build UIs that allow users to select their preferred localized values, for example when the UI is created from WebGL or server-side.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.supportedValuesOf(key)\n```\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nA key string indicating the category of values to be returned. This is one of: `\"calendar\"`, `\"collation\"`, `\"currency\"`, `\"numberingSystem\"`, `\"timeZone\"`, `\"unit\"`.\n\n### [Return value](#return_value)\n\nA sorted array of unique string values indicating the values supported by the implementation for the given key.\n\n**Note:** While the IANA database changes from time to time, the Unicode CLDR database (which browsers use) keeps old time zone names for stability purposes. Some browsers may use the legacy name, while others override it with the new name. See [`Intl.Locale.prototype.getTimeZones`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones) for more information.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if an unsupported key was passed as a parameter.\n\n## [Examples](#examples)\n\n### [Feature testing](#feature_testing)\n\nYou can check that the method is supported by comparing to `undefined`:\n\n```\nif (typeof Intl.supportedValuesOf !== \"undefined\") {\n  // method is supported\n}\n```\n\n### [Get all values for key](#get_all_values_for_key)\n\nTo get the supported values for calendar you call the method with the key `\"calendar\"`. You can then iterate through the returned array as shown below:\n\n```\nIntl.supportedValuesOf(\"calendar\").forEach((calendar) => {\n  // \"buddhist\", \"chinese\", \"coptic\", \"dangi\", etc.\n});\n```\n\n**Note:** The array returned for calendar values will always include the value \"gregory\" (gregorian).\n\nThe other values are all obtained in the same way:\n\n```\nIntl.supportedValuesOf(\"collation\").forEach((collation) => {\n  // \"compat\", \"dict\", \"emoji\", etc.\n});\n\nIntl.supportedValuesOf(\"currency\").forEach((currency) => {\n  // \"ADP\", \"AED\", \"AFA\", \"AFN\", \"ALK\", \"ALL\", \"AMD\", etc.\n});\n\nIntl.supportedValuesOf(\"numberingSystem\").forEach((numberingSystem) => {\n  // \"adlm\", \"ahom\", \"arab\", \"arabext\", \"bali\", etc.\n});\n\nIntl.supportedValuesOf(\"timeZone\").forEach((timeZone) => {\n  // \"Africa/Abidjan\", \"Africa/Accra\", \"Africa/Addis_Ababa\", \"Africa/Algiers\", etc.\n});\n\nIntl.supportedValuesOf(\"unit\").forEach((unit) => {\n  // \"acre\", \"bit\", \"byte\", \"celsius\", \"centimeter\", etc.\n});\n```\n\n### [Invalid key throws RangeError](#invalid_key_throws_rangeerror)\n\n```\ntry {\n  Intl.supportedValuesOf(\"someInvalidKey\");\n} catch (err) {\n  //Error: RangeError: invalid key: \"someInvalidKey\"\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.supportedvaluesof](https://tc39.es/ecma402/#sec-intl.supportedvaluesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.supportedValuesOf() - JavaScript | MDN",
    "description": "The Intl.supportedValuesOf() static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array",
    "markdown": "# Int8Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Int8Array()`** constructor creates [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Int8Array()\nnew Int8Array(length)\nnew Int8Array(typedArray)\nnew Int8Array(object)\n\nnew Int8Array(buffer)\nnew Int8Array(buffer, byteOffset)\nnew Int8Array(buffer, byteOffset, length)\n```\n\n**Note:** `Int8Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create an Int8Array](#different_ways_to_create_an_int8array)\n\n```\n// From a length\nconst int8 = new Int8Array(2);\nint8[0] = 42;\nconsole.log(int8[0]); // 42\nconsole.log(int8.length); // 2\nconsole.log(int8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Int8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Int8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int8FromIterable = new Int8Array(iterable);\nconsole.log(int8FromIterable);\n// Int8Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Int8Array() constructor - JavaScript | MDN",
    "description": "The Int8Array() constructor creates Int8Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/URIError",
    "markdown": "# URIError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`URIError()`** constructor creates [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew URIError()\nnew URIError(message)\nnew URIError(message, options)\nnew URIError(message, fileName)\nnew URIError(message, fileName, lineNumber)\n\nURIError()\nURIError(message)\nURIError(message, options)\nURIError(message, fileName)\nURIError(message, fileName, lineNumber)\n```\n\n**Note:** `URIError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `URIError` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nHuman-readable description of the error.\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe name of the file containing the code that caused the exception.\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number of the code that caused the exception.\n\n## [Examples](#examples)\n\n### [Catching an URIError](#catching_an_urierror)\n\n```\ntry {\n  decodeURIComponent(\"%\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"malformed URI sequence\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating an URIError](#creating_an_urierror)\n\n```\ntry {\n  throw new URIError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-nativeerror-constructors](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-nativeerror-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "URIError() constructor - JavaScript | MDN",
    "description": "The URIError() constructor creates URIError objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString",
    "markdown": "# Number.prototype.toLocaleString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLocaleString()`** method of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values returns a string with a language-sensitive representation of this number. In implementations with [`Intl.NumberFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) support, this method simply calls `Intl.NumberFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object and use its [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format) method, because a `NumberFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### [Parameters](#parameters)\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.NumberFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat), these parameters correspond exactly to the [`Intl.NumberFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor's parameters. Implementations without `Intl.NumberFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales) parameter of the `Intl.NumberFormat()` constructor.\n\nIn implementations without `Intl.NumberFormat` support, this parameter is ignored and the host's locale is usually used.\n\n[`options`](#options) Optional\n\nAn object adjusting the output format. Corresponds to the [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) parameter of the `Intl.NumberFormat()` constructor.\n\nIn implementations without `Intl.NumberFormat` support, this parameter is ignored.\n\nSee the [`Intl.NumberFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) for details on these parameters and how to use them.\n\n### [Return value](#return_value)\n\nA string representing the given number according to language-specific conventions.\n\nIn implementations with `Intl.NumberFormat`, this is equivalent to `new Intl.NumberFormat(locales, options).format(number)`.\n\n**Note:** Most of the time, the formatting returned by `toLocaleString()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `toLocaleString()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using toLocaleString()](#using_tolocalestring)\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```\nconst number = 3500;\n\nconsole.log(number.toLocaleString()); // \"3,500\" if in U.S. English locale\n```\n\n### [Checking for support for locales and options parameters](#checking_for_support_for_locales_and_options_parameters)\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API, you can check the existence of the latter for support:\n\n```\nfunction toLocaleStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.NumberFormat === \"function\"\n  );\n}\n```\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconst number = 123456.789;\n\n// German uses comma as decimal separator and period for thousands\nconsole.log(number.toLocaleString(\"de-DE\"));\n// 123.456,789\n\n// Arabic in most Arabic speaking countries uses Eastern Arabic digits\nconsole.log(number.toLocaleString(\"ar-EG\"));\n// ١٢٣٤٥٦٫٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(number.toLocaleString(\"en-IN\"));\n// 1,23,456.789\n\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(number.toLocaleString(\"zh-Hans-CN-u-nu-hanidec\"));\n// 一二三,四五六.七八九\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(number.toLocaleString([\"ban\", \"id\"]));\n// 123.456,789\n```\n\n### [Using options](#using_options)\n\nThe results provided by `toLocaleString()` can be customized using the `options` parameter:\n\n```\nconst number = 123456.789;\n\n// request a currency format\nconsole.log(\n  number.toLocaleString(\"de-DE\", { style: \"currency\", currency: \"EUR\" }),\n);\n// 123.456,79 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(\n  number.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" }),\n);\n// ￥123,457\n\n// limit to three significant digits\nconsole.log(number.toLocaleString(\"en-IN\", { maximumSignificantDigits: 3 }));\n// 1,23,000\n\n// Use the host default language with options for number formatting\nconst num = 30000.65;\nconsole.log(\n  num.toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }),\n);\n// \"30,000.65\" where English is the default language, or\n// \"30.000,65\" where German is the default language, or\n// \"30 000,65\" where French is the default language\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.prototype.tolocalestring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.prototype.tolocalestring) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-number.prototype.tolocalestring](https://tc39.es/ecma402/#sup-number.prototype.tolocalestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.prototype.toLocaleString() - JavaScript | MDN",
    "description": "The toLocaleString() method of Number values returns a string with a language-sensitive representation of this number. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values",
    "markdown": "# Map.prototype.values() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`values()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances returns a new _[map iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the values for each element in this map in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using values()](#using_values)\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap.values();\n\nconsole.log(mapIter.next().value); // \"foo\"\nconsole.log(mapIter.next().value); // \"bar\"\nconsole.log(mapIter.next().value); // \"baz\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.values](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.values) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map.prototype.values() - JavaScript | MDN",
    "description": "The values() method of Map instances returns a new map iterator object that contains the values for each element in this map in insertion order.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator",
    "markdown": "# arguments\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@iterator]()`** method of [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) objects implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `arguments` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns an [array iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the `arguments` object.\n\nThe initial value of this property is the same function object as the initial value of the [`Array.prototype.values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) property (and also the same as [`Array.prototype[@@iterator]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)).\n\n## [Syntax](#syntax)\n\n```\narguments[Symbol.iterator]()\n```\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe same return value as [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values): a new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the `arguments` object.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `arguments` objects [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nfunction f() {\n  for (const letter of arguments) {\n    console.log(letter);\n  }\n}\nf(\"w\", \"y\", \"k\", \"o\", \"p\");\n```\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nfunction f() {\n  const argsIter = arguments[Symbol.iterator]();\n  console.log(argsIter.next().value); // w\n  console.log(argsIter.next().value); // y\n  console.log(argsIter.next().value); // k\n  console.log(argsIter.next().value); // o\n  console.log(argsIter.next().value); // p\n}\nf(\"w\", \"y\", \"k\", \"o\", \"p\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-createunmappedargumentsobject](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-createunmappedargumentsobject) |\n| [ECMAScript Language Specification  <br>\\# sec-createmappedargumentsobject](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-createmappedargumentsobject) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "arguments[@@iterator]() - JavaScript | MDN",
    "description": "The [@@iterator]() method of arguments objects implements the iterable protocol and allows arguments objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the arguments object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries",
    "markdown": "# Map.prototype.entries() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`entries()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances returns a new _[map iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the `[key, value]` pairs for each element in this map in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using entries()](#using_entries)\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap.entries();\n\nconsole.log(mapIter.next().value); // [\"0\", \"foo\"]\nconsole.log(mapIter.next().value); // [1, \"bar\"]\nconsole.log(mapIter.next().value); // [Object, \"baz\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.entries](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.entries) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map.prototype.entries() - JavaScript | MDN",
    "description": "The entries() method of Map instances returns a new map iterator object that contains the [key, value] pairs for each element in this map in insertion order.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator",
    "markdown": "# Map.prototype\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`[@@iterator]()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `Map` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns a [map iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the key-value pairs of the map in insertion order.\n\nThe initial value of this property is the same function object as the initial value of the [`Map.prototype.entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries) property.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe same return value as [`Map.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries): a new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the key-value pairs of the map.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `Map` objects [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nfor (const entry of myMap) {\n  console.log(entry);\n}\n// [\"0\", \"foo\"]\n// [1, \"bar\"]\n// [{}, \"baz\"]\n\nfor (const [key, value] of myMap) {\n  console.log(`${key}: ${value}`);\n}\n// 0: foo\n// 1: bar\n// [Object]: baz\n```\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap[Symbol.iterator]();\n\nconsole.log(mapIter.next().value); // [\"0\", \"foo\"]\nconsole.log(mapIter.next().value); // [1, \"bar\"]\nconsole.log(mapIter.next().value); // [Object, \"baz\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype-@@iterator](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype-@@iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map.prototype[@@iterator]() - JavaScript | MDN",
    "description": "The [@@iterator]() method of Map instances implements the iterable protocol and allows Map objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a map iterator object that yields the key-value pairs of the map in insertion order.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator",
    "markdown": "# Segments.prototype\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@iterator]()`** method of [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) instances implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `Segments` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns a [segments iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields data about each segment.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsegments[Symbol.iterator]()\n```\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields data about each segment. Each yielded object has the same properties as the object returned by the [`containing()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing) method.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `Segments` objects [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nconst segmenter = new Intl.Segmenter(\"zh-CN\", { granularity: \"word\" });\nconst input = \"你好，世界！我爱编程。\";\n\nfor (const value of segmenter.segment(input)) {\n  console.log(value);\n}\n\n/*\n{segment: '你好', index: 0, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '，', index: 2, input: '你好，世界！我爱编程。', isWordLike: false}\n{segment: '世界', index: 3, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '！', index: 5, input: '你好，世界！我爱编程。', isWordLike: false}\n{segment: '我', index: 6, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '爱', index: 7, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '编', index: 8, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '程', index: 9, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '。', index: 10, input: '你好，世界！我爱编程。', isWordLike: false}\n*/\n```\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\nconst input = \"Moi ? N'est-ce pas ?\";\nconst segments = segmenter.segment(input);\nconst iterator = segments[Symbol.iterator]();\n\nlet result = iterator.next();\n\nwhile (!result.done) {\n  console.log(result.value);\n  result = iterator.next();\n}\n\n/*\n{segment: 'Moi', index: 0, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 3, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: '?', index: 4, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: ' ', index: 5, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: \"N'est\", index: 6, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: '-', index: 11, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: 'ce', index: 12, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 14, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: 'pas', index: 15, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 18, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: '?', index: 19, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n*/\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-%segmentsprototype%-@@iterator](https://tc39.es/ecma402/#sec-%segmentsprototype%-@@iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Segments.prototype[@@iterator]() - JavaScript | MDN",
    "description": "The [@@iterator]() method of Segments instances implements the iterable protocol and allows Segments objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a segments iterator object that yields data about each segment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments",
    "markdown": "# Segments - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **`Segments`** object is an iterable collection of the segments of a text string. It is returned by a call to the [`segment()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment) method of an [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) object.\n\n## [Try it](#try_it)\n\n## [Instance methods](#instance_methods)\n\n[`Segments.prototype.containing()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing)\n\nReturns an object describing the segment in the original string that includes the code unit at a specified index.\n\n[`Segments.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator)\n\nReturns an iterator to iterate over the segments.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-segments-objects](https://tc39.es/ecma402/#sec-segments-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Segments - JavaScript | MDN",
    "description": "A Segments object is an iterable collection of the segments of a text string. It is returned by a call to the segment() method of an Intl.Segmenter object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete",
    "markdown": "# WeakMap.prototype.delete() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`delete()`** method of [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instances removes the specified element from this `WeakMap`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nweakMapInstance.delete(key)\n```\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to remove from the `WeakMap` object.\n\n### [Return value](#return_value)\n\n`true` if an element in the `WeakMap` object has been removed successfully. `false` if the key is not found in the `WeakMap`. Always returns `false` if `key` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the delete() method](#using_the_delete_method)\n\n```\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.delete(window); // Returns true. Successfully removed.\n\nwm.has(window); // Returns false. The window object is no longer in the WeakMap.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap.prototype.delete](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap.prototype.delete) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakMap.prototype.delete() - JavaScript | MDN",
    "description": "The delete() method of WeakMap instances removes the specified element from this WeakMap.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get",
    "markdown": "# WeakMap.prototype.get() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`get()`** method of [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instances returns a specified element from this `WeakMap`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to return from the `WeakMap` object.\n\n### [Return value](#return_value)\n\nThe element associated with the specified key in the `WeakMap` object. If the key can't be found, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned. Always returns `undefined` if `key` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the get() method](#using_the_get_method)\n\n```\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.get(window); // Returns \"foo\".\nwm.get(\"baz\"); // Returns undefined.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap.prototype.get](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap.prototype.get) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakMap.prototype.get() - JavaScript | MDN",
    "description": "The get() method of WeakMap instances returns a specified element from this WeakMap.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment",
    "markdown": "# Intl.Segmenter.prototype.segment() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`segment()`** method of [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) instances segments a string according to the locale and granularity of this `Intl.Segmenter` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`input`](#input)\n\nThe text to be segmented as a string.\n\n### [Return value](#return_value)\n\nA new iterable [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) object containing the segments of the input string, using the segmenter's locale and granularity.\n\n## [Examples](#examples)\n\n```\n// Create a locale-specific word segmenter\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\n\n// Use it to get an iterator over the segments of a string\nconst input = \"Moi ? N'est-ce pas ?\";\nconst segments = segmenter.segment(input);\n\n// Use that for segmentation\nfor (const { segment, index, isWordLike } of segments) {\n  console.log(\n    \"segment at code units [%d, %d]: «%s»%s\",\n    index,\n    index + segment.length,\n    segment,\n    isWordLike ? \" (word-like)\" : \"\",\n  );\n}\n// segment at code units [0, 3]: «Moi» (word-like)\n// segment at code units [3, 4]: « »\n// segment at code units [4, 5]: «?»\n// segment at code units [5, 6]: « »\n// segment at code units [6, 11]: «N'est» (word-like)\n// segment at code units [11, 12]: «-»\n// segment at code units [12, 14]: «ce» (word-like)\n// segment at code units [14, 15]: « »\n// segment at code units [15, 18]: «pas» (word-like)\n// segment at code units [18, 19]: « »\n// segment at code units [19, 20]: «?»\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.segmenter.prototype.segment](https://tc39.es/ecma402/#sec-intl.segmenter.prototype.segment) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser",
    "title": "Intl.Segmenter.prototype.segment() - JavaScript | MDN",
    "description": "The segment() method of Intl.Segmenter instances segments a string according to the locale and granularity of this Intl.Segmenter object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/WeakMap",
    "markdown": "# WeakMap() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`WeakMap()`** constructor creates [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) objects.\n\n## [Syntax](#syntax)\n\n```\nnew WeakMap()\nnew WeakMap(iterable)\n```\n\n**Note:** `WeakMap()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or other iterable object that implements an [@@iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator) method that returns an iterator object that produces a two-element array-like object whose first element is a value that will be used as a `WeakMap` key and whose second element is the value to associate with that key. Each key-value pair will be added to the new `WeakMap`. null is treated as undefined.\n\n## [Examples](#examples)\n\n### [Using WeakMap](#using_weakmap)\n\n```\nconst wm1 = new WeakMap();\nconst wm2 = new WeakMap();\nconst wm3 = new WeakMap();\nconst o1 = {};\nconst o2 = function () {};\nconst o3 = window;\n\nwm1.set(o1, 37);\nwm1.set(o2, \"azerty\");\nwm2.set(o1, o2); // a value can be anything, including an object or a function\nwm2.set(o3, undefined);\nwm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n\nwm1.get(o2); // \"azerty\"\nwm2.get(o2); // undefined, because there is no key for o2 on wm2\nwm2.get(o3); // undefined, because that is the set value\n\nwm1.has(o2); // true\nwm2.has(o2); // false\nwm2.has(o3); // true (even if the value itself is 'undefined')\n\nwm3.set(o1, 37);\nwm3.get(o1); // 37\n\nwm1.has(o1); // true\nwm1.delete(o1);\nwm1.has(o1); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap-constructor](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakMap() constructor - JavaScript | MDN",
    "description": "The WeakMap() constructor creates WeakMap objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has",
    "markdown": "# WeakMap.prototype.has() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`has()`** method of [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instances returns a boolean indicating whether an element with the specified key exists in this `WeakMap` or not.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to test for presence in the `WeakMap` object.\n\n### [Return value](#return_value)\n\nReturns `true` if an element with the specified key exists in the `WeakMap` object; otherwise `false`. Always returns `false` if `key` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the has method](#using_the_has_method)\n\n```\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.has(window); // returns true\nwm.has(\"baz\"); // returns false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap.prototype.has](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap.prototype.has) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakMap.prototype.has() - JavaScript | MDN",
    "description": "The has() method of WeakMap instances returns a boolean indicating whether an\n  element with the specified key exists in this WeakMap or not.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set",
    "markdown": "# WeakMap.prototype.set() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`set()`** method of [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instances adds a new element with a specified key and value to this `WeakMap`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nMust be either an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). The key of the entry to add to the `WeakMap` object.\n\n[`value`](#value)\n\nAny value representing the value of the entry to add to the `WeakMap` object.\n\n### [Return value](#return_value)\n\nThe `WeakMap` object.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `key` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the set() method](#using_the_set_method)\n\n```\nconst wm = new WeakMap();\nconst obj = {};\n\n// Add new elements to the WeakMap\nwm.set(obj, \"foo\").set(window, \"bar\"); // chainable\n\n// Update an element in the WeakMap\nwm.set(obj, \"baz\");\n\n// Using a non-registered symbol as key\nconst sym = Symbol(\"foo\");\nwm.set(sym, \"baz\");\nwm.set(Symbol.iterator, \"qux\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap.prototype.set](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap.prototype.set) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakMap.prototype.set() - JavaScript | MDN",
    "description": "The set() method of WeakMap instances adds a new element with a specified key\n  and value to this WeakMap.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON",
    "markdown": "# JSON.rawJSON() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`JSON.rawJSON()`** static method creates a \"raw JSON\" object containing a piece of JSON text. When serialized to JSON, the raw JSON object is treated as if it is already a piece of JSON. This text is required to be valid JSON.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`string`](#string)\n\nThe JSON text. Must be valid JSON **representing a primitive value**.\n\n### [Return value](#return_value)\n\nAn object that can be used to create JSON text with the exact same content as the `string` provided, without quotes around the string itself. This object [has `null` prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) and [is frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) (so it never gets accidentally serialized as a regular object by any kind of primitive conversion), and the following property:\n\n[`rawJSON`](#rawjson)\n\nThe original JSON `string` provided.\n\nFurthermore, it has a [private property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) that marks itself as a raw JSON object. This allows it to be identified by [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) and [`JSON.isRawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/isRawJSON).\n\n### [Exceptions](#exceptions)\n\n[`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n\nThrown if the `string` is not valid JSON, or if it represents an object or array.\n\n## [Description](#description)\n\nA raw JSON object can be seen as an immutable, atomic data structure like any kind of [primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values). It is not a regular object and it contains no data other than the raw JSON text. It is used to \"pre-serialize\" data to formats that `JSON.stringify` itself cannot produce for various reasons. The most typical use case is the floating point number loss of precision problem. For example:\n\n```\nJSON.stringify({ value: 12345678901234567890 });\n// {\"value\":12345678901234567000}\n```\n\nThe value is not exactly equivalent to the original number any more! This is because JavaScript uses floating point representation for all numbers, so it cannot represent all integers exactly. The number literal `12345678901234567890` itself is already rounded to the nearest representable number when it is parsed by JavaScript.\n\nWithout `JSON.rawJSON`, there is no way to tell `JSON.stringify` to produce the number literal `12345678901234567000`, because there is simply no corresponding JavaScript number value. With raw JSON, you can directly tell `JSON.stringify()` what a particular value should be stringified as:\n\n```\nconst rawJSON = JSON.rawJSON(\"12345678901234567890\");\nJSON.stringify({ value: rawJSON });\n// {\"value\":12345678901234567890}\n```\n\nFor a more complete example of this, see [Lossless number serialization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON#using_json_numbers).\n\nNote that although we passed a string to `JSON.rawJSON()`, it still becomes a number in the final JSON. This is because the string represents the verbatim JSON text. If you want to serialize a string, you should use `JSON.rawJSON()` with a quotes-enclosed string value:\n\n```\nconst rawJSON = JSON.rawJSON('\"Hello world\"');\nJSON.stringify({ value: rawJSON });\n// {\"value\":\"Hello world\"}\n```\n\n`JSON.rawJSON` allows you to insert arbitrary JSON text, but does not allow you to create invalid JSON. Anything that was not permitted by the JSON syntax is not permitted by `JSON.rawJSON()` either:\n\n```\nconst rawJSON = JSON.rawJSON('\"Hello\\nworld\"'); // Syntax error, because line breaks are not allowed in JSON strings\n```\n\nFurthermore, you cannot use `JSON.rawJSON()` to create JSON objects or arrays.\n\n## [Examples](#examples)\n\n### [Using JSON.rawJSON() to create JSON expressions of different types](#using_json.rawjson_to_create_json_expressions_of_different_types)\n\n```\nconst numJSON = JSON.rawJSON(\"123\");\nconst strJSON = JSON.rawJSON('\"Hello world\"');\nconst boolJSON = JSON.rawJSON(\"true\");\nconst nullJSON = JSON.rawJSON(\"null\");\n\nconsole.log(\n  JSON.stringify({\n    age: numJSON,\n    message: strJSON,\n    isActive: boolJSON,\n    nothing: nullJSON,\n  }),\n);\n\n// {\"age\":123,\"message\":\"Hello world\",\"isActive\":true,\"nothing\":null}\n```\n\nHowever, you cannot use `JSON.rawJSON()` to create JSON objects or arrays:\n\n```\nconst arrJSON = JSON.rawJSON(\"[1, 2, 3]\");\nconst objJSON = JSON.rawJSON('{\"a\": 1, \"b\": 2}');\n// SyntaxError\n```\n\n### [Using JSON.rawJSON() to create escaped string literals](#using_json.rawjson_to_create_escaped_string_literals)\n\nApart from numbers, there is only one other type that does not have a one-to-one correspondence between JavaScript values and JSON text: strings. When strings are serialized to JSON, all code points, other than those that are not legal inside JSON string literals (such as line breaks), are printed literally:\n\n```\nconsole.log(JSON.stringify({ value: \"\\ud83d\\ude04\" })); // {\"value\":\"😄\"}\n```\n\nThis may not be desirable, because the receiver of this string may handle Unicode differently. To improve interoperability, you can explicitly specify the string to be serialized with escape sequences:\n\n```\nconst rawJSON = JSON.rawJSON('\"\\\\ud83d\\\\ude04\"');\nconst objStr = JSON.stringify({ value: rawJSON });\nconsole.log(JSON.parse(objStr).value); // 😄\n```\n\nNote that the double backslashes in the `rawJSON` actually represents a single slash character, so the JSON text looks like:\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [JSON.parse source text access  <br>\\# sec-json.rawjson](https://tc39.es/proposal-json-parse-with-source/#sec-json.rawjson) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "JSON.rawJSON() - JavaScript | MDN",
    "description": "The JSON.rawJSON() static method creates a \"raw JSON\" object containing a piece of JSON text. When serialized to JSON, the raw JSON object is treated as if it is already a piece of JSON. This text is required to be valid JSON.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/isRawJSON",
    "markdown": "# JSON.isRawJSON() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`JSON.isRawJSON()`** static method tests whether a value is an object returned by [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON).\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\n`true` if `value` is created by [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON); otherwise, `false`.\n\n## [Description](#description)\n\n\"Raw JSON\" objects, when serialized to JSON, are treated as if they are already a piece of JSON. Furthermore, because of the way [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON) works, the raw JSON is guaranteed to be syntactically valid JSON. For more information on the shape and behavior of raw JSON objects, see [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON). This method exists to allow other serialization libraries to implement similar behavior to `JSON.stringify()` for raw JSON objects.\n\n## [Examples](#examples)\n\n### [Using JSON.isRawJSON()](#using_json.israwjson)\n\nThe following example demonstrates how to use `JSON.isRawJSON()` to test whether an object was returned by `JSON.rawJSON()`. It implements a custom serializer that serializes data to a YAML-like format.\n\n```\nfunction mySerializer(value, indent = \"\") {\n  if (typeof value !== \"object\" || value === null) {\n    return JSON.stringify(value);\n  }\n  if (JSON.isRawJSON(value)) {\n    return value.rawJSON;\n  }\n  const subIndent = `${indent}  `;\n  if (Array.isArray(value)) {\n    return `- ${value.map((v) => mySerializer(v, subIndent)).join(`\\n${indent}- `)}`;\n  }\n  return Object.entries(value)\n    .map(([key, value]) => {\n      const subValue = mySerializer(value, subIndent);\n      if (subValue.includes(\"\\n\")) {\n        return `${key}:\\n${subIndent}${subValue}`;\n      }\n      return `${key}: ${subValue}`;\n    })\n    .join(`\\n${indent}`);\n}\n\nconsole.log(\n  mySerializer({\n    name: \"Josh\",\n    userId: JSON.rawJSON(\"12345678901234567890\"),\n    friends: [\n      { name: \"Alice\", userId: JSON.rawJSON(\"9876543210987654321\") },\n      { name: \"Bob\", userId: JSON.rawJSON(\"56789012345678901234\") },\n    ],\n  }),\n);\n\n// name: \"Josh\"\n// userId: 12345678901234567890\n// friends:\n//   - name: \"Alice\"\n//     userId: 9876543210987654321\n//   - name: \"Bob\"\n//     userId: 56789012345678901234\n```\n\nIf in the above example, the `userId` values were not created by `JSON.rawJSON()`, but passed as numbers directly, then we will get loss of precision upfront because of JS floating point precision limitations.\n\n```\nconsole.log(\n  mySerializer({\n    name: \"Josh\",\n    userId: 12345678901234567890,\n    friends: [\n      { name: \"Alice\", userId: 9876543210987654321 },\n      { name: \"Bob\", userId: 56789012345678901234 },\n    ],\n  }),\n);\n\n// name: \"Josh\"\n// userId: 12345678901234567000\n// friends:\n//   - name: \"Alice\"\n//     userId: 9876543210987655000\n//   - name: \"Bob\"\n//     userId: 56789012345678900000\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [JSON.parse source text access  <br>\\# sec-json.israwjson](https://tc39.es/proposal-json-parse-with-source/#sec-json.israwjson) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "JSON.isRawJSON() - JavaScript | MDN",
    "description": "The JSON.isRawJSON() static method tests whether a value is an object returned by JSON.rawJSON().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10",
    "markdown": "# Math.LN10 - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.LN10`** static data property represents the natural logarithm of 10, approximately 2.302.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙻𝙽𝟷𝟶 \\= ln ( 10 ) ≈ 2.302 \\\\mathtt{Math.LN10} = \\\\ln(10) \\\\approx 2.302\n\n| Property attributes of `Math.LN10` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `LN10` is a static property of `Math`, you always use it as `Math.LN10`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.LN10](#using_math.ln10)\n\nThe following function returns the natural log of 10:\n\n```\nfunction getNatLog10() {\n  return Math.LN10;\n}\n\ngetNatLog10(); // 2.302585092994046\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.ln10](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.ln10) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.LN10 - JavaScript | MDN",
    "description": "The Math.LN10 static data property represents the natural logarithm of 10, approximately 2.302.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E",
    "markdown": "# Math.E - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.E`** static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙴 \\= e ≈ 2.718 \\\\mathtt{Math.E} = e \\\\approx 2.718\n\n| Property attributes of `Math.E` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `E` is a static property of `Math`, you always use it as `Math.E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.E](#using_math.e)\n\nThe following function returns e:\n\n```\nfunction getNapier() {\n  return Math.E;\n}\n\ngetNapier(); // 2.718281828459045\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.e](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.e) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.E - JavaScript | MDN",
    "description": "The Math.E static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/WeakRef",
    "markdown": "# WeakRef() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`WeakRef()`** constructor creates [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) objects.\n\n## [Syntax](#syntax)\n\n**Note:** `WeakRef()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target value the WeakRef should refer to (also called the _referent_). Must be an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n### [Return value](#return_value)\n\nA new `WeakRef` object referring to the given target value.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Creating a new WeakRef object](#creating_a_new_weakref_object)\n\nSee the main [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#examples) page for a complete example.\n\n```\nclass Counter {\n  constructor(element) {\n    // Remember a weak reference to a DOM element\n    this.ref = new WeakRef(element);\n    this.start();\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weak-ref-constructor](https://tc39.es/ecma262/multipage/managing-memory.html#sec-weak-ref-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakRef() constructor - JavaScript | MDN",
    "description": "The WeakRef() constructor creates WeakRef objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2",
    "markdown": "# Math.LN2 - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.LN2`** static data property represents the natural logarithm of 2, approximately 0.693:\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙻𝙽𝟸 \\= ln ( 2 ) ≈ 0.693 \\\\mathtt{Math.LN2} = \\\\ln(2) \\\\approx 0.693\n\n| Property attributes of `Math.LN2` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `LN2` is a static property of `Math`, you always use it as `Math.LN2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.LN2](#using_math.ln2)\n\nThe following function returns the natural log of 2:\n\n```\nfunction getNatLog2() {\n  return Math.LN2;\n}\n\ngetNatLog2(); // 0.6931471805599453\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.ln2](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.ln2) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.LN2 - JavaScript | MDN",
    "description": "The Math.LN2 static data property represents the natural logarithm of 2, approximately 0.693:",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E",
    "markdown": "# Math.LOG10E - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.LOG10E`** static data property represents the base 10 logarithm of [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E), approximately 0.434.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙻𝙾𝙶𝟷𝟶𝙴 \\= log 10 ( e ) ≈ 0.434 \\\\mathtt{Math.LOG10E} = \\\\log\\_{10}(\\\\mathrm{e}) \\\\approx 0.434\n\n| Property attributes of `Math.LOG10E` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `LOG10E` is a static property of `Math`, you always use it as `Math.LOG10E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.LOG10E](#using_math.log10e)\n\nThe following function returns the base 10 logarithm of e:\n\n```\nfunction getLog10e() {\n  return Math.LOG10E;\n}\n\ngetLog10e(); // 0.4342944819032518\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.log10e](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.log10e) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.LOG10E - JavaScript | MDN",
    "description": "The Math.LOG10E static data property represents the base 10 logarithm of e, approximately 0.434.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E",
    "markdown": "# Math.LOG2E - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.LOG2E`** static data property represents the base 2 logarithm of [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E), approximately 1.442.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙻𝙾𝙶𝟸𝙴 \\= log 2 ( e ) ≈ 1.442 \\\\mathtt{Math.LOG2E} = \\\\log\\_2(\\\\mathrm{e}) \\\\approx 1.442\n\n| Property attributes of `Math.LOG2E` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `LOG2E` is a static property of `Math`, you always use it as `Math.LOG2E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.LOG2E](#using_math.log2e)\n\nThe following function returns the base 2 logarithm of e:\n\n```\nfunction getLog2e() {\n  return Math.LOG2E;\n}\n\ngetLog2e(); // 1.4426950408889634\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.log2e](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.log2e) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.LOG2E - JavaScript | MDN",
    "description": "The Math.LOG2E static data property represents the base 2 logarithm of e, approximately 1.442.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI",
    "markdown": "# Math.PI - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.PI`** static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙿𝙸 \\= π ≈ 3.14159 \\\\mathtt{Math.PI} = \\\\pi \\\\approx 3.14159\n\n| Property attributes of `Math.PI` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `PI` is a static property of `Math`, you always use it as `Math.PI`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.PI](#using_math.pi)\n\nThe following function uses `Math.PI` to calculate the circumference of a circle with a passed radius.\n\n```\nfunction calculateCircumference(radius) {\n  return Math.PI * (radius + radius);\n}\n\ncalculateCircumference(1); // 6.283185307179586\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.pi](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.pi) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.PI - JavaScript | MDN",
    "description": "The Math.PI static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2",
    "markdown": "# Math.SQRT1\\_2 - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.SQRT1_2`** static data property represents the square root of 1/2, which is approximately 0.707.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝚂𝚀𝚁𝚃𝟷\\_𝟸 \\= 1 2 ≈ 0.707 \\\\mathtt{Math.SQRT1\\_2} = \\\\sqrt{\\\\frac{1}{2}} \\\\approx 0.707\n\n| Property attributes of `Math.SQRT1_2` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`Math.SQRT1_2` is a constant and a more performant equivalent to [`Math.sqrt(0.5)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt).\n\nBecause `SQRT1_2` is a static property of `Math`, you always use it as `Math.SQRT1_2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.SQRT1\\_2](#using_math.sqrt1_2)\n\nThe following function returns 1 over the square root of 2:\n\n```\nfunction getRoot1_2() {\n  return Math.SQRT1_2;\n}\n\ngetRoot1_2(); // 0.7071067811865476\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.sqrt1\\_2](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sqrt1_2) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.SQRT1_2 - JavaScript | MDN",
    "description": "The Math.SQRT1_2 static data property represents the square root of 1/2, which is approximately 0.707.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2",
    "markdown": "# Math.SQRT2 - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.SQRT2`** static data property represents the square root of 2, approximately 1.414.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝚂𝚀𝚁𝚃𝟸 \\= 2 ≈ 1.414 \\\\mathtt{Math.SQRT2} = \\\\sqrt{2} \\\\approx 1.414\n\n| Property attributes of `Math.SQRT2` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`Math.SQRT2` is a constant and a more performant equivalent to [`Math.sqrt(2)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt).\n\nBecause `SQRT2` is a static property of `Math`, you always use it as `Math.SQRT2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.SQRT2](#using_math.sqrt2)\n\nThe following function returns the square root of 2:\n\n```\nfunction getRoot2() {\n  return Math.SQRT2;\n}\n\ngetRoot2(); // 1.4142135623730951\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.sqrt2](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sqrt2) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.SQRT2 - JavaScript | MDN",
    "description": "The Math.SQRT2 static data property represents the square root of 2, approximately 1.414.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add",
    "markdown": "# WeakSet.prototype.add() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`add()`** method of [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instances appends a new object to the end of this `WeakSet`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nMust be either an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). The value to add to the `WeakSet` collection.\n\n### [Return value](#return_value)\n\nThe `WeakSet` object.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `value` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using add](#using_add)\n\n```\nconst ws = new WeakSet();\n\nws.add(window); // add the window object to the WeakSet\n\nws.has(window); // true\n\n// WeakSet only takes objects as arguments\nws.add(1);\n// results in \"TypeError: Invalid value used in weak set\" in Chrome\n// and \"TypeError: 1 is not a non-null object\" in Firefox\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset.prototype.add](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset.prototype.add) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakSet.prototype.add() - JavaScript | MDN",
    "description": "The add() method of WeakSet instances appends a new object to the end of this WeakSet.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete",
    "markdown": "# WeakSet.prototype.delete() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`delete()`** method of [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instances removes the specified element from this `WeakSet`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nweakSetInstance.delete(value)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to remove from the `WeakSet` object.\n\n### [Return value](#return_value)\n\n`true` if an element in the `WeakSet` object has been removed successfully. `false` if the `value` is not found in the `WeakSet`. Always returns `false` if `value` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the delete() method](#using_the_delete_method)\n\n```\nconst ws = new WeakSet();\nconst obj = {};\n\nws.add(window);\n\nws.delete(obj); // Returns false. No obj found to be deleted.\nws.delete(window); // Returns true. Successfully removed.\n\nws.has(window); // Returns false. The window is no longer present in the WeakSet.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset.prototype.delete](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset.prototype.delete) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakSet.prototype.delete() - JavaScript | MDN",
    "description": "The delete() method of WeakSet instances removes the specified element from this WeakSet.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/WeakSet",
    "markdown": "# WeakSet() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`WeakSet()`** constructor creates [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) objects.\n\n## [Syntax](#syntax)\n\n```\nnew WeakSet()\nnew WeakSet(iterable)\n```\n\n**Note:** `WeakSet()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable) Optional\n\nIf an [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) is passed, all of its elements will be added to the new `WeakSet`. `null` is treated as `undefined`.\n\n## [Examples](#examples)\n\n### [Using the WeakSet object](#using_the_weakset_object)\n\n```\nconst ws = new WeakSet();\nconst foo = {};\nconst bar = {};\n\nws.add(foo);\nws.add(bar);\n\nws.has(foo); // true\nws.has(bar); // true\n\nws.delete(foo); // removes foo from the set\nws.has(foo); // false, foo has been removed\nws.has(bar); // true, bar is retained\n```\n\nNote that `foo !== bar`. While they are similar objects, _they are not **the same object**_. And so they are both added to the set.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset-constructor](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakSet() constructor - JavaScript | MDN",
    "description": "The WeakSet() constructor creates WeakSet objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map",
    "markdown": "# Map() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Map()`** constructor creates [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Map()\nnew Map(iterable)\n```\n\n**Note:** `Map()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable) Optional\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or other [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) object whose elements are key-value pairs. (For example, arrays with two elements, such as `[[ 1, 'one' ],[ 2, 'two' ]]`.) Each key-value pair is added to the new `Map`.\n\n## [Examples](#examples)\n\n### [Creating a new Map](#creating_a_new_map)\n\n```\nconst myMap = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map-constructor](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map() constructor - JavaScript | MDN",
    "description": "The Map() constructor creates Map objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has",
    "markdown": "# WeakSet.prototype.has() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`has()`** method of [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instances returns a boolean indicating whether an object exists in this `WeakSet` or not.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to test for presence in the `WeakSet`.\n\n### [Return value](#return_value)\n\nReturns `true` if an element with the specified value exists in the `WeakSet` object; otherwise `false`. Always returns `false` if `value` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the `has()` method](#using_the_has_method)\n\n```\nconst ws = new WeakSet();\nconst obj = {};\nws.add(window);\n\nws.has(window); // returns true\nws.has(obj); // returns false\n\n// Storing a non-registered symbol\nconst sym = Symbol(\"foo\");\nws.add(sym);\nws.add(Symbol.iterator);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset.prototype.has](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset.prototype.has) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakSet.prototype.has() - JavaScript | MDN",
    "description": "The has() method of WeakSet instances returns a boolean indicating whether an\n  object exists in this WeakSet or not.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species",
    "markdown": "# Map\\[@@species\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Map[@@species]`** static accessor property is an unused accessor property specifying how to copy `Map` objects.\n\n## [Syntax](#syntax)\n\n### [Return value](#return_value)\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct copied `Map` instances.\n\n## [Description](#description)\n\nThe `@@species` accessor property returns the default constructor for `Map` objects. Subclass constructors may override it to change the constructor assignment.\n\n**Note:** This property is currently unused by all `Map` methods.\n\n## [Examples](#examples)\n\n### [Species in ordinary objects](#species_in_ordinary_objects)\n\nThe `@@species` property returns the default constructor function, which is the `Map` constructor for `Map`.\n\n```\nMap[Symbol.species]; // function Map()\n```\n\n### [Species in derived objects](#species_in_derived_objects)\n\nIn an instance of a custom `Map` subclass, such as `MyMap`, the `MyMap` species is the `MyMap` constructor. However, you might want to overwrite this, in order to return parent `Map` objects in your derived class methods:\n\n```\nclass MyMap extends Map {\n  // Overwrite MyMap species to the parent Map constructor\n  static get [Symbol.species]() {\n    return Map;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-map-@@species](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-get-map-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map[@@species] - JavaScript | MDN",
    "description": "The Map[@@species] static accessor property is an unused accessor property specifying how to copy Map objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref",
    "markdown": "# WeakRef.prototype.deref() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`deref()`** method of [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) instances returns this `WeakRef`'s target value, or `undefined` if the target value has been garbage-collected.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe target value of the WeakRef, which is either an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). Returns `undefined` if the value has been garbage-collected.\n\n## [Description](#description)\n\nSee the [Notes on WeakRefs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#notes_on_weakrefs) section of the [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) page for some important notes.\n\n## [Examples](#examples)\n\n### [Using deref()](#using_deref)\n\nSee the [Examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#examples) section of the [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) page for the complete example.\n\n```\nconst tick = () => {\n  // Get the element from the weak reference, if it still exists\n  const element = this.ref.deref();\n  if (element) {\n    element.textContent = ++this.count;\n  } else {\n    // The element doesn't exist anymore\n    console.log(\"The element is gone.\");\n    this.stop();\n    this.ref = null;\n  }\n};\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weak-ref.prototype.deref](https://tc39.es/ecma262/multipage/managing-memory.html#sec-weak-ref.prototype.deref) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakRef.prototype.deref() - JavaScript | MDN",
    "description": "The deref() method of WeakRef instances returns this WeakRef's target value, or undefined if the target value has been garbage-collected.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear",
    "markdown": "# Map.prototype.clear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`clear()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances removes all elements from this map.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using clear()](#using_clear)\n\n```\nconst myMap = new Map();\nmyMap.set(\"bar\", \"baz\");\nmyMap.set(1, \"foo\");\n\nconsole.log(myMap.size); // 2\nconsole.log(myMap.has(\"bar\")); // true\n\nmyMap.clear();\n\nconsole.log(myMap.size); // 0\nconsole.log(myMap.has(\"bar\")); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.clear](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.clear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map.prototype.clear() - JavaScript | MDN",
    "description": "The clear() method of Map instances removes all elements from this map.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach",
    "markdown": "# Map.prototype.forEach() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`forEach()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances executes a provided function once per each key/value pair in this map, in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each entry in the map. The function is called with the following arguments:\n\n[`value`](#value)\n\nValue of each iteration.\n\n[`key`](#key)\n\nKey of each iteration.\n\n[`map`](#map)\n\nThe map being iterated.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nThe `forEach` method executes the provided `callback` once for each key of the map which actually exist. It is not invoked for keys which have been deleted. However, it is executed for values which are present but have the value `undefined`.\n\n`callback` is invoked with **three arguments**:\n\n*   the entry's `value`\n*   the entry's `key`\n*   the **`Map` object** being traversed\n\nIf a `thisArg` parameter is provided to `forEach`, it will be passed to `callback` when invoked, for use as its `this` value. Otherwise, the value `undefined` will be passed for use as its `this` value. The `this` value ultimately observable by `callback` is determined according to [the usual rules for determining the `this` seen by a function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this).\n\nEach value is visited once, except in the case when it was deleted and re-added before `forEach` has finished. `callback` is not invoked for values deleted before being visited. New values added before `forEach` has finished will be visited.\n\n## [Examples](#examples)\n\n### [Printing the contents of a Map object](#printing_the_contents_of_a_map_object)\n\nThe following code logs a line for each element in an `Map` object:\n\n```\nfunction logMapElements(value, key, map) {\n  console.log(`map.get('${key}') = ${value}`);\n}\nnew Map([\n  [\"foo\", 3],\n  [\"bar\", {}],\n  [\"baz\", undefined],\n]).forEach(logMapElements);\n// Logs:\n// \"map.get('foo') = 3\"\n// \"map.get('bar') = [object Object]\"\n// \"map.get('baz') = undefined\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.foreach](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.foreach) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map.prototype.forEach() - JavaScript | MDN",
    "description": "The forEach() method of Map instances executes a provided function once per each key/value\n  pair in this map, in insertion order.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set",
    "markdown": "# Map.prototype.set() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`set()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances adds or updates an entry in this map with a specified key and a value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to add to the `Map` object. The key may be any [JavaScript type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) (any [primitive value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values) or any type of [JavaScript object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects)).\n\n[`value`](#value)\n\nThe value of the element to add to the `Map` object. The value may be any [JavaScript type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) (any [primitive value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values) or any type of [JavaScript object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects)).\n\n### [Return value](#return_value)\n\nThe `Map` object.\n\n## [Examples](#examples)\n\n### [Using set()](#using_set)\n\n```\nconst myMap = new Map();\n\n// Add new elements to the map\nmyMap.set(\"bar\", \"foo\");\nmyMap.set(1, \"foobar\");\n\n// Update an element in the map\nmyMap.set(\"bar\", \"baz\");\n```\n\n### [Using the set() with chaining](#using_the_set_with_chaining)\n\nSince the `set()` method returns back the same `Map` object, you can chain the method call like below:\n\n```\n// Add new elements to the map with chaining.\nmyMap.set(\"bar\", \"foo\").set(1, \"foobar\").set(2, \"baz\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.set](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.set) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map.prototype.set() - JavaScript | MDN",
    "description": "The set() method of Map instances adds or updates an entry in this map with a specified key and a value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object",
    "markdown": "# Object() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object()`** constructor turns the input into an object. Its behavior depends on the input's type.\n\n## [Syntax](#syntax)\n\n```\nnew Object()\nnew Object(value)\n\nObject()\nObject(value)\n```\n\n**Note:** `Object()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), but sometimes with different effects. See [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`value`](#value) Optional\n\nAny value.\n\n### [Return value](#return_value)\n\nWhen the `Object()` constructor itself is called or constructed, its return value is an object:\n\n*   If the value is [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), it creates and returns an empty object.\n*   If the value is an object already, it returns the value.\n*   Otherwise, it returns an object of a type that corresponds to the given value. For example, passing a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) primitive returns a `BigInt` wrapper object.\n\nWhen `Object()` is constructed but [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is not the `Object` constructor itself, the behavior is slightly different — it initializes a new object with `new.target.prototype` as its prototype. Any argument value is ignored. This may happen, for example, when `Object()` is implicitly called via [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) in the constructor of a class that [extends `Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends#extending_object). In this case, even if you pass a number to `super()`, the `this` value inside the constructor does not become a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) instance.\n\n## [Examples](#examples)\n\n### [Creating a new Object](#creating_a_new_object)\n\n```\nconst o = new Object();\no.foo = 42;\n\nconsole.log(o);\n// { foo: 42 }\n```\n\n### [Using Object given undefined and null types](#using_object_given_undefined_and_null_types)\n\nThe following examples store an empty `Object` object in `o`:\n\n```\nconst o = new Object(undefined);\n```\n\n```\nconst o = new Object(null);\n```\n\n### [Obtaining wrapper objects for BigInt and Symbol](#obtaining_wrapper_objects_for_bigint_and_symbol)\n\nThe [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) and [`Symbol()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol) constructors throw an error when called with `new`, to prevent the common mistake of creating a wrapper object instead of the primitive value. The only way to create a wrapper object for these types is to call `Object()` with them:\n\n```\nconst numberObj = new Number(1);\nconsole.log(typeof numberObj); // \"object\"\n\nconst bigintObj = Object(1n);\nconsole.log(typeof bigintObj); // \"object\"\n\nconst symbolObj = Object(Symbol(\"foo\"));\nconsole.log(typeof symbolObj); // \"object\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object-constructor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object() constructor - JavaScript | MDN",
    "description": "The Object() constructor turns the input into an object. Its behavior depends on the input's type.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze",
    "markdown": "# Object.freeze() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.freeze()`** static method _freezes_ an object. Freezing an object [prevents extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. `freeze()` returns the same object that was passed in.\n\nFreezing an object is the highest integrity level that JavaScript provides.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object to freeze.\n\n### [Return value](#return_value)\n\nThe object that was passed to the function.\n\n## [Description](#description)\n\nFreezing an object is equivalent to [preventing extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and then changing all existing [properties' descriptors'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description) `configurable` to `false` — and for data properties, `writable` to `false` as well. Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail, either silently or by throwing a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) exception (most commonly, but not exclusively, when in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)).\n\nFor data properties of a frozen object, their values cannot be changed since the `writable` and `configurable` attributes are set to `false`. Accessor properties (getters and setters) work the same — the property value returned by the getter may still change, and the setter can still be called without throwing errors when setting the property. Note that values that are objects can still be modified, unless they are also frozen. As an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added to or removed from the array.\n\n[Private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) do not have the concept of property descriptors. Freezing an object with private properties does not prevent the values of these private properties from being changed. (Freezing objects is usually meant as a security measure against external code, but external code cannot access private properties anyway.) Private properties cannot be added or removed from the object, whether the object is frozen or not.\n\n`freeze()` returns the same object that was passed into the function. It _does not_ create a frozen copy.\n\nA [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) or a [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) with elements will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), as they are views over memory and will definitely cause other possible issues:\n\n```\nObject.freeze(new Uint8Array(0)); // No elements\n// Uint8Array []\n\nObject.freeze(new Uint8Array(1)); // Has elements\n// TypeError: Cannot freeze array buffer views with elements\n\nObject.freeze(new DataView(new ArrayBuffer(32))); // No elements\n// DataView {}\n\nObject.freeze(new Float64Array(new ArrayBuffer(64), 63, 0)); // No elements\n// Float64Array []\n\nObject.freeze(new Float64Array(new ArrayBuffer(64), 32, 2)); // Has elements\n// TypeError: Cannot freeze array buffer views with elements\n```\n\nNote that as the standard three properties (`buf.byteLength`, `buf.byteOffset` and `buf.buffer`) are read-only (as are those of an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer)), there is no reason for attempting to freeze these properties.\n\nUnlike [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal), existing properties in objects frozen with `Object.freeze()` are made immutable and data properties cannot be re-assigned.\n\n## [Examples](#examples)\n\n### [Freezing objects](#freezing_objects)\n\n```\nconst obj = {\n  prop() {},\n  foo: \"bar\",\n};\n\n// Before freezing: new properties may be added,\n// and existing properties may be changed or removed\nobj.foo = \"baz\";\nobj.lumpy = \"woof\";\ndelete obj.prop;\n\n// Freeze.\nconst o = Object.freeze(obj);\n\n// The return value is just the same object we passed in.\no === obj; // true\n\n// The object has become frozen.\nObject.isFrozen(obj); // === true\n\n// Now any changes will fail\nobj.foo = \"quux\"; // silently does nothing\n// silently doesn't add the property\nobj.quaxxor = \"the friendly duck\";\n\n// In strict mode such attempts will throw TypeErrors\nfunction fail() {\n  \"use strict\";\n  obj.foo = \"sparky\"; // throws a TypeError\n  delete obj.foo; // throws a TypeError\n  delete obj.quaxxor; // returns true since attribute 'quaxxor' was never added\n  obj.sparky = \"arf\"; // throws a TypeError\n}\n\nfail();\n\n// Attempted changes through Object.defineProperty;\n// both statements below throw a TypeError.\nObject.defineProperty(obj, \"ohai\", { value: 17 });\nObject.defineProperty(obj, \"foo\", { value: \"eit\" });\n\n// It's also impossible to change the prototype\n// both statements below will throw a TypeError.\nObject.setPrototypeOf(obj, { x: 20 });\nobj.__proto__ = { x: 20 };\n```\n\n### [Freezing arrays](#freezing_arrays)\n\n```\nconst a = [0];\nObject.freeze(a); // The array cannot be modified now.\n\na[0] = 1; // fails silently\n\n// In strict mode such attempt will throw a TypeError\nfunction fail() {\n  \"use strict\";\n  a[0] = 1;\n}\n\nfail();\n\n// Attempted to push\na.push(2); // throws a TypeError\n```\n\nThe object being frozen is _immutable_. However, it is not necessarily _constant_. The following example shows that a frozen object is not constant (freeze is shallow).\n\n```\nconst obj1 = {\n  internal: {},\n};\n\nObject.freeze(obj1);\nobj1.internal.a = \"aValue\";\n\nobj1.internal.a; // 'aValue'\n```\n\nTo be a constant object, the entire reference graph (direct and indirect references to other objects) must reference only immutable frozen objects. The object being frozen is said to be immutable because the entire object _state_ (values and references to other objects) within the whole object is fixed. Note that strings, numbers, and booleans are always immutable and that Functions and Arrays are objects.\n\n### [Deep freezing](#deep_freezing)\n\nThe result of calling `Object.freeze(object)` only applies to the immediate properties of `object` itself and will prevent future property addition, removal or value re-assignment operations _only_ on `object`. If the value of those properties are objects themselves, those objects are not frozen and may be the target of property addition, removal or value re-assignment operations.\n\n```\nconst employee = {\n  name: \"Mayank\",\n  designation: \"Developer\",\n  address: {\n    street: \"Rohini\",\n    city: \"Delhi\",\n  },\n};\n\nObject.freeze(employee);\n\nemployee.name = \"Dummy\"; // fails silently in non-strict mode\nemployee.address.city = \"Noida\"; // attributes of child object can be modified\n\nconsole.log(employee.address.city); // \"Noida\"\n```\n\nTo make an object immutable, recursively freeze each non-primitive property (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no [cycles](https://en.wikipedia.org/wiki/Cycle_(graph_theory)) in the reference graph, otherwise an endless loop will be triggered. For example, functions created with the [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) syntax have a [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property with a `constructor` property that points to the function itself, so they have cycles by default. Other functions, such as [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), can still be frozen.\n\nAn enhancement to `deepFreeze()` would be to store the objects it has already visited, so you can suppress calling `deepFreeze()` recursively when an object is in the process of being made immutable. For one example, see [using `WeakSet` to detect circular references](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet#use_case_detecting_circular_references). You still run a risk of freezing an object that shouldn't be frozen, such as [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window).\n\n```\nfunction deepFreeze(object) {\n  // Retrieve the property names defined on object\n  const propNames = Reflect.ownKeys(object);\n\n  // Freeze properties before freezing self\n  for (const name of propNames) {\n    const value = object[name];\n\n    if ((value && typeof value === \"object\") || typeof value === \"function\") {\n      deepFreeze(value);\n    }\n  }\n\n  return Object.freeze(object);\n}\n\nconst obj2 = {\n  internal: {\n    a: null,\n  },\n};\n\ndeepFreeze(obj2);\n\nobj2.internal.a = \"anotherValue\"; // fails silently in non-strict mode\nobj2.internal.a; // null\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.freeze](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.freeze) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.freeze() - JavaScript | MDN",
    "description": "The Object.freeze() static method freezes an object. Freezing an object prevents extensions and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. freeze() returns the same object that was passed in.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed",
    "markdown": "# Object.isSealed() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.isSealed()`** static method determines if an object is [sealed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which should be checked.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the given object is sealed.\n\n## [Description](#description)\n\nReturns `true` if the object is sealed, otherwise `false`. An object is sealed if it is not [extensible](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible) and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable).\n\n## [Examples](#examples)\n\n### [Using Object.isSealed](#using_object.issealed)\n\n```\n// Objects aren't sealed by default.\nconst empty = {};\nObject.isSealed(empty); // false\n\n// If you make an empty object non-extensible,\n// it is vacuously sealed.\nObject.preventExtensions(empty);\nObject.isSealed(empty); // true\n\n// The same is not true of a non-empty object,\n// unless its properties are all non-configurable.\nconst hasProp = { fee: \"fie foe fum\" };\nObject.preventExtensions(hasProp);\nObject.isSealed(hasProp); // false\n\n// But make them all non-configurable\n// and the object becomes sealed.\nObject.defineProperty(hasProp, \"fee\", {\n  configurable: false,\n});\nObject.isSealed(hasProp); // true\n\n// The easiest way to seal an object, of course,\n// is Object.seal.\nconst sealed = {};\nObject.seal(sealed);\nObject.isSealed(sealed); // true\n\n// A sealed object is, by definition, non-extensible.\nObject.isExtensible(sealed); // false\n\n// A sealed object might be frozen,\n// but it doesn't have to be.\nObject.isFrozen(sealed); // true\n// (all properties also non-writable)\n\nconst s2 = Object.seal({ p: 3 });\nObject.isFrozen(s2); // false\n// ('p' is still writable)\n\nconst s3 = Object.seal({\n  get p() {\n    return 0;\n  },\n});\nObject.isFrozen(s3); // true\n// (only configurability matters for accessor properties)\n```\n\n### [Non-object argument](#non-object_argument)\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, it will return `true` without any errors if a non-object argument is passed, since primitives are, by definition, immutable.\n\n```\nObject.isSealed(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isSealed(1);\n// true                          (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.issealed](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.issealed) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.isSealed() - JavaScript | MDN",
    "description": "The Object.isSealed() static method determines if an object is sealed.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen",
    "markdown": "# Object.isFrozen() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.isFrozen()`** static method determines if an object is [frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which should be checked.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the given object is frozen.\n\n## [Description](#description)\n\nAn object is frozen if and only if it is not [extensible](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible), all its properties are non-configurable, and all its data properties (that is, properties which are not accessor properties with getter or setter components) are non-writable.\n\n## [Examples](#examples)\n\n### [Using Object.isFrozen](#using_object.isfrozen)\n\n```\n// A new object is extensible, so it is not frozen.\nObject.isFrozen({}); // false\n\n// An empty object which is not extensible\n// is vacuously frozen.\nconst vacuouslyFrozen = Object.preventExtensions({});\nObject.isFrozen(vacuouslyFrozen); // true\n\n// A new object with one property is also extensible,\n// ergo not frozen.\nconst oneProp = { p: 42 };\nObject.isFrozen(oneProp); // false\n\n// Preventing extensions to the object still doesn't\n// make it frozen, because the property is still\n// configurable (and writable).\nObject.preventExtensions(oneProp);\nObject.isFrozen(oneProp); // false\n\n// Deleting that property makes the object vacuously frozen.\ndelete oneProp.p;\nObject.isFrozen(oneProp); // true\n\n// A non-extensible object with a non-writable\n// but still configurable property is not frozen.\nconst nonWritable = { e: \"plep\" };\nObject.preventExtensions(nonWritable);\nObject.defineProperty(nonWritable, \"e\", {\n  writable: false,\n}); // make non-writable\nObject.isFrozen(nonWritable); // false\n\n// Changing that property to non-configurable\n// then makes the object frozen.\nObject.defineProperty(nonWritable, \"e\", {\n  configurable: false,\n}); // make non-configurable\nObject.isFrozen(nonWritable); // true\n\n// A non-extensible object with a non-configurable\n// but still writable property also isn't frozen.\nconst nonConfigurable = { release: \"the kraken!\" };\nObject.preventExtensions(nonConfigurable);\nObject.defineProperty(nonConfigurable, \"release\", {\n  configurable: false,\n});\nObject.isFrozen(nonConfigurable); // false\n\n// Changing that property to non-writable\n// then makes the object frozen.\nObject.defineProperty(nonConfigurable, \"release\", {\n  writable: false,\n});\nObject.isFrozen(nonConfigurable); // true\n\n// A non-extensible object with a configurable\n// accessor property isn't frozen.\nconst accessor = {\n  get food() {\n    return \"yum\";\n  },\n};\nObject.preventExtensions(accessor);\nObject.isFrozen(accessor); // false\n\n// When we make that property non-configurable it becomes frozen.\nObject.defineProperty(accessor, \"food\", {\n  configurable: false,\n});\nObject.isFrozen(accessor); // true\n\n// But the easiest way for an object to be frozen\n// is if Object.freeze has been called on it.\nconst frozen = { 1: 81 };\nObject.isFrozen(frozen); // false\nObject.freeze(frozen);\nObject.isFrozen(frozen); // true\n\n// By definition, a frozen object is non-extensible.\nObject.isExtensible(frozen); // false\n\n// Also by definition, a frozen object is sealed.\nObject.isSealed(frozen); // true\n```\n\n### [Non-object argument](#non-object_argument)\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, it will return `true` without any errors if a non-object argument is passed, since primitives are, by definition, immutable.\n\n```\nObject.isFrozen(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isFrozen(1);\n// true                          (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.isfrozen](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.isfrozen) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.isFrozen() - JavaScript | MDN",
    "description": "The Object.isFrozen() static method determines if an object is\n  frozen.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries",
    "markdown": "# Object.fromEntries() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.fromEntries()`** static method transforms a list of key-value pairs into an object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.fromEntries(iterable)\n```\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable)\n\nAn [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), containing a list of objects. Each object should have two properties:\n\n[`0`](#0)\n\nA string or [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property key.\n\n[`1`](#1)\n\nThe property value.\n\nTypically, this object is implemented as a two-element array, with the first element being the property key and the second element being the property value.\n\n### [Return value](#return_value)\n\nA new object whose properties are given by the entries of the iterable.\n\n## [Description](#description)\n\nThe `Object.fromEntries()` method takes a list of key-value pairs and returns a new object whose properties are given by those entries. The `iterable` argument is expected to be an object that implements an `@@iterator` method. The method returns an iterator object that produces two-element array-like objects. The first element is a value that will be used as a property key, and the second element is the value to associate with that property key.\n\n`Object.fromEntries()` performs the reverse of [`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries), except that `Object.entries()` only returns string-keyed properties, while `Object.fromEntries()` can also create symbol-keyed properties.\n\n**Note:** Unlike [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from), `Object.fromEntries()` does not use the value of `this`, so calling it on another constructor does not create objects of that type.\n\n## [Examples](#examples)\n\n### [Converting a Map to an Object](#converting_a_map_to_an_object)\n\nWith `Object.fromEntries`, you can convert from [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) to [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object):\n\n```\nconst map = new Map([\n  [\"foo\", \"bar\"],\n  [\"baz\", 42],\n]);\nconst obj = Object.fromEntries(map);\nconsole.log(obj); // { foo: \"bar\", baz: 42 }\n```\n\n### [Converting an Array to an Object](#converting_an_array_to_an_object)\n\nWith `Object.fromEntries`, you can convert from [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) to [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object):\n\n```\nconst arr = [\n  [\"0\", \"a\"],\n  [\"1\", \"b\"],\n  [\"2\", \"c\"],\n];\nconst obj = Object.fromEntries(arr);\nconsole.log(obj); // { 0: \"a\", 1: \"b\", 2: \"c\" }\n```\n\n### [Object transformations](#object_transformations)\n\nWith `Object.fromEntries`, its reverse method [`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries), and [array manipulation methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods), you are able to transform objects like this:\n\n```\nconst object1 = { a: 1, b: 2, c: 3 };\n\nconst object2 = Object.fromEntries(\n  Object.entries(object1).map(([key, val]) => [key, val * 2]),\n);\n\nconsole.log(object2);\n// { a: 2, b: 4, c: 6 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.fromentries](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.fromentries) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.fromEntries() - JavaScript | MDN",
    "description": "The Object.fromEntries() static method transforms a list of key-value pairs into an object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal",
    "markdown": "# Object.seal() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.seal()`** static method _seals_ an object. Sealing an object [prevents extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. `seal()` returns the same object that was passed in.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which should be sealed.\n\n### [Return value](#return_value)\n\nThe object being sealed.\n\n## [Description](#description)\n\nSealing an object is equivalent to [preventing extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and then changing all existing [properties' descriptors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description) to `configurable: false`. This has the effect of making the set of properties on the object fixed. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) (most commonly, although not exclusively, when in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) code).\n\n[Private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) do not have the concept of property descriptors. Private properties cannot be added or removed from the object, whether the object is sealed or not.\n\nThe prototype chain remains untouched. However, due to the effect of [preventing extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions), the `[[Prototype]]` cannot be reassigned.\n\nUnlike [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze), objects sealed with `Object.seal()` may have their existing properties changed, as long as they are writable.\n\n## [Examples](#examples)\n\n### [Using Object.seal](#using_object.seal)\n\n```\nconst obj = {\n  prop() {},\n  foo: \"bar\",\n};\n\n// New properties may be added, existing properties\n// may be changed or removed.\nobj.foo = \"baz\";\nobj.lumpy = \"woof\";\ndelete obj.prop;\n\nconst o = Object.seal(obj);\n\no === obj; // true\nObject.isSealed(obj); // true\n\n// Changing property values on a sealed object\n// still works.\nobj.foo = \"quux\";\n\n// But you can't convert data properties to accessors,\n// or vice versa.\nObject.defineProperty(obj, \"foo\", {\n  get() {\n    return \"g\";\n  },\n}); // throws a TypeError\n\n// Now any changes, other than to property values,\n// will fail.\nobj.quaxxor = \"the friendly duck\";\n// silently doesn't add the property\ndelete obj.foo;\n// silently doesn't delete the property\n\n// ...and in strict mode such attempts\n// will throw TypeErrors.\nfunction fail() {\n  \"use strict\";\n  delete obj.foo; // throws a TypeError\n  obj.sparky = \"arf\"; // throws a TypeError\n}\nfail();\n\n// Attempted additions through\n// Object.defineProperty will also throw.\nObject.defineProperty(obj, \"ohai\", {\n  value: 17,\n}); // throws a TypeError\nObject.defineProperty(obj, \"foo\", {\n  value: \"eit\",\n}); // changes existing property value\n```\n\n### [Non-object argument](#non-object_argument)\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, a non-object argument will be returned as-is without any errors, since primitives are already, by definition, immutable.\n\n```\nObject.seal(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.seal(1);\n// 1                             (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.seal](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.seal) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.seal() - JavaScript | MDN",
    "description": "The Object.seal() static method seals an object. Sealing an object prevents extensions and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. seal() returns the same object that was passed in.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta/resolve",
    "markdown": "# import.meta.resolve() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**`import.meta.resolve()`** is a built-in function defined on the [`import.meta`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta) object of a JavaScript module that resolves a module specifier to a URL using the current module's URL as base.\n\n## [Syntax](#syntax)\n\n```\nimport.meta.resolve(moduleName)\n```\n\n### [Parameters](#parameters)\n\n[`moduleName`](#modulename)\n\nA string that specifies a potentially importable module. This may be a relative path (such as `\"./lib/helper.js\"`), a bare name (such as `\"my-module\"`), or an absolute URL (such as `\"https://example.com/lib/helper.js\"`).\n\n### [Return value](#return_value)\n\nReturns a string corresponding to the path that would be imported if the argument were passed to [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import).\n\n## [Description](#description)\n\n`import.meta.resolve()` allows a script to access the _module specifier resolution_ algorithm for a name, like this:\n\n```\n// Script at https://example.com/main.js\n\nconst helperPath = import.meta.resolve(\"./lib/helper.js\");\nconsole.log(helperPath); // \"https://example.com/lib/helper.js\"\n```\n\nNote that `import.meta.resolve()` only performs resolution and does not attempt to load or import the resulting path. (The [explainer for the specification](https://gist.github.com/domenic/f2a0a9cb62d499bcc4d12aebd1c255ab#sync-vs-async) describes the reasoning for this behavior.) Therefore, its return value is the same _regardless of whether the returned path corresponds to a file that exists, and regardless of whether that file contains valid code for a module_.\n\nIt is different from [dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import), because although both accept a module specifier as the first argument, `import.meta.resolve()` returns the path that _would be imported_ without making any attempt to access that path. Therefore, the following two are effectively the same code:\n\n```\n// Approach 1\nconsole.log(await import(\"./lib/helper.js\"));\n\n// Approach 2\nconst helperPath = import.meta.resolve(\"./lib/helper.js\");\nconsole.log(await import(helperPath));\n```\n\nHowever, even if `\"./lib/helper.js\"` cannot be successfully imported, the second snippet will not encounter an error until it attempts to perform the import on line 2.\n\n### [Bare module names](#bare_module_names)\n\nYou can pass a bare module name (also known as a bare module specifier) to `import.meta.resolve()`, as long as module resolution is defined for the name. For example, you can define this using an [import map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#importing_modules_using_import_maps) inside a browser:\n\n```\n<!-- index.html -->\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"my-module\": \"./modules/my-module/index.js\"\n    }\n  }\n</script>\n\n<script type=\"module\">\n  const moduleEntryPath = import.meta.resolve(\"my-module\");\n  console.log(moduleEntryPath);\n</script>\n```\n\nAgain, since this snippet does not try to import `moduleEntryPath` — neither does the import map — it prints the resolved URL regardless of whether `./modules/my-module/index.js` actually exists.\n\n### [Comparison with new URL()](#comparison_with_new_url)\n\nThe [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor accepts a second _base URL_ argument. When the first argument is a relative path and the base URL is [`import.meta.url`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta#value), the effect is similar to `import.meta.resolve()`.\n\n```\nconst helperPath = new URL(\"./lib/helper.js\", import.meta.url).href;\nconsole.log(helperPath);\n```\n\nThis is also a useful replacement syntax when targeting older browsers. However, there are some differences:\n\n*   `import.meta.resolve()` returns a string, while `new URL()` returns a `URL` object. It is possible to use [`href`](https://developer.mozilla.org/en-US/docs/Web/API/URL/href) or [`toString()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/toString) on the constructed `URL`, but this may still not produce the exact same result in some JavaScript environments or when using tools like bundlers to statically analyze the code.\n*   `import.meta.resolve()` is aware of additional resolution configurations, such as resolving bare module names using import maps, as described above. `new URL()` is not aware of import maps and treats bare module names as relative paths (i.e. `new URL(\"my-module\", import.meta.url)` means `new URL(\"./my-module\", import.meta.url)`).\n\nSome tools recognize `new URL(\"./lib/helper.js\", import.meta.url).href` as a dependency on `\"./lib/helper.js\"` (similar to an import), and take this into account for features like bundling, rewriting imports for moved files, \"go to source\" functionality, etc. However, since `import.meta.resolve()` is less ambiguous and specifically designed to indicate a module path resolution dependency, you should use `import.meta.resolve(moduleName)` instead of `new URL(moduleName, import.meta.url)` for these use cases wherever possible.\n\n### [Not an ECMAScript feature](#not_an_ecmascript_feature)\n\n`import.meta.resolve()` is not specified or documented as part of the [ECMAScript specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview#javascript_the_core_language_ecmascript) for JavaScript modules. Instead, the specification defines [the `import.meta` object](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ImportMeta) but [leaves all its properties as \"host-defined\"](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-hostgetimportmetaproperties). The WHATWG HTML standard picks up where the ECMAScript standard leaves off, and [defines `import.meta.resolve`](https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties) using its [module specifier resolution](https://html.spec.whatwg.org/multipage/webappapis.html#resolve-a-module-specifier).\n\nThis means that `import.meta.resolve()` is not required to be implemented by all conformant JavaScript implementations. However, `import.meta.resolve()` may also be available in non-browser environments:\n\n*   Deno implements [compatibility with browser behavior](https://deno.land/manual/runtime/import_meta_api).\n*   Node.js also implements [the `import.meta.resolve()` function](https://nodejs.org/docs/latest/api/esm.html#importmetaresolvespecifier), but adds an additional `parent` parameter if you use the `--experimental-import-meta-resolve` flag.\n\n## [Examples](#examples)\n\n### [Resolve a path for the Worker() constructor](#resolve_a_path_for_the_worker_constructor)\n\n`import.meta.resolve()` is particularly valuable for APIs that take a path to a script file as an argument, such as the [`Worker()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker) constructor:\n\n```\n// main.js\nconst workerPath = import.meta.resolve(\"./worker.js\");\nconst worker = new Worker(workerPath, { type: \"module\" });\nworker.addEventListener(\"message\", console.log);\n```\n\n```\n// worker.js\nself.postMessage(\"hello!\");\n```\n\nThis is also useful to calculate paths for other workers, such as [service workers](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker) and [shared workers](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker). However, if you are using a relative path to calculate the URL of a service worker, keep in mind that the directory of the resolved path determines its [registration scope](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/scope) by default (although a different scope can be specified [during registration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register)).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [HTML Standard  <br>\\# hostgetimportmetaproperties](https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "import.meta.resolve() - JavaScript | MDN",
    "description": "import.meta.resolve() is a built-in function defined on the import.meta object of a JavaScript module that resolves a module specifier to a URL using the current module's URL as base.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf",
    "markdown": "# Number.prototype.valueOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`valueOf()`** method of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values returns the value of this number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA number representing the primitive value of the specified [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) object.\n\n## [Description](#description)\n\nThis method is usually called internally by JavaScript and not explicitly in web code.\n\n## [Examples](#examples)\n\n### [Using valueOf](#using_valueof)\n\n```\nconst numObj = new Number(10);\nconsole.log(typeof numObj); // object\n\nconst num = numObj.valueOf();\nconsole.log(num); // 10\nconsole.log(typeof num); // number\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.prototype.valueof](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.prototype.valueof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.prototype.valueOf() - JavaScript | MDN",
    "description": "The valueOf() method of Number values returns the value of this number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length",
    "markdown": "# arguments.length - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`arguments.length`** data property contains the number of arguments passed to the function.\n\n## [Value](#value)\n\nA non-negative integer.\n\n| Property attributes of `arguments.length` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nThe `arguments.length` property provides the number of arguments actually passed to a function. This can be more or less than the defined parameter's count (see [`Function.prototype.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)). For example, for the function below:\n\n```\nfunction func1(a, b, c) {\n  console.log(arguments.length);\n}\n```\n\n`func1.length` returns `3`, because `func1` declares three formal parameters. However, `func1(1, 2, 3, 4, 5)` logs `5`, because `func1` was called with five arguments. Similarly, `func1(1)` logs `1`, because `func1` was called with one argument.\n\n## [Examples](#examples)\n\n### [Using arguments.length](#using_arguments.length)\n\nIn this example, we define a function that can add two or more numbers together.\n\n```\nfunction adder(base /*, num1, …, numN */) {\n  base = Number(base);\n  for (let i = 1; i < arguments.length; i++) {\n    base += Number(arguments[i]);\n  }\n  return base;\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arguments-exotic-objects](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-arguments-exotic-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "arguments.length - JavaScript | MDN",
    "description": "The arguments.length data property contains the number of arguments passed to the function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare",
    "markdown": "# Intl.Collator.prototype.compare() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`compare()`** method of [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) instances compares two strings according to the sort order of this collator object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncompare(string1, string2)\n```\n\n### [Parameters](#parameters)\n\n[`string1`](#string1), `string2`\n\nThe strings to compare against each other.\n\n### [Return value](#return_value)\n\nA number indicating how `string1` and `string2` compare to each other according to the sort order of this [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) object:\n\n*   A negative value if `string1` comes before `string2`;\n*   A positive value if `string1` comes after `string2`;\n*   0 if they are considered equal.\n\n## [Examples](#examples)\n\n### [Using compare for array sort](#using_compare_for_array_sort)\n\nUse the `compare` function for sorting arrays. Note that the function is bound to the collator from which it was obtained, so it can be passed directly to [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\n\n```\nconst a = [\"Offenbach\", \"Österreich\", \"Odenwald\"];\nconst collator = new Intl.Collator(\"de-u-co-phonebk\");\na.sort(collator.compare);\nconsole.log(a.join(\", \")); // \"Odenwald, Österreich, Offenbach\"\n```\n\n### [Using compare for array search](#using_compare_for_array_search)\n\nUse the `compare` function for finding matching strings in arrays:\n\n```\nconst a = [\"Congrès\", \"congres\", \"Assemblée\", \"poisson\"];\nconst collator = new Intl.Collator(\"fr\", {\n  usage: \"search\",\n  sensitivity: \"base\",\n});\nconst s = \"congres\";\nconst matches = a.filter((v) => collator.compare(v, s) === 0);\nconsole.log(matches.join(\", \")); // \"Congrès, congres\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.collator.prototype.compare](https://tc39.es/ecma402/#sec-intl.collator.prototype.compare) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Collator.prototype.compare() - JavaScript | MDN",
    "description": "The compare() method of Intl.Collator instances compares two\n  strings according to the sort order of this collator object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/supportedLocalesOf",
    "markdown": "# Intl.DateTimeFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DateTimeFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.DateTimeFormat.supportedLocalesOf(locales)\nIntl.DateTimeFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in date and time formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to date and time formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DateTimeFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.datetimeformat.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.datetimeformat.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DateTimeFormat.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.DateTimeFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat",
    "markdown": "# Intl.DateTimeFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DateTimeFormat()`** constructor creates [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.DateTimeFormat()\nnew Intl.DateTimeFormat(locales)\nnew Intl.DateTimeFormat(locales, options)\n\nIntl.DateTimeFormat()\nIntl.DateTimeFormat(locales)\nIntl.DateTimeFormat(locales, options)\n```\n\n**Note:** `Intl.DateTimeFormat()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Intl.DateTimeFormat` instance. However, there's a special behavior when it's called without `new` and the `this` value is another `Intl.DateTimeFormat` instance; see [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension key is allowed:\n\n[`nu`](#nu)\n\nSee [`numberingSystem`](#numberingsystem).\n\n[`ca`](#ca)\n\nSee [`calendar`](#calendar).\n\n[`hc`](#hc)\n\nSee [`hourCycle`](#hourcycle).\n\nThese keys can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object. For ease of reading, the property list is broken into sections based on their purposes, including [locale options](#locale_options), [date-time component options](#date-time_component_options), and [style shortcuts](#style_shortcuts).\n\n#### Locale options\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`calendar`](#calendar)\n\nThe calendar to use, such as `\"chinese\"`, `\"gregory\"`, `\"persian\"`, and so on. For a list of supported calendar types, see [`Intl.Locale.prototype.getCalendars()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types). This option can also be set through the `ca` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`hour12`](#hour12)\n\nWhether to use 12-hour time (as opposed to 24-hour time). Possible values are `true` and `false`; the default is locale dependent. When `true`, this option sets `hourCycle` to either `\"h11\"` or `\"h12\"`, depending on the locale. When `false`, it sets `hourCycle` to `\"h23\"`. `hour12` overrides both the `hc` locale extension tag and the `hourCycle` option, should either or both of those be present.\n\n[`hourCycle`](#hourcycle)\n\nThe hour cycle to use. Possible values are `\"h11\"`, `\"h12\"`, `\"h23\"`, and `\"h24\"`. This option can also be set through the `hc` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`timeZone`](#timezone)\n\nThe time zone to use. Time zone names correspond to the Zone and Link names of the [IANA Time Zone Database](https://www.iana.org/time-zones), such as `\"UTC\"`, `\"Asia/Shanghai\"`, `\"Asia/Kolkata\"`, and `\"America/New_York\"`. Additionally, time zones can be given as UTC offsets in the format \"±hh:mm\", \"±hhmm\", or \"±hh\", for example as `\"+01:00\"`, `\"-2359\"`, or `\"+23\"`. The default is the runtime's default time zone.\n\n#### Date-time component options\n\n[`weekday`](#weekday)\n\nThe representation of the weekday. Possible values are:\n\n[`\"long\"`](#long)\n\nE.g., `Thursday`\n\n[`\"short\"`](#short)\n\nE.g., `Thu`\n\n[`\"narrow\"`](#narrow)\n\nE.g., `T`. Two weekdays may have the same narrow style for some locales (e.g. `Tuesday`'s narrow style is also `T`).\n\n[`era`](#era)\n\nThe representation of the era. Possible values are:\n\n[`\"long\"`](#long_2)\n\nE.g., `Anno Domini`\n\n[`\"short\"`](#short_2)\n\nE.g., `AD`\n\n[`\"narrow\"`](#narrow_2)\n\nE.g., `A`\n\n[`year`](#year)\n\nThe representation of the year. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`month`](#month)\n\nThe representation of the month. Possible values are:\n\n[`\"numeric\"`](#numeric)\n\nE.g., `3`\n\n[`\"2-digit\"`](#2-digit)\n\nE.g., `03`\n\n[`\"long\"`](#long_3)\n\nE.g., `March`\n\n[`\"short\"`](#short_3)\n\nE.g., `Mar`\n\n[`\"narrow\"`](#narrow_3)\n\nE.g., `M`). Two months may have the same narrow style for some locales (e.g. `May`'s narrow style is also `M`).\n\n[`day`](#day)\n\nThe representation of the day. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`dayPeriod`](#dayperiod)\n\nThe formatting style used for day periods like \"in the morning\", \"am\", \"noon\", \"n\" etc. Possible values are `\"narrow\"`, `\"short\"`, and `\"long\"`.\n\n**Note:** This option only has an effect if a 12-hour clock (`hourCycle: \"h12\"` or `hourCycle: \"h11\"`) is used. Many locales use the same string irrespective of the width specified.\n\n[`hour`](#hour)\n\nThe representation of the hour. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`minute`](#minute)\n\nThe representation of the minute. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`second`](#second)\n\nThe representation of the second. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`fractionalSecondDigits`](#fractionalseconddigits)\n\nThe number of digits used to represent fractions of a second (any additional digits are truncated). Possible values are from `1` to `3`.\n\n[`timeZoneName`](#timezonename)\n\nThe localized representation of the time zone name. Possible values are:\n\n[`\"long\"`](#long_4)\n\nLong localized form (e.g., `Pacific Standard Time`, `Nordamerikanische Westküsten-Normalzeit`)\n\n[`\"short\"`](#short_4)\n\nShort localized form (e.g.: `PST`, `GMT-8`)\n\n[`\"shortOffset\"`](#shortoffset)\n\nShort localized GMT format (e.g., `GMT-8`)\n\n[`\"longOffset\"`](#longoffset)\n\nLong localized GMT format (e.g., `GMT-08:00`)\n\n[`\"shortGeneric\"`](#shortgeneric)\n\nShort generic non-location format (e.g.: `PT`, `Los Angeles Zeit`).\n\n[`\"longGeneric\"`](#longgeneric)\n\nLong generic non-location format (e.g.: `Pacific Time`, `Nordamerikanische Westküstenzeit`)\n\n**Note:** Timezone display may fall back to another format if a required string is unavailable. For example, the non-location formats should display the timezone without a specific country/city location like \"Pacific Time\", but may fall back to a timezone like \"Los Angeles Time\".\n\nThe default value for each date-time component option is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), but if all component properties are [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), then `year`, `month`, and `day` default to `\"numeric\"`. If any of the date-time component options is specified, then `dateStyle` and `timeStyle` must be `undefined`.\n\n[`formatMatcher`](#formatmatcher)\n\nThe format matching algorithm to use. Possible values are `\"basic\"` and `\"best fit\"`; the default is `\"best fit\"`. Implementations are required to support displaying at least the following subsets of date-time components:\n\n*   `weekday`, `year`, `month`, `day`, `hour`, `minute`, `second`\n*   `weekday`, `year`, `month`, `day`\n*   `year`, `month`, `day`\n*   `year`, `month`\n*   `month`, `day`\n*   `hour`, `minute`, `second`\n*   `hour`, `minute`\n\nImplementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. The algorithm for `\"best fit\"` is implementation-defined, and `\"basic\"` is [defined by the spec](https://tc39.es/ecma402/#sec-basicformatmatcher). This option is only used when both `dateStyle` and `timeStyle` are `undefined` (so that each date-time component's format is individually customizable).\n\n#### Style shortcuts\n\n[`dateStyle`](#datestyle)\n\nThe [date formatting style](https://cldr.unicode.org/translation/date-time/date-time-patterns#h.aa5zjyepm6vh) to use. Possible values are `\"full\"`, `\"long\"`, `\"medium\"`, and `\"short\"`. It expands to styles for `weekday`, `day`, `month`, `year`, and `era`, with the exact combination of values depending on the locale.\n\n[`timeStyle`](#timestyle)\n\nThe [time formatting style](https://cldr.unicode.org/translation/date-time/date-time-patterns#h.588vo3awdscu) to use. Possible values are `\"full\"`, `\"long\"`, `\"medium\"`, and `\"short\"`. It expands to styles for `hour`, `minute`, `second`, and `timeZoneName`, with the exact combination of values depending on the locale.\n\n**Note:** `dateStyle` and `timeStyle` can be used with each other, but not with other date-time component options (e.g. `weekday`, `hour`, `month`, etc.).\n\n### [Return value](#return_value)\n\nA new `Intl.DateTimeFormat` object.\n\n**Note:** The text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the [browser compatibility table](#browser_compatibility).\n\nNormally, `Intl.DateTimeFormat()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), and a new `Intl.DateTimeFormat` instance is returned in both cases. However, if the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) value is an object that is [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) `Intl.DateTimeFormat` (doesn't necessarily mean it's created via `new Intl.DateTimeFormat`; just that it has `Intl.DateTimeFormat.prototype` in its prototype chain), then the value of `this` is returned instead, with the newly created `Intl.DateTimeFormat` object hidden in a `[Symbol(IntlLegacyConstructedSymbol)]` property (a unique symbol that's reused between instances).\n\n```\nconst formatter = Intl.DateTimeFormat.call(\n  { __proto__: Intl.DateTimeFormat.prototype },\n  \"en-US\",\n  { dateStyle: \"full\" },\n);\nconsole.log(Object.getOwnPropertyDescriptors(formatter));\n// {\n//   [Symbol(IntlLegacyConstructedSymbol)]: {\n//     value: DateTimeFormat [Intl.DateTimeFormat] {},\n//     writable: false,\n//     enumerable: false,\n//     configurable: false\n//   }\n// }\n```\n\nNote that there's only one actual `Intl.DateTimeFormat` instance here: the one hidden in `[Symbol(IntlLegacyConstructedSymbol)]`. Calling the [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format) and [`resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions) methods on `formatter` would correctly use the options stored in that instance, but calling all other methods (e.g. [`formatRange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange)) would fail: \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n\nThis behavior, called `ChainDateTimeFormat`, does not happen when `Intl.DateTimeFormat()` is called without `new` but with `this` set to anything else that's not an `instanceof Intl.DateTimeFormat`. If you call it directly as `Intl.DateTimeFormat()`, the `this` value is [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl), and a new `Intl.DateTimeFormat` instance is created normally.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Using DateTimeFormat](#using_datetimeformat)\n\nIn basic use without specifying a locale, `DateTimeFormat` uses the default locale and default options.\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// toLocaleString without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(new Intl.DateTimeFormat().format(date));\n// \"12/19/2012\" if run with en-US locale (language) and time zone America/Los_Angeles (UTC-0800)\n```\n\n### [Using timeStyle and dateStyle](#using_timestyle_and_datestyle)\n\n`dateStyle` and `timeStyle` provide a shortcut for setting multiple date-time component options at once. For example, for `en-US`, `dateStyle: \"short\"` is equivalent to setting `year: \"2-digit\", month: \"numeric\", day: \"numeric\"`, and `timeStyle: \"short\"` is equivalent to setting `hour: \"numeric\", minute: \"numeric\"`.\n\n```\nconst shortTime = new Intl.DateTimeFormat(\"en-US\", {\n  timeStyle: \"short\",\n});\nconsole.log(shortTime.format(Date.now())); // \"1:31 PM\"\n\nconst shortDate = new Intl.DateTimeFormat(\"en-US\", {\n  dateStyle: \"short\",\n});\nconsole.log(shortDate.format(Date.now())); // \"7/7/20\"\n\nconst mediumTime = new Intl.DateTimeFormat(\"en-US\", {\n  timeStyle: \"medium\",\n  dateStyle: \"short\",\n});\nconsole.log(mediumTime.format(Date.now())); // \"7/7/20, 1:31:55 PM\"\n```\n\nHowever, the exact (locale dependent) component styles they resolve to are not included in the [resolved options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions). This ensures the result of `resolvedOptions()` can be passed directly to the `Intl.DateTimeFormat()` constructor (because an `options` object with both `dateStyle` or `timeStyle` and individual date or time component styles is not valid).\n\n```\nconsole.log(shortDate.resolvedOptions().year); // undefined\n```\n\n### [Using dayPeriod](#using_dayperiod)\n\nUse the `dayPeriod` option to output a string for the times of day (\"in the morning\", \"at night\", \"noon\", etc.). Note, that this only works when formatting for a 12 hour clock (`hourCycle: 'h12'` or `hourCycle: 'h11'`) and that for many locales the strings are the same irrespective of the value passed for the `dayPeriod`.\n\n```\nconst date = Date.UTC(2012, 11, 17, 4, 0, 42);\n\nconsole.log(\n  new Intl.DateTimeFormat(\"en-GB\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"short\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// 4 at night\"  (same formatting in en-GB for all dayPeriod values)\n\nconsole.log(\n  new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"narrow\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// \"4 mat.\"  (same output in French for both narrow/short dayPeriod)\n\nconsole.log(\n  new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"long\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// \"4 du matin\"\n```\n\n### [Using timeZoneName](#using_timezonename)\n\nUse the `timeZoneName` option to output a string for the timezone (\"GMT\", \"Pacific Time\", etc.).\n\n```\nconst date = Date.UTC(2021, 11, 17, 3, 0, 42);\nconst timezoneNames = [\n  \"short\",\n  \"long\",\n  \"shortOffset\",\n  \"longOffset\",\n  \"shortGeneric\",\n  \"longGeneric\",\n];\n\nfor (const zoneName of timezoneNames) {\n  // Do something with currentValue\n  const formatter = new Intl.DateTimeFormat(\"en-US\", {\n    timeZone: \"America/Los_Angeles\",\n    timeZoneName: zoneName,\n  });\n  console.log(`${zoneName}: ${formatter.format(date)}`);\n}\n\n// Logs:\n// short: 12/16/2021, PST\n// long: 12/16/2021, Pacific Standard Time\n// shortOffset: 12/16/2021, GMT-8\n// longOffset: 12/16/2021, GMT-08:00\n// shortGeneric: 12/16/2021, PT\n// longGeneric: 12/16/2021, Pacific Time\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-datetimeformat-constructor](https://tc39.es/ecma402/#sec-intl-datetimeformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DateTimeFormat() constructor - JavaScript | MDN",
    "description": "The Intl.DateTimeFormat() constructor creates Intl.DateTimeFormat objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/resolvedOptions",
    "markdown": "# Intl.Collator.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) instances returns a new object with properties reflecting the locale and collation options computed during initialization of this collator object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and collation options computed during the initialization of the given [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) object.\n\n## [Description](#description)\n\nThe resulting object has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`usage`](#usage), `sensitivity`, `ignorePunctuation`\n\nThe values provided for these properties in the `options` argument or filled in as defaults.\n\n[`collation`](#collation)\n\nThe value requested using the Unicode extension key `\"co\"`, if it is supported for `locale`, or `\"default\"`.\n\n[`numeric`](#numeric), `caseFirst`\n\nThe values requested for these properties in the `options` argument or using the Unicode extension keys `\"kn\"` and `\"kf\"` or filled in as defaults. If the implementation does not support these properties, they are omitted.\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions method](#using_the_resolvedoptions_method)\n\n```\nconst de = new Intl.Collator(\"de\", { sensitivity: \"base\" });\nconst usedOptions = de.resolvedOptions();\n\nusedOptions.locale; // \"de\"\nusedOptions.usage; // \"sort\"\nusedOptions.sensitivity; // \"base\"\nusedOptions.ignorePunctuation; // false\nusedOptions.collation; // \"default\"\nusedOptions.numeric; // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.collator.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.collator.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Collator.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.Collator instances returns a new object with properties reflecting the locale and collation options\n  computed during initialization of this collator object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRangeToParts",
    "markdown": "# Intl.DateTimeFormat.prototype.formatRangeToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatRangeToParts()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances returns an array of locale-specific tokens representing each part of the formatted date range produced by this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nformatRangeToParts(startDate, endDate)\n```\n\n## [Examples](#examples)\n\n### [Basic formatRangeToParts usage](#basic_formatrangetoparts_usage)\n\nThis method receives two [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)s and returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the _locale-specific_ tokens representing each part of the formatted date range.\n\n**Note:** The return values shown in your locale may differ from those listed below.\n\n```\nconst date1 = new Date(Date.UTC(1906, 0, 10, 10, 0, 0)); // Wed, 10 Jan 1906 10:00:00 GMT\nconst date2 = new Date(Date.UTC(1906, 0, 10, 11, 0, 0)); // Wed, 10 Jan 1906 11:00:00 GMT\n\nconst fmt = new Intl.DateTimeFormat(\"en\", {\n  hour: \"numeric\",\n  minute: \"numeric\",\n});\n\nconsole.log(fmt.formatRange(date1, date2)); // '10:00 – 11:00 AM'\n\nfmt.formatRangeToParts(date1, date2);\n// [\n//   { type: 'hour',      value: '10',  source: \"startRange\" },\n//   { type: 'literal',   value: ':',   source: \"startRange\" },\n//   { type: 'minute',    value: '00',  source: \"startRange\" },\n//   { type: 'literal',   value: ' – ', source: \"shared\"     },\n//   { type: 'hour',      value: '11',  source: \"endRange\"   },\n//   { type: 'literal',   value: ':',   source: \"endRange\"   },\n//   { type: 'minute',    value: '00',  source: \"endRange\"   },\n//   { type: 'literal',   value: ' ',   source: \"shared\"     },\n//   { type: 'dayPeriod', value: 'AM',  source: \"shared\"     }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DateTimeFormat.prototype.formatRangeToParts](https://tc39.es/ecma402/#sec-Intl.DateTimeFormat.prototype.formatRangeToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DateTimeFormat.prototype.formatRangeToParts() - JavaScript | MDN",
    "description": "The formatRangeToParts() method of Intl.DateTimeFormat instances returns an array of locale-specific tokens representing each part of the formatted date\n  range produced by this Intl.DateTimeFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange",
    "markdown": "# Intl.DateTimeFormat.prototype.formatRange() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatRange()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances formats a date range in the most concise way based on the locales and options provided when instantiating this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nformatRange(startDate, endDate)\n```\n\n### [Parameters](#parameters)\n\n[`startDate`](#startdate)\n\nA [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object representing the start of the date range.\n\n[`endDate`](#enddate)\n\nA [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object representing the end of the date range.\n\n### [Return value](#return_value)\n\nA string representing the given date range formatted according to the locale and formatting options of this [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object.\n\n## [Examples](#examples)\n\n### [Basic formatRange usage](#basic_formatrange_usage)\n\nThis method receives two [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)s and formats the date range in the most concise way based on the `locale` and `options` provided when instantiating [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\n\n```\nconst date1 = new Date(Date.UTC(1906, 0, 10, 10, 0, 0)); // Wed, 10 Jan 1906 10:00:00 GMT\nconst date2 = new Date(Date.UTC(1906, 0, 10, 11, 0, 0)); // Wed, 10 Jan 1906 11:00:00 GMT\nconst date3 = new Date(Date.UTC(1906, 0, 20, 10, 0, 0)); // Sat, 20 Jan 1906 10:00:00 GMT\n\nconst fmt1 = new Intl.DateTimeFormat(\"en\", {\n  year: \"2-digit\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n});\nconsole.log(fmt1.format(date1)); // '1/10/06, 10:00 AM'\nconsole.log(fmt1.formatRange(date1, date2)); // '1/10/06, 10:00 – 11:00 AM'\nconsole.log(fmt1.formatRange(date1, date3)); // '1/10/06, 10:00 AM – 1/20/07, 10:00 AM'\n\nconst fmt2 = new Intl.DateTimeFormat(\"en\", {\n  year: \"numeric\",\n  month: \"short\",\n  day: \"numeric\",\n});\nconsole.log(fmt2.format(date1)); // 'Jan 10, 1906'\nconsole.log(fmt2.formatRange(date1, date2)); // 'Jan 10, 1906'\nconsole.log(fmt2.formatRange(date1, date3)); // 'Jan 10 – 20, 1906'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.datetimeformat.prototype.formatRange](https://tc39.es/ecma402/#sec-intl.datetimeformat.prototype.formatRange) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DateTimeFormat.prototype.formatRange() - JavaScript | MDN",
    "description": "The formatRange() method of Intl.DateTimeFormat instances formats a\n  date range in the most concise way based on the locales and\n  options provided when instantiating this\n  Intl.DateTimeFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format",
    "markdown": "# Intl.DateTimeFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`format()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances formats a date according to the locale and formatting options of this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nA string representing the given `date` formatted according to the locale and formatting options of this [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nUse the `format` getter function for formatting a single date, here for Serbia:\n\n```\nconst options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconst dateTimeFormat = new Intl.DateTimeFormat(\"sr-RS\", options);\nconsole.log(dateTimeFormat.format(new Date()));\n// \"недеља, 7. април 2013.\"\n```\n\n### [Using format with map](#using_format_with_map)\n\nUse the `format` getter function for formatting all dates in an array. Note that the function is bound to the [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) from which it was obtained, so it can be passed directly to [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\n```\nconst a = [new Date(2012, 8), new Date(2012, 11), new Date(2012, 3)];\nconst options = { year: \"numeric\", month: \"long\" };\nconst dateTimeFormat = new Intl.DateTimeFormat(\"pt-BR\", options);\nconst formatted = a.map(dateTimeFormat.format);\nconsole.log(formatted.join(\"; \"));\n// \"setembro de 2012; dezembro de 2012; abril de 2012\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.datetimeformat.prototype.format](https://tc39.es/ecma402/#sec-intl.datetimeformat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DateTimeFormat.prototype.format() - JavaScript | MDN",
    "description": "The format() method of Intl.DateTimeFormat instances formats a date according to the locale and formatting options of this Intl.DateTimeFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/supportedLocalesOf",
    "markdown": "# Intl.Collator.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Collator.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.Collator.supportedLocalesOf(locales)\nIntl.Collator.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in collation, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is not used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.Collator.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.collator.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.collator.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Collator.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.Collator.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions",
    "markdown": "# Intl.DateTimeFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the options computed during the initialization of the given [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object. The object has the following properties, in the order they are listed:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. Only the `ca`, `hc`, and `nu` Unicode extension keys may be included in the output.\n\n[`calendar`](#calendar)\n\nOne of the [supported calendar types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types), reflecting the value provided for this property in the `options` argument or the `ca` Unicode extension key. The default is locale dependent.\n\n[`numberingSystem`](#numberingsystem)\n\nOne of the [supported numbering system types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types), reflecting the value provided for this property in the `options` argument or the `nu` Unicode extension key. The default is locale dependent.\n\n[`timeZone`](#timezone)\n\nOne of the [IANA time zone names](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones), reflecting the value provided for this property in the `options` argument. The default is the runtime's default time zone; should never be `undefined`.\n\n**Note:** While the IANA database changes from time to time, the Unicode CLDR database (which browsers use) keeps old time zone names for stability purposes. All browsers canonicalize time zone names, but in different directions. For example, `new Intl.DateTimeFormat(\"en-US\", { timeZone: \"Europe/Kiev\" }).resolvedOptions().timeZone` and `new Intl.DateTimeFormat(\"en-US\", { timeZone: \"Europe/Kyiv\" }).resolvedOptions().timeZone` will return the same string in the same browser, but maybe different strings in different browsers. See [`Intl.Locale.prototype.getTimeZones`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones) for more information.\n\n[`hourCycle`](#hourcycle)\n\nThe value provided for this property in the `options` argument, or provided in the Unicode extension key `\"hc\"`, with default filled in as needed. Only present if the `options` argument included `hour` or `timeStyle`.\n\n[`hour12`](#hour12)\n\nThe value provided for this property in the `options` argument, or computed from the `hourCycle` property. Only present if the `options` argument included `hour` or `timeStyle`.\n\n[`weekday`](#weekday), `era`, `year`, `month`, `day`, `dayPeriod`, `hour`, `minute`, `second`, `fractionalSecondDigits`, `timeZoneName`\n\nThe values resulting from format matching between the corresponding properties in the `options` argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output. If the `dateStyle` or `timeStyle` shortcuts were used in `options`, these individual component properties will never be present.\n\n[`dateStyle`](#datestyle), `timeStyle`\n\nThe values provided for these properties in the `options` argument, if any.\n\n## [Description](#description)\n\nAlthough `dateStyle` and `timeStyle` are shortcuts for individual date and time component styles, the exact (locale dependent) component styles they resolve to are not included in the resolved options. This ensures the result of `resolvedOptions()` can be passed directly to the `Intl.DateTimeFormat()` constructor (because an `options` object with both `dateStyle` or `timeStyle` and individual date or time component styles is not valid).\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions method](#using_the_resolvedoptions_method)\n\n```\nconst germanFakeRegion = new Intl.DateTimeFormat(\"de-XX\", { timeZone: \"UTC\" });\nconst usedOptions = germanFakeRegion.resolvedOptions();\n\nusedOptions.locale; // \"de\" (because \"de-XX\" does not exist)\nusedOptions.calendar; // \"gregory\"\nusedOptions.numberingSystem; // \"latn\"\nusedOptions.timeZone; // \"UTC\"\nusedOptions.month; // \"numeric\"\n```\n\n### [Getting the user's time zone and locale preferences](#getting_the_users_time_zone_and_locale_preferences)\n\nThe `Intl.DateTimeFormat` constructor without any options uses the current system settings. You can use `resolvedOptions()` to get the user's current time zone and locale's preferred calendar and numbering system:\n\n```\nconst systemOptions = new Intl.DateTimeFormat().resolvedOptions();\nsystemOptions.timeZone; // e.g., \"Europe/Brussels\" or \"Asia/Riyadh\"\nsystemOptions.calendar; // e.g., \"gregory\" or \"islamic-umalqura\"\nsystemOptions.numberingSystem; // e.g., \"latn\" or \"arab\"\nsystemOptions.locale; // e.g., \"nl-BE\" or \"ar-SA\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.datetimeformat.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.datetimeformat.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DateTimeFormat.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.DateTimeFormat instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this Intl.DateTimeFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts",
    "markdown": "# Intl.DateTimeFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatToParts()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances allows locale-aware formatting of strings produced by this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`date`](#date) Optional\n\nThe date to format.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted date in parts.\n\n## [Description](#description)\n\nThe `formatToParts()` method is useful for custom formatting of date strings. It returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the `formatToParts()` method returns, looks like this:\n\n```\n[\n  { type: \"day\", value: \"17\" },\n  { type: \"weekday\", value: \"Monday\" },\n];\n```\n\nPossible types are the following:\n\n[`day`](#day)\n\nThe string used for the day, for example `\"17\"`.\n\n[`dayPeriod`](#dayperiod)\n\nThe string used for the day period, for example, `\"AM\"`, `\"PM\"`, `\"in the morning\"`, or `\"noon\"`\n\n[`era`](#era)\n\nThe string used for the era, for example `\"BC\"` or `\"AD\"`.\n\n[`fractionalSecond`](#fractionalsecond)\n\nThe string used for the fractional seconds, for example `\"0\"` or `\"00\"` or `\"000\"`.\n\n[`hour`](#hour)\n\nThe string used for the hour, for example `\"3\"` or `\"03\"`.\n\n[`literal`](#literal)\n\nThe string used for separating date and time values, for example `\"/\"`, `\",\"`, `\"o'clock\"`, `\"de\"`, etc.\n\n[`minute`](#minute)\n\nThe string used for the minute, for example `\"00\"`.\n\n[`month`](#month)\n\nThe string used for the month, for example `\"12\"`.\n\nThe string used for the related 4-digit Gregorian year, in the event that the calendar's representation would be a yearName instead of a year, for example `\"2019\"`.\n\n[`second`](#second)\n\nThe string used for the second, for example `\"07\"` or `\"42\"`.\n\n[`timeZoneName`](#timezonename)\n\nThe string used for the name of the time zone, for example `\"UTC\"`. Default is the timezone of the current environment.\n\n[`weekday`](#weekday)\n\nThe string used for the weekday, for example `\"M\"`, `\"Monday\"`, or `\"Montag\"`.\n\n[`year`](#year)\n\nThe string used for the year, for example `\"2012\"` or `\"96\"`.\n\n[`yearName`](#yearname)\n\nThe string used for the yearName in relevant contexts, for example `\"geng-zi\"`\n\n## [Examples](#examples)\n\n`DateTimeFormat` outputs localized, opaque strings that cannot be manipulated directly:\n\n```\nconst date = Date.UTC(2012, 11, 17, 3, 0, 42);\n\nconst formatter = new Intl.DateTimeFormat(\"en-us\", {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  fractionalSecondDigits: 3,\n  hour12: true,\n  timeZone: \"UTC\",\n});\n\nformatter.format(date);\n// \"Monday, 12/17/2012, 3:00:42.000 AM\"\n```\n\nHowever, in many User Interfaces there is a desire to customize the formatting of this string. The `formatToParts` method enables locale-aware formatting of strings produced by `DateTimeFormat` formatters by providing you the string in parts:\n\n```\nformatter.formatToParts(date);\n\n// return value:\n[\n  { type: \"weekday\", value: \"Monday\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"month\", value: \"12\" },\n  { type: \"literal\", value: \"/\" },\n  { type: \"day\", value: \"17\" },\n  { type: \"literal\", value: \"/\" },\n  { type: \"year\", value: \"2012\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"hour\", value: \"3\" },\n  { type: \"literal\", value: \":\" },\n  { type: \"minute\", value: \"00\" },\n  { type: \"literal\", value: \":\" },\n  { type: \"second\", value: \"42\" },\n  { type: \"fractionalSecond\", value: \"000\" },\n  { type: \"literal\", value: \" \" },\n  { type: \"dayPeriod\", value: \"AM\" },\n];\n```\n\nNow the information is available separately and it can be formatted and concatenated again in a customized way. For example by using [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), a [switch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch), [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), and [`Array.prototype.join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).\n\n```\nconst dateString = formatter\n  .formatToParts(date)\n  .map(({ type, value }) => {\n    switch (type) {\n      case \"dayPeriod\":\n        return `<em>${value}</em>`;\n      default:\n        return value;\n    }\n  })\n  .join(\"\");\n```\n\nThis will emphasize the day period when using the `formatToParts()` method.\n\n```\nconsole.log(formatter.format(date));\n// \"Monday, 12/17/2012, 3:00:42.000 AM\"\n\nconsole.log(dateString);\n// \"Monday, 12/17/2012, 3:00:42.000 <em>AM</em>\"\n```\n\n### [Named Years and Mixed calendars](#named_years_and_mixed_calendars)\n\nIn some cases, calendars use named years. Chinese and Tibetan calendars, for example, use a 60-year [sexagenary cycle](https://en.wikipedia.org/wiki/Sexagenary_cycle) of named years. These years are disambiguated by relationship to corresponding years on the Gregorian calendar. When this is the case, the result of `formatToParts()` will contain an entry for `relatedYear` when a year would normally be present, containing the 4-digit Gregorian year, instead of an entry for `year`. Setting an entry in the bag for `year` (with any value) will yield both the and the `yearName` Gregorian `relatedYear`:\n\n```\nconst opts = { year: \"numeric\", month: \"numeric\", day: \"numeric\" };\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\", opts);\ndf.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42));\n\n// return value\n[\n  { type: \"relatedYear\", value: \"2012\" },\n  { type: \"literal\", value: \"年\" },\n  { type: \"month\", value: \"十一月\" },\n  { type: \"day\", value: \"4\" },\n];\n```\n\nIf the `year` option is not set in the bag (to any value), the result will include only the `relatedYear`:\n\n```\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\");\ndf.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42));\n\n// return value\n[\n  { type: \"relatedYear\", value: \"2012\" },\n  { type: \"literal\", value: \"年\" },\n  { type: \"month\", value: \"十一月\" },\n  { type: \"day\", value: \"4\" },\n];\n```\n\nIn cases where the `year` would be output, `.format()` may commonly present these side-by-side:\n\n```\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\", { year: \"numeric\" });\ndf.format(Date.UTC(2012, 11, 17, 3, 0, 42)); // 2012壬辰年\n```\n\nThis also makes it possible to mix locale and calendar in both `format`:\n\n```\nconst df = new Intl.DateTimeFormat(\"en-u-ca-chinese\", { year: \"numeric\" });\nconst date = Date.UTC(2012, 11, 17, 3, 0, 42);\ndf.format(date); // 2012(ren-chen)\n```\n\nAnd `formatToParts`:\n\n```\nconst opts = { month: \"numeric\", day: \"numeric\", year: \"numeric\" };\nconst df = new Intl.DateTimeFormat(\"en-u-ca-chinese\", opts);\nconst date = Date.UTC(2012, 11, 17, 3);\ndf.formatToParts(date);\n// [\n//   { type: 'month', value: '11' },\n//   { type: 'literal', value: '/' },\n//   { type: 'day', value: '4' },\n//   { type: 'literal', value: '/' },\n//   { type: 'relatedYear', value: '2012' }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DateTimeFormat.prototype.formatToParts](https://tc39.es/ecma402/#sec-Intl.DateTimeFormat.prototype.formatToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DateTimeFormat.prototype.formatToParts() - JavaScript | MDN",
    "description": "The formatToParts() method of Intl.DateTimeFormat instances allows locale-aware formatting of strings produced by this Intl.DateTimeFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/DurationFormat",
    "markdown": "# Intl.DurationFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`Intl.DurationFormat()`** constructor creates [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Intl.DurationFormat()\nnew Intl.DurationFormat(locales)\nnew Intl.DurationFormat(locales, options)\n```\n\n**Note:** `Intl.DurationFormat()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension key is allowed:\n\n[`nu`](#nu)\n\nSee [`numberingSystem`](#numberingsystem).\n\nThis key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`style`](#style)\n\nThe style of the formatted duration. Possible values are:\n\n[`\"long\"`](#long)\n\nE.g., 1 hour and 50 minutes\n\n[`\"short\"`](#short) (default)\n\nE.g., 1 hr, 50 min\n\n[`\"narrow\"`](#narrow)\n\nE.g., 1h 50m\n\n[`\"digital\"`](#digital)\n\nE.g., 1:50:00\n\n[`years`](#years)\n\nThe style of the formatted years. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n\n[`yearsDisplay`](#yearsdisplay)\n\nWhether to always display years, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `years` is unspecified, and `\"always\"` otherwise.\n\n[`months`](#months)\n\nThe style of the formatted months. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n\n[`monthsDisplay`](#monthsdisplay)\n\nWhether to always display months, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `months` is unspecified, and `\"always\"` otherwise.\n\n[`weeks`](#weeks)\n\nThe style of the formatted weeks. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n\n[`weeksDisplay`](#weeksdisplay)\n\nWhether to always display weeks, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `weeks` is unspecified, and `\"always\"` otherwise.\n\n[`days`](#days)\n\nThe style of the formatted days. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n\n[`daysDisplay`](#daysdisplay)\n\nWhether to always display days, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `days` is unspecified, and `\"always\"` otherwise.\n\n[`hours`](#hours)\n\nThe style of the formatted hours. Possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`hoursDisplay`](#hoursdisplay)\n\nWhether to always display hours, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `hours` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n\n[`minutes`](#minutes)\n\nThe style of the formatted minutes.\n\n*   If `hours` is `\"numeric\"` or `\"2-digit\"`, possible values are `\"numeric\"` and `\"2-digit\"`, and `\"numeric\"` is normalized to `\"2-digit\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`minutesDisplay`](#minutesdisplay)\n\nWhether to always display minutes, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `minutes` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n\n[`seconds`](#seconds)\n\nThe style of the formatted seconds.\n\n*   If `minutes` is `\"numeric\"` or `\"2-digit\"`, possible values are `\"numeric\"` and `\"2-digit\"`, and `\"numeric\"` is normalized to `\"2-digit\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`secondsDisplay`](#secondsdisplay)\n\nWhether to always display seconds, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `seconds` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n\n[`milliseconds`](#milliseconds)\n\nThe style of the formatted milliseconds.\n\n*   If `seconds` is `\"numeric\"` or `\"2-digit\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`millisecondsDisplay`](#millisecondsdisplay)\n\nWhether to always display milliseconds, or only if nonzero.\n\n*   If `seconds` is `\"numeric\"` or `\"2-digit\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `milliseconds` is unspecified.\n*   Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `milliseconds` is unspecified, and `\"always\"` otherwise.\n\n[`microseconds`](#microseconds)\n\nThe style of the formatted microseconds.\n\n*   If `milliseconds` is `\"numeric\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`microsecondsDisplay`](#microsecondsdisplay)\n\nWhether to always display microseconds, or only if nonzero.\n\n*   If `milliseconds` is `\"numeric\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `microseconds` is unspecified.\n*   Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `microseconds` is unspecified, and `\"always\"` otherwise.\n\n[`nanoseconds`](#nanoseconds)\n\nThe style of the formatted nanoseconds.\n\n*   If `microseconds` is `\"numeric\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`nanosecondsDisplay`](#nanosecondsdisplay)\n\nWhether to always display nanoseconds, or only if nonzero.\n\n*   If `microseconds` is `\"numeric\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `nanoseconds` is unspecified.\n*   Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `nanoseconds` is unspecified, and `\"always\"` otherwise.\n\n[`fractionalDigits`](#fractionaldigits)\n\nNumber of how many fractional second digits to display in the output. Possible values are from `0` to `9`; the default is `undefined` (include as many fractional digits as necessary).\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Description](#description)\n\nFor each time segment, an [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object is constructed under the hood. It uses the following options (see [`Intl.NumberFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) for details):\n\n*   `numberingSystem`: the value of `options.numberingSystem`\n\nWhen `milliseconds`, `microseconds`, or `nanoseconds` uses the `\"numeric\"` style, the following options are also used:\n\n*   `minimumFractionDigits`: `0` when `options.fractionalDigits` is `undefined`, `options.fractionalDigits` otherwise\n*   `maximumFractionDigits`: `9` when `options.fractionalDigits` is `undefined`, `options.fractionalDigits` otherwise\n*   `roundingMode`: `\"trunc\"`\n\nWhen the time segment uses the `\"2-digit\"` style, the following options are also used:\n\n*   `minimumIntegerDigits`: `2`\n\nWhen the time segment uses the `\"long\"`, `\"short\"`, or `\"narrow\"` style, the following options are also used:\n\n*   `style`: `\"unit\"` when `\"long\"`, `\"short\"`, or `\"narrow\"` is specified, `undefined` otherwise\n*   `unit`: the currently formatted unit (`\"years\"`, `\"days\"`, `\"nanoseconds\"`, etc.)\n*   `unitDisplay`: the value of the time segment style (`\"long\"`, `\"short\"`, or `\"narrow\"`)\n\n## [Examples](#examples)\n\n### [Using the Intl.DurationFormat() constructor](#using_the_intl.durationformat_constructor)\n\n```\nconst duration = {\n  hours: 2,\n  minutes: 20,\n  seconds: 35,\n};\n\nconsole.log(new Intl.DurationFormat(\"pt\", { style: \"long\" }).format(duration));\n// \"2 horas, 20 minutos e 35 segundos\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-intl-durationformat-constructor](https://tc39.es/proposal-intl-duration-format/#sec-intl-durationformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DurationFormat() constructor - JavaScript | MDN",
    "description": "The Intl.DurationFormat() constructor creates Intl.DurationFormat objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/supportedLocalesOf",
    "markdown": "# Intl.DurationFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`Intl.DurationFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in duration formatting without having to fall back to the runtime's default locale.\n\n## [Syntax](#syntax)\n\n```\nIntl.DurationFormat.supportedLocalesOf(locales)\nIntl.DurationFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in duration formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in duration formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to duration formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DurationFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-Intl.DurationFormat.supportedLocalesOf](https://tc39.es/proposal-intl-duration-format/#sec-Intl.DurationFormat.supportedLocalesOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DurationFormat.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.DurationFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in duration formatting without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of",
    "markdown": "# Intl.DisplayNames.prototype.of() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`of()`** method of [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) instances receives a code and returns a string based on the locale and options provided when instantiating this `Intl.DisplayNames` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`code`](#code)\n\nThe `code` to provide depends on the `type`:\n\n*   If the type is \"region\", `code` should be either an [two-letter ISO 3166 region code](https://www.iso.org/iso-3166-country-codes.html), or a [three-digit UN M49 geographic region](https://unstats.un.org/unsd/methodology/m49/). It is required to follow the [`unicode_region_subtag`](https://unicode.org/reports/tr35/#unicode_region_subtag) grammar.\n*   If the type is \"script\", `code` should be an [four-letter ISO 15924 script code](https://unicode.org/iso15924/iso15924-codes.html). It is required to follow the [`unicode_script_subtag`](https://unicode.org/reports/tr35/#unicode_script_subtag) grammar.\n*   If the type is \"language\", `code` should be a _languageCode_ \\[\"-\" _scriptCode_\\] \\[\"-\" _regionCode_ \\] \\*(\"-\" _variant_ ) subsequence of the [`unicode_language_id`](https://unicode.org/reports/tr35/#Unicode_language_identifier) grammar. _languageCode_ is either a two-letter ISO 639-1 language code or a three-letter ISO 639-2 language code.\n*   If the type is \"currency\", `code` should be a [three-letter ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). It is required to have exactly three alphabetic characters.\n*   If the type is \"dateTimeField\", `code` should be one of: `\"era\"`, `\"year\"`, `\"quarter\"`, `\"month\"`, `\"weekOfYear\"`, `\"weekday\"`, `\"day\"`, `\"dayPeriod\"`, `\"hour\"`, `\"minute\"`, `\"second\"`, `\"timeZoneName\"`.\n*   If the type is \"calendar\", `code` should be a [calendar key](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar). It is required to follow the `type` grammar of a [Unicode locale identifier](https://unicode.org/reports/tr35/#32-unicode-locale-identifier).\n\n### [Return value](#return_value)\n\nA language-specific formatted string, or `undefined` if there's no data for the input and `fallback` is `\"none\"`.\n\n**Note:** `fallback` is only used if `code` is structurally valid. See [using fallback](#using_fallback).\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `code` is not structurally valid for the given `type`.\n\n## [Examples](#examples)\n\n### [Using the of method](#using_the_of_method)\n\n```\nconst regionNames = new Intl.DisplayNames(\"en\", { type: \"region\" });\nregionNames.of(\"419\"); // \"Latin America\"\n\nconst languageNames = new Intl.DisplayNames(\"en\", { type: \"language\" });\nlanguageNames.of(\"fr\"); // \"French\"\n\nconst currencyNames = new Intl.DisplayNames(\"en\", { type: \"currency\" });\ncurrencyNames.of(\"EUR\"); // \"Euro\"\n```\n\n### [Using fallback](#using_fallback)\n\nWhen the `Intl.DisplayNames` is constructed with `fallback: \"code\"`, the `of()` method will return the `code` if the input looks structurally valid but there's no data for the input. If `fallback` is `\"none\"`, `undefined` is returned.\n\n```\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"code\" }).of(\"ZL\"),\n); // \"ZL\"\n\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"none\" }).of(\"ZL\"),\n); // undefined\n```\n\nHowever, this only applies if the `code` is structurally valid. For example, if `type` is `\"region\"` but `code` does not follow the `unicode_region_subtag` grammar (2 alphabetic characters or 3 numeric characters), a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is directly thrown instead of using the fallback.\n\n```\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"code\" }).of(\"ZLC\"),\n); // throws RangeError: invalid value \"ZLC\" for option region\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DisplayNames.prototype.of](https://tc39.es/ecma402/#sec-Intl.DisplayNames.prototype.of) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DisplayNames.prototype.of() - JavaScript | MDN",
    "description": "The of() method of Intl.DisplayNames instances receives a code and returns a string based on the locale and options provided when instantiating this Intl.DisplayNames object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/resolvedOptions",
    "markdown": "# Intl.DurationFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`resolvedOptions()`** method of [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) object.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and date and time formatting options computed during the initialization of the given [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object.\n\n## [Description](#description)\n\nThe resulting object has the following properties:\n\n[`locale`](#locale)\n\nThe [BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646) for the locale used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`style`](#style)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"digital\"` identifying the duration formatting style used.\n\n[`years`](#years)\n\nOne of the strings `\"long\"`, `\"short\"`, or `\"narrow\"` identifying the formatting style used for the `years` field.\n\n[`yearsDisplay`](#yearsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `years` field.\n\n[`months`](#months)\n\nOne of the strings `\"long\"`, `\"short\"`, `and \"narrow\"` identifying the formatting style used for the `months` field.\n\n[`monthsDisplay`](#monthsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `months` field.\n\n[`weeks`](#weeks)\n\nOne of the strings `\"long\"`, `\"short\"`, `and \"narrow\"` identifying the formatting style used for the `weeks` field.\n\n[`weeksDisplay`](#weeksdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `weeks` field.\n\n[`days`](#days)\n\nOne of the strings `\"long\"`, `\"short\"`, and `\"narrow\"` identifying the formatting style used for the `days` field.\n\n[`daysDisplay`](#daysdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `days` field.\n\n[`hours`](#hours)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `hours` field.\n\n[`hoursDisplay`](#hoursdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `hours` field.\n\n[`minutes`](#minutes)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `minutes` field.\n\n[`minutesDisplay`](#minutesdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `minutes` field.\n\n[`seconds`](#seconds)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `seconds` field.\n\n[`secondsDisplay`](#secondsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `seconds` field.\n\n[`milliseconds`](#milliseconds)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `milliseconds` field.\n\n[`millisecondsDisplay`](#millisecondsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `millisecondsDisplay` field.\n\n[`microseconds`](#microseconds)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `microseconds` field.\n\n[`microsecondsDisplay`](#microsecondsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `microsecondsDisplay` field.\n\n[`nanoseconds`](#nanoseconds)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `nanoseconds` field.\n\n[`nanosecondsDisplay`](#nanosecondsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `nanosecondsDisplay` field.\n\n[`fractionalDigits`](#fractionaldigits)\n\nA number, identifying the number of fractional digits used with numeric styles.\n\n[`numberingSystem`](#numberingsystem)\n\nThe value provided for this property in the options argument, if present, or the value requested using the Unicode extension key `nu` or filled in as a default.\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions method](#using_the_resolvedoptions_method)\n\n```\nconst duration = new Intl.DurationFormat(\"en\");\nconst usedOptions = duration.resolvedOptions();\n\nusedOptions.locale; // \"en\"\nusedOptions.numberingSystem; // \"latn\"\nusedOptions.years; // \"long\"\nusedOptions.yearsDisplay; // \"auto\"\nusedOptions.style; // \"long\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-Intl.DurationFormat.prototype.resolvedOptions](https://tc39.es/proposal-intl-duration-format/#sec-Intl.DurationFormat.prototype.resolvedOptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DurationFormat.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.DurationFormat instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this Intl.DurationFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/formatToParts",
    "markdown": "# Intl.DurationFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`formatToParts()`** method of [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) instances allows locale-aware formatting of strings produced by [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) formatters.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`duration`](#duration) Optional\n\nThe duration object to be formatted. It should include some or all of the following properties: `\"months\"`, `\"weeks\"`, `\"days\"`, `\"hours\"`, `\"minutes\"`, `\"seconds\"`, `\"milliseconds\"`, `\"microseconds\"`, `\"nanoseconds\"`.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted duration in parts.\n\n## [Description](#description)\n\nThe `formatToParts()` method is useful for custom formatting of duration objects. It returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the `formatToParts()` method returns, looks like this:\n\n```\n[\n  { type: \"integer\", value: \"7\", unit: \"hour\" },\n  { type: \"literal\", value: \" \", unit: \"hour\" },\n  { type: \"unit\", value: \"hr\", unit: \"hour\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"8\", unit: \"minute\" },\n  { type: \"literal\", value: \" \", unit: \"minute\" },\n  { type: \"unit\", value: \"min\", unit: \"minute\" },\n];\n```\n\n## [Examples](#examples)\n\nThe `formatToParts` method enables locale-aware formatting of strings produced by `DurationFormat` formatters by providing you the string in parts:\n\n```\nconst duration = {\n  hours: 7,\n  minutes: 8,\n  seconds: 9,\n  milliseconds: 123,\n  microseconds: 456,\n  nanoseconds: 789,\n};\n\nnew Intl.DurationFormat(\"en\", { style: \"long\" }).formatToParts(duration);\n\n// Returned value:\n[\n  { type: \"integer\", value: \"7\", unit: \"hour\" },\n  { type: \"literal\", value: \" \", unit: \"hour\" },\n  { type: \"unit\", value: \"hours\", unit: \"hour\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"8\", unit: \"minute\" },\n  { type: \"literal\", value: \" \", unit: \"minute\" },\n  { type: \"unit\", value: \"minutes\", unit: \"minute\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"9\", unit: \"second\" },\n  { type: \"literal\", value: \" \", unit: \"second\" },\n  { type: \"unit\", value: \"seconds\", unit: \"second\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"123\", unit: \"millisecond\" },\n  { type: \"literal\", value: \" \", unit: \"millisecond\" },\n  { type: \"unit\", value: \"milliseconds\", unit: \"millisecond\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"456\", unit: \"microsecond\" },\n  { type: \"literal\", value: \" \", unit: \"microsecond\" },\n  { type: \"unit\", value: \"microseconds\", unit: \"microsecond\" },\n  { type: \"literal\", value: \" and \" },\n  { type: \"integer\", value: \"789\", unit: \"nanosecond\" },\n  { type: \"literal\", value: \" \", unit: \"nanosecond\" },\n  { type: \"unit\", value: \"nanoseconds\", unit: \"nanosecond\" },\n];\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-Intl.DurationFormat.prototype.formatToParts](https://tc39.es/proposal-intl-duration-format/#sec-Intl.DurationFormat.prototype.formatToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DurationFormat.prototype.formatToParts() - JavaScript | MDN",
    "description": "The formatToParts() method of Intl.DurationFormat instances allows locale-aware formatting of strings produced by Intl.DurationFormat formatters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/supportedLocalesOf",
    "markdown": "# Intl.DisplayNames.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DisplayNames.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime's default locale.\n\n## [Syntax](#syntax)\n\n```\nIntl.DisplayNames.supportedLocalesOf(locales)\nIntl.DisplayNames.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in display names without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in display names, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to display names nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DisplayNames.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DisplayNames.supportedLocalesOf](https://tc39.es/ecma402/#sec-Intl.DisplayNames.supportedLocalesOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DisplayNames.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.DisplayNames.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/format",
    "markdown": "# Intl.DurationFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`format()`** method of [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) instances formats a duration according to the locale and formatting options of this [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) object.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`duration`](#duration)\n\nThe duration object to be formatted. It should include some or all of the following properties: `months`, `weeks`, `days`, `hours`, `minutes`, `seconds`, `milliseconds`, `microseconds`, `nanoseconds`.\n\n### [Return value](#return_value)\n\nA string representing the given `duration` formatted according to the locale and formatting options of this [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) object.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using format()](#using_format)\n\nThe following example shows how to create a Duration formatter using the English language.\n\n```\nconst duration = {\n  years: 1,\n  months: 2,\n  weeks: 3,\n  days: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7,\n  microseconds: 8,\n  nanoseconds: 9,\n};\n\n// Without options, style defaults to \"short\"\nnew Intl.DurationFormat(\"en\").format(duration);\n// \"1 yr, 2 mths, 3 wks, 3 days, 4 hr, 5 min, 6 sec, 7 ms, 8 μs, 9 ns\"\n\n// With style set to \"long\"\nnew Intl.DurationFormat(\"en\", { style: \"long\" }).format(duration);\n// \"1 year, 2 months, 3 weeks, 3 days, 4 hours, 5 minutes, 6 seconds, 7 milliseconds, 8 microseconds, 9 nanoseconds\"\n\n// With style set to \"narrow\"\nnew Intl.DurationFormat(\"en\", { style: \"narrow\" }).format(duration);\n// \"1y 2mo 3w 3d 4h 5m 6s 7ms 8μs 9ns\"\n```\n\n### [Using format() with different locales and styles](#using_format_with_different_locales_and_styles)\n\n```\nconst duration = {\n  hours: 1,\n  minutes: 46,\n  seconds: 40,\n};\n\n// With style set to \"long\" and locale \"fr-FR\"\nnew Intl.DurationFormat(\"fr-FR\", { style: \"long\" }).format(duration);\n// \"1 heure, 46 minutes et 40 secondes\"\n\n// With style set to \"short\" and locale set to \"en\"\nnew Intl.DurationFormat(\"en\", { style: \"short\" }).format(duration);\n// \"1 hr, 46 min and 40 sec\"\n\n// With style set to \"short\" and locale set to \"pt\"\nnew Intl.DurationFormat(\"pt\", { style: \"narrow\" }).format(duration);\n// \"1h 46min 40s\"\n\n// With style set to \"digital\" and locale set to \"en\"\nnew Intl.DurationFormat(\"en\", { style: \"digital\" }).format(duration);\n// \"1:46:40\"\n\n// With style set to \"digital\", locale set to \"en\", and hours set to \"long\"\nnew Intl.DurationFormat(\"en\", { style: \"digital\", hours: \"long\" }).format(\n  duration,\n);\n// \"1 hour, 46:40\"\n```\n\n### [Using format() with the fractionalDigits option](#using_format_with_the_fractionaldigits_option)\n\n```\nconst duration = {\n  hours: 11,\n  minutes: 30,\n  seconds: 12,\n  milliseconds: 345,\n  microseconds: 600,\n};\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\" }).format(duration);\n// \"11:30:12.3456\"\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\", fractionalDigits: 5 }).format(\n  duration,\n);\n// \"11:30:12.34560\"\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\", fractionalDigits: 3 }).format(\n  duration,\n);\n// \"11:30:12.346\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-Intl.DurationFormat.prototype.format](https://tc39.es/proposal-intl-duration-format/#sec-Intl.DurationFormat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DurationFormat.prototype.format() - JavaScript | MDN",
    "description": "The format() method of Intl.DurationFormat instances formats a duration according to the locale and formatting options of this Intl.DurationFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/DisplayNames",
    "markdown": "# Intl.DisplayNames() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DisplayNames()`** constructor creates [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.DisplayNames(locales, options)\n```\n\n**Note:** `Intl.DisplayNames()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options)\n\nAn object containing the following properties, in the order they are retrieved:\n\n[`localeMatcher`](#localematcher) Optional\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`style`](#style) Optional\n\nThe formatting style to use. Possible values are `\"narrow\"`, `\"short\"`, and `\"long\"`; the default is `\"long\"`.\n\n[`type`](#type)\n\nThe type of display names to return from [`of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of). Possible values are `\"language\"`, `\"region\"`, `\"script\"`, `\"currency\"`, `\"calendar\"`, and `\"dateTimeField\"`.\n\n[`fallback`](#fallback) Optional\n\nWhat to return from `of()` if the input is structurally valid but there's no matching display name. Possible values are:\n\n[`\"code\"`](#code) (default)\n\nReturn the input code itself.\n\n[`\"none\"`](#none)\n\nReturn `undefined`.\n\n[`languageDisplay`](#languagedisplay) Optional\n\nHow language names should be displayed. Only usable along with `type: \"language\"`. Possible values are:\n\n[`\"dialect\"`](#dialect) (default)\n\nDisplay special regional dialects using their own name. E.g. `\"nl-BE\"` will be displayed as `\"Flemish\"`.\n\n[`\"standard\"`](#standard)\n\nDisplay all languages using standard format. E.g. `\"nl-BE\"` will be displayed as `\"Dutch (Belgium)\"`.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `options.type` is not provided.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned.\n\n```\nconsole.log(new Intl.DisplayNames([], { type: \"language\" }).of(\"US\"));\n// 'us'\n```\n\n### [Using type `dateTimeField`](#using_type_datetimefield)\n\nExample using `dateTimeField` as a type option, will return the localized date time names strings.\n\n```\nconst dn = new Intl.DisplayNames(\"pt\", { type: \"dateTimeField\" });\nconsole.log(dn.of(\"era\")); // 'era'\nconsole.log(dn.of(\"year\")); // 'ano'\nconsole.log(dn.of(\"month\")); // 'mês'\nconsole.log(dn.of(\"quarter\")); // 'trimestre'\nconsole.log(dn.of(\"weekOfYear\")); // 'semana'\nconsole.log(dn.of(\"weekday\")); // 'dia da semana'\nconsole.log(dn.of(\"dayPeriod\")); // 'AM/PM'\nconsole.log(dn.of(\"day\")); // 'dia'\nconsole.log(dn.of(\"hour\")); // 'hora'\nconsole.log(dn.of(\"minute\")); // 'minuto'\nconsole.log(dn.of(\"second\")); // 'segundo'\n```\n\n### [Using type `calendar`](#using_type_calendar)\n\nExample using `calendar` as a type option, will return the localized calendar names strings.\n\n```\nconst dn = new Intl.DisplayNames(\"en\", { type: \"calendar\" });\nconsole.log(dn.of(\"roc\")); // 'Minguo Calendar'\nconsole.log(dn.of(\"gregory\")); // 'Gregorian Calendar'\nconsole.log(dn.of(\"chinese\")); // 'Chinese Calendar'\n```\n\n### [Using type `language` with `languageDisplay`](#using_type_language_with_languagedisplay)\n\nExample using `language` as a type with `languageDisplay` options.\n\n```\n// Using `dialect` option\nconst dnDialect = new Intl.DisplayNames(\"en\", {\n  type: \"language\",\n  languageDisplay: \"dialect\",\n});\nconsole.log(dnDialect.of(\"en-GB\")); // 'British English'\n\n// Using `standard` option\nconst dnStd = new Intl.DisplayNames(\"en\", {\n  type: \"language\",\n  languageDisplay: \"standard\",\n});\nconsole.log(dnStd.of(\"en-GB\")); // 'English (United Kingdom)'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-displaynames-constructor](https://tc39.es/ecma402/#sec-intl-displaynames-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DisplayNames() constructor - JavaScript | MDN",
    "description": "The Intl.DisplayNames() constructor creates Intl.DisplayNames objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/resolvedOptions",
    "markdown": "# Intl.DisplayNames.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) instances returns a new object with properties reflecting the locale and style formatting options computed during the construction of this `Intl.DisplayNames` object.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn object with properties reflecting the locale and formatting options computed during the construction of the given [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) object.\n\n## [Description](#description)\n\nThe object returned by `resolvedOptions()` has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`style`](#style)\n\nThe value provided for this property in the `options` argument of the constructor or the default value (`\"long\"`). Its value is either `\"long\"`, `\"short\"`, or `\"narrow\"`.\n\n[`type`](#type)\n\nThe value provided for this property in the `options` argument of the constructor or the default value (`\"language\"`). Its value is either `\"language\"`, `\"region\"`, `\"script\"`, or `\"currency\"`.\n\n[`fallback`](#fallback)\n\nThe value provided for this property in the options argument of the constructor or the default value (`\"code\"`). Its value is either `\"code\"` or `\"none\"`.\n\n## [Examples](#examples)\n\n### [Using resolvedOptions](#using_resolvedoptions)\n\n```\nconst displayNames = new Intl.DisplayNames([\"de-DE\"], { type: \"region\" });\n\nconst usedOptions = displayNames.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.style); // \"long\"\nconsole.log(usedOptions.type); // \"region\"\nconsole.log(usedOptions.fallback); // \"code\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DisplayNames.prototype.resolvedOptions](https://tc39.es/ecma402/#sec-Intl.DisplayNames.prototype.resolvedOptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DisplayNames.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.DisplayNames instances\n  returns a new object with properties reflecting the locale and style formatting\n  options computed during the construction of this Intl.DisplayNames\n  object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat",
    "markdown": "# Intl.RelativeTimeFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.RelativeTimeFormat()`** constructor creates [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Intl.RelativeTimeFormat()\nnew Intl.RelativeTimeFormat(locales)\nnew Intl.RelativeTimeFormat(locales, options)\n```\n\n**Note:** `Intl.RelativeTimeFormat()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension key is allowed:\n\n[`nu`](#nu)\n\nSee [`numberingSystem`](#numberingsystem).\n\nThis key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`style`](#style)\n\nThe style of the formatted relative time. Possible values are:\n\n[`\"long\"`](#long) (default)\n\nE.g., \"in 1 month\"\n\n[`\"short\"`](#short)\n\nE.g., \"in 1 mo.\"\n\n[`\"narrow\"`](#narrow)\n\nE.g., \"in 1 mo.\". The narrow style could be similar to the short style for some locales.\n\n[`numeric`](#numeric)\n\nWhether to use numeric values in the output. Possible values are `\"always\"` and `\"auto\"`; the default is `\"always\"`. When set to `\"auto\"`, the output may use more idiomatic phrasing such as `\"yesterday\"` instead of `\"1 day ago\"`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Basic format usage](#basic_format_usage)\n\nThe following example shows how to create a relative time formatter using the English language.\n\n```\n// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n  localeMatcher: \"best fit\", // other values: \"lookup\"\n  numeric: \"always\", // other values: \"auto\"\n  style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"1 day ago\"\n\n// Format relative time using positive value (1).\nrtf.format(1, \"day\"); // \"in 1 day\"\n```\n\n### [Using the auto option](#using_the_auto_option)\n\nIf `numeric:auto` option is passed, it will produce the string `yesterday` or `tomorrow` instead of `1 day ago` or `in 1 day`. This allows to not always have to use numeric values in the output.\n\n```\n// Create a relative time formatter in your locale\n// with numeric: \"auto\" option value passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"yesterday\"\n\n// Format relative time using positive day unit (1).\nrtf.format(1, \"day\"); // \"tomorrow\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-relativetimeformat-constructor](https://tc39.es/ecma402/#sec-intl-relativetimeformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.RelativeTimeFormat() constructor - JavaScript | MDN",
    "description": "The Intl.RelativeTimeFormat() constructor creates Intl.RelativeTimeFormat objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale",
    "markdown": "# Intl.Locale() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Locale()`** constructor creates [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.Locale(tag)\nnew Intl.Locale(tag, options)\n```\n\n**Note:** `Intl.Locale()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`tag`](#tag)\n\nThe Unicode locale identifier string. For the syntax of locale identifier strings, see the [Intl main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument). Note that the `Intl.Locale` constructor, unlike most other `Intl` constructors, does not accept an array of locales or `undefined`.\n\n[`options`](#options)\n\nAn object that contains configuration for the Locale. Option values here take priority over extension keys in the locale identifier. Possible properties are:\n\n[`language`](#language)\n\nThe language. Any syntactically valid string following the [`unicode_language_subtag`](https://unicode.org/reports/tr35/#unicode_language_subtag) grammar (2–3 or 5–8 letters) is accepted, but the implementation only recognizes certain kinds.\n\n[`script`](#script)\n\nThe script. Any syntactically valid string following the [`unicode_script_subtag`](https://unicode.org/reports/tr35/#unicode_script_subtag) grammar (4 letters) is accepted, but the implementation only recognizes certain kinds.\n\n[`region`](#region)\n\nThe region. Any syntactically valid string following the [`unicode_region_subtag`](https://unicode.org/reports/tr35/#unicode_region_subtag) grammar (either 2 letters or 3 digits) is accepted, but the implementation only recognizes certain kinds.\n\n[`calendar`](#calendar)\n\nThe calendar. Any syntactically valid string following the [`type`](https://unicode.org/reports/tr35/#Unicode_locale_identifier) grammar (one or more segments of 3–8 alphanumerals, joined by hyphens) is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getCalendars`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types).\n\n[`collation`](#collation)\n\nThe collation. Any syntactically valid string following the `type` grammar is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getCollations`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations#supported_collation_types).\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system. Any syntactically valid string following the `type` grammar is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getNumberingSystems`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types).\n\n[`caseFirst`](#casefirst)\n\nThe case-first sort option. Possible values are `\"upper\"`, `\"lower\"`, or `\"false\"`.\n\n[`hourCycle`](#hourcycle)\n\nThe hour cycle. Possible values are `\"h23\"`, `\"h12\"`, `\"h11\"`, or the practically unused `\"h24\"`, which are explained in [`Intl.Locale.prototype.getHourCycles`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles#supported_hour_cycle_types)\n\n[`numeric`](#numeric)\n\nThe numeric sort option. A boolean.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nAt its very simplest, the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor takes a locale identifier string as its argument:\n\n```\nconst us = new Intl.Locale(\"en-US\");\n```\n\n### [Using the Locale constructor with an options object](#using_the_locale_constructor_with_an_options_object)\n\nThe constructor also takes an optional configuration object argument, which can contain any of several extension types. For example, set the [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle) property of the configuration object to your desired hour cycle type, and then pass it into the constructor:\n\n```\nconst locale = new Intl.Locale(\"en-US\", { hourCycle: \"h12\" });\nconsole.log(locale.hourCycle); // \"h12\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-locale-constructor](https://tc39.es/ecma402/#sec-intl-locale-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale() constructor - JavaScript | MDN",
    "description": "The Intl.Locale() constructor creates Intl.Locale objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/resolvedOptions",
    "markdown": "# Intl.PluralRules.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) instances returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this `Intl.PluralRules` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and plural formatting options computed during the initialization of the given [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) object.\n\nThe object has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`pluralCategories`](#pluralcategories)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of plural categories used by the given locale, selected from the list `\"zero\"`, `\"one\"`, `\"two\"`, `\"few\"`, `\"many\"` and `\"other\"`.\n\n[`type`](#type)\n\nThe type used (`cardinal` or `ordinal`).\n\n[`roundingIncrement`](#roundingincrement) Experimental\n\nThe rounding-increment precision (the increment used when rounding numbers). This is the value specified in the `options.roundingIncrement` argument in the constructor.\n\n[`roundingMode`](#roundingmode) Experimental\n\nThe rounding mode. This is the value provided for the `options.roundingMode` argument in the constructor, or the default value: `halfExpand`.\n\n[`roundingPriority`](#roundingpriority) Experimental\n\nThe priority for resolving rounding conflicts if both \"FractionDigits\" and \"SignificantDigits\" are specified. This is the value provided for the `options.roundingPriority` argument in the constructor, or the default value: `auto`.\n\n[`trailingZeroDisplay`](#trailingzerodisplay) Experimental\n\nThe strategy for displaying trailing zeros on whole numbers. This is the value specified in the `options.trailingZeroDisplay` argument in the constructor, or the default value: `\"auto\"`.\n\nOnly one of the following two groups of properties is included:\n\n[`minimumIntegerDigits`](#minimumintegerdigits), `minimumFractionDigits`, `maximumFractionDigits`\n\nThe values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if neither `minimumSignificantDigits` nor `maximumSignificantDigits` was provided in the `options` argument.\n\n[`minimumSignificantDigits`](#minimumsignificantdigits), `maximumSignificantDigits`\n\nThe values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if at least one of them was provided in the `options` argument.\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions() method](#using_the_resolvedoptions_method)\n\nThe code below shows the construction of a `PluralRules` object, followed by logging of each of the resolved options.\n\n```\n// Create a PluralRules instance\nconst de = new Intl.PluralRules(\"de-DE\", {\n  maximumSignificantDigits: 2,\n  trailingZeroDisplay: \"auto\",\n});\n\n// Resolve the options\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.pluralCategories); // Array [\"one\", \"other\"]\nconsole.log(usedOptions.type); // \"cardinal\"\nconsole.log(usedOptions.minimumIntegerDigits); // 1\nconsole.log(usedOptions.minimumFractionDigits); // undefined (maximumSignificantDigits is set)\nconsole.log(usedOptions.maximumFractionDigits); //undefined (maximumSignificantDigits is set)\nconsole.log(usedOptions.minimumSignificantDigits); // 1\nconsole.log(usedOptions.maximumSignificantDigits); //2\nconsole.log(usedOptions.roundingIncrement); // 1\nconsole.log(usedOptions.roundingMode); // \"halfExpand\"\nconsole.log(usedOptions.roundingPriority); // \"auto\"\nconsole.log(usedOptions.trailingZeroDisplay); // \"auto\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.pluralrules.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.PluralRules.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.PluralRules instances returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this Intl.PluralRules object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions",
    "markdown": "# Intl.RelativeTimeFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) instances returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this `Intl.RelativeTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and number formatting options computed during the initialization of the given [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) object.\n\n## [Description](#description)\n\nThe resulting object has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`style`](#style)\n\nThe length of the internationalized message. Possible values are:\n\n*   `\"long\"` (default, e.g., `in 1 month`)\n*   `\"short\"` (e.g., `in 1 mo.`),\n*   or `\"narrow\"` (e.g., `in 1 mo.`). The narrow style could be similar to the short style for some locales.\n\n[`numeric`](#numeric)\n\nThe format of output message. Possible values are:\n\n*   `\"always\"` (default, e.g., `1 day ago`),\n*   or `\"auto\"` (e.g., `yesterday`). The `\"auto\"` value allows to not always have to use numeric values in the output.\n\n[`numberingSystem`](#numberingsystem)\n\nThe value requested using the Unicode extension key `\"nu\"` or filled in as a default.\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions() method](#using_the_resolvedoptions_method)\n\n```\nconst de = new Intl.RelativeTimeFormat(\"de-DE\");\nconst usedOptions = de.resolvedOptions();\n\nusedOptions.locale; // \"de-DE\"\nusedOptions.style; // \"long\"\nusedOptions.numeric; // \"always\"\nusedOptions.numberingSystem; // \"latn\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.relativetimeformat.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.relativetimeformat.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.RelativeTimeFormat.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.RelativeTimeFormat instances returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this Intl.RelativeTimeFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/select",
    "markdown": "# Intl.PluralRules.prototype.select() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`select()`** method of [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) instances returns a string indicating which plural rule to use for locale-aware formatting of a number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`number`](#number)\n\nThe number to get a plural rule for.\n\n### [Return value](#return_value)\n\nA string representing the pluralization category of the `number`. This can be one of `zero`, `one`, `two`, `few`, `many`, or `other`.\n\n## [Description](#description)\n\nThis function selects a pluralization category according to the locale and formatting options of an [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) object. These options are set in the [`Intl.PluralRules()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules) constructor.\n\n## [Examples](#examples)\n\n### [Using select()](#using_select)\n\nFirst, create an `Intl.PluralRules` object, passing the appropriate `locales` and `options` parameters. Here we create a plural rules object for Arabic in the Egyptian dialect. Because the `type` is not specified the rules object will provide formatting for cardinal numbers (the default).\n\n```\nconst pr = new Intl.PluralRules(\"ar-EG\");\n```\n\nThen call `select()` on the rules object, specifying the number for which the plural form is required. Note that Arabic has 5 forms for cardinal numbers, as shown.\n\n```\npr.select(0); // 'zero'\npr.select(1); // 'one'\npr.select(2); // 'two'\npr.select(6); // 'few'\npr.select(18); // 'many'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.pluralrules.prototype.select](https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.select) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.PluralRules.prototype.select() - JavaScript | MDN",
    "description": "The select() method of Intl.PluralRules instances returns a string indicating which plural rule to use for locale-aware formatting of a number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules",
    "markdown": "# Intl.PluralRules() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.PluralRules()`** constructor creates [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Intl.PluralRules()\nnew Intl.PluralRules(locales)\nnew Intl.PluralRules(locales, options)\n```\n\n**Note:** `Intl.PluralRules()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`type`](#type)\n\nThe type to use. Possible values are:\n\n[`\"cardinal\"`](#cardinal) (default)\n\nFor cardinal numbers (referring to the quantity of things).\n\n[`\"ordinal\"`](#ordinal)\n\nFor ordinal number (referring to the ordering or ranking of things, e.g. \"1st\", \"2nd\", \"3rd\" in English).\n\n`Intl.PluralRules` also supports the `Intl.NumberFormat()` [digit options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#digit_options) (see `Intl.NumberFormat()` for details):\n\n*   `minimumIntegerDigits`\n*   `minimumFractionDigits`\n*   `maximumFractionDigits`\n*   `minimumSignificantDigits`\n*   `maximumSignificantDigits`\n*   `roundingPriority`\n*   `roundingIncrement`\n*   `roundingMode`\n\nThese options are interpreted as if the `notation` option from `Intl.NumberFormat` is `\"standard\"` and `style` is `\"decimal\"`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned. This is useful to distinguish between singular and plural forms, e.g. \"dog\" and \"dogs\".\n\n```\nconst pr = new Intl.PluralRules();\n\npr.select(0); // 'other' if in US English locale\n\npr.select(1); // 'one' if in US English locale\n\npr.select(2); // 'other' if in US English locale\n```\n\n### [Using options](#using_options)\n\nThe results can be customized using the `options` argument, which has one property called `type` which you can set to `ordinal`. This is useful to figure out the ordinal indicator, e.g. \"1st\", \"2nd\", \"3rd\", \"4th\", \"42nd\", and so forth.\n\n```\nconst pr = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" });\n\nconst suffixes = new Map([\n  [\"one\", \"st\"],\n  [\"two\", \"nd\"],\n  [\"few\", \"rd\"],\n  [\"other\", \"th\"],\n]);\nconst formatOrdinals = (n) => {\n  const rule = pr.select(n);\n  const suffix = suffixes.get(rule);\n  return `${n}${suffix}`;\n};\n\nformatOrdinals(0); // '0th'\nformatOrdinals(1); // '1st'\nformatOrdinals(2); // '2nd'\nformatOrdinals(3); // '3rd'\nformatOrdinals(4); // '4th'\nformatOrdinals(11); // '11th'\nformatOrdinals(21); // '21st'\nformatOrdinals(42); // '42nd'\nformatOrdinals(103); // '103rd'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-pluralrules-constructor](https://tc39.es/ecma402/#sec-intl-pluralrules-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.PluralRules() constructor - JavaScript | MDN",
    "description": "The Intl.PluralRules() constructor creates Intl.PluralRules objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/supportedLocalesOf",
    "markdown": "# Intl.PluralRules.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.PluralRules.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in plural rules without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.PluralRules.supportedLocalesOf(locales)\nIntl.PluralRules.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in plural rules without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in plural rules, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to plural rules nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.PluralRules.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.pluralrules.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.pluralrules.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.PluralRules.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.PluralRules.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in plural rules without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange",
    "markdown": "# Intl.PluralRules.prototype.selectRange() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`selectRange()`** method of [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) instances receives two values and returns a string indicating which plural rule to use for locale-aware formatting of the indicated range.\n\n## [Syntax](#syntax)\n\n```\nselectRange(startRange, endRange)\n```\n\n### [Parameters](#parameters)\n\n[`startRange`](#startrange)\n\nA number representing the start of the range.\n\n[`endRange`](#endrange)\n\nA number representing the end of the range.\n\n### [Return value](#return_value)\n\nA string representing the pluralization category of the specified range. This can be one of `zero`, `one`, `two`, `few`, `many` or `other`, that are relevant for the locale whose localization is specified in [LDML Language Plural Rules](https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html).\n\n## [Description](#description)\n\nThis function selects a pluralization category according to the locale and formatting options of an [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) object.\n\nConceptually the behavior is the same as getting plural rules for a single cardinal or ordinal number. Languages have one or more forms for describing ranges, and this method returns the appropriate form given the supplied locale and formatting options. In English there is only one plural form, such as \"1–10 apples\", and the method will return `other`. Other languages can have many forms.\n\n## [Examples](#examples)\n\n### [Using selectRange()](#using_selectrange)\n\n```\nnew Intl.PluralRules(\"sl\").selectRange(102, 201); // 'few'\n\nnew Intl.PluralRules(\"pt\").selectRange(102, 102); // 'other'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.pluralrules.prototype.selectrange](https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.selectrange) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.PluralRules.prototype.selectRange() - JavaScript | MDN",
    "description": "The selectRange() method of Intl.PluralRules instances receives two values and returns a string indicating which plural rule to use for locale-aware formatting of the indicated range.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format",
    "markdown": "# Intl.RelativeTimeFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`format()`** method of [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) instances formats a `value` and `unit` according to the locale and formatting options of this `Intl.RelativeTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nNumeric value to use in the internationalized relative time message.\n\n[`unit`](#unit)\n\nUnit to use in the relative time internationalized message. Possible values are: `\"year\"`, `\"quarter\"`, `\"month\"`, `\"week\"`, `\"day\"`, `\"hour\"`, `\"minute\"`, `\"second\"`. Plural forms are also permitted.\n\n### [Return value](#return_value)\n\nA string representing the given `value` and `unit` formatted according to the locale and formatting options of this [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) object.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Basic format usage](#basic_format_usage)\n\nThe following example shows how to create a relative time formatter using the English language.\n\n```\n// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n  localeMatcher: \"best fit\", // other values: \"lookup\"\n  numeric: \"always\", // other values: \"auto\"\n  style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"1 day ago\"\n\n// Format relative time using positive value (1).\nrtf.format(1, \"day\"); // \"in 1 day\"\n```\n\n### [Using the auto option](#using_the_auto_option)\n\nIf `numeric:auto` option is passed, it will produce the string `yesterday`, `today`, or `tomorrow` instead of `1 day ago`, `in 0 days`, or `in 1 day`. This allows to not always have to use numeric values in the output.\n\n```\n// Create a relative time formatter in your locale\n// with numeric: \"auto\" option value passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"yesterday\"\n\nrtf.format(0, \"day\"); // \"today\"\n\n// Format relative time using positive day unit (1).\nrtf.format(1, \"day\"); // \"tomorrow\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.RelativeTimeFormat.prototype.format](https://tc39.es/ecma402/#sec-Intl.RelativeTimeFormat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.RelativeTimeFormat.prototype.format() - JavaScript | MDN",
    "description": "The format() method of Intl.RelativeTimeFormat instances formats a value and unit according to the locale and formatting options of this Intl.RelativeTimeFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts",
    "markdown": "# Intl.RelativeTimeFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatToParts()`** method of [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) instances returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the relative time format in parts that can be used for custom locale-aware formatting.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nformatToParts(value, unit)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nNumeric value to use in the internationalized relative time message.\n\n[`unit`](#unit)\n\nUnit to use in the relative time internationalized message. Possible values are: `\"year\"`, `\"quarter\"`, `\"month\"`, `\"week\"`, `\"day\"`, `\"hour\"`, `\"minute\"`, `\"second\"`. Plural forms are also permitted.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted relative time in parts.\n\n## [Description](#description)\n\nThe `Intl.RelativeTimeFormat.prototype.formatToParts` method is a version of the format method which it returns an array of objects which represent \"parts\" of the object, separating the formatted number into its constituent parts and separating it from other surrounding text. These objects have two properties: type a `NumberFormat` formatToParts type, and value, which is the String which is the component of the output. If a \"part\" came from `NumberFormat`, it will have a unit property which indicates the unit being formatted; literals which are part of the larger frame will not have this property.\n\n## [Examples](#examples)\n\n### [Using formatToParts](#using_formattoparts)\n\n```\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using the day unit\nrtf.formatToParts(-1, \"day\");\n// [{ type: \"literal\", value: \"yesterday\"}]\n\nrtf.formatToParts(100, \"day\");\n// [\n//   { type: \"literal\", value: \"in \" },\n//   { type: \"integer\", value: \"100\", unit: \"day\" },\n//   { type: \"literal\", value: \" days\" }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.RelativeTimeFormat.prototype.formatToParts](https://tc39.es/ecma402/#sec-Intl.RelativeTimeFormat.prototype.formatToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.RelativeTimeFormat.prototype.formatToParts() - JavaScript | MDN",
    "description": "The formatToParts() method of Intl.RelativeTimeFormat instances returns an Array of objects representing the relative time format in parts that can be used for custom locale-aware formatting.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/supportedLocalesOf",
    "markdown": "# Intl.RelativeTimeFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.RelativeTimeFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in relative time formatting without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.RelativeTimeFormat.supportedLocalesOf(locales)\nIntl.RelativeTimeFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in relative time formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in relative time formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to relative time formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.RelativeTimeFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.RelativeTimeFormat.supportedLocalesOf](https://tc39.es/ecma402/#sec-Intl.RelativeTimeFormat.supportedLocalesOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.RelativeTimeFormat.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.RelativeTimeFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in relative time formatting without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations",
    "markdown": "# Intl.Locale.prototype.getCollations() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getCollations()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of one or more [collation types](https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_collation) for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `collations`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.collations === locale.collations` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing all collation types commonly used for the `Locale`, sorted in alphabetical order, with the `standard` and `search` values always excluded. If the `Locale` already has a [`collation`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation), then the returned array contains that single value.\n\nBelow is a list of the supported collation types, adapted from the [Unicode collation specification](https://github.com/unicode-org/cldr/blob/2dd06669d833823e26872f249aa304bc9d9d2a90/common/bcp47/collation.xml).\n\n### [Supported collation types](#supported_collation_types)\n\n[`big5han`](#big5han)\n\nPinyin ordering for Latin, big5 charset ordering for CJK characters (for Chinese)\n\n**Warning:** The `big5han` collation type is deprecated, not available in Firefox, Chrome or Edge.\n\n[`compat`](#compat)\n\nA previous version of the ordering, for compatibility (for Arabic)\n\n[`dict`](#dict)\n\nDictionary style ordering (for Sinhala)\n\n[`direct`](#direct)\n\nBinary code point order\n\n**Warning:** The `direct` collation type has been deprecated. Do not use.\n\n[`ducet`](#ducet)\n\nThe default Unicode collation element table order\n\n**Warning:** The `ducet` collation type is not available to the Web. Use the `und` locale without a collation type specifier instead. `und` is the collation that is the closest to `ducet`.\n\n[`emoji`](#emoji)\n\nRecommended ordering for emoji characters (for the `und` locale)\n\n[`eor`](#eor)\n\nEuropean ordering rules (for the `und` locale)\n\n[`gb2312`](#gb2312)\n\nPinyin ordering for Latin, gb2312han charset ordering for CJK characters (for Chinese)\n\n**Warning:** The `gb2312` collation type is deprecated, not available in Firefox, Chrome or Edge.\n\n[`phonebk`](#phonebk)\n\nPhonebook style ordering (for German)\n\n[`phonetic`](#phonetic)\n\nPhonetic ordering (sorting based on pronunciation; for Lingala)\n\n[`pinyin`](#pinyin)\n\nPinyin ordering for Latin and for CJK characters (for Chinese)\n\n[`reformed`](#reformed)\n\nReformed ordering (formerly for Swedish)\n\n[`search`](#search)\n\nSpecial collation type for string search\n\n**Warning:** Do not use as a collation type, since in [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator), this collation is activated via the `\"search\"` value for the `usage` option. There is currently no API for substring search, so this is currently only good for filtering a list of strings by trying a full-string match of the key against each list item.\n\n[`searchjl`](#searchjl)\n\nSpecial collation type for Korean initial consonant search\n\n**Warning:** This collation is not for sorting, even though it is made available through [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) instantiated with usage `\"sort\"` as opposed to usage `\"search\"`.\n\n[`standard`](#standard)\n\nDefault ordering for each language, except Chinese (and, previously, Swedish)\n\n**Warning:** Do not use explicitly. In general, it's unnecessary to specify this explicitly and specifying this for Swedish is problematic due to the different meaning for Swedish in the past.\n\n[`stroke`](#stroke)\n\nPinyin ordering for Latin, stroke order for CJK characters (for Chinese)\n\n[`trad`](#trad)\n\nTraditional style ordering (such as in Spanish)\n\n[`unihan`](#unihan)\n\nRadical-stroke ordering for Han characters (for Chinese, Japanese, and Korean). Pinyin ordering for Latin in the case of Chinese.\n\n**Note:** The `unihan` collation type is not available in Chrome or Edge.\n\n[`zhuyin`](#zhuyin)\n\nPinyin ordering for Latin, zhuyin order for Bopomofo and CJK characters (for Chinese)\n\n## [Examples](#examples)\n\n### [Obtaining supported collation types](#obtaining_supported_collation_types)\n\nIf the `Locale` object doesn't have a `collation` already, `getCollations()` lists all commonly-used collation types for the given `Locale`. For examples of explicitly setting a `collation`, see [`collation` examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation#examples).\n\n```\nconst locale = new Intl.Locale(\"zh\");\nconsole.log(locale.getCollations()); // [\"pinyin\", \"stroke\", \"zhuyin\", \"emoji\", \"eor\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getCollations](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getCollations) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.getCollations() - JavaScript | MDN",
    "description": "The getCollations() method of Intl.Locale instances returns a list of one or more collation types for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars",
    "markdown": "# Intl.Locale.prototype.getCalendars() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getCalendars()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of one or more unique calendar identifiers for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `calendars`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.calendars === locale.calendars` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing all calendars commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has a [`calendar`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar), then the returned array contains that single value.\n\nBelow is a list of the supported calendar era types.\n\n### [Supported calendar types](#supported_calendar_types)\n\n[`buddhist`](#buddhist)\n\nThai Buddhist calendar\n\n[`chinese`](#chinese)\n\nTraditional Chinese calendar\n\n[`coptic`](#coptic)\n\nCoptic calendar\n\n[`dangi`](#dangi)\n\nTraditional Korean calendar\n\n[`ethioaa`](#ethioaa)\n\nEthiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)\n\n[`ethiopic`](#ethiopic)\n\nEthiopic calendar, Amete Mihret (epoch approx, 8 C.E.)\n\n[`gregory`](#gregory)\n\nGregorian calendar\n\n[`hebrew`](#hebrew)\n\nTraditional Hebrew calendar\n\n[`indian`](#indian)\n\nIndian calendar\n\n[`islamic`](#islamic)\n\nIslamic calendar\n\n[`islamic-umalqura`](#islamic-umalqura)\n\nIslamic calendar, Umm al-Qura\n\n[`islamic-tbla`](#islamic-tbla)\n\nIslamic calendar, tabular (intercalary years \\[2,5,7,10,13,16,18,21,24,26,29\\] - astronomical epoch)\n\n[`islamic-civil`](#islamic-civil)\n\nIslamic calendar, tabular (intercalary years \\[2,5,7,10,13,16,18,21,24,26,29\\] - civil epoch)\n\n[`islamic-rgsa`](#islamic-rgsa)\n\nIslamic calendar, Saudi Arabia sighting\n\n[`iso8601`](#iso8601)\n\nISO calendar (Gregorian calendar using the ISO 8601 calendar week rules)\n\n[`japanese`](#japanese)\n\nJapanese Imperial calendar\n\n[`persian`](#persian)\n\nPersian calendar\n\n[`roc`](#roc)\n\nCivil (algorithmic) Arabic calendar\n\n[`islamicc`](#islamicc)\n\nCivil (algorithmic) Arabic calendar\n\n**Warning:** The `islamicc` calendar key has been deprecated. Please use `islamic-civil`.\n\n## [Examples](#examples)\n\n### [Obtaining supported calendars](#obtaining_supported_calendars)\n\nIf the `Locale` object doesn't have a `calendar` already, `getCalendars()` lists all commonly-used calendars for the given `Locale`. For examples of explicitly setting a `calendar`, see [`calendar` examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#examples).\n\n```\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getCalendars()); // [\"gregory\", \"coptic\", \"islamic\", \"islamic-civil\", \"islamic-tbla\"]\n```\n\n```\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getCalendars()); // [\"gregory\", \"japanese\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getCalendars](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getCalendars) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.getCalendars() - JavaScript | MDN",
    "description": "The getCalendars() method of Intl.Locale instances returns a list of one or more unique calendar identifiers for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles",
    "markdown": "# Intl.Locale.prototype.getHourCycles() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getHourCycles()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of one or more unique hour cycle identifiers for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `hourCycles`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.hourCycles === locale.hourCycles` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing all hour cycle types commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has an [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle), then the returned array contains that single value.\n\nBelow is a list of supported hour cycle types.\n\n### [Supported hour cycle types](#supported_hour_cycle_types)\n\n[`h12`](#h12)\n\nHour system using 1–12; corresponds to 'h' in patterns. The 12 hour clock, with midnight starting at 12:00 am. As used, for example, in the United States.\n\n[`h23`](#h23)\n\nHour system using 0–23; corresponds to 'H' in patterns. The 24 hour clock, with midnight starting at 0:00.\n\n[`h11`](#h11)\n\nHour system using 0–11; corresponds to 'K' in patterns. The 12 hour clock, with midnight starting at 0:00 am. Mostly used in Japan.\n\n[`h24`](#h24)\n\nHour system using 1–24; corresponds to 'k' in pattern. The 24 hour clock, with midnight starting at 24:00. Not used anywhere.\n\n## [Examples](#examples)\n\n### [Obtaining supported hour cycles](#obtaining_supported_hour_cycles)\n\nIf the `Locale` object doesn't have a `hourCycle` already, `getHourCycles()` lists all commonly-used hour cycle identifiers for the given `Locale`. For examples of explicitly setting a `hourCycle`, see [`hourCycle` examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle#examples).\n\n```\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getHourCycles()); // [\"h12\"]\n```\n\n```\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getHourCycles()); // [\"h23\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getHourCycles](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getHourCycles) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.getHourCycles() - JavaScript | MDN",
    "description": "The getHourCycles() method of Intl.Locale instances returns a list of one or more unique hour cycle identifiers for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones",
    "markdown": "# Intl.Locale.prototype.getTimeZones() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getTimeZones()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of supported time zones for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `timeZones`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.timeZones === locale.timeZones` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing supported time zones for the associated `Locale`, where each value is an [IANA time zone canonical name](https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database), sorted in alphabetical order. If the locale identifier does not contain a region subtag, the returned value is `undefined`.\n\nNote that while the IANA database changes from time to time, [the Unicode CLDR database (which browsers use) keeps old time zone names for stability purposes](https://unicode.org/reports/tr35/#Time_Zone_Identifiers). For example, here are a few notable name changes:\n\n| Current IANA name | CDLR database |\n| --- | --- |\n| `America/Argentina/Buenos_Aires` | `America/Buenos_Aires` |\n| `Asia/Kolkata` | `Asia/Calcutta` |\n| `Asia/Ho_Chi_Minh` | `Asia/Saigon` |\n| `Europe/Kyiv` | `Europe/Kiev` |\n\nSome browsers (Firefox) override these legacy names, while others don't (Safari and Chrome). For more information, check the [CLDR database](https://github.com/unicode-org/cldr-json/blob/main/cldr-json/cldr-bcp47/bcp47/timezone.json). (IANA names are marked with `\"_iana\"`, if different.) There is [an effort in TC39 to properly handle these canonical identifiers](https://github.com/tc39/proposal-canonical-tz), which also contains links to related CLDR issues.\n\n## [Examples](#examples)\n\n### [Obtaining supported time zones](#obtaining_supported_time_zones)\n\nList supported time zones for a given `Locale`.\n\n```\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getTimeZones()); // [\"Africa/Cairo\"]\n```\n\n```\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getTimeZones()); // [\"Asia/Tokyo\"]\n```\n\n```\nconst ar = new Intl.Locale(\"ar\");\nconsole.log(ar.getTimeZones()); // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getTimeZones](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getTimeZones) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.getTimeZones() - JavaScript | MDN",
    "description": "The getTimeZones() method of Intl.Locale instances returns a list of supported time zones for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo",
    "markdown": "# Intl.Locale.prototype.getWeekInfo() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getWeekInfo()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a `weekInfo` object with the properties `firstDay`, `weekend` and `minimalDays` for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `weekInfo`. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of `locale.weekInfo === locale.weekInfo` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn object representing week information associated with the Locale data specified in [UTS 35's Week Elements](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements). It has the following properties:\n\n[`firstDay`](#firstday)\n\nAn integer between 1 (Monday) and 7 (Sunday) indicating the first day of the week for the locale. Commonly 1, 5, 6, or 7.\n\n[`weekend`](#weekend)\n\nAn array of integers between 1 and 7 indicating the weekend days for the locale. This is usually continuous because UTS 35 stores `weekendStart` and `weekendEnd` instead.\n\n[`minimalDays`](#minimaldays)\n\nAn integer between 1 and 7 (commonly 1 and 4) indicating the minimal days required in the first week of a month or year, for week-of-year or week-of-month calculations (e.g. The 20th week of the year). For example, in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) calendar, the first week of a year must have at least 4 days in this year, so if January 1 is a Friday, Saturday, or Sunday, it will be numbered as part of the last week of the previous year.\n\n## [Examples](#examples)\n\n### [Obtaining the Week Information](#obtaining_the_week_information)\n\nReturn the week information for a given `Locale`.\n\n```\nconst he = new Intl.Locale(\"he\"); // Hebrew (Israel)\nconsole.log(he.getWeekInfo()); // { firstDay: 7, weekend: [5, 6], minimalDays: 1 }\n\nconst af = new Intl.Locale(\"af\"); // Afrikaans (South Africa)\nconsole.log(af.getWeekInfo()); // { firstDay: 7, weekend: [6, 7], minimalDays: 1 }\n\nconst enGB = new Intl.Locale(\"en-GB\"); // English (United Kingdom)\nconsole.log(enGB.getWeekInfo()); // { firstDay: 1, weekend: [6, 7], minimalDays: 4 }\n\nconst arAF = new Intl.Locale(\"ar-AF\"); // Arabic (Afghanistan)\nconsole.log(arAF.getWeekInfo()); // { firstDay: 6, weekend: [4, 5], minimalDays: 1 }\n\nconst dvMV = new Intl.Locale(\"dv-MV\"); // Divehi (Maldives)\nconsole.log(dvMV.getWeekInfo()); // { firstDay: 5, weekend: [6, 7], minimalDays: 1 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getWeekInfo](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getWeekInfo) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.getWeekInfo() - JavaScript | MDN",
    "description": "The getWeekInfo() method of Intl.Locale instances returns a weekInfo object with the properties firstDay, weekend and minimalDays for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems",
    "markdown": "# Intl.Locale.prototype.getNumberingSystems() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getNumberingSystems()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of one or more unique [numbering system](https://en.wikipedia.org/wiki/Numeral_system) identifiers for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `numberingSystems`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.numberingSystems === locale.numberingSystems` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing all numbering systems commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has a [`numberingSystem`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem), then the returned array contains that single value.\n\nA table of the standard Unicode numeral systems can be seen below.\n\n### [Supported numbering system types](#supported_numbering_system_types)\n\n| Value | Description |\n| --- | --- |\n| adlm | Adlam digits |\n| ahom | Ahom digits |\n| arab | Arabic-Indic digits |\n| arabext | Extended Arabic-Indic digits |\n| armn | Armenian upper case numerals — algorithmic |\n| armnlow | Armenian lower case numerals — algorithmic |\n| bali | Balinese digits |\n| beng | Bengali digits |\n| bhks | Bhaiksuki digits |\n| brah | Brahmi digits |\n| cakm | Chakma digits |\n| cham | Cham digits |\n| cyrl | Cyrillic numerals — algorithmic |\n| deva | Devanagari digits |\n| ethi | Ethiopic numerals — algorithmic |\n| finance | Financial numerals — may be algorithmic |\n| fullwide | Full width digits |\n| geor | Georgian numerals — algorithmic |\n| gong | Gunjala Gondi digits |\n| gonm | Masaram Gondi digits |\n| grek | Greek upper case numerals — algorithmic |\n| greklow | Greek lower case numerals — algorithmic |\n| gujr | Gujarati digits |\n| guru | Gurmukhi digits |\n| hanidays | Han-character day-of-month numbering for lunar/other traditional calendars |\n| hanidec | Positional decimal system using Chinese number ideographs as digits |\n| hans | Simplified Chinese numerals — algorithmic |\n| hansfin | Simplified Chinese financial numerals — algorithmic |\n| hant | Traditional Chinese numerals — algorithmic |\n| hantfin | Traditional Chinese financial numerals — algorithmic |\n| hebr | Hebrew numerals — algorithmic |\n| hmng | Pahawh Hmong digits |\n| hmnp | Nyiakeng Puachue Hmong digits |\n| java | Javanese digits |\n| jpan | Japanese numerals — algorithmic |\n| jpanfin | Japanese financial numerals — algorithmic |\n| jpanyear | Japanese first-year Gannen numbering for Japanese calendar |\n| kali | Kayah Li digits |\n| khmr | Khmer digits |\n| knda | Kannada digits |\n| lana | Tai Tham Hora (secular) digits |\n| lanatham | Tai Tham (ecclesiastical) digits |\n| laoo | Lao digits |\n| latn | Latin digits |\n| lepc | Lepcha digits |\n| limb | Limbu digits |\n| mathbold | Mathematical bold digits |\n| mathdbl | Mathematical double-struck digits |\n| mathmono | Mathematical monospace digits |\n| mathsanb | Mathematical sans-serif bold digits |\n| mathsans | Mathematical sans-serif digits |\n| mlym | Malayalam digits |\n| modi | Modi digits |\n| mong | Mongolian digits |\n| mroo | Mro digits |\n| mtei | Meetei Mayek digits |\n| mymr | Myanmar digits |\n| mymrshan | Myanmar Shan digits |\n| mymrtlng | Myanmar Tai Laing digits |\n| native | Native digits |\n| newa | Newa digits |\n| nkoo | N'Ko digits |\n| olck | Ol Chiki digits |\n| orya | Oriya digits |\n| osma | Osmanya digits |\n| rohg | Hanifi Rohingya digits |\n| roman | Roman upper case numerals — algorithmic |\n| romanlow | Roman lowercase numerals — algorithmic |\n| saur | Saurashtra digits |\n| shrd | Sharada digits |\n| sind | Khudawadi digits |\n| sinh | Sinhala Lith digits |\n| sora | Sora\\_Sompeng digits |\n| sund | Sundanese digits |\n| takr | Takri digits |\n| talu | New Tai Lue digits |\n| taml | Tamil numerals — algorithmic |\n| tamldec | Modern Tamil decimal digits |\n| telu | Telugu digits |\n| thai | Thai digits |\n| tirh | Tirhuta digits |\n| tibt | Tibetan digits |\n| traditio | Traditional numerals — may be algorithmic |\n| vaii | Vai digits |\n| wara | Warang Citi digits |\n| wcho | Wancho digits |\n\n## [Examples](#examples)\n\n### [Obtaining supported numbering systems](#obtaining_supported_numbering_systems)\n\nIf the `Locale` object doesn't have a `numberingSystem` already, `getNumberingSystems()` lists all commonly-used numbering systems for the given `Locale`. For examples of explicitly setting a `numberingSystem`, see [`numberingSystem` examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem#examples).\n\n```\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getNumberingSystems()); // [\"arab\"]\n```\n\n```\nconst ja = new Intl.Locale(\"ja\");\nconsole.log(ja.getNumberingSystems()); // [\"latn\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getNumberingSystems](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getNumberingSystems) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.getNumberingSystems() - JavaScript | MDN",
    "description": "The getNumberingSystems() method of Intl.Locale instances returns a list of one or more unique numbering system identifiers for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo",
    "markdown": "# Intl.Locale.prototype.getTextInfo() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getTextInfo()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the ordering of characters indicated by either `ltr` (left-to-right) or by `rtl` (right-to-left) for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `textInfo`. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of `locale.textInfo === locale.textInfo` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn object representing text typesetting information associated with the Locale data specified in [UTS 35's Layouts Elements](https://www.unicode.org/reports/tr35/tr35-general.html#Layout_Elements). It has the following properties:\n\n[`direction`](#direction)\n\nA string indicating the direction of text for the locale. Can be either `\"ltr\"` (left-to-right) or `\"rtl\"` (right-to-left).\n\n## [Examples](#examples)\n\n### [Obtaining text info](#obtaining_text_info)\n\nReturn the supported text directions for a given `Locale`.\n\n```\nconst ar = new Intl.Locale(\"ar\");\nconsole.log(ar.getTextInfo()); // { direction: \"rtl\" }\nconsole.log(ar.getTextInfo().direction); // \"rtl\"\n```\n\n```\nconst es = new Intl.Locale(\"es\");\nconsole.log(es.getTextInfo()); // { direction: \"ltr\" }\nconsole.log(es.getTextInfo().direction); // \"ltr\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getTextInfo](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getTextInfo) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.getTextInfo() - JavaScript | MDN",
    "description": "The getTextInfo() method of Intl.Locale instances returns the ordering of characters indicated by either ltr (left-to-right) or by rtl (right-to-left) for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/toString",
    "markdown": "# Intl.Locale.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns this Locale's full [locale identifier string](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe _locale_'s Unicode locale identifier string.\n\n## [Description](#description)\n\nThe `Locale` object is a JavaScript representation of a concept Unicode locale identifier. Information about a particular locale (language, script, calendar type, etc.) can be encoded in a locale identifier string. To make it easier to work with these locale identifiers, the `Locale` object was introduced to JavaScript. Calling the `toString` method on a Locale object will return the identifier string for that particular Locale. The `toString` method allows `Locale` instances to be provided as an argument to existing `Intl` constructors, serialized in JSON, or any other context where an exact string representation is useful.\n\n## [Examples](#examples)\n\n### [Using toString](#using_tostring)\n\n```\nconst myLocale = new Intl.Locale(\"fr-Latn-FR\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr-Latn-FR\"\nconsole.log(myLocale.toString()); // Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.toString](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.toString) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.toString() - JavaScript | MDN",
    "description": "The toString() method of Intl.Locale instances returns this Locale's full locale identifier string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize",
    "markdown": "# Intl.Locale.prototype.maximize() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`maximize()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances gets the most likely values for the language, script, and region of this locale based on existing values.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance whose `baseName` property returns the result of the [Add Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) algorithm executed against _[`locale.baseName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName)_.\n\n## [Description](#description)\n\nSometimes, it is convenient to be able to identify the most likely locale language identifier subtags based on an incomplete language ID. The Add Likely Subtags algorithm gives us this functionality. For instance, given the language ID \"en\", the algorithm would return \"en-Latn-US\", since English can only be written in the Latin script, and is most likely to be used in the United States, as it is the largest English-speaking country in the world. This functionality is provided to JavaScript programmers via the `maximize()` method. `maximize()` only affects the main subtags that comprise the [language identifier](https://www.unicode.org/reports/tr35/#Language_Locale_Field_Definitions): language, script, and region subtags. Other subtags after the \"-u\" in the locale identifier are called extension subtags and are not affected by the `maximize()` method. Examples of these subtags include [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle), [`calendar`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar), and [`numeric`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric).\n\n## [Examples](#examples)\n\n### [Using maximize](#using_maximize)\n\n```\nconst myLocale = new Intl.Locale(\"fr\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr\"\nconsole.log(myLocale.toString()); // Prints \"fr-u-ca-gregory-hc-h12\"\nconst myLocMaximized = myLocale.maximize();\n\n// Prints \"fr-Latn-FR\". The \"Latn\" and \"FR\" tags are added,\n// since French is only written in the Latin script and is most likely to be spoken in France.\nconsole.log(myLocMaximized.baseName);\n\n// Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\".\n// Note that the extension tags (after \"-u\") remain unchanged.\nconsole.log(myLocMaximized.toString());\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.maximize](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.maximize) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n*   [`baseName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName)\n*   [Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) in the Unicode locale data markup language spec",
    "title": "Intl.Locale.prototype.maximize() - JavaScript | MDN",
    "description": "The maximize() method of Intl.Locale instances gets the\n  most likely values for the language, script, and region of this locale based on\n  existing values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/minimize",
    "markdown": "# Intl.Locale.prototype.minimize() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`minimize()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances attempts to remove information about this locale that would be added by calling [`maximize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance whose `baseName` property returns the result of the [Remove Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) algorithm executed against _[`locale.baseName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName)_.\n\n## [Description](#description)\n\nThis method carries out the reverse of [`maximize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize), removing any language, script, or region subtags from the locale language identifier (essentially the contents of `baseName`). This is useful when there are superfluous subtags in the language identifier; for instance, \"en-Latn\" can be simplified to \"en\", since \"Latn\" is the only script used to write English. `minimize()` only affects the main subtags that comprise the [language identifier](https://www.unicode.org/reports/tr35/#Language_Locale_Field_Definitions): language, script, and region subtags. Other subtags after the \"-u\" in the locale identifier are called extension subtags and are not affected by the `minimize()` method. Examples of these subtags include [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle), [`calendar`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar), and [`numeric`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric).\n\n## [Examples](#examples)\n\n### [Using minimize](#using_minimize)\n\n```\nconst myLocale = new Intl.Locale(\"fr-Latn-FR\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr-Latn-FR\"\nconsole.log(myLocale.toString()); // Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\"\n\nconst myLocMinimized = myLocale.minimize();\n\n// Prints \"fr\", since French is only written in the Latin script\n// and is most likely to be spoken in France.\nconsole.log(myLocMinimized.baseName);\n\n// Prints \"fr-u-ca-gregory-hc-h12\".\n// Note that the extension tags (after \"-u\") remain unchanged.\nconsole.log(myLocMinimized.toString());\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.minimize](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.minimize) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.minimize() - JavaScript | MDN",
    "description": "The minimize() method of Intl.Locale instances attempts to\n  remove information about this locale that would be added by calling\n  maximize().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/caseFirst",
    "markdown": "# Intl.Locale.prototype.caseFirst - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`caseFirst`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns whether case is taken into account for this locale's collation rules.\n\n## [Description](#description)\n\nA locale's collation rules are used to determine how strings are ordered in that locale. Certain locales use a character's case (UPPERCASE or lowercase) in the collation process. This additional rule can be expressed in a [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object's `caseFirst` property.\n\nThere are 3 values that the `caseFirst` property can have, outlined in the table below.\n\n### [`caseFirst` values](#casefirst_values)\n\n| Value | Description |\n| --- | --- |\n| `upper` | Upper case to be sorted before lower case. |\n| `lower` | Lower case to be sorted before upper case. |\n| `false` | No special case ordering. |\n\n## [Examples](#examples)\n\n### [Setting the caseFirst value via the locale string](#setting_the_casefirst_value_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), the values that `caseFirst` represents correspond to the key `kf`. `kf` is treated as a locale string \"extension subtag\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension key. Thus, the `caseFirst` value can be added to the initial locale identifier string that is passed into the `Locale` constructor. To add the `caseFirst` value, first add the `-u` extension key to the string. Next, add the `-kf` extension key to indicate that you are adding a value for `caseFirst`. Finally, add the `caseFirst` value to the string.\n\n```\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-kf-upper\");\nconsole.log(locale.caseFirst); // Prints \"upper\"\n```\n\n### [Setting the caseFirst value via the configuration object argument](#setting_the_casefirst_value_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can be used to pass extension types. Set the `caseFirst` property of the configuration object to your desired `caseFirst` value, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\", { caseFirst: \"lower\" });\nconsole.log(locale.caseFirst); // Prints \"lower\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.caseFirst](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.caseFirst) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.caseFirst - JavaScript | MDN",
    "description": "The caseFirst accessor property of Intl.Locale instances returns whether case is taken into account for this locale's collation rules.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName",
    "markdown": "# Intl.Locale.prototype.baseName - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`baseName`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a substring of this locale's string representation, containing core information about this locale, including the language, and the script and region if available.\n\n## [Description](#description)\n\n`baseName` returns the `language [\"-\" script] [\"-\" region] *(\"-\" variant)` subsequence of the [unicode\\_language\\_id grammar](https://www.unicode.org/reports/tr35/#Identifiers). It only includes information explicitly specified in the constructor, either through the locale identifier string or the options object.\n\nThe set accessor of `baseName` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\n### [Basic Example](#basic_example)\n\n```\nconst myLoc = new Intl.Locale(\"fr-Latn-CA\"); // Sets locale to Canadian French\nconsole.log(myLoc.toString()); // Prints out \"fr-Latn-CA-u-ca-gregory\"\nconsole.log(myLoc.baseName); // Prints out \"fr-Latn-CA\"\n```\n\n### [Example with options in the input string](#example_with_options_in_the_input_string)\n\n```\n// Sets language to Japanese, region to Japan,\n\n// calendar to Gregorian, hour cycle to 24 hours\nconst japan = new Intl.Locale(\"ja-JP-u-ca-gregory-hc-24\");\nconsole.log(japan.toString()); // Prints out \"ja-JP-u-ca-gregory-hc-h24\"\nconsole.log(japan.baseName); // Prints out \"ja-JP\"\n```\n\n### [Example with options that override input string](#example_with_options_that_override_input_string)\n\n```\n// Input string indicates language as Dutch and region as Belgium,\n\n// but options object overrides the region and sets it to the Netherlands\nconst dutch = new Intl.Locale(\"nl-Latn-BE\", { region: \"NL\" });\n\nconsole.log(dutch.baseName); // Prints out \"nl-Latn-NL\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.baseName](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.baseName) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.baseName - JavaScript | MDN",
    "description": "The baseName accessor property of Intl.Locale instances returns a substring of this locale's string representation, containing core information about this locale, including the language, and the script and region if available.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle",
    "markdown": "# Intl.Locale.prototype.hourCycle - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`hourCycle`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the hour cycle type for this locale.\n\n## [Description](#description)\n\nThere are 2 main types of time keeping conventions (clocks) used around the world: the 12 hour clock and the 24 hour clock. The `hourCycle` property's value is set at construction time, either through the `hc` key of the locale identifier or through the `hourCycle` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported hour cycle types, see [`Intl.Locale.prototype.getHourCycles()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles#supported_hour_cycle_types).\n\nThe set accessor of `hourCycle` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the hour cycle type can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding an hour cycle via the locale string](#adding_an_hour_cycle_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), hour cycle types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the hour cycle type can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To add the hour cycle type, first add the `-u` extension key to the string. Next, add the `-hc` extension to indicate that you are adding an hour cycle. Finally, add the hour cycle type to the string.\n\n```\nconst locale = new Intl.Locale(\"fr-FR-u-hc-h23\");\nconsole.log(locale.hourCycle); // \"h23\"\n```\n\n### [Adding an hour cycle via the configuration object argument](#adding_an_hour_cycle_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can contain any of several extension types, including hour cycle types. Set the `hourCycle` property of the configuration object to your desired hour cycle type, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"en-US\", { hourCycle: \"h12\" });\nconsole.log(locale.hourCycle); // \"h12\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.hourCycle](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.hourCycle) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.hourCycle - JavaScript | MDN",
    "description": "The hourCycle accessor property of Intl.Locale instances returns the hour cycle type for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation",
    "markdown": "# Intl.Locale.prototype.collation - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`collation`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the [collation type](https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_Collation) for this locale, which is used to order strings according to the locale's rules.\n\n## [Description](#description)\n\nCollation is the process of ordering strings of characters. It is used whenever strings must be sorted and placed into a certain order, from search query results to ordering records in a database. While the idea of placing strings in order might seem trivial, the idea of order can vary from region to region and language to language. The `collation` property's value is set at construction time, either through the `co` key of the locale identifier or through the `collation` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported collation types, see [`Intl.Locale.prototype.getCollations()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations#supported_collation_types).\n\nThe set accessor of `collation` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the collation type can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a collation type via the locale string](#adding_a_collation_type_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), collation types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the collation type can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To add the collation type, first add the `-u` extension to the string. Next, add the `-co` extension to indicate that you are adding a collation type. Finally, add the collation type to the string.\n\n```\nconst locale = new Intl.Locale(\"zh-Hant-u-co-zhuyin\");\nconsole.log(locale.collation); // \"zhuyin\"\n```\n\n### [Adding a collation type via the configuration object argument](#adding_a_collation_type_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can contain any of several extension types, including collation types. Set the `collation` property of the configuration object to your desired collation type, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"zh-Hant\", { collation: \"zhuyin\" });\nconsole.log(locale.collation); // \"zhuyin\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.collation](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.collation) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.collation - JavaScript | MDN",
    "description": "The collation accessor property of Intl.Locale instances returns the collation type for this locale, which is used to order strings according to the locale's rules.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar",
    "markdown": "# Intl.Locale.prototype.calendar - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`calendar`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the calendar type for this locale.\n\n## [Description](#description)\n\nWhile most of the world uses the Gregorian calendar, there are several regional calendar eras used around the world. The `calendar` property's value is set at construction time, either through the `ca` key of the locale identifier or through the `calendar` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported calendar types, see [`Intl.Locale.prototype.getCalendars()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types).\n\nThe set accessor of `calendar` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the calendar type can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a calendar type via the locale string](#adding_a_calendar_type_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), calendar era types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the calendar era type can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To add the calendar type, first add the `-u` extension to the string. Next, add the `-ca` extension to indicate that you are adding a calendar type. Finally, add the calendar era type to the string.\n\n```\nconst locale = new Intl.Locale(\"fr-FR-u-ca-buddhist\");\nconsole.log(locale.calendar); // Prints \"buddhist\"\n```\n\n### [Adding a calendar type via the configuration object argument](#adding_a_calendar_type_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can contain any of several extension types, including calendars. Set the `calendar` property of the configuration object to your desired calendar era, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"fr-FR\", { calendar: \"buddhist\" });\nconsole.log(locale.calendar); // \"buddhist\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.calendar](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.calendar) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.calendar - JavaScript | MDN",
    "description": "The calendar accessor property of Intl.Locale instances returns the calendar type for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem",
    "markdown": "# Intl.Locale.prototype.numberingSystem - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`numberingSystem`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the [numeral system](https://en.wikipedia.org/wiki/Numeral_system) for this locale.\n\n## [Description](#description)\n\nA numeral system is a system for expressing numbers. The `numberingSystem` property's value is set at construction time, either through the `nu` key of the locale identifier or through the `numberingSystem` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types).\n\n## [Examples](#examples)\n\nLike other locale subtags, the numbering system type can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a numbering system via the locale string](#adding_a_numbering_system_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), numbering system types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the numbering system type can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To add the numbering system type, first add the `-u` extension key to the string. Next, add the `-nu` extension to indicate that you are adding a numbering system. Finally, add the numbering system type to the string.\n\n```\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-nu-mong\");\nconsole.log(locale.numberingSystem); // \"mong\"\n```\n\n### [Adding a numbering system via the configuration object argument](#adding_a_numbering_system_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can contain any of several extension types, including numbering system types. Set the `numberingSystem` property of the configuration object to your desired numbering system type, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\", { numberingSystem: \"latn\" });\nconsole.log(locale.numberingSystem); // \"latn\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.numberingSystem](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.numberingSystem) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.numberingSystem - JavaScript | MDN",
    "description": "The numberingSystem accessor property of Intl.Locale instances returns the numeral system for this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/language",
    "markdown": "# Intl.Locale.prototype.language - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`language`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the language associated with this locale.\n\n## [Description](#description)\n\nLanguage is one of the core attributes of a locale. The Unicode specification treats the language identifier of a locale as the language and the region together (to make a distinction between dialects and variations, e.g. British English vs. American English). The `language` property of a [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) returns strictly the locale's language subtag. The `language` property's value is set at construction time, either through the `language` subtag (first part) of the locale identifier or through the `language` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present.\n\nThe set accessor of `language` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the language can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Setting the language via the locale string](#setting_the_language_via_the_locale_string)\n\nIn order to be a valid Unicode locale identifier, a string must start with the language subtag. The main argument to the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor must be a valid Unicode locale identifier, so whenever the constructor is used, it must be passed an identifier with a language subtag.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.language); // Prints \"en\"\n```\n\n### [Overriding language via the configuration object argument](#overriding_language_via_the_configuration_object_argument)\n\nWhile the language subtag must be specified, the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can override the language subtag.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\", { language: \"es\" });\nconsole.log(locale.language); // Prints \"es\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.language](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.language) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n*   [Unicode language subtag](https://www.unicode.org/reports/tr35/#unicode_language_subtag_validity) in the Unicode locale data markup language spec",
    "title": "Intl.Locale.prototype.language - JavaScript | MDN",
    "description": "The language accessor property of Intl.Locale instances returns the language associated with this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric",
    "markdown": "# Intl.Locale.prototype.numeric - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`numeric`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns whether this locale has special collation handling for numeric characters.\n\n## [Description](#description)\n\nLike [`caseFirst`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/caseFirst), `numeric` represents a modification to the collation rules utilized by the locale. `numeric` is a boolean value, which means that it can be either `true` or `false`. If `numeric` is set to `false`, there will be no special handling of numeric values in strings. If `numeric` is set to `true`, then the locale will take numeric characters into account when collating strings. This special numeric handling means that sequences of decimal digits will be compared as numbers. For example, the string \"A-21\" will be considered less than \"A-123\".\n\n## [Examples](#examples)\n\n### [Setting the numeric value via the locale string](#setting_the_numeric_value_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), the values that `numeric` represents correspond to the key `kn`. `kn` is considered a locale string \"extension subtag\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension key. Thus, the `numeric` value can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To set the `numeric` value, first add the `-u` extension key to the string. Next, add the `-kn` extension key to indicate that you are adding a value for `numeric`. Finally, add the `numeric` value to the string. If you want to set `numeric` to `true`, adding the `kn` key will suffice. To set the value to `false`, you must specify in by adding `\"false\"` after the `kn` key.\n\n```\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-kn-false\");\nconsole.log(locale.numeric); // Prints \"false\"\n```\n\n### [Setting the numeric value via the configuration object argument](#setting_the_numeric_value_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can be used to pass extension types. Set the `numeric` property of the configuration object to your desired `numeric` value and pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\", { numeric: true });\nconsole.log(locale.numeric); // Prints \"true\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.numeric](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.numeric) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.numeric - JavaScript | MDN",
    "description": "The numeric accessor property of Intl.Locale instances returns whether this locale has special collation handling for numeric characters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/region",
    "markdown": "# Intl.Locale.prototype.region - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`region`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the region of the world (usually a country) associated with this locale.\n\n## [Description](#description)\n\nRegion is one of the core attributes of a locale. It allows selection for differences between the same language in, say, different countries. For example, English is spoken in the United Kingdom and the United States of America, but there are differences in spelling and other language conventions between those two countries. Knowing the locale's region helps JavaScript programmers make sure that the content from their sites and applications is correctly displayed when viewed from different areas of the world. The `region` property's value is set at construction time, either through the `region` subtag (third part if `script` is present, second part otherwise) of the locale identifier or through the `region` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nThe set accessor of `region` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the region can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a region via the locale string](#adding_a_region_via_the_locale_string)\n\nThe region, if present, is the third part (if `script` is present, second part otherwise) of a valid Unicode language identifier string, and can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. Note that the region is not a required part of a locale identifier.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.region); // Prints \"US\"\n```\n\n### [Adding a region via the configuration object argument](#adding_a_region_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument. Set the `region` property of the configuration object to your desired region, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"fr-Latn\", { region: \"FR\" });\nconsole.log(locale.region); // Prints \"FR\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.region](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.region) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale.prototype.region - JavaScript | MDN",
    "description": "The region accessor property of Intl.Locale instances returns the region of the world (usually a country) associated with this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/supportedLocalesOf",
    "markdown": "# Intl.NumberFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.NumberFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.NumberFormat.supportedLocalesOf(locales)\nIntl.NumberFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in number formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in number formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to number formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.NumberFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.numberformat.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.NumberFormat.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.NumberFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange",
    "markdown": "# Intl.NumberFormat.prototype.formatRange() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatRange()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances formats a range of numbers according to the locale and formatting options of this `Intl.NumberFormat` object.\n\n## [Syntax](#syntax)\n\n```\nformatRange(startRange, endRange)\n```\n\n### [Parameters](#parameters)\n\n[`startRange`](#startrange)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n[`endRange`](#endrange)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n### [Return value](#return_value)\n\nA string representing the given range of numbers formatted according to the locale and formatting options of this [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `startRange` is less than `endRange`, or either value is `NaN`.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if either `startRange` or `endRange` is undefined.\n\n## [Description](#description)\n\nThe `formatRange` getter function formats a range of numbers into a string according to the locale and formatting options of this [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object from which it is called.\n\n## [Examples](#examples)\n\n### [Using formatRange](#using_formatrange)\n\nUse the `formatRange` getter function for formatting a range of currency values:\n\n```\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n});\n\nconsole.log(nf.formatRange(3, 5)); // \"$3 – $5\"\n\n// Note: the \"approximately equals\" symbol is added if\n// startRange and endRange round to the same values.\nconsole.log(nf.formatRange(2.9, 3.1)); // \"~$3\"\n```\n\n```\nconst nf = new Intl.NumberFormat(\"es-ES\", {\n  style: \"currency\",\n  currency: \"EUR\",\n  maximumFractionDigits: 0,\n});\n\nconsole.log(nf.formatRange(3, 5)); // \"3-5 €\"\nconsole.log(nf.formatRange(2.9, 3.1)); // \"~3 €\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.formatrange](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.formatrange) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.NumberFormat.prototype.formatRange() - JavaScript | MDN",
    "description": "The formatRange() method of Intl.NumberFormat instances formats a range of numbers according to the locale and formatting options of this Intl.NumberFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format",
    "markdown": "# Intl.NumberFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`format()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances formats a number according to the [locale and formatting options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) of this `Intl.NumberFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`number`](#number)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), or string, to format. Strings are parsed in the same way as in [number conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), except that `format()` will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number.\n\n**Note:** Older versions of the specification parsed strings as a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number). Check the compatibility table for your browser.\n\n### [Return value](#return_value)\n\nA string representing the given `number` formatted according to the locale and formatting options of this [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Description](#description)\n\n[`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values in JavaScript suffer from loss of precision if they are too big or too small, making the text representation inaccurate. If you are performing calculations with integers larger than [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) you should use a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) instead, which will format correctly:\n\n```\nnew Intl.NumberFormat(\"en-US\").format(1234567891234567891); // 1,234,567,891,234,568,000\nnew Intl.NumberFormat(\"en-US\").format(1234567891234567891n); // 1,234,567,891,234,567,891\n```\n\nYou can also pass through very large strings to be formatted as an arbitrary-precision decimal string (if you're performing calculations on the data you will still need to work with `BigInt`):\n\n```\nnew Intl.NumberFormat(\"en-US\").format(\"1234567891234567891\"); // 1,234,567,891,234,567,891\n```\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nUse the `format` getter function for formatting a single currency value. The code below shows how to format the roubles currency for a Russian locale:\n\n```\nconst options = { style: \"currency\", currency: \"RUB\" };\nconst numberFormat = new Intl.NumberFormat(\"ru-RU\", options);\nconsole.log(numberFormat.format(654321.987));\n// \"654 321,99 ₽\"\n```\n\n### [Using format with map](#using_format_with_map)\n\nUse the `format` getter function for formatting all numbers in an array. Note that the function is bound to the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) from which it was obtained, so it can be passed directly to [`Array.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map). This is considered a historical artefact, as part of a convention which is no longer followed for new features, but is preserved to maintain compatibility with existing programs.\n\n```\nconst a = [123456.789, 987654.321, 456789.123];\nconst numberFormat = new Intl.NumberFormat(\"es-ES\");\nconst formatted = a.map((n) => numberFormat.format(n));\nconsole.log(formatted.join(\"; \"));\n// \"123.456,789; 987.654,321; 456.789,123\"\n```\n\n### [Using format with a string](#using_format_with_a_string)\n\nUsing a string we can specify numbers that are larger than [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) without losing precision.\n\n```\nconst numberFormat = new Intl.NumberFormat(\"en-US\");\n\n// Here the value is converted to a Number\nconsole.log(numberFormat.format(987654321987654321));\n// 987,654,321,987,654,300\n\n// Here we use a string and don't lose precision\nconsole.log(numberFormat.format(\"987654321987654321\"));\n// 987,654,321,987,654,321\n```\n\nWe can also use the general \"E\" exponent syntax for decimal strings: `#.#E#`. The code below creates a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), coerces it to a string with the suffix `E-6`, and then formats it.\n\n```\nconst numberFormat = new Intl.NumberFormat(\"en-US\");\nconst bigNum = 1000000000000000110000n;\nconsole.log(numberFormat.format(bigNum));\n// \"1,000,000,000,000,000,110,000\"\n\n// Format as a string using the `E` syntax:\nconsole.log(numberFormat.format(`${bigNum}E-6`));\n// \"1,000,000,000,000,000.11\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.format](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.NumberFormat.prototype.format() - JavaScript | MDN",
    "description": "The format() method of Intl.NumberFormat instances formats a number according to the locale and formatting options of this Intl.NumberFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts",
    "markdown": "# Intl.NumberFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatToParts()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances allows locale-aware formatting of strings produced by this `Intl.NumberFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nformatToParts()\nformatToParts(number)\n```\n\n### [Parameters](#parameters)\n\n[`number`](#number) Optional\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) to format.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted number in parts.\n\n## [Description](#description)\n\nThe `formatToParts()` method is useful for custom formatting of number strings. It returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the `formatToParts()` method returns, looks like this:\n\n```\n[\n  { type: \"integer\", value: \"3\" },\n  { type: \"group\", value: \".\" },\n  { type: \"integer\", value: \"500\" },\n];\n```\n\nPossible types are the following:\n\n[`compact`](#compact)\n\nThe exponent in `\"long\"` or `\"short\"` form, depending on how `compactDisplay` (which defaults to `short`) is specified when `notation` is set to `compact`.\n\n[`currency`](#currency)\n\nThe currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\", depending on how `currencyDisplay` is specified.\n\n[`decimal`](#decimal)\n\nThe decimal separator string (\".\").\n\n[`exponentInteger`](#exponentinteger)\n\nThe exponent integer value, when `notation` is set to `scientific` or `engineering`.\n\n[`exponentMinusSign`](#exponentminussign)\n\nThe exponent minus sign string (\"-\").\n\n[`exponentSeparator`](#exponentseparator)\n\nThe exponent separator, when `notation` is set to `scientific` or `engineering`.\n\n[`fraction`](#fraction)\n\nThe fraction number.\n\n[`group`](#group)\n\nThe group separator string (\",\").\n\n[`infinity`](#infinity)\n\nThe [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) string (\"∞\").\n\n[`integer`](#integer)\n\nThe integer number.\n\n[`literal`](#literal)\n\nAny literal strings or whitespace in the formatted number.\n\n[`minusSign`](#minussign)\n\nThe minus sign string (\"-\").\n\n[`nan`](#nan)\n\nThe [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) string (\"NaN\").\n\n[`plusSign`](#plussign)\n\nThe plus sign string (\"+\").\n\n[`percentSign`](#percentsign)\n\nThe percent sign string (\"%\").\n\n[`unit`](#unit)\n\nThe unit string, such as the \"l\" or \"litres\", depending on how `unitDisplay` is specified.\n\n[`unknown`](#unknown)\n\nThe string for `unknown` type results.\n\n## [Examples](#examples)\n\n### [Comparing format and formatToParts](#comparing_format_and_formattoparts)\n\n`NumberFormat` outputs localized, opaque strings that cannot be manipulated directly:\n\n```\nconst number = 3500;\n\nconst formatter = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nformatter.format(number);\n// \"3.500,00 €\"\n```\n\nHowever, in many User Interfaces there is a desire to customize the formatting of this string. The `formatToParts` method enables locale-aware formatting of strings produced by `NumberFormat` formatters by providing you the string in parts:\n\n```\nformatter.formatToParts(number);\n\n// return value:\n[\n  { type: \"integer\", value: \"3\" },\n  { type: \"group\", value: \".\" },\n  { type: \"integer\", value: \"500\" },\n  { type: \"decimal\", value: \",\" },\n  { type: \"fraction\", value: \"00\" },\n  { type: \"literal\", value: \" \" },\n  { type: \"currency\", value: \"€\" },\n];\n```\n\nNow the information is available separately and it can be formatted and concatenated again in a customized way. For example by using [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), a [switch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch), [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), and [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\n```\nconst numberString = formatter\n  .formatToParts(number)\n  .map(({ type, value }) => {\n    switch (type) {\n      case \"currency\":\n        return `<strong>${value}</strong>`;\n      default:\n        return value;\n    }\n  })\n  .reduce((string, part) => string + part);\n```\n\nThis will make the currency bold, when using the `formatToParts()` method.\n\n```\nconsole.log(numberString);\n// \"3.500,00 <strong>€</strong>\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.formattoparts](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.formattoparts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.NumberFormat.prototype.formatToParts() - JavaScript | MDN",
    "description": "The formatToParts() method of Intl.NumberFormat instances allows locale-aware formatting of strings produced by this Intl.NumberFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRangeToParts",
    "markdown": "# Intl.NumberFormat.prototype.formatRangeToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatRangeToParts()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the locale-specific tokens from which it is possible to build custom strings while preserving the locale-specific parts. This makes it possible to provide locale-aware custom formatting ranges of number strings.\n\n## [Syntax](#syntax)\n\n```\nformatRangeToParts(startRange, endRange)\n```\n\n### [Parameters](#parameters)\n\n[`startRange`](#startrange)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n[`endRange`](#endrange)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted range of numbers in parts.\n\nThe structure of the returned looks like this:\n\n```\n[\n  { type: \"integer\", value: \"3\", source: \"startRange\" },\n  { type: \"literal\", value: \"-\", source: \"shared\" },\n  { type: \"integer\", value: \"5\", source: \"endRange\" },\n  { type: \"literal\", value: \" \", source: \"shared\" },\n  { type: \"currency\", value: \"€\", source: \"shared\" },\n];\n```\n\nPossible values for the `type` property include:\n\n[`currency`](#currency)\n\nThe currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\", depending on how `currencyDisplay` is specified.\n\n[`decimal`](#decimal)\n\nThe decimal separator string (\".\").\n\n[`fraction`](#fraction)\n\nThe fraction number.\n\n[`group`](#group)\n\nThe group separator string (\",\").\n\n[`infinity`](#infinity)\n\nThe [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) string (\"∞\").\n\n[`integer`](#integer)\n\nThe integer number.\n\n[`literal`](#literal)\n\nAny literal strings or whitespace in the formatted number.\n\n[`minusSign`](#minussign)\n\nThe minus sign string (\"-\").\n\n[`nan`](#nan)\n\nThe [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) string (\"NaN\").\n\n[`plusSign`](#plussign)\n\nThe plus sign string (\"+\").\n\n[`percentSign`](#percentsign)\n\nThe percent sign string (\"%\").\n\n[`unit`](#unit)\n\nThe unit string, such as the \"l\" or \"litres\", depending on how `unitDisplay` is specified.\n\nPossible values for the `source` property include:\n\n[`startRange`](#startrange_2)\n\nThe object is the start part of the range.\n\n[`endRange`](#endrange_2)\n\nThe object is the end part of the range.\n\n[`shared`](#shared)\n\nThe object is a \"shared\" part of the range, such as a separator or currency.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `startRange` is less than `endRange`, or either value is `NaN`.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if either `startRange` or `endRange` is undefined.\n\n## [Examples](#examples)\n\n### [Comparing formatRange and formatRangeToParts](#comparing_formatrange_and_formatrangetoparts)\n\n`NumberFormat` outputs localized, opaque strings that cannot be manipulated directly:\n\n```\nconst startRange = 3500;\nconst endRange = 9500;\n\nconst formatter = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nconsole.log(formatter.formatRange(startRange, endRange));\n// \"3.500,00–9.500,00 €\"\n```\n\nHowever, for many user interfaces there is a need to customize the formatting of this string. The `formatRangeToParts` method enables locale-aware formatting of strings produced by `NumberFormat` formatters by providing you the string in parts:\n\n```\nconsole.log(formatter.formatRangeToParts(startRange, endRange));\n\n// return value:\n[\n  { type: \"integer\", value: \"3\", source: \"startRange\" },\n  { type: \"group\", value: \".\", source: \"startRange\" },\n  { type: \"integer\", value: \"500\", source: \"startRange\" },\n  { type: \"decimal\", value: \",\", source: \"startRange\" },\n  { type: \"fraction\", value: \"00\", source: \"startRange\" },\n  { type: \"literal\", value: \"–\", source: \"shared\" },\n  { type: \"integer\", value: \"9\", source: \"endRange\" },\n  { type: \"group\", value: \".\", source: \"endRange\" },\n  { type: \"integer\", value: \"500\", source: \"endRange\" },\n  { type: \"decimal\", value: \",\", source: \"endRange\" },\n  { type: \"fraction\", value: \"00\", source: \"endRange\" },\n  { type: \"literal\", value: \" \", source: \"shared\" },\n  { type: \"currency\", value: \"€\", source: \"shared\" },\n];\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.formatrangetoparts](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.formatrangetoparts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.NumberFormat.prototype.formatRangeToParts() - JavaScript | MDN",
    "description": "The formatRangeToParts() method of Intl.NumberFormat instances returns an Array of objects containing the locale-specific tokens from which it is possible to build custom strings while preserving the locale-specific parts. This makes it possible to provide locale-aware custom formatting ranges of number strings.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter",
    "markdown": "# Intl.Segmenter() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Segmenter()`** constructor creates [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.Segmenter()\nnew Intl.Segmenter(locales)\nnew Intl.Segmenter(locales, options)\n```\n\n**Note:** `Intl.Segmenter()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`granularity`](#granularity)\n\nHow granularly should the input be split. Possible values are:\n\n[`\"grapheme\"`](#grapheme) (default)\n\nSplit the input into segments at grapheme cluster (user-perceived character) boundaries, as determined by the locale.\n\n[`\"word\"`](#word)\n\nSplit the input into segments at word boundaries, as determined by the locale.\n\n[`\"sentence\"`](#sentence)\n\nSplit the input into segments at sentence boundaries, as determined by the locale.\n\n### [Return value](#return_value)\n\nA new [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) instance.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nThe following example shows how to count words in a string using the Japanese language (where splitting the string using `String` methods would have given an incorrect result).\n\n```\nconst text = \"吾輩は猫である。名前はたぬき。\";\nconst japaneseSegmenter = new Intl.Segmenter(\"ja-JP\", { granularity: \"word\" });\nconsole.log(\n  [...japaneseSegmenter.segment(text)].filter((segment) => segment.isWordLike)\n    .length,\n);\n// 8, as the text is segmented as '吾輩'|'は'|'猫'|'で'|'ある'|'。'|'名前'|'は'|'たぬき'|'。'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-segmenter-constructor](https://tc39.es/ecma402/#sec-intl-segmenter-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser",
    "title": "Intl.Segmenter() constructor - JavaScript | MDN",
    "description": "The Intl.Segmenter() constructor creates Intl.Segmenter objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/supportedLocalesOf",
    "markdown": "# Intl.Segmenter.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Segmenter.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in segmentation without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.Segmenter.supportedLocalesOf(locales)\nIntl.Segmenter.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in segmentation without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in segmentation, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to segmentation nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.Segmenter.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.segmenter.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.segmenter.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Segmenter.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.Segmenter.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in segmentation without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/resolvedOptions",
    "markdown": "# Intl.Segmenter.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) instances returns a new object with properties reflecting the locale and granularity options computed during the initialization of this `Intl.Segmenter` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and collation options computed during the initialization of the given [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) object.\n\n## [Description](#description)\n\nThe resulting object has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`granularity`](#granularity)\n\nThe value provided for this property in the `options` argument or filled in as the default.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\n```\nconst spanishSegmenter = new Intl.Segmenter(\"es\", { granularity: \"sentence\" });\nconst options = spanishSegmenter.resolvedOptions();\nconsole.log(options.locale); // \"es\"\nconsole.log(options.granularity); // \"sentence\"\n```\n\n### [Default granularity](#default_granularity)\n\n```\nconst spanishSegmenter = new Intl.Segmenter(\"es\");\nconst options = spanishSegmenter.resolvedOptions();\nconsole.log(options.locale); // \"es\"\nconsole.log(options.granularity); // \"grapheme\"\n```\n\n### [Fallback locale](#fallback_locale)\n\n```\nconst banSegmenter = new Intl.Segmenter(\"ban\");\nconst options = banSegmenter.resolvedOptions();\nconsole.log(options.locale);\n// \"fr\" on a runtime where the Balinese locale\n// is not supported and French is the default locale\nconsole.log(options.granularity); // \"grapheme\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.segmenter.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.segmenter.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser",
    "title": "Intl.Segmenter.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.Segmenter instances returns a new object with properties reflecting the locale and granularity options computed during the initialization of this Intl.Segmenter object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat",
    "markdown": "# Intl.NumberFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.NumberFormat()`** constructor creates [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.NumberFormat()\nnew Intl.NumberFormat(locales)\nnew Intl.NumberFormat(locales, options)\n\nIntl.NumberFormat()\nIntl.NumberFormat(locales)\nIntl.NumberFormat(locales, options)\n```\n\n**Note:** `Intl.NumberFormat()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Intl.NumberFormat` instance. However, there's a special behavior when it's called without `new` and the `this` value is another `Intl.NumberFormat` instance; see [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension key is allowed:\n\n[`nu`](#nu)\n\nSee [`numberingSystem`](#numberingsystem).\n\nThis key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object. For ease of reading, the property list is broken into sections based on their purposes, including [locale options](#locale_options), [style options](#style_options), [digit options](#digit_options), and [other options](#other_options).\n\n#### Locale options\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n#### Style options\n\nDepending on the `style` used, some of them may be ignored, and others may be required:\n\n[`style`](#style)\n\nThe formatting style to use.\n\n[`\"decimal\"`](#decimal) (default)\n\nFor plain number formatting.\n\n[`\"currency\"`](#currency)\n\nFor currency formatting.\n\n[`\"percent\"`](#percent)\n\nFor percent formatting.\n\n[`\"unit\"`](#unit)\n\nFor unit formatting.\n\n[`currency`](#currency_2)\n\nThe currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as `\"USD\"` for the US dollar, `\"EUR\"` for the euro, or `\"CNY\"` for the Chinese RMB — see the [Current currency & funds code list](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes). There is no default value; if the `style` is `\"currency\"`, the `currency` property must be provided.\n\n[`currencyDisplay`](#currencydisplay)\n\nHow to display the currency in currency formatting.\n\n[`\"code\"`](#code)\n\nUse the ISO currency code.\n\n[`\"symbol\"`](#symbol) (default)\n\nUse a localized currency symbol such as €.\n\n[`\"narrowSymbol\"`](#narrowsymbol)\n\nUse a narrow format symbol (\"$100\" rather than \"US$100\").\n\n[`\"name\"`](#name)\n\nUse a localized currency name such as `\"dollar\"`.\n\n[`currencySign`](#currencysign)\n\nIn many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. Possible values are `\"standard\"` and `\"accounting\"`; the default is `\"standard\"`.\n\n[`unit`](#unit_2)\n\nThe unit to use in `unit` formatting, Possible values are core unit identifiers, defined in [UTS #35, Part 2, Section 6](https://unicode.org/reports/tr35/tr35-general.html#Unit_Elements). A [subset](https://tc39.es/ecma402/#table-sanctioned-single-unit-identifiers) of units from the [full list](https://github.com/unicode-org/cldr/blob/main/common/validity/unit.xml) was selected for use in ECMAScript. Pairs of simple units can be concatenated with \"-per-\" to make a compound unit. There is no default value; if the `style` is `\"unit\"`, the `unit` property must be provided.\n\n[`unitDisplay`](#unitdisplay)\n\nThe unit formatting style to use in `unit` formatting. Possible values are:\n\n[`\"short\"`](#short) (default)\n\nE.g., `16 l`.\n\n[`\"narrow\"`](#narrow)\n\nE.g., `16l`.\n\n[`\"long\"`](#long)\n\nE.g., `16 litres`.\n\n#### Digit options\n\nThe following properties are also supported by [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules).\n\n[`minimumIntegerDigits`](#minimumintegerdigits)\n\nThe minimum number of integer digits to use. A value with a smaller number of integer digits than this number will be left-padded with zeros (to the specified length) when formatted. Possible values are from `1` to `21`; the default is `1`.\n\n[`minimumFractionDigits`](#minimumfractiondigits)\n\nThe minimum number of fraction digits to use. Possible values are from `0` to `100`; the default for plain number and percent formatting is `0`; the default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml) (2 if the list doesn't provide that information).\n\n[`maximumFractionDigits`](#maximumfractiondigits)\n\nThe maximum number of fraction digits to use. Possible values are from `0` to `100`; the default for plain number formatting is the larger of `minimumFractionDigits` and `3`; the default for currency formatting is the larger of `minimumFractionDigits` and the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml) (2 if the list doesn't provide that information); the default for percent formatting is the larger of `minimumFractionDigits` and 0.\n\n[`minimumSignificantDigits`](#minimumsignificantdigits)\n\nThe minimum number of significant digits to use. Possible values are from `1` to `21`; the default is `1`.\n\n[`maximumSignificantDigits`](#maximumsignificantdigits)\n\nThe maximum number of significant digits to use. Possible values are from `1` to `21`; the default is `21`.\n\nThe above properties fall into two groups: `minimumIntegerDigits`, `minimumFractionDigits`, and `maximumFractionDigits` in one group, `minimumSignificantDigits` and `maximumSignificantDigits` in the other. If properties from both groups are specified, conflicts in the resulting display format are resolved based on the value of the [`roundingPriority`](#roundingpriority) property.\n\n[`roundingPriority`](#roundingpriority)\n\nSpecify how rounding conflicts will be resolved if both \"FractionDigits\" ([`minimumFractionDigits`](#minimumfractiondigits)/[`maximumFractionDigits`](#maximumfractiondigits)) and \"SignificantDigits\" ([`minimumSignificantDigits`](#minimumsignificantdigits)/[`maximumSignificantDigits`](#maximumsignificantdigits)) are specified. Possible values are:\n\n[`\"auto\"`](#auto) (default)\n\nThe result from the significant digits property is used.\n\n[`\"morePrecision\"`](#moreprecision)\n\nThe result from the property that results in more precision is used.\n\n[`\"lessPrecision\"`](#lessprecision)\n\nThe result from the property that results in less precision is used.\n\nNote that for values other than `auto` the result with more precision is calculated from the [`maximumSignificantDigits`](#minimumsignificantdigits) and [`maximumFractionDigits`](#maximumfractiondigits) (minimum fractional and significant digit settings are ignored).\n\n[`roundingIncrement`](#roundingincrement)\n\nIndicates the increment at which rounding should take place relative to the calculated rounding magnitude. Possible values are `1`, `2`, `5`, `10`, `20`, `25`, `50`, `100`, `200`, `250`, `500`, `1000`, `2000`, `2500`, and `5000`. It cannot be mixed with significant-digits rounding or any setting of `roundingPriority` other than `auto`.\n\n[`roundingMode`](#roundingmode)\n\nHow decimals should be rounded. Possible values are:\n\n[`\"ceil\"`](#ceil)\n\nRound toward +∞. Positive values round up. Negative values round \"more positive\".\n\n[`\"floor\"`](#floor)\n\nRound toward -∞. Positive values round down. Negative values round \"more negative\".\n\n[`\"expand\"`](#expand)\n\nround away from 0. The _magnitude_ of the value is always increased by rounding. Positive values round up. Negative values round \"more negative\".\n\n[`\"trunc\"`](#trunc)\n\nRound toward 0. This _magnitude_ of the value is always reduced by rounding. Positive values round down. Negative values round \"less negative\".\n\n[`\"halfCeil\"`](#halfceil)\n\nties toward +∞. Values above the half-increment round like `\"ceil\"` (towards +∞), and below like `\"floor\"` (towards -∞). On the half-increment, values round like `\"ceil\"`.\n\n[`\"halfFloor\"`](#halffloor)\n\nTies toward -∞. Values above the half-increment round like `\"ceil\"` (towards +∞), and below like `\"floor\"` (towards -∞). On the half-increment, values round like `\"floor\"`.\n\n[`\"halfExpand\"`](#halfexpand) (default)\n\nTies away from 0. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment, values round like `\"expand\"`.\n\n[`\"halfTrunc\"`](#halftrunc)\n\nTies toward 0. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment, values round like `\"trunc\"`.\n\n[`\"halfEven\"`](#halfeven)\n\nTies towards the nearest even integer. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment values round towards the nearest even digit.\n\nThese options reflect the [ICU user guide](https://unicode-org.github.io/icu/userguide/format_parse/numbers/rounding-modes.html), where \"expand\" and \"trunc\" map to ICU \"UP\" and \"DOWN\", respectively. The [rounding modes](#rounding_modes) example below demonstrates how each mode works.\n\n[`trailingZeroDisplay`](#trailingzerodisplay)\n\nThe strategy for displaying trailing zeros on whole numbers. Possible values are:\n\n[`\"auto\"`](#auto_2) (default)\n\nKeep trailing zeros according to `minimumFractionDigits` and `minimumSignificantDigits`.\n\n[`\"stripIfInteger\"`](#stripifinteger)\n\nRemove the fraction digits _if_ they are all zero. This is the same as `\"auto\"` if any of the fraction digits is non-zero.\n\n#### Other options\n\n[`notation`](#notation)\n\nThe formatting that should be displayed for the number. Possible values are:\n\n[`\"standard\"`](#standard) (default)\n\nPlain number formatting.\n\n[`\"scientific\"`](#scientific)\n\nReturn the order-of-magnitude for formatted number.\n\n[`\"engineering\"`](#engineering)\n\nReturn the exponent of ten when divisible by three.\n\n[`\"compact\"`](#compact)\n\nString representing exponent; defaults to using the \"short\" form.\n\n[`compactDisplay`](#compactdisplay)\n\nOnly used when `notation` is `\"compact\"`. Possible values are `\"short\"` and `\"long\"`; the default is `\"short\"`.\n\n[`useGrouping`](#usegrouping)\n\nWhether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.\n\n[`\"always\"`](#always)\n\nDisplay grouping separators even if the locale prefers otherwise.\n\n[`\"auto\"`](#auto_3)\n\nDisplay grouping separators based on the locale preference, which may also be dependent on the currency.\n\n[`\"min2\"`](#min2)\n\nDisplay grouping separators when there are at least 2 digits in a group.\n\n[`true`](#true)\n\nSame as `\"always\"`.\n\n[`false`](#false)\n\nDisplay no grouping separators.\n\nThe default is `\"min2\"` if `notation` is `\"compact\"`, and `\"auto\"` otherwise. The string values `\"true\"` and `\"false\"` are accepted, but are always converted to the default value.\n\n[`signDisplay`](#signdisplay)\n\nWhen to display the sign for the number. Possible values are:\n\n[`\"auto\"`](#auto_4) (default)\n\nSign display for negative numbers only, including negative zero.\n\n[`\"always\"`](#always_2)\n\nAlways display sign.\n\n[`\"exceptZero\"`](#exceptzero)\n\nSign display for positive and negative numbers, but not zero.\n\n[`\"negative\"`](#negative)\n\nSign display for negative numbers only, excluding negative zero.\n\n[`\"never\"`](#never)\n\nNever display sign.\n\n### [Return value](#return_value)\n\nA new `Intl.NumberFormat` object.\n\n**Note:** The text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the [browser compatibility table](#browser_compatibility).\n\nNormally, `Intl.NumberFormat()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), and a new `Intl.NumberFormat` instance is returned in both cases. However, if the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) value is an object that is [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) `Intl.NumberFormat` (doesn't necessarily mean it's created via `new Intl.NumberFormat`; just that it has `Intl.NumberFormat.prototype` in its prototype chain), then the value of `this` is returned instead, with the newly created `Intl.NumberFormat` object hidden in a `[Symbol(IntlLegacyConstructedSymbol)]` property (a unique symbol that's reused between instances).\n\n```\nconst formatter = Intl.NumberFormat.call(\n  { __proto__: Intl.NumberFormat.prototype },\n  \"en-US\",\n  { notation: \"scientific\" },\n);\nconsole.log(Object.getOwnPropertyDescriptors(formatter));\n// {\n//   [Symbol(IntlLegacyConstructedSymbol)]: {\n//     value: NumberFormat [Intl.NumberFormat] {},\n//     writable: false,\n//     enumerable: false,\n//     configurable: false\n//   }\n// }\n```\n\nNote that there's only one actual `Intl.NumberFormat` instance here: the one hidden in `[Symbol(IntlLegacyConstructedSymbol)]`. Calling the [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format) and [`resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) methods on `formatter` would correctly use the options stored in that instance, but calling all other methods (e.g. [`formatRange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange)) would fail with \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n\nThis behavior, called `ChainNumberFormat`, does not happen when `Intl.NumberFormat()` is called without `new` but with `this` set to anything else that's not an `instanceof Intl.NumberFormat`. If you call it directly as `Intl.NumberFormat()`, the `this` value is [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl), and a new `Intl.NumberFormat` instance is created normally.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown in one of the following cases:\n\n*   A property that takes enumerated values (such as `style`, `units`, `currency`, and so on) is set to an invalid value.\n*   Both `maximumFractionDigits` and `minimumFractionDigits` are set, and they are set to different values. Note that depending on various formatting options, these properties can have default values. It is therefore possible to get this error even if you only set one of the properties.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the `options.style` property is set to \"unit\" or \"currency\", and no value has been set for the corresponding property `options.unit` or `options.currency`.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned.\n\n```\nconst amount = 3500;\n\nconsole.log(new Intl.NumberFormat().format(amount));\n// '3,500' if in US English locale\n```\n\n### [Decimal and percent formatting](#decimal_and_percent_formatting)\n\n```\nconst amount = 3500;\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n}).format(amount); // '3,500'\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n}).format(amount); // '350,000%'\n```\n\n### [Unit formatting](#unit_formatting)\n\nIf the `style` is `'unit'`, a `unit` property must be provided. Optionally, `unitDisplay` controls the unit formatting.\n\n```\nconst amount = 3500;\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"unit\",\n  unit: \"liter\",\n}).format(amount); // '3,500 L'\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"unit\",\n  unit: \"liter\",\n  unitDisplay: \"long\",\n}).format(amount); // '3,500 liters'\n```\n\n### [Currency formatting](#currency_formatting)\n\nIf the `style` is `'currency'`, a `currency` property must be provided. Optionally, `currencyDisplay` and `currencySign` control the unit formatting.\n\n```\nconst amount = -3500;\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n}).format(amount); // '-$3,500.00'\n\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencyDisplay: \"name\",\n}).format(amount); // '-3,500.00 US dollars'\n\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencySign: \"accounting\",\n}).format(amount); // '($3,500.00)'\n```\n\n### [Scientific, engineering or compact notations](#scientific_engineering_or_compact_notations)\n\nScientific and compact notation are represented by the `notation` option and can be formatted like this:\n\n```\nnew Intl.NumberFormat(\"en-US\", {\n  notation: \"scientific\",\n}).format(987654321);\n// 9.877E8\n\nnew Intl.NumberFormat(\"pt-PT\", {\n  notation: \"scientific\",\n}).format(987654321);\n// 9,877E8\n\nnew Intl.NumberFormat(\"en-GB\", {\n  notation: \"engineering\",\n}).format(987654321);\n// 987.654E6\n\nnew Intl.NumberFormat(\"de\", {\n  notation: \"engineering\",\n}).format(987654321);\n// 987,654E6\n\nnew Intl.NumberFormat(\"zh-CN\", {\n  notation: \"compact\",\n}).format(987654321);\n// 9.9亿\n\nnew Intl.NumberFormat(\"fr\", {\n  notation: \"compact\",\n  compactDisplay: \"long\",\n}).format(987654321);\n// 988 millions\n\nnew Intl.NumberFormat(\"en-GB\", {\n  notation: \"compact\",\n  compactDisplay: \"short\",\n}).format(987654321);\n// 988M\n```\n\n### [Displaying signs](#displaying_signs)\n\nDisplay a sign for positive and negative numbers, but not zero:\n\n```\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  signDisplay: \"exceptZero\",\n}).format(0.55);\n// '+55%'\n```\n\nNote that when the currency sign is \"accounting\", parentheses might be used instead of a minus sign:\n\n```\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencySign: \"accounting\",\n  signDisplay: \"always\",\n}).format(-3500);\n// '($3,500.00)'\n```\n\n### [FractionDigits, SignificantDigits and IntegerDigits](#fractiondigits_significantdigits_and_integerdigits)\n\nYou can specify the minimum or maximum number of fractional, integer or significant digits to display when formatting a number.\n\n**Note:** If both significant and fractional digit limits are specified, then the actual formatting depends on the [`roundingPriority`](#roundingpriority).\n\n#### Using FractionDigits and IntegerDigits\n\nThe integer and fraction digit properties indicate the number of digits to display before and after the decimal point, respectively. If the value to display has fewer integer digits than specified, it will be left-padded with zeros to the expected number. If it has fewer fractional digits, it will be right-padded with zeros. Both cases are shown below:\n\n```\n// Formatting adds zeros to display minimum integers and fractions\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumIntegerDigits: 3,\n    minimumFractionDigits: 4,\n  }).format(4.33),\n);\n// \"004.3300\"\n```\n\nIf a value has more fractional digits than the specified maximum number, it will be rounded. The _way_ that it is rounded depends on the [`roundingMode`](#roundingmode) property (more details are provided in the [rounding modes](#rounding_modes) section). Below the value is rounded from five fractional digits (`4.33145`) to two (`4.33`):\n\n```\n// Display value shortened to maximum number of digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 2,\n  }).format(4.33145),\n);\n// \"4.33\"\n```\n\nThe minimum fractional digits have no effect if the value already has more than 2 fractional digits:\n\n```\n// Minimum fractions have no effect if value is higher precision.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumFractionDigits: 2,\n  }).format(4.33145),\n);\n// \"4.331\"\n```\n\n**Warning:** Watch out for default values as they may affect formatting even if not specified in your code. The default maximum digit value is `3` for plain values, `2` for currency, and may have different values for other predefined types.\n\nThe formatted value above is rounded to 3 digits, even though we didn't specify the maximum digits! This is because a default value of `maximumFractionDigits` is set when we specify `minimumFractionDigits`, and visa versa. The default values of `maximumFractionDigits` and `minimumFractionDigits` are `3` and `0`, respectively.\n\nYou can use [`resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) to inspect the formatter.\n\n```\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumFractionDigits: 0,\n//   maximumFractionDigits: 2,\n//   …\n// }\n\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumFractionDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumFractionDigits: 2,\n//   maximumFractionDigits: 3,\n//   …\n// }\n```\n\n#### Using SignificantDigits\n\nThe number of _significant digits_ is the total number of digits including both integer and fractional parts. The `maximumSignificantDigits` is used to indicate the total number of digits from the original value to display.\n\nThe examples below show how this works. Note in particular the last case: only the first digit is retained and the others are discarded/set to zero.\n\n```\n// Display 5 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 5,\n  }).format(54.33145),\n);\n// \"54.331\"\n\n// Max 2 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(54.33145),\n);\n// \"54\"\n\n// Max 1 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 1,\n  }).format(54.33145),\n);\n// \"50\"\n```\n\nThe `minimumSignificantDigits` ensures that at least the specified number of digits are displayed, adding zeros to the end of the value if needed.\n\n```\n// Minimum 10 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumSignificantDigits: 10,\n  }).format(54.33145),\n);\n// \"54.33145000\"\n```\n\n**Warning:** Watch out for default values as they may affect formatting. If only one `SignificantDigits` property is used, then its counterpart will automatically be applied with the default value. The default maximum and minimum significant digit values are 20 and 1, respectively.\n\n#### Specifying significant and fractional digits at the same time\n\nThe fraction digits ([`minimumFractionDigits`](#minimumfractiondigits)/[`maximumFractionDigits`](#maximumfractiondigits)) and significant digits ([`minimumSignificantDigits`](#minimumsignificantdigits)/[`maximumSignificantDigits`](#maximumsignificantdigits)) are both ways of controlling how many fractional and leading digits should be formatted. If both are used at the same time, it is possible for them to conflict.\n\nThese conflicts are resolved using the [`roundingPriority`](#roundingpriority) property. By default, this has a value of `\"auto\"`, which means that if either [`minimumSignificantDigits`](#minimumsignificantdigits) or [`maximumSignificantDigits`](#minimumsignificantdigits) is specified, the fractional and integer digit properties will be ignored.\n\nFor example, the code below formats the value of `4.33145` with `maximumFractionDigits: 3`, and then `maximumSignificantDigits: 2`, and then both. The value with both is the one set with `maximumSignificantDigits`.\n\n```\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n  }).format(4.33145),\n);\n// \"4.331\"\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(4.33145),\n);\n// \"4.3\"\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    maximumSignificantDigits: 2,\n  }).format(4.33145),\n);\n// \"4.3\"\n```\n\nUsing [`resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) to inspect the formatter, we can see that the returned object does not include `maximumFractionDigits` when `maximumSignificantDigits` or `minimumSignificantDigits` are specified.\n\n```\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    maximumSignificantDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumSignificantDigits: 1,\n//   maximumSignificantDigits: 2,\n//   …\n// }\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    minimumSignificantDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumSignificantDigits: 2,\n//   maximumSignificantDigits: 21,\n//   …\n// }\n```\n\nIn addition to `\"auto\"`, you can resolve conflicts by specifying [`roundingPriority`](#roundingpriority) as `\"morePrecision\"` or `\"lessPrecision\"`. The formatter calculates the precision using the values of `maximumSignificantDigits` and `maximumFractionDigits`.\n\nThe code below shows the format being selected for the three different rounding priorities:\n\n```\nconst maxFracNF = new Intl.NumberFormat(\"en\", {\n  maximumFractionDigits: 3,\n});\nconsole.log(`maximumFractionDigits:3 - ${maxFracNF.format(1.23456)}`);\n// \"maximumFractionDigits:2 - 1.235\"\n\nconst maxSigNS = new Intl.NumberFormat(\"en\", {\n  maximumSignificantDigits: 3,\n});\nconsole.log(`maximumSignificantDigits:3 - ${maxSigNS.format(1.23456)}`);\n// \"maximumSignificantDigits:3 - 1.23\"\n\nconst bothAuto = new Intl.NumberFormat(\"en\", {\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`auto - ${bothAuto.format(1.23456)}`);\n// \"auto - 1.23\"\n\nconst bothLess = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"lessPrecision\",\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`lessPrecision - ${bothLess.format(1.23456)}`);\n// \"lessPrecision - 1.23\"\n\nconst bothMore = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"morePrecision\",\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`morePrecision - ${bothMore.format(1.23456)}`);\n// \"morePrecision - 1.235\"\n```\n\nNote that the algorithm can behave in an unintuitive way if a minimum value is specified without a maximum value. The example below formats the value `1` specifying `minimumFractionDigits: 2` (formatting to `1.00`) and `minimumSignificantDigits: 2` (formatting to `1.0`). Since `1.00` has more digits than `1.0`, this should be the result when prioritizing `morePrecision`, but in fact the opposite is true:\n\n```\nconst bothLess = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"lessPrecision\",\n  minimumFractionDigits: 2,\n  minimumSignificantDigits: 2,\n});\nconsole.log(`lessPrecision - ${bothLess.format(1)}`);\n// \"lessPrecision - 1.00\"\n\nconst bothMore = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"morePrecision\",\n  minimumFractionDigits: 2,\n  minimumSignificantDigits: 2,\n});\nconsole.log(`morePrecision - ${bothMore.format(1)}`);\n// \"morePrecision - 1.0\"\n```\n\nThe reason for this is that only the \"maximum precision\" values are used for the calculation, and the default value of `maximumSignificantDigits` is much higher than `maximumFractionDigits`.\n\n**Note:** The working group have proposed a modification of the algorithm where the formatter should evaluate the result of using the specified fractional and significant digits independently (taking account of both minimum and maximum values). It will then select the option that displays more fractional digits if `morePrecision` is set, and fewer if `lessPrecision` is set. This will result in more intuitive behavior for this case.\n\n### [Rounding modes](#rounding_modes)\n\nIf a value has more fractional digits than allowed by the constructor options, the formatted value will be _rounded_ to the specified number of fractional digits. The _way_ in which the value is rounded depends on the [`roundingMode`](#roundingmode) property.\n\nNumber formatters use `halfExpand` rounding by default, which rounds values \"away from zero\" at the half-increment (in other words, the _magnitude_ of the value is rounded up).\n\nFor a positive number, if the fractional digits to be removed are closer to the next increment (or on the half way point) then the remaining fractional digits will be rounded up, otherwise they are rounded down. This is shown below: 2.23 rounded to two significant digits is truncated to 2.2 because 2.23 is less than the half increment 2.25, while values of 2.25 and greater are rounded up to 2.3:\n\n```\n// Value below half-increment: round down.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.23),\n);\n// \"2.2\"\n\n// Value on or above half-increment: round up.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.25),\n);\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.28),\n);\n// \"2.3\"\n// \"2.3\"\n```\n\nA negative number on or below the half-increment point is also rounded away from zero (becomes more negative):\n\n```\n// Value below half-increment: round down.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.23),\n);\n// \"-2.2\"\n\n// Value on or above half-increment: round up.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.25),\n);\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.28),\n);\n// \"-2.3\"\n// \"-2.3\"\n```\n\nThe table below show the effect of different rounding modes for positive and negative values that are on and around the half-increment.\n\n| rounding mode | 2.23 | 2.25 | 2.28 | \\-2.23 | \\-2.25 | \\-2.28 |\n| --- | --- | --- | --- | --- | --- | --- |\n| `ceil` | 2.3 | 2.3 | 2.3 | \\-2.2 | \\-2.2 | \\-2.2 |\n| `floor` | 2.2 | 2.2 | 2.2 | \\-2.3 | \\-2.3 | \\-2.3 |\n| `expand` | 2.3 | 2.3 | 2.3 | \\-2.3 | \\-2.3 | \\-2.3 |\n| `trunc` | 2.2 | 2.2 | 2.2 | \\-2.2 | \\-2.2 | \\-2.2 |\n| `halfCeil` | 2.2 | 2.3 | 2.3 | \\-2.2 | \\-2.2 | \\-2.3 |\n| `halfFloor` | 2.2 | 2.2 | 2.3 | \\-2.2 | \\-2.3 | \\-2.3 |\n| `halfExpand` | 2.2 | 2.3 | 2.3 | \\-2.2 | \\-2.3 | \\-2.3 |\n| `halfTrunc` | 2.2 | 2.2 | 2.3 | \\-2.2 | \\-2.2 | \\-2.3 |\n| `halfEven` | 2.2 | 2.2 | 2.3 | \\-2.2 | \\-2.2 | \\-2.3 |\n\nWhen using `halfEven`, its behavior also depends on the parity (odd or even) of the last digit of the rounded number. For example, the behavior of `halfEven` in the table above is the same as `halfTrunc`, because the magnitudes of all numbers are between a smaller \"even\" number (2.2) and a larger \"odd\" number (2.3). If the numbers are between ±2.3 and ±2.4, `halfEven` will behave like `halfExpand` instead. This behavior avoids consistently under- or over-estimating half-increments in a large data sample.\n\n### [Using roundingIncrement](#using_roundingincrement)\n\nSometimes we want to round the remaining fractional digits to some other increment than the next integer. For example, currencies for which the smallest coin is 5 cents might want to round the value to increments of 5, reflecting amounts that can actually be paid in cash.\n\nThis kind of rounding can be achieved with the [`roundingIncrement`](#roundingincrement) property.\n\nFor example, if `maximumFractionDigits` is 2 and `roundingIncrement` is 5, then the number is rounded to the nearest 0.05:\n\n```\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n});\n\nconsole.log(nf.format(11.29)); // \"$11.30\"\nconsole.log(nf.format(11.25)); // \"$11.25\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\n```\n\nThis particular pattern is referred to as \"nickel rounding\", where nickel is the colloquial name for a USA 5 cent coin. To round to the nearest 10 cents (\"dime rounding\"), you could change `roundingIncrement` to `10`.\n\n```\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n});\n\nconsole.log(nf.format(11.29)); // \"$11.30\"\nconsole.log(nf.format(11.25)); // \"$11.25\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\n```\n\nYou can also use [`roundingMode`](#roundingmode) to change the rounding algorithm. The example below shows how `halfCeil` rounding can be used to round the value \"less positive\" below the half-rounding increment and \"more positive\" if above or on the half-increment. The incremented digit is \"0.05\" so the half-increment is at .025 (below, this is shown at 11.225).\n\n```\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n  roundingMode: \"halfCeil\",\n});\n\nconsole.log(nf.format(11.21)); // \"$11.20\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\nconsole.log(nf.format(11.224)); // \"$11.20\"\nconsole.log(nf.format(11.225)); // \"$11.25\"\nconsole.log(nf.format(11.23)); // \"$11.25\"\n```\n\nIf you need to change the number of digits, remember that `minimumFractionDigits` and `maximumFractionDigits` must both be set to the same value, or a `RangeError` is thrown.\n\n`roundingIncrement` cannot be mixed with significant-digits rounding or any setting of `roundingPriority` other than `auto`.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-numberformat-constructor](https://tc39.es/ecma402/#sec-intl-numberformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.NumberFormat() constructor - JavaScript | MDN",
    "description": "The Intl.NumberFormat() constructor creates Intl.NumberFormat objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/script",
    "markdown": "# Intl.Locale.prototype.script - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`script`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the script used for writing the particular language used in this locale.\n\n## [Description](#description)\n\nScript, sometimes called writing system, is one of the core attributes of a locale. It indicates the set of symbols, or glyphs, that are used to write a particular language. For instance, the script associated with English is Latin, whereas the script typically associated with Korean is Hangul. In many cases, denoting a script is not strictly necessary, since the language (which is necessary) is only written in a single script. There are exceptions to this rule, however, and it is important to indicate the script when multiple scripts are applicable. The `script` property's value is set at construction time, either through the `script` subtag (second part, if present) of the locale identifier or through the `script` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nThe set accessor of `script` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the script can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a script via the locale string](#adding_a_script_via_the_locale_string)\n\nThe script, if present, is the second part of a valid Unicode language identifier string, and can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. Note that the script is not a required part of a locale identifier.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.script); // Prints \"Latn\"\n```\n\n### [Adding a script via the configuration object argument](#adding_a_script_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument. Set the `script` property of the configuration object to your desired script, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"fr-FR\", { script: \"Latn\" });\nconsole.log(locale.script); // Prints \"Latn\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.script](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.script) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n*   [Unicode script subtag](https://www.unicode.org/reports/tr35/#unicode_script_subtag_validity) in the Unicode locale data markup language spec",
    "title": "Intl.Locale.prototype.script - JavaScript | MDN",
    "description": "The script accessor property of Intl.Locale instances returns the script used for writing the particular language used in this locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions",
    "markdown": "# Intl.NumberFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances returns a new object with properties reflecting the [locale and number formatting options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) computed during initialization of this `Intl.NumberFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the [locale and number formatting options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) computed during the construction of the given [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object.\n\nThe resulting object has the following properties:\n\n[`compactDisplay`](#compactdisplay)\n\nWhether to use short or long form when using compact notation. This is the value provided in the [`options.compactDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#compactdisplay) argument of the constructor, or the default value: `\"short\"`. The value is only present if `notation` is set to \"compact\", and otherwise is `undefined`.\n\n[`currency`](#currency)\n\nThe currency to use in currency formatting. The value is defined if `style` is `\"currency\"`, and is otherwise `undefined`. This is the value provided in the [`options.currency`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currency) argument of the constructor.\n\n[`currencyDisplay`](#currencydisplay)\n\nThe display format for the currency, such as a symbol, or currency code. The value is defined if `style` is `\"currency\"`, and otherwise is `undefined`. This is the value provided in the [`options.currencyDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currencydisplay) argument of the constructor, or the default value: `\"symbol\"`.\n\n[`currencySign`](#currencysign)\n\nThe method used to specify the sign of the currency value: `standard` or `accounting`. The value is present if `style` is `\"currency\"`, and otherwise is `undefined`. This is the value provided in the [`options.currencySign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currencysign) argument of the constructor, or the default value: `\"standard\"`.\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale that was actually used. Matches one of the locales that were requested in the constructor [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales).\n\n[`notation`](#notation)\n\nThe formatting that should be applied to the number, such as `standard` or `engineering`. This is the value provided in the [`options.notation`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#notation) argument of the constructor, or the default value: `\"standard\"`.\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system. This is the value provided in the [`options.numberingSystem`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#numberingsystem) argument of the constructor, if present, or the value set using the Unicode extension key [`nu`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#nu), or filled in as a default.\n\n[`roundingIncrement`](#roundingincrement)\n\nThe rounding-increment precision (the increment used when rounding numbers). This is the value specified in the [`options.roundingIncrement`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingincrement) argument in the constructor.\n\n[`roundingMode`](#roundingmode)\n\nThe rounding mode. This is the value provided for the [`options.roundingMode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode) argument in the constructor, or the default value: `halfExpand`.\n\n[`roundingPriority`](#roundingpriority)\n\nThe priority for resolving rounding conflicts if both \"FractionDigits\" and \"SignificantDigits\" are specified. This is the value provided for the [`options.roundingPriority`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingpriority) argument in the constructor, or the default value: `auto`.\n\n[`signDisplay`](#signdisplay)\n\nWhether or not to display the positive/negative sign. This is the value specified in the [`options.signDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#signdisplay) argument in the constructor, or the default value: `\"auto\"`.\n\n[`unit`](#unit)\n\nThe unit to use in unit formatting. The value is only present if `style` is `\"unit\"`, and is otherwise `undefined`. This is the value specified in the [`options.unit`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#unit) argument in the constructor.\n\n[`unitDisplay`](#unitdisplay)\n\nThe display format to use for units in unit formatting, such as \"long\", \"short\" or \"narrow\". The value is only present if `style` is `\"unit\"`, and is otherwise `undefined`. This is the value specified in the [`options.unitDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#unitdisplay) argument in the constructor, or the default value: `short`.\n\n[`useGrouping`](#usegrouping)\n\nWhether or not to use grouping separators to indicate \"thousands\", \"millions\" and son on. This is the value specified in the [`options.useGrouping`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#usegrouping) argument in the constructor, or the default value: `\"auto\"`.\n\n[`trailingZeroDisplay`](#trailingzerodisplay)\n\nThe strategy for displaying trailing zeros on whole numbers. This is the value specified in the [`options.trailingZeroDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#trailingzerodisplay) argument in the constructor, or the default value: `\"auto\"`.\n\nOnly one of the following two groups of properties is included:\n\n[`minimumIntegerDigits`](#minimumintegerdigits), `minimumFractionDigits`, `maximumFractionDigits`\n\nThe values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if neither `minimumSignificantDigits` nor `maximumSignificantDigits` was provided in the `options` argument.\n\n[`minimumSignificantDigits`](#minimumsignificantdigits), `maximumSignificantDigits`\n\nThe values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if at least one of them was provided in the `options` argument.\n\n## [Examples](#examples)\n\n### [Using the `resolvedOptions` method](#using_the_resolvedoptions_method)\n\n```\n// Create a NumberFormat\nconst de = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n  roundingMode: \"halfCeil\",\n});\n\n// Resolve the options\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.numberingSystem); // \"latn\"\nconsole.log(usedOptions.compactDisplay); // undefined (\"notation\" not set to \"compact\")\nconsole.log(usedOptions.currency); // \"USD\"\nconsole.log(usedOptions.currencyDisplay); // \"symbol\"\nconsole.log(usedOptions.currencySign); // \"standard\"\nconsole.log(usedOptions.minimumIntegerDigits); // 1\nconsole.log(usedOptions.minimumFractionDigits); // 2\nconsole.log(usedOptions.maximumFractionDigits); // 2\nconsole.log(usedOptions.minimumSignificantDigits); // undefined (maximumFractionDigits is set)\nconsole.log(usedOptions.maximumSignificantDigits); // undefined (maximumFractionDigits is set)\nconsole.log(usedOptions.notation); // \"standard\"\nconsole.log(usedOptions.roundingIncrement); // 5\nconsole.log(usedOptions.roundingMode); // halfCeil\nconsole.log(usedOptions.roundingPriority); // auto\nconsole.log(usedOptions.signDisplay); // \"auto\"\nconsole.log(usedOptions.style); // \"currency\"\nconsole.log(usedOptions.trailingZeroDisplay); // auto\nconsole.log(usedOptions.useGrouping); // auto\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.NumberFormat.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.NumberFormat instances returns a new object with properties reflecting the locale and number formatting options computed during initialization of this Intl.NumberFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/supportedLocalesOf",
    "markdown": "# Intl.ListFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.ListFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in list formatting without having to fall back to the runtime's default locale.\n\n## [Syntax](#syntax)\n\n```\nIntl.ListFormat.supportedLocalesOf(locales)\nIntl.ListFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in list formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in list formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to list formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.ListFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.ListFormat.supportedLocalesOf](https://tc39.es/ecma402/#sec-Intl.ListFormat.supportedLocalesOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.ListFormat.supportedLocalesOf() - JavaScript | MDN",
    "description": "The Intl.ListFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in list formatting without having to fall back to the runtime's default locale.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat",
    "markdown": "# Intl.ListFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.ListFormat()`** constructor creates [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.ListFormat()\nnew Intl.ListFormat(locales)\nnew Intl.ListFormat(locales, options)\n```\n\n**Note:** `Intl.ListFormat()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`type`](#type)\n\nIndicates the type of grouping. Possible values are:\n\n[`\"conjunction\"`](#conjunction) (default)\n\nFor \"and\"-based grouping of the list items: \"A, B, and C\"\n\n[`\"disjunction\"`](#disjunction)\n\nFor \"or\"-based grouping of the list items: \"A, B, or C\"\n\n[`\"unit\"`](#unit)\n\nFor grouping the list items as a unit (neither \"and\"-based nor \"or\"-based): \"A, B, C\"\n\n[`style`](#style)\n\nThe grouping style (for example, whether list separators and conjunctions are included). Possible values are:\n\n[`\"long\"`](#long) (default)\n\nE.g. \"A, B, and C\"\n\n[`\"short\"`](#short)\n\nE.g. \"A, B, C\"\n\n[`\"narrow\"`](#narrow)\n\nE.g. \"A B C\"\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nThe following example shows how to create a List formatter using the English language.\n\n```\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(new Intl.ListFormat(\"en-GB\", { style: \"long\" }).format(list));\n// Motorcycle, Bus and Car\n\nconsole.log(new Intl.ListFormat(\"en-US\", { style: \"long\" }).format(list));\n// Motorcycle, Bus, and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"short\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus, & Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus, Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(new Intl.ListFormat(\"en-US\", { style: \"narrow\" }).format(list));\n// Motorcycle, Bus, Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"unit\" }).format(list),\n);\n// Motorcycle Bus Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"long\" }).format([\n    \"30 degrees\",\n    \"15 minutes\",\n    \"50 seconds\",\n  ]),\n);\n// 30 degrees, 15 minutes, and 50 seconds\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"narrow\" }).format([\n    \"30 degrees\",\n    \"15 minutes\",\n    \"50 seconds\",\n  ]),\n);\n// 30 degrees, 15 minutes, 50 seconds\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"narrow\", type: \"unit\" }).format([\n    \"30°\",\n    \"15′\",\n    \"50″\",\n  ]),\n);\n// 30° 15′ 50″\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-listformat-constructor](https://tc39.es/ecma402/#sec-intl-listformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.ListFormat() constructor - JavaScript | MDN",
    "description": "The Intl.ListFormat() constructor creates Intl.ListFormat objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format",
    "markdown": "# Intl.ListFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`format()`** method of [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) instances returns a string with a language-specific representation of the list.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`list`](#list)\n\nAn iterable object, such as an Array.\n\n### [Return value](#return_value)\n\nA language-specific formatted string representing the elements of the list.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Description](#description)\n\nThe **`format()`** method returns a string that has been formatted based on parameters provided in the `Intl.ListFormat` object. The `locales` and `options` parameters customize the behavior of `format()` and let applications specify the language conventions that should be used to format the list.\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nThe following example shows how to create a List formatter using the English language.\n\n```\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"unit\" }).format(list),\n);\n// Motorcycle Bus Car\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.ListFormat.prototype.format](https://tc39.es/ecma402/#sec-Intl.ListFormat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.ListFormat.prototype.format() - JavaScript | MDN",
    "description": "The format() method of Intl.ListFormat instances returns a string with a\n  language-specific representation of the list.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/formatToParts",
    "markdown": "# Intl.ListFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatToParts()`** method of [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) instances returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the different components that can be used to format a list of values in a locale-aware fashion.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`list`](#list)\n\nAn iterable object, such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), to be formatted according to a locale.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of components which contains the formatted parts from the list.\n\n## [Description](#description)\n\nWhereas [`Intl.ListFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format) returns a string being the formatted version of the list (according to the given locale and style options), `formatToParts()` returns an array of the different components of the formatted string.\n\nEach element of the resulting array has two properties: `type` and `value`. The `type` property may be either `\"element\"`, which refers to a value from the list, or `\"literal\"` which refers to a linguistic construct. The `value` property gives the content, as a string, of the token.\n\nThe locale and style options used for formatting are given when constructing the [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) instance.\n\n## [Examples](#examples)\n\n### [Using formatToParts](#using_formattoparts)\n\n```\nconst fruits = [\"Apple\", \"Orange\", \"Pineapple\"];\nconst myListFormat = new Intl.ListFormat(\"en-GB\", {\n  style: \"long\",\n  type: \"conjunction\",\n});\n\nconsole.table(myListFormat.formatToParts(fruits));\n// [\n//  { \"type\": \"element\", \"value\": \"Apple\" },\n//  { \"type\": \"literal\", \"value\": \", \" },\n//  { \"type\": \"element\", \"value\": \"Orange\" },\n//  { \"type\": \"literal\", \"value\": \", and \" },\n//  { \"type\": \"element\", \"value\": \"Pineapple\" }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.ListFormat.prototype.formatToParts](https://tc39.es/ecma402/#sec-Intl.ListFormat.prototype.formatToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.ListFormat.prototype.formatToParts() - JavaScript | MDN",
    "description": "The formatToParts() method of Intl.ListFormat instances\n  returns an Array of objects representing the different components that\n  can be used to format a list of values in a locale-aware fashion.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/resolvedOptions",
    "markdown": "# Intl.ListFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) instances returns a new object with properties reflecting the locale and style formatting options computed during the construction of this `Intl.ListFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn object with properties reflecting the locale and formatting options computed during the construction of the given [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) object.\n\n## [Description](#description)\n\nThe object returned by `resolvedOptions()` has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`style`](#style)\n\nThe value provided for this property in the `options` argument of the constructor or the default value (`\"long\"`). Its value is either `\"long\"`, `\"short\"`, or `\"narrow\"`.\n\n[`type`](#type)\n\nThe value provided for this property in the `options` argument of the constructor or the default value (`\"conjunction\"`). Its value is either `\"conjunction\"`, `\"disjunction\"`, or `\"unit\"`.\n\n## [Examples](#examples)\n\n### [Using resolvedOptions](#using_resolvedoptions)\n\n```\nconst deListFormatter = new Intl.ListFormat(\"de-DE\", { style: \"short\" });\n\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.style); // \"short\"\nconsole.log(usedOptions.type); // \"conjunction\" (the default value)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.ListFormat.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-Intl.ListFormat.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.ListFormat.prototype.resolvedOptions() - JavaScript | MDN",
    "description": "The resolvedOptions() method of Intl.ListFormat instances\n  returns a new object with properties reflecting the locale and style formatting\n  options computed during the construction of this Intl.ListFormat object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing",
    "markdown": "# Segments.prototype.containing() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`containing()`** method of [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) instances returns an object describing the segment in the string that includes the code unit at the specified index.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncontaining(codeUnitIndex)\n```\n\n### [Parameters](#parameters)\n\n[`codeUnitIndex`](#codeunitindex) Optional\n\nA number specifying the index of the code unit in the original input string. If the value is omitted, it defaults to `0`.\n\n### [Return value](#return_value)\n\nAn object describing the segment of the original string with the following properties, or `undefined` if the supplied index value is out of bounds.\n\n[`segment`](#segment)\n\nA string containing the segment extracted from the original input string.\n\n[`index`](#index)\n\nThe code unit index in the original input string at which the segment begins.\n\n[`input`](#input)\n\nThe complete input string that was segmented.\n\n[`isWordLike`](#iswordlike)\n\nA boolean value only if `granularity` is `\"word\"`; otherwise, `undefined`. If `granularity` is `\"word\"`, then `isWordLike` is `true` when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, `false`.\n\n## [Examples](#examples)\n\n```\n// ┃0 1 2 3 4 5┃6┃7┃8┃9  ← code unit index\n// ┃A l l o n s┃-┃y┃!┃   ← code unit\nconst input = \"Allons-y!\";\n\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\nconst segments = segmenter.segment(input);\n\nlet current = segments.containing();\n// { index: 0, segment: \"Allons\", isWordLike: true }\n\ncurrent = segments.containing(4);\n// { index: 0, segment: \"Allons\", isWordLike: true }\n\ncurrent = segments.containing(6);\n// { index: 6, segment: \"-\", isWordLike: false }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// { index: 7, segment: \"y\", isWordLike: true }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// { index: 8, segment: \"!\", isWordLike: false }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-%segmentsprototype%.containing](https://tc39.es/ecma402/#sec-%segmentsprototype%.containing) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Segments.prototype.containing() - JavaScript | MDN",
    "description": "The containing() method of Segments instances returns an object describing the segment in the string that includes the code unit at the specified index.",
    "languageCode": "en-US"
  }
]