[
  {
    "url": "https://docs.stripe.com/api/checkout/sessions/retrieve",
    "markdown": "# Retrieve a Session | Stripe API Reference\n\nRetrieves a Session object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Session object.\n\nGET /v1/checkout/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Retrieve a Checkout Session's line items](https://docs.stripe.com/api/checkout/sessions/line_items)\n\nWhen retrieving a Checkout Session, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Checkout Session line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/checkout/sessions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions/cs_test_a1enSAC01IA3Ps2vL32mNoWKMCNmmfUGTeEeHXI5tLCvyFNGsdG2UNA7mr/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1N4BEoLkdIwHu7ixWtXug1yk\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/checkout/sessions/cs_test_a1enSAC01IA3Ps2vL32mNoWKMCNmmfUGTeEeHXI5tLCvyFNGsdG2UNA7mr/line_items\"}\n```\n\n## [List all Checkout Sessions](https://docs.stripe.com/api/checkout/sessions/list)\n\nReturns a list of Checkout Sessions.\n\n### Parameters\n\n*   Only return the Checkout Session for the PaymentIntent specified.\n    \n*   Only return the Checkout Session for the subscription specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Checkout Sessions, starting after Checkout Session `starting_after`. Each entry in the array is a separate Checkout Session object. If no more Checkout Sessions are available, the resulting array will be empty.\n\nGET /v1/checkout/sessions\n\n```\ncurl -G https://api.stripe.com/v1/checkout/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/checkout/sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",      \"object\": \"checkout.session\",      \"after_expiration\": null,      \"allow_promotion_codes\": null,      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_address_collection\": null,      \"cancel_url\": null,      \"client_reference_id\": null,      \"consent\": null,      \"consent_collection\": null,      \"created\": 1679600215,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer\": null,      \"customer_creation\": \"if_required\",      \"customer_details\": null,      \"customer_email\": null,      \"expires_at\": 1679686615,      \"invoice\": null,      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"locale\": null,      \"metadata\": {},      \"mode\": \"payment\",      \"payment_intent\": null,      \"payment_link\": null,      \"payment_method_collection\": \"always\",      \"payment_method_options\": {},      \"payment_method_types\": [        \"card\"      ],      \"payment_status\": \"unpaid\",      \"phone_number_collection\": {        \"enabled\": false      },      \"recovered_from\": null,      \"setup_intent\": null,      \"shipping_address_collection\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"shipping_options\": [],      \"status\": \"open\",      \"submit_type\": null,      \"subscription\": null,      \"success_url\": \"https://example.com/success\",      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      },      \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"    }    {...}    {...}  ],}\n```\n\n## [Expire a Session](https://docs.stripe.com/api/checkout/sessions/expire)\n\nA Session can be expired when it is in one of these statuses: `open`\n\nAfter it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Session object if the expiration succeeded. Returns an error if the Session has already expired or isn’t in an expireable state.\n\nPOST /v1/checkout/sessions/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/checkout/sessions/cs_test_a1Ae6ClgOkjygKwrf9B3L6ITtUuZW4Xx9FivL6DZYoYFdfAefQxsYpJJd3/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cs_test_a1Ae6ClgOkjygKwrf9B3L6ITtUuZW4Xx9FivL6DZYoYFdfAefQxsYpJJd3\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679434412,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679520812,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"expired\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": null}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a Session | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_links/line_items",
    "markdown": "# Retrieve a payment link's line items\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```\n\n## [Retrieve payment link](https://docs.stripe.com/api/payment_links/payment_links/retrieve)\n\nRetrieve a payment link.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payment link.\n\nGET /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [List all payment links](https://docs.stripe.com/api/payment_links/payment_links/list)\n\nReturns a list of your payment links.\n\n### Parameters\n\n*   Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment links, starting after payment link `starting_after`. Each entry in the array is a separate payment link object. If no more payment links are available, the resulting array will be empty. This request should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_links\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",      \"object\": \"payment_link\",      \"active\": true,      \"after_completion\": {        \"hosted_confirmation\": {          \"custom_message\": null        },        \"type\": \"hosted_confirmation\"      },      \"allow_promotion_codes\": false,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_address_collection\": \"auto\",      \"consent_collection\": null,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer_creation\": \"if_required\",      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"metadata\": {},      \"on_behalf_of\": null,      \"payment_intent_data\": null,      \"payment_method_collection\": \"always\",      \"payment_method_types\": null,      \"phone_number_collection\": {        \"enabled\": false      },      \"shipping_address_collection\": null,      \"shipping_options\": [],      \"submit_type\": \"auto\",      \"subscription_data\": {        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"trial_period_days\": null      },      \"tax_id_collection\": {        \"enabled\": false      },      \"transfer_data\": null,      \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a payment link's line items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_links/payment_links/list",
    "markdown": "# List all payment links | Stripe API Reference\n\nReturns a list of your payment links.\n\n### Parameters\n\n*   Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment links, starting after payment link `starting_after`. Each entry in the array is a separate payment link object. If no more payment links are available, the resulting array will be empty. This request should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_links\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",      \"object\": \"payment_link\",      \"active\": true,      \"after_completion\": {        \"hosted_confirmation\": {          \"custom_message\": null        },        \"type\": \"hosted_confirmation\"      },      \"allow_promotion_codes\": false,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_address_collection\": \"auto\",      \"consent_collection\": null,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer_creation\": \"if_required\",      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"metadata\": {},      \"on_behalf_of\": null,      \"payment_intent_data\": null,      \"payment_method_collection\": \"always\",      \"payment_method_types\": null,      \"phone_number_collection\": {        \"enabled\": false      },      \"shipping_address_collection\": null,      \"shipping_options\": [],      \"submit_type\": \"auto\",      \"subscription_data\": {        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"trial_period_days\": null      },      \"tax_id_collection\": {        \"enabled\": false      },      \"transfer_data\": null,      \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all payment links | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_links/payment_links/retrieve",
    "markdown": "# Retrieve payment link | Stripe API Reference\n\nRetrieve a payment link.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payment link.\n\nGET /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [List all payment links](https://docs.stripe.com/api/payment_links/payment_links/list)\n\nReturns a list of your payment links.\n\n### Parameters\n\n*   Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment links, starting after payment link `starting_after`. Each entry in the array is a separate payment link object. If no more payment links are available, the resulting array will be empty. This request should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_links\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",      \"object\": \"payment_link\",      \"active\": true,      \"after_completion\": {        \"hosted_confirmation\": {          \"custom_message\": null        },        \"type\": \"hosted_confirmation\"      },      \"allow_promotion_codes\": false,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_address_collection\": \"auto\",      \"consent_collection\": null,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer_creation\": \"if_required\",      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"metadata\": {},      \"on_behalf_of\": null,      \"payment_intent_data\": null,      \"payment_method_collection\": \"always\",      \"payment_method_types\": null,      \"phone_number_collection\": {        \"enabled\": false      },      \"shipping_address_collection\": null,      \"shipping_options\": [],      \"submit_type\": \"auto\",      \"subscription_data\": {        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"trial_period_days\": null      },      \"tax_id_collection\": {        \"enabled\": false      },      \"transfer_data\": null,      \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve payment link | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes",
    "markdown": "# Credit Note | Stripe API Reference\n\n## [The Credit Note object](https://docs.stripe.com/api/credit_notes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note\n    \n*   Customer-facing text that appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n*   Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `issued`<br><br>The credit note has been issued. |\n    | `void`<br><br>The credit note has been voided. |\n    \n*   The integer amount in cents representing the amount of the credit note, excluding exclusive tax and invoice level discounts.\n    \n*   The integer amount in cents representing the total amount of the credit note, including tax and all discount.\n    \n\n### More attributes\n\n*   #### \n    \n    customer\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    discount\\_amountintegerDeprecated\n    \n*   #### \n    \n    discount\\_amountsarray of objects\n    \n*   #### \n    \n    effective\\_atnullable timestamp\n    \n\n*   #### \n    \n    out\\_of\\_band\\_amountnullable integer\n    \n\n*   #### \n    \n    refundnullable stringExpandable\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    subtotal\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    total\\_excluding\\_taxnullable integer\n    \n\n*   #### \n    \n    voided\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [The Credit Note Line Item object](https://docs.stripe.com/api/credit_notes/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.\n    \n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n    The integer amount in cents representing the amount being credited for this line item, excluding all tax and discounts.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    Description of the item being credited.\n    \n*   #### \n    \n    discount\\_amountintegerDeprecated\n    \n    The integer amount in cents representing the discount being credited for this line item.\n    \n*   #### \n    \n    discount\\_amountsarray of objects\n    \n    The amount of discount calculated per discount for this line item\n    \n*   #### \n    \n    invoice\\_line\\_itemnullable string\n    \n    ID of the invoice line item being credited\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The number of units of product being credited.\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n    The amount of tax calculated per tax rate for this line item\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n    The tax rates which apply to the line item.\n    \n*   The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom_line_item` |\n    | `invoice_line_item` |\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n    The cost of each unit of product being credited.\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n    Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n    The amount in cents representing the unit amount being credited for this line item, excluding all tax and discounts.\n    \n\nThe Credit Note Line Item object\n\n```\n{  \"id\": \"cnli_1NPtOx2eZvKYlo2CBH1NpUsU\",  \"object\": \"credit_note_line_item\",  \"amount\": 749,  \"amount_excluding_tax\": 749,  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice_line_item\": \"il_1NPtOx2eZvKYlo2CAUuq0WVl\",  \"livemode\": false,  \"quantity\": 1,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoice_line_item\",  \"unit_amount\": null,  \"unit_amount_decimal\": null,  \"unit_amount_excluding_tax\": \"749\"}\n```\n\n## [Create a credit note](https://docs.stripe.com/api/credit_notes/create)\n\nIssue a credit note to adjust the amount of a finalized invoice. For a `status=open` invoice, a credit note reduces its `amount_due`. For a `status=paid` invoice, a credit note does not affect its `amount_due`. Instead, it can result in any combination of the following:\n\n*   Refund: create a new refund (using `refund_amount`) or link an existing refund (using `refund`).\n*   Customer balance credit: credit the customer’s balance (using `credit_amount`) which will be automatically applied to their next invoice when it’s finalized.\n*   Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using `out_of_band_amount`).\n\nFor post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s `pre_payment_credit_notes_amount` or `post_payment_credit_notes_amount` depending on its `status` at the time of credit note creation.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Update a credit note](https://docs.stripe.com/api/credit_notes/update)\n\nUpdates an existing credit note.\n\n### Parameters\n\n*   Credit note memo.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the updated credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```",
    "title": "Credit Note | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/lines",
    "markdown": "# Retrieve a credit note's line items\n\nWhen retrieving a credit note, you’ll get a **lines** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/:id/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\",      \"has_more\": false,      \"data\": [        {          \"id\": \"cnli_1Nn7fB2eZvKYlo2COYgPG88j\",          \"object\": \"credit_note_line_item\",          \"amount\": 799,          \"amount_excluding_tax\": 799,          \"description\": \"My First Invoice Item (created for API docs)\",          \"discount_amount\": 0,          \"discount_amounts\": [],          \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2C3GKZP9wi\",          \"livemode\": false,          \"quantity\": 1,          \"tax_amounts\": [],          \"tax_rates\": [],          \"type\": \"invoice_line_item\",          \"unit_amount\": null,          \"unit_amount_decimal\": null,          \"unit_amount_excluding_tax\": \"799\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Retrieve a credit note preview's line items](https://docs.stripe.com/api/credit_notes/preview_lines)\n\nWhen retrieving a credit note preview, you’ll get a **lines** property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/preview/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1Nn8592eZvKYlo2Ci4yFC46f\n```\n\n```\n{  \"id\": \"cn_1Nn7fB2eZvKYlo2CuJ0wZBlA\",  \"object\": \"credit_note\",  \"amount\": 1451,  \"amount_shipping\": 0,  \"created\": 1693952641,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"effective_at\": null,  \"invoice\": \"in_1Nn7fB2eZvKYlo2C7meA67Xp\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2Cp8nLMci9\",        \"object\": \"credit_note_line_item\",        \"amount\": 951,        \"amount_excluding_tax\": 951,        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2ChKG2H1tv\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [          {            \"amount\": 152,            \"inclusive\": false,            \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"taxability_reason\": null,            \"taxable_amount\": 799          }        ],        \"tax_rates\": [          {            \"id\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"object\": \"tax_rate\",            \"active\": true,            \"country\": \"DE\",            \"created\": 1693952641,            \"description\": \"VAT Germany\",            \"display_name\": \"VAT\",            \"effective_percentage\": null,            \"inclusive\": false,            \"jurisdiction\": \"DE\",            \"livemode\": false,            \"metadata\": {},            \"percentage\": 19,            \"state\": null,            \"tax_type\": \"vat\"          }        ],        \"type\": \"invoice_line_item\",        \"unit_amount\": null,        \"unit_amount_decimal\": null,        \"unit_amount_excluding_tax\": \"951\"      },      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2C7OxQLHdz\",        \"object\": \"credit_note_line_item\",        \"amount\": 500,        \"amount_excluding_tax\": 500,        \"description\": \"Service credit\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"custom_line_item\",        \"unit_amount\": 500,        \"unit_amount_decimal\": \"500\",        \"unit_amount_excluding_tax\": \"500\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"ABCD-1234-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1032D82eZvKYlo2C/cnst_123456789/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1451,  \"subtotal_excluding_tax\": 1451,  \"tax_amounts\": [    {      \"amount\": 152,      \"inclusive\": false,      \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",      \"taxability_reason\": null,      \"taxable_amount\": 799    }  ],  \"total\": 1451,  \"total_excluding_tax\": null,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note](https://docs.stripe.com/api/credit_notes/retrieve)\n\nRetrieves the credit note object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a credit note object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [List all credit notes](https://docs.stripe.com/api/credit_notes/list)\n\nReturns a list of credit notes.\n\n### Parameters\n\n*   Only return credit notes for the invoice specified by this invoice ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` credit notes, starting after credit note `starting_after`. Each entry in the array is a separate credit note object. If no more credit notes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",      \"object\": \"credit_note\",      \"amount\": 1099,      \"amount_shipping\": 0,      \"created\": 1681750958,      \"currency\": \"usd\",      \"customer\": \"cus_NjLgPhUokHubJC\",      \"customer_balance_transaction\": null,      \"discount_amount\": 0,      \"discount_amounts\": [],      \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",      \"lines\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",            \"object\": \"credit_note_line_item\",            \"amount\": 1099,            \"amount_excluding_tax\": 1099,            \"description\": \"T-shirt\",            \"discount_amount\": 0,            \"discount_amounts\": [],            \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",            \"livemode\": false,            \"quantity\": 1,            \"tax_amounts\": [],            \"tax_rates\": [],            \"type\": \"invoice_line_item\",            \"unit_amount\": 1099,            \"unit_amount_decimal\": \"1099\",            \"unit_amount_excluding_tax\": \"1099\"          }        ],        \"has_more\": false,        \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"      },      \"livemode\": false,      \"memo\": null,      \"metadata\": {},      \"number\": \"C9E0C52C-0036-CN-01\",      \"out_of_band_amount\": null,      \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",      \"reason\": null,      \"refund\": null,      \"shipping_cost\": null,      \"status\": \"issued\",      \"subtotal\": 1099,      \"subtotal_excluding_tax\": 1099,      \"tax_amounts\": [],      \"total\": 1099,      \"total_excluding_tax\": 1099,      \"type\": \"pre_payment\",      \"voided_at\": null    }    {...}    {...}  ],}\n```\n\n## [Preview a credit note](https://docs.stripe.com/api/credit_notes/preview)\n\nGet a preview of a credit note without creating it.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object.\n\nGET /v1/credit\\_notes/preview\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```",
    "title": "Retrieve a credit note's line items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/preview_lines",
    "markdown": "# Retrieve a credit note preview's line items\n\nWhen retrieving a credit note preview, you’ll get a **lines** property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/preview/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1Nn8592eZvKYlo2Ci4yFC46f\n```\n\n```\n{  \"id\": \"cn_1Nn7fB2eZvKYlo2CuJ0wZBlA\",  \"object\": \"credit_note\",  \"amount\": 1451,  \"amount_shipping\": 0,  \"created\": 1693952641,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"effective_at\": null,  \"invoice\": \"in_1Nn7fB2eZvKYlo2C7meA67Xp\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2Cp8nLMci9\",        \"object\": \"credit_note_line_item\",        \"amount\": 951,        \"amount_excluding_tax\": 951,        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2ChKG2H1tv\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [          {            \"amount\": 152,            \"inclusive\": false,            \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"taxability_reason\": null,            \"taxable_amount\": 799          }        ],        \"tax_rates\": [          {            \"id\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"object\": \"tax_rate\",            \"active\": true,            \"country\": \"DE\",            \"created\": 1693952641,            \"description\": \"VAT Germany\",            \"display_name\": \"VAT\",            \"effective_percentage\": null,            \"inclusive\": false,            \"jurisdiction\": \"DE\",            \"livemode\": false,            \"metadata\": {},            \"percentage\": 19,            \"state\": null,            \"tax_type\": \"vat\"          }        ],        \"type\": \"invoice_line_item\",        \"unit_amount\": null,        \"unit_amount_decimal\": null,        \"unit_amount_excluding_tax\": \"951\"      },      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2C7OxQLHdz\",        \"object\": \"credit_note_line_item\",        \"amount\": 500,        \"amount_excluding_tax\": 500,        \"description\": \"Service credit\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"custom_line_item\",        \"unit_amount\": 500,        \"unit_amount_decimal\": \"500\",        \"unit_amount_excluding_tax\": \"500\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"ABCD-1234-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1032D82eZvKYlo2C/cnst_123456789/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1451,  \"subtotal_excluding_tax\": 1451,  \"tax_amounts\": [    {      \"amount\": 152,      \"inclusive\": false,      \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",      \"taxability_reason\": null,      \"taxable_amount\": 799    }  ],  \"total\": 1451,  \"total_excluding_tax\": null,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note](https://docs.stripe.com/api/credit_notes/retrieve)\n\nRetrieves the credit note object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a credit note object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [List all credit notes](https://docs.stripe.com/api/credit_notes/list)\n\nReturns a list of credit notes.\n\n### Parameters\n\n*   Only return credit notes for the invoice specified by this invoice ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` credit notes, starting after credit note `starting_after`. Each entry in the array is a separate credit note object. If no more credit notes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",      \"object\": \"credit_note\",      \"amount\": 1099,      \"amount_shipping\": 0,      \"created\": 1681750958,      \"currency\": \"usd\",      \"customer\": \"cus_NjLgPhUokHubJC\",      \"customer_balance_transaction\": null,      \"discount_amount\": 0,      \"discount_amounts\": [],      \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",      \"lines\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",            \"object\": \"credit_note_line_item\",            \"amount\": 1099,            \"amount_excluding_tax\": 1099,            \"description\": \"T-shirt\",            \"discount_amount\": 0,            \"discount_amounts\": [],            \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",            \"livemode\": false,            \"quantity\": 1,            \"tax_amounts\": [],            \"tax_rates\": [],            \"type\": \"invoice_line_item\",            \"unit_amount\": 1099,            \"unit_amount_decimal\": \"1099\",            \"unit_amount_excluding_tax\": \"1099\"          }        ],        \"has_more\": false,        \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"      },      \"livemode\": false,      \"memo\": null,      \"metadata\": {},      \"number\": \"C9E0C52C-0036-CN-01\",      \"out_of_band_amount\": null,      \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",      \"reason\": null,      \"refund\": null,      \"shipping_cost\": null,      \"status\": \"issued\",      \"subtotal\": 1099,      \"subtotal_excluding_tax\": 1099,      \"tax_amounts\": [],      \"total\": 1099,      \"total_excluding_tax\": 1099,      \"type\": \"pre_payment\",      \"voided_at\": null    }    {...}    {...}  ],}\n```\n\n## [Preview a credit note](https://docs.stripe.com/api/credit_notes/preview)\n\nGet a preview of a credit note without creating it.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object.\n\nGET /v1/credit\\_notes/preview\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Void a credit note](https://docs.stripe.com/api/credit_notes/void)\n\nMarks a credit note as void. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"void\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": 1681750959}\n```",
    "title": "Retrieve a credit note preview's line items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/retrieve",
    "markdown": "# Retrieve a credit note | Stripe API Reference\n\nRetrieves the credit note object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a credit note object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [List all credit notes](https://docs.stripe.com/api/credit_notes/list)\n\nReturns a list of credit notes.\n\n### Parameters\n\n*   Only return credit notes for the invoice specified by this invoice ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` credit notes, starting after credit note `starting_after`. Each entry in the array is a separate credit note object. If no more credit notes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",      \"object\": \"credit_note\",      \"amount\": 1099,      \"amount_shipping\": 0,      \"created\": 1681750958,      \"currency\": \"usd\",      \"customer\": \"cus_NjLgPhUokHubJC\",      \"customer_balance_transaction\": null,      \"discount_amount\": 0,      \"discount_amounts\": [],      \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",      \"lines\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",            \"object\": \"credit_note_line_item\",            \"amount\": 1099,            \"amount_excluding_tax\": 1099,            \"description\": \"T-shirt\",            \"discount_amount\": 0,            \"discount_amounts\": [],            \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",            \"livemode\": false,            \"quantity\": 1,            \"tax_amounts\": [],            \"tax_rates\": [],            \"type\": \"invoice_line_item\",            \"unit_amount\": 1099,            \"unit_amount_decimal\": \"1099\",            \"unit_amount_excluding_tax\": \"1099\"          }        ],        \"has_more\": false,        \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"      },      \"livemode\": false,      \"memo\": null,      \"metadata\": {},      \"number\": \"C9E0C52C-0036-CN-01\",      \"out_of_band_amount\": null,      \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",      \"reason\": null,      \"refund\": null,      \"shipping_cost\": null,      \"status\": \"issued\",      \"subtotal\": 1099,      \"subtotal_excluding_tax\": 1099,      \"tax_amounts\": [],      \"total\": 1099,      \"total_excluding_tax\": 1099,      \"type\": \"pre_payment\",      \"voided_at\": null    }    {...}    {...}  ],}\n```\n\n## [Preview a credit note](https://docs.stripe.com/api/credit_notes/preview)\n\nGet a preview of a credit note without creating it.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object.\n\nGET /v1/credit\\_notes/preview\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Void a credit note](https://docs.stripe.com/api/credit_notes/void)\n\nMarks a credit note as void. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"void\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": 1681750959}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a credit note | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/quotes/pdf",
    "markdown": "# Download quote PDF | Stripe API Reference\n\nDownload the PDF for a finalized quote. Explanation for special handling can be found [here](https://docs.corp.stripe.com/quotes/overview#quote_pdf)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe PDF file for the quote.\n\n```\ncurl https://files.stripe.com/v1/quotes/qt_0J1EnX589O8KAxCGEdmhZY3r/pdf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n## [Finalize a quote](https://docs.stripe.com/api/quotes/finalize)\n\nFinalizes the quote.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns an open quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7SqLkdIwHu7ixpI1ClZ6z/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680128852,  \"currency\": \"usd\",  \"customer\": \"cus_NcMBZUWCIOEgEW\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682720852,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-5B9DA057-0001-1\",  \"on_behalf_of\": null,  \"status\": \"open\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": 1680128853  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Download quote PDF | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/list",
    "markdown": "# List all credit notes | Stripe API Reference\n\nReturns a list of credit notes.\n\n### Parameters\n\n*   Only return credit notes for the invoice specified by this invoice ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` credit notes, starting after credit note `starting_after`. Each entry in the array is a separate credit note object. If no more credit notes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",      \"object\": \"credit_note\",      \"amount\": 1099,      \"amount_shipping\": 0,      \"created\": 1681750958,      \"currency\": \"usd\",      \"customer\": \"cus_NjLgPhUokHubJC\",      \"customer_balance_transaction\": null,      \"discount_amount\": 0,      \"discount_amounts\": [],      \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",      \"lines\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",            \"object\": \"credit_note_line_item\",            \"amount\": 1099,            \"amount_excluding_tax\": 1099,            \"description\": \"T-shirt\",            \"discount_amount\": 0,            \"discount_amounts\": [],            \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",            \"livemode\": false,            \"quantity\": 1,            \"tax_amounts\": [],            \"tax_rates\": [],            \"type\": \"invoice_line_item\",            \"unit_amount\": 1099,            \"unit_amount_decimal\": \"1099\",            \"unit_amount_excluding_tax\": \"1099\"          }        ],        \"has_more\": false,        \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"      },      \"livemode\": false,      \"memo\": null,      \"metadata\": {},      \"number\": \"C9E0C52C-0036-CN-01\",      \"out_of_band_amount\": null,      \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",      \"reason\": null,      \"refund\": null,      \"shipping_cost\": null,      \"status\": \"issued\",      \"subtotal\": 1099,      \"subtotal_excluding_tax\": 1099,      \"tax_amounts\": [],      \"total\": 1099,      \"total_excluding_tax\": 1099,      \"type\": \"pre_payment\",      \"voided_at\": null    }    {...}    {...}  ],}\n```\n\n## [Preview a credit note](https://docs.stripe.com/api/credit_notes/preview)\n\nGet a preview of a credit note without creating it.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object.\n\nGET /v1/credit\\_notes/preview\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Void a credit note](https://docs.stripe.com/api/credit_notes/void)\n\nMarks a credit note as void. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"void\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": 1681750959}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all credit notes | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscriptions/retrieve",
    "markdown": "# Retrieve a subscription | Stripe API Reference\n\nRetrieves the subscription with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the subscription object.\n\nGET /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [List subscriptions](https://docs.stripe.com/api/subscriptions/list)\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a subscription](https://docs.stripe.com/api/subscriptions/cancel)\n\nCancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually [deleted](#delete_invoiceitem). If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n### Returns\n\nThe canceled `Subscription` object. Its subscription status will be set to `canceled`.\n\nDELETE /v1/subscriptions/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1MlPf9LkdIwHu7ixB6VIYRyX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1678768838,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": 1678768842,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": \"cancellation_requested\"  },  \"collection_method\": \"charge_automatically\",  \"created\": 1678768838,  \"currency\": \"usd\",  \"current_period_end\": 1681447238,  \"current_period_start\": 1678768838,  \"customer\": \"cus_NWSaVkvdacCUi4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": 1678768842,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NWSaWTp80M123q\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1678768839,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MlPf9LkdIwHu7ixB6VIYRyX\"  },  \"latest_invoice\": \"in_1MlPf9LkdIwHu7ixEo6hdgCw\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1678768837,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NWSaMgipulx8IQ\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1678768838,  \"status\": \"canceled\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Resume a subscription](https://docs.stripe.com/api/subscriptions/resume)\n\nInitiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become `active`, and if payment fails the subscription will be `past_due`. The resumption invoice will void automatically if not paid by the expiration date.\n\n### Parameters\n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n    Either `now` or `unchanged`. Setting the value to `now` resets the subscription’s billing cycle anchor to the current time (in UTC). Setting the value to `unchanged` advances the subscription’s billing cycle anchor to the period that surrounds the current time. For more information, see the billing cycle [documentation](https://docs.stripe.com/billing/subscriptions/billing-cycle).\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n### Returns\n\nThe subscription object.\n\nPOST /v1/subscriptions/:id/resume\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MoGGtLkdIwHu7ixk5CfdiqC/resume \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d billing_cycle_anchor=now\n```\n\n```\n{  \"id\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679447726,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679447723,  \"currency\": \"usd\",  \"current_period_end\": 1682126126,  \"current_period_start\": 1679447726,  \"customer\": \"cus_NZP5i1diUz55jp\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NZP5BhUIuWzXDG\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679447724,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MoGGtLkdIwHu7ixk5CfdiqC\"  },  \"latest_invoice\": \"in_1MoGGwLkdIwHu7ixHSrelo8X\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1679447722,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NZP5rEATBlScM9\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1679447723,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Search subscriptions](https://docs.stripe.com/api/subscriptions/search)\n\nSearch for subscriptions you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscriptions. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/subscriptions/search\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"status:'active' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/subscriptions/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679446874,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679446874,      \"currency\": \"usd\",      \"current_period_end\": 1682125274,      \"current_period_start\": 1679446874,      \"customer\": \"cus_NZOq6LNU39H6ZI\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_NZOqmziODmZt2v\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679446875,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1099,              \"amount_decimal\": \"1099\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1099,              \"unit_amount_decimal\": \"1099\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MoG3CLkdIwHu7ixd86qvAfe\"      },      \"latest_invoice\": \"in_1MoG3CLkdIwHu7ixuBm2QIyW\",      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"plan\": {        \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",        \"object\": \"plan\",        \"active\": true,        \"aggregate_usage\": null,        \"amount\": 1099,        \"amount_decimal\": \"1099\",        \"billing_scheme\": \"per_unit\",        \"created\": 1679446873,        \"currency\": \"usd\",        \"interval\": \"month\",        \"interval_count\": 1,        \"livemode\": false,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NZOqsBJfaRYI1M\",        \"tiers_mode\": null,        \"transform_usage\": null,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"quantity\": 1,      \"schedule\": null,      \"start_date\": 1679446874,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```",
    "title": "Retrieve a subscription | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/update",
    "markdown": "# Update a credit note | Stripe API Reference\n\nUpdates an existing credit note.\n\n### Parameters\n\n*   Credit note memo.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the updated credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note's line items](https://docs.stripe.com/api/credit_notes/lines)\n\nWhen retrieving a credit note, you’ll get a **lines** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/:id/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\",      \"has_more\": false,      \"data\": [        {          \"id\": \"cnli_1Nn7fB2eZvKYlo2COYgPG88j\",          \"object\": \"credit_note_line_item\",          \"amount\": 799,          \"amount_excluding_tax\": 799,          \"description\": \"My First Invoice Item (created for API docs)\",          \"discount_amount\": 0,          \"discount_amounts\": [],          \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2C3GKZP9wi\",          \"livemode\": false,          \"quantity\": 1,          \"tax_amounts\": [],          \"tax_rates\": [],          \"type\": \"invoice_line_item\",          \"unit_amount\": null,          \"unit_amount_decimal\": null,          \"unit_amount_excluding_tax\": \"799\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Retrieve a credit note preview's line items](https://docs.stripe.com/api/credit_notes/preview_lines)\n\nWhen retrieving a credit note preview, you’ll get a **lines** property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/preview/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1Nn8592eZvKYlo2Ci4yFC46f\n```\n\n```\n{  \"id\": \"cn_1Nn7fB2eZvKYlo2CuJ0wZBlA\",  \"object\": \"credit_note\",  \"amount\": 1451,  \"amount_shipping\": 0,  \"created\": 1693952641,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"effective_at\": null,  \"invoice\": \"in_1Nn7fB2eZvKYlo2C7meA67Xp\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2Cp8nLMci9\",        \"object\": \"credit_note_line_item\",        \"amount\": 951,        \"amount_excluding_tax\": 951,        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2ChKG2H1tv\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [          {            \"amount\": 152,            \"inclusive\": false,            \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"taxability_reason\": null,            \"taxable_amount\": 799          }        ],        \"tax_rates\": [          {            \"id\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"object\": \"tax_rate\",            \"active\": true,            \"country\": \"DE\",            \"created\": 1693952641,            \"description\": \"VAT Germany\",            \"display_name\": \"VAT\",            \"effective_percentage\": null,            \"inclusive\": false,            \"jurisdiction\": \"DE\",            \"livemode\": false,            \"metadata\": {},            \"percentage\": 19,            \"state\": null,            \"tax_type\": \"vat\"          }        ],        \"type\": \"invoice_line_item\",        \"unit_amount\": null,        \"unit_amount_decimal\": null,        \"unit_amount_excluding_tax\": \"951\"      },      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2C7OxQLHdz\",        \"object\": \"credit_note_line_item\",        \"amount\": 500,        \"amount_excluding_tax\": 500,        \"description\": \"Service credit\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"custom_line_item\",        \"unit_amount\": 500,        \"unit_amount_decimal\": \"500\",        \"unit_amount_excluding_tax\": \"500\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"ABCD-1234-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1032D82eZvKYlo2C/cnst_123456789/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1451,  \"subtotal_excluding_tax\": 1451,  \"tax_amounts\": [    {      \"amount\": 152,      \"inclusive\": false,      \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",      \"taxability_reason\": null,      \"taxable_amount\": 799    }  ],  \"total\": 1451,  \"total_excluding_tax\": null,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note](https://docs.stripe.com/api/credit_notes/retrieve)\n\nRetrieves the credit note object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a credit note object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [List all credit notes](https://docs.stripe.com/api/credit_notes/list)\n\nReturns a list of credit notes.\n\n### Parameters\n\n*   Only return credit notes for the invoice specified by this invoice ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` credit notes, starting after credit note `starting_after`. Each entry in the array is a separate credit note object. If no more credit notes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",      \"object\": \"credit_note\",      \"amount\": 1099,      \"amount_shipping\": 0,      \"created\": 1681750958,      \"currency\": \"usd\",      \"customer\": \"cus_NjLgPhUokHubJC\",      \"customer_balance_transaction\": null,      \"discount_amount\": 0,      \"discount_amounts\": [],      \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",      \"lines\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",            \"object\": \"credit_note_line_item\",            \"amount\": 1099,            \"amount_excluding_tax\": 1099,            \"description\": \"T-shirt\",            \"discount_amount\": 0,            \"discount_amounts\": [],            \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",            \"livemode\": false,            \"quantity\": 1,            \"tax_amounts\": [],            \"tax_rates\": [],            \"type\": \"invoice_line_item\",            \"unit_amount\": 1099,            \"unit_amount_decimal\": \"1099\",            \"unit_amount_excluding_tax\": \"1099\"          }        ],        \"has_more\": false,        \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"      },      \"livemode\": false,      \"memo\": null,      \"metadata\": {},      \"number\": \"C9E0C52C-0036-CN-01\",      \"out_of_band_amount\": null,      \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",      \"reason\": null,      \"refund\": null,      \"shipping_cost\": null,      \"status\": \"issued\",      \"subtotal\": 1099,      \"subtotal_excluding_tax\": 1099,      \"tax_amounts\": [],      \"total\": 1099,      \"total_excluding_tax\": 1099,      \"type\": \"pre_payment\",      \"voided_at\": null    }    {...}    {...}  ],}\n```",
    "title": "Update a credit note | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscriptions/cancel",
    "markdown": "# Cancel a subscription | Stripe API Reference\n\nCancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually [deleted](#delete_invoiceitem). If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n### Returns\n\nThe canceled `Subscription` object. Its subscription status will be set to `canceled`.\n\nDELETE /v1/subscriptions/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1MlPf9LkdIwHu7ixB6VIYRyX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1678768838,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": 1678768842,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": \"cancellation_requested\"  },  \"collection_method\": \"charge_automatically\",  \"created\": 1678768838,  \"currency\": \"usd\",  \"current_period_end\": 1681447238,  \"current_period_start\": 1678768838,  \"customer\": \"cus_NWSaVkvdacCUi4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": 1678768842,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NWSaWTp80M123q\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1678768839,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MlPf9LkdIwHu7ixB6VIYRyX\"  },  \"latest_invoice\": \"in_1MlPf9LkdIwHu7ixEo6hdgCw\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1678768837,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NWSaMgipulx8IQ\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1678768838,  \"status\": \"canceled\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Resume a subscription](https://docs.stripe.com/api/subscriptions/resume)\n\nInitiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become `active`, and if payment fails the subscription will be `past_due`. The resumption invoice will void automatically if not paid by the expiration date.\n\n### Parameters\n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n    Either `now` or `unchanged`. Setting the value to `now` resets the subscription’s billing cycle anchor to the current time (in UTC). Setting the value to `unchanged` advances the subscription’s billing cycle anchor to the period that surrounds the current time. For more information, see the billing cycle [documentation](https://docs.stripe.com/billing/subscriptions/billing-cycle).\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n### Returns\n\nThe subscription object.\n\nPOST /v1/subscriptions/:id/resume\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MoGGtLkdIwHu7ixk5CfdiqC/resume \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d billing_cycle_anchor=now\n```\n\n```\n{  \"id\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679447726,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679447723,  \"currency\": \"usd\",  \"current_period_end\": 1682126126,  \"current_period_start\": 1679447726,  \"customer\": \"cus_NZP5i1diUz55jp\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NZP5BhUIuWzXDG\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679447724,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MoGGtLkdIwHu7ixk5CfdiqC\"  },  \"latest_invoice\": \"in_1MoGGwLkdIwHu7ixHSrelo8X\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1679447722,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NZP5rEATBlScM9\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1679447723,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Search subscriptions](https://docs.stripe.com/api/subscriptions/search)\n\nSearch for subscriptions you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscriptions. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/subscriptions/search\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"status:'active' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/subscriptions/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679446874,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679446874,      \"currency\": \"usd\",      \"current_period_end\": 1682125274,      \"current_period_start\": 1679446874,      \"customer\": \"cus_NZOq6LNU39H6ZI\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_NZOqmziODmZt2v\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679446875,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1099,              \"amount_decimal\": \"1099\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1099,              \"unit_amount_decimal\": \"1099\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MoG3CLkdIwHu7ixd86qvAfe\"      },      \"latest_invoice\": \"in_1MoG3CLkdIwHu7ixuBm2QIyW\",      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"plan\": {        \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",        \"object\": \"plan\",        \"active\": true,        \"aggregate_usage\": null,        \"amount\": 1099,        \"amount_decimal\": \"1099\",        \"billing_scheme\": \"per_unit\",        \"created\": 1679446873,        \"currency\": \"usd\",        \"interval\": \"month\",        \"interval_count\": 1,        \"livemode\": false,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NZOqsBJfaRYI1M\",        \"tiers_mode\": null,        \"transform_usage\": null,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"quantity\": 1,      \"schedule\": null,      \"start_date\": 1679446874,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Cancel a subscription | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscriptions/resume",
    "markdown": "# Resume a subscription | Stripe API Reference\n\nInitiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become `active`, and if payment fails the subscription will be `past_due`. The resumption invoice will void automatically if not paid by the expiration date.\n\n### Parameters\n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n    Either `now` or `unchanged`. Setting the value to `now` resets the subscription’s billing cycle anchor to the current time (in UTC). Setting the value to `unchanged` advances the subscription’s billing cycle anchor to the period that surrounds the current time. For more information, see the billing cycle [documentation](https://docs.stripe.com/billing/subscriptions/billing-cycle).\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nThe subscription object.\n\nPOST /v1/subscriptions/:id/resume\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MoGGtLkdIwHu7ixk5CfdiqC/resume \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d billing_cycle_anchor=now\n```\n\n```\n{  \"id\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679447726,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679447723,  \"currency\": \"usd\",  \"current_period_end\": 1682126126,  \"current_period_start\": 1679447726,  \"customer\": \"cus_NZP5i1diUz55jp\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NZP5BhUIuWzXDG\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679447724,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MoGGtLkdIwHu7ixk5CfdiqC\"  },  \"latest_invoice\": \"in_1MoGGwLkdIwHu7ixHSrelo8X\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1679447722,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NZP5rEATBlScM9\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1679447723,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Search subscriptions](https://docs.stripe.com/api/subscriptions/search)\n\nSearch for subscriptions you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscriptions. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/subscriptions/search\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"status:'active' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/subscriptions/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679446874,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679446874,      \"currency\": \"usd\",      \"current_period_end\": 1682125274,      \"current_period_start\": 1679446874,      \"customer\": \"cus_NZOq6LNU39H6ZI\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_NZOqmziODmZt2v\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679446875,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1099,              \"amount_decimal\": \"1099\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1099,              \"unit_amount_decimal\": \"1099\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MoG3CLkdIwHu7ixd86qvAfe\"      },      \"latest_invoice\": \"in_1MoG3CLkdIwHu7ixuBm2QIyW\",      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"plan\": {        \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",        \"object\": \"plan\",        \"active\": true,        \"aggregate_usage\": null,        \"amount\": 1099,        \"amount_decimal\": \"1099\",        \"billing_scheme\": \"per_unit\",        \"created\": 1679446873,        \"currency\": \"usd\",        \"interval\": \"month\",        \"interval_count\": 1,        \"livemode\": false,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NZOqsBJfaRYI1M\",        \"tiers_mode\": null,        \"transform_usage\": null,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"quantity\": 1,      \"schedule\": null,      \"start_date\": 1679446874,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Resume a subscription | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscriptions/list",
    "markdown": "# List subscriptions | Stripe API Reference\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a subscription](https://docs.stripe.com/api/subscriptions/cancel)\n\nCancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually [deleted](#delete_invoiceitem). If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n### Returns\n\nThe canceled `Subscription` object. Its subscription status will be set to `canceled`.\n\nDELETE /v1/subscriptions/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1MlPf9LkdIwHu7ixB6VIYRyX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1678768838,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": 1678768842,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": \"cancellation_requested\"  },  \"collection_method\": \"charge_automatically\",  \"created\": 1678768838,  \"currency\": \"usd\",  \"current_period_end\": 1681447238,  \"current_period_start\": 1678768838,  \"customer\": \"cus_NWSaVkvdacCUi4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": 1678768842,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NWSaWTp80M123q\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1678768839,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MlPf9LkdIwHu7ixB6VIYRyX\"  },  \"latest_invoice\": \"in_1MlPf9LkdIwHu7ixEo6hdgCw\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1678768837,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NWSaMgipulx8IQ\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1678768838,  \"status\": \"canceled\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Resume a subscription](https://docs.stripe.com/api/subscriptions/resume)\n\nInitiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become `active`, and if payment fails the subscription will be `past_due`. The resumption invoice will void automatically if not paid by the expiration date.\n\n### Parameters\n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n    Either `now` or `unchanged`. Setting the value to `now` resets the subscription’s billing cycle anchor to the current time (in UTC). Setting the value to `unchanged` advances the subscription’s billing cycle anchor to the period that surrounds the current time. For more information, see the billing cycle [documentation](https://docs.stripe.com/billing/subscriptions/billing-cycle).\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n### Returns\n\nThe subscription object.\n\nPOST /v1/subscriptions/:id/resume\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MoGGtLkdIwHu7ixk5CfdiqC/resume \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d billing_cycle_anchor=now\n```\n\n```\n{  \"id\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679447726,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679447723,  \"currency\": \"usd\",  \"current_period_end\": 1682126126,  \"current_period_start\": 1679447726,  \"customer\": \"cus_NZP5i1diUz55jp\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NZP5BhUIuWzXDG\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679447724,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MoGGtLkdIwHu7ixk5CfdiqC\"  },  \"latest_invoice\": \"in_1MoGGwLkdIwHu7ixHSrelo8X\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1679447722,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NZP5rEATBlScM9\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1679447723,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Search subscriptions](https://docs.stripe.com/api/subscriptions/search)\n\nSearch for subscriptions you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscriptions. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/subscriptions/search\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"status:'active' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/subscriptions/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679446874,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679446874,      \"currency\": \"usd\",      \"current_period_end\": 1682125274,      \"current_period_start\": 1679446874,      \"customer\": \"cus_NZOq6LNU39H6ZI\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_NZOqmziODmZt2v\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679446875,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1099,              \"amount_decimal\": \"1099\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1099,              \"unit_amount_decimal\": \"1099\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MoG3CLkdIwHu7ixd86qvAfe\"      },      \"latest_invoice\": \"in_1MoG3CLkdIwHu7ixuBm2QIyW\",      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"plan\": {        \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",        \"object\": \"plan\",        \"active\": true,        \"aggregate_usage\": null,        \"amount\": 1099,        \"amount_decimal\": \"1099\",        \"billing_scheme\": \"per_unit\",        \"created\": 1679446873,        \"currency\": \"usd\",        \"interval\": \"month\",        \"interval_count\": 1,        \"livemode\": false,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NZOqsBJfaRYI1M\",        \"tiers_mode\": null,        \"transform_usage\": null,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"quantity\": 1,      \"schedule\": null,      \"start_date\": 1679446874,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List subscriptions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_items",
    "markdown": "# Subscription Items | Stripe API Reference\n\n## [The Subscription Item object](https://docs.stripe.com/api/subscription_items/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The price the customer is subscribed to.\n    \n*   The [quantity](https://docs.stripe.com/subscriptions/quantities) of the plan to which the customer should be subscribed.\n    \n*   The `subscription` this `subscription_item` belongs to.\n    \n\n### More attributes\n\n*   #### \n    \n    billing\\_thresholdsnullable object\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    tax\\_ratesnullable array of objects\n    \n\nThe Subscription Item object\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Create a subscription item](https://docs.stripe.com/api/subscription_items/create)\n\nAdds a new item to an existing subscription. No existing items will be changed or replaced.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The identifier of the subscription to modify.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nReturns the created `Subscription Item` object, if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/subscription\\_items\n\n```\ncurl https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d subscription=sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd \\  -d price=price_1Mr6rdLkdIwHu7ixwPmiybbR \\  -d quantity=2\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Update a subscription item](https://docs.stripe.com/api/subscription_items/update)\n\nUpdates the plan or quantity of an item on a current subscription.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item’s price, `quantity` is set to 1 unless a `quantity` parameter is provided.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nPOST /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {    \"order_id\": \"6735\"  },  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Retrieve a subscription item](https://docs.stripe.com/api/subscription_items/retrieve)\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```",
    "title": "Subscription Items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_items/create",
    "markdown": "# Create a subscription item | Stripe API Reference\n\nAdds a new item to an existing subscription. No existing items will be changed or replaced.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The identifier of the subscription to modify.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nReturns the created `Subscription Item` object, if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/subscription\\_items\n\n```\ncurl https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d subscription=sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd \\  -d price=price_1Mr6rdLkdIwHu7ixwPmiybbR \\  -d quantity=2\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Update a subscription item](https://docs.stripe.com/api/subscription_items/update)\n\nUpdates the plan or quantity of an item on a current subscription.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item’s price, `quantity` is set to 1 unless a `quantity` parameter is provided.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nPOST /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {    \"order_id\": \"6735\"  },  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Retrieve a subscription item](https://docs.stripe.com/api/subscription_items/retrieve)\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [List all subscription items](https://docs.stripe.com/api/subscription_items/list)\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```\n\n## [Delete a subscription item](https://docs.stripe.com/api/subscription_items/delete)\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```",
    "title": "Create a subscription item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_items/list",
    "markdown": "# List all subscription items | Stripe API Reference\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```\n\n## [Delete a subscription item](https://docs.stripe.com/api/subscription_items/delete)\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all subscription items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_items/update",
    "markdown": "# Update a subscription item | Stripe API Reference\n\nUpdates the plan or quantity of an item on a current subscription.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item’s price, `quantity` is set to 1 unless a `quantity` parameter is provided.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nPOST /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {    \"order_id\": \"6735\"  },  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Retrieve a subscription item](https://docs.stripe.com/api/subscription_items/retrieve)\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [List all subscription items](https://docs.stripe.com/api/subscription_items/list)\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```\n\n## [Delete a subscription item](https://docs.stripe.com/api/subscription_items/delete)\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update a subscription item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_items/delete",
    "markdown": "# Delete a subscription item | Stripe API Reference\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Delete a subscription item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_items/retrieve",
    "markdown": "# Retrieve a subscription item | Stripe API Reference\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [List all subscription items](https://docs.stripe.com/api/subscription_items/list)\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```\n\n## [Delete a subscription item](https://docs.stripe.com/api/subscription_items/delete)\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a subscription item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_schedules/update",
    "markdown": "# Update a schedule | Stripe API Reference\n\nUpdates an existing subscription schedule.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted.\n    \n*   If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Prorate changes, and force an invoice to be immediately created for any prorations. |\n    | `create_prorations`<br><br>Prorate changes, but leave any prorations as pending invoice items to be picked up on the customer’s next invoice. |\n    | `none`<br><br>Does not create any prorations. |\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated subscription schedule object if the call succeeded.\n\nPOST /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d end_behavior=release\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Retrieve a schedule](https://docs.stripe.com/api/subscription_schedules/retrieve)\n\nRetrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription schedule object if a valid identifier was provided.\n\nGET /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [List all schedules](https://docs.stripe.com/api/subscription_schedules/list)\n\nRetrieves the list of your subscription schedules.\n\n### Parameters\n\n*   Only return subscription schedules for the given customer.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription schedules, starting after subscription schedule `starting_after`. Each entry in the array is a separate subscription schedule object. If no more subscription schedules are available, the resulting array will be empty.\n\nGET /v1/subscription\\_schedules\n\n```\ncurl -G https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_schedules\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",      \"object\": \"subscription_schedule\",      \"application\": null,      \"canceled_at\": null,      \"completed_at\": null,      \"created\": 1680113835,      \"current_phase\": null,      \"customer\": \"cus_NcI8FsMbh0OeFs\",      \"default_settings\": {        \"application_fee_percent\": null,        \"automatic_tax\": {          \"enabled\": false,          \"liability\": null        },        \"billing_cycle_anchor\": \"automatic\",        \"billing_thresholds\": null,        \"collection_method\": \"charge_automatically\",        \"default_payment_method\": null,        \"default_source\": null,        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"on_behalf_of\": null,        \"transfer_data\": null      },      \"end_behavior\": \"release\",      \"livemode\": false,      \"metadata\": {},      \"phases\": [        {          \"add_invoice_items\": [],          \"application_fee_percent\": null,          \"billing_cycle_anchor\": null,          \"billing_thresholds\": null,          \"collection_method\": null,          \"coupon\": null,          \"currency\": \"usd\",          \"default_payment_method\": null,          \"default_tax_rates\": [],          \"description\": null,          \"discounts\": null,          \"end_date\": 1712339228,          \"invoice_settings\": null,          \"items\": [            {              \"billing_thresholds\": null,              \"discounts\": null,              \"metadata\": {},              \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"quantity\": 1,              \"tax_rates\": []            }          ],          \"metadata\": {},          \"on_behalf_of\": null,          \"proration_behavior\": \"create_prorations\",          \"start_date\": 1680716828,          \"transfer_data\": null,          \"trial_end\": null        }      ],      \"released_at\": null,      \"released_subscription\": null,      \"renewal_interval\": null,      \"status\": \"not_started\",      \"subscription\": null,      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a schedule](https://docs.stripe.com/api/subscription_schedules/cancel)\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Release a schedule](https://docs.stripe.com/api/subscription_schedules/release)\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```",
    "title": "Update a schedule | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_schedules/list",
    "markdown": "# List all schedules | Stripe API Reference\n\nRetrieves the list of your subscription schedules.\n\n### Parameters\n\n*   Only return subscription schedules for the given customer.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription schedules, starting after subscription schedule `starting_after`. Each entry in the array is a separate subscription schedule object. If no more subscription schedules are available, the resulting array will be empty.\n\nGET /v1/subscription\\_schedules\n\n```\ncurl -G https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_schedules\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",      \"object\": \"subscription_schedule\",      \"application\": null,      \"canceled_at\": null,      \"completed_at\": null,      \"created\": 1680113835,      \"current_phase\": null,      \"customer\": \"cus_NcI8FsMbh0OeFs\",      \"default_settings\": {        \"application_fee_percent\": null,        \"automatic_tax\": {          \"enabled\": false,          \"liability\": null        },        \"billing_cycle_anchor\": \"automatic\",        \"billing_thresholds\": null,        \"collection_method\": \"charge_automatically\",        \"default_payment_method\": null,        \"default_source\": null,        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"on_behalf_of\": null,        \"transfer_data\": null      },      \"end_behavior\": \"release\",      \"livemode\": false,      \"metadata\": {},      \"phases\": [        {          \"add_invoice_items\": [],          \"application_fee_percent\": null,          \"billing_cycle_anchor\": null,          \"billing_thresholds\": null,          \"collection_method\": null,          \"coupon\": null,          \"currency\": \"usd\",          \"default_payment_method\": null,          \"default_tax_rates\": [],          \"description\": null,          \"discounts\": null,          \"end_date\": 1712339228,          \"invoice_settings\": null,          \"items\": [            {              \"billing_thresholds\": null,              \"discounts\": null,              \"metadata\": {},              \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"quantity\": 1,              \"tax_rates\": []            }          ],          \"metadata\": {},          \"on_behalf_of\": null,          \"proration_behavior\": \"create_prorations\",          \"start_date\": 1680716828,          \"transfer_data\": null,          \"trial_end\": null        }      ],      \"released_at\": null,      \"released_subscription\": null,      \"renewal_interval\": null,      \"status\": \"not_started\",      \"subscription\": null,      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a schedule](https://docs.stripe.com/api/subscription_schedules/cancel)\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Release a schedule](https://docs.stripe.com/api/subscription_schedules/release)\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all schedules | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_schedules/cancel",
    "markdown": "# Cancel a schedule | Stripe API Reference\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Release a schedule](https://docs.stripe.com/api/subscription_schedules/release)\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Cancel a schedule | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_schedules/retrieve",
    "markdown": "# Retrieve a schedule | Stripe API Reference\n\nRetrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription schedule object if a valid identifier was provided.\n\nGET /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [List all schedules](https://docs.stripe.com/api/subscription_schedules/list)\n\nRetrieves the list of your subscription schedules.\n\n### Parameters\n\n*   Only return subscription schedules for the given customer.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription schedules, starting after subscription schedule `starting_after`. Each entry in the array is a separate subscription schedule object. If no more subscription schedules are available, the resulting array will be empty.\n\nGET /v1/subscription\\_schedules\n\n```\ncurl -G https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_schedules\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",      \"object\": \"subscription_schedule\",      \"application\": null,      \"canceled_at\": null,      \"completed_at\": null,      \"created\": 1680113835,      \"current_phase\": null,      \"customer\": \"cus_NcI8FsMbh0OeFs\",      \"default_settings\": {        \"application_fee_percent\": null,        \"automatic_tax\": {          \"enabled\": false,          \"liability\": null        },        \"billing_cycle_anchor\": \"automatic\",        \"billing_thresholds\": null,        \"collection_method\": \"charge_automatically\",        \"default_payment_method\": null,        \"default_source\": null,        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"on_behalf_of\": null,        \"transfer_data\": null      },      \"end_behavior\": \"release\",      \"livemode\": false,      \"metadata\": {},      \"phases\": [        {          \"add_invoice_items\": [],          \"application_fee_percent\": null,          \"billing_cycle_anchor\": null,          \"billing_thresholds\": null,          \"collection_method\": null,          \"coupon\": null,          \"currency\": \"usd\",          \"default_payment_method\": null,          \"default_tax_rates\": [],          \"description\": null,          \"discounts\": null,          \"end_date\": 1712339228,          \"invoice_settings\": null,          \"items\": [            {              \"billing_thresholds\": null,              \"discounts\": null,              \"metadata\": {},              \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"quantity\": 1,              \"tax_rates\": []            }          ],          \"metadata\": {},          \"on_behalf_of\": null,          \"proration_behavior\": \"create_prorations\",          \"start_date\": 1680716828,          \"transfer_data\": null,          \"trial_end\": null        }      ],      \"released_at\": null,      \"released_subscription\": null,      \"renewal_interval\": null,      \"status\": \"not_started\",      \"subscription\": null,      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a schedule](https://docs.stripe.com/api/subscription_schedules/cancel)\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Release a schedule](https://docs.stripe.com/api/subscription_schedules/release)\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a schedule | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_balance_transactions",
    "markdown": "# Customer Balance Transaction | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fcustomer_balance_transactions)\n\n## [The Customer Balance Transaction object](https://docs.stripe.com/api/customer_balance_transactions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount of the transaction. A negative value is a credit for the customer’s balance, and a positive value is a debit to the customer’s `balance`.\n    \n\n*   The ID of the customer the transaction belongs to.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The customer’s `balance` after the transaction was applied. A negative value decreases the amount due on the customer’s next invoice. A positive value increases the amount due on the customer’s next invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://docs.stripe.com/billing/customer/balance#types) to learn more about transaction types.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `adjustment`<br><br>An explicitly created adjustment transaction to debit or credit the credit balance. |\n    | `applied_to_invoice`<br><br>Traces the application of credit against a linked Invoice. |\n    | `credit_note`<br><br>Traces the creation of credit to a Credit Note and its associated Invoice. |\n    | `initial`<br><br>The starting value of the customer’s credit balance. |\n    | `invoice_overpaid`<br><br>Credits to the credit balance when an invoice receives payments exceeding the amount due. |\n    | `invoice_too_large`<br><br>Debits to the credit balance when the amount due on an invoice is greater than Stripe’s maximum chargeable amount and the customer does not have a cash balance. |\n    | `invoice_too_small`<br><br>Debits to the credit balance when the amount due on an invoice is less than Stripe’s minimum chargeable amount and the customer does not have a cash balance. |\n    | `migration`<br><br>Funds migrated from the legacy customer credit balance. |\n    | `unapplied_from_invoice`<br><br>Traces the reversal of an applied credit balance from a linked Invoice. Paired with an earlier ‘applied\\_to\\_invoice’ transaction. |\n    | `unspent_receiver_credit`<br><br>Unspent funds in receiver Sources that got automatically charged and credited to the balance. |\n    | Show 1 more |\n    \n\n### More attributes\n\n*   #### \n    \n    credit\\_notenullable stringExpandable\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n\nThe Customer Balance Transaction object\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Create a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/create)\n\nCreates an immutable transaction that updates the customer’s credit [balance](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\n*   The integer amount in **cents** to apply to the customer’s credit balance.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=-500 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Update a customer credit balance transaction](https://docs.stripe.com/api/customer_balance_transactions/update)\n\nMost credit balance transaction fields are immutable, but you may update its `description` and `metadata`.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"adjustment\"}\n```\n\n## [Retrieve a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/retrieve)\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```",
    "title": "Customer Balance Transaction | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/preview",
    "markdown": "# Preview a credit note | Stripe API Reference\n\nGet a preview of a credit note without creating it.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object.\n\nGET /v1/credit\\_notes/preview\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Void a credit note](https://docs.stripe.com/api/credit_notes/void)\n\nMarks a credit note as void. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"void\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": 1681750959}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Preview a credit note | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_balance_transactions/update",
    "markdown": "# Update a customer credit balance transaction\n\nMost credit balance transaction fields are immutable, but you may update its `description` and `metadata`.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"adjustment\"}\n```\n\n## [Retrieve a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/retrieve)\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [List customer balance transactions](https://docs.stripe.com/api/customer_balance_transactions/list)\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update a customer credit balance transaction | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_balance_transactions/create",
    "markdown": "# Create a customer balance transaction\n\nCreates an immutable transaction that updates the customer’s credit [balance](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\n*   The integer amount in **cents** to apply to the customer’s credit balance.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=-500 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Update a customer credit balance transaction](https://docs.stripe.com/api/customer_balance_transactions/update)\n\nMost credit balance transaction fields are immutable, but you may update its `description` and `metadata`.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"adjustment\"}\n```\n\n## [Retrieve a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/retrieve)\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [List customer balance transactions](https://docs.stripe.com/api/customer_balance_transactions/list)\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a customer balance transaction | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_balance_transactions/retrieve",
    "markdown": "# Retrieve a customer balance transaction\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [List customer balance transactions](https://docs.stripe.com/api/customer_balance_transactions/list)\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a customer balance transaction | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax_ids/customer_create",
    "markdown": "# Create a Customer tax ID\n\nCreates a new `tax_id` object for a customer.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### Returns\n\nThe created `tax_id` object.\n\nPOST /v1/customers/:id/tax\\_ids\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Create a tax ID](https://docs.stripe.com/api/tax_ids/create)\n\nCreates a new account or customer `tax_id` object.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### More parameters\n\n### Returns\n\nThe created `tax_id` object.\n\n```\ncurl https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Retrieve a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Retrieve a tax ID](https://docs.stripe.com/api/tax_ids/retrieve)\n\nRetrieves an account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [List all Customer tax IDs](https://docs.stripe.com/api/tax_ids/customer_list)\n\nReturns a list of tax IDs for a customer.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty. Raises [an error](#errors) if the customer ID is invalid.\n\nGET /v1/customers/:id/tax\\_ids\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 1679431857,      \"customer\": \"cus_NZKoSNZZ58qtO0\",      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": {        \"status\": \"pending\",        \"verified_address\": null,        \"verified_name\": null      }    }    {...}    {...}  ],}\n```",
    "title": "Create a Customer tax ID | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_balance_transactions/list",
    "markdown": "# List customer balance transactions | Stripe API Reference\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List customer balance transactions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/sessions",
    "markdown": "# Customer Portal Session | Stripe API Reference\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [The Customer Portal Session object](https://docs.stripe.com/api/customer_portal/sessions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    configurationstringExpandable\n    \n    The configuration used by this session, describing the features available.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The ID of the customer for this session.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n    The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    The URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n*   The short-lived URL of the session that gives customers access to the customer portal.\n    \n\nThe Customer Portal Session object\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Create a portal session](https://docs.stripe.com/api/customer_portal/sessions/create)\n\nCreates a session of the customer portal.\n\n### Parameters\n\n*   The ID of an existing customer.\n    \n*   The ID of an existing [configuration](https://docs.stripe.com/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n    The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n\n### Returns\n\nReturns a portal session object.\n\nPOST /v1/billing\\_portal/sessions\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NciAYcXfLnqBoz \\  --data-urlencode return_url=\"https://example.com/account\"\n```\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Customer Portal Session | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax_ids/customer_retrieve",
    "markdown": "# Retrieve a Customer tax ID\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax_ids%2Fcustomer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Retrieve a tax ID](https://docs.stripe.com/api/tax_ids/retrieve)\n\nRetrieves an account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [List all Customer tax IDs](https://docs.stripe.com/api/tax_ids/customer_list)\n\nReturns a list of tax IDs for a customer.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty. Raises [an error](#errors) if the customer ID is invalid.\n\nGET /v1/customers/:id/tax\\_ids\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 1679431857,      \"customer\": \"cus_NZKoSNZZ58qtO0\",      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": {        \"status\": \"pending\",        \"verified_address\": null,        \"verified_name\": null      }    }    {...}    {...}  ],}\n```\n\n## [List all tax IDs](https://docs.stripe.com/api/tax_ids/list)\n\nReturns a list of tax IDs.\n\n### Parameters\n\n*   The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 123456789,      \"customer\": null,      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": null,      \"owner\": {        \"type\": \"self\",        \"customer\": null      }    }    {...}    {...}  ],}\n```\n\n## [Delete a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_delete)\n\nDeletes an existing `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\nDELETE /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"deleted\": true}\n```",
    "title": "Retrieve a Customer tax ID | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/configurations",
    "markdown": "# Customer Portal Configuration | Stripe API Reference\n\n## [The Customer portal configuration object](https://docs.stripe.com/api/customer_portal/configurations/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n    ID of the Connect Application that created the configuration.\n    \n*   The business information shown to customers in the portal.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    default\\_return\\_urlnullable string\n    \n    The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n\nThe Customer portal configuration object\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Create a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/create)\n\nCreates a configuration that describes the functionality and behavior of a PortalSession\n\n### Parameters\n\n*   #### \n    \n    business\\_profileobjectRequired\n    \n    The business information shown to customers in the portal.\n    \n*   Information about the features available in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/privacy\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/terms\" \\  -d \"features[customer_update][allowed_updates][]\"=email \\  -d \"features[customer_update][allowed_updates][]\"=tax_id \\  -d \"features[customer_update][enabled]\"=true \\  -d \"features[invoice_history][enabled]\"=true\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Update a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/update)\n\nUpdates a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   The business information shown to customers in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/new_privacy_url\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/new_terms_of_service_url\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/new_privacy_url\",    \"terms_of_service_url\": \"https://example.com/new_terms_of_service_url\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1688593779}\n```\n\n## [Retrieve a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/retrieve)\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```",
    "title": "Customer Portal Configuration | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/configurations/create",
    "markdown": "# Create a portal configuration | Stripe API Reference\n\nCreates a configuration that describes the functionality and behavior of a PortalSession\n\n### Parameters\n\n*   #### \n    \n    business\\_profileobjectRequired\n    \n    The business information shown to customers in the portal.\n    \n*   Information about the features available in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/privacy\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/terms\" \\  -d \"features[customer_update][allowed_updates][]\"=email \\  -d \"features[customer_update][allowed_updates][]\"=tax_id \\  -d \"features[customer_update][enabled]\"=true \\  -d \"features[invoice_history][enabled]\"=true\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Update a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/update)\n\nUpdates a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   The business information shown to customers in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/new_privacy_url\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/new_terms_of_service_url\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/new_privacy_url\",    \"terms_of_service_url\": \"https://example.com/new_terms_of_service_url\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1688593779}\n```\n\n## [Retrieve a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/retrieve)\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [List portal configurations](https://docs.stripe.com/api/customer_portal/configurations/list)\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a portal configuration | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter/retrieve",
    "markdown": "# Retrieve a billing meter | Stripe API Reference\n\nRetrieves a billing meter given an ID\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nGET /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [List billing meters](https://docs.stripe.com/api/billing/meter/list)\n\nRetrieve a list of billing meters.\n\n### Parameters\n\n*   Filter results to only include meters with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meters.\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtr_123\",      \"object\": \"billing.meter\",      \"created\": 1704824589,      \"customer_mapping\": {        \"type\": \"by_id\",        \"event_payload_key\": \"stripe_customer_id\"      },      \"default_aggregation\": {        \"formula\": \"sum\"      },      \"display_name\": \"Search API Calls\",      \"event_name\": \"ai_search_api\",      \"event_time_window\": null,      \"livemode\": false,      \"status\": \"active\",      \"status_transitions\": {        \"deactivated_at\": null      },      \"updated\": 1704898330,      \"value_settings\": {        \"event_payload_key\": \"tokens\"      }    }  ],  \"has_more\": true,  \"url\": \"v1/billing/meters\"}\n```\n\n## [Deactivate a billing meter](https://docs.stripe.com/api/billing/meter/deactivate)\n\nDeactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": 1704898330  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Reactivate a billing meter](https://docs.stripe.com/api/billing/meter/reactivate)\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a billing meter | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/configurations/update",
    "markdown": "# Update a portal configuration | Stripe API Reference\n\nUpdates a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   The business information shown to customers in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/new_privacy_url\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/new_terms_of_service_url\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/new_privacy_url\",    \"terms_of_service_url\": \"https://example.com/new_terms_of_service_url\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1688593779}\n```\n\n## [Retrieve a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/retrieve)\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [List portal configurations](https://docs.stripe.com/api/customer_portal/configurations/list)\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update a portal configuration | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/configurations/retrieve",
    "markdown": "# Retrieve a portal configuration | Stripe API Reference\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [List portal configurations](https://docs.stripe.com/api/customer_portal/configurations/list)\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a portal configuration | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/configurations/list",
    "markdown": "# List portal configurations | Stripe API Reference\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List portal configurations | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter/list",
    "markdown": "# List billing meters | Stripe API Reference\n\nRetrieve a list of billing meters.\n\n### Parameters\n\n*   Filter results to only include meters with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meters.\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtr_123\",      \"object\": \"billing.meter\",      \"created\": 1704824589,      \"customer_mapping\": {        \"type\": \"by_id\",        \"event_payload_key\": \"stripe_customer_id\"      },      \"default_aggregation\": {        \"formula\": \"sum\"      },      \"display_name\": \"Search API Calls\",      \"event_name\": \"ai_search_api\",      \"event_time_window\": null,      \"livemode\": false,      \"status\": \"active\",      \"status_transitions\": {        \"deactivated_at\": null      },      \"updated\": 1704898330,      \"value_settings\": {        \"event_payload_key\": \"tokens\"      }    }  ],  \"has_more\": true,  \"url\": \"v1/billing/meters\"}\n```\n\n## [Deactivate a billing meter](https://docs.stripe.com/api/billing/meter/deactivate)\n\nDeactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": 1704898330  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Reactivate a billing meter](https://docs.stripe.com/api/billing/meter/reactivate)\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List billing meters | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter/deactivate",
    "markdown": "# Deactivate a billing meter | Stripe API Reference\n\nDeactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": 1704898330  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Reactivate a billing meter](https://docs.stripe.com/api/billing/meter/reactivate)\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Deactivate a billing meter | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter/reactivate",
    "markdown": "# Reactivate a billing meter | Stripe API Reference\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Reactivate a billing meter | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter-event/create",
    "markdown": "# Create a billing meter event\n\nCreates a billing meter event\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   The payload of the event. This must contain the fields corresponding to a meter’s `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).\n    \n*   A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this. We’ll enforce uniqueness within a rolling 24 hour period.\n    \n*   The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.\n    \n\n### Returns\n\nReturns a billing meter event\n\nPOST /v1/billing/meter\\_events\n\n```\ncurl https://api.stripe.com/v1/billing/meter_events \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d event_name=ai_search_api \\  -d \"payload[value]\"=25 \\  -d \"payload[stripe_customer_id]\"=cus_NciAYcXfLnqBoz \\  -d identifier=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event\",  \"created\": 1704824589,  \"event_name\": \"ai_search_api\",  \"identifier\": \"identifier_123\",  \"livemode\": true,  \"payload\": {    \"value\": \"25\",    \"stripe_customer_id\": \"cus_NciAYcXfLnqBoz\"  },  \"timestamp\": 1680210639}\n```\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a billing meter event | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoiceitems/create",
    "markdown": "# Create an invoice item | Stripe API Reference\n\nCreates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.\n\n### Parameters\n\n*   The ID of the customer who will be billed when this invoice item is billed.\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice.\n    \n\n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe created invoice item object is returned if successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZei8imSbMVvi \\  -d price=price_1MtGUsLkdIwHu7ix1be5Ljaj\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Update an invoice item](https://docs.stripe.com/api/invoiceitems/update)\n\nUpdates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.\n\n### Parameters\n\n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe updated invoice item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoiceitems/:id\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Retrieve an invoice item](https://docs.stripe.com/api/invoiceitems/retrieve)\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [List all invoice items](https://docs.stripe.com/api/invoiceitems/list)\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```\n\n## [Delete an invoice item](https://docs.stripe.com/api/invoiceitems/delete)\n\nDeletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted invoice item’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the invoice item has already been deleted.\n\nDELETE /v1/invoiceitems/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"deleted\": true}\n```",
    "title": "Create an invoice item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter-event_adjustment",
    "markdown": "# Meter Event Adjustment | Stripe API Reference\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [The Meter Event Adjustment object](https://docs.stripe.com/api/billing/meter-event_adjustment/object)\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Specifies which event to cancel.\n    \n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter event adjustment’s status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `complete`<br><br>The event adjustment has been processed. |\n    | `pending`<br><br>The event adjustment is still being processed. |\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n\nThe Meter Event Adjustment object\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Create a billing meter event adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment/create)\n\nCreates a billing meter event adjustment\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n*   Specifies which event to cancel.\n    \n\n### Returns\n\nReturns a billing meter event adjustment\n\nPOST /v1/billing/meter\\_event\\_adjustments\n\n```\ncurl https://api.stripe.com/v1/billing/meter_event_adjustments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cancel \\  -d event_name=ai_search_api \\  -d \"cancel[identifier]\"=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Meter Event Adjustment | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoiceitems/update",
    "markdown": "# Update an invoice item | Stripe API Reference\n\nUpdates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.\n\n### Parameters\n\n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe updated invoice item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoiceitems/:id\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Retrieve an invoice item](https://docs.stripe.com/api/invoiceitems/retrieve)\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [List all invoice items](https://docs.stripe.com/api/invoiceitems/list)\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```\n\n## [Delete an invoice item](https://docs.stripe.com/api/invoiceitems/delete)\n\nDeletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted invoice item’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the invoice item has already been deleted.\n\nDELETE /v1/invoiceitems/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"deleted\": true}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update an invoice item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoiceitems/retrieve",
    "markdown": "# Retrieve an invoice item | Stripe API Reference\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [List all invoice items](https://docs.stripe.com/api/invoiceitems/list)\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```\n\n## [Delete an invoice item](https://docs.stripe.com/api/invoiceitems/delete)\n\nDeletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted invoice item’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the invoice item has already been deleted.\n\nDELETE /v1/invoiceitems/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"deleted\": true}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve an invoice item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter-event_adjustment/create",
    "markdown": "# Create a billing meter event adjustment\n\nCreates a billing meter event adjustment\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n*   Specifies which event to cancel.\n    \n\n### Returns\n\nReturns a billing meter event adjustment\n\nPOST /v1/billing/meter\\_event\\_adjustments\n\n```\ncurl https://api.stripe.com/v1/billing/meter_event_adjustments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cancel \\  -d event_name=ai_search_api \\  -d \"cancel[identifier]\"=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a billing meter event adjustment | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  }
]