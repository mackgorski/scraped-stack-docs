[
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",
    "markdown": "# import - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe static **`import`** declaration is used to import read-only live [bindings](https://developer.mozilla.org/en-US/docs/Glossary/Binding) which are [exported](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) by another module. The imported bindings are called _live bindings_ because they are updated by the module that exported the binding, but cannot be re-assigned by the importing module.\n\nIn order to use the `import` declaration in a source file, the file must be interpreted by the runtime as a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules). In HTML, this is done by adding `type=\"module\"` to the [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) tag. Modules are automatically interpreted in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\nThere is also a function-like dynamic [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import), which does not require scripts of `type=\"module\"`.\n\n## [Syntax](#syntax)\n\n```\nimport defaultExport from \"module-name\";\nimport * as name from \"module-name\";\nimport { export1 } from \"module-name\";\nimport { export1 as alias1 } from \"module-name\";\nimport { default as alias } from \"module-name\";\nimport { export1, export2 } from \"module-name\";\nimport { export1, export2 as alias2, /* … */ } from \"module-name\";\nimport { \"string name\" as alias } from \"module-name\";\nimport defaultExport, { export1, /* … */ } from \"module-name\";\nimport defaultExport, * as name from \"module-name\";\nimport \"module-name\";\n```\n\n[`defaultExport`](#defaultexport)\n\nName that will refer to the default export from the module. Must be a valid JavaScript identifier.\n\n[`module-name`](#module-name)\n\nThe module to import from. The evaluation of the specifier is host-specified. This is often a relative or absolute URL to the `.js` file containing the module. In Node, extension-less imports often refer to packages in `node_modules`. Certain bundlers may permit importing files without extensions; check your environment. Only single quoted and double quoted Strings are allowed.\n\n[`name`](#name)\n\nName of the module object that will be used as a kind of namespace when referring to the imports. Must be a valid JavaScript identifier.\n\n[`exportN`](#exportn)\n\nName of the exports to be imported. The name can be either an identifier or a string literal, depending on what `module-name` declares to export. If it is a string literal, it must be aliased to a valid identifier.\n\n[`aliasN`](#aliasn)\n\nNames that will refer to the named imports. Must be a valid JavaScript identifier.\n\n## [Description](#description)\n\n`import` declarations can only be present in modules, and only at the top-level (i.e. not inside blocks, functions, etc.). If an `import` declaration is encountered in non-module contexts (for example, `<script>` tags without `type=\"module\"`, `eval`, `new Function`, which all have \"script\" or \"function body\" as parsing goals), a `SyntaxError` is thrown. To load modules in non-module contexts, use the [dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) syntax instead.\n\nAll imported bindings cannot be in the same scope as any other declaration, including [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class), [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function), [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), and `import` declaration.\n\n`import` declarations are designed to be syntactically rigid (for example, only string literal specifiers, only permitted at the top-level, all bindings must be identifiers), which allows modules to be statically analyzed and linked before getting evaluated. This is the key to making modules asynchronous by nature, powering features like [top-level await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#top_level_await).\n\n### [Forms of import declarations](#forms_of_import_declarations)\n\nThere are four forms of `import` declarations:\n\n*   [Named import](#named_import): `import { export1, export2 } from \"module-name\";`\n*   [Default import](#default_import): `import defaultExport from \"module-name\";`\n*   [Namespace import](#namespace_import): `import * as name from \"module-name\";`\n*   [Side effect import](#import_a_module_for_its_side_effects_only): `import \"module-name\";`\n\nBelow are examples to clarify the syntax.\n\n#### Named import\n\nGiven a value named `myExport` which has been exported from the module `my-module` either implicitly as `export * from \"another.js\"` or explicitly using the [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) statement, this inserts `myExport` into the current scope.\n\n```\nimport { myExport } from \"/modules/my-module.js\";\n```\n\nYou can import multiple names from the same module.\n\n```\nimport { foo, bar } from \"/modules/my-module.js\";\n```\n\nYou can rename an export when importing it. For example, this inserts `shortName` into the current scope.\n\n```\nimport { reallyReallyLongModuleExportName as shortName } from \"/modules/my-module.js\";\n```\n\nA module may also export a member as a string literal which is not a valid identifier, in which case you must alias it in order to use it in the current module.\n\n```\n// /modules/my-module.js\nconst a = 1;\nexport { a as \"a-b\" };\n```\n\n```\nimport { \"a-b\" as a } from \"/modules/my-module.js\";\n```\n\n**Note:** `import { x, y } from \"mod\"` is not equivalent to `import defaultExport from \"mod\"` and then destructuring `x` and `y` from `defaultExport`. Named and default imports are distinct syntaxes in JavaScript modules.\n\n#### Default import\n\nDefault exports need to be imported with the corresponding default import syntax. The simplest version directly imports the default:\n\n```\nimport myDefault from \"/modules/my-module.js\";\n```\n\nSince the default export doesn't explicitly specify a name, you can give the identifier any name you like.\n\nIt is also possible to specify a default import with namespace imports or named imports. In such cases, the default import will have to be declared first. For instance:\n\n```\nimport myDefault, * as myModule from \"/modules/my-module.js\";\n// myModule.default and myDefault point to the same binding\n```\n\nor\n\n```\nimport myDefault, { foo, bar } from \"/modules/my-module.js\";\n```\n\nImporting a name called `default` has the same effect as a default import. It is necessary to alias the name because `default` is a reserved word.\n\n```\nimport { default as myDefault } from \"/modules/my-module.js\";\n```\n\n#### Namespace import\n\nThe following code inserts `myModule` into the current scope, containing all the exports from the module located at `/modules/my-module.js`.\n\n```\nimport * as myModule from \"/modules/my-module.js\";\n```\n\nHere, `myModule` represents a _namespace_ object which contains all exports as properties. For example, if the module imported above includes an export `doAllTheAmazingThings()`, you would call it like this:\n\n```\nmyModule.doAllTheAmazingThings();\n```\n\n`myModule` is a [sealed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed) object with [`null` prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects). The default export available as a key called `default`. For more information, see [module namespace object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object).\n\n**Note:** JavaScript does not have wildcard imports like `import * from \"module-name\"`, because of the high possibility of name conflicts.\n\n#### Import a module for its side effects only\n\nImport an entire module for side effects only, without importing anything. This runs the module's global code, but doesn't actually import any values.\n\n```\nimport \"/modules/my-module.js\";\n```\n\nThis is often used for [polyfills](https://developer.mozilla.org/en-US/docs/Glossary/Polyfill), which mutate the global variables.\n\n### [Hoisting](#hoisting)\n\nImport declarations are [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting). In this case, that means that the identifiers the imports introduce are available in the entire module scope, and their side effects are produced before the rest of the module's code runs.\n\n```\nmyModule.doAllTheAmazingThings(); // myModule.doAllTheAmazingThings is imported by the next line\n\nimport * as myModule from \"/modules/my-module.js\";\n```\n\n## [Examples](#examples)\n\n### [Standard Import](#standard_import)\n\nIn this example, we create a re-usable module that exports a function to get all primes within a given range.\n\n```\n// getPrimes.js\n/**\n * Returns a list of prime numbers that are smaller than `max`.\n */\nexport function getPrimes(max) {\n  const isPrime = Array.from({ length: max }, () => true);\n  isPrime[0] = isPrime[1] = false;\n  isPrime[2] = true;\n  for (let i = 2; i * i < max; i++) {\n    if (isPrime[i]) {\n      for (let j = i ** 2; j < max; j += i) {\n        isPrime[j] = false;\n      }\n    }\n  }\n  return [...isPrime.entries()]\n    .filter(([, isPrime]) => isPrime)\n    .map(([number]) => number);\n}\n```\n\n```\nimport { getPrimes } from \"/modules/getPrimes.js\";\n\nconsole.log(getPrimes(10)); // [2, 3, 5, 7]\n```\n\n### [Imported values can only be modified by the exporter](#imported_values_can_only_be_modified_by_the_exporter)\n\nThe identifier being imported is a _live binding_, because the module exporting it may re-assign it and the imported value would change. However, the module importing it cannot re-assign it. Still, any module holding an exported object can mutate the object, and the mutated value can be observed by all other modules importing the same value.\n\nYou can also observe the new value through the [module namespace object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object).\n\n```\n// my-module.js\nexport let myValue = 1;\nsetTimeout(() => {\n  myValue = 2;\n}, 500);\n```\n\n```\n// main.js\nimport { myValue } from \"/modules/my-module.js\";\nimport * as myModule from \"/modules/my-module.js\";\n\nconsole.log(myValue); // 1\nconsole.log(myModule.myValue); // 1\nsetTimeout(() => {\n  console.log(myValue); // 2; my-module has updated its value\n  console.log(myModule.myValue); // 2\n  myValue = 3; // TypeError: Assignment to constant variable.\n  // The importing module can only read the value but can't re-assign it.\n}, 1000);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-imports](https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#sec-imports) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "import - JavaScript | MDN",
    "description": "The static import declaration is used to import read-only live bindings which are exported by another module. The imported bindings are called live bindings because they are updated by the module that exported the binding, but cannot be re-assigned by the importing module.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions",
    "markdown": "# Regular expressions - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **regular expression** (_regex_ for short) allow developers to match strings against a pattern, extract submatch information, or simply test if the string conforms to that pattern. Regular expressions are used in many programming languages, and JavaScript's syntax is inspired by [Perl](https://www.perl.org/).\n\nYou are encouraged to read the [regular expressions guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions) to get an overview of the available regex syntaxes and how they work.\n\n## [Description](#description)\n\n[_Regular expressions_](https://en.wikipedia.org/wiki/Regular_expression) are a important concept in formal language theory. They are a way to describe a possibly infinite set of character strings (called a _language_). A regular expression, at its core, needs the following features:\n\n*   A set of _characters_ that can be used in the language, called the _alphabet_.\n*   _Concatenation_: `ab` means \"the character `a` followed by the character `b`\".\n*   _Union_: `a|b` means \"either `a` or `b`\".\n*   _Kleene star_: `a*` means \"zero or more `a` characters\".\n\nAssuming a finite alphabet (such as the 26 letters of the English alphabet, or the entire Unicode character set), all regular languages can be generated by the features above. Of course, many patterns are very tedious to express this way (such as \"10 digits\" or \"a character that's not a space\"), so JavaScript regular expressions include many shorthands, introduced below.\n\n**Note:** JavaScript regular expressions are in fact not regular, due to the existence of [backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) (regular expressions must have finite states). However, they are still a very useful feature.\n\n### [Creating regular expressions](#creating_regular_expressions)\n\nA regular expression is typically created as a literal by enclosing a pattern in forward slashes (`/`):\n\nRegular expressions can also be created with the [`RegExp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor:\n\n```\nconst regex2 = new RegExp(\"ab+c\", \"g\");\n```\n\nThey have no runtime differences, although they may have implications on performance, static analyzability, and authoring ergonomic issues with escaping characters. For more information, see the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#literal_notation_and_constructor) reference.\n\n### [Regex flags](#regex_flags)\n\nFlags are special parameters that can change the way a regular expression is interpreted or the way it interacts with the input text. Each flag corresponds to one accessor property on the `RegExp` object.\n\n| Flag | Description | Corresponding property |\n| --- | --- | --- |\n| `d` | Generate indices for substring matches. | [`hasIndices`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices) |\n| `g` | Global search. | [`global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) |\n| `i` | Case-insensitive search. | [`ignoreCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) |\n| `m` | Allows `^` and `$` to match next to newline characters. | [`multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) |\n| `s` | Allows `.` to match newline characters. | [`dotAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) |\n| `u` | \"Unicode\"; treat a pattern as a sequence of Unicode code points. | [`unicode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) |\n| `v` | An upgrade to the `u` mode with more Unicode features. | [`unicodeSets`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) |\n| `y` | Perform a \"sticky\" search that matches starting at the current position in the target string. | [`sticky`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) |\n\nThe sections below list all available regex syntaxes, grouped by their syntactic nature.\n\n### [Assertions](#assertions)\n\nAssertions are constructs that test whether the string meets a certain condition at the specified position, but not consume characters. Assertions cannot be [quantified](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier).\n\n[Input boundary assertion: `^`, `$`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion)\n\nAsserts that the current position is the start or end of input, or start or end of a line if the `m` flag is set.\n\n[Lookahead assertion: `(?=...)`, `(?!...)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion)\n\nAsserts that the current position is followed or not followed by a certain pattern.\n\n[Lookbehind assertion: `(?<=...)`, `(?<!...)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion)\n\nAsserts that the current position is preceded or not preceded by a certain pattern.\n\n[Word boundary assertion: `\\b`, `\\B`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion)\n\nAsserts that the current position is a word boundary.\n\n### [Atoms](#atoms)\n\nAtoms are the most basic units of a regular expression. Each atom _consumes_ one or more characters in the string, and either fails the match or allows the pattern to continue matching with the next atom.\n\n[Backreference: `\\1`, `\\2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference)\n\nMatches a previously matched subpattern captured with a capturing group.\n\n[Capturing group: `(...)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group)\n\nMatches a subpattern and remembers information about the match.\n\n[Character class: `[...]`, `[^...]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class)\n\nMatches any character in or not in a set of characters. When the [`v`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) flag is enabled, it can also be used to match finite-length strings.\n\n[Character class escape: `\\d`, `\\D`, `\\w`, `\\W`, `\\s`, `\\S`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape)\n\nMatches any character in or not in a predefined set of characters.\n\n[Character escape: `\\n`, `\\u{...}`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape)\n\nMatches a character that may not be able to be conveniently represented in its literal form.\n\n[Literal character: `a`, `b`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character)\n\nMatches a specific character.\n\n[Named backreference: `\\k<name>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference)\n\nMatches a previously matched subpattern captured with a named capturing group.\n\n[Named capturing group: `(?<name>...)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group)\n\nMatches a subpattern and remembers information about the match. The group can later be identified by a custom name instead of by its index in the pattern.\n\n[Non-capturing group: `(?:...)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group)\n\nMatches a subpattern without remembering information about the match.\n\n[Unicode character class escape: `\\p{...}`, `\\P{...}`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape)\n\nMatches a set of characters specified by a Unicode property. When the [`v`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) flag is enabled, it can also be used to match finite-length strings.\n\n[Wildcard: `.`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard)\n\nMatches any character except line terminators, unless the `s` flag is set.\n\n### [Other features](#other_features)\n\nThese features do not specify any pattern themselves, but are used to compose patterns.\n\n[Disjunction: `|`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction)\n\nMatches any of a set of alternatives separated by the `|` character.\n\n[Quantifier: `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier)\n\nMatches an atom a certain number of times.\n\n### [Escape sequences](#escape_sequences)\n\n_Escape sequences_ in regexes refer to any kind of syntax formed by `\\` followed by one or more characters. They may serve very different purposes depending on what follow `\\`. Below is a list of all valid \"escape sequences\":\n\n| Escape sequence | Followed by | Meaning |\n| --- | --- | --- |\n| `\\B` | None | [Non-word-boundary assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion) |\n| `\\D` | None | [Character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) representing non-digit characters |\n| `\\P` | `{`, a Unicode property and/or value, then `}` | [Unicode character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) representing characters without the specified Unicode property |\n| `\\S` | None | [Character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) representing non-white-space characters |\n| `\\W` | None | [Character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) representing non-word characters |\n| `\\b` | None | [Word boundary assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion); inside [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class), represents U+0008 (BACKSPACE) |\n| `\\c` | A letter from `A` to `Z` or `a` to `z` | A [character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing the control character with value equal to the letter's character value modulo 32 |\n| `\\d` | None | [Character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) representing digit characters (`0` to `9`) |\n| `\\f` | None | [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing U+000C (FORM FEED) |\n| `\\k` | `<`, an identifier, then `>` | A [named backreference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference) |\n| `\\n` | None | [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing U+000A (LINE FEED) |\n| `\\p` | `{`, a Unicode property and/or value, then `}` | [Unicode character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) representing characters with the specified Unicode property |\n| `\\q` | `{`, a string, then a `}` | Only valid inside [`v`\\-mode character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#v-mode_character_class); represents the string to be matched literally |\n| `\\r` | None | [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing U+000D (CARRIAGE RETURN) |\n| `\\s` | None | [Character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) representing whitespace characters |\n| `\\t` | None | [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing U+0009 (CHARACTER TABULATION) |\n| `\\u` | 4 hexadecimal digits; or `{`, 1 to 6 hexadecimal digits, then `}` | [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing the character with the given code point |\n| `\\v` | None | [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing U+000B (LINE TABULATION) |\n| `\\w` | None | [Character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) representing word characters (`A` to `Z`, `a` to `z`, `0` to `9`, `_`) |\n| `\\x` | 2 hexadecimal digits | [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing the character with the given value |\n| `\\0` | None | [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing U+0000 (NULL) |\n\n`\\` followed by any other digit character becomes a [legacy octal escape sequence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#escape_sequences), which is forbidden in [Unicode-aware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode).\n\nIn addition, `\\` can be followed by some non-letter-or-digit characters, in which case the escape sequence is always a [character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) representing the escaped character itself:\n\n*   `\\$`, `\\(`, `\\)`, `\\*`, `\\+`, `\\.`, `\\/`, `\\?`, `\\[`, `\\\\`, `\\]`, `\\^`, `{`, `\\|`, `}`: valid everywhere\n*   `\\-`: only valid inside [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class)\n*   `\\!`, `\\#`, `\\%`, `\\&`, `\\,`, `\\:`, `\\;`, `\\<`, `\\=`, `\\>`, `\\@`, `` \\` ``, `\\~`: only valid inside [`v`\\-mode character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#v-mode_character_class)\n\nThe other [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) characters, namely space character, `\"`, `'`, `_`, and any letter character not mentioned above, are not valid escape sequences. In [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), escape sequences that are not one of the above become _identity escapes_: they represent the character that follows the backslash. For example, `\\a` represents the character `a`. This behavior limits the ability to introduce new escape sequences without causing backward compatibility issues, and is therefore forbidden in Unicode-aware mode.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-DecimalEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-DecimalEscape) |\n| [ECMAScript Language Specification  <br>\\# prod-Atom](https://tc39.es/ecma262/multipage/text-processing.html#prod-Atom) |\n| [ECMAScript Language Specification  <br>\\# prod-CharacterClass](https://tc39.es/ecma262/multipage/text-processing.html#prod-CharacterClass) |\n| [ECMAScript Language Specification  <br>\\# prod-CharacterClassEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-CharacterClassEscape) |\n| [ECMAScript Language Specification  <br>\\# prod-CharacterEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-CharacterEscape) |\n| [ECMAScript Language Specification  <br>\\# prod-Disjunction](https://tc39.es/ecma262/multipage/text-processing.html#prod-Disjunction) |\n| [ECMAScript Language Specification  <br>\\# prod-Assertion](https://tc39.es/ecma262/multipage/text-processing.html#prod-Assertion) |\n| [ECMAScript Language Specification  <br>\\# prod-PatternCharacter](https://tc39.es/ecma262/multipage/text-processing.html#prod-PatternCharacter) |\n| [ECMAScript Language Specification  <br>\\# prod-AtomEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-AtomEscape) |\n| [ECMAScript Language Specification  <br>\\# prod-Quantifier](https://tc39.es/ecma262/multipage/text-processing.html#prod-Quantifier) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Regular expressions - JavaScript | MDN",
    "description": "A regular expression (regex for short) allow developers to match strings against a pattern, extract submatch information, or simply test if the string conforms to that pattern. Regular expressions are used in many programming languages, and JavaScript's syntax is inspired by Perl.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks",
    "markdown": "# Static initialization blocks - JavaScript\n\n**Static initialization blocks** are declared within a [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class). It contains statements to be evaluated during class initialization. This permits more flexible initialization logic than [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) properties, such as using `try...catch` or setting multiple fields from a single value. Initialization is performed in the context of the current class declaration, with access to private state, which allows the class to share information of its private properties with other classes or functions declared in the same scope (analogous to \"friend\" classes in C++).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nclass ClassWithSIB {\n  static {\n    // …\n  }\n}\n```\n\n## [Description](#description)\n\nWithout static initialization blocks, complex static initialization might be achieved by calling a static method after the class declaration:\n\n```\nclass MyClass {\n  static init() {\n    // Access to private static fields is allowed here\n  }\n}\n\nMyClass.init();\n```\n\nHowever, this approach exposes an implementation detail (the `init()` method) to the user of the class. On the other hand, any initialization logic declared outside the class does not have access to private static fields. Static initialization blocks allow arbitrary initialization logic to be declared within the class and executed during class evaluation.\n\nA [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class) can have any number of `static {}` initialization blocks in its class body. These are [evaluated](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#evaluation_order), along with any interleaved static field initializers, in the order they are declared. Any static initialization of a super class is performed first, before that of its sub classes.\n\nThe scope of the variables declared inside the static block is local to the block. This includes `var`, `function`, `const`, and `let` declarations. `var` declarations in the block are not hoisted.\n\n```\nvar y = \"Outer y\";\n\nclass A {\n  static field = \"Inner y\";\n  static {\n    var y = this.field;\n  }\n}\n\n// var defined in static block is not hoisted\nconsole.log(y); // 'Outer y'\n```\n\nThe `this` inside a static block refers to the constructor object of the class. `super.property` can be used to access static properties of the super class. Note however that it is a syntax error to call [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) in a class static initialization block, or to use the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object.\n\nThe statements are evaluated synchronously. You cannot use [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) or [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) in this block. (Think of the initialization statements as being implicitly wrapped in a function.)\n\nThe scope of the static block is nested _within_ the lexical scope of the class body, and can access [private names](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) declared within the class without causing a syntax error.\n\n[Static field](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) initializers and static initialization blocks are evaluated one-by-one. The initialization block can refer to field values above it, but not below it. All static methods are added beforehand and can be accessed, although calling them may not behave as expected if they refer to fields below the current block.\n\n**Note:** This is more important with [private static fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties), because accessing a non-initialized private field throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), even if the private field is declared below. (If the private field is not declared, it would be an early [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).)\n\nA static initialization block may not have decorators (the class itself may).\n\n## [Examples](#examples)\n\n### [Multiple blocks](#multiple_blocks)\n\nThe code below demonstrates a class with static initialization blocks and interleaved static field initializers. The output shows that the blocks and fields are evaluated in execution order.\n\n```\nclass MyClass {\n  static field1 = console.log(\"static field1\");\n  static {\n    console.log(\"static block1\");\n  }\n  static field2 = console.log(\"static field2\");\n  static {\n    console.log(\"static block2\");\n  }\n}\n// 'static field1'\n// 'static block1'\n// 'static field2'\n// 'static block2'\n```\n\nNote that any static initialization of a super class is performed first, before that of its sub classes.\n\n### [Using this and super](#using_this_and_super)\n\nThe `this` inside a static block refers to the constructor object of the class. This code shows how to access a public static field.\n\n```\nclass A {\n  static field = \"static field\";\n  static {\n    console.log(this.field);\n  }\n}\n// 'static field'\n```\n\nThe [`super.property`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) syntax can be used inside a `static` block to reference static properties of a super class.\n\n```\nclass A {\n  static field = \"static field\";\n}\n\nclass B extends A {\n  static {\n    console.log(super.field);\n  }\n}\n// 'static field'\n```\n\n### [Access to private properties](#access_to_private_properties)\n\nThis example below shows how access can be granted to a private instance field of a class from an object outside the class (example from the [v8.dev blog](https://v8.dev/features/class-static-initializer-blocks#access-to-private-fields)):\n\n```\nlet getDPrivateField;\n\nclass D {\n  #privateField;\n  constructor(v) {\n    this.#privateField = v;\n  }\n  static {\n    getDPrivateField = (d) => d.#privateField;\n  }\n}\n\nconsole.log(getDPrivateField(new D(\"private\"))); // 'private'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-ClassStaticBlock](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-ClassStaticBlock) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Static initialization blocks - JavaScript | MDN",
    "description": "Static initialization blocks are declared within a class. It contains statements to be evaluated during class initialization. This permits more flexible initialization logic than static properties, such as using try...catch or setting multiple fields from a single value. Initialization is performed in the context of the current class declaration, with access to private state, which allows the class to share information of its private properties with other classes or functions declared in the same scope (analogous to \"friend\" classes in C++).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference",
    "markdown": "# Named backreference: \\\\k<name> - JavaScript\n\nA **named backreference** refers to the submatch of a previous [named capturing group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) and matches the same text as that group. For [unnamed capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group), you need to use the normal [backreference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) syntax.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`name`](#name)\n\nThe name of the group. Must be a valid [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) and refer to an existent named capturing group.\n\n## [Description](#description)\n\nNamed backreferences are very similar to normal backreferences: it refers to the text matched by a capturing group and matches the same text. The difference is that you refer to the capturing group by name instead of by number. This makes the regular expression more readable and easier to refactor and maintain.\n\nIn [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), the sequence `\\k` only starts a named backreference if the regex contains at least one named capturing group. Otherwise, it is an [identity escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) and is the same as the literal character `k`. This is a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\n## [Examples](#examples)\n\n### [Pairing quotes](#pairing_quotes)\n\nThe following function matches the `title='xxx'` and `title=\"xxx\"` patterns in a string. To ensure the quotes match, we use a backreference to refer to the first quote. Accessing the second capturing group (`[2]`) returns the string between the matching quote characters:\n\n```\nfunction parseTitle(metastring) {\n  return metastring.match(/title=(?<quote>[\"'])(.*?)\\k<quote>/)[2];\n}\n\nparseTitle('title=\"foo\"'); // 'foo'\nparseTitle(\"title='foo' lang='en'\"); // 'foo'\nparseTitle('title=\"Named capturing groups\\' advantages\"'); // \"Named capturing groups' advantages\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-AtomEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-AtomEscape) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Named backreference: \\k<name> - JavaScript | MDN",
    "description": "A named backreference refers to the submatch of a previous named capturing group and matches the same text as that group. For unnamed capturing groups, you need to use the normal backreference syntax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label",
    "markdown": "# Labeled statement - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **labeled statement** is any [statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements) that is prefixed with an identifier. You can jump to this label using a [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) or [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) statement nested within the labeled statement.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n[`label`](#label)\n\nAny JavaScript [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) that is not a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words).\n\n[`statement`](#statement)\n\nA JavaScript statement. `break` can be used within any labeled statement, and `continue` can be used within labeled looping statements.\n\n## [Description](#description)\n\nYou can use a label to identify a statement, and later refer to it using a `break` or `continue` statement. Note that JavaScript has _no_ `goto` statement; you can only use labels with `break` or `continue`.\n\nAny `break` or `continue` that references `label` must be contained within the `statement` that's labeled by `label`. Think about `label` as a variable that's only available in the scope of `statement`.\n\nIf a `break label;` statement is encountered when executing `statement`, execution of `statement` terminates, and execution continues at the statement immediately following the labeled statement.\n\n`continue label;` can only be used if `statement` is one of the [looping statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#iterations). If a `continue label;` statement is encountered when executing `statement`, execution of `statement` continues at the next iteration of the loop. `continue;` without a label can only continue the innermost loop, while `continue label;` allows continuing any given loop even when the statement is nested within other loops.\n\nA statement can have multiple labels. In this case, the labels are all functionally equivalent.\n\n## [Examples](#examples)\n\n### [Using a labeled continue with for loops](#using_a_labeled_continue_with_for_loops)\n\n```\n// The first for statement is labeled \"loop1\"\nloop1: for (let i = 0; i < 3; i++) {\n  // The second for statement is labeled \"loop2\"\n  loop2: for (let j = 0; j < 3; j++) {\n    if (i === 1 && j === 1) {\n      continue loop1;\n    }\n    console.log(`i = ${i}, j = ${j}`);\n  }\n}\n\n// Logs:\n// i = 0, j = 0\n// i = 0, j = 1\n// i = 0, j = 2\n// i = 1, j = 0\n// i = 2, j = 0\n// i = 2, j = 1\n// i = 2, j = 2\n```\n\nNotice how it skips both \"i = 1, j = 1\" and \"i = 1, j = 2\".\n\n### [Using a labeled break with for loops](#using_a_labeled_break_with_for_loops)\n\n```\nlet i, j;\n\n// The first for statement is labeled \"loop1\"\nloop1: for (i = 0; i < 3; i++) {\n  // The second for statement is labeled \"loop2\"\n  loop2: for (j = 0; j < 3; j++) {\n    if (i === 1 && j === 1) {\n      break loop1;\n    }\n    console.log(`i = ${i}, j = ${j}`);\n  }\n}\n\n// Logs:\n// i = 0, j = 0\n// i = 0, j = 1\n// i = 0, j = 2\n// i = 1, j = 0\n```\n\nNotice the difference with the previous `continue` example: when `break loop1` is encountered, the execution of the outer loop is terminated, so there are no further logs beyond \"i = 1, j = 0\"; when `continue loop1` is encountered, the execution of the outer loop continues at the next iteration, so only \"i = 1, j = 1\" and \"i = 1, j = 2\" are skipped.\n\n### [Using a labeled continue statement](#using_a_labeled_continue_statement)\n\nGiven an array of items and an array of tests, this example counts the number of items that pass all the tests.\n\n```\n// Numbers from 1 to 100\nconst items = Array.from({ length: 100 }, (_, i) => i + 1);\nconst tests = [\n  { pass: (item) => item % 2 === 0 },\n  { pass: (item) => item % 3 === 0 },\n  { pass: (item) => item % 5 === 0 },\n];\nlet itemsPassed = 0;\n\nitemIteration: for (const item of items) {\n  for (const test of tests) {\n    if (!test.pass(item)) {\n      continue itemIteration;\n    }\n  }\n\n  itemsPassed++;\n}\n```\n\nNote how the `continue itemIteration;` statement skips the rest of the tests for the current item as well as the statement that updates the `itemsPassed` counter, and continues with the next item. If you don't use a label, you would need to use a boolean flag instead.\n\n```\n// Numbers from 1 to 100\nconst items = Array.from({ length: 100 }, (_, i) => i + 1);\nconst tests = [\n  { pass: (item) => item % 2 === 0 },\n  { pass: (item) => item % 3 === 0 },\n  { pass: (item) => item % 5 === 0 },\n];\nlet itemsPassed = 0;\n\nfor (const item of items) {\n  let passed = true;\n  for (const test of tests) {\n    if (!test.pass(item)) {\n      passed = false;\n      break;\n    }\n  }\n  if (passed) {\n    itemsPassed++;\n  }\n}\n```\n\n### [Using a labeled break statement](#using_a_labeled_break_statement)\n\nGiven an array of items and an array of tests, this example determines whether all items pass all tests.\n\n```\n// Numbers from 1 to 100\nconst items = Array.from({ length: 100 }, (_, i) => i + 1);\nconst tests = [\n  { pass: (item) => item % 2 === 0 },\n  { pass: (item) => item % 3 === 0 },\n  { pass: (item) => item % 5 === 0 },\n];\nlet allPass = true;\n\nitemIteration: for (const item of items) {\n  for (const test of tests) {\n    if (!test.pass(item)) {\n      allPass = false;\n      break itemIteration;\n    }\n  }\n}\n```\n\nAgain, if you don't use a label, you would need to use a boolean flag instead.\n\n```\n// Numbers from 1 to 100\nconst items = Array.from({ length: 100 }, (_, i) => i + 1);\nconst tests = [\n  { pass: (item) => item % 2 === 0 },\n  { pass: (item) => item % 3 === 0 },\n  { pass: (item) => item % 5 === 0 },\n];\nlet allPass = true;\n\nfor (const item of items) {\n  let passed = true;\n  for (const test of tests) {\n    if (!test.pass(item)) {\n      passed = false;\n      break;\n    }\n  }\n  if (!passed) {\n    allPass = false;\n    break;\n  }\n}\n```\n\n### [Using a labeled block with break](#using_a_labeled_block_with_break)\n\nYou can label statements other than loops, such as simple blocks, but only `break` statements can reference non-loop labels.\n\n```\nfoo: {\n  console.log(\"face\");\n  break foo;\n  console.log(\"this will not be executed\");\n}\nconsole.log(\"swap\");\n\n// Logs:\n// \"face\"\n// \"swap\"\n```\n\n### [Labeled function declarations](#labeled_function_declarations)\n\nLabels can only be applied to [statements, not declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#difference_between_statements_and_declarations). There is a legacy grammar that allows function declarations to be labeled in non-strict code:\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) code, however, this will throw a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError):\n\n```\n\"use strict\";\nL: function F() {}\n// SyntaxError: functions cannot be labelled\n```\n\nNon-plain functions, such as [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) and [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) can neither be labeled in strict code, nor in non-strict code:\n\n```\nL: function* F() {}\n// SyntaxError: generator functions cannot be labelled\n```\n\nThe labeled function declaration syntax is [deprecated](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features) and you should not use it, even in non-strict code. You cannot actually jump to this label within the function body.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-labelled-statements](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-labelled-statements) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Labeled statement - JavaScript | MDN",
    "description": "A labeled statement is any statement that is prefixed with an identifier. You can jump to this label using a break or continue statement nested within the labeled statement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group",
    "markdown": "# Named capturing group: (?<name>...) - JavaScript\n\nA **named capturing group** is a particular kind of [capturing group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) that allows to give a name to the group. The group's matching result can later be identified by this name instead of by its index in the pattern.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nA pattern consisting of anything you may use in a regex literal, including a [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction).\n\n[`name`](#name)\n\nThe name of the group. Must be a valid [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers).\n\n## [Description](#description)\n\nNamed capturing groups can be used just like capturing groups — they also have their match index in the result array, and they can be referenced through `\\1`, `\\2`, etc. The only difference is that they can be _additionally_ referenced by their name. The information of the capturing group's match can be accessed through:\n\n*   The `groups` property of the return value of [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec), [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), and [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)\n*   The `groups` parameter of the [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) methods' `replacement` callback function\n*   [Named backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference) within the same pattern\n\nAll names must be unique within the same pattern. Multiple named capturing groups with the same name result in a syntax error.\n\n```\n/(?<name>)(?<name>)/; // SyntaxError: Invalid regular expression: Duplicate capture group name\n```\n\nThis restriction is relaxed if the duplicate named capturing groups are not in the same [disjunction alternative](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction), so for any string input, only one named capturing group can actually be matched. This is a much newer feature, so check [browser compatibility](#browser_compatibility) before using it.\n\n```\n/(?<year>\\d{4})-\\d{2}|\\d{2}-(?<year>\\d{4})/;\n// Works; \"year\" can either come before or after the hyphen\n```\n\nNamed capturing groups will all be present in the result. If a named capturing group is not matched (for example, it belongs to an unmatched alternative in a [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction)), the corresponding property on the `groups` object has value `undefined`.\n\n```\n/(?<ab>ab)|(?<cd>cd)/.exec(\"cd\").groups; // [Object: null prototype] { ab: undefined, cd: 'cd' }\n```\n\nYou can get the start and end indices of each named capturing group in the input string by using the [`d`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices) flag. In addition to accessing them on the `indices` property on the array returned by `exec()`, you can also access them by their names on `indices.groups`.\n\nCompared to unnamed capturing groups, named capturing groups have the following advantages:\n\n*   They allow you to provide a descriptive name for each submatch result.\n*   They allow you to access submatch results without having to remember the order in which they appear in the pattern.\n*   When refactoring code, you can change the order of capturing groups without worrying about breaking other references.\n\n## [Examples](#examples)\n\n### [Using named capturing groups](#using_named_capturing_groups)\n\nThe following example parses a timestamp and an author name from a Git log entry (output with `git log --format=%ct,%an -- filename`):\n\n```\nfunction parseLog(entry) {\n  const { author, timestamp } = /^(?<timestamp>\\d+),(?<author>.+)$/.exec(\n    entry,\n  ).groups;\n  return `${author} committed on ${new Date(\n    parseInt(timestamp) * 1000,\n  ).toLocaleString()}`;\n}\n\nparseLog(\"1560979912,Caroline\"); // \"Caroline committed on 6/19/2019, 5:31:52 PM\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Atom](https://tc39.es/ecma262/multipage/text-processing.html#prod-Atom) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Named capturing group: (?<name>...) - JavaScript | MDN",
    "description": "A named capturing group is a particular kind of capturing group that allows to give a name to the group. The group's matching result can later be identified by this name instead of by its index in the pattern.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
    "markdown": "# let - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`let`** declaration declares re-assignable, block-scoped local variables, optionally initializing each to a value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nlet name1;\nlet name1 = value1;\nlet name1 = value1, name2 = value2;\nlet name1, name2 = value2;\nlet name1 = value1, name2, /* …, */ nameN = valueN;\n```\n\n### [Parameters](#parameters)\n\n[`nameN`](#namen)\n\nThe name of the variable to declare. Each must be a legal JavaScript [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) or a [destructuring binding pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n[`valueN`](#valuen) Optional\n\nInitial value of the variable. It can be any legal expression. Default value is `undefined`.\n\n## [Description](#description)\n\nThe scope of a variable declared with `let` is one of the following curly-brace-enclosed syntaxes that most closely contains the `let` declaration:\n\n*   [Block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) statement\n*   [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) statement\n*   [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) statement\n*   Body of [one of the `for` statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#iterations), if the `let` is in the header of the statement\n*   Function body\n*   [Static initialization block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks)\n\nOr if none of the above applies:\n\n*   The current [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules), for code running in module mode\n*   The global scope, for code running in script mode.\n\nCompared with [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), `let` declarations have the following differences:\n\n*   `let` declarations are scoped to blocks as well as functions.\n*   `let` declarations can only be accessed after the place of declaration is reached (see [temporal dead zone](#temporal_dead_zone_tdz)). For this reason, `let` declarations are commonly regarded as [non-hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting).\n*   `let` declarations do not create properties on [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) when declared at the top level of a script.\n*   `let` declarations cannot be [redeclared](#redeclarations) by any other declaration in the same scope.\n*   `let` begins [_declarations_, not _statements_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#difference_between_statements_and_declarations). That means you cannot use a lone `let` declaration as the body of a block (which makes sense, since there's no way to access the variable).\n    \n    ```\n    if (true) let a = 1; // SyntaxError: Lexical declaration cannot appear in a single-statement context\n    ```\n    \n\nNote that `let` is allowed as an identifier name when declared with `var` or `function` in [non-strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), but you should avoid using `let` as an identifier name to prevent unexpected syntax ambiguities.\n\nMany style guides (including [MDN's](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript#variable_declarations)) recommend using [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) over `let` whenever a variable is not reassigned in its scope. This makes the intent clear that a variable's type (or value, in the case of a primitive) can never change. Others may prefer `let` for non-primitives that are mutated.\n\nThe list that follows the `let` keyword is called a _[binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) list_ and is separated by commas, where the commas are _not_ [comma operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator) and the `=` signs are _not_ [assignment operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment). Initializers of later variables can refer to earlier variables in the list.\n\n### [Temporal dead zone (TDZ)](#temporal_dead_zone_tdz)\n\nA variable declared with `let`, `const`, or `class` is said to be in a \"temporal dead zone\" (TDZ) from the start of the block until code execution reaches the place where the variable is declared and initialized.\n\nWhile inside the TDZ, the variable has not been initialized with a value, and any attempt to access it will result in a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError). The variable is initialized with a value when execution reaches the place in the code where it was declared. If no initial value was specified with the variable declaration, it will be initialized with a value of `undefined`.\n\nThis differs from [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#hoisting) variables, which will return a value of `undefined` if they are accessed before they are declared. The code below demonstrates the different result when `let` and `var` are accessed in code before the place where they are declared.\n\n```\n{\n  // TDZ starts at beginning of scope\n  console.log(bar); // \"undefined\"\n  console.log(foo); // ReferenceError: Cannot access 'foo' before initialization\n  var bar = 1;\n  let foo = 2; // End of TDZ (for foo)\n}\n```\n\nThe term \"temporal\" is used because the zone depends on the order of execution (time) rather than the order in which the code is written (position). For example, the code below works because, even though the function that uses the `let` variable appears before the variable is declared, the function is _called_ outside the TDZ.\n\n```\n{\n  // TDZ starts at beginning of scope\n  const func = () => console.log(letVar); // OK\n\n  // Within the TDZ letVar access throws `ReferenceError`\n\n  let letVar = 3; // End of TDZ (for letVar)\n  func(); // Called outside TDZ!\n}\n```\n\nUsing the `typeof` operator for a `let` variable in its TDZ will throw a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError):\n\n```\ntypeof i; // ReferenceError: Cannot access 'i' before initialization\nlet i = 10;\n```\n\nThis differs from using `typeof` for undeclared variables, and variables that hold a value of `undefined`:\n\n```\nconsole.log(typeof undeclaredVariable); // \"undefined\"\n```\n\n**Note:** `let` and `const` declarations are only processed when the current script gets processed. If you have two `<script>` elements running in script mode within one HTML, the first script is not subject to the TDZ restrictions for top-level `let` or `const` variables declared in the second script, although if you declare a `let` or `const` variable in the first script, declaring it again in the second script will cause a [redeclaration error](#redeclarations).\n\n### [Redeclarations](#redeclarations)\n\n`let` declarations cannot be in the same scope as any other declaration, including `let`, [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class), [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function), [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), and [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) declaration.\n\n```\n{\n  let foo;\n  let foo; // SyntaxError: Identifier 'foo' has already been declared\n}\n```\n\nA `let` declaration within a function's body cannot have the same name as a parameter. A `let` declaration within a `catch` block cannot have the same name as the `catch`\\-bound identifier.\n\n```\nfunction foo(a) {\n  let a = 1; // SyntaxError: Identifier 'a' has already been declared\n}\ntry {\n} catch (e) {\n  let e; // SyntaxError: Identifier 'e' has already been declared\n}\n```\n\nIf you're experimenting in a REPL, such as the Firefox web console (**Tools** > **Web Developer** > **Web Console**), and you run two `let` declarations with the same name in two separate inputs, you may get the same re-declaration error. See further discussion of this issue in [Firefox bug 1580891](https://bugzil.la/1580891). The Chrome console allows `let` re-declarations between different REPL inputs.\n\nYou may encounter errors in [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) statements because there is only one block.\n\n```\nlet x = 1;\n\nswitch (x) {\n  case 0:\n    let foo;\n    break;\n  case 1:\n    let foo; // SyntaxError: Identifier 'foo' has already been declared\n    break;\n}\n```\n\nTo avoid the error, wrap each `case` in a new block statement.\n\n```\nlet x = 1;\n\nswitch (x) {\n  case 0: {\n    let foo;\n    break;\n  }\n  case 1: {\n    let foo;\n    break;\n  }\n}\n```\n\n## [Examples](#examples)\n\n### [Scoping rules](#scoping_rules)\n\nVariables declared by `let` have their scope in the block for which they are declared, as well as in any contained sub-blocks. In this way, `let` works very much like `var`. The main difference is that the scope of a `var` variable is the entire enclosing function:\n\n```\nfunction varTest() {\n  var x = 1;\n  {\n    var x = 2; // same variable!\n    console.log(x); // 2\n  }\n  console.log(x); // 2\n}\n\nfunction letTest() {\n  let x = 1;\n  {\n    let x = 2; // different variable\n    console.log(x); // 2\n  }\n  console.log(x); // 1\n}\n```\n\nAt the top level of programs and functions, `let`, unlike `var`, does not create a property on the global object. For example:\n\n```\nvar x = \"global\";\nlet y = \"global\";\nconsole.log(this.x); // \"global\"\nconsole.log(this.y); // undefined\n```\n\n### [TDZ combined with lexical scoping](#tdz_combined_with_lexical_scoping)\n\nThe following code results in a `ReferenceError` at the line shown:\n\n```\nfunction test() {\n  var foo = 33;\n  if (foo) {\n    let foo = foo + 55; // ReferenceError\n  }\n}\ntest();\n```\n\nThe `if` block is evaluated because the outer `var foo` has a value. However due to lexical scoping this value is not available inside the block: the identifier `foo` _inside_ the `if` block is the `let foo`. The expression `foo + 55` throws a `ReferenceError` because initialization of `let foo` has not completed — it is still in the temporal dead zone.\n\nThis phenomenon can be confusing in a situation like the following. The instruction `let n of n.a` is already inside the scope of the `for...of` loop's block. So, the identifier `n.a` is resolved to the property `a` of the `n` object located in the first part of the instruction itself (`let n`). This is still in the temporal dead zone as its declaration statement has not been reached and terminated.\n\n```\nfunction go(n) {\n  // n here is defined!\n  console.log(n); // { a: [1, 2, 3] }\n\n  for (let n of n.a) {\n    //          ^ ReferenceError\n    console.log(n);\n  }\n}\n\ngo({ a: [1, 2, 3] });\n```\n\n### [Other situations](#other_situations)\n\nWhen used inside a block, `let` limits the variable's scope to that block. Note the difference between `var`, whose scope is inside the function where it is declared.\n\n```\nvar a = 1;\nvar b = 2;\n\n{\n  var a = 11; // the scope is global\n  let b = 22; // the scope is inside the block\n\n  console.log(a); // 11\n  console.log(b); // 22\n}\n\nconsole.log(a); // 11\nconsole.log(b); // 2\n```\n\nHowever, this combination of `var` and `let` declarations below is a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) because `var` not being block-scoped, leading to them being in the same scope. This results in an implicit re-declaration of the variable.\n\n```\nlet x = 1;\n\n{\n  var x = 2; // SyntaxError for re-declaration\n}\n```\n\n### [Declaration with destructuring](#declaration_with_destructuring)\n\nThe left-hand side of each `=` can also be a binding pattern. This allows creating multiple variables at once.\n\n```\nconst result = /(a+)(b+)(c+)/.exec(\"aaabcc\");\nlet [, a, b, c] = result;\nconsole.log(a, b, c); // \"aaa\" \"b\" \"cc\"\n```\n\nFor more information, see [Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-let-and-const-declarations](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-let-and-const-declarations) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "let - JavaScript | MDN",
    "description": "The let declaration declares re-assignable, block-scoped local variables, optionally initializing each to a value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference",
    "markdown": "# Backreference: \\\\1, \\\\2 - JavaScript\n\nA **backreference** refers to the submatch of a previous [capturing group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) and matches the same text as that group. For [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), you may prefer to use the [named backreference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference) syntax.\n\n## [Syntax](#syntax)\n\n**Note:** `N` is not a literal character.\n\n### [Parameters](#parameters)\n\n[`N`](#n)\n\nA positive integer referring to the number of a capturing group.\n\n## [Description](#description)\n\nA backreference is a way to match the same text as previously matched by a capturing group. Capturing groups count from 1, so the first capturing group's result can be referenced with `\\1`, the second with `\\2`, and so on. `\\0` is a [character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) for the NUL character.\n\nIn [case-insensitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) matching, the backreference may match text with different casing from the original text.\n\n```\n/(b)\\1/i.test(\"bB\"); // true\n```\n\nThe backreference must refer to an existent capturing group. If the number it specifies is greater than the total number of capturing groups, a syntax error is thrown.\n\n```\n/(a)\\2/u; // SyntaxError: Invalid regular expression: Invalid escape\n```\n\nIn [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), invalid backreferences become a [legacy octal escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#escape_sequences) sequence. This is a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\n```\n/(a)\\2/.test(\"a\\x02\"); // true\n```\n\nIf the referenced capturing group is unmatched (for example, because it belongs to an unmatched alternative in a [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction)), or the group hasn't matched yet (for example, because it lies to the right of the backreference), the backreference always succeeds (as if it matches the empty string).\n\n```\n/(?:a|(b))\\1c/.test(\"ac\"); // true\n/\\1(a)/.test(\"a\"); // true\n```\n\n## [Examples](#examples)\n\n### [Pairing quotes](#pairing_quotes)\n\nThe following function matches the `title='xxx'` and `title=\"xxx\"` patterns in a string. To ensure the quotes match, we use a backreference to refer to the first quote. Accessing the second capturing group (`[2]`) returns the string between the matching quote characters:\n\n```\nfunction parseTitle(metastring) {\n  return metastring.match(/title=([\"'])(.*?)\\1/)[2];\n}\n\nparseTitle('title=\"foo\"'); // 'foo'\nparseTitle(\"title='foo' lang='en'\"); // 'foo'\nparseTitle('title=\"Named capturing groups\\' advantages\"'); // \"Named capturing groups' advantages\"\n```\n\n### [Matching duplicate words](#matching_duplicate_words)\n\nThe following function finds duplicate words in a string (which are usually typos). Note that it uses the `\\w` [character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape), which only matches English letters but not any accented letters or other alphabets. If you want more generic matching, you may want to [split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) the string by whitespace and iterate over the resulting array.\n\n```\nfunction findDuplicates(text) {\n  return text.match(/\\b(\\w+)\\s+\\1\\b/i)?.[1];\n}\n\nfindDuplicates(\"foo foo bar\"); // 'foo'\nfindDuplicates(\"foo bar foo\"); // undefined\nfindDuplicates(\"Hello hello\"); // 'Hello'\nfindDuplicates(\"Hello hellos\"); // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-DecimalEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-DecimalEscape) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Backreference: \\1, \\2 - JavaScript | MDN",
    "description": "A backreference refers to the submatch of a previous capturing group and matches the same text as that group. For named capturing groups, you may prefer to use the named backreference syntax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape",
    "markdown": "# Character class escape: \\\\d, \\\\D, \\\\w, \\\\W, \\\\s, \\\\S - JavaScript\n\nA **character class escape** is an escape sequence that represents a set of characters.\n\n## [Syntax](#syntax)\n\n**Note:** `,` is not part of the syntax.\n\n## [Description](#description)\n\nUnlike [character escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape), character class escapes represent a predefined _set_ of characters, much like a [character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class). The following character classes are supported:\n\n[`\\d`](#d)\n\nMatches any digit character. Equivalent to `[0-9]`.\n\n[`\\w`](#w)\n\nMatches any word character, where a word character includes letters (A–Z, a–z), numbers (0–9), and underscore (\\_). If the regex is [Unicode-aware](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode) and the [`i`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) flag is set, it also matches other Unicode characters that get canonicalized to one of the characters above through [case folding](https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt).\n\n[`\\s`](#s)\n\nMatches any [whitespace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space) or [line terminator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators) character.\n\nThe uppercase forms `\\D`, `\\W`, and `\\S` create complement character classes for `\\d`, `\\w`, and `\\s`, respectively. They match any character that is not in the set of characters matched by the lowercase form.\n\n[Unicode character class escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) start with `\\p` and `\\P`, but they are only supported in [Unicode-aware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode). In Unicode-unaware mode, they are [identity escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) for the `p` or `P` character.\n\nCharacter class escapes can be used in [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class). However, they cannot be used as boundaries of character ranges, which is only allowed as a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\n## [Examples](#examples)\n\n### [Splitting by whitespace](#splitting_by_whitespace)\n\nThe following example splits a string into an array of words, supporting all kinds of whitespace separators:\n\n```\nfunction splitWords(str) {\n  return str.split(/\\s+/);\n}\n\nsplitWords(`Look at the stars\nLook  how they\\tshine for you`);\n// ['Look', 'at', 'the', 'stars', 'Look', 'how', 'they', 'shine', 'for', 'you']\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-CharacterClassEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-CharacterClassEscape) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Character class escape: \\d, \\D, \\w, \\W, \\s, \\S - JavaScript | MDN",
    "description": "A character class escape is an escape sequence that represents a set of characters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class",
    "markdown": "# Character class: \\[...\\], \\[^...\\] - JavaScript\n\nA **character class** matches any character in or not in a custom set of characters. When the [`v`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) flag is enabled, it can also be used to match finite-length strings.\n\n## [Syntax](#syntax)\n\n```\n[]\n[abc]\n[A-Z]\n\n[^]\n[^abc]\n[^A-Z]\n\n// `v` mode only\n[operand1&&operand2]\n[operand1--operand2]\n[\\q{substring}]\n```\n\n### [Parameters](#parameters)\n\n[`operand1`](#operand1), `operand2`\n\nCan be a single character, another square-bracket-enclosed character class, a [character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape), a [Unicode character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape), or a string using the `\\q` syntax.\n\n[`substring`](#substring)\n\nA literal string.\n\n## [Description](#description)\n\nA character class specifies a list of characters between square brackets and matches any character in the list. The [`v`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) flag drastically changes how character classes are parsed and interpreted. The following syntaxes are available in both `v` mode and non-`v` mode:\n\n*   A single character: matches the character itself.\n*   A range of characters: matches any character in the inclusive range. The range is specified by two characters separated by a dash (`-`). The first character must be smaller in character value than the second character. The _character value_ is the Unicode code point of the character. Because Unicode code points are usually assigned to alphabets in order, `[a-z]` specifies all lowercase Latin characters, while `[α-ω]` specifies all lowercase Greek characters. In [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), regexes are interpreted as a sequence of [BMP](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) characters. Therefore, surrogate pairs in character classes represent two characters instead of one; see below for details.\n*   Escape sequences: `\\b`, `\\-`, [character class escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape), [Unicode character class escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape), and other [character escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape).\n\nThese syntaxes can occur any number of times, and the character sets they represent are unioned. For example, `/[a-zA-Z0-9]/` matches any letter or digit.\n\nThe `^` prefix in a character class creates a _complement class_. For example, `[^abc]` matches any character except `a`, `b`, or `c`. The `^` character is a literal character when it appears in the middle of a character class — for example, `[a^b]` matches the characters `a`, `^`, and `b`.\n\nThe [lexical grammar](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#regular_expression_literals) does a very rough parse of regex literals, so that it does not end the regex literal at a `/` character which appears within a character class. This means `/[/]/` is valid without needing to escape the `/`.\n\nThe boundaries of a character range must not specify more than one character, which happens if you use a [character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape). For example:\n\n```\n/[\\s-9]/u; // SyntaxError: Invalid regular expression: Invalid character class\n```\n\nIn [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), character ranges where one boundary is a character class makes the `-` become a literal character. This is a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\n```\n/[\\s-9]/.test(\"-\"); // true\n```\n\nIn [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), regexes are interpreted as a sequence of BMP characters. Therefore, surrogate pairs in character classes represent two characters instead of one.\n\n```\n/[😄]/.test(\"\\ud83d\"); // true\n/[😄]/u.test(\"\\ud83d\"); // false\n\n/[😄-😛]/.test(\"😑\"); // SyntaxError: Invalid regular expression: /[😄-😛]/: Range out of order in character class\n/[😄-😛]/u.test(\"😑\"); // true\n```\n\nEven if the pattern [ignores case](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase), the case of the two ends of a range is significant in determining which characters belong to the range. For example, the pattern `/[E-F]/i` only matches `E`, `F`, `e`, and `f`, while the pattern `/[E-f]/i` matches all uppercase and lowercase [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) letters (because it spans over `E–Z` and `a–f`), as well as `[`, `\\`, `]`, `^`, `_`, and `` ` ``.\n\n### [Non-v-mode character class](#non-v-mode_character_class)\n\nNon-`v`\\-mode character classes interpret most character [literally](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character) and have less restrictions about the characters they can contain. For example, `.` is the literal dot character, not the [wildcard](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard). The only characters that cannot appear literally are `\\`, `]`, and `-`.\n\n*   In character classes, most escape sequences are supported, except `\\b`, `\\B`, and [backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference). `\\b` indicates a backspace character instead of a [word boundary](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion), while the other two cause syntax errors. To use `\\` literally, escape it as `\\\\`.\n*   The `]` character indicates the end of the character class. To use it literally, escape it as `\\]`.\n*   The dash (`-`) character, when used between two characters, indicates a range. When it appears at the start or end of a character class, it is a literal character. It's also a literal character when it's used in the boundary of a range. For example, `[a-]` matches the characters `a` and `-`, `[!--]` matches the characters `!` to `-`, and `[--9]` matches the characters `-` to `9`. You can also escape it as `\\-` if you want to use it literally anywhere.\n\n### [v-mode character class](#v-mode_character_class)\n\nThe basic idea of character classes in `v` mode remains the same: you can still use most characters literally, use `-` to denote character ranges, and use escape sequences. One of the most important features of the `v` flag is _set notation_ within character classes. As previously mentioned, normal character classes can express unions by concatenating two ranges, such as using `[A-Z0-9]` to mean \"the union of the set `[A-Z]` and the set `[0-9]`\". However, there's no easy way to represent other operations with character sets, such as intersection and difference.\n\nWith the `v` flag, intersection is expressed with `&&`, and subtraction with `--`. The absence of both implies union. The two operands of `&&` or `--` can be a character, character escape, character class escape, or even another character class. For example, to express \"a word character that's not an underscore\", you can use `[\\w--_]`. You cannot mix operators on the same level. For example, `[\\w&&[A-z]--_]` is a syntax error. However, because you can nest character classes, you can be explicit by writing `[\\w&&[[A-z]--_]]` or `[[\\w&&[A-z]]--_]` (which both mean `[A-Za-z]`). Similarly, `[AB--C]` is invalid and you need to write `[A[B--C]]` (which just means `[AB]`).\n\nIn `v` mode, the [Unicode character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) `\\p` can match finite-length strings, such as emojis. For symmetry, regular character classes can also match more than one character. To write a \"string literal\" in a character class, you wrap the string in `\\q{...}`. The only regex syntax supported here is [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction) — apart from this, `\\q` must completely enclose literals (including escaped characters). This ensures that character classes can only match finite-length strings with finitely many possibilities.\n\nBecause the character class syntax is now more sophisticated, more characters are reserved and forbidden from appearing literally.\n\n*   In addition to `]` and `\\`, the following characters must be escaped in character classes if they represent literal characters: `(`, `)`, `[`, `{`, `}`, `/`, `-`, `|`. This list is somewhat similar to the list of [syntax characters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character), except that `^`, `$`, `*`, `+`, and `?` are not reserved inside character classes, while `/` and `-` are not reserved outside character classes (although `/` may delimit a regex literal and therefore still needs to be escaped). All these characters may also be optionally escaped in `u`\\-mode character classes.\n*   The following \"double punctuator\" sequences must be escaped as well (but they don't make much sense without the `v` flag anyway): `&&`, `!!`, `##`, `$$`, `%%`, `**`, `++`, `,,`, `..`, `::`, `;;`, `<<`, `==`, `>>`, `??`, `@@`, `^^`, ` `` `, `~~`. In `u` mode, some of these characters can only appear literally within character classes and cause a syntax error when escaped. In `v` mode, they must be escaped when appearing in pairs, but can be optionally escaped when appearing alone. For example, `/[\\!]/u` is invalid because it's an [identity escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape), but both `/[\\!]/v` and `/[!]/v` are valid, while `/[!!]/v` is invalid. The [literal character](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character) reference has a detailed table of which characters can appear escaped or unescaped.\n\nComplement character classes `[^...]` cannot possibly be able to match strings longer than one character. For example, `[\\q{ab|c}]` is valid and matches the string `\"ab\"`, but `[^\\q{ab|c}]` is invalid because it's unclear how many characters should be consumed. The check is done by checking if all `\\q` contain single characters and all `\\p` specify character properties — for unions, all operands must be purely characters; for intersections, at least one operand must be purely characters; for subtraction, the leftmost operand must be purely characters. The check is syntactic without looking at the actual character set being specified, which means although `/[^\\q{ab|c}--\\q{ab}]/v` is equivalent to `/[^c]/v`, it's still rejected.\n\n### [Complement classes and case-insensitive matching](#complement_classes_and_case-insensitive_matching)\n\nIn non-`v`\\-mode, complement character classes `[^...]` are implemented by simply inverting the match result — that is, `[^...]` matches whenever `[...]` doesn't match, and vice versa. However, the other complement classes, such as `\\P{...}` and `\\W`, work by eagerly constructing the set consisting of all characters without the specified property. They seem to produce the same behavior, but are made more complex when combined with [case-insensitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) matching.\n\nConsider the following two regexes:\n\n```\nconst r1 = /\\p{Lowercase_Letter}/iu;\nconst r2 = /[^\\P{Lowercase_Letter}]/iu;\n```\n\nThe `r2` is a double negation and seems to be equivalent with `r1`. But in fact, `r1` matches all lower- and upper-case ASCII letters, while `r2` matches none. To illustrate how it works, pretend that we are only dealing with ASCII characters, not the entire Unicode character set, and `r1` and `r2` are specified as below:\n\n```\nconst r1 = /[a-z]/iu;\nconst r2 = /[^A-Z]/iu;\n```\n\nRecall that case-insensitive matching happens by folding both the pattern and the input to the same case (see [`ignoreCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) for more details). For `r1`, the character class `a-z` stays the same after case folding, while both upper- and lower-case ASCII string inputs are folded to lower-case, so `r1` is able to match both `\"A\"` and `\"a\"`. For `r2`, the character class `A-Z` is folded to `a-z`; however, `^` negates the match result, so that `[^A-Z]` in effect only matches upper-case strings. However, both upper- and lower-case ASCII string inputs are still folded to lower-case, causing `r2` to match nothing.\n\nIn `v` mode, this behavior is fixed — `[^...]` also eagerly constructs the complement class instead of negating the match result. This makes `[^\\P{Lowercase_Letter}]` and `\\p{Lowercase_Letter}` are strictly equivalent.\n\n## [Examples](#examples)\n\n### [Matching hexadecimal digits](#matching_hexadecimal_digits)\n\nThe following function determines whether a string contains a valid hexadecimal number:\n\n```\nfunction isHexadecimal(str) {\n  return /^[0-9A-F]+$/i.test(str);\n}\n\nisHexadecimal(\"2F3\"); // true\nisHexadecimal(\"beef\"); // true\nisHexadecimal(\"undefined\"); // false\n```\n\n### [Using intersection](#using_intersection)\n\nThe following function matches Greek letters.\n\n```\nfunction greekLetters(str) {\n  return str.match(/[\\p{Script_Extensions=Greek}&&\\p{Letter}]/gv);\n}\n\n// 𐆊 is U+1018A GREEK ZERO SIGN\ngreekLetters(\"π𐆊P0零αAΣ\"); // [ 'π', 'α', 'Σ' ]\n```\n\n### [Using subtraction](#using_subtraction)\n\nThe following function matches all non-ASCII numbers.\n\n```\nfunction nonASCIINumbers(str) {\n  return str.match(/[\\p{Decimal_Number}--[0-9]]/gv);\n}\n\n// 𑜹 is U+11739 AHOM DIGIT NINE\nnonASCIINumbers(\"𐆊0零1𝟜𑜹a\"); // [ '𝟜', '𑜹' ]\n```\n\n### [Matching strings](#matching_strings)\n\nThe following function matches all line terminator sequences, including the [line terminator characters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators) and the sequence `\\r\\n` (CRLF).\n\n```\nfunction getLineTerminators(str) {\n  return str.match(/[\\r\\n\\u2028\\u2029\\q{\\r\\n}]/gv);\n}\n\ngetLineTerminators(`\nA poem\\r\nIs split\\r\\n\nInto many\nStanzas\n`); // [ '\\r', '\\r\\n', '\\n' ]\n```\n\nThis example is exactly equivalent to `/(?:\\r|\\n|\\u2028|\\u2029|\\r\\n)/gu` or `/(?:[\\r\\n\\u2028\\u2029]|\\r\\n)/gu`, except shorter.\n\nThe most useful case of `\\q{}` is when doing subtraction and intersection. Previously, this was possible with [multiple lookaheads](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion#pattern_subtraction_and_intersection). The following function matches flags that are not one of the American, Chinese, Russian, British, and French flags.\n\n```\nfunction notUNSCPermanentMember(flag) {\n  return /^[\\p{RGI_Emoji_Flag_Sequence}--\\q{🇺🇸|🇨🇳|🇷🇺|🇬🇧|🇫🇷}]$/v.test(flag);\n}\n\nnotUNSCPermanentMember(\"🇺🇸\"); // false\nnotUNSCPermanentMember(\"🇩🇪\"); // true\n```\n\nThis example is mostly equivalent to `/^(?!🇺🇸|🇨🇳|🇷🇺|🇬🇧|🇫🇷)\\p{RGI_Emoji_Flag_Sequence}$/v`, except perhaps more performant.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-CharacterClass](https://tc39.es/ecma262/multipage/text-processing.html#prod-CharacterClass) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Character class: [...], [^...] - JavaScript | MDN",
    "description": "A character class matches any character in or not in a custom set of characters. When the v flag is enabled, it can also be used to match finite-length strings.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group",
    "markdown": "# Non-capturing group: (?:...) - JavaScript\n\nA **non-capturing group** groups a subpattern, allowing you to apply a [quantifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier) to the entire group or use [disjunctions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction) within it. It acts like the [grouping operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping) in JavaScript expressions, and unlike [capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group), it does not memorize the matched text, allowing for better performance and avoiding confusion when the pattern also contains useful capturing groups.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nA pattern consisting of anything you may use in a regex literal, including a [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction).\n\n## [Examples](#examples)\n\n### [Grouping a subpattern and applying a quantifier](#grouping_a_subpattern_and_applying_a_quantifier)\n\nIn the following example, we test if a file path ends with `styles.css` or `styles.[a hex hash].css`. Because the entire `\\.[\\da-f]+` part is optional, in order to apply the `?` quantifier to it, we need to group it into a new atom. Using a non-capturing group improves performance by not creating the extra match information that we don't need.\n\n```\nfunction isStylesheet(path) {\n  return /styles(?:\\.[\\da-f]+)?\\.css$/.test(path);\n}\n\nisStylesheet(\"styles.css\"); // true\nisStylesheet(\"styles.1234.css\"); // true\nisStylesheet(\"styles.cafe.css\"); // true\nisStylesheet(\"styles.1234.min.css\"); // false\n```\n\n### [Grouping a disjunction](#grouping_a_disjunction)\n\nA disjunction has the lowest precedence in a regular expression. If you want to use a disjunction as a part of a bigger pattern, you must group it. You are advised to use a non-capturing group unless you rely on the matched text of the disjunction. The following example matches file extensions, using the same code as the [input boundary assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion#matching_file_extensions) article:\n\n```\nfunction isImage(filename) {\n  return /\\.(?:png|jpe?g|webp|avif|gif)$/i.test(filename);\n}\n\nisImage(\"image.png\"); // true\nisImage(\"image.jpg\"); // true\nisImage(\"image.pdf\"); // false\n```\n\n### [Avoiding refactoring hazards](#avoiding_refactoring_hazards)\n\nCapturing groups are accessed by their position in the pattern. If you add or remove a capturing group, you must also update the positions of the other capturing groups, if you are accessing them through match results or [backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference). This can be a source of bugs, especially if most groups are purely for syntactic purposes (to apply quantifiers or to group disjunctions). Using non-capturing groups avoids this problem, and allows the indices of actual capturing groups to be easily tracked.\n\nFor example, suppose we have a function that matches the `title='xxx'` pattern in a string (example taken from [capturing group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group#pairing_quotes)). To ensure the quotes match, we use a backreference to refer to the first quote.\n\n```\nfunction parseTitle(metastring) {\n  return metastring.match(/title=([\"'])(.*?)\\1/)[2];\n}\n\nparseTitle('title=\"foo\"'); // 'foo'\n```\n\nIf we later decided to add `name='xxx'` as an alias for `title=`, we will need to group the disjunction in another group:\n\n```\nfunction parseTitle(metastring) {\n  // Oops — the backreference and index access are now off by one!\n  return metastring.match(/(title|name)=([\"'])(.*?)\\1/)[2];\n}\n\nparseTitle('name=\"foo\"'); // Cannot read properties of null (reading '2')\n// Because \\1 now refers to the \"name\" string, which isn't found at the end.\n```\n\nInstead of locating all places where we are referring to the capturing groups' indices and updating them one-by-one, it's better to avoid using a capturing group:\n\n```\nfunction parseTitle(metastring) {\n  // Do not capture the title|name disjunction\n  // because we don't use its value\n  return metastring.match(/(?:title|name)=([\"'])(.*?)\\1/)[2];\n}\n\nparseTitle('name=\"foo\"'); // 'foo'\n```\n\n[Named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) are another way to avoid refactoring hazards. It allows capturing groups to accessed by a custom name, which is unaffected when other capturing groups are added or removed.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Atom](https://tc39.es/ecma262/multipage/text-processing.html#prod-Atom) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Non-capturing group: (?:...) - JavaScript | MDN",
    "description": "A non-capturing group groups a subpattern, allowing you to apply a quantifier to the entire group or use disjunctions within it. It acts like the grouping operator in JavaScript expressions, and unlike capturing groups, it does not memorize the matched text, allowing for better performance and avoiding confusion when the pattern also contains useful capturing groups.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group",
    "markdown": "# Capturing group: (...) - JavaScript\n\nA **capturing group** groups a subpattern, allowing you to apply a [quantifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier) to the entire group or use [disjunctions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction) within it. It memorizes information about the subpattern match, so that you can refer back to it later with a [backreference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference), or access the information through the [match results](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#return_value).\n\nIf you don't need the result of the subpattern match, use a [non-capturing group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group) instead, which improves performance and avoids refactoring hazards.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nA pattern consisting of anything you may use in a regex literal, including a [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction).\n\n## [Description](#description)\n\nA capturing group acts like the [grouping operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping) in JavaScript expressions, allowing you to use a subpattern as a single [atom](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions#atoms).\n\nCapturing groups are numbered by the order of their opening parentheses. The first capturing group is numbered `1`, the second `2`, and so on. [Named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) are also capturing groups and are numbered together with other (unnamed) capturing groups. The information of the capturing group's match can be accessed through:\n\n*   The return value (which is an array) of [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec), [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), and [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)\n*   The `pN` parameters of the [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) methods' `replacement` callback function\n*   [Backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) within the same pattern\n\n**Note:** Even in `exec()`'s result array, capturing groups are accessed by numbers `1`, `2`, etc., because the `0` element is the entire match. `\\0` is not a backreference, but a [character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) for the NUL character.\n\nCapturing groups in the regex source code correspond to their results one-to-one. If a capturing group is not matched (for example, it belongs to an unmatched alternative in a [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction)), the corresponding result is `undefined`.\n\n```\n/(ab)|(cd)/.exec(\"cd\"); // ['cd', undefined, 'cd']\n```\n\nCapturing groups can be [quantified](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier). In this case, the match information corresponding to this group is the last match of the group.\n\n```\n/([ab])+/.exec(\"abc\"); // ['ab', 'b']; because \"b\" comes after \"a\", this result overwrites the previous one\n```\n\nCapturing groups can be used in [lookahead](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) and [lookbehind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion) assertions. Because lookbehind assertions match their atoms backwards, the final match corresponding to this group is the one that appears to the _left_ end of the string. However, the indices of the match groups still correspond to their relative locations in the regex source.\n\n```\n/c(?=(ab))/.exec(\"cab\"); // ['c', 'ab']\n/(?<=(a)(b))c/.exec(\"abc\"); // ['c', 'a', 'b']\n/(?<=([ab])+)c/.exec(\"abc\"); // ['c', 'a']; because \"a\" is seen by the lookbehind after the lookbehind has seen \"b\"\n```\n\nCapturing groups can be nested, in which case the outer group is numbered first, then the inner group, because they are ordered by their opening parentheses. If a nested group is repeated by a quantifier, then each time the group matches, the subgroups' results are all overwritten, sometimes with `undefined`.\n\n```\n/((a+)?(b+)?(c))*/.exec(\"aacbbbcac\"); // ['aacbbbcac', 'ac', 'a', undefined, 'c']\n```\n\nIn the example above, the outer group is matched three times:\n\n1.  Matches `\"aac\"`, with subgroups `\"aa\"`, `undefined`, and `\"c\"`.\n2.  Matches `\"bbbc\"`, with subgroups `undefined`, `\"bbb\"`, and `\"c\"`.\n3.  Matches `\"ac\"`, with subgroups `\"a\"`, `undefined`, and `\"c\"`.\n\nThe `\"bbb\"` result from the second match is not preserved, because the third match overwrites it with `undefined`.\n\nYou can get the start and end indices of each capturing group in the input string by using the [`d`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices) flag. This creates an extra `indices` property on the array returned by `exec()`.\n\nYou can optionally specify a name to a capturing group, which helps avoid pitfalls related to group positions and indexing. See [Named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) for more information.\n\nParentheses have other purposes in different regex syntaxes. For example, they also enclose lookahead and lookbehind assertions. Because these syntaxes all start with `?`, and `?` is a [quantifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier) which normally cannot occur directly after `(`, this does not lead to ambiguities.\n\n## [Examples](#examples)\n\n### [Matching date](#matching_date)\n\nThe following example matches a date in the format `YYYY-MM-DD`:\n\n```\nfunction parseDate(input) {\n  const parts = /^(\\d{4})-(\\d{2})-(\\d{2})$/.exec(input);\n  if (!parts) {\n    return null;\n  }\n  return parts.slice(1).map((p) => parseInt(p, 10));\n}\n\nparseDate(\"2019-01-01\"); // [2019, 1, 1]\nparseDate(\"2019-06-19\"); // [2019, 6, 19]\n```\n\n### [Pairing quotes](#pairing_quotes)\n\nThe following function matches the `title='xxx'` and `title=\"xxx\"` patterns in a string. To ensure the quotes match, we use a backreference to refer to the first quote. Accessing the second capturing group (`[2]`) returns the string between the matching quote characters:\n\n```\nfunction parseTitle(metastring) {\n  return metastring.match(/title=([\"'])(.*?)\\1/)[2];\n}\n\nparseTitle('title=\"foo\"'); // 'foo'\nparseTitle(\"title='foo' lang='en'\"); // 'foo'\nparseTitle('title=\"Named capturing groups\\' advantages\"'); // \"Named capturing groups' advantages\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Atom](https://tc39.es/ecma262/multipage/text-processing.html#prod-Atom) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Capturing group: (...) - JavaScript | MDN",
    "description": "A capturing group groups a subpattern, allowing you to apply a quantifier to the entire group or use disjunctions within it. It memorizes information about the subpattern match, so that you can refer back to it later with a backreference, or access the information through the match results.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier",
    "markdown": "# Quantifier: \\*, +, ?, {n}, {n,}, {n,m} - JavaScript\n\nA **quantifier** repeats an [atom](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions#atoms) a certain number of times. The quantifier is placed after the atom it applies to.\n\n## [Syntax](#syntax)\n\n```\n// Greedy\natom?\natom*\natom+\natom{count}\natom{min,}\natom{min,max}\n\n// Non-greedy\natom??\natom*?\natom+?\natom{count}?\natom{min,}?\natom{min,max}?\n```\n\n### [Parameters](#parameters)\n\n[`atom`](#atom)\n\nA single [atom](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions#atoms).\n\n[`count`](#count)\n\nA non-negative integer. The number of times the atom should be repeated.\n\n[`min`](#min)\n\nA non-negative integer. The minimum number of times the atom can be repeated.\n\n[`max`](#max) Optional\n\nA non-negative integer. The maximum number of times the atom can be repeated. If omitted, the atom can be repeated as many times as needed.\n\n## [Description](#description)\n\nA quantifier is placed after an [atom](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions#atoms) to repeat it a certain number of times. It cannot appear on its own. Each quantifier is able to specify a minimum and maximum number that a pattern must be repeated for.\n\n| Quantifier | Minimum | Maximum |\n| --- | --- | --- |\n| `?` | 0   | 1   |\n| `*` | 0   | Infinity |\n| `+` | 1   | Infinity |\n| `{count}` | `count` | `count` |\n| `{min,}` | `min` | Infinity |\n| `{min,max}` | `min` | `max` |\n\nFor the `{count}`, `{min,}`, and `{min,max}` syntaxes, there cannot be white spaces around the numbers — otherwise, it becomes a [literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character) pattern.\n\n```\nconst re = /a{1, 3}/;\nre.test(\"aa\"); // false\nre.test(\"a{1, 3}\"); // true\n```\n\nThis behavior is fixed in [Unicode-aware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), where braces cannot appear literally without [escaping](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape). The ability to use `{` and `}` literally without escaping is a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\n```\n/a{1, 3}/u; // SyntaxError: Invalid regular expression: Incomplete quantifier\n```\n\nIt is a syntax error if the minimum is greater than the maximum.\n\n```\n/a{3,2}/; // SyntaxError: Invalid regular expression: numbers out of order in {} quantifier\n```\n\nQuantifiers can cause [capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) to match multiple times. See the capturing groups page for more information on the behavior in this case.\n\nEach repeated match doesn't have to be the same string.\n\n```\n/[ab]*/.exec(\"aba\"); // ['aba']\n```\n\nQuantifiers are _greedy_ by default, which means they try to match as many times as possible until the maximum is reached, or until it's not possible to match further. You can make a quantifier _non-greedy_ by adding a `?` after it. In this case, the quantifier will try to match as few times as possible, only matching more times if it's impossible to match the rest of the pattern with this many repetitions.\n\n```\n/a*/.exec(\"aaa\"); // ['aaa']; the entire input is consumed\n/a*?/.exec(\"aaa\"); // ['']; it's possible to consume no characters and still match successfully\n/^a*?$/.exec(\"aaa\"); // ['aaa']; it's not possible to consume fewer characters and still match successfully\n```\n\nHowever, as soon as the regex successfully matches the string at some index, it will not try subsequent indices, although that may result in fewer characters being consumed.\n\n```\n/a*?$/.exec(\"aaa\"); // ['aaa']; the match already succeeds at the first character, so the regex never attempts to start matching at the second character\n```\n\nGreedy quantifiers may try fewer repetitions if it's otherwise impossible to match the rest of the pattern.\n\n```\n/[ab]+[abc]c/.exec(\"abbc\"); // ['abbc']\n```\n\nIn this example, `[ab]+` first greedily matches `\"abb\"`, but `[abc]c` is not able to match the rest of the pattern (`\"c\"`), so the quantifier is reduced to match only `\"ab\"`.\n\nGreedy quantifiers avoid matching infinitely many empty strings. If the minimum number of matches is reached and no more characters are being consumed by the atom at this position, the quantifier stops matching. This is why `/(a*)*/.exec(\"b\")` does not result in an infinite loop.\n\nGreedy quantifiers try to match as many _times_ as possible; it does not maximize the _length_ of the match. For example, `/(aa|aabaac|ba)*/.exec(\"aabaac\")` matches `\"aa\"` and then `\"ba\"` instead of `\"aabaac\"`.\n\nQuantifiers apply to a single atom. If you want to quantify a longer pattern or a disjunction, you must [group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group) it. Quantifiers cannot be applied to [assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions#assertions).\n\n```\n/^*/; // SyntaxError: Invalid regular expression: nothing to repeat\n```\n\nIn [Unicode-aware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), [lookahead assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) can be quantified. This is a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\n```\n/(?=a)?b/.test(\"b\"); // true; the lookahead is matched 0 time\n```\n\n## [Examples](#examples)\n\n### [Removing HTML tags](#removing_html_tags)\n\nThe following example removes HTML tags enclosed in angle brackets. Note the use of `?` to avoid consuming too many characters at once.\n\n```\nfunction stripTags(str) {\n  return str.replace(/<.+?>/g, \"\");\n}\n\nstripTags(\"<p><em>lorem</em> <strong>ipsum</strong></p>\"); // 'lorem ipsum'\n```\n\nThe same effect can be achieved with a greedy match, but not allowing the repeated pattern to match `>`.\n\n```\nfunction stripTags(str) {\n  return str.replace(/<[^>]+>/g, \"\");\n}\n\nstripTags(\"<p><em>lorem</em> <strong>ipsum</strong></p>\"); // 'lorem ipsum'\n```\n\n**Warning:** This is for demonstration only — it doesn't handle `>` in attribute values. Use a proper HTML sanitizer like the [HTML sanitizer API](https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API) instead.\n\n### [Locating Markdown paragraphs](#locating_markdown_paragraphs)\n\nIn Markdown, paragraphs are separated by one or more blank lines. The following example counts all paragraphs in a string by matching two or more line breaks.\n\n```\nfunction countParagraphs(str) {\n  return str.match(/(?:\\r?\\n){2,}/g).length + 1;\n}\n\ncountParagraphs(`\nParagraph 1\n\nParagraph 2\nContaining some line breaks, but still the same paragraph\n\nAnother paragraph\n`); // 3\n```\n\n**Warning:** This is for demonstration only — it doesn't handle line breaks in code blocks or other Markdown block elements like headings. Use a proper Markdown parser instead.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Quantifier](https://tc39.es/ecma262/multipage/text-processing.html#prod-Quantifier) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Quantifier: *, +, ?, {n}, {n,}, {n,m} - JavaScript | MDN",
    "description": "A quantifier repeats an atom a certain number of times. The quantifier is placed after the atom it applies to.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return",
    "markdown": "# return - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`return`** statement ends function execution and specifies a value to be returned to the function caller.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nreturn;\nreturn expression;\n```\n\n[`expression`](#expression) Optional\n\nThe expression whose value is to be returned. If omitted, `undefined` is returned.\n\n## [Description](#description)\n\nThe `return` statement can only be used within function bodies. When a `return` statement is used in a function body, the execution of the function is stopped. The `return` statement has different effects when placed in different functions:\n\n*   In a plain function, the call to that function evaluates to the return value.\n*   In an async function, the produced promise is resolved with the returned value.\n*   In a generator function, the produced generator object's `next()` method returns `{ done: true, value: returnedValue }`.\n*   In an async generator function, the produced async generator object's `next()` method returns a promise fulfilled with `{ done: true, value: returnedValue }`.\n\nIf a `return` statement is executed within a [`try`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) block, its `finally` block, if present, is first executed, before the value is actually returned.\n\n### [Automatic semicolon insertion](#automatic_semicolon_insertion)\n\nThe syntax forbids line terminators between the `return` keyword and the expression to be returned.\n\nThe code above is transformed by [automatic semicolon insertion (ASI)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion) into:\n\nThis makes the function return `undefined` and the `a + b` expression is never evaluated. This may generate [a warning in the console](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return).\n\nTo avoid this problem (to prevent ASI), you could use parentheses:\n\n## [Examples](#examples)\n\n### [Interrupt a function](#interrupt_a_function)\n\nA function immediately stops at the point where `return` is called.\n\n```\nfunction counter() {\n  // Infinite loop\n  for (let count = 1; ; count++) {\n    console.log(`${count}A`); // Until 5\n    if (count === 5) {\n      return;\n    }\n    console.log(`${count}B`); // Until 4\n  }\n  console.log(`${count}C`); // Never appears\n}\n\ncounter();\n\n// Logs:\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n```\n\n### [Returning a function](#returning_a_function)\n\nSee also the article about [Closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures).\n\n```\nfunction magic() {\n  return function calc(x) {\n    return x * 42;\n  };\n}\n\nconst answer = magic();\nanswer(1337); // 56154\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-return-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-return-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "return - JavaScript | MDN",
    "description": "The return statement ends function execution and specifies a value to be returned to the function caller.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction",
    "markdown": "# Disjunction: | - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **disjunction** specifies multiple alternatives. Any alternative matching the input causes the entire disjunction to be matched.\n\n## [Syntax](#syntax)\n\n```\nalternative1|alternative2\nalternative1|alternative2|alternative3|…\n```\n\n### [Parameters](#parameters)\n\n[`alternativeN`](#alternativen)\n\nOne alternative pattern, composed of a sequence of [atoms and assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions#assertions). Successfully matching one alternative causes the entire disjunction to be matched.\n\n## [Description](#description)\n\nThe `|` regular expression operator separates two or more _alternatives_. The pattern first tries to match the first alternative; if it fails, it tries to match the second one, and so on. For example, the following matches `\"a\"` instead of `\"ab\"`, because the first alternative already matches successfully:\n\n```\n/a|ab/.exec(\"abc\"); // ['a']\n```\n\nThe `|` operator has the lowest precedence in a regular expression. If you want to use a disjunction as a part of a bigger pattern, you must [group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group) it.\n\nWhen a grouped disjunction has more expressions after it, the matching begins by selecting the first alternative and attempting to match the rest of the regular expression. If the rest of the regular expression fails to match, the matcher tries the next alternative instead. For example,\n\n```\n/(?:(a)|(ab))(?:(c)|(bc))/.exec(\"abc\"); // ['abc', 'a', undefined, undefined, 'bc']\n// Not ['abc', undefined, 'ab', 'c', undefined]\n```\n\nThis is because by selecting `a` in the first alternative, it's possible to select `bc` in the second alternative and result in a successful match. This process is called _backtracking_, because the matcher first goes beyond the disjunction and then comes back to it when subsequent matching fails.\n\nNote also that any capturing parentheses inside an alternative that's not matched produce `undefined` in the resulting array.\n\nAn alternative can be empty, in which case it matches the empty string (in other words, always matches).\n\nAlternatives are always attempted left-to-right, regardless of the direction of matching (which is reversed in a [lookbehind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion)).\n\n## [Examples](#examples)\n\n### [Matching file extensions](#matching_file_extensions)\n\nThe following example matches file extensions, using the same code as the [input boundary assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion#matching_file_extensions) article:\n\n```\nfunction isImage(filename) {\n  return /\\.(?:png|jpe?g|webp|avif|gif)$/i.test(filename);\n}\n\nisImage(\"image.png\"); // true\nisImage(\"image.jpg\"); // true\nisImage(\"image.pdf\"); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Disjunction](https://tc39.es/ecma262/multipage/text-processing.html#prod-Disjunction) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Disjunction: | - JavaScript | MDN",
    "description": "A disjunction specifies multiple alternatives. Any alternative matching the input causes the entire disjunction to be matched.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape",
    "markdown": "# Character escape: \\\\n, \\\\u{...} - JavaScript\n\nA **character escape** represents a character that may not be able to be conveniently represented in its literal form.\n\n## [Syntax](#syntax)\n\n```\n\\f, \\n, \\r, \\t, \\v\n\\cA, \\cB, …, \\cz\n\\0\n\\^, \\$, \\\\, \\., \\*, \\+, \\?, \\(, \\), \\[, \\], {, }, \\|, \\/\n\n\\xHH\n\\uHHHH\n\\u{HHH}\n```\n\n**Note:** `,` is not part of the syntax.\n\n### [Parameters](#parameters)\n\n[`HHH`](#hhh)\n\nA hexadecimal number representing the Unicode code point of the character. The `\\xHH` form must have two hexadecimal digits; the `\\uHHHH` form must have four; the `\\u{HHH}` form may have 1 to 6 hexadecimal digits.\n\n## [Description](#description)\n\nThe following character escapes are recognized in regular expressions:\n\n[`\\f`](#f), `\\n`, `\\r`, `\\t`, `\\v`\n\nSame as those in [string literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences), except `\\b`, which represents a [word boundary](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion) in regexes unless in a [character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class).\n\n[`\\c`](#c) followed by a letter from `A` to `Z` or `a` to `z`\n\nRepresents the control character with value equal to the letter's character value modulo 32. For example, `\\cJ` represents line break (`\\n`), because the code point of `J` is 74, and 74 modulo 32 is 10, which is the code point of line break. Because an uppercase letter and its lowercase form differ by 32, `\\cJ` and `\\cj` are equivalent. You can represent control characters from 1 to 26 in this form.\n\n[`\\0`](#0)\n\nRepresents the U+0000 NUL character. Cannot be followed by a digit (which makes it a [legacy octal escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#escape_sequences) sequence).\n\n[`\\^`](#sect2), `\\$`, `\\\\`, `\\.` `\\*`, `\\+`, `\\?`, `\\(`, `\\)`, `\\[`, `\\]`, `{`, `}`, `\\|`, `\\/`\n\nRepresents the character itself. For example, `\\\\` represents a backslash, and `\\(` represents a left parenthesis. These are [syntax characters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character) in regexes (`/` is the delimiter of a regex literal), so they require escaping unless in a [character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class).\n\n[`\\xHH`](#xhh)\n\nRepresents the character with the given hexadecimal Unicode code point. The hexadecimal number must be exactly two digits long.\n\n[`\\uHHHH`](#uhhhh)\n\nRepresents the character with the given hexadecimal Unicode code point. The hexadecimal number must be exactly four digits long. Two such escape sequences can be used to represent a surrogate pair in [Unicode-aware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode). (In Unicode-unaware mode, they are always two separate characters.)\n\n[`\\u{HHH}`](#uhhh)\n\n([Unicode-aware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode) only) Represents the character with the given hexadecimal Unicode code point. The hexadecimal number can be from 1 to 6 digits long.\n\nIn [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), escape sequences that are not one of the above become _identity escapes_: they represent the character that follows the backslash. For example, `\\a` represents the character `a`. This behavior limits the ability to introduce new escape sequences without causing backward compatibility issues, and is therefore forbidden in Unicode-aware mode.\n\nIn Unicode-unaware mode, `]`, `{`, and `}` may appear [literally](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character) if it's not possible to parse them as the end of a character class or quantifier delimiters. This is a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\nIn Unicode-unaware mode, escape sequences within [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) of the form `\\cX` where `X` is a number or `_` are decoded in the same way as those with [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) letters: `\\c0` is the same as `\\cP` when taken modulo 32. In addition, if the form `\\cX` is encountered anywhere where `X` is not one of the recognized characters, then the backslash is treated as a literal character. These syntaxes are also deprecated.\n\n```\n/[\\c0]/.test(\"\\x10\"); // true\n/[\\c_]/.test(\"\\x1f\"); // true\n/[\\c*]/.test(\"\\\\\"); // true\n/\\c/.test(\"\\\\c\"); // true\n/\\c0/.test(\"\\\\c0\"); // true (the \\c0 syntax is only supported in character classes)\n```\n\n## [Examples](#examples)\n\n### [Using character escapes](#using_character_escapes)\n\nCharacter escapes are useful when you want to match a character that is not easily represented in its literal form. For example, you cannot use a line break literally in a regex literal, so you must use a character escape:\n\n```\nconst pattern = /a\\nb/;\nconst string = `a\nb`;\nconsole.log(pattern.test(string)); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-CharacterEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-CharacterEscape) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [Character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) guide\n*   [Regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions)\n*   [Character class: `[...]`, `[^...]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class)\n*   [Character class escape: `\\d`, `\\D`, `\\w`, `\\W`, `\\s`, `\\S`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape)\n*   [Literal character: `a`, `b`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character)\n*   [Unicode character class escape: `\\p{...}`, `\\P{...}`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape)\n*   [Backreference: `\\1`, `\\2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference)\n*   [Named backreference: `\\k<name>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference)\n*   [Word boundary assertion: `\\b`, `\\B`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion)",
    "title": "Character escape: \\n, \\u{...} - JavaScript | MDN",
    "description": "A character escape represents a character that may not be able to be conveniently represented in its literal form.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
    "markdown": "# try...catch - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`try...catch`** statement is comprised of a `try` block and either a `catch` block, a `finally` block, or both. The code in the `try` block is executed first, and if it throws an exception, the code in the `catch` block will be executed. The code in the `finally` block will always be executed before control flow exits the entire construct.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntry {\n  tryStatements\n} catch (exceptionVar) {\n  catchStatements\n} finally {\n  finallyStatements\n}\n```\n\n[`tryStatements`](#trystatements)\n\nThe statements to be executed.\n\n[`catchStatements`](#catchstatements)\n\nStatement that is executed if an exception is thrown in the `try` block.\n\n[`exceptionVar`](#exceptionvar) Optional\n\nAn optional [identifier or pattern](#catch_binding) to hold the caught exception for the associated `catch` block. If the `catch` block does not use the exception's value, you can omit the `exceptionVar` and its surrounding parentheses.\n\n[`finallyStatements`](#finallystatements)\n\nStatements that are executed before control flow exits the `try...catch...finally` construct. These statements execute regardless of whether an exception was thrown or caught.\n\n## [Description](#description)\n\nThe `try` statement always starts with a `try` block. Then, a `catch` block or a `finally` block must be present. It's also possible to have both `catch` and `finally` blocks. This gives us three forms for the `try` statement:\n\n*   `try...catch`\n*   `try...finally`\n*   `try...catch...finally`\n\nUnlike other constructs such as [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) or [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for), the `try`, `catch`, and `finally` blocks must be _blocks_, instead of single statements.\n\n```\ntry doSomething(); // SyntaxError\ncatch (e) console.log(e);\n```\n\nA `catch` block contains statements that specify what to do if an exception is thrown in the `try` block. If any statement within the `try` block (or in a function called from within the `try` block) throws an exception, control is immediately shifted to the `catch` block. If no exception is thrown in the `try` block, the `catch` block is skipped.\n\nThe `finally` block will always execute before control flow exits the `try...catch...finally` construct. It always executes, regardless of whether an exception was thrown or caught.\n\nYou can nest one or more `try` statements. If an inner `try` statement does not have a `catch` block, the enclosing `try` statement's `catch` block is used instead.\n\nYou can also use the `try` statement to handle JavaScript exceptions. See the [JavaScript Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#exception_handling_statements) for more information on JavaScript exceptions.\n\n### [Catch binding](#catch_binding)\n\nWhen an exception is thrown in the `try` block, `exceptionVar` (i.e., the `e` in `catch (e)`) holds the exception value. You can use this [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) to get information about the exception that was thrown. This [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) is only available in the `catch` block's [scope](https://developer.mozilla.org/en-US/docs/Glossary/Scope).\n\nIt doesn't need to be a single identifier. You can use a [destructuring pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to assign multiple identifiers at once.\n\n```\ntry {\n  throw new TypeError(\"oops\");\n} catch ({ name, message }) {\n  console.log(name); // \"TypeError\"\n  console.log(message); // \"oops\"\n}\n```\n\nThe bindings created by the `catch` clause live in the same scope as the `catch` block, so any variables declared in the `catch` block cannot have the same name as the bindings created by the `catch` clause. (There's [one exception to this rule](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#statements), but it's a deprecated syntax.)\n\n```\ntry {\n  throw new TypeError(\"oops\");\n} catch ({ name, message }) {\n  var name; // SyntaxError: Identifier 'name' has already been declared\n  let message; // SyntaxError: Identifier 'message' has already been declared\n}\n```\n\nThe exception binding is writable. For example, you may want to normalize the exception value to make sure it's an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object.\n\n```\ntry {\n  throw \"Oops; this is not an Error object\";\n} catch (e) {\n  if (!(e instanceof Error)) {\n    e = new Error(e);\n  }\n  console.error(e.message);\n}\n```\n\nIf you don't need the exception value, you can omit it along with the enclosing parentheses.\n\n```\nfunction isValidJSON(text) {\n  try {\n    JSON.parse(text);\n    return true;\n  } catch {\n    return false;\n  }\n}\n```\n\n### [The finally block](#the_finally_block)\n\nThe `finally` block contains statements to execute after the `try` block and `catch` block(s) execute, but before the statements following the `try...catch...finally` block. Control flow will always enter the `finally` block, which can proceed in one of the following ways:\n\n*   Immediately after the `try` block finishes execution normally (and no exceptions were thrown);\n*   Immediately after the `catch` block finishes execution normally;\n*   Immediately before the execution of a control-flow statement (`return`, `throw`, `break`, `continue`) in the `try` block or `catch` block that would exit the block.\n\nIf an exception is thrown from the `try` block, even when there's no `catch` block to handle the exception, the `finally` block still executes, in which case the exception is still thrown immediately after the `finally` block finishes executing.\n\nThe following example shows one use case for the `finally` block. The code opens a file and then executes statements that use the file; the `finally` block makes sure the file always closes after it is used even if an exception was thrown.\n\n```\nopenMyFile();\ntry {\n  // tie up a resource\n  writeMyFile(theData);\n} finally {\n  closeMyFile(); // always close the resource\n}\n```\n\nControl flow statements (`return`, `throw`, `break`, `continue`) in the `finally` block will \"mask\" any completion value of the `try` block or `catch` block. In this example, the `try` block tries to return 1, but before returning, the control flow is yielded to the `finally` block first, so the `finally` block's return value is returned instead.\n\n```\nfunction doIt() {\n  try {\n    return 1;\n  } finally {\n    return 2;\n  }\n}\n\ndoIt(); // returns 2\n```\n\nIt is generally a bad idea to have control flow statements in the `finally` block. Only use it for cleanup code.\n\n## [Examples](#examples)\n\n### [Unconditional catch block](#unconditional_catch_block)\n\nWhen a `catch` block is used, the `catch` block is executed when any exception is thrown from within the `try` block. For example, when the exception occurs in the following code, control transfers to the `catch` block.\n\n```\ntry {\n  throw \"myException\"; // generates an exception\n} catch (e) {\n  // statements to handle any exceptions\n  logMyErrors(e); // pass exception object to error handler\n}\n```\n\nThe `catch` block specifies an identifier (`e` in the example above) that holds the value of the exception; this value is only available in the [scope](https://developer.mozilla.org/en-US/docs/Glossary/Scope) of the `catch` block.\n\n### [Conditional catch blocks](#conditional_catch_blocks)\n\nYou can create \"Conditional `catch` blocks\" by combining `try...catch` blocks with `if...else if...else` structures, like this:\n\n```\ntry {\n  myroutine(); // may throw three types of exceptions\n} catch (e) {\n  if (e instanceof TypeError) {\n    // statements to handle TypeError exceptions\n  } else if (e instanceof RangeError) {\n    // statements to handle RangeError exceptions\n  } else if (e instanceof EvalError) {\n    // statements to handle EvalError exceptions\n  } else {\n    // statements to handle any unspecified exceptions\n    logMyErrors(e); // pass exception object to error handler\n  }\n}\n```\n\nA common use case for this is to only catch (and silence) a small subset of expected errors, and then re-throw the error in other cases:\n\n```\ntry {\n  myRoutine();\n} catch (e) {\n  if (e instanceof RangeError) {\n    // statements to handle this very common expected error\n  } else {\n    throw e; // re-throw the error unchanged\n  }\n}\n```\n\nThis may mimic the syntax from other languages, like Java:\n\n```\ntry {\n  myRoutine();\n} catch (RangeError e) {\n  // statements to handle this very common expected error\n}\n// Other errors are implicitly re-thrown\n```\n\n### [Nested try blocks](#nested_try_blocks)\n\nFirst, let's see what happens with this:\n\n```\ntry {\n  try {\n    throw new Error(\"oops\");\n  } finally {\n    console.log(\"finally\");\n  }\n} catch (ex) {\n  console.error(\"outer\", ex.message);\n}\n\n// Logs:\n// \"finally\"\n// \"outer\" \"oops\"\n```\n\nNow, if we already caught the exception in the inner `try` block by adding a `catch` block:\n\n```\ntry {\n  try {\n    throw new Error(\"oops\");\n  } catch (ex) {\n    console.error(\"inner\", ex.message);\n  } finally {\n    console.log(\"finally\");\n  }\n} catch (ex) {\n  console.error(\"outer\", ex.message);\n}\n\n// Logs:\n// \"inner\" \"oops\"\n// \"finally\"\n```\n\nAnd now, let's rethrow the error.\n\n```\ntry {\n  try {\n    throw new Error(\"oops\");\n  } catch (ex) {\n    console.error(\"inner\", ex.message);\n    throw ex;\n  } finally {\n    console.log(\"finally\");\n  }\n} catch (ex) {\n  console.error(\"outer\", ex.message);\n}\n\n// Logs:\n// \"inner\" \"oops\"\n// \"finally\"\n// \"outer\" \"oops\"\n```\n\nAny given exception will be caught only once by the nearest enclosing `catch` block unless it is rethrown. Of course, any new exceptions raised in the \"inner\" block (because the code in `catch` block may do something that throws), will be caught by the \"outer\" block.\n\n### [Returning from a finally block](#returning_from_a_finally_block)\n\nIf the `finally` block returns a value, this value becomes the return value of the entire `try-catch-finally` statement, regardless of any `return` statements in the `try` and `catch` blocks. This includes exceptions thrown inside of the `catch` block:\n\n```\n(() => {\n  try {\n    try {\n      throw new Error(\"oops\");\n    } catch (ex) {\n      console.error(\"inner\", ex.message);\n      throw ex;\n    } finally {\n      console.log(\"finally\");\n      return;\n    }\n  } catch (ex) {\n    console.error(\"outer\", ex.message);\n  }\n})();\n\n// Logs:\n// \"inner\" \"oops\"\n// \"finally\"\n```\n\nThe outer \"oops\" is not thrown because of the return in the `finally` block. The same would apply to any value returned from the `catch` block.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-try-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-try-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "try...catch - JavaScript | MDN",
    "description": "The try...catch statement is comprised of a try block and either a catch block, a finally block, or both. The code in the try block is executed first, and if it throws an exception, the code in the catch block will be executed. The code in the finally block will always be executed before control flow exits the entire construct.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard",
    "markdown": "# Wildcard: . - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **wildcard** matches all characters except line terminators. It also matches line terminators if the `s` flag is set.\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`.` matches any character except [line terminators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators). If the [`s`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) flag is set, `.` also matches line terminators.\n\nThe exact character set matched by `.` depends on whether the regex is [Unicode-aware](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode). If it is Unicode-aware, `.` matches any Unicode code point; otherwise, it matches any UTF-16 code unit. For example:\n\n```\n/../.test(\"😄\"); // true; matches two UTF-16 code units as a surrogate pair\n/../u.test(\"😄\"); // false; input only has one Unicode character\n```\n\n## [Examples](#examples)\n\n### [Usage with quantifiers](#usage_with_quantifiers)\n\nWildcards are often used with [quantifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier) to match any character sequence, until the next character of interest is found. For example, the following example extracts the title of a Markdown page in the form `# Title`:\n\n```\nfunction parseTitle(entry) {\n  // Use multiline mode because the title may not be at the start of\n  // the file. Note that the m flag does not make . match line\n  // terminators, so the title must be on a single line\n  // Return text matched by the first capturing group.\n  return /^#[ \\t]+(.+)$/m.exec(entry)?.[1];\n}\n\nparseTitle(\"# Hello world\"); // \"Hello world\"\nparseTitle(\"## Subsection\"); // undefined\nparseTitle(`\n---\nslug: Web/JavaScript/Reference/Regular_expressions/Wildcard\n---\n\n# Wildcard: .\n\nA **wildcard** matches all characters except line terminators.\n`); // \"Wildcard: .\"\n```\n\n### [Matching code block content](#matching_code_block_content)\n\nThe following example matches the content of a code block enclosed by three backticks in Markdown. It uses the `s` flag to make `.` match line terminators, because the content of a code block may span multiple lines:\n\n```\nfunction parseCodeBlock(entry) {\n  return /^```.*?^(.+?)\\n```/ms.exec(entry)?.[1];\n}\n\nparseCodeBlock(`\n\\`\\`\\`js\nconsole.log(\"Hello world\");\n\\`\\`\\`\n`); // \"console.log(\"Hello world\");\"\n\nparseCodeBlock(`\nA \\`try...catch\\` statement must have the blocks enclosed in curly braces.\n\n\\`\\`\\`js example-bad\ntry\n  doSomething();\ncatch (e)\n  console.log(e);\n\\`\\`\\`\n`); // \"try\\n  doSomething();\\ncatch (e)\\n  console.log(e);\"\n```\n\n**Warning:** These examples are for demonstration only. If you want to parse Markdown, use a dedicated Markdown parser because there are many edge cases to consider.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Atom](https://tc39.es/ecma262/multipage/text-processing.html#prod-Atom) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Wildcard: . - JavaScript | MDN",
    "description": "A wildcard matches all characters except line terminators. It also matches line terminators if the s flag is set.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch",
    "markdown": "# switch - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`switch`** statement evaluates an [expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators), matching the expression's value against a series of `case` clauses, and executes [statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements) after the first `case` clause with a matching value, until a `break` statement is encountered. The `default` clause of a `switch` statement will be jumped to if no `case` matches the expression's value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nswitch (expression) {\n  case caseExpression1:\n    statements\n  case caseExpression2:\n    statements\n  // …\n  case caseExpressionN:\n    statements\n  default:\n    statements\n}\n```\n\n[`expression`](#expression)\n\nAn expression whose result is matched against each `case` clause.\n\n[`case caseExpressionN`](#case_caseexpressionn) Optional\n\nA `case` clause used to match against `expression`. If the value of `expression` matches the value of any `caseExpressionN`, execution starts from the first statement after that `case` clause until either the end of the `switch` statement or the first encountered `break`.\n\n[`default`](#default) Optional\n\nA `default` clause; if provided, this clause is executed if the value of `expression` doesn't match any of the `case` clauses. A `switch` statement can only have one `default` clause.\n\n## [Description](#description)\n\nA `switch` statement first evaluates its expression. It then looks for the first `case` clause whose expression evaluates to the same value as the result of the input expression (using the [strict equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) comparison) and transfers control to that clause, executing all statements following that clause.\n\nThe clause expressions are only evaluated when necessary — if a match is already found, subsequent `case` clause expressions will not be evaluated, even when they will be visited by [fall-through](#breaking_and_fall-through).\n\n```\nswitch (undefined) {\n  case console.log(1):\n  case console.log(2):\n}\n// Only logs 1\n```\n\nIf no matching `case` clause is found, the program looks for the optional `default` clause, and if found, transfers control to that clause, executing statements following that clause. If no `default` clause is found, the program continues execution at the statement following the end of `switch`. By convention, the `default` clause is the last clause, but it does not need to be so. A `switch` statement may only have one `default` clause; multiple `default` clauses will result in a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).\n\n### [Breaking and fall-through](#breaking_and_fall-through)\n\nYou can use the [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) statement within a `switch` statement's body to break out early, often when all statements between two `case` clauses have been executed. Execution will continue at the first statement following `switch`.\n\nIf `break` is omitted, execution will proceed to the next `case` clause, even to the `default` clause, regardless of whether the value of that clause's expression matches. This behavior is called \"fall-through\".\n\n```\nconst foo = 0;\nswitch (foo) {\n  case -1:\n    console.log(\"negative 1\");\n    break;\n  case 0: // Value of foo matches this criteria; execution starts from here\n    console.log(0);\n  // Forgotten break! Execution falls through\n  case 1: // no break statement in 'case 0:' so this case will run as well\n    console.log(1);\n    break; // Break encountered; will not continue into 'case 2:'\n  case 2:\n    console.log(2);\n    break;\n  default:\n    console.log(\"default\");\n}\n// Logs 0 and 1\n```\n\nIn the appropriate context, other control-flow statements also have the effect of breaking out of the `switch` statement. For example, if the `switch` statement is contained in a function, then a [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement terminates the execution of the function body and therefore the `switch` statement. If the `switch` statement is contained in a loop, then a [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) statement stops the `switch` statement and jumps to the next iteration of the loop.\n\n### [Lexical scoping](#lexical_scoping)\n\nThe `case` and `default` clauses are like [labels](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label): they indicate possible places that control flow may jump to. However, they don't create lexical [scopes](https://developer.mozilla.org/en-US/docs/Glossary/Scope) themselves (neither do they automatically break out — as demonstrated above). For example:\n\n```\nconst action = \"say_hello\";\nswitch (action) {\n  case \"say_hello\":\n    const message = \"hello\";\n    console.log(message);\n    break;\n  case \"say_hi\":\n    const message = \"hi\";\n    console.log(message);\n    break;\n  default:\n    console.log(\"Empty action received.\");\n}\n```\n\nThis example will output the error \"Uncaught SyntaxError: Identifier 'message' has already been declared\", because the first `const message = 'hello';` conflicts with the second `const message = 'hi';` declaration, even when they're within their own separate case clauses. Ultimately, this is due to both `const` declarations being within the same block scope created by the `switch` body.\n\nTo fix this, whenever you need to use `let` or `const` declarations in a `case` clause, wrap it in a block.\n\n```\nconst action = \"say_hello\";\nswitch (action) {\n  case \"say_hello\": {\n    const message = \"hello\";\n    console.log(message);\n    break;\n  }\n  case \"say_hi\": {\n    const message = \"hi\";\n    console.log(message);\n    break;\n  }\n  default: {\n    console.log(\"Empty action received.\");\n  }\n}\n```\n\nThis code will now output `hello` in the console as it should, without any errors.\n\n## [Examples](#examples)\n\n### [Using switch](#using_switch)\n\nIn the following example, if `expr` evaluates to `Bananas`, the program matches the value with case `case 'Bananas'` and executes the associated statement. When `break` is encountered, the program breaks out of `switch` and executes the statement following `switch`. If `break` were omitted, the statement for the `case 'Cherries'` would also be executed.\n\n```\nswitch (expr) {\n  case \"Oranges\":\n    console.log(\"Oranges are $0.59 a pound.\");\n    break;\n  case \"Apples\":\n    console.log(\"Apples are $0.32 a pound.\");\n    break;\n  case \"Bananas\":\n    console.log(\"Bananas are $0.48 a pound.\");\n    break;\n  case \"Cherries\":\n    console.log(\"Cherries are $3.00 a pound.\");\n    break;\n  case \"Mangoes\":\n  case \"Papayas\":\n    console.log(\"Mangoes and papayas are $2.79 a pound.\");\n    break;\n  default:\n    console.log(`Sorry, we are out of ${expr}.`);\n}\n\nconsole.log(\"Is there anything else you'd like?\");\n```\n\n### [Putting the default clause between two case clauses](#putting_the_default_clause_between_two_case_clauses)\n\nIf no match is found, execution will start from the `default` clause, and execute all statements after that.\n\n```\nconst foo = 5;\nswitch (foo) {\n  case 2:\n    console.log(2);\n    break; // it encounters this break so will not continue into 'default:'\n  default:\n    console.log(\"default\");\n  // fall-through\n  case 1:\n    console.log(\"1\");\n}\n```\n\nIt also works when you put `default` before all other `case` clauses.\n\n### [Taking advantage of fall-through](#taking_advantage_of_fall-through)\n\nThis method takes advantage of the fact that if there is no `break` below a `case` clause, execution will continue to the next `case` clause regardless if that `case` meets the criteria.\n\nThe following is an example of a single operation sequential `case` statement, where four different values perform exactly the same.\n\n```\nconst Animal = \"Giraffe\";\nswitch (Animal) {\n  case \"Cow\":\n  case \"Giraffe\":\n  case \"Dog\":\n  case \"Pig\":\n    console.log(\"This animal is not extinct.\");\n    break;\n  case \"Dinosaur\":\n  default:\n    console.log(\"This animal is extinct.\");\n}\n```\n\nThe following is an example of a multiple-operation sequential `case` clause, where, depending on the provided integer, you can receive different output. This shows you that it will traverse in the order that you put the `case` clauses, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings into these `case` statements as well.\n\n```\nconst foo = 1;\nlet output = \"Output: \";\nswitch (foo) {\n  case 0:\n    output += \"So \";\n  case 1:\n    output += \"What \";\n    output += \"Is \";\n  case 2:\n    output += \"Your \";\n  case 3:\n    output += \"Name\";\n  case 4:\n    output += \"?\";\n    console.log(output);\n    break;\n  case 5:\n    output += \"!\";\n    console.log(output);\n    break;\n  default:\n    console.log(\"Please pick a number from 0 to 5!\");\n}\n```\n\nThe output from this example:\n\n| Value | Log text |\n| --- | --- |\n| `foo` is `NaN` or not `1`, `2`, `3`, `4`, `5`, or `0` | Please pick a number from 0 to 5! |\n| `0` | Output: So What Is Your Name? |\n| `1` | Output: What Is Your Name? |\n| `2` | Output: Your Name? |\n| `3` | Output: Name? |\n| `4` | Output: ? |\n| `5` | Output: ! |\n\n### [An alternative to if...else chains](#an_alternative_to_if...else_chains)\n\nYou may often find yourself doing a series of [`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) matches.\n\n```\nif (\"fetch\" in globalThis) {\n  // Fetch a resource with fetch\n} else if (\"XMLHttpRequest\" in globalThis) {\n  // Fetch a resource with XMLHttpRequest\n} else {\n  // Fetch a resource with some custom AJAX logic\n}\n```\n\nThis pattern is not doing a sequence of `===` comparisons, but you can still convert it to a `switch` construct.\n\n```\nswitch (true) {\n  case \"fetch\" in globalThis:\n    // Fetch a resource with fetch\n    break;\n  case \"XMLHttpRequest\" in globalThis:\n    // Fetch a resource with XMLHttpRequest\n    break;\n  default:\n    // Fetch a resource with some custom AJAX logic\n    break;\n}\n```\n\nThe `switch (true)` pattern as an alternative to `if...else` is especially useful if you want to utilize the fall-through behavior.\n\n```\nswitch (true) {\n  case isSquare(shape):\n    console.log(\"This shape is a square.\");\n  // Fall-through, since a square is a rectangle as well!\n  case isRectangle(shape):\n    console.log(\"This shape is a rectangle.\");\n  case isQuadrilateral(shape):\n    console.log(\"This shape is a quadrilateral.\");\n    break;\n  case isCircle(shape):\n    console.log(\"This shape is a circle.\");\n    break;\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-switch-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-switch-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "switch - JavaScript | MDN",
    "description": "The switch statement evaluates an expression, matching the expression's value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression's value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw",
    "markdown": "# throw - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`throw`** statement throws a user-defined exception. Execution of the current function will stop (the statements after `throw` won't be executed), and control will be passed to the first [`catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) block in the call stack. If no `catch` block exists among caller functions, the program will terminate.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n[`expression`](#expression)\n\nThe expression to throw.\n\n## [Description](#description)\n\nThe `throw` statement is valid in all contexts where statements can be used. Its execution generates an exception that penetrates through the call stack. For more information on error bubbling and handling, see [Control flow and error handling](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling).\n\nThe `throw` keyword can be followed by any kind of expression, for example:\n\n```\nthrow error; // Throws a previously defined value (e.g. within a catch block)\nthrow new Error(\"Required\"); // Throws a new Error object\n```\n\nIn practice, the exception you throw should _always_ be an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object or an instance of an `Error` subclass, such as [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError). This is because code that catches the error may expect certain properties, such as [`message`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message), to be present on the caught value. For example, web APIs typically throw [`DOMException`](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) instances, which inherit from `Error.prototype`.\n\n### [Automatic semicolon insertion](#automatic_semicolon_insertion)\n\nThe syntax forbids line terminators between the `throw` keyword and the expression to be thrown.\n\nThe code above is transformed by [automatic semicolon insertion (ASI)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion) into:\n\nThis is invalid code, because unlike [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return), `throw` must be followed by an expression.\n\nTo avoid this problem (to prevent ASI), you could use parentheses:\n\n## [Examples](#examples)\n\n### [Throwing a user-defined error](#throwing_a_user-defined_error)\n\nThis example defines a function that throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the input is not of the expected type.\n\n```\nfunction isNumeric(x) {\n  return [\"number\", \"bigint\"].includes(typeof x);\n}\n\nfunction sum(...values) {\n  if (!values.every(isNumeric)) {\n    throw new TypeError(\"Can only add numbers\");\n  }\n  return values.reduce((a, b) => a + b);\n}\n\nconsole.log(sum(1, 2, 3)); // 6\ntry {\n  sum(\"1\", \"2\");\n} catch (e) {\n  console.error(e); // TypeError: Can only add numbers\n}\n```\n\n### [Throwing an existing object](#throwing_an_existing_object)\n\nThis example calls a callback-based async function, and throws an error if the callback receives an error.\n\n```\nreadFile(\"foo.txt\", (err, data) => {\n  if (err) {\n    throw err;\n  }\n  console.log(data);\n});\n```\n\nErrors thrown this way are not catchable by the caller and will cause the program to crash unless (a) the `readFile` function itself catches the error, or (b) the program is running in a context that catches top-level errors. You can handle errors more naturally by using the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor.\n\n```\nfunction readFilePromise(path) {\n  return new Promise((resolve, reject) => {\n    readFile(path, (err, data) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(data);\n    });\n  });\n}\n\ntry {\n  const data = await readFilePromise(\"foo.txt\");\n  console.log(data);\n} catch (err) {\n  console.error(err);\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-throw-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-throw-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "throw - JavaScript | MDN",
    "description": "The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion",
    "markdown": "# Word boundary assertion: \\\\b, \\\\B - JavaScript\n\nA **word boundary assertion** checks if the current position in the string is a word boundary. A word boundary is where the next character is a word character and the previous character is not a word character, or vice versa.\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`\\b` asserts that the current position in the string is a word boundary. `\\B` negates the assertion: it asserts that the current position is not a word boundary. Both are _assertions_, so unlike other [character escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) or [character class escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape), `\\b` and `\\B` don't consume any characters.\n\nA word character includes the following:\n\n*   Letters (A–Z, a–z), numbers (0–9), and underscore (\\_).\n*   If the regex is [Unicode-aware](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode) and the [`i`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) flag is set, other Unicode characters that get canonicalized to one of the characters above through [case folding](https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt).\n\nWord characters are also matched by the `\\w` [character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape).\n\nOut-of-bounds input positions are considered non-word characters. For example, the following are successful matches:\n\n```\n/\\ba/.exec(\"abc\");\n/c\\b/.exec(\"abc\");\n\n/\\B /.exec(\" abc\");\n/ \\B/.exec(\"abc \");\n```\n\n## [Examples](#examples)\n\n### [Detecting words](#detecting_words)\n\nThe following example detects if a string contains the word \"thanks\" or \"thank you\":\n\n```\nfunction hasThanks(str) {\n  return /\\b(thanks|thank you)\\b/i.test(str);\n}\n\nhasThanks(\"Thanks! You helped me a lot.\"); // true\nhasThanks(\"Just want to say thank you for all your work.\"); // true\nhasThanks(\"Thanksgiving is around the corner.\"); // false\n```\n\n**Warning:** Not all languages have clearly defined word boundaries. If you are working with languages like Chinese or Thai, where there are no whitespace separators, use a more advanced library like [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) to search for words instead.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Assertion](https://tc39.es/ecma262/multipage/text-processing.html#prod-Assertion) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Word boundary assertion: \\b, \\B - JavaScript | MDN",
    "description": "A word boundary assertion checks if the current position in the string is a word boundary. A word boundary is where the next character is a word character and the previous character is not a word character, or vice versa.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors",
    "markdown": "# JavaScript error reference - JavaScript\n\nBelow, you'll find a list of errors which are thrown by JavaScript. These errors can be a helpful debugging aid, but the reported problem isn't always immediately clear. The pages below will provide additional details about these errors. Each error is an object based upon the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object, and has a `name` and a `message`.\n\nErrors displayed in the Web console may include a link to the corresponding page below to help you quickly comprehend the problem in your code.\n\nFor a beginner's introductory tutorial on fixing JavaScript errors, see [What went wrong? Troubleshooting JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_went_wrong).",
    "title": "JavaScript error reference - JavaScript | MDN",
    "description": "Below, you'll find a list of errors which are thrown by JavaScript. These errors can be a helpful debugging aid, but the reported problem isn't always immediately clear. The pages below will provide additional details about these errors. Each error is an object based upon the Error object, and has a name and a message.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined",
    "markdown": "# ReferenceError: \"x\" is not defined - JavaScript\n\nThe JavaScript exception \"_variable_ is not defined\" occurs when there is a non-existent variable referenced somewhere.\n\n## [Message](#message)\n\nReferenceError: \"x\" is not defined (V8-based & Firefox)\nReferenceError: Can't find variable: x (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is a non-existent variable referenced somewhere. This variable needs to be declared, or you need to make sure it is available in your current script or [scope](https://developer.mozilla.org/en-US/docs/Glossary/Scope).\n\n**Note:** When loading a library (such as jQuery), make sure it is loaded before you access library variables, such as \"$\". Put the [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) element that loads the library before your code that uses it.\n\n## [Examples](#examples)\n\n### [Variable not declared](#variable_not_declared)\n\n```\nfoo.substring(1); // ReferenceError: foo is not defined\n```\n\nThe \"foo\" variable isn't defined anywhere. It needs to be some string, so that the [`String.prototype.substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) method will work.\n\n```\nconst foo = \"bar\";\nfoo.substring(1); // \"ar\"\n```\n\n### [Wrong scope](#wrong_scope)\n\nA variable needs to be available in the current context of execution. Variables defined inside a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) cannot be accessed from anywhere outside the function, because the variable is defined only in the scope of the function\n\n```\nfunction numbers() {\n  const num1 = 2;\n  const num2 = 3;\n  return num1 + num2;\n}\n\nconsole.log(num1); // ReferenceError num1 is not defined.\n```\n\nHowever, a function can access all variables and functions defined inside the scope in which it is defined. In other words, a function defined in the global scope can access all variables defined in the global scope.\n\n```\nconst num1 = 2;\nconst num2 = 3;\n\nfunction numbers() {\n  return num1 + num2;\n}\n\nconsole.log(numbers()); // 5\n```\n\n## [See also](#see_also)",
    "title": "ReferenceError: \"x\" is not defined - JavaScript | MDN",
    "description": "The JavaScript exception \"variable is not defined\" occurs when there is a\n  non-existent variable referenced somewhere.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var",
    "markdown": "# ReferenceError: assignment to undeclared variable \"x\" - JavaScript\n\nThe JavaScript [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\-only exception \"Assignment to undeclared variable\" occurs when the value has been assigned to an undeclared variable.\n\n## [Message](#message)\n\nReferenceError: x is not defined (V8-based)\nReferenceError: assignment to undeclared variable x (Firefox)\nReferenceError: Can't find variable: x (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA value has been assigned to an undeclared variable. In other words, there was an assignment without the `var` keyword. There are some differences between declared and undeclared variables, which might lead to unexpected results and that's why JavaScript presents an error in strict mode.\n\nThree things to note about declared and undeclared variables:\n\n*   Declared variables are constrained in the execution context in which they are declared. Undeclared variables are always global.\n*   Declared variables are created before any code is executed. Undeclared variables do not exist until the code assigning to them is executed.\n*   Declared variables are a non-configurable property of their execution context (function or global). Undeclared variables are configurable (e.g. can be deleted).\n\nFor more details and examples, see the [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) reference page.\n\nErrors about undeclared variable assignments occur in [strict mode code](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) only. In non-strict code, they are silently ignored.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\nIn this case, the variable \"bar\" is an undeclared variable.\n\n```\nfunction foo() {\n  \"use strict\";\n  bar = true;\n}\nfoo(); // ReferenceError: assignment to undeclared variable bar\n```\n\n### [Valid cases](#valid_cases)\n\nTo make \"bar\" a declared variable, you can add a [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), or [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) keyword in front of it.\n\n```\nfunction foo() {\n  \"use strict\";\n  const bar = true;\n}\nfoo();\n```\n\n## [See also](#see_also)",
    "title": "ReferenceError: assignment to undeclared variable \"x\" - JavaScript | MDN",
    "description": "The JavaScript strict mode-only exception \"Assignment to undeclared variable\" occurs when the value has been assigned to an undeclared variable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer",
    "markdown": "# RangeError: x can't be converted to BigInt because it isn't an integer - JavaScript\n\nThe JavaScript exception \"x can't be converted to BigInt because it isn't an integer\" occurs when the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function is used on a number that isn't an integer.\n\n## [Message](#message)\n\nRangeError: The number 1.5 cannot be converted to a BigInt because it is not an integer (V8-based & Firefox)\nRangeError: Not an integer (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nWhen using the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function to convert a number to a BigInt, the number must be an integer (such that [`Number.isInteger`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger) returns true).\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nconst a = BigInt(1.5);\n// RangeError: The number 1.5 cannot be converted to a BigInt because it is not an integer\nconst b = BigInt(NaN);\n// RangeError: NaN cannot be converted to a BigInt because it is not an integer\n```\n\n### [Valid cases](#valid_cases)\n\n## [See also](#see_also)",
    "title": "RangeError: x can't be converted to BigInt because it isn't an integer - JavaScript | MDN",
    "description": "The JavaScript exception \"x can't be converted to BigInt because it isn't an integer\" occurs when the BigInt() function is used on a number that isn't an integer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Promise_any_all_rejected",
    "markdown": "# AggregateError: No Promise in Promise.any was resolved - JavaScript\n\nThe JavaScript exception \"No Promise in Promise.any was resolved\" occurs when all promises passed to [`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any) are rejected. It is the only built-in usage of [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError).\n\n## [Message](#message)\n\nAggregateError: All promises were rejected (V8-based)\nAggregateError: No Promise in Promise.any was resolved (Firefox)\nAggregateError (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\n`Promise.any()` only rejects when all promises passed to it are rejected. You should access [`errors`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/errors) to get the array of rejection reasons. See [Using promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#error_handling) for more information on how to handle asynchronously rejected promises. This error is also raised when `Promise.any()` receives an empty iterable.\n\n## [Examples](#examples)\n\n### [Empty iterable](#empty_iterable)\n\n```\nPromise.any([]).catch((error) => {\n  console.error(error); // AggregateError: No Promise in Promise.any was resolved\n});\n```\n\n### [Handling all rejections](#handling_all_rejections)\n\n```\nconst promises = [\n  fetch(\"/data-location1\"),\n  fetch(\"/data-location1\"),\n  fetch(\"/data-location1\"),\n];\n\nPromise.any(promises)\n  .then((value) => console.log(value))\n  .catch((error) => {\n    // None of the fetches were successful\n    for (const e of error.errors) {\n      console.error(e);\n    }\n  });\n\n// Using await\nasync function fetchFirstSuccessful() {\n  try {\n    const value = await Promise.any(promises);\n    console.log(value);\n  } catch (error) {\n    for (const e of error.errors) {\n      console.error(e);\n    }\n  }\n}\n```\n\n## [See also](#see_also)",
    "title": "AggregateError: No Promise in Promise.any was resolved - JavaScript | MDN",
    "description": "The JavaScript exception \"No Promise in Promise.any was resolved\" occurs when all promises passed to Promise.any() are rejected. It is the only built-in usage of AggregateError.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied",
    "markdown": "# Error: Permission denied to access property \"x\" - JavaScript\n\nThe JavaScript exception \"Permission denied to access property\" occurs when there was an attempt to access an object for which you have no permission.\n\n## [Message](#message)\n\nDOMException: Blocked a frame with origin \"x\" from accessing a cross-origin frame. (Chromium-based)\nDOMException: Permission denied to access property \"x\" on cross-origin object (Firefox)\nSecurityError: Blocked a frame with origin \"x\" from accessing a cross-origin frame. Protocols, domains, and ports must match. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere was attempt to access an object for which you have no permission. This is likely an [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) element loaded from a different domain for which you violated the [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\n\n## [Examples](#examples)\n\n### [No permission to access document](#no_permission_to_access_document)\n\n```\n<!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <iframe\n      id=\"myframe\"\n      src=\"http://www1.w3c-test.org/common/blank.html\"></iframe>\n    <script>\n      onload = function () {\n        console.log(frames[0].document);\n        // Error: Permission denied to access property \"document\"\n      };\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## [See also](#see_also)",
    "title": "Error: Permission denied to access property \"x\" - JavaScript | MDN",
    "description": "The JavaScript exception \"Permission denied to access property\" occurs when there was\n  an attempt to access an object for which you have no permission.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape",
    "markdown": "# Unicode character class escape: \\\\p{...}, \\\\P{...} - JavaScript\n\nA **unicode character class escape** is a kind of [character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) that matches a set of characters specified by a Unicode property. It's only supported in [Unicode-aware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode). When the [`v`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) flag is enabled, it can also be used to match finite-length strings.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\n\\p{loneProperty}\n\\P{loneProperty}\n\n\\p{property=value}\n\\P{property=value}\n```\n\n### [Parameters](#parameters)\n\n[`loneProperty`](#loneproperty)\n\nA lone Unicode property name or value, following the same syntax as `value`. It specifies the value for the `General_Category` property, or a [binary property name](https://tc39.es/ecma262/multipage/text-processing.html#table-binary-unicode-properties). In [`v`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) mode, it can also be a [binary Unicode property of strings](https://tc39.es/ecma262/multipage/text-processing.html#table-binary-unicode-properties-of-strings).\n\n**Note:** [ICU](https://unicode-org.github.io/icu/userguide/strings/unicodeset.html#property-values) syntax allows omitting the `Script` property name as well, but JavaScript does not support this, because most of the time `Script_Extensions` is more useful than `Script`.\n\n[`property`](#property)\n\nA Unicode property name. Must be made of [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) letters (`A–Z`, `a–z`) and underscores (`_`), and must be one of the [non-binary property names](https://tc39.es/ecma262/multipage/text-processing.html#table-nonbinary-unicode-properties).\n\n[`value`](#value)\n\nA Unicode property value. Must be made of ASCII letters (`A–Z`, `a–z`), underscores (`_`), and digits (`0–9`), and must be one of the supported values listed in [`PropertyValueAliases.txt`](https://unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt).\n\n## [Description](#description)\n\n`\\p` and `\\P` are only supported in [Unicode-aware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode). In Unicode-unaware mode, they are [identity escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) for the `p` or `P` character.\n\nEvery Unicode character has a set of properties that describe it. For example, the character [`a`](https://util.unicode.org/UnicodeJsps/character.jsp?a=0061) has the `General_Category` property with value `Lowercase_Letter`, and the `Script` property with value `Latn`. The `\\p` and `\\P` escape sequences allow you to match a character based on its properties. For example, `a` can be matched by `\\p{Lowercase_Letter}` (the `General_Category` property name is optional) as well as `\\p{Script=Latn}`. `\\P` creates a _complement class_ that consists of code points without the specified property.\n\nTo compose multiple properties, use the [character set intersection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#v-mode_character_class) syntax enabled with the `v` flag, or see [pattern subtraction and intersection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion#pattern_subtraction_and_intersection).\n\nIn `v` mode, `\\p` may match a sequence of code points, defined in Unicode as \"properties of strings\". This is most useful for emojis, which are often composed of multiple code points. However, `\\P` can only complement character properties.\n\n**Note:** There are plans to port the properties of strings feature to `u` mode as well.\n\n## [Examples](#examples)\n\n### [General categories](#general_categories)\n\nGeneral categories are used to classify Unicode characters and subcategories are available to define a more precise categorization. It is possible to use both short or long forms in Unicode property escapes.\n\nThey can be used to match letters, numbers, symbols, punctuations, spaces, etc. For a more exhaustive list of general categories, please refer to [the Unicode specification](https://unicode.org/reports/tr18/#General_Category_Property).\n\n```\n// finding all the letters of a text\nconst story = \"It's the Cheshire Cat: now I shall have somebody to talk to.\";\n\n// Most explicit form\nstory.match(/\\p{General_Category=Letter}/gu);\n\n// It is not mandatory to use the property name for General categories\nstory.match(/\\p{Letter}/gu);\n\n// This is equivalent (short alias):\nstory.match(/\\p{L}/gu);\n\n// This is also equivalent (conjunction of all the subcategories using short aliases)\nstory.match(/\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}/gu);\n```\n\n### [Scripts and script extensions](#scripts_and_script_extensions)\n\nSome languages use different scripts for their writing system. For instance, English and Spanish are written using the Latin script while Arabic and Russian are written with other scripts (respectively Arabic and Cyrillic). The `Script` and `Script_Extensions` Unicode properties allow regular expression to match characters according to the script they are mainly used with (`Script`) or according to the set of scripts they belong to (`Script_Extensions`).\n\nFor example, `A` belongs to the `Latin` script and `ε` to the `Greek` script.\n\n```\nconst mixedCharacters = \"aεЛ\";\n\n// Using the canonical \"long\" name of the script\nmixedCharacters.match(/\\p{Script=Latin}/u); // a\n\n// Using a short alias (ISO 15924 code) for the script\nmixedCharacters.match(/\\p{Script=Grek}/u); // ε\n\n// Using the short name sc for the Script property\nmixedCharacters.match(/\\p{sc=Cyrillic}/u); // Л\n```\n\nFor more details, refer to [the Unicode specification](https://unicode.org/reports/tr24/#Script), the [Scripts table in the ECMAScript specification](https://tc39.es/ecma262/multipage/text-processing.html#table-unicode-script-values), and the [ISO 15924 list of script codes](https://unicode.org/iso15924/iso15924-codes.html).\n\nIf a character is used in a limited set of scripts, the `Script` property will only match for the \"predominant\" used script. If we want to match characters based on a \"non-predominant\" script, we could use the `Script_Extensions` property (`Scx` for short).\n\n```\n// ٢ is the digit 2 in Arabic-Indic notation\n// while it is predominantly written within the Arabic script\n// it can also be written in the Thaana script\n\n\"٢\".match(/\\p{Script=Thaana}/u);\n// null as Thaana is not the predominant script\n\n\"٢\".match(/\\p{Script_Extensions=Thaana}/u);\n// [\"٢\", index: 0, input: \"٢\", groups: undefined]\n```\n\n### [Unicode property escapes vs. character classes](#unicode_property_escapes_vs._character_classes)\n\nWith JavaScript regular expressions, it is also possible to use [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) and especially `\\w` or `\\d` to match letters or digits. However, such forms only match characters from the _Latin_ script (in other words, `a` to `z` and `A` to `Z` for `\\w` and `0` to `9` for `\\d`). As shown in [this example](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes#looking_for_a_word_from_unicode_characters), it might be a bit clumsy to work with non Latin texts.\n\nUnicode property escapes categories encompass much more characters and `\\p{Letter}` or `\\p{Number}` will work for any script.\n\n```\n// Trying to use ranges to avoid \\w limitations:\n\nconst nonEnglishText = \"Приключения Алисы в Стране чудес\";\nconst regexpBMPWord = /([\\u0000-\\u0019\\u0021-\\uFFFF])+/gu;\n// BMP goes through U+0000 to U+FFFF but space is U+0020\n\nconsole.table(nonEnglishText.match(regexpBMPWord));\n\n// Using Unicode property escapes instead\nconst regexpUPE = /\\p{L}+/gu;\nconsole.table(nonEnglishText.match(regexpUPE));\n```\n\n### [Matching prices](#matching_prices)\n\nThe following example matches prices in a string:\n\n```\nfunction getPrices(str) {\n  // Sc stands for \"currency symbol\"\n  return [...str.matchAll(/\\p{Sc}\\s*[\\d.,]+/gu)].map((match) => match[0]);\n}\n\nconst str = `California rolls $6.99\nCrunchy rolls $8.49\nShrimp tempura $10.99`;\nconsole.log(getPrices(str)); // [\"$6.99\", \"$8.49\", \"$10.99\"]\n\nconst str2 = `US store $19.99\nEurope store €18.99\nJapan store ¥2000`;\nconsole.log(getPrices(str2)); // [\"$19.99\", \"€18.99\", \"¥2000\"]\n```\n\n### [Matching strings](#matching_strings)\n\nWith the `v` flag, `\\p{…}` can match strings that are potentially longer than one character by using a property of strings:\n\n```\nconst flag = \"🇺🇳\";\nconsole.log(flag.length); // 2\nconsole.log(/\\p{RGI_Emoji_Flag_Sequence}/v.exec(flag)); // [ '🇺🇳' ]\n```\n\nHowever, you can't use `\\P` to match \"a string that does not have a property\", because it's unclear how many characters should be consumed.\n\n```\n/\\P{RGI_Emoji_Flag_Sequence}/v; // SyntaxError: Invalid regular expression: Invalid property name\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-CharacterClassEscape](https://tc39.es/ecma262/multipage/text-processing.html#prod-CharacterClassEscape) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Unicode character class escape: \\p{...}, \\P{...} - JavaScript | MDN",
    "description": "A unicode character class escape is a kind of character class escape that matches a set of characters specified by a Unicode property. It's only supported in Unicode-aware mode. When the v flag is enabled, it can also be used to match finite-length strings.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion",
    "markdown": "# InternalError: too much recursion - JavaScript\n\nThe JavaScript exception \"too much recursion\" or \"Maximum call stack size exceeded\" occurs when there are too many function calls, or a function is missing a base case.\n\n## [Message](#message)\n\nRangeError: Maximum call stack size exceeded (Chrome)\nInternalError: too much recursion (Firefox)\nRangeError: Maximum call stack size exceeded. (Safari)\n\n## [Error type](#error_type)\n\n[`InternalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError) in Firefox; [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) in Chrome and Safari.\n\n## [What went wrong?](#what_went_wrong)\n\nA function that calls itself is called a _recursive function_. Once a condition is met, the function stops calling itself. This is called a _base case_.\n\nIn some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case). When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.\n\n## [Examples](#examples)\n\nThis recursive function runs 10 times, as per the exit condition.\n\n```\nfunction loop(x) {\n  if (x >= 10)\n    // \"x >= 10\" is the exit condition\n    return;\n  // do stuff\n  loop(x + 1); // the recursive call\n}\nloop(0);\n```\n\nSetting this condition to an extremely high value, won't work:\n\n```\nfunction loop(x) {\n  if (x >= 1000000000000) return;\n  // do stuff\n  loop(x + 1);\n}\nloop(0);\n\n// InternalError: too much recursion\n```\n\nThis recursive function is missing a base case. As there is no exit condition, the function will call itself infinitely.\n\n```\nfunction loop(x) {\n  // The base case is missing\n  loop(x + 1); // Recursive call\n}\n\nloop(0);\n\n// InternalError: too much recursion\n```\n\n### [Class error: too much recursion](#class_error_too_much_recursion)\n\n```\nclass Person {\n  constructor() {}\n  set name(name) {\n    this.name = name; // Recursive call\n  }\n}\n\nconst tony = new Person();\ntony.name = \"Tonisha\"; // InternalError: too much recursion\n```\n\nWhen a value is assigned to the property name (this.name = name;) JavaScript needs to set that property. When this happens, the setter function is triggered.\n\nIn this example when the setter is triggered, it is told to do the same thing again: _to set the same property that it is meant to handle._ This causes the function to call itself, again and again, making it infinitely recursive.\n\nThis issue also appears if the same variable is used in the getter.\n\n```\nclass Person {\n  get name() {\n    return this.name; // Recursive call\n  }\n}\n```\n\nTo avoid this problem, make sure that the property being assigned to inside the setter function is different from the one that initially triggered the setter. The same goes for the getter.\n\n```\nclass Person {\n  constructor() {}\n  set name(name) {\n    this._name = name;\n  }\n  get name() {\n    return this._name;\n  }\n}\nconst tony = new Person();\ntony.name = \"Tonisha\";\nconsole.log(tony);\n```\n\n## [See also](#see_also)",
    "title": "InternalError: too much recursion - JavaScript | MDN",
    "description": "The JavaScript exception \"too much recursion\" or \"Maximum call stack size exceeded\"\n  occurs when there are too many function calls, or a function is missing a base case.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init",
    "markdown": "# ReferenceError: can't access lexical declaration 'X' before initialization - JavaScript\n\nThe JavaScript exception \"can't access lexical declaration 'X' before initialization\" occurs when a lexical variable was accessed before it was initialized. This happens within any scope (global, module, function, or block) when [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) variables are accessed before the place where they are declared is executed.\n\n## [Message](#message)\n\nReferenceError: Cannot access 'X' before initialization (V8-based)\nReferenceError: can't access lexical declaration 'X' before initialization (Firefox)\nReferenceError: Cannot access uninitialized variable. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA lexical variable was accessed before it was initialized. This happens within any scope (global, module, function, or block) when variables declared with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) are accessed before the place where they are declared has been executed.\n\nNote that it is the execution order of access and variable declaration that matters, not the order in which the statements appear in the code. For more information, see the description of [Temporal Dead Zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz).\n\nThis issue does not occur for variables declared using `var`, because they are initialized with a default value of `undefined` when they are [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting).\n\nThis error can also occur in [cyclic imports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#cyclic_imports) when a module uses a variable that depends on the module itself being evaluated.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\nIn this case, the variable `foo` is accessed before it is declared. At this point foo has not been initialized with a value, so accessing the variable throws a reference error.\n\n```\nfunction test() {\n  // Accessing the 'const' variable foo before it's declared\n  console.log(foo); // ReferenceError: foo is not initialized\n  const foo = 33; // 'foo' is declared and initialized here using the 'const' keyword\n}\n\ntest();\n```\n\nIn this example, the imported variable `a` is accessed but is uninitialized, because the evaluation of `a.js` is blocked by the evaluation of the current module `b.js`.\n\n```\n// -- a.js (entry module) --\nimport { b } from \"./b.js\";\n\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nconsole.log(a); // ReferenceError: Cannot access 'a' before initialization\nexport const b = 1;\n```\n\n### [Valid cases](#valid_cases)\n\nIn the following example, we correctly declare a variable using the `const` keyword before accessing it.\n\n```\nfunction test() {\n  // Declaring variable foo\n  const foo = 33;\n  console.log(foo); // 33\n}\ntest();\n```\n\nIn this example, the imported variable `a` is asynchronously accessed, so both modules are evaluated before the access to `a` occurs.\n\n```\n// -- a.js (entry module) --\nimport { b } from \"./b.js\";\n\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nsetTimeout(() => {\n  console.log(a); // 2\n}, 10);\nexport const b = 1;\n```\n\n## [See also](#see_also)",
    "title": "ReferenceError: can't access lexical declaration 'X' before initialization - JavaScript | MDN",
    "description": "The JavaScript exception \"can't access lexical declaration 'X' before initialization\" occurs when a lexical variable was accessed before it was initialized.\n  This happens within any scope (global, module, function, or block) when let or const variables are accessed before the place where they are declared is executed.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_strict_arguments_eval",
    "markdown": "# SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code - JavaScript\n\nThe JavaScript [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\-only exception \"'arguments' can't be defined or assigned to in strict mode code\" or \"'eval' can't be defined or assigned to in strict mode code\" occurs when attempting to create a [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) called `arguments` or `eval`, or assign to such a name.\n\n## [Message](#message)\n\nSyntaxError: Unexpected eval or arguments in strict mode (V8-based)\nSyntaxError: 'arguments' can't be defined or assigned to in strict mode code (Firefox)\nSyntaxError: Cannot modify 'arguments' in strict mode. (Safari)\nSyntaxError: Cannot destructure to a parameter name 'arguments' in strict mode. (Safari)\nSyntaxError: Cannot declare a variable named arguments in strict mode. (Safari)\nSyntaxError: Cannot declare a catch variable named 'arguments' in strict mode. (Safari)\nSyntaxError: 'arguments' is not a valid function name in strict mode. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nIn strict mode, the names [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) and [`eval`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) behave as if they are [reserved words](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words): you cannot make they refer to anything other than the `arguments` object in functions or the global `eval` function.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n\"use strict\";\n\nconst arguments = [1, 2, 3];\nconsole.log(Math.max(...arguments));\n\nfunction foo(...arguments) {\n  console.log(arguments);\n}\n```\n\n### [Valid cases](#valid_cases)\n\n```\n\"use strict\";\n\nconst args = [1, 2, 3];\nconsole.log(Math.max(...args));\n\nfunction foo(...args) {\n  console.log(args);\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code - JavaScript | MDN",
    "description": "The JavaScript strict mode-only exception \"'arguments' can't be defined or assigned to in strict mode code\" or \"'eval' can't be defined or assigned to in strict mode code\" occurs when attempting to create a binding called arguments or eval, or assign to such a name.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_valid_code_point",
    "markdown": "# RangeError: argument is not a valid code point - JavaScript\n\nThe JavaScript exception \"Invalid code point\" occurs when [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint).\n\n## [Message](#message)\n\nRangeError: Invalid code point -1 (V8-based)\nRangeError: -1 is not a valid code point (Firefox)\nRangeError: Arguments contain a value that is out of range of code points (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\n[`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) throws this error when passed [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111).\n\nA [code point](https://en.wikipedia.org/wiki/Code_point) is a value in the Unicode codespace; that is, the range of integers from `0` to `0x10FFFF`.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nString.fromCodePoint(\"_\"); // RangeError\nString.fromCodePoint(Infinity); // RangeError\nString.fromCodePoint(-1); // RangeError\nString.fromCodePoint(3.14); // RangeError\nString.fromCodePoint(3e-2); // RangeError\nString.fromCodePoint(NaN); // RangeError\n```\n\n### [Valid cases](#valid_cases)\n\n```\nString.fromCodePoint(42); // \"*\"\nString.fromCodePoint(65, 90); // \"AZ\"\nString.fromCodePoint(0x404); // 'Є' (U+0404)\nString.fromCodePoint(0x2f804); // '你' (U+2F804)\nString.fromCodePoint(194564); // '你'\nString.fromCodePoint(0x1d306, 0x61, 0x1d307); // '𝌆a𝌇'\n```\n\n## [See also](#see_also)",
    "title": "RangeError: argument is not a valid code point - JavaScript | MDN",
    "description": "The JavaScript exception \"Invalid code point\" occurs when NaN values,\n  negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are\n  used with String.fromCodePoint().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero",
    "markdown": "# RangeError: BigInt division by zero - JavaScript\n\nThe JavaScript exception \"BigInt division by zero\" occurs when a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is divided by `0n`.\n\n## [Message](#message)\n\nRangeError: Division by zero (V8-based)\nRangeError: BigInt division by zero (Firefox)\nRangeError: 0 is an invalid divisor value. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe divisor of a [division](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division) or [remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder) operator is `0n`. In [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) arithmetic, this produces [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), but there's no \"infinity value\" in BigInts, so an error is issued. Check if the divisor is `0n` before doing the division.\n\n## [Examples](#examples)\n\n### [Division by 0n](#division_by_0n)\n\n```\nconst a = 1n;\nconst b = 0n;\nconst quotient = a / b;\n// RangeError: BigInt division by zero\n```\n\nInstead, check if the divisor is `0n` first, and either issue an error with a better message, or fallback to a different value, like `Infinity` or `undefined`.\n\n```\nconst a = 1n;\nconst b = 0n;\nconst quotient = b === 0n ? undefined : a / b;\n```\n\n## [See also](#see_also)",
    "title": "RangeError: BigInt division by zero - JavaScript | MDN",
    "description": "The JavaScript exception \"BigInt division by zero\" occurs when a BigInt is divided by 0n.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent",
    "markdown": "# RangeError: BigInt negative exponent - JavaScript\n\nThe JavaScript exception \"BigInt negative exponent\" occurs when a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is raised to the power of a negative BigInt value.\n\n## [Message](#message)\n\nRangeError: Exponent must be positive (V8-based)\nRangeError: BigInt negative exponent (Firefox)\nRangeError: Negative exponent is not allowed (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe exponent of an [exponentiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) operation must be positive. Since negative exponents would take the reciprocal of the base, the result will be between -1 and 1 in almost all cases, which gets rounded to `0n`. To catch mistakes, negative exponents are not allowed. Check if the exponent is non-negative before doing exponentiation.\n\n## [Examples](#examples)\n\n### [Using a negative BigInt as exponent](#using_a_negative_bigint_as_exponent)\n\n```\nconst a = 1n;\nconst b = -1n;\nconst c = a ** b;\n// RangeError: BigInt negative exponent\n```\n\nInstead, check if the exponent is negative first, and either issue an error with a better message, or fallback to a different value, like `0n` or `undefined`.\n\n```\nconst a = 1n;\nconst b = -1n;\nconst quotient = b >= 0n ? a ** b : 0n;\n```\n\n## [See also](#see_also)",
    "title": "RangeError: BigInt negative exponent - JavaScript | MDN",
    "description": "The JavaScript exception \"BigInt negative exponent\" occurs when a BigInt is raised to the power of a negative BigInt value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage",
    "markdown": "# ReferenceError: deprecated caller or arguments usage - JavaScript\n\nThe JavaScript [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\-only exception \"deprecated caller or arguments usage\" occurs when the deprecated [`Function.prototype.caller`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller) or [`Function.prototype.arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments) properties are used.\n\n## [Message](#message)\n\nTypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them (V8-based & Firefox)\nTypeError: 'arguments', 'callee', and 'caller' cannot be accessed in this context. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), the [`Function.prototype.caller`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller) or [`Function.prototype.arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments) properties are used and shouldn't be. They are deprecated, because they leak the function caller, are non-standard, hard to optimize and potentially a performance-harmful feature.\n\n## [Examples](#examples)\n\n### [Deprecated function.caller or arguments.callee](#deprecated_function.caller_or_arguments.callee)\n\n[`Function.prototype.caller`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller) and [`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) are deprecated (see the reference articles for more information).\n\n```\n\"use strict\";\n\nfunction myFunc() {\n  if (myFunc.caller === null) {\n    return \"The function was called from the top!\";\n  } else {\n    return `This function's caller was ${myFunc.caller}`;\n  }\n}\n\nmyFunc();\n// TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them\n```\n\n### [Function.prototype.arguments](#function.prototype.arguments)\n\n[`Function.prototype.arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments) is deprecated (see the reference article for more information).\n\n```\n\"use strict\";\n\nfunction f(n) {\n  g(n - 1);\n}\n\nfunction g(n) {\n  console.log(`before: ${g.arguments[0]}`);\n  if (n > 0) {\n    f(n);\n  }\n  console.log(`after: ${g.arguments[0]}`);\n}\n\nf(2);\n\nconsole.log(`returned: ${g.arguments}`);\n// TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them\n```\n\n## [See also](#see_also)",
    "title": "ReferenceError: deprecated caller or arguments usage - JavaScript | MDN",
    "description": "The JavaScript strict mode-only exception\n  \"deprecated caller or arguments usage\" occurs when the\n  deprecated Function.prototype.caller or Function.prototype.arguments properties\n  are used.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_non_simple_params",
    "markdown": "# SyntaxError: \"use strict\" not allowed in function with non-simple parameters - JavaScript\n\nThe JavaScript exception \"`\"use strict\"` not allowed in function\" occurs when a `\"use strict\"` directive is used at the top of a function with [default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), or [destructuring parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n## [Message](#message)\n\nSyntaxError: Illegal 'use strict' directive in function with non-simple parameter list (V8-based)\nSyntaxError: \"use strict\" not allowed in function with default parameter (Firefox)\nSyntaxError: \"use strict\" not allowed in function with rest parameter (Firefox)\nSyntaxError: \"use strict\" not allowed in function with destructuring parameter (Firefox)\nSyntaxError: 'use strict' directive not allowed inside a function with a non-simple parameter list. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA `\"use strict\"` directive is written at the top of a function that has one of the following parameters:\n\n*   [Default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)\n*   [Rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters)\n*   [Destructuring parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\nA `\"use strict\"` directive is not allowed at the top of such functions per the ECMAScript specification.\n\n## [Examples](#examples)\n\n### [Function statement](#function_statement)\n\nIn this case, the function `sum` has default parameters `a=1` and `b=2`:\n\n```\nfunction sum(a = 1, b = 2) {\n  // SyntaxError: \"use strict\" not allowed in function with default parameter\n  \"use strict\";\n  return a + b;\n}\n```\n\nIf the function should be in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), and the entire script or enclosing function is also okay to be in strict mode, you can move the `\"use strict\"` directive outside of the function:\n\n```\n\"use strict\";\nfunction sum(a = 1, b = 2) {\n  return a + b;\n}\n```\n\n### [Function expression](#function_expression)\n\nA function expression can use yet another workaround:\n\n```\nconst sum = function sum([a, b]) {\n  // SyntaxError: \"use strict\" not allowed in function with destructuring parameter\n  \"use strict\";\n  return a + b;\n};\n```\n\nThis can be converted to the following expression:\n\n```\nconst sum = (function () {\n  \"use strict\";\n  return function sum([a, b]) {\n    return a + b;\n  };\n})();\n```\n\n### [Arrow function](#arrow_function)\n\nIf an arrow function needs to access the `this` variable, you can use the arrow function as the enclosing function:\n\n```\nconst callback = (...args) => {\n  // SyntaxError: \"use strict\" not allowed in function with rest parameter\n  \"use strict\";\n  return this.run(args);\n};\n```\n\nThis can be converted to the following expression:\n\n```\nconst callback = (() => {\n  \"use strict\";\n  return (...args) => {\n    return this.run(args);\n  };\n})();\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: \"use strict\" not allowed in function with non-simple parameters - JavaScript | MDN",
    "description": "The JavaScript exception \"\"use strict\" not allowed in function\" occurs\n  when a \"use strict\" directive is used at the top of a function with\n  default parameters,\n  rest parameters, or\n  destructuring parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Form_must_be_one_of",
    "markdown": "# RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD' - JavaScript\n\nThe JavaScript exception \"form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD'\" occurs when an unrecognized string is passed to the [`String.prototype.normalize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) method.\n\n## [Message](#message)\n\nRangeError: The normalization form should be one of NFC, NFD, NFKC, NFKD. (V8-based)\nRangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD' (Firefox)\nRangeError: argument does not match any normalization form (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [`String.prototype.normalize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) method only accepts the following four values as its `form` argument: `\"NFC\"`, `\"NFD\"`, `\"NFKC\"`, or `\"NFKD\"`. If you pass any other value, an error will be thrown. Read the reference of `normalize()` to learn about different normalization forms.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n\"foo\".normalize(\"nfc\"); // RangeError\n\"foo\".normalize(\" NFC \"); // RangeError\n```\n\n### [Valid cases](#valid_cases)\n\n```\n\"foo\".normalize(\"NFC\"); // 'foo'\n```\n\n## [See also](#see_also)",
    "title": "RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD' - JavaScript | MDN",
    "description": "The JavaScript exception \"form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD'\" occurs when an unrecognized string is passed to the String.prototype.normalize() method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_literal",
    "markdown": "# SyntaxError: \"0\"-prefixed octal literals are deprecated - JavaScript\n\nThe JavaScript [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\-only exception \"0-prefixed octal literals are deprecated; use the \"0o\" prefix instead\" occurs when deprecated octal literals (`0` followed by digits) are used.\n\n## [Message](#message)\n\nSyntaxError: Octal literals are not allowed in strict mode. (V8-based)\nSyntaxError: Decimals with leading zeros are not allowed in strict mode. (V8-based)\nSyntaxError: Unexpected number (V8-based)\nSyntaxError: \"0\"-prefixed octal literals are deprecated; use the \"0o\" prefix instead (Firefox)\nSyntaxError: Decimal integer literals with a leading zero are forbidden in strict mode (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nOctal literals are deprecated. When you prefix a decimal integer with `0`, you actually change it to an octal literal, which may be surprising. The standardized syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"O\" (`0o` or `0O`).\n\nLeading zeros are always forbidden, even when the literal is not valid octal literal syntax (such as when the literal contains the digits `8` or `9`, or it has a decimal point). A number literal may only start with `0` if that 0 is its units place.\n\n## [Examples](#examples)\n\n### [\"0\"-prefixed octal literals](#0-prefixed_octal_literals)\n\n```\n\"use strict\";\n\n03;\n\n// SyntaxError: \"0\"-prefixed octal literals are deprecated; use the \"0o\" prefix instead\n```\n\n### [Valid octal numbers](#valid_octal_numbers)\n\nUse a leading zero followed by the letter \"o\" or \"O\":\n\n## [See also](#see_also)",
    "title": "SyntaxError: \"0\"-prefixed octal literals are deprecated - JavaScript | MDN",
    "description": "The JavaScript strict mode-only exception \"0-prefixed octal literals are deprecated; use the \"0o\" prefix instead\" occurs when deprecated octal literals (0 followed by digits) are used.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier",
    "markdown": "# SyntaxError: \"x\" is a reserved identifier - JavaScript\n\nThe JavaScript exception \"_variable_ is a reserved identifier\" occurs when [reserved keywords](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords) are used as identifiers.\n\n## [Message](#message)\n\nSyntaxError: Unexpected reserved word (V8-based)\nSyntaxError: implements is a reserved identifier (Firefox)\nSyntaxError: Cannot use the reserved word 'implements' as a variable name. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\n[Reserved keywords](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords) will throw in if they are used as identifiers. These are reserved in strict mode and sloppy mode:\n\n*   `enum`\n\nThe following are only reserved when they are found in strict mode code:\n\n*   `implements`\n*   `interface`\n*   [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n*   `package`\n*   `private`\n*   `protected`\n*   `public`\n*   `static`\n\n## [Examples](#examples)\n\n### [Strict and non-strict reserved keywords](#strict_and_non-strict_reserved_keywords)\n\nThe `enum` identifier is generally reserved.\n\n```\nconst enum = { RED: 0, GREEN: 1, BLUE: 2 };\n// SyntaxError: enum is a reserved identifier\n```\n\nIn strict mode code, more identifiers are reserved.\n\n```\n\"use strict\";\nconst package = [\"potatoes\", \"rice\", \"fries\"];\n// SyntaxError: package is a reserved identifier\n```\n\nYou'll need to rename these variables.\n\n```\nconst colorEnum = { RED: 0, GREEN: 1, BLUE: 2 };\nconst list = [\"potatoes\", \"rice\", \"fries\"];\n```\n\n### [Update older browsers](#update_older_browsers)\n\nIf you are using an older browser that does not yet implement [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class), for example, you should update to a more recent browser version that does support these new language features.\n\n```\n\"use strict\";\nclass DocArchiver {}\n\n// SyntaxError: class is a reserved identifier\n// (throws in older browsers only, e.g. Firefox 44 and older)\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: \"x\" is a reserved identifier - JavaScript | MDN",
    "description": "The JavaScript exception \"variable is a reserved identifier\" occurs\n  when reserved keywords are used as identifiers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range",
    "markdown": "# RangeError: precision is out of range - JavaScript\n\nThe JavaScript exception \"precision is out of range\" occurs when a number that's outside of the allowed range was passed into `toExponential`, `toFixed`, or `toPrecision`.\n\n## [Message](#message)\n\nRangeError: toExponential() argument must be between 0 and 100 (V8-based & Safari)\nRangeError: toFixed() digits argument must be between 0 and 100 (V8-based & Safari)\nRangeError: toPrecision() argument must be between 1 and 100 (V8-based & Safari)\nRangeError: precision -1 out of range (Firefox)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere was an out of range precision argument in one of these methods:\n\n*   [`Number.prototype.toExponential()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential), which requires the arguments to be between 0 and 100, inclusive.\n*   [`Number.prototype.toFixed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed), which requires the arguments to be between 0 and 100, inclusive.\n*   [`Number.prototype.toPrecision()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision), which requires the arguments to be between 1 and 100, inclusive.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n(77.1234).toExponential(-1); // RangeError\n(77.1234).toExponential(101); // RangeError\n\n(2.34).toFixed(-100); // RangeError\n(2.34).toFixed(1001); // RangeError\n\n(1234.5).toPrecision(-1); // RangeError\n(1234.5).toPrecision(101); // RangeError\n```\n\n### [Valid cases](#valid_cases)\n\n```\n(77.1234).toExponential(4); // 7.7123e+1\n(77.1234).toExponential(2); // 7.71e+1\n\n(2.34).toFixed(1); // 2.3\n(2.35).toFixed(1); // 2.4 (note that it rounds up in this case)\n\n(5.123456).toPrecision(5); // 5.1235\n(5.123456).toPrecision(2); // 5.1\n(5.123456).toPrecision(1); // 5\n```\n\n## [See also](#see_also)",
    "title": "RangeError: precision is out of range - JavaScript | MDN",
    "description": "The JavaScript exception \"precision is out of range\" occurs when a number that's\n  outside of the allowed range was passed into toExponential, toFixed, or toPrecision.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode",
    "markdown": "# SyntaxError: applying the 'delete' operator to an unqualified name is deprecated - JavaScript\n\nThe JavaScript [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\-only exception \"applying the 'delete' operator to an unqualified name is deprecated\" occurs when variables are attempted to be deleted using the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator.\n\n## [Message](#message)\n\nSyntaxError: Delete of an unqualified identifier in strict mode. (V8-based)\nSyntaxError: applying the 'delete' operator to an unqualified name is deprecated (Firefox)\nSyntaxError: Cannot delete unqualified property 'a' in strict mode. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nNormal variables in JavaScript can't be deleted using the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator. In strict mode, an attempt to delete a variable will throw an error and is not allowed.\n\nThe `delete` operator can only delete properties on an object. Object properties are \"qualified\" if they are configurable.\n\nUnlike what common belief suggests, the `delete` operator has **nothing** to do with directly freeing memory. Memory management is done indirectly via breaking references, see the [memory management](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management) page and the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator page for more details.\n\nThis error only happens in [strict mode code](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). In non-strict code, the operation just returns `false`.\n\n## [Examples](#examples)\n\n### [Freeing the contents of a variable](#freeing_the_contents_of_a_variable)\n\nAttempting to delete a plain variable throws an error in strict mode:\n\n```\n\"use strict\";\n\nvar x;\n\n// …\n\ndelete x;\n\n// SyntaxError: applying the 'delete' operator to an unqualified name\n// is deprecated\n```\n\nTo free the contents of a variable, you can set it to [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null):\n\n```\n\"use strict\";\n\nvar x;\n\n// …\n\nx = null;\n\n// x can be garbage collected\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: applying the 'delete' operator to an unqualified name is deprecated - JavaScript | MDN",
    "description": "The JavaScript strict mode-only exception \"applying the 'delete' operator to an unqualified name is deprecated\" occurs when variables are attempted to be deleted using the delete operator.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Arguments_not_allowed",
    "markdown": "# SyntaxError: arguments is not valid in fields - JavaScript\n\nThe JavaScript exception \"SyntaxError: arguments is not valid in fields\" occurs when the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) identifier is read in a class field initializer or in a static initialization block, outside of a non-[arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\n## [Message](#message)\n\nSyntaxError: 'arguments' is not allowed in class field initializer or static initialization block (V8-based)\nSyntaxError: arguments is not valid in fields (Firefox)\nSyntaxError: Unexpected identifier 'arguments'. Cannot reference 'arguments' in class field initializer. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA class field initializer expression or a class static initialization block does not have `arguments` in its scope. Trying to access it is a syntax error.\n\n*   This is true even if `arguments` is bound in a parent scope (such as when the class is nested in a non-arrow function).\n*   A non-arrow function declared within this scope will still bind its own `arguments` and read it normally.\n\n## [Examples](#examples)\n\n```\nfunction makeOne() {\n  class C {\n    args = { ...arguments }; // SyntaxError: arguments is not valid in fields\n  }\n  return new C();\n}\n```\n\n```\nlet CArgs;\nclass C {\n  static {\n    CArgs = arguments; // SyntaxError: arguments is not valid in fields\n  }\n}\n```\n\n```\nclass C {\n  args = {};\n  constructor() {\n    this.args = arguments; // You can use arguments in constructors\n  }\n  myMethod() {\n    this.args = arguments; // You can also use it in methods\n  }\n}\n```\n\n```\nfunction makeOne() {\n  const _arguments = arguments;\n  class C {\n    args = { ..._arguments }; // Only the identifier is forbidden\n  }\n  return new C();\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: arguments is not valid in fields - JavaScript | MDN",
    "description": "The JavaScript exception \"SyntaxError: arguments is not valid in fields\" occurs when the arguments identifier is read in a class field initializer or in a static initialization block, outside of a non-arrow function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix",
    "markdown": "# RangeError: radix must be an integer - JavaScript\n\nThe JavaScript exception \"radix must be an integer at least 2 and no greater than 36\" occurs when the optional `radix` parameter of the [`Number.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) or the [`BigInt.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString) method was specified and is not between 2 and 36.\n\n## [Message](#message)\n\nRangeError: toString() radix argument must be between 2 and 36 (V8-based & Safari)\nRangeError: radix must be an integer at least 2 and no greater than 36 (Firefox)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe optional `radix` parameter of the [`Number.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) or the [`BigInt.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString) method was specified. Its value must be an integer (a number) between 2 and 36, specifying the base of the number system to be used for representing numeric values. For example, the decimal (base 10) number 169 is represented in hexadecimal (base 16) as A9.\n\nWhy is this parameter's value limited to 36? A radix that is larger than 10 uses alphabetical characters as digits; therefore, the radix can't be larger than 36, since the Latin alphabet (used by English and many other languages) only has 26 characters.\n\nThe most common radixes:\n\n*   2 for [binary numbers](https://en.wikipedia.org/wiki/Binary_number),\n*   8 for [octal numbers](https://en.wikipedia.org/wiki/Octal),\n*   10 for [decimal numbers](https://en.wikipedia.org/wiki/Decimal),\n*   16 for [hexadecimal numbers](https://en.wikipedia.org/wiki/Hexadecimal).\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n(42).toString(0);\n(42).toString(1);\n(42).toString(37);\n(42).toString(150);\n// You cannot use a string like this for formatting:\n(12071989).toString(\"MM-dd-yyyy\");\n```\n\n### [Valid cases](#valid_cases)\n\n```\n(42).toString(2); // \"101010\" (binary)\n(13).toString(8); // \"15\" (octal)\n(0x42).toString(10); // \"66\" (decimal)\n(100000).toString(16); // \"186a0\" (hexadecimal)\n```\n\n## [See also](#see_also)",
    "title": "RangeError: radix must be an integer - JavaScript | MDN",
    "description": "The JavaScript exception \"radix must be an integer at least 2 and no greater than 36\"\n  occurs when the optional radix parameter of the\n  Number.prototype.toString() or\n  the BigInt.prototype.toString() method was specified and is not between 2\n  and 36.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date",
    "markdown": "# RangeError: invalid date - JavaScript\n\nThe JavaScript exception \"invalid date\" occurs when an invalid date is attempted to be converted to an ISO date string.\n\n## [Message](#message)\n\nRangeError: Invalid time value (V8-based)\nRangeError: invalid date (Firefox)\nRangeError: Invalid Date (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nYou are converting an [invalid date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) value to an ISO date string. This usually happens in one of three ways:\n\n*   Calling the [`toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString) method\n*   Calling the [`toJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON) method, which implicitly calls `toISOString`\n*   Using [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) to stringify the date, which implicitly calls `toJSON`\n\nAn _invalid date_ is produced when you attempt to parse an invalid date string, or set the timestamp to an out-of-bounds value. Invalid dates usually cause all date methods to return [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) or other special values. However, such dates do not have valid ISO string representations, so an error is thrown when you attempt to do so.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nconst invalid = new Date(\"nothing\");\ninvalid.toISOString(); // RangeError: invalid date\ninvalid.toJSON(); // RangeError: invalid date\nJSON.stringify({ date: invalid }); // RangeError: invalid date\n```\n\nHowever, most other methods return special values:\n\n```\ninvalid.toString(); // \"Invalid Date\"\ninvalid.getDate(); // NaN\n```\n\nFor more details, see the [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse) documentation.\n\n### [Valid cases](#valid_cases)\n\n```\nnew Date(\"05 October 2011 14:48 UTC\").toISOString(); // \"2011-10-05T14:48:00.000Z\"\nnew Date(1317826080).toISOString(); // \"2011-10-05T14:48:00.000Z\"\n```\n\n## [See also](#see_also)",
    "title": "RangeError: invalid date - JavaScript | MDN",
    "description": "The JavaScript exception \"invalid date\" occurs when an invalid date is attempted to be converted to an ISO date string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_await",
    "markdown": "# SyntaxError: await is only valid in async functions, async generators and modules - JavaScript\n\nThe JavaScript exception \"await is only valid in async functions, async generators and modules\" occurs when an [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) expression is used outside of [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) or [modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) or other async contexts.\n\n## [Message](#message)\n\nSyntaxError: await is only valid in async functions and the top level bodies of modules (V8-based)\nSyntaxError: await is only valid in async functions, async generators and modules (Firefox)\nSyntaxError: Unexpected identifier (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nJavaScript execution is never blocking: an `await` can never block the execution of the program. Instead, it pauses the execution of the surrounding async task, while allowing other tasks to continue running. Therefore, `await` cannot be used in sync tasks, such as functions, generator functions, or top level of scripts. It is not always apparent whether the current file is a script or a module — see the [Modules guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#top_level_await) for more information.\n\n## [Examples](#examples)\n\n### [Top-level await](#top-level_await)\n\nYou cannot use `await` at the top level of a script:\n\n```\n<script>\n  await fetch(\"https://example.com\");\n  // SyntaxError: await is only valid in async functions, async generators and modules\n</script>\n```\n\nInstead, make the script a module:\n\n```\n<script type=\"module\">\n  await fetch(\"https://example.com\");\n</script>\n```\n\n### [Async callbacks](#async_callbacks)\n\nYou cannot use `await` in a sync callback:\n\n```\nurls.forEach((url) => {\n  await fetch(url);\n  // SyntaxError: await is only valid in async functions, async generators and modules\n});\n```\n\nInstead, make the callback async. See more explanation in the [Using promises guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#composition).\n\n```\nPromise.all(\n  urls.map(async (url) => {\n    await fetch(url);\n  }),\n);\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: await is only valid in async functions, async generators and modules - JavaScript | MDN",
    "description": "The JavaScript exception \"await is only valid in async functions, async generators and modules\" occurs when an await expression is used outside of async functions or modules or other async contexts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length",
    "markdown": "# RangeError: invalid array length - JavaScript\n\nThe JavaScript exception \"Invalid array length\" occurs when specifying an array length that is either negative, a floating number or exceeds the maximum supported by the platform (i.e. when creating an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), or when setting the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property).\n\nThe maximum allowed array length depends on the platform, browser and browser version. For [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) the maximum length is 232\\-1. For [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) the maximum is 231\\-1 (2GiB-1) on 32-bit systems. From Firefox version 89 the maximum value of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is 233 (8GiB) on 64-bit systems.\n\n**Note:** `Array` and `ArrayBuffer` are independent data structures (the implementation of one does not affect the other).\n\n## [Message](#message)\n\nRangeError: invalid array length (V8-based & Firefox)\nRangeError: Array size is not a small enough positive integer. (Safari)\n\nRangeError: Invalid array buffer length (V8-based)\nRangeError: length too large (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe error might appear when attempting to produce an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) with an invalid length, which includes:\n\n*   Negative length, via the constructor or setting the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property.\n*   Non-integer length, via the constructor or setting the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property. (The `ArrayBuffer` constructor coerces the length to an integer, but the `Array` constructor does not.)\n*   Exceeding the maximum length supported by the platform. For arrays, the maximum length is 232\\-1. For `ArrayBuffer`, the maximum length is 231\\-1 (2GiB-1) on 32-bit systems, or 233 (8GiB) on 64-bit systems. This can happen via the constructor, setting the `length` property, or array methods that implicitly set the length property (such as [`push`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) and [`concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)).\n\nIf you are creating an `Array` using the constructor, you probably want to use the literal notation instead, as the first argument is interpreted as the length of the `Array`. Otherwise, you might want to clamp the length before setting the length property, or using it as argument of the constructor.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nnew Array(Math.pow(2, 40));\nnew Array(-1);\nnew ArrayBuffer(Math.pow(2, 32)); // 32-bit system\nnew ArrayBuffer(-1);\n\nconst a = [];\na.length = a.length - 1; // set the length property to -1\n\nconst b = new Array(Math.pow(2, 32) - 1);\nb.length = b.length + 1; // set the length property to 2^32\nb.length = 2.5; // set the length property to a floating-point number\n\nconst c = new Array(2.5); // pass a floating-point number\n\n// Concurrent modification that accidentally grows the array infinitely\nconst arr = [1, 2, 3];\nfor (const e of arr) {\n  arr.push(e * 10);\n}\n```\n\n### [Valid cases](#valid_cases)\n\n```\n[Math.pow(2, 40)]; // [ 1099511627776 ]\n[-1]; // [ -1 ]\nnew ArrayBuffer(Math.pow(2, 31) - 1);\nnew ArrayBuffer(Math.pow(2, 33)); // 64-bit systems after Firefox 89\nnew ArrayBuffer(0);\n\nconst a = [];\na.length = Math.max(0, a.length - 1);\n\nconst b = new Array(Math.pow(2, 32) - 1);\nb.length = Math.min(0xffffffff, b.length + 1);\n// 0xffffffff is the hexadecimal notation for 2^32 - 1\n// which can also be written as (-1 >>> 0)\n\nb.length = 3;\n\nconst c = new Array(3);\n\n// Because array methods save the length before iterating, it is safe to grow\n// the array during iteration\nconst arr = [1, 2, 3];\narr.forEach((e) => arr.push(e * 10));\n```\n\n## [See also](#see_also)",
    "title": "RangeError: invalid array length - JavaScript | MDN",
    "description": "The JavaScript exception \"Invalid array length\" occurs when specifying an array length that is either negative, a floating number or exceeds the maximum supported by the platform (i.e. when creating an Array or ArrayBuffer, or when setting the length property).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large",
    "markdown": "# RangeError: repeat count must be less than infinity - JavaScript\n\nThe JavaScript exception \"repeat count must be less than infinity\" occurs when the [`String.prototype.repeat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat) method is used with a `count` argument that is infinity.\n\n## [Message](#message)\n\nRangeError: Invalid string length (V8-based)\nRangeError: Invalid count value: Infinity (V8-based)\nRangeError: repeat count must be less than infinity and not overflow maximum string size (Firefox)\nRangeError: Out of memory (Safari)\nRangeError: String.prototype.repeat argument must be greater than or equal to 0 and not be Infinity (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [`String.prototype.repeat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat) method has been used. It has a `count` parameter indicating the number of times to repeat the string. It must be between 0 and less than positive [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) and cannot be a negative number. The range of allowed values can be described like this: \\[0, +∞).\n\nThe resulting string can also not be larger than the maximum string size, which can differ in JavaScript engines. In Firefox (SpiderMonkey) the maximum string size is 230 - 2 (~2GiB).\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n\"abc\".repeat(Infinity); // RangeError\n\"a\".repeat(2 ** 30); // RangeError\n```\n\n### [Valid cases](#valid_cases)\n\n```\n\"abc\".repeat(0); // ''\n\"abc\".repeat(1); // 'abc'\n\"abc\".repeat(2); // 'abcabc'\n\"abc\".repeat(3.5); // 'abcabcabc' (count will be converted to integer)\n```\n\n## [See also](#see_also)",
    "title": "RangeError: repeat count must be less than infinity - JavaScript | MDN",
    "description": "The JavaScript exception \"repeat count must be less than infinity\" occurs when the\n  String.prototype.repeat() method is used with a count\n  argument that is infinity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_continue",
    "markdown": "# SyntaxError: continue must be inside loop - JavaScript\n\nThe JavaScript exception \"continue must be inside loop\" occurs when a [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) statement is not inside a loop statement.\n\n## [Message](#message)\n\nSyntaxError: Illegal continue statement: no surrounding iteration statement (V8-based)\nSyntaxError: Illegal continue statement: 'label' does not denote an iteration statement (V8-based)\nSyntaxError: continue must be inside loop (Firefox)\nSyntaxError: 'continue' is only valid inside a loop statement. (Safari)\nSyntaxError: Cannot continue to the label 'label' as it is not targeting a loop. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\n[`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) statements can be used to continue a loop, and using them elsewhere is a syntax error. Alternatively, you can provide a [label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) to the `continue` statement to continue any loop with that label — however, if the label does not reference a containing statement, another error [SyntaxError: label not found](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Label_not_found) will be thrown, and if the label references a statement that is not a loop, a syntax error is still thrown.\n\n## [Examples](#examples)\n\n### [Using continue in callbacks](#using_continue_in_callbacks)\n\nIf you want to proceed with the next iteration in a [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) loop, use [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) instead, or convert it to a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.\n\n```\narray.forEach((value) => {\n  if (value === 5) {\n    continue; // SyntaxError: continue must be inside loop\n  }\n  // do something with value\n});\n```\n\n```\narray.forEach((value) => {\n  if (value === 5) {\n    return;\n  }\n  // do something with value\n});\n```\n\n```\nfor (const value of array) {\n  if (value === 5) {\n    continue;\n  }\n  // do something with value\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: continue must be inside loop - JavaScript | MDN",
    "description": "The JavaScript exception \"continue must be inside loop\" occurs when a continue statement is not inside a loop statement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count",
    "markdown": "# RangeError: repeat count must be non-negative - JavaScript\n\nThe JavaScript exception \"repeat count must be non-negative\" occurs when the [`String.prototype.repeat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat) method is used with a `count` argument that is a negative number.\n\n## [Message](#message)\n\nRangeError: Invalid count value: -1 (V8-based)\nRangeError: repeat count must be non-negative (Firefox)\nRangeError: String.prototype.repeat argument must be greater than or equal to 0 and not be Infinity (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [`String.prototype.repeat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat) method has been used. It has a `count` parameter indicating the number of times to repeat the string. It must be between 0 and less than positive [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) and cannot be a negative number. The range of allowed values can be described like this: \\[0, +∞).\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n\"abc\".repeat(-1); // RangeError\n```\n\n### [Valid cases](#valid_cases)\n\n```\n\"abc\".repeat(0); // ''\n\"abc\".repeat(1); // 'abc'\n\"abc\".repeat(2); // 'abcabc'\n\"abc\".repeat(3.5); // 'abcabcabc' (count will be converted to integer)\n```\n\n## [See also](#see_also)",
    "title": "RangeError: repeat count must be non-negative - JavaScript | MDN",
    "description": "The JavaScript exception \"repeat count must be non-negative\" occurs when the\n  String.prototype.repeat() method is used with a count\n  argument that is a negative number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/await_yield_in_parameter",
    "markdown": "# SyntaxError: await/yield expression can't be used in parameter - JavaScript\n\nThe JavaScript exception \"await expression can't be used in parameter\" or \"yield expression can't be used in parameter\" occurs when the [default parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) expression contains the [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) or [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) keyword and has the effect of pausing default parameter evaluation.\n\n## [Message](#message)\n\nSyntaxError: Illegal await-expression in formal parameters of async function (V8-based)\nSyntaxError: await expression can't be used in parameter (Firefox)\nSyntaxError: Cannot use 'await' within a parameter default expression. (Safari)\n\nSyntaxError: Yield expression not allowed in formal parameter (V8-based)\nSyntaxError: yield expression can't be used in parameter (Firefox)\nSyntaxError: Unexpected keyword 'yield'. Cannot use yield expression within parameters. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe default expression must be able to evaluate _synchronously_. If it contains an `await` or `yield` expression, it will pause the evaluation of the default expression, which is not allowed.\n\n**Note:** This error is only generated when `await` or `yield` are valid operators in this function context. Otherwise, `await` or `yield` would be parsed as an identifier, and either not cause an error, or cause an error like \"reserved identifier\", or \"unexpected token\" if there's an expression following it.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nfunction *gen(a = yield 1) {}\n\nasync function f(a = await Promise.resolve(1)) {}\n```\n\n### [Valid cases](#valid_cases)\n\nYou can use the [nullish coalescing assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment) to provide a default value instead. If you want to treat `null` and `undefined` differently, you would need to use a condition.\n\n```\nfunction* gen(a) {\n  a ??= yield 1;\n}\n\nasync function f(a) {\n  a ??= await Promise.resolve(1);\n}\n```\n\nYou are also allowed to use `await` or `yield` if the expression is contained in a function expression of the initializer and would not pause the evaluation of the default expression.\n\n```\nasync function f(a = (async () => await Promise.resolve(1))()) {}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: await/yield expression can't be used in parameter - JavaScript | MDN",
    "description": "The JavaScript exception \"await expression can't be used in parameter\" or \"yield expression can't be used in parameter\" occurs when the default parameter expression contains the await or yield keyword and has the effect of pausing default parameter evaluation.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer",
    "markdown": "# SyntaxError: a declaration in the head of a for-of loop can't have an initializer - JavaScript\n\nThe JavaScript exception \"a declaration in the head of a for-of loop can't have an initializer\" occurs when the head of a [for...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop contains an initializer expression such as `for (const i = 0 of iterable)`. This is not allowed in for-of loops.\n\n## [Message](#message)\n\nSyntaxError: for-of loop variable declaration may not have an initializer. (V8-based)\nSyntaxError: a declaration in the head of a for-of loop can't have an initializer (Firefox)\nSyntaxError: Cannot assign to the loop variable inside a for-of loop header. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe head of a [for...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop contains an initializer expression. That is, a variable is declared and assigned a value `for (const i = 0 of iterable)`. This is not allowed in for-of loops. You might want a [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop that does allow an initializer.\n\n## [Examples](#examples)\n\n### [Invalid for-of loop](#invalid_for-of_loop)\n\n```\nconst iterable = [10, 20, 30];\n\nfor (const value = 50 of iterable) {\n  console.log(value);\n}\n\n// SyntaxError: a declaration in the head of a for-of loop can't\n// have an initializer\n```\n\n### [Valid for-of loop](#valid_for-of_loop)\n\nYou need to remove the initializer (`value = 50`) in the head of the `for-of` loop. Maybe you intended to make 50 an offset value, in that case you could add it to the loop body, for example.\n\n```\nconst iterable = [10, 20, 30];\n\nfor (let value of iterable) {\n  value += 50;\n  console.log(value);\n}\n// 60\n// 70\n// 80\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: a declaration in the head of a for-of loop can't have an initializer - JavaScript | MDN",
    "description": "The JavaScript exception \"a declaration in the head of a for-of loop can't have an initializer\" occurs when the head of a for...of loop contains an initializer expression such as for (const i = 0 of iterable). This is not allowed in for-of loops.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized",
    "markdown": "# SyntaxError: cannot use \\`??\\` unparenthesized within \\`||\\` and \\`&&\\` expressions - JavaScript\n\nThe JavaScript exception \"cannot use `??` unparenthesized within `||` and `&&` expressions\" occurs when an [nullish coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) is used with a [logical OR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR) or [logical AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND) in the same expression without parentheses.\n\n## [Message](#message)\n\nSyntaxError: Unexpected token '??' (V8-based)\nSyntaxError: cannot use \\`??\\` unparenthesized within \\`||\\` and \\`&&\\` expressions (Firefox)\nSyntaxError: Unexpected token '??'. Coalescing and logical operators used together in the same expression; parentheses must be used to disambiguate. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) chain looks like this:\n\n|   >   &&   >   ||   >   =\n|   >   ??   >   =\n\nHowever, the precedence _between_ `??` and `&&`/`||` is intentionally undefined, because the short circuiting behavior of logical operators can make the expression's evaluation counter-intuitive. Therefore, the following combinations are all syntax errors, because the language doesn't know how to parenthesize the operands:\n\n```\na ?? b || c;\na || b ?? c;\na ?? b && c;\na && b ?? c;\n```\n\nInstead, make your intent clear by parenthesizing either side explicitly:\n\n```\n(a ?? b) || c;\na ?? (b && c);\n```\n\n## [Examples](#examples)\n\nWhen migrating legacy code that uses `||` and `&&` for guarding against `null` or `undefined`, you may often convert it partially:\n\n```\nfunction getId(user, fallback) {\n  // Previously: user && user.id || fallback\n  return user && user.id ?? fallback; // SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions\n}\n```\n\nInstead, consider parenthesizing the `&&`:\n\n```\nfunction getId(user, fallback) {\n  return (user && user.id) ?? fallback;\n}\n```\n\nEven better, consider using [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) instead of `&&`:\n\n```\nfunction getId(user, fallback) {\n  return user?.id ?? fallback;\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions - JavaScript | MDN",
    "description": "The JavaScript exception \"cannot use ?? unparenthesized within || and && expressions\" occurs when an nullish coalescing operator is used with a logical OR or logical AND in the same expression without parentheses.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement",
    "markdown": "# SyntaxError: function statement requires a name - JavaScript\n\nThe JavaScript exception \"function statement requires a name\" occurs when there is a [function statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) in the code that requires a name.\n\n## [Message](#message)\n\nSyntaxError: Function statements require a function name (V8-based)\nSyntaxError: function statement requires a name (Firefox)\nSyntaxError: Function statements must have a name. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is a [function statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE), or if the function code is placed correctly in this context at all.\n\n## [Examples](#examples)\n\n### [Statements vs. expressions](#statements_vs._expressions)\n\nA _[function statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)_ (or _function declaration_) requires a name. This won't work:\n\n```\nfunction () {\n  return \"Hello world\";\n}\n// SyntaxError: function statement requires a name\n```\n\nYou can use a [function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) (assignment) instead:\n\n```\nconst greet = function () {\n  return \"Hello world\";\n};\n```\n\nIf your function is intended to be an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression) (Immediately Invoked Function Expression, which is a function that runs as soon as it is defined) you will need to add a few more braces:\n\n```\n(function () {\n  // …\n})();\n```\n\n### [Labeled functions](#labeled_functions)\n\n[Labels](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) are an entirely different feature from function names. You can't use a label as a function name.\n\n```\nfunction Greeter() {\n  german: function () {\n    return \"Moin\";\n  }\n}\n// SyntaxError: function statement requires a name\n```\n\nIn addition, labeled function declarations themselves are a deprecated feature. Use regular function declarations instead.\n\n```\nfunction Greeter() {\n  function german() {\n    return \"Moin\";\n  }\n}\n```\n\n### [Object methods](#object_methods)\n\nIf you intended to create a method of an object, you will need to create an object. The following syntax without a name after the `function` keyword is valid then.\n\n```\nconst greeter = {\n  german: function () {\n    return \"Moin\";\n  },\n};\n```\n\nYou can also use the [method syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions).\n\n```\nconst greeter = {\n  german() {\n    return \"Moin\";\n  },\n};\n```\n\n### [Callback syntax](#callback_syntax)\n\nAlso, check your syntax when using callbacks. Braces and commas can quickly get confusing.\n\n```\npromise.then(\n  function () {\n    console.log(\"success\");\n  });\n  function () {\n    console.log(\"error\");\n}\n// SyntaxError: function statement requires a name\n```\n\nCorrect would be:\n\n```\npromise.then(\n  function () {\n    console.log(\"success\");\n  },\n  function () {\n    console.log(\"error\");\n  },\n);\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: function statement requires a name - JavaScript | MDN",
    "description": "The JavaScript exception \"function statement requires a name\" occurs\n  when there is a function statement\n  in the code that requires a name.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer",
    "markdown": "# SyntaxError: for-in loop head declarations may not have initializers - JavaScript\n\nThe JavaScript [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\-only exception \"for-in loop head declarations may not have initializers\" occurs when the head of a [for...in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) contains an initializer expression, such as `for (var i = 0 in obj)`. This is not allowed in for-in loops in strict mode. In addition, lexical declarations with initializers like `for (const i = 0 in obj)` are not allowed outside strict mode either.\n\n## [Message](#message)\n\nSyntaxError: for-in loop variable declaration may not have an initializer. (V8-based)\nSyntaxError: for-in loop head declarations may not have initializers (Firefox)\nSyntaxError: a lexical declaration in the head of a for-in loop can't have an initializer (Firefox)\nSyntaxError: Cannot assign to the loop variable inside a for-in loop header. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe head of a [for...in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop contains an initializer expression. That is, a variable is declared and assigned a value `for (var i = 0 in obj)`. In non-strict mode, this head declaration is silently ignored and behaves like `for (var i in obj)`. In [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), however, a `SyntaxError` is thrown. In addition, lexical declarations with initializers like `for (const i = 0 in obj)` are not allowed outside strict mode either, and will always produce a `SyntaxError`.\n\n## [Examples](#examples)\n\nThis example throws a `SyntaxError`:\n\n```\nconst obj = { a: 1, b: 2, c: 3 };\n\nfor (const i = 0 in obj) {\n  console.log(obj[i]);\n}\n\n// SyntaxError: for-in loop head declarations may not have initializers\n```\n\n### [Valid for-in loop](#valid_for-in_loop)\n\nYou can remove the initializer (`i = 0`) in the head of the for-in loop.\n\n```\nconst obj = { a: 1, b: 2, c: 3 };\n\nfor (const i in obj) {\n  console.log(obj[i]);\n}\n```\n\n### [Array iteration](#array_iteration)\n\nThe for...in loop [shouldn't be used for Array iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in#array_iteration_and_for...in). Did you intend to use a [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop instead of a `for-in` loop to iterate an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)? The `for` loop allows you to set an initializer then as well:\n\n```\nconst arr = [\"a\", \"b\", \"c\"];\n\nfor (let i = 2; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n\n// \"c\"\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: for-in loop head declarations may not have initializers - JavaScript | MDN",
    "description": "The JavaScript strict mode-only exception\n  \"for-in loop head declarations may not have initializers\"\n  occurs when the head of a for...in contains\n  an initializer expression, such as for (var i = 0 in obj). This is not\n  allowed in for-in loops in strict mode. In addition, lexical declarations with initializers like for (const i = 0 in obj) are not allowed outside strict mode either.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Duplicate_parameter",
    "markdown": "# SyntaxError: duplicate formal argument x - JavaScript\n\nThe JavaScript exception \"duplicate formal argument x\" or \"duplicate argument names not allowed in this context\" occurs when a function creates two or more parameter [bindings](https://developer.mozilla.org/en-US/docs/Glossary/Binding) with the same name, and the function is not a [non-strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) function with only simple parameters.\n\n## [Message](#message)\n\nSyntaxError: Duplicate parameter name not allowed in this context (V8-based)\nSyntaxError: duplicate formal argument x (Firefox)\nSyntaxError: duplicate argument names not allowed in this context (Firefox)\nSyntaxError: Cannot declare a parameter named 'x' in strict mode as it has already been declared. (Safari)\nSyntaxError: Duplicate parameter 'x' not allowed in function with default parameter values. (Safari)\nSyntaxError: Duplicate parameter 'x' not allowed in function with a rest parameter. (Safari)\nSyntaxError: Duplicate parameter 'x' not allowed in function with destructuring parameters. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nHaving two formal parameters of the same name is likely a mistake—the second occurrence would cause the first occurrence to be inaccessible through the parameter name. In legacy JavaScript, this was allowed. Therefore, to not break existing code, this is only an error if the code is guaranteed to not be legacy—either because it is in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) or it uses modern parameter syntax ([rest](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), [default](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), or [destructured](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) parameters).\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n\"use strict\";\n\nfunction add(x, x) {\n  // How can you access both \"x\" parameters?\n  // SyntaxError: duplicate formal argument x\n}\n```\n\n```\nfunction doSomething(name, { name }) {\n  // How can you access both \"name\" parameters?\n  // SyntaxError: duplicate argument names not allowed in this context\n}\n```\n\n### [Valid cases](#valid_cases)\n\n```\nfunction doSomething(operationName, { name: userName }) {\n  // You can access both \"operationName\" and \"userName\" parameters.\n}\n\nfunction doSomething(name, user) {\n  // You can access both \"name\" and \"user.name\" parameters.\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: duplicate formal argument x - JavaScript | MDN",
    "description": "The JavaScript exception \"duplicate formal argument x\" or \"duplicate argument names not allowed in this context\" occurs when a function creates two or more parameter bindings with the same name, and the function is not a non-strict function with only simple parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Either_be_both_static_or_non-static",
    "markdown": "# SyntaxError: getter and setter for private name #x should either be both static or non-static - JavaScript\n\nThe JavaScript exception \"mismatched placement\" occurs when a private [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) are mismatched in whether or not they are [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static).\n\n## [Message](#message)\n\nSyntaxError: Identifier '#x' has already been declared (V8-based)\nSyntaxError: getter and setter for private name #x should either be both static or non-static (Firefox)\nSyntaxError: Cannot declare a private non-static getter if there is a static private setter with used name. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nPrivate [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) for the same name must either be both [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static), or both non-static. This limitation does not exist for public methods.\n\n## [Examples](#examples)\n\n### [Mismatched placement](#mismatched_placement)\n\n```\nclass Test {\n  static set #foo(_) {}\n  get #foo() {}\n}\n\n// SyntaxError: getter and setter for private name #foo should either be both static or non-static\n```\n\nSince `foo` is [private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties), the methods must be either both [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static):\n\n```\nclass Test {\n  static set #foo(_) {}\n  static get #foo() {}\n}\n```\n\nor non-static:\n\n```\nclass Test {\n  set #foo(_) {}\n  get #foo() {}\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: getter and setter for private name #x should either be both static or non-static - JavaScript | MDN",
    "description": "The JavaScript exception \"mismatched placement\" occurs when a private getter and setter are mismatched in whether or not they are static.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number",
    "markdown": "# SyntaxError: identifier starts immediately after numeric literal - JavaScript\n\nThe JavaScript exception \"identifier starts immediately after numeric literal\" occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (\\_), or dollar sign ($).\n\n## [Message](#message)\n\nSyntaxError: Invalid or unexpected token (V8-based)\nSyntaxError: identifier starts immediately after numeric literal (Firefox)\nSyntaxError: No identifiers allowed directly after numeric literal (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe names of variables, called [identifiers](https://developer.mozilla.org/en-US/docs/Glossary/Identifier), conform to certain rules, which your code must adhere to!\n\nA JavaScript identifier must start with a letter, underscore (\\_), or dollar sign ($). They can't start with a digit! Only subsequent characters can be digits (0-9).\n\n## [Examples](#examples)\n\n### [Variable names starting with numeric literals](#variable_names_starting_with_numeric_literals)\n\nVariable names can't start with numbers in JavaScript. The following fails:\n\n```\nconst 1life = \"foo\";\n// SyntaxError: identifier starts immediately after numeric literal\n\nconst foo = 1life;\n// SyntaxError: identifier starts immediately after numeric literal\n\nalert(1.foo);\n// SyntaxError: identifier starts immediately after numeric literal\n```\n\nYou will need to rename your variable to avoid the leading number.\n\n```\nconst life1 = \"foo\";\nconst foo = life1;\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: identifier starts immediately after numeric literal - JavaScript | MDN",
    "description": "The JavaScript exception \"identifier starts immediately after numeric literal\" occurs\n  when an identifier started with a digit. Identifiers can only start with a letter,\n  underscore (_), or dollar sign ($).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Function_label",
    "markdown": "# SyntaxError: functions cannot be labelled - JavaScript\n\nThe JavaScript exception \"functions cannot be labelled\" occurs when a [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) declaration has a [label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) before it.\n\n## [Message](#message)\n\nSyntaxError: In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement. (V8-based)\nSyntaxError: In strict mode code, functions can only be declared at top level or inside a block. (V8-based)\nSyntaxError: Generators can only be declared at the top level or inside a block. (V8-based)\nSyntaxError: Async functions can only be declared at the top level or inside a block. (V8-based)\n\nSyntaxError: functions can only be labelled inside blocks (Firefox)\nSyntaxError: functions cannot be labelled (Firefox)\nSyntaxError: generator functions cannot be labelled (Firefox)\nSyntaxError: async function declarations can't appear in single-statement context (Firefox)\n\nSyntaxError: Unexpected keyword 'function'. Function declarations are only allowed inside block statements or at the top level of a program. (Safari)\nSyntaxError: Function declarations are only allowed inside blocks or switch statements in strict mode. (Safari)\nSyntaxError: Unexpected token '\\*'. Cannot use generator function declaration in single-statement context. (Safari)\nSyntaxError: Unexpected keyword 'function'. Cannot use async function declaration in single-statement context. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nFunction declarations are never supposed to be labeled, because labels should only apply to statements, not declarations. There's no way to actually jump to this label. However, due to some legacy JavaScript syntax rules, the error condition is a bit more complicated than necessary:\n\n*   In [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), function declarations are never allowed to be labeled.\n*   In non-strict mode, function declarations are allowed to be labeled, but not when the function is the sole statement of an `if` statement (which itself is a deprecated feature).\n*   Async functions, generator functions, and async generator functions are never allowed to be labeled.\n\nThe error message may say something along the lines of \"invalid place for a function declaration to appear\", because when the parser sees a label, it expects a statement to follow, and a function declaration is not a statement. It depends on whether the error's perspective is that a label cannot be followed by a function, or that a function cannot be preceded by a label.\n\n## [Examples](#examples)\n\n### [Misparsed object literal](#misparsed_object_literal)\n\nWhile it's possible that you actually expect the label to do _something_ along the lines of being a jump target, usually you didn't intend for it to be a label. The most common case is you actually want it to be a property key in an object literal:\n\n```\nconst createObj = () => {\n  greet: function greet() { // SyntaxError: functions cannot be labelled\n    console.log(\"Hello\");\n  }\n};\n```\n\nHere, `{...}` is actually not an object literal, but is instead the block body of the [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), so `greet:` becomes a label. To fix this, you need to wrap the object literal in parentheses:\n\n```\nconst createObj = () => ({\n  greet: function greet() {\n    console.log(\"Hello\");\n  },\n});\n```\n\nYou may also want to use the [method syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions) for object literals, which avoids this pitfall:\n\n```\nconst createObj = () => ({\n  greet() {\n    console.log(\"Hello\");\n  },\n});\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: functions cannot be labelled - JavaScript | MDN",
    "description": "The JavaScript exception \"functions cannot be labelled\" occurs when a function declaration has a label before it.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_no_arguments",
    "markdown": "# SyntaxError: getter functions must have no arguments - JavaScript\n\nThe JavaScript exception \"getter functions must have no arguments\" occurs when a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) is declared and the parameter list is non-empty.\n\n## [Message](#message)\n\nSyntaxError: Getter must not have any formal parameters. (V8-based)\nSyntaxError: getter functions must have no arguments (Firefox)\nSyntaxError: Unexpected identifier 'x'. getter functions must have no parameters. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [`get`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) property syntax looks like a function, but it is stricter and not all function syntax is allowed. A getter is always invoked with no arguments, so defining it with any parameter is likely an error.\n\nNote that this error only applies to property getters using the `get` syntax. If you define the getter using [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), etc., the getter is defined as a normal function, although it's likely still an error if the getter expects any arguments, as it will be called without any.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nconst obj = {\n  get value(type) {\n    return type === \"string\" ? String(Math.random()) : Math.random();\n  },\n};\n```\n\n### [Valid cases](#valid_cases)\n\n```\n// Remove the parameter\nconst obj = {\n  get value() {\n    return Math.random();\n  },\n};\n\n// Use a normal method, if you need a parameter\nconst obj = {\n  getValue(type) {\n    return type === \"string\" ? String(Math.random()) : Math.random();\n  },\n};\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: getter functions must have no arguments - JavaScript | MDN",
    "description": "The JavaScript exception \"getter functions must have no arguments\" occurs when a getter is declared and the parameter list is non-empty.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/import_decl_module_top_level",
    "markdown": "# SyntaxError: import declarations may only appear at top level of a module - JavaScript\n\nThe JavaScript exception \"import declarations may only appear at top level of a module\" occurs when an import declaration is not at the top level of a module. This might be because the import declaration is nested in other constructs (functions, blocks, etc.), or more often because the current file is not treated as a module.\n\n## [Message](#message)\n\nSyntaxError: Cannot use import statement outside a module (V8-based)\nSyntaxError: import declarations may only appear at top level of a module (Firefox)\nSyntaxError: Unexpected identifier 'x'. import call expects one or two arguments. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nYou may have an `import` declaration that's nested in another construct, such as a function or a block. The `import` declaration must be at the top level of the module. If you want to conditionally import a module, or lazily import it on demand, use [dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) instead.\n\nIf the `import` is already at the top level of the code, it may be because the file is not interpreted as a module. Runtimes require external hints to determine whether a file is a module or not, and here are several ways to provide such hints:\n\n*   If the file is directly loaded from HTML, make sure the [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) tag has the `type=\"module\"` attribute.\n*   If the file is run in Node, make sure either the file has the `.mjs` extension, or the closest `package.json` file has the `\"type\": \"module\"` field.\n*   If the file is run as a [worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers), make sure you call the `Worker()` constructor with the `type: \"module\"` option.\n*   Import this file from another module.\n\nOne other cause might be when you are writing `import` with a compiler (such as TypeScript) and you accidentally ran the source file. Since `import` declarations usually appear at the very start of the program, they are the first thing the parser sees and then complains about. Make sure to compile the source file and execute the compiled file instead.\n\n## [Examples](#examples)\n\n### [Conditional imports](#conditional_imports)\n\nYou cannot use `import` inside other constructs, like you might do in Python.\n\n```\nif (writeOutput) {\n  import fs from \"fs\"; // SyntaxError\n}\n```\n\nEither move the `import` to the top level, or use dynamic import.\n\n```\nif (writeOutput) {\n  import(\"fs\").then((fs) => {\n    // use fs\n  });\n}\n```\n\n### [Importing in a non-module script](#importing_in_a_non-module_script)\n\nIf you are loading the script from HTML, make sure to add the `type=\"module\"` attribute to the `<script>` tag.\n\n```\n<script type=\"module\" src=\"main.js\"></script>\n```\n\nIf for some reason you cannot migrate the script to a module, you can use dynamic import.\n\n```\nasync function main() {\n  const myModule = await import(\"./my-module.js\");\n  // use myModule\n}\n\nmain();\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: import declarations may only appear at top level of a module - JavaScript | MDN",
    "description": "The JavaScript exception \"import declarations may only appear at top level of a module\" occurs when an import declaration is not at the top level of a module. This might be because the import declaration is nested in other constructs (functions, blocks, etc.), or more often because the current file is not treated as a module.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax",
    "markdown": "# SyntaxError: invalid BigInt syntax - JavaScript\n\nThe JavaScript exception \"invalid BigInt syntax\" occurs when a string value is being coerced to a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) but it failed to be parsed as an integer.\n\n## [Message](#message)\n\nSyntaxError: Cannot convert x to a BigInt (V8-based)\nSyntaxError: invalid BigInt syntax (Firefox)\nSyntaxError: Failed to parse String to BigInt (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nWhen using the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function to convert a string to a BigInt, the string will be parsed in the same way as source code, and the resulting value must be an integer value.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nconst a = BigInt(\"1.5\");\nconst b = BigInt(\"1n\");\nconst c = BigInt.asIntN(4, \"8n\");\n// SyntaxError: invalid BigInt syntax\n```\n\n### [Valid cases](#valid_cases)\n\n```\nconst a = BigInt(\"1\");\nconst b = BigInt(\"  1   \");\nconst c = BigInt.asIntN(4, \"8\");\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: invalid BigInt syntax - JavaScript | MDN",
    "description": "The JavaScript exception \"invalid BigInt syntax\" occurs when a string value is being coerced to a BigInt but it failed to be parsed as an integer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character",
    "markdown": "# SyntaxError: illegal character - JavaScript\n\nThe JavaScript exception \"illegal character\" occurs when the [lexer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar) reads a character that's not part of a string literal, and the character cannot constitute a valid token in the language.\n\n## [Message](#message)\n\nSyntaxError: Invalid or unexpected token (V8-based)\nSyntaxError: illegal character U+201C (Firefox)\nSyntaxError: Invalid character '\\\\u201c' (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is an invalid character that the interpreter doesn't understand. You should either put it in a string literal or replace it with another character. Use an editor that supports syntax highlighting and carefully check your code against mismatches like a minus sign (`-`) versus a dash (`–`) or simple quotes (`\"`) versus non-standard quotation marks (`\"`).\n\n## [Examples](#examples)\n\n### [Mismatched characters](#mismatched_characters)\n\nSome characters look similar, but will cause the parser to fail interpreting your code. Famous examples of this are quotes, the minus or semicolon ([greek question mark (U+37e)](https://en.wikipedia.org/wiki/Question_mark#Greek_question_mark) looks same).\n\n```\n“This looks like a string”; // SyntaxError: illegal character\n// “ and ” are not \" but look like it\n\n42 – 13; // SyntaxError: illegal character\n// – (en-dash) is not - but looks like it\n\nconst foo = \"bar\"; // SyntaxError: illegal character\n// <37e> is not ; but looks like it\n```\n\nThis should work:\n\n```\n\"This is actually a string\";\n42 - 13;\nconst foo = \"bar\";\n```\n\nSome editors and IDEs will notify you or at least use a slightly different highlighting for it, but not all. When something like this happens to your code and you're not able to find the source of the problem, it's often best to just delete the problematic line and retype it.\n\n### [Forgotten characters](#forgotten_characters)\n\nIt's easy to forget a character here or there.\n\n```\nconst operators = [\"+\", \"-\", ×\", \"÷\"];\n// SyntaxError: illegal character U+00D7\n```\n\nAdd the missing quote for `\"×\"`.\n\n```\nconst operators = [\"+\", \"-\", \"×\", \"÷\"];\n```\n\n### [Hidden characters](#hidden_characters)\n\nWhen copy pasting code from external sources, there might be invalid characters. Watch out!\n\n```\nconst foo = \"bar\";​\n// SyntaxError: illegal character\n```\n\nWhen inspecting this code in an editor like Vim, you can see that there is actually a [zero-width space (ZWSP) (U+200B)](https://en.wikipedia.org/wiki/Zero-width_space) character.\n\n## [See also](#see_also)",
    "title": "SyntaxError: illegal character - JavaScript | MDN",
    "description": "The JavaScript exception \"illegal character\" occurs when the lexer reads a character that's not part of a string literal, and the character cannot constitute a valid token in the language.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side",
    "markdown": "# SyntaxError: invalid assignment left-hand side - JavaScript\n\nThe JavaScript exception \"invalid assignment left-hand side\" occurs when there was an unexpected assignment somewhere. It may be triggered when a single `=` sign was used instead of `==` or `===`.\n\n## [Message](#message)\n\nSyntaxError: Invalid left-hand side in assignment (V8-based)\nSyntaxError: invalid assignment left-hand side (Firefox)\nSyntaxError: Left side of assignment is not a reference. (Safari)\n\n## [Error type](#error_type)\n\n[`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) or [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError), depending on the syntax.\n\n## [What went wrong?](#what_went_wrong)\n\nThere was an unexpected assignment somewhere. This might be due to a mismatch of an [assignment operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators) and an [equality operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#equality_operators), for example. While a single `=` sign assigns a value to a variable, the `==` or `===` operators compare a value.\n\n## [Examples](#examples)\n\n### [Typical invalid assignments](#typical_invalid_assignments)\n\n```\nif (Math.PI + 1 = 3 || Math.PI + 1 = 4) {\n  console.log(\"no way!\");\n}\n// SyntaxError: invalid assignment left-hand side\n\nconst str = \"Hello, \"\n+= \"is it me \"\n+= \"you're looking for?\";\n// SyntaxError: invalid assignment left-hand side\n```\n\nIn the `if` statement, you want to use an equality operator (`===`), and for the string concatenation, the plus (`+`) operator is needed.\n\n```\nif (Math.PI + 1 === 3 || Math.PI + 1 === 4) {\n  console.log(\"no way!\");\n}\n\nconst str = \"Hello, \"\n  + \"from the \"\n  + \"other side!\";\n```\n\n### [Assignments producing ReferenceErrors](#assignments_producing_referenceerrors)\n\nInvalid assignments don't always produce syntax errors. Sometimes the syntax is almost correct, but at runtime, the left hand side expression evaluates to a _value_ instead of a _reference_, so the assignment is still invalid. Such errors occur later in execution, when the statement is actually executed.\n\n```\nfunction foo() {\n  return { a: 1 };\n}\nfoo() = 1; // ReferenceError: invalid assignment left-hand side\n```\n\nFunction calls, [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) calls, [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super), and [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) are all values instead of references. If you want to use them on the left hand side, the assignment target needs to be a property of their produced values instead.\n\n```\nfunction foo() {\n  return { a: 1 };\n}\nfoo().a = 1;\n```\n\n**Note:** In Firefox and Safari, the first example produces a `ReferenceError` in non-strict mode, and a `SyntaxError` in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). Chrome throws a runtime `ReferenceError` for both strict and non-strict modes.\n\n### [Using optional chaining as assignment target](#using_optional_chaining_as_assignment_target)\n\n[Optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) is not a valid target of assignment.\n\n```\nobj?.foo = 1; // SyntaxError: invalid assignment left-hand side\n```\n\nInstead, you have to first guard the nullish case.\n\n```\nif (obj) {\n  obj.foo = 1;\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: invalid assignment left-hand side - JavaScript | MDN",
    "description": "The JavaScript exception \"invalid assignment left-hand side\" occurs when there was an unexpected assignment somewhere. It may be triggered when a single = sign was used instead of == or ===.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag",
    "markdown": "# SyntaxError: invalid regular expression flag \"x\" - JavaScript\n\nThe JavaScript exception \"invalid regular expression flag\" occurs when the flags in a regular expression contain any flag that is not one of: `d`, `g`, `i`, `m`, `s`, `u`, `v`, or `y`.\n\nIt may also be raised if the expression contains more than one instance of a valid flag.\n\n## [Message](#message)\n\nSyntaxError: Invalid flags supplied to RegExp constructor 'x' (V8-based)\nSyntaxError: Invalid regular expression flags (V8-based)\nSyntaxError: invalid regular expression flag x (Firefox)\nSyntaxError: Invalid flags supplied to RegExp constructor. (Safari)\nSyntaxError: Invalid regular expression: invalid flags (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe regular expression contains invalid flags, or valid flags have been used more than once in the expression.\n\nThe valid (allowed) flags are `d`, `g`, `i`, `m`, `s`, `u`, `v`, and `y`. They are introduced in more detail in [Regular expressions > Advanced searching with flags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags).\n\n## [Examples](#examples)\n\nIn a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second slash. Regular expression flags can be used separately or together in any order. This syntax shows how to declare the flags using the regular expression literal:\n\n```\nconst re = /pattern/flags;\n```\n\nThey can also be defined in the constructor function of the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object (second parameter):\n\n```\nconst re = new RegExp(\"pattern\", \"flags\");\n```\n\nHere is an example showing use of only correct flags.\n\n```\n/foo/g;\n/foo/gims;\n/foo/uy;\n```\n\nBelow is an example showing the use of some invalid flags `b`, `a` and `r`:\n\n```\n/foo/bar;\n\n// SyntaxError: invalid regular expression flag \"b\"\n```\n\nThe code below is incorrect, because `W`, `e` and `b` are not valid flags.\n\n```\nconst obj = {\n  url: /docs/Web,\n};\n\n// SyntaxError: invalid regular expression flag \"W\"\n```\n\nAn expression containing two slashes is interpreted as a regular expression literal. Most likely the intent was to create a string literal, using single or double quotes as shown below:\n\n```\nconst obj = {\n  url: \"/docs/Web\",\n};\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: invalid regular expression flag \"x\" - JavaScript | MDN",
    "description": "The JavaScript exception \"invalid regular expression flag\" occurs when the flags in a regular expression contain any flag that is not one of: d, g, i, m, s, u, v, or y.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse",
    "markdown": "# SyntaxError: JSON.parse: bad parsing - JavaScript\n\nThe JavaScript exceptions thrown by [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) occur when string failed to be parsed as JSON.\n\n## [Message](#message)\n\nSyntaxError: JSON.parse: unterminated string literal\nSyntaxError: JSON.parse: bad control character in string literal\nSyntaxError: JSON.parse: bad character in string literal\nSyntaxError: JSON.parse: bad Unicode escape\nSyntaxError: JSON.parse: bad escape character\nSyntaxError: JSON.parse: unterminated string\nSyntaxError: JSON.parse: no number after minus sign\nSyntaxError: JSON.parse: unexpected non-digit\nSyntaxError: JSON.parse: missing digits after decimal point\nSyntaxError: JSON.parse: unterminated fractional number\nSyntaxError: JSON.parse: missing digits after exponent indicator\nSyntaxError: JSON.parse: missing digits after exponent sign\nSyntaxError: JSON.parse: exponent part is missing a number\nSyntaxError: JSON.parse: unexpected end of data\nSyntaxError: JSON.parse: unexpected keyword\nSyntaxError: JSON.parse: unexpected character\nSyntaxError: JSON.parse: end of data while reading object contents\nSyntaxError: JSON.parse: expected property name or '}'\nSyntaxError: JSON.parse: end of data when ',' or '\\]' was expected\nSyntaxError: JSON.parse: expected ',' or '\\]' after array element\nSyntaxError: JSON.parse: end of data when property name was expected\nSyntaxError: JSON.parse: expected double-quoted property name\nSyntaxError: JSON.parse: end of data after property name when ':' was expected\nSyntaxError: JSON.parse: expected ':' after property name in object\nSyntaxError: JSON.parse: end of data after property value in object\nSyntaxError: JSON.parse: expected ',' or '}' after property value in object\nSyntaxError: JSON.parse: expected ',' or '}' after property-value pair in object literal\nSyntaxError: JSON.parse: property names must be double-quoted strings\nSyntaxError: JSON.parse: expected property name or '}'\nSyntaxError: JSON.parse: unexpected character\nSyntaxError: JSON.parse: unexpected non-whitespace character after JSON data\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\n[`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) parses a string as JSON. This string has to be valid JSON and will throw this error if incorrect syntax was encountered.\n\n## [Examples](#examples)\n\n### [JSON.parse() does not allow trailing commas](#json.parse_does_not_allow_trailing_commas)\n\nBoth lines will throw a SyntaxError:\n\n```\nJSON.parse(\"[1, 2, 3, 4,]\");\nJSON.parse('{\"foo\": 1,}');\n// SyntaxError JSON.parse: unexpected character\n// at line 1 column 14 of the JSON data\n```\n\nOmit the trailing commas to parse the JSON correctly:\n\n```\nJSON.parse(\"[1, 2, 3, 4]\");\nJSON.parse('{\"foo\": 1}');\n```\n\n### [Property names must be double-quoted strings](#property_names_must_be_double-quoted_strings)\n\nYou cannot use single-quotes around properties, like 'foo'.\n\n```\nJSON.parse(\"{'foo': 1}\");\n// SyntaxError: JSON.parse: expected property name or '}'\n// at line 1 column 2 of the JSON data\n```\n\nInstead write \"foo\":\n\n```\nJSON.parse('{\"foo\": 1}');\n```\n\n### [Leading zeros and decimal points](#leading_zeros_and_decimal_points)\n\nYou cannot use leading zeros, like 01, and decimal points must be followed by at least one digit.\n\n```\nJSON.parse('{\"foo\": 01}');\n// SyntaxError: JSON.parse: expected ',' or '}' after property value\n// in object at line 1 column 2 of the JSON data\n\nJSON.parse('{\"foo\": 1.}');\n// SyntaxError: JSON.parse: unterminated fractional number\n// at line 1 column 2 of the JSON data\n```\n\nInstead write just 1 without a zero and use at least one digit after a decimal point:\n\n```\nJSON.parse('{\"foo\": 1}');\nJSON.parse('{\"foo\": 1.0}');\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: JSON.parse: bad parsing - JavaScript | MDN",
    "description": "The JavaScript exceptions thrown by JSON.parse() occur when string failed\n  to be parsed as JSON.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Label_not_found",
    "markdown": "# SyntaxError: label not found - JavaScript\n\nThe JavaScript exception \"label not found\" occurs when a [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) or [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) statement references a label that does not exist on any statement that contains the `break` or `continue` statement.\n\n## [Message](#message)\n\nSyntaxError: Undefined label 'label' (V8-based)\nSyntaxError: label not found (Firefox)\nSyntaxError: Cannot use the undeclared label 'label'. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nIn JavaScript, [labels](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) are very limited: you can only use them with [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) and [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) statements, and you can only jump to them from a statement contained within the labeled statement. You cannot jump to this label from anywhere in the program.\n\n## [Examples](#examples)\n\n### [Unsyntactic jump](#unsyntactic_jump)\n\nYou cannot use labels as if they are `goto`.\n\n```\nstart: console.log(\"Hello, world!\");\nconsole.log(\"Do it again\");\nbreak start;\n```\n\nInstead, you can only use labels to enhance the normal semantics of `break` and `continue` statements.\n\n```\nstart: {\n  console.log(\"Hello, world!\");\n  if (Math.random() > 0.5) {\n    break start;\n  }\n  console.log(\"Maybe I'm logged\");\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: label not found - JavaScript | MDN",
    "description": "The JavaScript exception \"label not found\" occurs when a break or continue statement references a label that does not exist on any statement that contains the break or continue statement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition",
    "markdown": "# SyntaxError: missing ) after condition - JavaScript\n\nThe JavaScript exception \"missing ) after condition\" occurs when there is an error with how an [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) condition is written. It must appear in parenthesis after the `if` keyword.\n\n## [Message](#message)\n\nSyntaxError: missing ) after condition (Firefox)\nSyntaxError: Unexpected token '{'. Expected ')' to end an 'if' condition. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is an error with how an [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) condition is written. In any programming language, code needs to make decisions and carry out actions accordingly depending on different inputs. The if statement executes a statement if a specified condition is truthy. In JavaScript, this condition must appear in parenthesis after the `if` keyword, like this:\n\n```\nif (condition) {\n  // do something if the condition is true\n}\n```\n\n## [Examples](#examples)\n\n### [Missing parenthesis](#missing_parenthesis)\n\nIt might just be an oversight, carefully check all you parenthesis in your code.\n\n```\nif (Math.PI < 3 {\n  console.log(\"wait what?\");\n}\n\n// SyntaxError: missing ) after condition\n```\n\nTo fix this code, you would need to add a parenthesis that closes the condition.\n\n```\nif (Math.PI < 3) {\n  console.log(\"wait what?\");\n}\n```\n\n### [Misused is keyword](#misused_is_keyword)\n\nIf you are coming from another programming language, it is also easy to add keywords that don't mean the same or have no meaning at all in JavaScript.\n\n```\nif (done is true) {\n console.log(\"we are done!\");\n}\n\n// SyntaxError: missing ) after condition\n```\n\nInstead you need to use a correct [comparison operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators). For example:\n\n```\nif (done === true) {\n  console.log(\"we are done!\");\n}\n```\n\nOr even better:\n\n```\nif (done) {\n  console.log(\"we are done!\");\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing ) after condition - JavaScript | MDN",
    "description": "The JavaScript exception \"missing ) after condition\" occurs when there is an error with\n  how an\n  if\n  condition is written. It must appear in parenthesis after the if keyword.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const",
    "markdown": "# SyntaxError: missing = in const declaration - JavaScript\n\nThe JavaScript exception \"missing = in const declaration\" occurs when a const declaration was not given a value in the same statement (like `const RED_FLAG;`). You need to provide one (`const RED_FLAG = \"#ff0\"`).\n\n## [Message](#message)\n\nSyntaxError: Missing initializer in const declaration (V8-based)\nSyntaxError: missing = in const declaration (Firefox)\nSyntaxError: Unexpected token ';'. const declared variable 'x' must have an initializer. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA constant is a value that cannot be altered by the program during normal execution. It cannot change through re-assignment, and it can't be redeclared. In JavaScript, constants are declared using the [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) keyword. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).\n\n## [Examples](#examples)\n\n### [Missing const initializer](#missing_const_initializer)\n\nUnlike `var` or `let`, you must specify a value for a `const` declaration. This throws:\n\n```\nconst COLUMNS;\n// SyntaxError: missing = in const declaration\n```\n\n### [Fixing the error](#fixing_the_error)\n\nThere are multiple options to fix this error. Check what was intended to be achieved with the constant in question.\n\n#### Adding a constant value\n\nSpecify the constant value in the same statement in which it's declared:\n\n#### `const`, `let` or `var`?\n\nDo not use `const` if you weren't meaning to declare a constant. Maybe you meant to declare a block-scoped variable with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or global variable with [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var). Both don't require an initial value.\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing = in const declaration - JavaScript | MDN",
    "description": "The JavaScript exception \"missing = in const declaration\" occurs when a const\n  declaration was not given a value in the same statement (like\n  const RED_FLAG;). You need to provide one\n  (const RED_FLAG = \"#ff0\").",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id",
    "markdown": "# SyntaxError: missing : after property id - JavaScript\n\nThe JavaScript exception \"missing : after property id\" occurs when objects are created using the [object initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) syntax. A colon (`:`) separates keys and values for the object's properties. Somehow, this colon is missing or misplaced.\n\n## [Message](#message)\n\nSyntaxError: Invalid shorthand property initializer (V8-based)\nSyntaxError: missing : after property id (Firefox)\nSyntaxError: Unexpected token '='. Expected a ':' following the property name 'x'. (Safari)\nSyntaxError: Unexpected token '+'. Expected an identifier as property name. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nWhen creating objects with the [object initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) syntax, a colon (`:`) separates keys and values for the object's properties.\n\n```\nconst obj = { propertyKey: \"value\" };\n```\n\n## [Examples](#examples)\n\n### [Colons vs. equal signs](#colons_vs._equal_signs)\n\nThis code fails, as the equal sign can't be used this way in this object initializer syntax.\n\n```\nconst obj = { propertyKey = \"value\" };\n// SyntaxError: missing : after property id\n```\n\nCorrect would be to use a colon, or to use square brackets to assign a new property after the object has been created already.\n\n```\nconst obj = { propertyKey: \"value\" };\n```\n\nOr alternatively:\n\n```\nconst obj = {};\nobj.propertyKey = \"value\";\n```\n\n### [Computed properties](#computed_properties)\n\nIf you create a property key from an expression, you need to use square brackets. Otherwise the property name can't be computed:\n\n```\nconst obj = { \"b\"+\"ar\": \"foo\" };\n// SyntaxError: missing : after property id\n```\n\nPut the expression in square brackets `[]`:\n\n```\nconst obj = { [\"b\" + \"ar\"]: \"foo\" };\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing : after property id - JavaScript | MDN",
    "description": "The JavaScript exception \"missing : after property id\" occurs when objects are created\n  using the object initializer syntax.\n  A colon (:) separates keys and values for the\n  object's properties. Somehow, this colon is missing or misplaced.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body",
    "markdown": "# SyntaxError: missing } after function body - JavaScript\n\nThe JavaScript exception \"missing } after function body\" occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly braces or parenthesis are in the correct order.\n\n## [Message](#message)\n\nSyntaxError: missing } after function body (Firefox)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is a syntax mistake when creating a function somewhere. Also check if any closing curly braces or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.\n\n## [Examples](#examples)\n\n### [Forgotten closing curly bracket](#forgotten_closing_curly_bracket)\n\nOftentimes, there is a missing curly bracket in your function code:\n\n```\nfunction charge() {\n  if (sunny) {\n    useSolarCells();\n  } else {\n    promptBikeRide();\n}\n```\n\nCorrect would be:\n\n```\nfunction charge() {\n  if (sunny) {\n    useSolarCells();\n  } else {\n    promptBikeRide();\n  }\n}\n```\n\nIt can be more obscure when using [IIFEs](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) or other constructs that use a lot of different parenthesis and curly braces, for example.\n\n```\n(function () {\n  if (Math.random() < 0.01) {\n    doSomething();\n  }\n)();\n```\n\nOftentimes, indenting differently or double checking indentation helps to spot these errors.\n\n```\n(function () {\n  if (Math.random() < 0.01) {\n    doSomething();\n  }\n})();\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing } after function body - JavaScript | MDN",
    "description": "The JavaScript exception \"missing } after function body\" occurs when there is a syntax\n  mistake when creating a function somewhere. Check if any closing curly braces or\n  parenthesis are in the correct order.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list",
    "markdown": "# SyntaxError: missing ) after argument list - JavaScript\n\nThe JavaScript exception \"missing ) after argument list\" occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.\n\n## [Message](#message)\n\nSyntaxError: missing ) after argument list (V8-based & Firefox)\nSyntaxError: Unexpected identifier 'x'. Expected ')' to end an argument list. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string, for example.\n\n## [Examples](#examples)\n\nBecause there is no \"+\" operator to concatenate the string, JavaScript expects the argument for the `log` function to be just `\"PI: \"`. In that case, it should be terminated by a closing parenthesis.\n\n```\nconsole.log(\"PI: \" Math.PI);\n// SyntaxError: missing ) after argument list\n```\n\nYou can correct the `log` call by adding the `+` operator:\n\n```\nconsole.log(\"PI: \" + Math.PI);\n// \"PI: 3.141592653589793\"\n```\n\nAlternatively, you can consider using a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), or take advantage of the fact that [`console.log`](https://developer.mozilla.org/en-US/docs/Web/API/console/log_static) accepts multiple parameters:\n\n```\nconsole.log(`PI: ${Math.PI}`);\nconsole.log(\"PI:\", Math.PI);\n```\n\n### [Unterminated strings](#unterminated_strings)\n\n```\nconsole.log('\"Java\" + \"Script\" = \\\"' + \"Java\" + 'Script\\\");\n// SyntaxError: missing ) after argument list\n```\n\nHere JavaScript thinks that you meant to have `);` inside the string and ignores it, and it ends up not knowing that you meant the `);` to end the function `console.log`. To fix this, we could put a`'` after the \"Script\" string:\n\n```\nconsole.log('\"Java\" + \"Script\" = \"' + \"Java\" + 'Script\"');\n// '\"Java\" + \"Script\" = \"JavaScript\"'\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing ) after argument list - JavaScript | MDN",
    "description": "The JavaScript exception \"missing ) after argument list\" occurs when there is an error\n  with how a function is called. This might be a typo, a missing operator, or an unescaped\n  string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list",
    "markdown": "# SyntaxError: missing } after property list - JavaScript\n\nThe JavaScript exception \"missing } after property list\" occurs when there is a mistake in the [object initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.\n\n## [Message](#message)\n\nSyntaxError: missing } after property list (Firefox)\nSyntaxError: Unexpected identifier 'c'. Expected '}' to end an object literal. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is a mistake in the [object initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma, for example. Also check if any closing curly braces or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.\n\n## [Examples](#examples)\n\n### [Forgotten comma](#forgotten_comma)\n\nOftentimes, there is a missing comma in your object initializer code:\n\n```\nconst obj = {\n  a: 1,\n  b: { myProp: 2 }\n  c: 3\n};\n```\n\nCorrect would be:\n\n```\nconst obj = {\n  a: 1,\n  b: { myProp: 2 },\n  c: 3,\n};\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing } after property list - JavaScript | MDN",
    "description": "The JavaScript exception \"missing } after property list\" occurs when there is a mistake\n  in the object initializer syntax somewhere.\n  Might be in fact a missing curly bracket, but could also be a missing comma.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list",
    "markdown": "# SyntaxError: missing \\] after element list - JavaScript\n\nThe JavaScript exception \"missing \\] after element list\" occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing square bracket (`]`) or a comma (`,`) missing.\n\n## [Message](#message)\n\nSyntaxError: missing \\] after element list (Firefox)\nSyntaxError: Unexpected token ';'. Expected either a closing '\\]' or a ',' following an array element. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is an error with the array initializer syntax somewhere. Likely there is a closing square bracket (`]`) or a comma (`,`) missing.\n\n## [Examples](#examples)\n\n### [Incomplete array initializer](#incomplete_array_initializer)\n\n```\nconst list = [1, 2,\n\nconst instruments = [\n  \"Ukulele\",\n  \"Guitar\",\n  \"Piano\",\n};\n\nconst data = [{ foo: \"bar\" } { bar: \"foo\" }];\n```\n\nCorrect would be:\n\n```\nconst list = [1, 2];\n\nconst instruments = [\"Ukulele\", \"Guitar\", \"Piano\"];\n\nconst data = [{ foo: \"bar\" }, { bar: \"foo\" }];\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing ] after element list - JavaScript | MDN",
    "description": "The JavaScript exception \"missing ] after element list\" occurs when there is an error\n  with the array initializer syntax somewhere. Likely there is a closing square bracket\n  (]) or a comma (,) missing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_optional_template",
    "markdown": "# SyntaxError: tagged template cannot be used with optional chain - JavaScript\n\nThere are two ways to get this error. The first one is if the tag expression is an optional chain expression, like this:\n\n```\nString?.raw`Hello, world!`;\nconsole.log?.()`Hello, world!`;\nNumber?.[parseMethod]`Hello, world!`;\n```\n\nThe second one is if `?.` occurs between the tag and the template, like this:\n\n```\nString.raw?.`Hello, world!`;\n```\n\nOptional chaining in the tag is specifically forbidden because there's no great use case for it, and what the result is expected to be is unclear (should it be `undefined` or the template's value as if it's untagged?). You need to translate the optional chaining to its underlying condition (see [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) for more information).\n\n```\nconst result =\n  String.raw === null || String.raw === undefined\n    ? undefined\n    : String.raw`Hello, world!`;\n```\n\nRemember that optional chaining only short-circuits within a parenthesized unit. If you parenthesize your tag expression, the optional chaining will not cause an error, because now the tag does not short-circuit and the result is clear (the tag will produce `undefined` and then cause the tagged template to throw).\n\n```\n(console?.log)`Hello, world!`; // Throws if console?.log is undefined\n```\n\nHowever this is a bit nonsensical anyway because optional chaining prevents errors inside the property access chain, but is then guaranteed to generate an error when calling the template tag. You would probably still want to use a conditional check.\n\nNote that optional chaining is only forbidden as the tag expression. You can use optional chaining inside the embedded expressions, or use optional chaining on the tagged template expression as a whole.\n\n```\nconsole.log`Hello, ${true.constructor?.name}!`; // ['Hello, ', '!', raw: Array(2)] 'Boolean'\nconsole.log`Hello`?.toString(); // undefined\n```",
    "title": "SyntaxError: tagged template cannot be used with optional chain - JavaScript | MDN",
    "description": "The JavaScript exception \"tagged template cannot be used with optional chain\" occurs when the tag expression of a tagged template literal is an optional chain, or if there's an optional chain between the tag and the template.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Hash_outside_class",
    "markdown": "# SyntaxError: Unexpected '#' used outside of class body - JavaScript\n\nThe JavaScript exception \"Unexpected '#' used outside of class body\" occurs when a hash (\"#\") is encountered in an unexpected context, most notably [outside of a class declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties). Hashes are valid at the beginning of a file as a [hashbang comment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar), or inside of a class as part of a private field. You may encounter this error if you forget the quotation marks when trying to access a DOM identifier as well.\n\n## [Message](#message)\n\nSyntaxError: Unexpected '#' used outside of class body.\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nWe encountered a `#` somewhere unexpected. This may be due to code moving around and no longer being part of a class, a hashbang comment found on a line other than the first line of a file, or accidentally forgetting the quotation marks around a DOM identifier.\n\n## [Examples](#examples)\n\n### [Missing quotation marks](#missing_quotation_marks)\n\nFor each case, there might be something slightly wrong. For example\n\n```\ndocument.querySelector(#some-element)\n```\n\nThis can be fixed via\n\n```\ndocument.querySelector(\"#some-element\");\n```\n\n### [Outside of a class](#outside_of_a_class)\n\n```\nclass ClassWithPrivateField {\n  #privateField;\n\n  constructor() {}\n}\n\nthis.#privateField = 42;\n```\n\nThis can be fixed by moving the private field back into the class\n\n```\nclass ClassWithPrivateField {\n  #privateField;\n\n  constructor() {\n    this.#privateField = 42;\n  }\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: Unexpected '#' used outside of class body - JavaScript | MDN",
    "description": "The JavaScript exception \"Unexpected '#' used outside of class body\" occurs when a hash\n  (\"#\") is encountered in an unexpected context, most notably\n  outside of a class declaration.\n  Hashes are valid at the beginning of a file as a hashbang comment,\n  or inside of a class as part of a private field. You may encounter this error if you forget\n  the quotation marks when trying to access a DOM identifier as well.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token",
    "markdown": "# SyntaxError: Unexpected token - JavaScript\n\nThe JavaScript exceptions \"unexpected token\" occur when the parser does not see a token it recognizes at the given position, so it cannot make sense of the structure of the program. This might be a simple typo.\n\n## [Message](#message)\n\nSyntaxError: Unexpected token ';' (V8-based)\nSyntaxError: Unexpected identifier 'x' (V8-based)\nSyntaxError: Unexpected number (V8-based)\nSyntaxError: Unexpected string (V8-based)\nSyntaxError: Unexpected regular expression (V8-based)\nSyntaxError: Unexpected template string (V8-based)\n\nSyntaxError: unexpected token: identifier (Firefox)\nSyntaxError: expected expression, got \"x\" (Firefox)\nSyntaxError: expected property name, got \"x\" (Firefox)\nSyntaxError: expected target, got \"x\" (Firefox)\nSyntaxError: expected meta, got \"x\" (Firefox)\nSyntaxError: expected rest argument name, got \"x\" (Firefox)\nSyntaxError: expected closing parenthesis, got \"x\" (Firefox)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA specific language construct was expected, but something else was provided. This might be a simple typo.\n\n## [Examples](#examples)\n\n### [Expression expected](#expression_expected)\n\nFor example, when chaining expressions, trailing commas are not allowed.\n\n```\nfor (let i = 0; i < 5,; ++i) {\n  console.log(i);\n}\n// Uncaught SyntaxError: expected expression, got ';'\n```\n\nCorrect would be omitting the comma or adding another expression:\n\n```\nfor (let i = 0; i < 5; ++i) {\n  console.log(i);\n}\n```\n\n### [Not enough parentheses](#not_enough_parentheses)\n\nSometimes, you leave out parentheses around `if` statements:\n\n```\nfunction round(n, upperBound, lowerBound) {\n  if (n > upperBound) || (n < lowerBound) { // Not enough parenthese here!\n    throw new Error(`Number ${n} is more than ${upperBound} or less than ${lowerBound}`);\n  } else if (n < (upperBound + lowerBound) / 2) {\n    return lowerBound;\n  } else {\n    return upperBound;\n  }\n} // SyntaxError: expected expression, got '||'\n```\n\nThe parentheses may look correct at first, but note how the `||` is outside the parentheses. Correct would be putting parentheses around the `||`:\n\n```\nfunction round(n, upperBound, lowerBound) {\n  if ((n > upperBound) || (n < lowerBound)) {\n    throw new Error(\n      `Number ${n} is more than ${upperBound} or less than ${lowerBound}`,\n    );\n  } else if (n < (upperBound + lowerBound) / 2) {\n    return lowerBound;\n  } else {\n    return upperBound;\n  }\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: Unexpected token - JavaScript | MDN",
    "description": "The JavaScript exceptions \"unexpected token\" occur when the parser does not see a token it recognizes at the given position, so it cannot make sense of the structure of the program. This might be a simple typo.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator",
    "markdown": "# SyntaxError: missing name after . operator - JavaScript\n\nThe JavaScript exception \"missing name after . operator\" occurs when there is a problem with how the dot operator (`.`) is used for [property access](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors).\n\n## [Message](#message)\n\nSyntaxError: missing name after . operator (Firefox)\nSyntaxError: Unexpected token '\\['. Expected a property name after '.'. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe dot operator (`.`) is used for [property access](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). You will have to specify the name of the property that you want to access. For computed property access, you might need to change your property access from using a dot to using square brackets. These will allow you to compute an expression. Maybe you intended to do concatenation instead? A plus operator (`+`) is needed in that case. Please see the examples below.\n\n## [Examples](#examples)\n\n### [Property access](#property_access)\n\n[Property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) in JavaScript use either the dot (.) or square brackets (`[]`), but not both. Square brackets allow computed property access.\n\n```\nconst obj = { foo: { bar: \"baz\", bar2: \"baz2\" } };\nconst i = 2;\n\nobj.[foo].[bar]\n// SyntaxError: missing name after . operator\n\nobj.foo.\"bar\"+i;\n// SyntaxError: missing name after . operator\n```\n\nTo fix this code, you need to access the object like this:\n\n```\nobj.foo.bar; // \"baz\"\n// or alternatively\nobj[\"foo\"][\"bar\"]; // \"baz\"\n\n// computed properties require square brackets\nobj.foo[\"bar\" + i]; // \"baz2\"\n// or as template literal\nobj.foo[`bar${i}`]; // \"baz2\"\n```\n\n### [Property access vs. concatenation](#property_access_vs._concatenation)\n\nIf you are coming from another programming language (like [PHP](https://developer.mozilla.org/en-US/docs/Glossary/PHP)), it is also easy to mix up the dot operator (`.`) and the concatenation operator (`+`).\n\n```\nconsole.log(\"Hello\" . \"world\");\n\n// SyntaxError: missing name after . operator\n```\n\nInstead you need to use a plus sign for concatenation:\n\n```\nconsole.log(\"Hello\" + \"World\");\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing name after . operator - JavaScript | MDN",
    "description": "The JavaScript exception \"missing name after . operator\" occurs when there is a problem\n  with how the dot operator (.) is used\n  for property access.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation",
    "markdown": "# SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '\\*\\*' - JavaScript\n\nThe JavaScript exception \"unparenthesized unary expression can't appear on the left-hand side of '\\*\\*'\" occurs when a unary operator (one of `typeof`, `void`, `delete`, `await`, `!`, `~`, `+`, `-`) is used on the left operand of the [exponentiation operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) without parentheses.\n\n## [Message](#message)\n\nSyntaxError: Unary operator used immediately before exponentiation expression. Parenthesis must be used to disambiguate operator precedence (V8-based)\nSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '\\*\\*' (Firefox)\nSyntaxError: Unexpected token '\\*\\*'. Ambiguous unary expression in the left hand side of the exponentiation expression; parentheses must be used to disambiguate the expression. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nYou likely wrote something like this:\n\nWhether it should be evaluated as `(-a) ** b` or `-(a ** b)` is ambiguous. In mathematics, -x2 means `-(x ** 2)` — and that's how many languages, including Python, Haskell, and PHP, handle it. But making the unary minus operator take precedence over `**` breaks symmetry with `a ** -b`, which is unambiguously `a ** (-b)`. Therefore, the language forbids this syntax and requires you to parenthesize either side to resolve the ambiguity.\n\nOther unary operators cannot be the left-hand side of exponentiation either.\n\n```\nawait a ** b\n!a ** b\n+a ** b\n~a ** b\n```\n\n## [Examples](#examples)\n\nWhen writing complex math expressions involving exponentiation, you may write something like this:\n\n```\nfunction taylorSin(x) {\n  return (n) => (-1 ** n * x ** (2 * n + 1)) / factorial(2 * n + 1);\n  // SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'\n}\n```\n\nHowever, the `-1 ** n` part is illegal in JavaScript. Instead, parenthesize the left operand:\n\n```\nfunction taylorSin(x) {\n  return (n) => ((-1) ** n * x ** (2 * n + 1)) / factorial(2 * n + 1);\n}\n```\n\nThis also makes the code's intent much clearer to other readers.\n\n## [See also](#see_also)",
    "title": "SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**' - JavaScript | MDN",
    "description": "The JavaScript exception \"unparenthesized unary expression can't appear on the left-hand side of '**'\" occurs when a unary operator (one of typeof, void, delete, await, !, ~, +, -) is used on the left operand of the exponentiation operator without parentheses.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter",
    "markdown": "# SyntaxError: missing formal parameter - JavaScript\n\nThe JavaScript exception \"missing formal parameter\" occurs when your function declaration is missing valid parameters.\n\n## [Message](#message)\n\nSyntaxError: missing formal parameter (Firefox)\nSyntaxError: Unexpected number '3'. Expected a parameter pattern or a ')' in parameter list. (Safari)\nSyntaxError: Unexpected string literal \"x\". Expected a parameter pattern or a ')' in parameter list. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\n\"Formal parameter\" is a fancy way of saying \"function parameter\". Your function declaration is missing valid parameters. In the declaration of a function, the parameters must be [identifiers](https://developer.mozilla.org/en-US/docs/Glossary/Identifier), not any value like numbers, strings, or objects. Declaring functions and calling functions are two separate steps. Declarations require identifier as parameters, and only when calling (invoking) the function, you provide the values the function should use.\n\nIn [JavaScript](https://developer.mozilla.org/en-US/docs/Glossary/JavaScript), identifiers can contain only alphanumeric characters (or \"$\" or \"\\_\"), and may not start with a digit. An identifier differs from a **string** in that a string is data, while an identifier is part of the code.\n\n## [Examples](#examples)\n\n### [Provide proper function parameters](#provide_proper_function_parameters)\n\nFunction parameters must be identifiers when setting up a function. All these function declarations fail, as they are providing values for their parameters:\n\n```\nfunction square(3) {\n  return number * number;\n}\n// SyntaxError: missing formal parameter\n\nfunction greet(\"Howdy\") {\n  return greeting;\n}\n// SyntaxError: missing formal parameter\n\nfunction log({ obj: \"value\"}) {\n  console.log(arg)\n}\n// SyntaxError: missing formal parameter\n```\n\nYou will need to use identifiers in function declarations:\n\n```\nfunction square(number) {\n  return number * number;\n}\n\nfunction greet(greeting) {\n  return greeting;\n}\n\nfunction log(arg) {\n  console.log(arg);\n}\n```\n\nYou can then call these functions with the arguments you like:\n\n```\nsquare(2); // 4\n\ngreet(\"Howdy\"); // \"Howdy\"\n\nlog({ obj: \"value\" }); // { obj: \"value\" }\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing formal parameter - JavaScript | MDN",
    "description": "The JavaScript exception \"missing formal parameter\" occurs when your function\n  declaration is missing valid parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name",
    "markdown": "# SyntaxError: missing variable name - JavaScript\n\nThe JavaScript exception \"missing variable name\" is a common error. It is usually caused by omitting a variable name or a typographic error.\n\n## [Message](#message)\n\nSyntaxError: missing variable name (Firefox)\nSyntaxError: Unexpected token '='. Expected a parameter pattern or a ')' in parameter list. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA variable is missing a name. The cause is most likely a typo or a forgotten variable name. Make sure that you've provided the name of the variable before the `=` sign.\n\nWhen declaring multiple variables at the same time, make sure that the previous lines/declaration does not end with a comma instead of a semicolon.\n\n## [Examples](#examples)\n\n### [Missing a variable name](#missing_a_variable_name)\n\nIt is easy to forget to assign a name for your variable!\n\n```\nconst description = \"foo\";\n```\n\n### [Reserved keywords can't be variable names](#reserved_keywords_cant_be_variable_names)\n\nThere are a few variable names that are [reserved keywords](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords). You can't use these. Sorry :(\n\n```\nconst debugger = \"whoop\";\n// SyntaxError: missing variable name\n```\n\n### [Declaring multiple variables](#declaring_multiple_variables)\n\nPay special attention to commas when declaring multiple variables. Is there an excess comma, or did you use commas instead of semicolons? Did you remember to assign values for all your `const` variables?\n\n```\nlet x, y = \"foo\",\nconst z, = \"foo\"\n\nconst first = document.getElementById(\"one\"),\nconst second = document.getElementById(\"two\"),\n\n// SyntaxError: missing variable name\n```\n\nThe fixed version:\n\n```\nlet x,\n  y = \"foo\";\nconst z = \"foo\";\n\nconst first = document.getElementById(\"one\");\nconst second = document.getElementById(\"two\");\n```\n\n### [Arrays](#arrays)\n\n[`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) literals in JavaScript need square brackets around the values. This won't work:\n\n```\nconst arr = 1,2,3,4,5;\n// SyntaxError: missing variable name\n```\n\nThis would be correct:\n\n```\nconst arr = [1, 2, 3, 4, 5];\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: missing variable name - JavaScript | MDN",
    "description": "The JavaScript exception \"missing variable name\" is a common error.\n  It is usually caused by omitting a variable name or a typographic error.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma",
    "markdown": "# SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead - JavaScript\n\nThe JavaScript warning \"Using `//@` to indicate sourceURL pragmas is deprecated. Use `//#` instead\" occurs when there is a deprecated source map syntax in a JavaScript source.\n\n## [Message](#message)\n\nWarning: SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead\n\nWarning: SyntaxError: Using //@ to indicate sourceMappingURL pragmas is deprecated. Use //# instead\n\n## [Error type](#error_type)\n\nA warning that a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) occurred. JavaScript execution won't be halted.\n\n## [What went wrong?](#what_went_wrong)\n\nThere is a deprecated source map syntax in a JavaScript source.\n\nJavaScript sources are often combined and minified to make delivering them from the server more efficient. With [source maps](https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/use_a_source_map/index.html), the debugger can map the code being executed to the original source files.\n\nThe source map specification changed the syntax due to a conflict with IE whenever it was found in the page after `//@cc_on` was interpreted to turn on conditional compilation in the IE JScript engine. The [conditional compilation comment](https://stackoverflow.com/questions/24473882/what-does-this-comment-cc-on-0-do-inside-an-if-statement-in-javascript) in IE is a little known feature, but it broke source maps with [jQuery](https://bugs.jquery.com/ticket/13274) and other libraries.\n\n## [Examples](#examples)\n\n### [Deprecated syntax](#deprecated_syntax)\n\nSyntax with the \"@\" sign is deprecated.\n\n```\n//@ sourceMappingURL=http://example.com/path/to/your/sourcemap.map\n```\n\n### [Standard syntax](#standard_syntax)\n\nUse the \"#\" sign instead.\n\n```\n//# sourceMappingURL=http://example.com/path/to/your/sourcemap.map\n```\n\nOr, alternatively, you can set a [`SourceMap`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/SourceMap) header to your JavaScript file to avoid having a comment at all:\n\n```\nSourceMap: /path/to/file.js.map\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead - JavaScript | MDN",
    "description": "The JavaScript warning \"Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead\" occurs when there is a deprecated source map syntax in a JavaScript source.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_new_optional",
    "markdown": "# SyntaxError: new keyword cannot be used with an optional chain - JavaScript\n\nThere are two ways to get this error. The first one is if the constructor expression is an optional chain expression, like this:\n\n```\nnew Intl?.DateTimeFormat();\nNumber?.[parseMethod]`Hello, world!`;\n```\n\nThe second one is if `?.` occurs between the constructor and the arguments list, like this:\n\n```\nnew Intl.DateTimeFormat?.();\n```\n\nOptional `new` is specifically forbidden because its syntax is complicated (`new` with and without arguments), and the result is unclear (it would be the only case where `new` does not evaluate to an object value). You need to translate the optional chaining to its underlying condition (see [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) for more information).\n\n```\nconst result =\n  Intl.DateTimeFormat === null || Intl.DateTimeFormat === undefined\n    ? undefined\n    : new Intl.DateTimeFormat();\n```\n\nRemember that optional chaining only short-circuits within a parenthesized unit. If you parenthesize your constructor expression, the optional chaining will not cause an error, because now the constructor does not short-circuit and the result is clear (the constructor will produce `undefined` and then cause the `new` expression to throw).\n\n```\nnew (Intl?.DateTimeFormat)(); // Throws if Intl?.DateTimeFormat is undefined\n```\n\nHowever this is a bit nonsensical anyway because optional chaining prevents errors inside the property access chain, but is then guaranteed to generate an error when calling `new`. You would probably still want to use a conditional check.\n\nNote that optional chaining is only forbidden as the constructor expression. You can use optional chaining inside the argument list, or use optional chaining on the `new` expression as a whole.\n\n```\nnew Intl.DateTimeFormat(navigator?.languages);\nnew Intl.DateTimeFormat().resolvedOptions?.();\n```\n\nNote that there's no needs to use `?.` on the `new` expression itself: `new a()?.b`, because `new` is guaranteed to produce a non-nullish object value.",
    "title": "SyntaxError: new keyword cannot be used with an optional chain - JavaScript | MDN",
    "description": "The JavaScript exception \"new keyword cannot be used with an optional chain\" occurs when the constructor of a new expression is an optional chain, or if there's an optional chain between the constructor and the parenthesized list of arguments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties",
    "markdown": "# TypeError: \"x\" has no properties - JavaScript\n\nThe JavaScript exception \"null (or undefined) has no properties\" occurs when you attempt to access properties of [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). They don't have any.\n\n## [Message](#message)\n\nTypeError: Cannot read properties of undefined (reading 'x') (V8-based)\nTypeError: null has no properties (Firefox)\nTypeError: undefined has no properties (Firefox)\nTypeError: undefined is not an object (evaluating 'undefined.x') (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nBoth [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), have no properties you could access.\n\n## [Examples](#examples)\n\n### [null and undefined have no properties](#null_and_undefined_have_no_properties)\n\n```\nnull.foo;\n// TypeError: null has no properties\n\nundefined.bar;\n// TypeError: undefined has no properties\n```\n\n## [See also](#see_also)",
    "title": "TypeError: \"x\" has no properties - JavaScript | MDN",
    "description": "The JavaScript exception \"null (or undefined) has no properties\" occurs when you\n  attempt to access properties of null and undefined. They\n  don't have any.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type",
    "markdown": "# TypeError: \"x\" is (not) \"y\" - JavaScript\n\nThe JavaScript exception \"_x_ is (not) _y_\" occurs when there was an unexpected type. Oftentimes, unexpected [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) values.\n\n## [Message](#message)\n\nTypeError: Cannot read properties of undefined (reading 'x') (V8-based)\nTypeError: \"x\" is undefined (Firefox)\nTypeError: \"undefined\" is not an object (Firefox)\nTypeError: undefined is not an object (evaluating 'obj.x') (Safari)\n\nTypeError: \"x\" is not a symbol (V8-based & Firefox)\nTypeError: Symbol.keyFor requires that the first argument be a symbol (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere was an unexpected type. This occurs oftentimes with [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) values.\n\nAlso, certain methods, such as [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) or [`Symbol.keyFor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor), require a specific type, that must be provided.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\nYou cannot invoke a method on an `undefined` or `null` variable.\n\n```\nconst foo = undefined;\nfoo.substring(1); // TypeError: foo is undefined\n\nconst foo2 = null;\nfoo2.substring(1); // TypeError: foo2 is null\n```\n\nCertain methods might require a specific type.\n\n```\nconst foo = {};\nSymbol.keyFor(foo); // TypeError: foo is not a symbol\n\nconst foo2 = \"bar\";\nObject.create(foo2); // TypeError: \"foo2\" is not an object or null\n```\n\n### [Fixing the issue](#fixing_the_issue)\n\nTo fix null pointer to `undefined` or `null` values, you can test if the value is `undefined` or `null` first.\n\n```\nif (foo !== undefined && foo !== null) {\n  // Now we know that foo is defined, we are good to go.\n}\n```\n\nOr, if you are confident that `foo` will not be another [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value like `\"\"` or `0`, or if filtering those cases out is not an issue, you can simply test for its truthiness.\n\n```\nif (foo) {\n  // Now we know that foo is truthy, it will necessarily not be null/undefined.\n}\n```\n\n## [See also](#see_also)",
    "title": "TypeError: \"x\" is (not) \"y\" - JavaScript | MDN",
    "description": "The JavaScript exception \"x is (not) y\" occurs when there was an\n  unexpected type. Oftentimes, unexpected undefined or null\n  values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/is_not_iterable",
    "markdown": "# TypeError: 'x' is not iterable - JavaScript\n\nThe JavaScript exception \"is not iterable\" occurs when the value which is [spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) into an array or function call, given as the right-hand side of [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement), as argument of a function such as [`Promise.all`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) or [`Set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set), or as the right-hand side of an array [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), is not an [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols). This error is also encountered when [`Array.fromAsync()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync) or [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) is used with a [non-async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols).\n\n## [Message](#message)\n\nTypeError: Spread syntax requires ...iterable\\[Symbol.iterator\\] to be a function (V8-based & Safari)\nTypeError: %Array%.from requires that the property of the first argument, items\\[Symbol.iterator\\], when exists, be a function (V8-based & Safari)\nTypeError: Array.fromAsync requires that the property of the first argument, items\\[Symbol.asyncIterator\\], when exists, be a function (V8-based & Safari)\nTypeError: object is not iterable (cannot read property Symbol(Symbol.iterator)) (V8-based)\nTypeError: x is not async iterable (V8-based)\nTypeError: x is not iterable (V8-based & Firefox)\nTypeError: undefined is not a function (near '...y of x...') (Safari)\nTypeError: Array.from: no function (Safari)\nTypeError: Type error (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe value which is [spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) into an array or function call, given as the right-hand side of [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement), or as argument of a function such as [`Promise.all`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) or [`Set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set), or as the right-hand side of an array [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), is not an [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols). An iterable can be a built-in iterable type such as [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), a generator result, or an object implementing the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol).\n\n```\nconst nonIterable1 = {};\nconst nonIterable2 = { [Symbol.iterator]: 1 };\n\n[...nonIterable1];\nMath.max(...nonIterable1);\nfor (const x of nonIterable1);\nnew Set(nonIterable1);\nArray.from(nonIterable2);\nnew Int8Array(nonIterable2);\nconst [] = nonIterable1;\n```\n\n## [Examples](#examples)\n\n### [Array destructuring a non-iterable](#array_destructuring_a_non-iterable)\n\n```\nconst myobj = { arrayOrObjProp1: {}, arrayOrObjProp2: [42] };\n\nconst {\n  arrayOrObjProp1: [value1],\n  arrayOrObjProp2: [value2],\n} = myobj; // TypeError: object is not iterable\n\nconsole.log(value1, value2);\n```\n\nThe non-iterable might turn to be `undefined` in some runtime environments.\n\n### [Iterating over Object properties](#iterating_over_object_properties)\n\nIn JavaScript, [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)s are not iterable unless they implement the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol). Therefore, you cannot use [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement) to iterate over the properties of an object.\n\n```\nconst obj = { France: \"Paris\", England: \"London\" };\nfor (const p of obj) {\n  // …\n} // TypeError: obj is not iterable\n```\n\nInstead you have to use [`Object.keys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) or [`Object.entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries), to iterate over the properties or entries of an object.\n\n```\nconst obj = { France: \"Paris\", England: \"London\" };\n// Iterate over the property names:\nfor (const country of Object.keys(obj)) {\n  const capital = obj[country];\n  console.log(country, capital);\n}\n\nfor (const [country, capital] of Object.entries(obj)) {\n  console.log(country, capital);\n}\n```\n\nAnother option for this use case might be to use a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map):\n\n```\nconst map = new Map();\nmap.set(\"France\", \"Paris\");\nmap.set(\"England\", \"London\");\n// Iterate over the property names:\nfor (const country of map.keys()) {\n  const capital = map.get(country);\n  console.log(country, capital);\n}\n\nfor (const capital of map.values()) {\n  console.log(capital);\n}\n\nfor (const [country, capital] of map.entries()) {\n  console.log(country, capital);\n}\n```\n\n### [Iterating over a generator](#iterating_over_a_generator)\n\n[Generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators#generator_functions) are functions you call to produce an iterable object.\n\n```\nfunction* generate(a, b) {\n  yield a;\n  yield b;\n}\n\nfor (const x of generate) {\n  console.log(x);\n} // TypeError: generate is not iterable\n```\n\nWhen they are not called, the [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) object corresponding to the generator is callable, but not iterable. Calling a generator produces an iterable object which will iterate over the values yielded during the execution of the generator.\n\n```\nfunction* generate(a, b) {\n  yield a;\n  yield b;\n}\n\nfor (const x of generate(1, 2)) {\n  console.log(x);\n}\n```\n\n### [Iterating over a custom iterable](#iterating_over_a_custom_iterable)\n\nCustom iterables can be created by implementing the [`Symbol.iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method. You must be certain that your iterator method returns an object which is an iterator, which is to say it must have a next method.\n\n```\nconst myEmptyIterable = {\n  [Symbol.iterator]() {\n    return []; // [] is iterable, but it is not an iterator — it has no next method.\n  },\n};\n\nArray.from(myEmptyIterable); // TypeError: myEmptyIterable is not iterable\n```\n\nHere is a correct implementation:\n\n```\nconst myEmptyIterable = {\n  [Symbol.iterator]() {\n    return [][Symbol.iterator]();\n  },\n};\n\nArray.from(myEmptyIterable); // []\n```\n\n## [See also](#see_also)",
    "title": "TypeError: 'x' is not iterable - JavaScript | MDN",
    "description": "The JavaScript exception \"is not iterable\" occurs when the value which is spread into an array or function call, given as the\n  right-hand side of for...of,\n  as argument of a function such as Promise.all or Set(),\n  or as the right-hand side of an array destructuring assignment,\n  is not an iterable object. This error is also encountered when Array.fromAsync() or for await...of is used with a non-async iterable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor",
    "markdown": "# TypeError: \"x\" is not a constructor - JavaScript\n\nThe JavaScript exception \"is not a constructor\" occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.\n\n## [Message](#message)\n\nTypeError: x is not a constructor (V8-based & Firefox & Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See [constructor](https://developer.mozilla.org/en-US/docs/Glossary/Constructor) or the [`new` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) for more information on what a constructor is.\n\nThere are many global objects, like [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), which are constructable using `new`. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math), [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON), [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), [`Reflect`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect), [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl), [`Atomics`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics).\n\n[Generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) cannot be used as constructors either.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nconst Car = 1;\nnew Car();\n// TypeError: Car is not a constructor\n\nnew Math();\n// TypeError: Math is not a constructor\n\nnew Symbol();\n// TypeError: Symbol is not a constructor\n\nfunction* f() {}\nconst obj = new f();\n// TypeError: f is not a constructor\n```\n\n### [A car constructor](#a_car_constructor)\n\nSuppose you want to create an object type for cars. You want this type of object to be called `Car`, and you want it to have properties for make, model, and year. To do this, you would write the following function:\n\n```\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n```\n\nNow you can create an object called `mycar` as follows:\n\n```\nconst mycar = new Car(\"Eagle\", \"Talon TSi\", 1993);\n```\n\n### [In Promises](#in_promises)\n\nWhen returning an immediately-resolved or immediately-rejected Promise, you do not need to create a `new Promise(...)` and act on it. Instead, use the [`Promise.resolve()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) or [`Promise.reject()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject) [static methods](https://en.wikipedia.org/wiki/Method_(computer_programming)#Static_methods).\n\nThis is not legal (the [`Promise` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) is not being called correctly) and will throw a `TypeError: this is not a constructor` exception:\n\n```\nconst fn = () => {\n  return new Promise.resolve(true);\n};\n```\n\nThis is legal, but unnecessarily long:\n\n```\nconst fn = () => {\n  return new Promise((resolve, reject) => {\n    resolve(true);\n  });\n};\n```\n\nInstead, return the static method:\n\n```\nconst resolveAlways = () => {\n  return Promise.resolve(true);\n};\n\nconst rejectAlways = () => {\n  return Promise.reject(false);\n};\n```\n\n## [See also](#see_also)",
    "title": "TypeError: \"x\" is not a constructor - JavaScript | MDN",
    "description": "The JavaScript exception \"is not a constructor\" occurs when there was an attempt to use\n  an object or a variable as a constructor, but that object or variable is not a\n  constructor.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete_private_fields",
    "markdown": "# SyntaxError: private fields can't be deleted - JavaScript\n\nThe JavaScript exception \"SyntaxError: private fields can't be deleted\" occurs when [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) is used on a [private property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) of a class or an object.\n\n## [Message](#message)\n\nSyntaxError: Private fields can not be deleted (V8-based)\nSyntaxError: private fields can't be deleted (Firefox)\nSyntaxError: Cannot delete private field X (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere's code trying to `delete` a private property (field or method) of an object or a class. This is forbidden by Javascript—private properties cannot be added or removed on the fly.\n\n## [Examples](#examples)\n\n```\nclass MyClass {\n  #myPrivateField;\n  deleteIt() {\n    delete this.#myPrivateField; // SyntaxError: private fields can't be deleted\n  }\n}\n```\n\n```\nclass MyClass {\n  #myPrivateMethod() {\n  }\n  #deleteIt() {\n    delete this.#myPrivateMethod; // SyntaxError: private fields can't be deleted\n  }\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: private fields can't be deleted - JavaScript | MDN",
    "description": "The JavaScript exception \"SyntaxError: private fields can't be deleted\" occurs when delete is used on a private property of a class or an object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_break",
    "markdown": "# SyntaxError: unlabeled break must be inside loop or switch - JavaScript\n\nThe JavaScript exception \"unlabeled break must be inside loop or switch\" occurs when a [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) statement is not inside a loop or a [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) statement.\n\n## [Message](#message)\n\nSyntaxError: Illegal break statement (V8-based)\nSyntaxError: unlabeled break must be inside loop or switch (Firefox)\nSyntaxError: 'break' is only valid inside a switch or loop statement. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\n[`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) statements can be used to exit a loop or a `switch` statement, and using them elsewhere is a syntax error. Alternatively, you can provide a [label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) to the `break` statement to break out of any statement with that label — however, if the label does not reference a containing statement, another error [SyntaxError: label not found](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Label_not_found) will be thrown.\n\n## [Examples](#examples)\n\n### [Unsyntactic break](#unsyntactic_break)\n\n`break` cannot be used outside `switch` or loops.\n\n```\nlet score = 0;\n\nfunction increment() {\n  if (score === 100)\n    break; // SyntaxError: unlabeled break must be inside loop or switch\n  }\n  score++;\n}\n```\n\nMaybe instead of `break`, you intend to use [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) to early-terminate a function.\n\n```\nlet score = 0;\n\nfunction increment() {\n  if (score === 100) {\n    return;\n  }\n  score++;\n}\n```\n\n### [Using break in callbacks](#using_break_in_callbacks)\n\n`break` cannot be used in callbacks, even if the callback is called from a loop.\n\n```\nlet containingIndex = 0;\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nwhile (containingIndex < matrix.length) {\n  matrix[containingIndex].forEach((value) => {\n    if (value === 5) {\n      break; // SyntaxError: unlabeled break must be inside loop or switch\n    }\n  });\n  containingIndex++;\n}\n```\n\nInstead, refactor the code so the `break` is used outside the callback.\n\n```\nlet containingIndex = 0;\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nouter: while (containingIndex < matrix.length) {\n  for (const value of matrix[containingIndex]) {\n    if (value === 5) {\n      break outer;\n    }\n  }\n  containingIndex++;\n}\n```\n\n```\nlet containingIndex = 0;\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nwhile (containingIndex < matrix.length) {\n  if (matrix[containingIndex].includes(5)) {\n    break;\n  }\n  containingIndex++;\n}\n```\n\nThere's no way to early-terminate a [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) loop. You can use [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) instead, or convert it to a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.\n\n```\narray.forEach((value) => {\n  if (value === 5) {\n    break; // SyntaxError: unlabeled break must be inside loop or switch\n  }\n  // do something with value\n});\n```\n\n```\narray.some((value) => {\n  if (value === 5) {\n    return true;\n  }\n  // do something with value\n  return false;\n});\n```\n\n```\nfor (const value of array) {\n  if (value === 5) {\n    break;\n  }\n  // do something with value\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: unlabeled break must be inside loop or switch - JavaScript | MDN",
    "description": "The JavaScript exception \"unlabeled break must be inside loop or switch\" occurs when a break statement is not inside a loop or a switch statement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter",
    "markdown": "# SyntaxError: redeclaration of formal parameter \"x\" - JavaScript\n\nThe JavaScript exception \"redeclaration of formal parameter\" occurs when the same variable name occurs as a function parameter and is then redeclared using a [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) assignment in a function body again.\n\n## [Message](#message)\n\nSyntaxError: Identifier \"x\" has already been declared (V8-based)\nSyntaxError: redeclaration of formal parameter \"x\" (Firefox)\nSyntaxError: Cannot declare a let variable twice: 'x'. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe same variable name occurs as a function parameter and is then redeclared using a [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) assignment in a function body again. Redeclaring the same variable within the same function or block scope using `let` is not allowed in JavaScript.\n\n## [Examples](#examples)\n\n### [Redeclared argument](#redeclared_argument)\n\nIn this case, the variable \"arg\" redeclares the argument.\n\n```\nfunction f(arg) {\n  let arg = \"foo\";\n}\n\n// SyntaxError: redeclaration of formal parameter \"arg\"\n```\n\nIf you want to change the value of \"arg\" in the function body, you can do so, but you do not need to declare the same variable again. In other words: you can omit the `let` keyword. If you want to create a new variable, you need to rename it as conflicts with the function parameter already.\n\n```\nfunction f(arg) {\n  arg = \"foo\";\n}\n\nfunction g(arg) {\n  let bar = \"foo\";\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: redeclaration of formal parameter \"x\" - JavaScript | MDN",
    "description": "The JavaScript exception \"redeclaration of formal parameter\" occurs when the same\n  variable name occurs as a function parameter and is then redeclared using a\n  let assignment in a function body again.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Parameter_after_rest_parameter",
    "markdown": "# SyntaxError: parameter after rest parameter - JavaScript\n\nThe JavaScript exception \"parameter after rest parameter\" occurs when a [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) is followed by anything else in a parameter list, including another rest parameter, a formal parameter, or a [trailing comma](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas).\n\n## [Message](#message)\n\nSyntaxError: Rest parameter must be last formal parameter (V8-based)\nSyntaxError: parameter after rest parameter (Firefox)\nSyntaxError: Unexpected token ','. Rest parameter should be the last parameter in a function declaration. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA rest parameter must be the last parameter in a function definition. This is because the rest parameter collects all the remaining arguments passed to the function, so it doesn't make sense to have any parameters after it. The next non-whitespace character must be the closing parenthesis of the parameter list.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nfunction replacer(match, ...groups, offset, string) {}\n\nfunction doSomething(\n  arg1,\n  arg2,\n  ...otherArgs, // Accidental trailing comma\n) {}\n```\n\n### [Valid cases](#valid_cases)\n\n```\nfunction replacer(match, ...args) {\n  const offset = args.at(-2);\n  const string = args.at(-1);\n}\n\nfunction doSomething(arg1, arg2, ...otherArgs) {}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: parameter after rest parameter - JavaScript | MDN",
    "description": "The JavaScript exception \"parameter after rest parameter\" occurs when a rest parameter is followed by anything else in a parameter list, including another rest parameter, a formal parameter, or a trailing comma.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_private_field_or_method",
    "markdown": "# SyntaxError: reference to undeclared private field or method #x - JavaScript\n\nThe JavaScript exception \"reference to undeclared private field or method #x\" occurs when a [private name](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) is used, but this private name is not declared in the class scope.\n\n## [Message](#message)\n\nSyntaxError: Private field '#x' must be declared in an enclosing class (V8-based)\nSyntaxError: reference to undeclared private field or method #x (Firefox)\nSyntaxError: Cannot reference undeclared private names: \"#x\" (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nUnlike normal string or symbol properties, which return `undefined` if the property does not exist, private names are very strict and can only be legally accessed if they actually exist. Accessing an undeclared private name will result in a syntax error, while accessing a private name that is declared but doesn't exist on the object will result in a [type error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Get_set_missing_private).\n\n## [Examples](#examples)\n\n### [Undeclared private field](#undeclared_private_field)\n\nYou cannot access a private field that is not declared in the class scope.\n\n```\nclass MyClass {\n  doSomething() {\n    console.log(this.#x);\n  }\n}\n```\n\nThe same error occurs if you use the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator to perform a check on an undeclared private field.\n\n```\nclass MyClass {\n  doSomething() {\n    console.log(#x in this);\n  }\n}\n```\n\nThese code are probably mistakes because it's impossible for `#x` to exist on `this` if it's not declared in the class scope. Note that you cannot dynamically _add_ private properties to unrelated objects. You should either remove this code or declare the private field in the class scope.\n\n```\nclass MyClass {\n  #x = 0;\n  doSomething() {\n    console.log(this.#x);\n  }\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: reference to undeclared private field or method #x - JavaScript | MDN",
    "description": "The JavaScript exception \"reference to undeclared private field or method #x\" occurs when a private name is used, but this private name is not declared in the class scope.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_escape_sequence",
    "markdown": "# SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code - JavaScript\n\nThe JavaScript exception \"octal escape sequences can't be used in untagged template literals or in strict mode code\" occurs when octal escape sequences are used in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) string literals or untagged template literals.\n\n## [Message](#message)\n\nSyntaxError: Octal escape sequences are not allowed in strict mode. (V8-based)\nSyntaxError: \\\\8 and \\\\9 are not allowed in strict mode. (V8-based)\nSyntaxError: Octal escape sequences are not allowed in template strings. (V8-based)\nSyntaxError: \\\\8 and \\\\9 are not allowed in template strings. (V8-based)\nSyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code (Firefox)\nSyntaxError: the escapes \\\\8 and \\\\9 can't be used in untagged template literals or in strict mode code (Firefox)\nSyntaxError: The only valid numeric escape in strict mode is '\\\\0' (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [string escape sequence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences) of the form `\\` followed by any number of digits, except a single `0`, is deprecated. If you want to represent a character by its code point value, you should use the `\\x` or `\\u` escape sequence instead, such as `\\x01` or `\\u0001` instead of `\\1`.\n\n[Untagged template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) are never allowed to contain octal escape sequences, whether in strict mode or not. However, _tagged_ template literals can contain any form of escape sequence, and will cause the template array received by the tag function to contain `undefined`.\n\n## [Examples](#examples)\n\n### [Octal escape sequences](#octal_escape_sequences)\n\n```\n\"use strict\";\n\n\"\\251\";\n\n// SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code\n```\n\n### [Valid octal numbers](#valid_octal_numbers)\n\nFor octal escape sequences, you can use hexadecimal escape sequences instead:\n\nIf you want to represent some source text literally without interpreting any escape sequence, use [`String.raw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw):\n\n```\nString.raw`\\251`; // A string containing four characters\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code - JavaScript | MDN",
    "description": "The JavaScript exception \"octal escape sequences can't be used in untagged template literals or in strict mode code\" occurs when octal escape sequences are used in strict mode string literals or untagged template literals.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function",
    "markdown": "# TypeError: \"x\" is not a function - JavaScript\n\nThe JavaScript exception \"is not a function\" occurs when there was an attempt to call a value from a function, but the value is not actually a function.\n\n## [Message](#message)\n\nTypeError: \"x\" is not a function. (V8-based & Firefox & Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nIt attempted to call a value from a function, but the value is not actually a function. Some code expects you to provide a function, but that didn't happen.\n\nMaybe there is a typo in the function name? Maybe the object you are calling the method on does not have this function? For example, JavaScript `Objects` have no `map` function, but the JavaScript `Array` object does.\n\nThere are many built-in functions in need of a (callback) function. You will have to provide a function in order to have these methods working properly:\n\n*   When working with [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) objects:\n    *   [`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every), [`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some), [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach), [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce), [`Array.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight), [`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n*   When working with [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) objects:\n    *   [`Map.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach) and [`Set.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach)\n\n## [Examples](#examples)\n\n### [A typo in the function name](#a_typo_in_the_function_name)\n\nIn this case, which happens way too often, there is a typo in the method name:\n\n```\nconst x = document.getElementByID(\"foo\");\n// TypeError: document.getElementByID is not a function\n```\n\nThe correct function name is `getElementById`:\n\n```\nconst x = document.getElementById(\"foo\");\n```\n\n### [Function called on the wrong object](#function_called_on_the_wrong_object)\n\nFor certain methods, you have to provide a (callback) function and it will work on specific objects only. In this example, [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) is used, which will work with [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) objects only.\n\n```\nconst obj = { a: 13, b: 37, c: 42 };\n\nobj.map(function (num) {\n  return num * 2;\n});\n\n// TypeError: obj.map is not a function\n```\n\nUse an array instead:\n\n```\nconst numbers = [1, 4, 9];\n\nnumbers.map(function (num) {\n  return num * 2;\n}); // [2, 8, 18]\n```\n\n### [Function shares a name with a pre-existing property](#function_shares_a_name_with_a_pre-existing_property)\n\nSometimes when making a class, you may have a property and a function with the same name. Upon calling the function, the compiler thinks that the function ceases to exist.\n\n```\nfunction Dog() {\n  this.age = 11;\n  this.color = \"black\";\n  this.name = \"Ralph\";\n  return this;\n}\n\nDog.prototype.name = function (name) {\n  this.name = name;\n  return this;\n};\n\nconst myNewDog = new Dog();\nmyNewDog.name(\"Cassidy\"); //Uncaught TypeError: myNewDog.name is not a function\n```\n\nUse a different property name instead:\n\n```\nfunction Dog() {\n  this.age = 11;\n  this.color = \"black\";\n  this.dogName = \"Ralph\"; //Using this.dogName instead of .name\n  return this;\n}\n\nDog.prototype.name = function (name) {\n  this.dogName = name;\n  return this;\n};\n\nconst myNewDog = new Dog();\nmyNewDog.name(\"Cassidy\"); //Dog { age: 11, color: 'black', dogName: 'Cassidy' }\n```\n\n### [Using parenthese for multiplication](#using_parenthese_for_multiplication)\n\nIn math, you can write 2 × (3 + 5) as 2\\*(3 + 5) or just 2(3 + 5).\n\nUsing the latter will throw an error:\n\n```\nconst sixteen = 2(3 + 5);\nconsole.log(`2 x (3 + 5) is ${sixteen}`);\n// Uncaught TypeError: 2 is not a function\n```\n\nYou can correct the code by adding a `*` operator:\n\n```\nconst sixteen = 2 * (3 + 5);\nconsole.log(`2 x (3 + 5) is ${sixteen}`);\n// 2 x (3 + 5) is 16\n```\n\n### [Import the exported module correctly](#import_the_exported_module_correctly)\n\nEnsure you are importing the module correctly.\n\nAn example helpers library (`helpers.js`)\n\n```\nconst helpers = function () {};\n\nhelpers.groupBy = function (objectArray, property) {\n  return objectArray.reduce((acc, obj) => {\n    const key = obj[property];\n    acc[key] ??= [];\n    acc[key].push(obj);\n    return acc;\n  }, {});\n};\n\nexport default helpers;\n```\n\nThe correct import usage (`App.js`):\n\n```\nimport helpers from \"./helpers\";\n```\n\n## [See also](#see_also)",
    "title": "TypeError: \"x\" is not a function - JavaScript | MDN",
    "description": "The JavaScript exception \"is not a function\" occurs when there was an attempt to call a\n  value from a function, but the value is not actually a function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Rest_with_default",
    "markdown": "# SyntaxError: rest parameter may not have a default - JavaScript\n\nThe JavaScript exception \"rest parameter may not have a default\" occurs when a [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) has a [default value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters). Because the rest parameter always creates an array, the default value would never apply.\n\n## [Message](#message)\n\nSyntaxError: Rest parameter may not have a default initializer (V8-based)\nSyntaxError: rest parameter may not have a default (Firefox)\nSyntaxError: Unexpected token '='. Expected a ')' or a ',' after a parameter declaration. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA [default parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) gives a parameter a default value if the argument is not passed or passed as `undefined`. A [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) collects all the remaining arguments passed to the function and always creates an array. Therefore, it doesn't make sense to have a default value for a rest parameter.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nfunction doSomething(...args = []) {}\n```\n\n### [Valid cases](#valid_cases)\n\n```\nfunction doSomething(...args) {\n  // args is always an array\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: rest parameter may not have a default - JavaScript | MDN",
    "description": "The JavaScript exception \"rest parameter may not have a default\" occurs when a rest parameter has a default value. Because the rest parameter always creates an array, the default value would never apply.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object",
    "markdown": "# TypeError: \"x\" is not a non-null object - JavaScript\n\nThe JavaScript exception \"is not a non-null object\" occurs when an object is expected somewhere and wasn't provided. [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) is not an object and won't work.\n\n## [Message](#message)\n\nTypeError: Property description must be an object: x (V8-based)\nTypeError: Property descriptor must be an object, got \"x\" (Firefox)\nTypeError: Property description must be an object. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nAn object is expected somewhere and wasn't provided. [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) is not an object and won't work. You must provide a proper object in the given situation.\n\n## [Examples](#examples)\n\n### [Property descriptor expected](#property_descriptor_expected)\n\nWhen methods like [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) or [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) and [`Object.defineProperties()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties) are used, the optional descriptor parameter expects a property descriptor object. Providing no object (like just a number), will throw an error:\n\n```\nObject.defineProperty({}, \"key\", 1);\n// TypeError: 1 is not a non-null object\n\nObject.defineProperty({}, \"key\", null);\n// TypeError: null is not a non-null object\n```\n\nA valid property descriptor object might look like this:\n\n```\nObject.defineProperty({}, \"key\", { value: \"foo\", writable: false });\n```\n\n## [See also](#see_also)",
    "title": "TypeError: \"x\" is not a non-null object - JavaScript | MDN",
    "description": "The JavaScript exception \"is not a non-null object\" occurs when an object is expected\n  somewhere and wasn't provided. null is not an object and won't work.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Read-only",
    "markdown": "# TypeError: \"x\" is read-only - JavaScript\n\nThe JavaScript [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\-only exception \"is read-only\" occurs when a global variable or object property that was assigned to is a read-only property.\n\n## [Message](#message)\n\nTypeError: Cannot assign to read only property 'x' of #<Object> (V8-based)\nTypeError: \"x\" is read-only (Firefox)\nTypeError: Attempted to assign to readonly property. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe global variable or object property that was assigned to is a read-only property. (Technically, it is a [non-writable data property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#writable_attribute).)\n\nThis error happens only in [strict mode code](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). In non-strict code, the assignment is silently ignored.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\nRead-only properties are not super common, but they can be created using [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) or [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze).\n\n```\n\"use strict\";\nconst obj = Object.freeze({ name: \"Elsa\", score: 157 });\nobj.score = 0; // TypeError\n\n(\"use strict\");\nObject.defineProperty(this, \"LUNG_COUNT\", { value: 2, writable: false });\nLUNG_COUNT = 3; // TypeError\n\n(\"use strict\");\nconst frozenArray = Object.freeze([0, 1, 2]);\nfrozenArray[0]++; // TypeError\n```\n\nThere are also a few read-only properties built into JavaScript. Maybe you tried to redefine a mathematical constant.\n\n```\n\"use strict\";\nMath.PI = 4; // TypeError\n```\n\nSorry, you can't do that.\n\nThe global variable `undefined` is also read-only, so you can't silence the infamous \"undefined is not a function\" error by doing this:\n\n```\n\"use strict\";\nundefined = function () {}; // TypeError: \"undefined\" is read-only\n```\n\n### [Valid cases](#valid_cases)\n\n```\n\"use strict\";\nlet obj = Object.freeze({ name: \"Score\", points: 157 });\nobj = { name: obj.name, points: 0 }; // replacing it with a new object works\n```\n\n## [See also](#see_also)",
    "title": "TypeError: \"x\" is read-only - JavaScript | MDN",
    "description": "The JavaScript strict mode-only exception\n  \"is read-only\" occurs when a global variable or object\n  property that was assigned to is a read-only property.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Setter_one_argument",
    "markdown": "# SyntaxError: setter functions must have one argument - JavaScript\n\nThe JavaScript exception \"setter functions must have one argument\" occurs when a [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) is declared and the parameter list is not consisted of exactly one formal parameter.\n\n## [Message](#message)\n\nSyntaxError: Setter must have exactly one formal parameter. (V8-based)\nSyntaxError: Setter function argument must not be a rest parameter (V8-based)\nSyntaxError: setter functions must have one argument (Firefox)\nSyntaxError: Unexpected token ','. setter functions must have one parameter. (Safari)\nSyntaxError: Unexpected token '...'. Expected a parameter pattern or a ')' in parameter list. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [`set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) property syntax looks like a function, but it is stricter and not all function syntax is allowed. A setter is always invoked with exactly one argument, so defining it with any other number of parameters is likely an error. This parameter can be [destructured](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) or have a [default value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), but it cannot be a [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n\nNote that this error only applies to property setters using the `set` syntax. If you define the setter using [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), etc., the setter is defined as a normal function, although it's likely still an error if the setter expects any other number of arguments, as it will be called with exactly one.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nconst obj = {\n  set value() {\n    this._value = Math.random();\n  },\n};\n```\n\n### [Valid cases](#valid_cases)\n\n```\n// You must declare one parameter, even if you don't use it\nconst obj = {\n  set value(_ignored) {\n    this._value = Math.random();\n  },\n};\n\n// You can also declare a normal method instead\nconst obj = {\n  setValue() {\n    this._value = Math.random();\n  },\n};\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: setter functions must have one argument - JavaScript | MDN",
    "description": "The JavaScript exception \"setter functions must have one argument\" occurs when a setter is declared and the parameter list is not consisted of exactly one formal parameter.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return",
    "markdown": "# SyntaxError: return not in function - JavaScript\n\nThe JavaScript exception \"return not in function\" occurs when a [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement is called outside of a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions).\n\n## [Message](#message)\n\nSyntaxError: Illegal return statement (V8-based)\nSyntaxError: return not in function (Firefox)\nSyntaxError: Return statements are only valid inside functions. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement is called outside of a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions). Maybe there are missing curly braces somewhere? The `return` statement must be in a function, because it ends function execution and specifies a value to be returned to the function caller.\n\n## [Examples](#examples)\n\n### [Missing curly braces](#missing_curly_braces)\n\n```\nfunction cheer(score) {\n  if (score === 147)\n    return \"Maximum!\";\n  }\n  if (score > 100) {\n    return \"Century!\";\n  }\n}\n\n// SyntaxError: return not in function\n```\n\nThe curly braces look correct at a first glance, but this code snippet is missing a `{` after the first `if` statement. Correct would be:\n\n```\nfunction cheer(score) {\n  if (score === 147) {\n    return \"Maximum!\";\n  }\n  if (score > 100) {\n    return \"Century!\";\n  }\n}\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: return not in function - JavaScript | MDN",
    "description": "The JavaScript exception \"return not in function\" occurs when a return statement is called outside of a function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Get_set_missing_private",
    "markdown": "# TypeError: can't access/set private field or method: object is not the right class - JavaScript\n\nThe JavaScript exception \"can't access private field or method: object is not the right class\" or \"can't set private field: object is not the right class\" occurs when a private field or method is get or set on an object that does not have this [private property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) defined.\n\n## [Message](#message)\n\nTypeError: Cannot read private member #x from an object whose class did not declare it (V8-based)\nTypeError: Cannot write private member #x to an object whose class did not declare it (V8-based)\nTypeError: can't access private field or method: object is not the right class (Firefox)\nTypeError: can't set private field: object is not the right class (Firefox)\nTypeError: Cannot access invalid private field (evaluating 'this.#x') (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nYou are trying to get or set a private field or method on an object, but that object does not contain this private property. Private instance properties can only be accessed on instances of the class (including its subclasses) that declares them; private static properties can only be accessed on the class itself that declares them, and not on subclasses.\n\nThis error occurs when the private name exists in the class scope but the object it's accessed on is invalid, If the private name does not exist, you will get a [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_private_field_or_method) instead.\n\n## [Examples](#examples)\n\n### [Mismatched static/instance fields](#mismatched_staticinstance_fields)\n\nYou may have declared the field as a static field, but are trying to access it on an instance, or vice versa.\n\n```\nclass MyClass {\n  static #x = 0;\n  doSomething() {\n    console.log(this.#x);\n  }\n}\n\nconst obj = new MyClass();\nobj.doSomething();\n// TypeError: can't access private field: object is not the right class\n```\n\nTo fix this, either change the field to be an instance field, or access the field on the class itself, or declare another field on the instance. Note that the private namespace is shared between static and instance properties, so you cannot have a static and instance private property with the same name.\n\n```\nclass MyClass {\n  #x = 0;\n  doSomething() {\n    console.log(this.#x);\n  }\n}\n\nclass MyClass2 {\n  static #x = 0;\n  doSomething() {\n    console.log(MyClass2.#x);\n  }\n}\n```\n\n### [Wrong object used](#wrong_object_used)\n\nPerhaps you have a method that access `this.#x`, but it is called with another `this` value.\n\n```\nclass JSONReplacer {\n  #count = 0;\n  func(key, value) {\n    if (typeof value === \"object\") {\n      this.#count++;\n    }\n    return value;\n  }\n}\n\nJSON.stringify({ a: 1, b: { c: 2 } }, new JSONReplacer().func);\n// TypeError: can't access private field: object is not the right class\n```\n\nThis is because [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) calls the replacer function with the object containing `value` as `this`, so the private field is not accessible. To fix this, you can bind the method to the object, or use an arrow function, to ensure that `replacer.func` is called with the correct `this` value.\n\n```\nconst replacer = new JSONReplacer();\nJSON.stringify({ a: 1, b: { c: 2 } }, replacer.func.bind(replacer));\nJSON.stringify({ a: 1, b: { c: 2 } }, (...args) => replacer.func(...args));\n```\n\nMost of the time, if you accidentally unbound a method, the method would be called with `undefined` as `this`, which would result in a different error (TypeError: can't convert undefined to object). This error only occurs when the method is called with a different object as `this`, either by using [`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) or [`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply), or by passing the method as a callback to a function that calls it with a different `this` value.\n\nIf you don't know for sure that the object will contain the private property, as in the following code:\n\n```\nclass MyClass {\n  #x = 0;\n  static doSomething(obj) {\n    console.log(obj.#x); // Throws if obj is not an instance of MyClass\n  }\n}\n```\n\nYou can use the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator to perform a _branded check_ first.\n\n```\nclass MyClass {\n  #x = 0;\n  static doSomething(obj) {\n    if (!(#x in obj)) {\n      return;\n    }\n    console.log(obj.#x);\n  }\n}\n```\n\n### [Accessing static properties on subclasses](#accessing_static_properties_on_subclasses)\n\nIf you have a [private static property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#private_static_fields), you can only access it on the class that declares it, not on subclasses.\n\n```\nclass MyClass {\n  static #x = 0;\n  doSomething() {\n    console.log(this.#x);\n  }\n}\n\nclass MySubClass extends MyClass {}\n\nMySubClass.doSomething();\n// TypeError: can't access private field: object is not the right class\n```\n\nTo fix this, never access private static properties through `this`. Instead, always explicitly specify the class's name.\n\n```\nclass MyClass {\n  static #x = 0;\n  doSomething() {\n    console.log(MyClass.#x);\n  }\n}\n```\n\n### [Accessing same-name private properties on another class](#accessing_same-name_private_properties_on_another_class)\n\nUnlike normal string or symbol properties, private names are not shared between classes. If you have a private property with the same name in two classes, they are still not the same property, and you cannot access one class's private property from another class.\n\n```\nclass MyClass {\n  #x = 0;\n}\n\nclass MyOtherClass {\n  #x = 1;\n  doSomething(o) {\n    console.log(o.#x);\n  }\n}\n\nconst obj = new MyClass();\nnew MyOtherClass().doSomething(obj);\n// TypeError: can't access private field: object is not the right class\n```\n\nYou cannot dynamically _add_ private properties to unrelated objects.\n\n```\nclass MyClass {\n  #x = 0;\n  static stamp(obj) {\n    obj.#x = 1;\n  }\n}\n\nMyClass.stamp({});\n// TypeError: can't set private field: object is not the right class\n```\n\nIf you really want to do this, consider the [return override](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#returning_overriding_object) trick. However, in general, you would probably want to use a [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instead.\n\n```\nclass MyClass {\n  static #objToX = new WeakMap();\n  static stamp(obj) {\n    MyClass.#objToX.set(obj, 1);\n  }\n}\n\nMyClass.stamp({});\n```\n\n## [See also](#see_also)",
    "title": "TypeError: can't access/set private field or method: object is not the right class - JavaScript | MDN",
    "description": "The JavaScript exception \"can't access private field or method: object is not the right class\" or \"can't set private field: object is not the right class\" occurs when a private field or method is get or set on an object that does not have this private property defined.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number",
    "markdown": "# TypeError: can't convert BigInt to number - JavaScript\n\nThe JavaScript exception \"can't convert BigInt to number\" occurs when an arithmetic operation involves a mix of [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) and [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values.\n\n## [Message](#message)\n\nTypeError: Cannot convert a BigInt value to a number (V8-based)\nTypeError: Cannot mix BigInt and other types, use explicit conversions (V8-based)\nTypeError: BigInts have no unsigned right shift, use >> instead (V8-based)\nTypeError: can't convert BigInt to number (Firefox)\nTypeError: Conversion from 'BigInt' to 'number' is not allowed. (Safari)\nTypeError: Invalid mix of BigInt and other type in addition/multiplication/…. (Safari)\nTypeError: BigInt does not support >>> operator (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe two sides of an arithmetic operator must both be BigInts or both not. If an operation involves a mix of BigInts and numbers, it's ambiguous whether the result should be a BigInt or number, since there may be loss of precision in both cases.\n\nThe error also happens when a BigInt is implicitly converted to a number via the [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) process. For example, if a BigInt is passed to a built-in method that expects a number.\n\nThe error can also happen if the [unsigned right shift operator (`>>>`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift) is used between two BigInts. In Firefox, the message is the same: \"can't convert BigInt to number\".\n\n## [Examples](#examples)\n\n### [Mixing numbers and BigInts in operations](#mixing_numbers_and_bigints_in_operations)\n\n```\nconst sum = 1n + 1;\n// TypeError: can't convert BigInt to number\n```\n\nInstead, explicitly coerce one side to a BigInt or number.\n\n```\nconst sum = 1n + BigInt(1);\nconst sum2 = Number(1n) + 1;\n```\n\n### [Using unsigned right shift on BigInts](#using_unsigned_right_shift_on_bigints)\n\n```\nconst a = 4n >>> 2n;\n// TypeError: can't convert BigInt to number\n```\n\nUse normal right shift instead.\n\n## [See also](#see_also)",
    "title": "TypeError: can't convert BigInt to number - JavaScript | MDN",
    "description": "The JavaScript exception \"can't convert BigInt to number\" occurs when an arithmetic operation involves a mix of BigInt and Number values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible",
    "markdown": "# TypeError: can't define property \"x\": \"obj\" is not extensible - JavaScript\n\nThe JavaScript exception \"can't define property \"x\": \"obj\" is not extensible\" occurs when [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.\n\n## [Message](#message)\n\nTypeError: Cannot add property x, object is not extensible (V8-based)\nTypeError: Cannot define property x, object is not extensible (V8-based)\nTypeError: can't define property \"x\": Object is not extensible (Firefox)\nTypeError: Attempting to define property on object that is not extensible. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nUsually, an object is extensible and new properties can be added to it. However, in this case [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.\n\n## [Examples](#examples)\n\n### [Adding new properties to a non-extensible objects](#adding_new_properties_to_a_non-extensible_objects)\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), attempting to add new properties to a non-extensible object throws a `TypeError`. In sloppy mode, the addition of the \"x\" property is silently ignored.\n\n```\n\"use strict\";\n\nconst obj = {};\nObject.preventExtensions(obj);\n\nobj.x = \"foo\";\n// TypeError: can't define property \"x\": Object is not extensible\n```\n\nIn both, [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) and sloppy mode, a call to [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) throws when adding a new property to a non-extensible object.\n\n```\nconst obj = {};\nObject.preventExtensions(obj);\n\nObject.defineProperty(obj, \"x\", { value: \"foo\" });\n// TypeError: can't define property \"x\": Object is not extensible\n```\n\nTo fix this error, you will either need to remove the call to [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) entirely, or move it to a position so that the property is added earlier and only later the object is marked as non-extensible. Of course you can also remove the property that was attempted to be added, if you don't need it.\n\n```\n\"use strict\";\n\nconst obj = {};\nobj.x = \"foo\"; // add property first and only then prevent extensions\n\nObject.preventExtensions(obj);\n```\n\n## [See also](#see_also)",
    "title": "TypeError: can't define property \"x\": \"obj\" is not extensible - JavaScript | MDN",
    "description": "The JavaScript exception \"can't define property \"x\": \"obj\" is not extensible\" occurs\n  when Object.preventExtensions() marked an object as no longer extensible,\n  so that it will never have properties beyond the ones it had at the time it was marked\n  as non-extensible.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand",
    "markdown": "# TypeError: invalid 'instanceof' operand 'x' - JavaScript\n\nThe JavaScript exception \"invalid 'instanceof' operand\" occurs when the right-hand side operands of the [`instanceof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) isn't used with a constructor object, i.e. an object which has a `prototype` property and is callable.\n\n## [Message](#message)\n\nTypeError: Right-hand side of 'instanceof' is not an object (V8-based)\nTypeError: invalid 'instanceof' operand \"x\" (Firefox)\nTypeError: Right hand side of instanceof is not an object (Safari)\n\nTypeError: Right-hand side of 'instanceof' is not callable (V8-based)\nTypeError: x is not a function (Firefox)\nTypeError: x is not a function. (evaluating 'x instanceof y') (Safari)\n\nTypeError: Function has non-object prototype 'undefined' in instanceof check (V8-based)\nTypeError: 'prototype' property of x is not an object (Firefox)\nTypeError: instanceof called on an object with an invalid prototype property. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [`instanceof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) expects the right-hand-side operands to be a constructor object, i.e. an object which has a `prototype` property and is callable. It can also be an object with a [`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) method. This error can occur if:\n\n*   The right-hand side operand is not an object.\n*   The right-hand side operand is not a callable and it has no `Symbol.hasInstance` method.\n*   The right-hand side operand is a callable, but its [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property is not an object. (For example, [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) do not have a `prototype` property.)\n\n## [Examples](#examples)\n\n### [instanceof vs. typeof](#instanceof_vs._typeof)\n\n```\n\"test\" instanceof \"\"; // TypeError: invalid 'instanceof' operand \"\"\n42 instanceof 0; // TypeError: invalid 'instanceof' operand 0\n\nfunction Foo() {}\nconst f = Foo(); // Foo() is called and returns undefined\nconst x = new Foo();\n\nx instanceof f; // TypeError: invalid 'instanceof' operand f\nx instanceof x; // TypeError: x is not a function\n```\n\nTo fix these errors, you will either need to replace the [`instanceof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) with the [`typeof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof), or to make sure you use the function name, instead of the result of its evaluation.\n\n```\ntypeof \"test\" === \"string\"; // true\ntypeof 42 === \"number\"; // true\n\nfunction Foo() {}\nconst f = Foo; // Do not call Foo.\nconst x = new Foo();\n\nx instanceof f; // true\nx instanceof Foo; // true\n```\n\n## [See also](#see_also)",
    "title": "TypeError: invalid 'instanceof' operand 'x' - JavaScript | MDN",
    "description": "The JavaScript exception \"invalid 'instanceof' operand\" occurs when the right-hand side\n  operands of the instanceof operator\n  isn't used with a constructor object, i.e. an object which has a prototype property and is callable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument",
    "markdown": "# TypeError: invalid Array.prototype.sort argument - JavaScript\n\nThe JavaScript exception \"invalid Array.prototype.sort argument\" occurs when the argument of [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) (and its related methods: [`Array.prototype.toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted), [`TypedArray.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort), [`TypedArray.prototype.toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toSorted)) isn't either [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) or a function which compares its operands.\n\n## [Message](#message)\n\nTypeError: The comparison function must be either a function or undefined (V8-based)\n\nTypeError: invalid Array.prototype.sort argument (Firefox)\nTypeError: non-function passed to Array.prototype.toSorted (Firefox)\nTypeError: invalid %TypedArray%.prototype.sort argument (Firefox)\n\nTypeError: Array.prototype.sort requires the comparator argument to be a function or undefined (Safari)\nTypeError: Array.prototype.toSorted requires the comparator argument to be a function or undefined (Safari)\nTypeError: TypedArray.prototype.sort requires the comparator argument to be a function or undefined (Safari)\nTypeError: TypedArray.prototype.toSorted requires the comparator argument to be a function or undefined (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe argument of [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) (and its related methods: [`Array.prototype.toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted), [`TypedArray.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort), [`TypedArray.prototype.toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toSorted)) is expected to be either [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) or a function which compares its operands.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n[1, 3, 2].sort(5); // TypeError\nstudents.toSorted(\"name\"); // TypeError\n```\n\n### [Valid cases](#valid_cases)\n\n```\n[1, 3, 2].sort(); // [1, 2, 3]\n[1, 3, 2].sort((a, b) => a - b); // [1, 2, 3]\nstudents.toSorted((a, b) => a.name.localeCompare(b.name));\n```\n\n## [See also](#see_also)",
    "title": "TypeError: invalid Array.prototype.sort argument - JavaScript | MDN",
    "description": "The JavaScript exception \"invalid Array.prototype.sort argument\" occurs when the argument of Array.prototype.sort() (and its related methods: Array.prototype.toSorted(), TypedArray.prototype.sort(), TypedArray.prototype.toSorted()) isn't either undefined or a function which compares its operands.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property",
    "markdown": "# TypeError: can't redefine non-configurable property \"x\" - JavaScript\n\nThe JavaScript exception \"can't redefine non-configurable property\" occurs when it was attempted to redefine a property, but that property is [non-configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties).\n\n## [Message](#message)\n\nTypeError: Cannot redefine property: \"x\" (V8-based)\nTypeError: can't redefine non-configurable property \"x\" (Firefox)\nTypeError: Attempting to change value of a readonly property. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nIt was attempted to redefine a property, but that property is [non-configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties). The `configurable` attribute controls whether the property can be deleted from the object and whether its attributes (other than `writable`) can be changed. Usually, properties in an object created by an [object initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) are configurable. However, for example, when using [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), the property isn't configurable by default.\n\n## [Examples](#examples)\n\n### [Non-configurable properties created by Object.defineProperty](#non-configurable_properties_created_by_object.defineproperty)\n\nThe [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) creates non-configurable properties if you haven't specified them as configurable.\n\n```\nconst obj = Object.create({});\nObject.defineProperty(obj, \"foo\", { value: \"bar\" });\n\nObject.defineProperty(obj, \"foo\", { value: \"baz\" });\n// TypeError: can't redefine non-configurable property \"foo\"\n```\n\nYou will need to set the \"foo\" property to configurable, if you intend to redefine it later in the code.\n\n```\nconst obj = Object.create({});\nObject.defineProperty(obj, \"foo\", { value: \"bar\", configurable: true });\nObject.defineProperty(obj, \"foo\", { value: \"baz\", configurable: true });\n```\n\n## [See also](#see_also)",
    "title": "TypeError: can't redefine non-configurable property \"x\" - JavaScript | MDN",
    "description": "The JavaScript exception \"can't redefine non-configurable property\" occurs when it was\n  attempted to redefine a property, but that property is non-configurable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/String_literal_EOL",
    "markdown": "# SyntaxError: string literal contains an unescaped line break - JavaScript\n\nThe JavaScript error \"string literal contains an unescaped line break\" occurs when there is an unterminated [string literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#string_literals) somewhere. String literals must be enclosed by single (`'`) or double (`\"`) quotes and cannot split across multiple lines.\n\n## [Message](#message)\n\nSyntaxError: Invalid or unexpected token (V8-based)\nSyntaxError: '' string literal contains an unescaped line break (Firefox)\nSyntaxError: Unexpected EOF (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is an unterminated [string literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#string_literals) somewhere. String literals must be enclosed by single (`'`) or double (`\"`) quotes. JavaScript makes no distinction between single-quoted strings and double-quoted strings. [Escape sequences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences) work in strings created with either single or double quotes. To fix this error, check if:\n\n*   you have opening and closing quotes (single or double) for your string literal,\n*   you have escaped your string literal correctly,\n*   your string literal isn't split across multiple lines.\n\n## [Examples](#examples)\n\n### [Multiple lines](#multiple_lines)\n\nYou can't split a string across multiple lines like this in JavaScript:\n\n```\nconst longString = \"This is a very long string which needs\n                    to wrap across multiple lines because\n                    otherwise my code is unreadable.\";\n// SyntaxError: unterminated string literal\n```\n\nInstead, use the [\\+ operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition), a backslash, or [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals). The `+` operator variant looks like this:\n\n```\nconst longString =\n  \"This is a very long string which needs \" +\n  \"to wrap across multiple lines because \" +\n  \"otherwise my code is unreadable.\";\n```\n\nOr you can use the backslash character (\"\\\\\") at the end of each line to indicate that the string will continue on the next line. Make sure there is no space or any other character after the backslash (except for a line break), or as an indent; otherwise it will not work. That form looks like this:\n\n```\nconst longString =\n  \"This is a very long string which needs \\\nto wrap across multiple lines because \\\notherwise my code is unreadable.\";\n```\n\nAnother possibility is to use [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals).\n\n```\nconst longString = `This is a very long string which needs \nto wrap across multiple lines because \notherwise my code is unreadable.`;\n```\n\n## [See also](#see_also)",
    "title": "SyntaxError: string literal contains an unescaped line break - JavaScript | MDN",
    "description": "The JavaScript error \"string literal contains an unescaped line break\" occurs when there is an unterminated\n  string literal somewhere. String literals must be enclosed by single\n  (') or double (\") quotes and cannot split across multiple lines.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment",
    "markdown": "# TypeError: invalid assignment to const \"x\" - JavaScript\n\nThe JavaScript exception \"invalid assignment to const\" occurs when it was attempted to alter a constant value. JavaScript [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) declarations can't be re-assigned or redeclared.\n\n## [Message](#message)\n\nTypeError: Assignment to constant variable. (V8-based)\nTypeError: invalid assignment to const 'x' (Firefox)\nTypeError: Attempted to assign to readonly property. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA constant is a value that cannot be altered by the program during normal execution. It cannot change through re-assignment, and it can't be redeclared. In JavaScript, constants are declared using the [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) keyword.\n\n## [Examples](#examples)\n\n### [Invalid redeclaration](#invalid_redeclaration)\n\nAssigning a value to the same constant name in the same block-scope will throw.\n\n```\nconst COLUMNS = 80;\n\n// …\n\nCOLUMNS = 120; // TypeError: invalid assignment to const `COLUMNS'\n```\n\n### [Fixing the error](#fixing_the_error)\n\nThere are multiple options to fix this error. Check what was intended to be achieved with the constant in question.\n\n#### Rename\n\nIf you meant to declare another constant, pick another name and re-name. This constant name is already taken in this scope.\n\n```\nconst COLUMNS = 80;\nconst WIDE_COLUMNS = 120;\n```\n\n#### const, let or var?\n\nDo not use const if you weren't meaning to declare a constant. Maybe you meant to declare a block-scoped variable with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or global variable with [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var).\n\n```\nlet columns = 80;\n\n// …\n\ncolumns = 120;\n```\n\n#### Scoping\n\nCheck if you are in the correct scope. Should this constant appear in this scope or was it meant to appear in a function, for example?\n\n```\nconst COLUMNS = 80;\n\nfunction setupBigScreenEnvironment() {\n  const COLUMNS = 120;\n}\n```\n\n### [const and immutability](#const_and_immutability)\n\nThe `const` declaration creates a read-only reference to a value. It does **not** mean the value it holds is immutable, just that the variable identifier cannot be reassigned. For instance, in case the content is an object, this means the object itself can still be altered. This means that you can't mutate the value stored in a variable:\n\n```\nconst obj = { foo: \"bar\" };\nobj = { foo: \"baz\" }; // TypeError: invalid assignment to const `obj'\n```\n\nBut you can mutate the properties in a variable:\n\n```\nobj.foo = \"baz\";\nobj; // { foo: \"baz\" }\n```\n\n## [See also](#see_also)",
    "title": "TypeError: invalid assignment to const \"x\" - JavaScript | MDN",
    "description": "The JavaScript exception \"invalid assignment to const\" occurs when it was attempted to\n  alter a constant value. JavaScript\n  const\n  declarations can't be re-assigned or redeclared.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt",
    "markdown": "# TypeError: can't convert x to BigInt - JavaScript\n\nThe JavaScript exception \"x can't be converted to BigInt\" occurs when attempting to convert a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) value to a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), or if an operation expecting a BigInt parameter receives a number.\n\n## [Message](#message)\n\nTypeError: Cannot convert null to a BigInt (V8-based)\nTypeError: can't convert null to BigInt (Firefox)\nTypeError: Invalid argument type in ToBigInt operation (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nWhen using the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function to convert a value to a BigInt, the value would first be converted to a primitive. Then, if it's not one of BigInt, string, number, and boolean, the error is thrown.\n\nSome operations, like [`BigInt.asIntN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN), require the parameter to be a BigInt. Passing in a number in this case will also throw this error.\n\n## [Examples](#examples)\n\n### [Using BigInt() on invalid values](#using_bigint_on_invalid_values)\n\n```\nconst a = BigInt(null);\n// TypeError: can't convert null to BigInt\nconst b = BigInt(undefined);\n// TypeError: can't convert undefined to BigInt\nconst c = BigInt(Symbol(\"1\"));\n// TypeError: can't convert Symbol(\"1\") to BigInt\n```\n\n```\nconst a = BigInt(1);\nconst b = BigInt(true);\nconst c = BigInt(\"1\");\nconst d = BigInt(Symbol(\"1\").description);\n```\n\n**Note:** Simply coercing the value to a string or number using [`String()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String) or [`Number()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) before passing it to `BigInt()` is usually not sufficient to avoid all errors. If the string is not a valid integer number string, a [SyntaxError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax) is thrown; if the number is not an integer (most notably, [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)), a [RangeError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer) is thrown. If the range of input is unknown, properly validate it before using `BigInt()`.\n\n### [Passing a number to a function expecting a BigInt](#passing_a_number_to_a_function_expecting_a_bigint)\n\n```\nconst a = BigInt.asIntN(4, 8);\n// TypeError: can't convert 8 to BigInt\nconst b = new BigInt64Array(3).fill(3);\n// TypeError: can't convert 3 to BigInt\n```\n\n```\nconst a = BigInt.asIntN(4, 8n);\nconst b = new BigInt64Array(3).fill(3n);\n```\n\n## [See also](#see_also)",
    "title": "TypeError: can't convert x to BigInt - JavaScript | MDN",
    "description": "The JavaScript exception \"x can't be converted to BigInt\" occurs when attempting to convert a Symbol, null, or undefined value to a BigInt, or if an operation expecting a BigInt parameter receives a number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Requires_global_RegExp",
    "markdown": "# TypeError: matchAll/replaceAll must be called with a global RegExp - JavaScript\n\nThe JavaScript exception \"TypeError: matchAll/replaceAll must be called with a global RegExp\" occurs when the [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) or [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) method is used with a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object that does not have the [`global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) flag set.\n\n## [Message](#message)\n\nTypeError: String.prototype.matchAll called with a non-global RegExp argument (V8-based)\nTypeError: String.prototype.replaceAll called with a non-global RegExp argument (V8-based)\nTypeError: matchAll must be called with a global RegExp (Firefox)\nTypeError: replaceAll must be called with a global RegExp (Firefox)\nTypeError: String.prototype.matchAll argument must not be a non-global regular expression (Safari)\nTypeError: String.prototype.replaceAll argument must not be a non-global regular expression (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) and [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) methods require a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object with the [`global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) flag set. This flag indicates that the regular expression can match all locations of the input string, instead of stopping at the first match. Although the `g` flag is redundant when using these methods (because these methods always do a global replacement), they are still required to make the intention clear.\n\nIt's worth noting that the `g` flag validation is done in the `matchAll` and `replaceAll` methods. If you use the [`@@matchAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll) method of `RegExp` instead, you won't get this error, but there will only be a single match.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n\"abc\".matchAll(/./); // TypeError\n\"abc\".replaceAll(/./, \"f\"); // TypeError\n```\n\n### [Valid cases](#valid_cases)\n\nIf you intend to do global matching/replacement: either add the `g` flag, or construct a new `RegExp` object with the `g` flag, if you want to keep the original regex unchanged.\n\n```\n[...\"abc\".matchAll(/./g)]; // [[ \"a\" ], [ \"b\" ], [ \"c\" ]]\n\"abc\".replaceAll(/./g, \"f\"); // \"fff\"\n\nconst existingPattern = /./;\nconst newPattern = new RegExp(\n  existingPattern.source,\n  existingPattern.flags + \"g\",\n);\n\"abc\".replaceAll(newPattern, \"f\"); // \"fff\"\n```\n\nIf you only intend to do a single matching/replacement: use [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) or [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) instead. You can also use the `@@matchAll` method if you want an iterator like `matchAll` returns that only contains one match, but doing so will be very confusing.\n\n```\n\"abc\".match(/./); // [ \"a\" ]\n\"abc\".replace(/./, \"f\"); // \"fbc\"\n\n[..././[Symbol.matchAll](\"abc\")]; // [[ \"a\" ]]\n```\n\n## [See also](#see_also)",
    "title": "TypeError: matchAll/replaceAll must be called with a global RegExp - JavaScript | MDN",
    "description": "The JavaScript exception \"TypeError: matchAll/replaceAll must be called with a global RegExp\" occurs when the String.prototype.matchAll() or String.prototype.replaceAll() method is used with a RegExp object that does not have the global flag set.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_prototype",
    "markdown": "# TypeError: can't set prototype: it would cause a prototype chain cycle - JavaScript\n\nThe JavaScript exception \"TypeError: can't set prototype: it would cause a prototype chain cycle\" occurs when an object's prototype is set to an object such that the [prototype chain](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes#the_prototype_chain) becomes circular (`a` and `b` both have each other in their prototype chains).\n\n## [Message](#message)\n\nTypeError: Cyclic \\_\\_proto\\_\\_ value (V8-based)\nTypeError: can't set prototype: it would cause a prototype chain cycle (Firefox)\nTypeError: cyclic \\_\\_proto\\_\\_ value (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nA loop, also called a cycle, was introduced in a prototype chain. That means that when walking this prototype chain, the same place would be accessed over and over again, instead of eventually reaching `null`.\n\nThis error is thrown at the time of setting the prototype. In an operation like `Object.setPrototypeOf(a, b)`, if `a` already exists in the prototype chain of `b`, this error will be thrown.\n\n## [Examples](#examples)\n\n```\nconst a = {};\nObject.setPrototypeOf(a, a);\n// TypeError: can't set prototype: it would cause a prototype chain cycle\n```\n\n```\nconst a = {};\nconst b = {};\nconst c = {};\nObject.setPrototypeOf(a, b);\nObject.setPrototypeOf(b, c);\nObject.setPrototypeOf(c, a);\n// TypeError: can't set prototype: it would cause a prototype chain cycle\n```\n\n## [See also](#see_also)",
    "title": "TypeError: can't set prototype: it would cause a prototype chain cycle - JavaScript | MDN",
    "description": "The JavaScript exception \"TypeError: can't set prototype: it would cause a prototype chain cycle\" occurs when an object's prototype is set to an object such that the prototype chain becomes circular (a and b both have each other in their prototype chains).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element",
    "markdown": "# TypeError: can't delete non-configurable array element - JavaScript\n\nThe JavaScript exception \"can't delete non-configurable array element\" occurs when it was attempted to [shorten the length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length#shortening_an_array) of an array, but one of the array's elements is [non-configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties).\n\n## [Message](#message)\n\nTypeError: Cannot delete property '1' of \\[object Array\\] (V8-based)\nTypeError: can't delete non-configurable array element (Firefox)\nTypeError: Unable to delete property. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nIt was attempted to [shorten the length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length#shortening_an_array) of an array, but one of the array's elements is [non-configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties). When shortening an array, the elements beyond the new array length will be deleted, which failed in this situation.\n\nThe `configurable` attribute controls whether the property can be deleted from the object and whether its attributes (other than `writable`) can be changed.\n\nUsually, properties in an object created by an [array initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals) are configurable. However, for example, when using [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), the property isn't configurable by default.\n\n## [Examples](#examples)\n\n### [Non-configurable properties created by Object.defineProperty](#non-configurable_properties_created_by_object.defineproperty)\n\nThe [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) creates non-configurable properties by default if you haven't specified them as configurable.\n\n```\n\"use strict\";\nconst arr = [];\nObject.defineProperty(arr, 0, { value: 0 });\nObject.defineProperty(arr, 1, { value: \"1\" });\n\narr.length = 1;\n// TypeError: can't delete non-configurable array element\n```\n\nYou will need to set the elements as configurable, if you intend to shorten the array.\n\n```\n\"use strict\";\nconst arr = [];\nObject.defineProperty(arr, 0, { value: 0, configurable: true });\nObject.defineProperty(arr, 1, { value: \"1\", configurable: true });\n\narr.length = 1;\n```\n\n### [Sealed Arrays](#sealed_arrays)\n\nThe [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal) function marks all existing elements as non-configurable.\n\n```\n\"use strict\";\nconst arr = [1, 2, 3];\nObject.seal(arr);\n\narr.length = 1;\n// TypeError: can't delete non-configurable array element\n```\n\nYou either need to remove the [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal) call, or make a copy of it. In case of a copy, shortening the copy of the array does not modify the original array length.\n\n```\n\"use strict\";\nconst arr = [1, 2, 3];\nObject.seal(arr);\n\n// Copy the initial array to shorten the copy\nconst copy = Array.from(arr);\ncopy.length = 1;\n// arr.length === 3\n```\n\n## [See also](#see_also)",
    "title": "TypeError: can't delete non-configurable array element - JavaScript | MDN",
    "description": "The JavaScript exception \"can't delete non-configurable array element\" occurs when it\n  was attempted to shorten the length\n  of an array, but one of the array's elements is non-configurable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value",
    "markdown": "# TypeError: cyclic object value - JavaScript\n\nThe JavaScript exception \"cyclic object value\" occurs when object references were found in [JSON](https://www.json.org/). [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) doesn't try to solve them and fails accordingly.\n\n## [Message](#message)\n\nTypeError: Converting circular structure to JSON (V8-based)\nTypeError: cyclic object value (Firefox)\nTypeError: JSON.stringify cannot serialize cyclic structures. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [JSON format](https://www.json.org/) per se doesn't support object references (although an [IETF draft exists](https://datatracker.ietf.org/doc/html/draft-pbryan-zyp-json-ref-03)), hence [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) doesn't try to solve them and fails accordingly.\n\n## [Examples](#examples)\n\n### [Circular references](#circular_references)\n\nIn a circular structure like the following\n\n```\nconst circularReference = { otherData: 123 };\ncircularReference.myself = circularReference;\n```\n\n[`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) will fail\n\n```\nJSON.stringify(circularReference);\n// TypeError: cyclic object value\n```\n\nTo serialize circular references you can use a library that supports them (e.g. [cycle.js](https://github.com/douglascrockford/JSON-js/blob/master/cycle.js)) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.\n\nThe snippet below illustrates how to find and filter (thus causing data loss) a cyclic reference by using the `replacer` parameter of [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify):\n\n```\nfunction getCircularReplacer() {\n  const ancestors = [];\n  return function (key, value) {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n    // `this` is the object that value is contained in,\n    // i.e., its direct parent.\n    while (ancestors.length > 0 && ancestors.at(-1) !== this) {\n      ancestors.pop();\n    }\n    if (ancestors.includes(value)) {\n      return \"[Circular]\";\n    }\n    ancestors.push(value);\n    return value;\n  };\n}\n\nJSON.stringify(circularReference, getCircularReplacer());\n// {\"otherData\":123,\"myself\":\"[Circular]\"}\n\nconst o = {};\nconst notCircularReference = [o, o];\nJSON.stringify(notCircularReference, getCircularReplacer());\n// [{},{}]\n```\n\n## [See also](#see_also)",
    "title": "TypeError: cyclic object value - JavaScript | MDN",
    "description": "The JavaScript exception \"cyclic object value\" occurs when object references were found\n  in JSON. JSON.stringify() doesn't try\n  to solve them and fails accordingly.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed",
    "markdown": "# TypeError: More arguments needed - JavaScript\n\nThe JavaScript exception \"more arguments needed\" occurs when there is an error with how a function is called. More arguments need to be provided.\n\n## [Message](#message)\n\nTypeError: Object prototype may only be an Object or null: undefined (V8-based)\nTypeError: Object.create requires at least 1 argument, but only 0 were passed (Firefox)\nTypeError: Object.setPrototypeOf requires at least 2 arguments, but only 0 were passed (Firefox)\nTypeError: Object.defineProperties requires at least 1 argument, but only 0 were passed (Firefox)\nTypeError: Object prototype may only be an Object or null. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is an error with how a function is called. More arguments need to be provided.\n\n## [Examples](#examples)\n\n### [Required arguments not provided](#required_arguments_not_provided)\n\nThe [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) method requires at least one argument and the [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) method requires at least two arguments:\n\n```\nconst obj = Object.create();\n// TypeError: Object.create requires at least 1 argument, but only 0 were passed\n\nconst obj2 = Object.setPrototypeOf({});\n// TypeError: Object.setPrototypeOf requires at least 2 arguments, but only 1 were passed\n```\n\nYou can fix this by setting [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) as the prototype, for example:\n\n```\nconst obj = Object.create(null);\n\nconst obj2 = Object.setPrototypeOf({}, null);\n```\n\n## [See also](#see_also)",
    "title": "TypeError: More arguments needed - JavaScript | MDN",
    "description": "The JavaScript exception \"more arguments needed\" occurs when there is an error with how\n  a function is called. More arguments need to be provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object",
    "markdown": "# TypeError: cannot use 'in' operator to search for 'x' in 'y' - JavaScript\n\nThe JavaScript exception \"right-hand side of 'in' should be an object\" occurs when the [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.\n\n## [Message](#message)\n\nTypeError: Cannot use 'in' operator to search for 'x' in 'y' (V8-based & Firefox)\nTypeError: right-hand side of 'in' should be an object, got null (Firefox)\nTypeError: \"y\" is not an Object. (evaluating '\"x\" in \"y\"') (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThe [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) can only be used to check if a property is in an object. You can't search in strings, or in numbers, or other primitive types.\n\n## [Examples](#examples)\n\n### [Searching in strings](#searching_in_strings)\n\nUnlike in other programming languages (e.g. Python), you can't search in strings using the [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in).\n\n```\n\"Hello\" in \"Hello World\";\n// TypeError: cannot use 'in' operator to search for 'Hello' in 'Hello World'\n```\n\nInstead you will need to use [`String.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes), for example.\n\n```\n\"Hello World\".includes(\"Hello\");\n// true\n```\n\n### [The operand can't be null or undefined](#the_operand_cant_be_null_or_undefined)\n\nMake sure the object you are inspecting isn't actually [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n```\nconst foo = null;\n\"bar\" in foo;\n// TypeError: cannot use 'in' operator to search for 'bar' in 'foo' (Chrome)\n// TypeError: right-hand side of 'in' should be an object, got null (Firefox)\n```\n\nThe `in` operator always expects an object.\n\n```\nconst foo = { baz: \"bar\" };\n\"bar\" in foo; // false\n\n\"PI\" in Math; // true\n\"pi\" in Math; // false\n```\n\n### [Searching in arrays](#searching_in_arrays)\n\nBe careful when using the `in` operator to search in [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) objects. The `in` operator checks the index number, not the value at that index.\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\n3 in trees; // true\n\"oak\" in trees; // false\n```\n\n## [See also](#see_also)",
    "title": "TypeError: cannot use 'in' operator to search for 'x' in 'y' - JavaScript | MDN",
    "description": "The JavaScript exception \"right-hand side of 'in' should be an object\" occurs when the\n  in operator\n  was used to search in strings, or in numbers, or other primitive types. It can only be\n  used to check if a property is in an object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete",
    "markdown": "# TypeError: property \"x\" is non-configurable and can't be deleted - JavaScript\n\nThe JavaScript exception \"property is non-configurable and can't be deleted\" occurs when it was attempted to delete a property, but that property is [non-configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties).\n\n## [Message](#message)\n\nTypeError: Cannot delete property 'x' of #<Object> (V8-based)\nTypeError: property \"x\" is non-configurable and can't be deleted (Firefox)\nTypeError: Unable to delete property. (Safari)\n\n## [Error type](#error_type)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) in strict mode only.\n\n## [What went wrong?](#what_went_wrong)\n\nIt was attempted to delete a property, but that property is [non-configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties). The `configurable` attribute controls whether the property can be deleted from the object and whether its attributes (other than `writable`) can be changed.\n\nThis error happens only in [strict mode code](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). In non-strict code, the operation returns `false`.\n\n## [Examples](#examples)\n\n### [Attempting to delete non-configurable properties](#attempting_to_delete_non-configurable_properties)\n\nNon-configurable properties are not super common, but they can be created using [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) or [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze).\n\n```\n\"use strict\";\nconst obj = Object.freeze({ name: \"Elsa\", score: 157 });\ndelete obj.score; // TypeError\n```\n\n```\n\"use strict\";\nconst obj = {};\nObject.defineProperty(obj, \"foo\", { value: 2, configurable: false });\ndelete obj.foo; // TypeError\n```\n\n```\n\"use strict\";\nconst frozenArray = Object.freeze([0, 1, 2]);\nfrozenArray.pop(); // TypeError\n```\n\nThere are also a few non-configurable properties built into JavaScript. Maybe you tried to delete a mathematical constant.\n\n```\n\"use strict\";\ndelete Math.PI; // TypeError\n```\n\n## [See also](#see_also)",
    "title": "TypeError: property \"x\" is non-configurable and can't be deleted - JavaScript | MDN",
    "description": "The JavaScript exception \"property is non-configurable and can't be deleted\" occurs\n  when it was attempted to delete a property, but that property is non-configurable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Private_double_initialization",
    "markdown": "# TypeError: Initializing an object twice is an error with private fields/methods - JavaScript\n\nThe JavaScript exception \"Initializing an object twice is an error with private fields/methods\" occurs when an object that was created via a class constructor goes through the class construction again, and the class contains a [private property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties). This is usually caused by the [return override](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#returning_overriding_object) trick.\n\n## [Message](#message)\n\nTypeError: Cannot initialize #x twice on the same object (V8-based)\nTypeError: Initializing an object twice is an error with private fields (Firefox)\nTypeError: Cannot redefine existing private field (evaluating 'super(o)') (Safari)\n\nTypeError: Cannot initialize private methods of class X twice on the same object (V8-based)\nTypeError: Initializing an object twice is an error with private methods (Firefox)\nTypeError: Cannot install same private methods on object more than once (evaluating 'super(o)') (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nFor any object, if it already contains a private field or method, it would be an error to install the same field again. Private properties are installed on the value of `this` when the class constructor is called, so this error could happen if the `this` value is an already-constructed instance of this class.\n\nUsually, `this` in a constructor is a newly created object which doesn't have any preexisting properties. However, it can be overridden by the return value of the base class. If the base class returns another object, that object would replace the current object as the value of `this`:\n\n```\nclass Base {\n  constructor(o) {\n    // This object will become the this value of any subclass\n    return o;\n  }\n}\n\nclass Derived extends Base {\n  #x = 0;\n}\n```\n\nIf you call `new Derived(anyObject)`, where `anyObject` is not an instance of `Derived`, the `Derived` constructor will be called with `anyObject` as the `this` value, and therefore install the `#x` private field on `anyObject`. This is the \"return override\" trick, which allows you to define arbitrary information on unrelated objects. However, if you call `new Derived(new Derived())`, or call `new Derived(anyObject)` again, the `Derived` constructor will try to install the `#x` private field again on an object which already has the `#x` private field, causing this error.\n\n## [See also](#see_also)",
    "title": "TypeError: Initializing an object twice is an error with private fields/methods - JavaScript | MDN",
    "description": "The JavaScript exception \"Initializing an object twice is an error with private fields/methods\" occurs when an object that was created via a class constructor goes through the class construction again, and the class contains a private property. This is usually caused by the return override trick.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value",
    "markdown": "# TypeError: Reduce of empty array with no initial value - JavaScript\n\nThe JavaScript exception \"reduce of empty array with no initial value\" occurs when a reduce function is used.\n\n## [Message](#message)\n\nTypeError: Reduce of empty array with no initial value (V8-based & Firefox & Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nIn JavaScript, there are several reduce functions:\n\n*   [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce), [`Array.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) and\n*   [`TypedArray.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce), [`TypedArray.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight)).\n\nThese functions optionally take an `initialValue` (which will be used as the first argument to the first call of the `callback`). However, if no initial value is provided, it will use the first element of the [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) as the initial value. This error is raised when an empty array is provided because no initial value can be returned in that case.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\nThis problem appears frequently when combined with a filter ([`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), [`TypedArray.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter)) which will remove all elements of the list. Thus leaving none to be used as the initial value.\n\n```\nconst ints = [0, -1, -2, -3, -4, -5];\nints\n  .filter((x) => x > 0) // removes all elements\n  .reduce((x, y) => x + y); // no more elements to use for the initial value.\n```\n\nSimilarly, the same issue can happen if there is a typo in a selector, or an unexpected number of elements in a list:\n\n```\nconst names = document.getElementsByClassName(\"names\");\nconst name_list = Array.prototype.reduce.call(\n  names,\n  (acc, name) => acc + \", \" + name,\n);\n```\n\n### [Valid cases](#valid_cases)\n\nThese problems can be solved in two different ways.\n\nOne way is to actually provide an `initialValue` as the neutral element of the operator, such as 0 for the addition, 1 for a multiplication, or an empty string for a concatenation.\n\n```\nconst ints = [0, -1, -2, -3, -4, -5];\nints\n  .filter((x) => x > 0) // removes all elements\n  .reduce((x, y) => x + y, 0); // the initial value is the neutral element of the addition\n```\n\nAnother way would be to handle the empty case, either before calling `reduce`, or in the callback after adding an unexpected dummy initial value.\n\n```\nconst names = document.getElementsByClassName(\"names\");\n\nlet nameList1 = \"\";\nif (names.length >= 1) {\n  nameList1 = Array.prototype.reduce.call(\n    names,\n    (acc, name) => `${acc}, ${name}`,\n  );\n}\n// nameList1 === \"\" when names is empty.\n\nconst nameList2 = Array.prototype.reduce.call(\n  names,\n  (acc, name) => {\n    if (acc === \"\")\n      // initial value\n      return name;\n    return `${acc}, ${name}`;\n  },\n  \"\",\n);\n// nameList2 === \"\" when names is empty.\n```\n\n## [See also](#see_also)",
    "title": "TypeError: Reduce of empty array with no initial value - JavaScript | MDN",
    "description": "The JavaScript exception \"reduce of empty array with no initial value\" occurs when a\n  reduce function is used.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Key_not_weakly_held",
    "markdown": "# TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol - JavaScript\n\nThe JavaScript exception \"WeakSet key (or WeakMap value) 'x' must be an object or an unregistered symbol\" occurs when an value of invalid type is used as a key in a [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) or as a value in a [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap).\n\n## [Message](#message)\n\nTypeError: Invalid value used as weak map key (V8-based)\nTypeError: WeakMap key 1 must be an object or an unregistered symbol (Firefox)\nTypeError: WeakMap keys must be objects or non-registered symbols (Safari)\n\nTypeError: Invalid value used in weak set (V8-based)\nTypeError: WeakSet value 1 must be an object or an unregistered symbol (Firefox)\nTypeError: WeakSet values must be objects or non-registered symbols (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\n[`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) and [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) require the keys to be _garbage collectable_. Only objects and non-registered symbols (that is, [symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) not returned by [`Symbol.for()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for)) are valid. For more information, see [Memory management](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management#weakmaps_and_weaksets). If you want to add keys that are strings, numbers, or other primitive values, you should store them in a regular `Set` or `Map` instead.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nnew WeakSet().add(1); // TypeError\nnew WeakMap().set(1, {}); // TypeError\nnew WeakSet([1]); // TypeError\nnew WeakMap([[1, {}]]); // TypeError\n```\n\n### [Valid cases](#valid_cases)\n\n```\nnew WeakSet().add({}); // OK\nnew WeakMap().set({}, 1); // OK\n\nnew Set([1]); // OK\nnew Map([[1, {}]]); // OK\n```\n\n## [See also](#see_also)",
    "title": "TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol - JavaScript | MDN",
    "description": "The JavaScript exception \"WeakSet key (or WeakMap value) 'x' must be an object or an unregistered symbol\" occurs when an value of invalid type is used as a key in a WeakSet or as a value in a WeakMap.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI",
    "markdown": "# URIError: malformed URI sequence - JavaScript\n\nThe JavaScript exception \"malformed URI sequence\" occurs when URI encoding or decoding wasn't successful.\n\n## [Message](#message)\n\nURIError: URI malformed (V8-based)\nURIError: malformed URI sequence (Firefox)\nURIError: String contained an illegal UTF-16 sequence. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nURI encoding or decoding wasn't successful. An argument given to either the [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI), [`encodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI), [`encodeURIComponent`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent), or [`decodeURIComponent`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) function was not valid, so that the function was unable encode or decode properly.\n\n## [Examples](#examples)\n\n### [Encoding](#encoding)\n\nEncoding replaces each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character. An [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) will be thrown if there is an attempt to encode a surrogate which is not part of a high-low pair, for example:\n\n```\nencodeURI(\"\\uD800\");\n// \"URIError: malformed URI sequence\"\n\nencodeURI(\"\\uDFFF\");\n// \"URIError: malformed URI sequence\"\n```\n\nA high-low pair is OK. For example:\n\n```\nencodeURI(\"\\uD800\\uDFFF\");\n// \"%F0%90%8F%BF\"\n```\n\n### [Decoding](#decoding)\n\nDecoding replaces each escape sequence in the encoded URI component with the character that it represents. If there isn't such a character, an error will be thrown:\n\n```\ndecodeURIComponent(\"%E0%A4%A\");\n// \"URIError: malformed URI sequence\"\n```\n\nWith proper input, this should usually look like something like this:\n\n```\ndecodeURIComponent(\"JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n// \"JavaScript_шеллы\"\n```\n\n## [See also](#see_also)",
    "title": "URIError: malformed URI sequence - JavaScript | MDN",
    "description": "The JavaScript exception \"malformed URI sequence\" occurs when URI encoding or decoding\n  wasn't successful.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type",
    "markdown": "# TypeError: X.prototype.y called on incompatible type - JavaScript\n\nThe JavaScript exception \"called on incompatible target (or object)\" occurs when a function (on a given object), is called with a `this` not corresponding to the type expected by the function.\n\n## [Message](#message)\n\nTypeError: Method Set.prototype.add called on incompatible receiver undefined (V8-based)\nTypeError: Bind must be called on a function (V8-based)\nTypeError: Function.prototype.toString called on incompatible object (Firefox)\nTypeError: Function.prototype.bind called on incompatible target (Firefox)\nTypeError: Type error (Safari)\nTypeError: undefined is not an object (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nWhen this error is thrown, a function (on a given object), is called with a `this` not corresponding to the type expected by the function.\n\nThis issue can arise when using the [`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) or [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) methods, and providing a `this` argument which does not have the expected type.\n\nThis issue can also happen when providing a function that is stored as a property of an object as an argument to another function. In this case, the object that stores the function won't be the `this` target of that function when it is called by the other function. To work-around this issue, you will either need to provide a lambda which is making the call, or use the [`Function.prototype.bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) function to force the `this` argument to the expected object.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nconst mySet = new Set();\n[\"bar\", \"baz\"].forEach(mySet.add);\n// mySet.add is a function, but \"mySet\" is not captured as this.\n\nconst myFun = function () {\n  console.log(this);\n};\n[\"bar\", \"baz\"].forEach(myFun.bind);\n// myFun.bind is a function, but \"myFun\" is not captured as this.\n```\n\n### [Valid cases](#valid_cases)\n\n```\nconst mySet = new Set();\n[\"bar\", \"baz\"].forEach(mySet.add.bind(mySet));\n// This works due to binding \"mySet\" as this.\n\nconst myFun = function () {\n  console.log(this);\n};\n[\"bar\", \"baz\"].forEach((x) => myFun.bind(x));\n// This works using the \"bind\" function. It creates a lambda forwarding the argument.\n```\n\n## [See also](#see_also)",
    "title": "TypeError: X.prototype.y called on incompatible type - JavaScript | MDN",
    "description": "The JavaScript exception \"called on incompatible target (or object)\" occurs when a\n  function (on a given object), is called with a this not corresponding to\n  the type expected by the function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return",
    "markdown": "# Warning: unreachable code after return statement - JavaScript\n\nThe JavaScript warning \"unreachable code after return statement\" occurs when using an expression after a [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement, or when using a semicolon-less return statement but including an expression directly after.\n\n## [Message](#message)\n\nWarning: unreachable code after return statement (Firefox)\n\n## [Error type](#error_type)\n\nWarning\n\n## [What went wrong?](#what_went_wrong)\n\nUnreachable code after a return statement might occur in these situations:\n\n*   When using an expression after a [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement, or\n*   when using a semicolon-less return statement but including an expression directly after.\n\nWhen an expression exists after a valid `return` statement, a warning is given to indicate that the code after the `return` statement is unreachable, meaning it can never be run.\n\nWhy should I have semicolons after `return` statements? In the case of semicolon-less `return` statements, it can be unclear whether the developer intended to return the statement on the following line, or to stop execution and return. The warning indicates that there is ambiguity in the way the `return` statement is written.\n\nWarnings will not be shown for semicolon-less returns if these statements follow it:\n\n*   [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw)\n*   [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break)\n*   [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\n*   [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\nfunction f() {\n  let x = 3;\n  x += 4;\n  return x;   // return exits the function immediately\n  x -= 3;     // so this line will never run; it is unreachable\n}\n\nfunction g() {\n  return     // this is treated like `return;`\n    3 + 4;   // so the function returns, and this line is never reached\n}\n```\n\n### [Valid cases](#valid_cases)\n\n```\nfunction f() {\n  let x = 3;\n  x += 4;\n  x -= 3;\n  return x; // OK: return after all other statements\n}\n\nfunction g() {\n  return 3 + 4 // OK: semicolon-less return with expression on the same line\n}\n```\n\n## [See also](#see_also)",
    "title": "Warning: unreachable code after return statement - JavaScript | MDN",
    "description": "The JavaScript warning \"unreachable code after return statement\" occurs when using an\n  expression after a return statement, or when using a\n  semicolon-less return statement but including an expression directly after.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma",
    "markdown": "# Warning: -file- is being assigned a //# sourceMappingURL, but already has one - JavaScript\n\nThe JavaScript warning \"-file- is being assigned a //# sourceMappingURL, but already has one.\" occurs when a source map has been specified more than once for a given JavaScript source.\n\n## [Message](#message)\n\nWarning: -file- is being assigned a //# sourceMappingURL, but already has one.\n\n## [Error type](#error_type)\n\nA warning. JavaScript execution won't be halted.\n\n## [What went wrong?](#what_went_wrong)\n\nA source map has been specified more than once for a given JavaScript source.\n\nJavaScript sources are often combined and minified to make delivering them from the server more efficient. With [source maps](https://developer.chrome.com/blog/sourcemaps/), the debugger can map the code being executed to the original source files. There are two ways to assign a source map, either by using a comment or by setting a header to the JavaScript file.\n\n## [Examples](#examples)\n\n### [Setting source maps](#setting_source_maps)\n\nSetting a source map by using a comment in the file:\n\n```\n//# sourceMappingURL=http://example.com/path/to/your/sourcemap.map\n```\n\nOr, alternatively, you can set a header to your JavaScript file:\n\n```\nX-SourceMap: /path/to/file.js.map\n```\n\n## [See also](#see_also)\n\n*   [Use a source map](https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/use_a_source_map/index.html) in the Firefox source docs\n*   [Introduction to JavaScript source maps](https://developer.chrome.com/blog/sourcemaps/) on developer.chrome.com (2012)",
    "title": "Warning: -file- is being assigned a //# sourceMappingURL, but already has one - JavaScript | MDN",
    "description": "The JavaScript warning \"-file- is being assigned a //# sourceMappingURL, but already has one.\" occurs when a source map has been specified more than once for a given JavaScript source.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only",
    "markdown": "# TypeError: setting getter-only property \"x\" - JavaScript\n\nThe JavaScript [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\-only exception \"setting getter-only property\" occurs when there is an attempt to set a new value to a property for which only a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) is specified.\n\n## [Message](#message)\n\nTypeError: Cannot set property x of #<Object> which has only a getter (V8-based)\nTypeError: setting getter-only property \"x\" (Firefox)\nTypeError: Attempted to assign to readonly property. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nThere is an attempt to set a new value to a property for which only a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) is specified. While this will be silently ignored in non-strict mode, it will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\n## [Examples](#examples)\n\n### [Property with no setter](#property_with_no_setter)\n\nThe example below shows how to set a getter for a property. It doesn't specify a [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set), so a `TypeError` will be thrown upon trying to set the `temperature` property to `30`. For more details see also the [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) page.\n\n```\n\"use strict\";\n\nfunction Archiver() {\n  const temperature = null;\n  Object.defineProperty(this, \"temperature\", {\n    get() {\n      console.log(\"get!\");\n      return temperature;\n    },\n  });\n}\n\nconst arc = new Archiver();\narc.temperature; // 'get!'\n\narc.temperature = 30;\n// TypeError: setting getter-only property \"temperature\"\n```\n\nTo fix this error, you will either need to remove the `arc.temperature = 30` line, which attempts to set the temperature property, or you will need to implement a [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) for it, for example like this:\n\n```\n\"use strict\";\n\nfunction Archiver() {\n  let temperature = null;\n  const archive = [];\n\n  Object.defineProperty(this, \"temperature\", {\n    get() {\n      console.log(\"get!\");\n      return temperature;\n    },\n    set(value) {\n      temperature = value;\n      archive.push({ val: temperature });\n    },\n  });\n\n  this.getArchive = function () {\n    return archive;\n  };\n}\n\nconst arc = new Archiver();\narc.temperature; // 'get!'\narc.temperature = 11;\narc.temperature = 13;\narc.getArchive(); // [{ val: 11 }, { val: 13 }]\n```\n\n## [See also](#see_also)",
    "title": "TypeError: setting getter-only property \"x\" - JavaScript | MDN",
    "description": "The JavaScript strict mode-only exception \"setting getter-only property\" occurs when there is an attempt\n  to set a new value to a property for which only a getter is specified.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property",
    "markdown": "# TypeError: can't assign to property \"x\" on \"y\": not an object - JavaScript\n\nThe JavaScript strict mode exception \"can't assign to property\" occurs when attempting to create a property on [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) value such as a [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), a [string](https://developer.mozilla.org/en-US/docs/Glossary/String), a [number](https://developer.mozilla.org/en-US/docs/Glossary/Number) or a [boolean](https://developer.mozilla.org/en-US/docs/Glossary/Boolean). [Primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) values cannot hold any [property](https://developer.mozilla.org/en-US/docs/Glossary/Property/JavaScript).\n\n## [Message](#message)\n\nTypeError: Cannot create property 'x' on number '1' (V8-based)\nTypeError: can't assign to property \"x\" on 1: not an object (Firefox)\nTypeError: Attempted to assign to readonly property. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is raised when attempting to create a property on [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) value such as a [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), a [string](https://developer.mozilla.org/en-US/docs/Glossary/String), a [number](https://developer.mozilla.org/en-US/docs/Glossary/Number) or a [boolean](https://developer.mozilla.org/en-US/docs/Glossary/Boolean). [Primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) values cannot hold any [property](https://developer.mozilla.org/en-US/docs/Glossary/Property/JavaScript).\n\nThe problem might be that an unexpected value is flowing at an unexpected place, or that an object variant of a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) is expected.\n\n## [Examples](#examples)\n\n### [Invalid cases](#invalid_cases)\n\n```\n\"use strict\";\n\nconst foo = \"my string\";\n// The following line does nothing if not in strict mode.\nfoo.bar = {}; // TypeError: can't assign to property \"bar\" on \"my string\": not an object\n```\n\n### [Fixing the issue](#fixing_the_issue)\n\nEither fix the code to prevent the [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) from being used in such places, or fix the issue by creating the object equivalent [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object).\n\n```\n\"use strict\";\n\nconst foo = new String(\"my string\");\nfoo.bar = {};\n```\n\n## [See also](#see_also)",
    "title": "TypeError: can't assign to property \"x\" on \"y\": not an object - JavaScript | MDN",
    "description": "The JavaScript strict mode exception \"can't assign to property\" occurs when attempting\n  to create a property on primitive value\n  such as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_not_serializable",
    "markdown": "# TypeError: BigInt value can't be serialized in JSON - JavaScript\n\nThe JavaScript exception \"BigInt value can't be serialized in JSON\" occurs when a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is encountered in [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) with no custom serialization method provided.\n\n## [Message](#message)\n\nTypeError: Do not know how to serialize a BigInt (V8-based)\nTypeError: BigInt value can't be serialized in JSON (Firefox)\nTypeError: JSON.stringify cannot serialize BigInt. (Safari)\n\n## [Error type](#error_type)\n\n## [What went wrong?](#what_went_wrong)\n\nYou are trying to serialize a BigInt value using `JSON.stringify`, which does not support BigInt values by default.Sometimes, JSON stringification happens implicitly in libraries, as part of data serialization. For example, sending data to the server, storing it in external storage, or transferring it between threads would all require serialization, which is often done using JSON.\n\nThere are several ways to handle this:\n\n*   If you can alter the data source, avoid using BigInt values and cast it to a number first (which may lose precision for large numbers).\n*   If you can alter the stringification process, pass a replacer function to `JSON.stringify` that converts BigInt values to strings or numbers.\n*   You can also provide a `BigInt.prototype.toJSON` method globally that gets called whenever a BigInt value is stringified.\n\nFor more information on various tradeoffs, see [BigInt reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json).\n\n## [Examples](#examples)\n\n### [Providing a custom serialization method](#providing_a_custom_serialization_method)\n\nBy default, BigInt values are not serializable in JSON:\n\n```\nconst data = { a: 1n };\nJSON.stringify(data);\n// TypeError: BigInt value can't be serialized in JSON\n```\n\nAssuming you intend for the JSON to contain a number value, here are a few approaches that work:\n\n*   Convert the BigInt to a number before stringifying:\n    \n    ```\n    const data = { a: 1n };\n    JSON.stringify({ ...data, a: Number(data.a) });\n    // '{\"a\":1}'\n    ```\n    \n*   Provide a replacer function that converts BigInt values to numbers or [raw JSON objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON):\n    \n    ```\n    const data = { a: 1n };\n    JSON.stringify(data, (key, value) =>\n      typeof value === \"bigint\" ? Number(value) : value,\n    );\n    // '{\"a\":1}'\n    ```\n    \n    ```\n    const data = { a: 1n };\n    JSON.stringify(data, (key, value) =>\n      typeof value === \"bigint\" ? JSON.rawJSON(value.toString()) : value,\n    );\n    // '{\"a\":1}'\n    ```\n    \n*   Provide a `BigInt.prototype.toJSON` method that gets called whenever a BigInt value is stringified:\n    \n    ```\n    BigInt.prototype.toJSON = function () {\n      return Number(this);\n    };\n    const data = { a: 1n };\n    JSON.stringify(data);\n    // '{\"a\":1}'\n    ```\n    \n    ```\n    BigInt.prototype.toJSON = function () {\n      return JSON.rawJSON(this.toString());\n    };\n    const data = { a: 1n };\n    JSON.stringify(data);\n    // '{\"a\":1}'\n    ```\n    \n\n## [See also](#see_also)",
    "title": "TypeError: BigInt value can't be serialized in JSON - JavaScript | MDN",
    "description": "The JavaScript exception \"BigInt value can't be serialized in JSON\" occurs when a BigInt is encountered in JSON.stringify with no custom serialization method provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview",
    "markdown": "# JavaScript technologies overview - JavaScript\n\nWhereas [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) defines a webpage's structure and content and [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) sets the formatting and appearance, [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript) adds interactivity to a webpage and creates rich web applications.\n\nHowever, the umbrella term \"JavaScript\" as understood in a web browser context contains several very different elements. One of them is the core language (ECMAScript), another is the collection of the [Web APIs](https://developer.mozilla.org/en-US/docs/Web/API), including the DOM (Document Object Model).\n\n## [JavaScript, the core language (ECMAScript)](#javascript_the_core_language_ecmascript)\n\nThe core language of JavaScript is standardized by the ECMA TC39 committee as a language named ECMAScript. \"ECMAScript\" is the term for the language standard, but \"ECMAScript\" and \"JavaScript\" can be used interchangeably.\n\nThis core language is also used in non-browser environments, for example in [Node.js](https://nodejs.org/).\n\n### [What falls under the ECMAScript scope?](#what_falls_under_the_ecmascript_scope)\n\nAmong other things, ECMAScript defines:\n\n*   Language syntax (parsing rules, keywords, control flow, object literal initialization, ...)\n*   Error handling mechanisms ([`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw), [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch), ability to create user-defined [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) types)\n*   Types (boolean, number, string, function, object, ...)\n*   A prototype-based inheritance mechanism\n*   Built-in objects and functions, including [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON), [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math), [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) methods, [`parseInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt), [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI), etc.\n*   [Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\n*   A [module system](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)\n*   Basic memory model\n\n### [Standardization process](#standardization_process)\n\nECMAScript editions are approved and published as a standard by the ECMA General Assembly on a yearly basis. All development is public on the [Ecma TC39 GitHub organization](https://github.com/tc39), which hosts proposals, the official specification text, and meeting notes.\n\nBefore the 6th edition of ECMAScript (known as ES6), specifications were published once every several years, and are commonly referred by their major version numbers — ES3, ES5, etc. After ES6, the specification is named by the publishing year — ES2017, ES2018, etc. ES6 is synonymous with ES2015. _ESNext_ is a dynamic name that refers to whatever the next version is at the time of writing. ESNext features are more correctly called proposals, because, by definition, the specification has not been finalized yet.\n\nThe current committee-approved snapshot of ECMA-262 is available in PDF and HTML format on Ecma International's [ECMA-262 language specification page](https://ecma-international.org/publications-and-standards/standards/ecma-262/). ECMA-262 and ECMA-402 are continuously maintained and kept up to date by the specification editors; the TC39 website hosts the latest, up-to-date [ECMA-262](https://tc39.es/ecma262/) and [ECMA-402](https://tc39.es/ecma402/) versions.\n\nNew language features, including introduction of new syntaxes and APIs and revision of existing behaviors, are discussed in the form of proposals. Each proposal goes through a [4-stage process](https://tc39.es/process-document/), and is typically implemented by JavaScript engines at stage 3 or stage 4 and thus available for public consumption.\n\nSee [Wikipedia ECMAScript entry](https://en.wikipedia.org/wiki/ECMAScript) for more information on ECMAScript history.\n\n### [Internationalization API](#internationalization_api)\n\nThe [ECMAScript Internationalization API Specification](https://402.ecma-international.org/1.0/) is an addition to the ECMAScript Language Specification, also standardized by Ecma TC39. The internationalization API provides collation (string comparison), number formatting, and date-and-time formatting for JavaScript applications, letting the applications choose the language and tailor the functionality to their needs. The initial standard was approved in December 2012; the status of implementations in browsers is tracked in the documentation of the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) object. The Internationalization specification is nowadays also ratified on a yearly basis and browsers constantly improve their implementation.\n\n## [DOM APIs](#dom_apis)\n\n### [WebIDL](#webidl)\n\nThe [WebIDL specification](https://webidl.spec.whatwg.org/) provides the glue between the DOM technologies and ECMAScript.\n\n### [The Core of the DOM](#the_core_of_the_dom)\n\nThe Document Object Model (DOM) is a cross-platform, **language-independent convention** for representing and interacting with objects in HTML, XHTML and XML documents. Objects in the **DOM tree** may be addressed and manipulated by using methods on the objects. The [W3C](https://developer.mozilla.org/en-US/docs/Glossary/W3C) standardizes the Core Document Object Model, which defines language-agnostic interfaces that abstract HTML and XML documents as objects, and also defines mechanisms to manipulate this abstraction. Among the things defined by the DOM, we can find:\n\n*   The document structure, a tree model, and the DOM Event architecture in [DOM core](https://dom.spec.whatwg.org/): [`Node`](https://developer.mozilla.org/en-US/docs/Web/API/Node), [`Element`](https://developer.mozilla.org/en-US/docs/Web/API/Element), [`DocumentFragment`](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment), [`Document`](https://developer.mozilla.org/en-US/docs/Web/API/Document), [`DOMImplementation`](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation), [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event), [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget), …\n*   A less rigorous definition of the DOM Event Architecture, as well as specific events in [DOM events](https://w3c.github.io/uievents/).\n*   Other things such as [DOM Traversal](https://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html) and [DOM Range](https://dom.spec.whatwg.org/#ranges).\n\nFrom the ECMAScript point of view, objects defined in the DOM specification are called \"host objects\".\n\n### [HTML DOM](#html_dom)\n\n[HTML](https://html.spec.whatwg.org/multipage/), the Web's markup language, is specified in terms of the DOM. Layered above the abstract concepts defined in DOM Core, HTML also defines the _meaning_ of elements. The HTML DOM includes such things as the `className` property on HTML elements, or APIs such as [`document.body`](https://developer.mozilla.org/en-US/docs/Web/API/Document/body).\n\nThe HTML specification also defines restrictions on documents; for example, it requires all children of a [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) element, which represents an unordered list, to be [`<li>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li) elements, as those represent list items. In general, it also forbids using elements and attributes that aren't defined in a standard.\n\nLooking for the [`Document`](https://developer.mozilla.org/en-US/docs/Web/API/Document) object, [`Window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) object, and the other DOM elements? Read the [DOM documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model).\n\n## [Other notable APIs](#other_notable_apis)\n\n*   The [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) and [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) functions were first specified on the [`Window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) interface in HTML Standard.\n*   [XMLHttpRequest](https://xhr.spec.whatwg.org/) makes it possible to send asynchronous HTTP requests.\n*   The [Fetch API](https://fetch.spec.whatwg.org/) provides a more ergonomic abstraction for network requests.\n*   The [CSS Object Model](https://drafts.csswg.org/cssom/) abstract CSS rules as objects.\n*   [WebWorkers](https://html.spec.whatwg.org/multipage/workers.html) allows parallel computation.\n*   [WebSockets](https://html.spec.whatwg.org/multipage/#network) allows low-level bidirectional communication.\n*   [Canvas 2D Context](https://html.spec.whatwg.org/multipage//#2dcontext) is a drawing API for [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas).\n*   The [WebAssembly interface](https://webassembly.github.io/spec/js-api) provides utilities for communication between JavaScript code and [WebAssembly](https://developer.mozilla.org/en-US/docs/WebAssembly) modules.\n\nNon-browser environments (like Node.js) often do not have DOM APIs — because they don't interact with a document — but they still usually implement many web APIs, such as [`fetch()`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) and [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout).\n\n## [JavaScript implementations](#javascript_implementations)\n\nThere are three main JavaScript implementations used in browser environments and beyond:\n\n*   Mozilla's [SpiderMonkey](https://spidermonkey.dev/), used in Firefox. This was the first _ever_ JavaScript engine, created by Brendan Eich at Netscape.\n*   Google's [V8](https://v8.dev/), used in Google Chrome, Opera, Edge, [Node.js](https://nodejs.org/), [Deno](https://deno.land/), [Electron](https://www.electronjs.org/), and more.\n*   Apple's [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore) (also known as SquirrelFish/Nitro), used in WebKit browsers such as Apple Safari, and [Bun](https://bun.sh/).\n\nBesides the above implementations, there are other popular JavaScript engines such as:\n\n*   [Carakan](https://dev.opera.com/blog/carakan-faq/), used in earlier versions of Opera.\n*   Microsoft's [Chakra](https://en.wikipedia.org/wiki/Chakra_(JScript_engine)) engine, used in Internet Explorer (although the language it implements is formally called \"JScript\" to avoid trademark issues). Earlier versions of Edge used a new JavaScript engine, confusingly also called [Chakra](https://en.wikipedia.org/wiki/Chakra_(JavaScript_engine)).\n*   [LibJS](https://serenityos.github.io/libjs-website/), used in the browser implementation of [SerenityOS](https://serenityos.org/).\n*   Mozilla's [Rhino](https://en.wikipedia.org/wiki/Rhino_(JavaScript_engine)) engine, a JavaScript implementation written in Java, created primarily by Norris Boyd (also at Netscape).\n\nThere are some engines specifically tailored for non-browser purposes:\n\n*   [Engine262](https://engine262.js.org/), a JavaScript engine written in JavaScript. It is created for JavaScript developers to explore new language features and find bugs in the specification.\n*   [Moddable XS](https://www.moddable.com/), used in embedded systems such as IoT.\n*   [QuickJS](https://bellard.org/quickjs/), a small and embeddable JavaScript engine.\n*   Meta's [Hermes](https://hermesengine.dev/) engine, an engine optimized for [React Native](https://reactnative.dev/docs/hermes).\n*   Oracle's [GraalJS](https://www.graalvm.org/), a high performance implementation built on the GraalVM by Oracle Labs.\n\nJavaScript engines expose a public API which application developers can use to integrate JavaScript into their software. By far, the most common host environment for JavaScript is web browsers. Web browsers typically use the public API to create **host objects** responsible for reflecting the [DOM](https://dom.spec.whatwg.org/) into JavaScript.\n\nAnother common application for JavaScript is as a (Web) server-side scripting language. A JavaScript web server exposes host objects representing a HTTP request and response objects, which can then be manipulated by a JavaScript program to dynamically generate web pages. [Node.js](https://nodejs.org/) is a popular example of this.\n\n## [Shells](#shells)\n\nA JavaScript shell allows you to quickly test snippets of JavaScript code without having to reload a web page. They are extremely useful for developing and debugging code.\n\n### [Standalone JavaScript shells](#standalone_javascript_shells)\n\nThe following JavaScript shells are stand-alone environments, like Perl or Python.\n\n*   [Node.js](https://nodejs.org/) - Node.js is a platform for easily building fast, scalable network applications.\n*   [ShellJS](https://github.com/shelljs/shelljs) - Portable Unix shell commands for Node.js.\n\n### [Browser-based JavaScript shells](#browser-based_javascript_shells)\n\nThe following JavaScript shells run code through the browser's JavaScript engine.\n\n*   Firefox has a [built-in JavaScript console](https://firefox-source-docs.mozilla.org/devtools-user/web_console/the_command_line_interpreter/index.html), which support multi-line editing.\n*   [Babel REPL](https://babeljs.io/repl) - A browser-based [REPL](https://en.wikipedia.org/wiki/REPL) for experimenting with future JavaScript.\n*   [TypeScript playground](https://www.typescriptlang.org/play) — A browser-based playground for experimenting both new JavaScript features (via the tsc compiler) and TypeScript syntax.\n\nHelpful tools for writing and debugging your JavaScript code.\n\n[Firefox Developer Tools](https://firefox-source-docs.mozilla.org/devtools-user/index.html)\n\n[Web Console](https://firefox-source-docs.mozilla.org/devtools-user/web_console/index.html), [JavaScript Profiler](https://firefox-source-docs.mozilla.org/devtools-user/performance/index.html), [Debugger](https://firefox-source-docs.mozilla.org/devtools-user/debugger/index.html), and more.\n\n[Learn JavaScript](https://learnjavascript.online/)\n\nAn excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.\n\n[TogetherJS](https://togetherjs.com/)\n\nCollaboration made easy. By adding TogetherJS to your site, your users can help each other out on a website in real-time!\n\n[Stack Overflow](https://stackoverflow.com/questions/tagged/javascript)\n\nStack Overflow questions tagged with \"JavaScript\".\n\n[JSFiddle](https://jsfiddle.net/)\n\nEdit JavaScript, CSS, and HTML and get live results. Use external resources and collaborate with your team online.\n\n[Plunker](https://plnkr.co/)\n\nPlunker is an online community for creating, collaborating on, and sharing your web development ideas. Edit your JavaScript, CSS, and HTML files and get live results and file structure.\n\n[JSBin](https://jsbin.com/)\n\nJS Bin is an open-source collaborative web development debugging tool.\n\n[Codepen](https://codepen.io/)\n\nCodepen is another collaborative web development tool used as a live result playground.\n\n[StackBlitz](https://stackblitz.com/)\n\nStackBlitz is another online playground/debugging tool, which can host and deploy full-stack applications using React, Angular, etc.\n\n[RunJS](https://runjs.app/)\n\nRunJS is a desktop playground/scratchpad tool, which provides live results and access to both Node and Browser APIs.",
    "title": "JavaScript technologies overview - JavaScript | MDN",
    "description": "Whereas HTML defines a webpage's structure and content and CSS sets the formatting and appearance, JavaScript adds interactivity to a webpage and creates rich web applications.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar",
    "markdown": "# Lexical grammar - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThis page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be _parsed_ to a more structured representation. The initial step of parsing is called [lexical analysis](https://en.wikipedia.org/wiki/Lexical_analysis), in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include [white space](#white_space) and [comments](#comments). The others, including [identifiers](#identifiers), [keywords](#keywords), [literals](#literals), and punctuators (mostly [operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators)), will be used for further syntax analysis. [Line terminators](#line_terminators) and multiline comments are also syntactically insignificant, but they guide the process for [automatic semicolons insertion](#automatic_semicolon_insertion) to make certain invalid token sequences become valid.\n\n## [Format-control characters](#format-control_characters)\n\nFormat-control characters have no visual representation but are used to control the interpretation of the text.\n\n| Code point | Name | Abbreviation | Description |\n| --- | --- | --- | --- |\n| U+200C | Zero width non-joiner | <ZWNJ> | Placed between characters to prevent being connected into ligatures in certain languages ([Wikipedia](https://en.wikipedia.org/wiki/Zero-width_non-joiner)). |\n| U+200D | Zero width joiner | <ZWJ> | Placed between characters that would not normally be connected in order to cause the characters to be rendered using their connected form in certain languages ([Wikipedia](https://en.wikipedia.org/wiki/Zero-width_joiner)). |\n| U+FEFF | Byte order mark | <BOM> | Used at the start of the script to mark it as Unicode and the text's byte order ([Wikipedia](https://en.wikipedia.org/wiki/Byte_order_mark)). |\n\nIn JavaScript source text, <ZWNJ> and <ZWJ> are treated as [identifier](#identifiers) parts, while <BOM> (also called a zero-width no-break space <ZWNBSP> when not at the start of text) is treated as [white space](#white_space).\n\n## [White space](#white_space)\n\n[White space](https://developer.mozilla.org/en-US/docs/Glossary/Whitespace) characters improve the readability of source text and separate tokens from each other. These characters are usually unnecessary for the functionality of the code. [Minification tools](https://en.wikipedia.org/wiki/Minification_%28programming%29) are often used to remove whitespace in order to reduce the amount of data that needs to be transferred.\n\n| Code point | Name | Abbreviation | Description | Escape sequence |\n| --- | --- | --- | --- | --- |\n| U+0009 | Character tabulation | <TAB> | Horizontal tabulation | \\\\t |\n| U+000B | Line tabulation | <VT> | Vertical tabulation | \\\\v |\n| U+000C | Form feed | <FF> | Page breaking control character ([Wikipedia](https://en.wikipedia.org/wiki/Page_break#Form_feed)). | \\\\f |\n| U+0020 | Space | <SP> | Normal space |     |\n| U+00A0 | No-break space | <NBSP> | Normal space, but no point at which a line may break |     |\n| U+FEFF | Zero-width no-break space | <ZWNBSP> | When not at the start of a script, the BOM marker is a normal whitespace character. |     |\n| Others | Other Unicode space characters | <USP> | [Characters in the \"Space\\_Separator\" general category](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGeneral_Category%3DSpace_Separator%7D) |     |\n\n**Note:** Changes to the Unicode standard used by the JavaScript engine may affect programs' behavior. For example, ES2016 upgraded the reference Unicode standard from 5.1 to 8.0.0, which caused U+180E MONGOLIAN VOWEL SEPARATOR to be moved from the \"Space\\_Separator\" category to the \"Format (Cf)\" category, and made it a non-whitespace. Subsequently, the result of [`\"\\u180E\".trim().length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim) changed from `0` to `1`.\n\n## [Line terminators](#line_terminators)\n\nIn addition to [white space](#white_space) characters, line terminator characters are used to improve the readability of the source text. However, in some cases, line terminators can influence the execution of JavaScript code as there are a few places where they are forbidden. Line terminators also affect the process of [automatic semicolon insertion](#automatic_semicolon_insertion).\n\nOutside the context of lexical grammar, white space and line terminators are often conflated. For example, [`String.prototype.trim()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim) removes all white space and line terminators from the beginning and end of a string. The `\\s` [character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) in regular expressions matches all white space and line terminators.\n\nOnly the following Unicode code points are treated as line terminators in ECMAScript, other line breaking characters are treated as white space (for example, Next Line, NEL, U+0085 is considered as white space).\n\n| Code point | Name | Abbreviation | Description | Escape sequence |\n| --- | --- | --- | --- | --- |\n| U+000A | Line Feed | <LF> | New line character in UNIX systems. | \\\\n |\n| U+000D | Carriage Return | <CR> | New line character in Commodore and early Mac systems. | \\\\r |\n| U+2028 | Line Separator | <LS> | [Wikipedia](https://en.wikipedia.org/wiki/Newline) |     |\n| U+2029 | Paragraph Separator | <PS> | [Wikipedia](https://en.wikipedia.org/wiki/Newline) |     |\n\nComments are used to add hints, notes, suggestions, or warnings to JavaScript code. This can make it easier to read and understand. They can also be used to disable code to prevent it from being executed; this can be a valuable debugging tool.\n\nJavaScript has two long-standing ways to add comments to code: line comments and block comments. In addition, there's a special hashbang comment syntax.\n\nThe first way is the `//` comment; this makes all text following it on the same line into a comment. For example:\n\n```\nfunction comment() {\n  // This is a one line JavaScript comment\n  console.log(\"Hello world!\");\n}\ncomment();\n```\n\nThe second way is the `/* */` style, which is much more flexible.\n\nFor example, you can use it on a single line:\n\n```\nfunction comment() {\n  /* This is a one line JavaScript comment */\n  console.log(\"Hello world!\");\n}\ncomment();\n```\n\nYou can also make multiple-line comments, like this:\n\n```\nfunction comment() {\n  /* This comment spans multiple lines. Notice\n     that we don't need to end the comment until we're done. */\n  console.log(\"Hello world!\");\n}\ncomment();\n```\n\nYou can also use it in the middle of a line, if you wish, although this can make your code harder to read so it should be used with caution:\n\n```\nfunction comment(x) {\n  console.log(\"Hello \" + x /* insert the value of x */ + \" !\");\n}\ncomment(\"world\");\n```\n\nIn addition, you can use it to disable code to prevent it from running, by wrapping code in a comment, like this:\n\n```\nfunction comment() {\n  /* console.log(\"Hello world!\"); */\n}\ncomment();\n```\n\nIn this case, the `console.log()` call is never issued, since it's inside a comment. Any number of lines of code can be disabled this way.\n\nBlock comments that contain at least one line terminator behave like [line terminators](#line_terminators) in [automatic semicolon insertion](#automatic_semicolon_insertion).\n\nThere's a special third comment syntax, the **hashbang comment**. A hashbang comment behaves exactly like a single line-only (`//`) comment, except that it begins with `#!` and **is only valid at the absolute start of a script or module**. Note also that no whitespace of any kind is permitted before the `#!`. The comment consists of all the characters after `#!` up to the end of the first line; only one such comment is permitted.\n\nHashbang comments in JavaScript resemble [shebangs in Unix](https://en.wikipedia.org/wiki/Shebang_(Unix)) which provide the path to a specific JavaScript interpreter that you want to use to execute the script. Before the hashbang comment became standardized, it had already been de-facto implemented in non-browser hosts like Node.js, where it was stripped from the source text before being passed to the engine. An example is as follows:\n\n```\n#!/usr/bin/env node\n\nconsole.log(\"Hello world\");\n```\n\nThe JavaScript interpreter will treat it as a normal comment — it only has semantic meaning to the shell if the script is directly run in a shell.\n\n**Warning:** If you want scripts to be runnable directly in a shell environment, encode them in UTF-8 without a [BOM](https://en.wikipedia.org/wiki/Byte_order_mark). Although a BOM will not cause any problems for code running in a browser — because it's stripped during UTF-8 decoding, before the source text is analyzed — a Unix/Linux shell will not recognize the hashbang if it's preceded by a BOM character.\n\nYou must only use the `#!` comment style to specify a JavaScript interpreter. In all other cases just use a `//` comment (or multiline comment).\n\n## [Identifiers](#identifiers)\n\nAn _identifier_ is used to link a value with a name. Identifiers can be used in various places:\n\n```\nconst decl = 1; // Variable declaration (may also be `let` or `var`)\nfunction fn() {} // Function declaration\nconst obj = { key: \"value\" }; // Object keys\n// Class declaration\nclass C {\n  #priv = \"value\"; // Private property\n}\nlbl: console.log(1); // Label\n```\n\nIn JavaScript, identifiers are commonly made of alphanumeric characters, underscores (`_`), and dollar signs (`$`). Identifiers are not allowed to start with numbers. However, JavaScript identifiers are not only limited to [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) — many Unicode code points are allowed as well. Namely, any character in the [ID\\_Start](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BID_Start%7D) category can start an identifier, while any character in the [ID\\_Continue](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BID_Continue%7D) category can appear after the first character.\n\n**Note:** If, for some reason, you need to parse some JavaScript source yourself, do not assume all identifiers follow the pattern `/[A-Za-z_$][\\w$]*/` (i.e. ASCII-only)! The range of identifiers can be described by the regex `/[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*/u` (excluding unicode escape sequences).\n\nIn addition, JavaScript allows using [Unicode escape sequences](#unicode_escape_sequences) in the form of `\\u0000` or `\\u{000000}` in identifiers, which encode the same string value as the actual Unicode characters. For example, `你好` and `\\u4f60\\u597d` are the same identifiers:\n\n```\nconst 你好 = \"Hello\";\nconsole.log(\\u4f60\\u597d); // Hello\n```\n\nNot all places accept the full range of identifiers. Certain syntaxes, such as function declarations, function expressions, and variable declarations require using identifiers names that are not [reserved words](#reserved_words).\n\n```\nfunction import() {} // Illegal: import is a reserved word.\n```\n\nMost notably, private properties and object properties allow reserved words.\n\n```\nconst obj = { import: \"value\" }; // Legal despite `import` being reserved\nclass C {\n  #import = \"value\";\n}\n```\n\n## [Keywords](#keywords)\n\n_Keywords_ are tokens that look like identifiers but have special meanings in JavaScript. For example, the keyword [`async`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) before a function declaration indicates that the function is asynchronous.\n\nSome keywords are _reserved_, meaning that they cannot be used as an identifier for variable declarations, function declarations, etc. They are often called _reserved words_. [A list of these reserved words](#reserved_words) is provided below. Not all keywords are reserved — for example, `async` can be used as an identifier anywhere. Some keywords are only _contextually reserved_ — for example, `await` is only reserved within the body of an async function, and `let` is only reserved in strict mode code, or `const` and `let` declarations.\n\nIdentifiers are always compared by _string value_, so escape sequences are interpreted. For example, this is still a syntax error:\n\n```\nconst els\\u{65} = 1;\n// `els\\u{65}` encodes the same identifier as `else`\n```\n\n### [Reserved words](#reserved_words)\n\nThese keywords cannot be used as identifiers for variables, functions, classes, etc. anywhere in JavaScript source.\n\n*   [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break)\n*   [`case`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)\n*   [`catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n*   [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class)\n*   [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)\n*   [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue)\n*   [`debugger`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger)\n*   [`default`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)\n*   [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete)\n*   [`do`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while)\n*   [`else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\n*   [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export)\n*   [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends)\n*   [`false`](#boolean_literal)\n*   [`finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n*   [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for)\n*   [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)\n*   [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\n*   [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\n*   [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in)\n*   [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)\n*   [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new)\n*   [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null)\n*   [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return)\n*   [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super)\n*   [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)\n*   [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)\n*   [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw)\n*   [`true`](#boolean_literal)\n*   [`try`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n*   [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n*   [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\n*   [`void`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void)\n*   [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while)\n*   [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with)\n\nThe following are only reserved when they are found in strict mode code:\n\n*   [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) (also reserved in `const`, `let`, and class declarations)\n*   [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static)\n*   [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) (also reserved in generator function bodies)\n\nThe following are only reserved when they are found in module code or async function bodies:\n\n*   [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)\n\n### [Future reserved words](#future_reserved_words)\n\nThe following are reserved as future keywords by the ECMAScript specification. They have no special functionality at present, but they might at some future time, so they cannot be used as identifiers.\n\nThese are always reserved:\n\n*   `enum`\n\nThe following are only reserved when they are found in strict mode code:\n\n*   `implements`\n*   `interface`\n*   `package`\n*   `private`\n*   `protected`\n*   `public`\n\n#### Future reserved words in older standards\n\nThe following are reserved as future keywords by older ECMAScript specifications (ECMAScript 1 till 3).\n\n*   `abstract`\n*   `boolean`\n*   `byte`\n*   `char`\n*   `double`\n*   `final`\n*   `float`\n*   `goto`\n*   `int`\n*   `long`\n*   `native`\n*   `short`\n*   `synchronized`\n*   `throws`\n*   `transient`\n*   `volatile`\n\n### [Identifiers with special meanings](#identifiers_with_special_meanings)\n\nA few identifiers have a special meaning in some contexts without being reserved words of any kind. They include:\n\n*   [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) (not a keyword, but cannot be declared as identifier in strict mode)\n*   `as` ([`import * as ns from \"mod\"`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#namespace_import))\n*   [`async`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n*   [`eval`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) (not a keyword, but cannot be declared as identifier in strict mode)\n*   `from` ([`import x from \"mod\"`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import))\n*   [`get`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)\n*   [`of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n*   [`set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)\n\n## [Literals](#literals)\n\n### [Null literal](#null_literal)\n\nSee also [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) for more information.\n\n### [Boolean literal](#boolean_literal)\n\nSee also [boolean type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type) for more information.\n\n### [Numeric literals](#numeric_literals)\n\nThe [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type) and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type) types use numeric literals.\n\n#### Decimal\n\nDecimal literals can start with a zero (`0`) followed by another decimal digit, but if all digits after the leading `0` are smaller than 8, the number is interpreted as an octal number. This is considered a legacy syntax, and number literals prefixed with `0`, whether interpreted as octal or decimal, cause a syntax error in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#legacy_octal_literals) — so, use the `0o` prefix instead.\n\n```\n0888 // 888 parsed as decimal\n0777 // parsed as octal, 511 in decimal\n```\n\n##### Exponential\n\nThe decimal exponential literal is specified by the following format: `beN`; where `b` is a base number (integer or floating), followed by an `E` or `e` character (which serves as separator or _exponent indicator_) and `N`, which is _exponent_ or _power_ number – a signed integer.\n\n```\n0e-5   // 0\n0e+5   // 0\n5e1    // 50\n175e-2 // 1.75\n1e3    // 1000\n1e-3   // 0.001\n1E3    // 1000\n```\n\n#### Binary\n\nBinary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"B\" (`0b` or `0B`). Any character after the `0b` that is not 0 or 1 will terminate the literal sequence.\n\n```\n0b10000000000000000000000000000000 // 2147483648\n0b01111111100000000000000000000000 // 2139095040\n0B00000000011111111111111111111111 // 8388607\n```\n\n#### Octal\n\nOctal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"O\" (`0o` or `0O)`. Any character after the `0o` that is outside the range (01234567) will terminate the literal sequence.\n\n```\n0O755 // 493\n0o644 // 420\n```\n\n#### Hexadecimal\n\nHexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"X\" (`0x` or `0X`). Any character after the `0x` that is outside the range (0123456789ABCDEF) will terminate the literal sequence.\n\n```\n0xFFFFFFFFFFFFFFFFF // 295147905179352830000\n0x123456789ABCDEF   // 81985529216486900\n0XA                 // 10\n```\n\n#### BigInt literal\n\nThe [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type) type is a numeric primitive in JavaScript that can represent integers with arbitrary precision. BigInt literals are created by appending `n` to the end of an integer.\n\n```\n123456789123456789n     // 123456789123456789\n0o777777777777n         // 68719476735\n0x123456789ABCDEFn      // 81985529216486895\n0b11101001010101010101n // 955733\n```\n\nBigInt literals cannot start with `0` to avoid confusion with legacy octal literals.\n\n```\n0755n; // SyntaxError: invalid BigInt syntax\n```\n\nFor octal `BigInt` numbers, always use zero followed by the letter \"o\" (uppercase or lowercase):\n\nFor more information about `BigInt`, see also [JavaScript data structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type).\n\n#### Numeric separators\n\nTo improve readability for numeric literals, underscores (`_`, `U+005F`) can be used as separators:\n\n```\n1_000_000_000_000\n1_050.95\n0b1010_0001_1000_0101\n0o2_2_5_6\n0xA0_B0_C0\n1_000_000_000_000_000_000_000n\n```\n\nNote these limitations:\n\n```\n// More than one underscore in a row is not allowed\n100__000; // SyntaxError\n\n// Not allowed at the end of numeric literals\n100_; // SyntaxError\n\n// Can not be used after leading 0\n0_1; // SyntaxError\n```\n\n### [String literals](#string_literals)\n\nA [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#string_type) literal is zero or more Unicode code points enclosed in single or double quotes. Unicode code points may also be represented by an escape sequence. All code points may appear literally in a string literal except for these code points:\n\n*   U+005C \\\\ (backslash)\n*   U+000D <CR>\n*   U+000A <LF>\n*   The same kind of quote that begins the string literal\n\nAny code points may appear in the form of an escape sequence. String literals evaluate to ECMAScript String values. When generating these String values Unicode code points are UTF-16 encoded.\n\nThe following subsections describe various escape sequences (`\\` followed by one or more characters) available in string literals. Any escape sequence not listed below becomes an \"identity escape\" that becomes the code point itself. For example, `\\z` is the same as `z`. There's a deprecated octal escape sequence syntax described in the [Deprecated and obsolete features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#escape_sequences) page. Many of these escape sequences are also valid in regular expressions — see [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape).\n\n#### Escape sequences\n\nSpecial characters can be encoded using escape sequences:\n\n| Escape sequence | Unicode code point |\n| --- | --- |\n| `\\0` | null character (U+0000 NULL) |\n| `\\'` | single quote (U+0027 APOSTROPHE) |\n| `\\\"` | double quote (U+0022 QUOTATION MARK) |\n| `\\\\` | backslash (U+005C REVERSE SOLIDUS) |\n| `\\n` | newline (U+000A LINE FEED; LF) |\n| `\\r` | carriage return (U+000D CARRIAGE RETURN; CR) |\n| `\\v` | vertical tab (U+000B LINE TABULATION) |\n| `\\t` | tab (U+0009 CHARACTER TABULATION) |\n| `\\b` | backspace (U+0008 BACKSPACE) |\n| `\\f` | form feed (U+000C FORM FEED) |\n| `\\` followed by a [line terminator](#line_terminators) | empty string |\n\nThe last escape sequence, `\\` followed by a line terminator, is useful for splitting a string literal across multiple lines without changing its meaning.\n\n```\nconst longString =\n  \"This is a very long string which needs \\\nto wrap across multiple lines because \\\notherwise my code is unreadable.\";\n```\n\nMake sure there is no space or any other character after the backslash (except for a line break), otherwise it will not work. If the next line is indented, the extra spaces will also be present in the string's value.\n\nYou can also use the [`+`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) operator to append multiple strings together, like this:\n\n```\nconst longString =\n  \"This is a very long string which needs \" +\n  \"to wrap across multiple lines because \" +\n  \"otherwise my code is unreadable.\";\n```\n\nBoth of the above methods result in identical strings.\n\n#### Hexadecimal escape sequences\n\nHexadecimal escape sequences consist of `\\x` followed by exactly two hexadecimal digits representing a code unit or code point in the range 0x0000 to 0x00FF.\n\n#### Unicode escape sequences\n\nA Unicode escape sequence consists of exactly four hexadecimal digits following `\\u`. It represents a code unit in the UTF-16 encoding. For code points U+0000 to U+FFFF, the code unit is equal to the code point. Code points U+10000 to U+10FFFF require two escape sequences representing the two code units (a surrogate pair) used to encode the character; the surrogate pair is distinct from the code point.\n\nSee also [`String.fromCharCode()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode) and [`String.prototype.charCodeAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt).\n\n#### Unicode code point escapes\n\nA Unicode code point escape consists of `\\u{`, followed by a code point in hexadecimal base, followed by `}`. The value of the hexadecimal digits must be in the range 0 and 0x10FFFF inclusive. Code points in the range U+10000 to U+10FFFF do not need to be represented as a surrogate pair.\n\nSee also [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) and [`String.prototype.codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt).\n\n```\n\"\\u{2F804}\"; // CJK COMPATIBILITY IDEOGRAPH-2F804 (U+2F804)\n\n// the same character represented as a surrogate pair\n\"\\uD87E\\uDC04\";\n```\n\n### [Regular expression literals](#regular_expression_literals)\n\nRegular expression literals are enclosed by two forward slashes (`/`). The lexer consumes all characters up to the next unescaped forward slash or the end of the line, unless the forward slash appears within a character class (`[]`). Some characters (namely, those that are [identifier parts](#identifiers)) can appear after the closing slash, denoting flags.\n\nThe lexical grammar is very lenient: not all regular expression literals that get identified as one token are valid regular expressions.\n\nSee also [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) for more information.\n\nA regular expression literal cannot start with two forward slashes (`//`), because that would be a line comment. To specify an empty regular expression, use `/(?:)/`.\n\n### [Template literals](#template_literals)\n\nOne template literal consists of several tokens: `` `xxx${ `` (template head), `}xxx${` (template middle), and `` }xxx` `` (template tail) are individual tokens, while any expression may come between them.\n\nSee also [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) for more information.\n\n```\n`string text`\n\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag`string text ${expression} string text`\n```\n\n## [Automatic semicolon insertion](#automatic_semicolon_insertion)\n\nSome [JavaScript statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements)' syntax definitions require semicolons (`;`) at the end. They include:\n\n*   [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)\n*   [Expression statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement)\n*   [`do...while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while)\n*   [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue), [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break), [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return), [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw)\n*   [`debugger`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger)\n*   Class field declarations ([public](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) or [private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties))\n*   [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import), [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export)\n\nHowever, to make the language more approachable and convenient, JavaScript is able to automatically insert semicolons when consuming the token stream, so that some invalid token sequences can be \"fixed\" to valid syntax. This step happens after the program text has been parsed to tokens according to the lexical grammar. There are three cases when semicolons are automatically inserted:\n\n1\\. When a token not allowed by the grammar is encountered, and it's separated from the previous token by at least one [line terminator](#line_terminators) (including a block comment that includes at least one line terminator), or the token is \"}\", then a semicolon is inserted before the token.\n\n```\n{ 1\n2 } 3\n\n// is transformed by ASI into:\n\n{ 1\n;2 ;} 3;\n\n// Which is valid grammar encoding three statements,\n// each consisting of a number literal\n```\n\nThe ending \")\" of [`do...while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while) is taken care of as a special case by this rule as well.\n\n```\ndo {\n  // ...\n} while (condition) /* ; */ // ASI here\nconst a = 1\n```\n\nHowever, semicolons are not inserted if the semicolon would then become the separator in the [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) statement's head.\n\n```\nfor (\n  let a = 1 // No ASI here\n  a < 10 // No ASI here\n  a++\n) {}\n```\n\nSemicolons are also never inserted as [empty statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty). For example, in the code below, if a semicolon is inserted after \")\", then the code would be valid, with an empty statement as the `if` body and the `const` declaration being a separate statement. However, because automatically inserted semicolons cannot become empty statements, this causes a [declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#difference_between_statements_and_declarations) to become the body of the `if` statement, which is not valid.\n\n```\nif (Math.random() > 0.5)\nconst x = 1 // SyntaxError: Unexpected token 'const'\n```\n\n2\\. When the end of the input stream of tokens is reached, and the parser is unable to parse the single input stream as a complete program, a semicolon is inserted at the end.\n\n```\nconst a = 1 /* ; */ // ASI here\n```\n\nThis rule is a complement to the previous rule, specifically for the case where there's no \"offending token\" but the end of input stream.\n\n3\\. When the grammar forbids line terminators in some place but a line terminator is found, a semicolon is inserted. These places include:\n\n*   `expr <here> ++`, `expr <here> --`\n*   `continue <here> lbl`\n*   `break <here> lbl`\n*   `return <here> expr`\n*   `throw <here> expr`\n*   `yield <here> expr`\n*   `yield <here> * expr`\n*   `(param) <here> => {}`\n*   `async <here> function`, `async <here> prop()`, `async <here> function*`, `async <here> *prop()`, `async <here> (param) <here> => {}`\n\nHere [`++`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment) is not treated as a postfix operator applying to variable `b`, because a line terminator occurs between `b` and `++`.\n\n```\na = b\n++c\n\n// is transformed by ASI into\n\na = b;\n++c;\n```\n\nHere, the `return` statement returns `undefined`, and the `a + b` becomes an unreachable statement.\n\n```\nreturn\na + b\n\n// is transformed by ASI into\n\nreturn;\na + b;\n```\n\nNote that ASI would only be triggered if a line break separates tokens that would otherwise produce invalid syntax. If the next token can be parsed as part of a valid structure, semicolons would not be inserted. For example:\n\n```\nconst a = 1\n(1).toString()\n\nconst b = 1\n[1, 2, 3].forEach(console.log)\n```\n\nBecause `()` can be seen as a function call, it would usually not trigger ASI. Similarly, `[]` may be a member access. The code above is equivalent to:\n\n```\nconst a = 1(1).toString();\n\nconst b = 1[1, 2, 3].forEach(console.log);\n```\n\nThis happens to be valid syntax. `1[1, 2, 3]` is a [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) with a [comma](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator)\\-joined expression. Therefore, you would get errors like \"1 is not a function\" and \"Cannot read properties of undefined (reading 'forEach')\" when running the code.\n\nWithin classes, class fields and generator methods can be a pitfall as well.\n\n```\nclass A {\n  a = 1\n  *gen() {}\n}\n```\n\nIt is seen as:\n\n```\nclass A {\n  a = 1 * gen() {}\n}\n```\n\nAnd therefore will be a syntax error around `{`.\n\nThere are the following rules-of-thumb for dealing with ASI, if you want to enforce semicolon-less style:\n\n*   Write postfix `++` and `--` on the same line as their operands.\n    \n    ```\n    const a = b\n    ++\n    console.log(a) // ReferenceError: Invalid left-hand side expression in prefix operation\n    ```\n    \n    ```\n    const a = b++\n    console.log(a)\n    ```\n    \n*   The expressions after `return`, `throw`, or `yield` should be on the same line as the keyword.\n    \n    ```\n    function foo() {\n      return\n        1 + 1 // Returns undefined; 1 + 1 is ignored\n    }\n    ```\n    \n    ```\n    function foo() {\n      return 1 + 1\n    }\n    \n    function foo() {\n      return (\n        1 + 1\n      )\n    }\n    ```\n    \n*   Similarly, the label identifier after `break` or `continue` should be on the same line as the keyword.\n    \n    ```\n    outerBlock: {\n      innerBlock: {\n        break\n          outerBlock // SyntaxError: Illegal break statement\n      }\n    }\n    ```\n    \n    ```\n    outerBlock: {\n      innerBlock: {\n        break outerBlock\n      }\n    }\n    ```\n    \n*   The `=>` of an arrow function should be on the same line as the end of its parameters.\n    \n    ```\n    const foo = (a, b)\n      => a + b\n    ```\n    \n    ```\n    const foo = (a, b) =>\n      a + b\n    ```\n    \n*   The `async` of async functions, methods, etc. cannot be directly followed by a line terminator.\n*   If a line starts with one of `(`, `[`, `` ` ``, `+`, `-`, `/` (as in regex literals), prefix it with a semicolon, or end the previous line with a semicolon.\n    \n    ```\n    // The () may be merged with the previous line as a function call\n    (() => {\n      // ...\n    })()\n    \n    // The [ may be merged with the previous line as a property access\n    [1, 2, 3].forEach(console.log)\n    \n    // The ` may be merged with the previous line as a tagged template literal\n    `string text ${data}`.match(pattern).forEach(console.log)\n    \n    // The + may be merged with the previous line as a binary + expression\n    +a.toString()\n    \n    // The - may be merged with the previous line as a binary - expression\n    -a.toString()\n    \n    // The / may be merged with the previous line as a division expression\n    /pattern/.exec(str).forEach(console.log)\n    ```\n    \n    ```\n    ;(() => {\n      // ...\n    })()\n    ;[1, 2, 3].forEach(console.log)\n    ;`string text ${data}`.match(pattern).forEach(console.log)\n    ;+a.toString()\n    ;-a.toString()\n    ;/pattern/.exec(str).forEach(console.log)\n    ```\n    \n*   Class fields should preferably always be ended with semicolons — in addition to the previous rule (which includes a field declaration followed by a [computed property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names), since the latter starts with `[`), semicolons are also required between a field declaration and a generator method.\n    \n    ```\n    class A {\n      a = 1\n      [b] = 2\n      *gen() {} // Seen as a = 1[b] = 2 * gen() {}\n    }\n    ```\n    \n    ```\n    class A {\n      a = 1;\n      [b] = 2;\n      *gen() {}\n    }\n    ```\n    \n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>](https://tc39.es/ecma262/multipage/ecmascript-language-lexical-grammar.html) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Lexical grammar - JavaScript | MDN",
    "description": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",
    "markdown": "# Strict mode - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Note:** Sometimes you'll see the default, non-strict mode referred to as _[sloppy mode](https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode)_. This isn't an official term, but be aware of it, just in case.\n\nJavaScript's strict mode is a way to _opt in_ to a restricted variant of JavaScript, thereby implicitly opting-out of \"[sloppy mode](https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode)\". Strict mode isn't just a subset: it _intentionally_ has different semantics from normal code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.\n\nStrict mode makes several changes to normal JavaScript semantics:\n\n1.  Eliminates some JavaScript silent errors by changing them to throw errors.\n2.  Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that's not strict mode.\n3.  Prohibits some syntax likely to be defined in future versions of ECMAScript.\n\n## [Invoking strict mode](#invoking_strict_mode)\n\nStrict mode applies to _entire scripts_ or to _individual functions_. It doesn't apply to [block statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) enclosed in `{}` braces; attempting to apply it to such contexts does nothing. [`eval`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) code, [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function) code, [event handler](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes) attributes, strings passed to [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout), and related functions are either function bodies or entire scripts, and invoking strict mode in them works as expected.\n\n### [Strict mode for scripts](#strict_mode_for_scripts)\n\nTo invoke strict mode for an entire script, put the _exact_ statement `\"use strict\";` (or `'use strict';`) before any other statements.\n\n```\n// Whole-script strict mode syntax\n\"use strict\";\nconst v = \"Hi! I'm a strict mode script!\";\n```\n\n### [Strict mode for functions](#strict_mode_for_functions)\n\nLikewise, to invoke strict mode for a function, put the _exact_ statement `\"use strict\";` (or `'use strict';`) in the function's body before any other statements.\n\n```\nfunction myStrictFunction() {\n  // Function-level strict mode syntax\n  \"use strict\";\n  function nested() {\n    return \"And so am I!\";\n  }\n  return `Hi! I'm a strict mode function! ${nested()}`;\n}\nfunction myNotStrictFunction() {\n  return \"I'm not strict.\";\n}\n```\n\nThe `\"use strict\"` directive can only be applied to the body of functions with simple parameters. Using `\"use strict\"` in functions with [rest](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), [default](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), or [destructured](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) parameters is a [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_non_simple_params).\n\n```\nfunction sum(a = 1, b = 2) {\n  // SyntaxError: \"use strict\" not allowed in function with default parameter\n  \"use strict\";\n  return a + b;\n}\n```\n\n### [Strict mode for modules](#strict_mode_for_modules)\n\nThe entire contents of [JavaScript modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) are automatically in strict mode, with no statement needed to initiate it.\n\n```\nfunction myStrictFunction() {\n  // because this is a module, I'm strict by default\n}\nexport default myStrictFunction;\n```\n\n### [Strict mode for classes](#strict_mode_for_classes)\n\nAll parts of a [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)'s body are strict mode code, including both [class declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class) and [class expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class).\n\n```\nclass C1 {\n  // All code here is evaluated in strict mode\n  test() {\n    delete Object.prototype;\n  }\n}\nnew C1().test(); // TypeError, because test() is in strict mode\n\nconst C2 = class {\n  // All code here is evaluated in strict mode\n};\n\n// Code here may not be in strict mode\ndelete Object.prototype; // Will not throw error\n```\n\n## [Changes in strict mode](#changes_in_strict_mode)\n\nStrict mode changes both syntax and runtime behavior. Changes generally fall into these categories:\n\n*   changes converting mistakes into errors (as syntax errors or at runtime)\n*   changes simplifying how variable references are resolved\n*   changes simplifying `eval` and `arguments`\n*   changes making it easier to write \"secure\" JavaScript\n*   changes anticipating future ECMAScript evolution.\n\n### [Converting mistakes into errors](#converting_mistakes_into_errors)\n\nStrict mode changes some previously-accepted mistakes into errors. JavaScript was designed to be easy for novice developers, and sometimes it gives operations which should be errors non-error semantics. Sometimes this fixes the immediate problem, but sometimes this creates worse problems in the future. Strict mode treats these mistakes as errors so that they're discovered and promptly fixed.\n\n#### Assigning to undeclared variables\n\nStrict mode makes it impossible to accidentally create global variables. In sloppy mode, mistyping a variable in an assignment creates a new property on the global object and continues to \"work\". Assignments which would accidentally create global variables throw an error in strict mode:\n\n```\n\"use strict\";\nlet mistypeVariable;\n\n// Assuming no global variable mistypeVarible exists\n// this line throws a ReferenceError due to the\n// misspelling of \"mistypeVariable\" (lack of an \"a\")\nmistypeVarible = 17;\n```\n\n#### Failing to assign to object properties\n\nStrict mode makes assignments which would otherwise silently fail to throw an exception. There are three ways to fail a property assignment:\n\n*   assignment to a non-writable data property\n*   assignment to a getter-only accessor property\n*   assignment to a new property on a [non-extensible](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible) object\n\nFor example, [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) is a non-writable global variable. In sloppy mode, assigning to `NaN` does nothing; the developer receives no failure feedback. In strict mode, assigning to `NaN` throws an exception.\n\n```\n\"use strict\";\n\n// Assignment to a non-writable global\nundefined = 5; // TypeError\nInfinity = 5; // TypeError\n\n// Assignment to a non-writable property\nconst obj1 = {};\nObject.defineProperty(obj1, \"x\", { value: 42, writable: false });\nobj1.x = 9; // TypeError\n\n// Assignment to a getter-only property\nconst obj2 = {\n  get x() {\n    return 17;\n  },\n};\nobj2.x = 5; // TypeError\n\n// Assignment to a new property on a non-extensible object\nconst fixed = {};\nObject.preventExtensions(fixed);\nfixed.newProp = \"ohai\"; // TypeError\n```\n\n#### Failing to delete object properties\n\nAttempts to [delete](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) a non-configurable or otherwise undeletable (e.g. it's intercepted by a proxy's [`deleteProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty) handler which returns `false`) property throw in strict mode (where before the attempt would have no effect):\n\n```\n\"use strict\";\ndelete Object.prototype; // TypeError\ndelete [].length; // TypeError\n```\n\nStrict mode also forbids deleting plain names. `delete name` in strict mode is a syntax error:\n\n```\n\"use strict\";\n\nvar x;\ndelete x; // syntax error\n```\n\nIf the name is a configurable global property, prefix it with [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) to delete it.\n\n```\n\"use strict\";\n\ndelete globalThis.x;\n```\n\n#### Duplicate parameter names\n\nStrict mode requires that function parameter names be unique. In sloppy mode, the last duplicated argument hides previous identically-named arguments. Those previous arguments remain available through [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments), so they're not completely inaccessible. Still, this hiding makes little sense and is probably undesirable (it might hide a typo, for example), so in strict mode, duplicate argument names are a syntax error:\n\n```\nfunction sum(a, a, c) {\n  // syntax error\n  \"use strict\";\n  return a + a + c; // wrong if this code ran\n}\n```\n\nIt is also a syntax error in non-strict mode to have duplicate parameter names, if the function has a default parameter, rest parameter, or destructured parameter.\n\n#### Legacy octal literals\n\nStrict mode [forbids a `0`\\-prefixed octal literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_literal). In sloppy mode, a number beginning with a `0`, such as `0644`, is interpreted as an octal number (`0644 === 420`), if all digits are smaller than 8. Novice developers sometimes believe a leading-zero prefix has no semantic meaning, so they might use it as an alignment device — but this changes the number's meaning! A leading-zero syntax for the octal is rarely useful and can be mistakenly used, so strict mode makes it a syntax error:\n\n```\n\"use strict\";\nconst sum =\n  015 + // syntax error\n  197 +\n  142;\n```\n\nThe standardized way to denote octal literals is via the `0o` prefix. For example:\n\n```\nconst sumWithOctal = 0o10 + 8;\nconsole.log(sumWithOctal); // 16\n```\n\nOctal escape sequences, such as `\"\\45\"`, which is equal to `\"%\"`, can be used to represent characters by extended-[ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) character code numbers in octal. In strict mode, this is a [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_escape_sequence). More formally, it's disallowed to have `\\` followed by any decimal digit other than `0`, or `\\0` followed by a decimal digit; for example `\\9` and `\\07`.\n\n#### Setting properties on primitive values\n\nStrict mode forbids setting properties on [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) values. Accessing a property on a primitive implicitly creates a wrapper object that's unobservable, so in sloppy mode, setting properties is ignored (no-op). In strict mode, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown.\n\n```\n\"use strict\";\n\nfalse.true = \"\"; // TypeError\n(14).sailing = \"home\"; // TypeError\n\"with\".you = \"far away\"; // TypeError\n```\n\n#### Duplicate property names\n\nDuplicate property names used to be considered a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) in strict mode. With the introduction of [computed property names](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer), making duplication possible at runtime, this restriction was removed in ES2015.\n\n```\n\"use strict\";\nconst o = { p: 1, p: 2 }; // syntax error prior to ECMAScript 2015\n```\n\n**Note:** Making code that used to error become non-errors is always considered backwards-compatible. This is a good part of the language being strict about throwing errors: it leaves room for future semantic changes.\n\n### [Simplifying scope management](#simplifying_scope_management)\n\nStrict mode simplifies how variable names map to particular variable definitions in the code. Many compiler optimizations rely on the ability to say that variable _X_ is stored in _that_ location: this is critical to fully optimizing JavaScript code. JavaScript sometimes makes this basic mapping of name to variable definition in the code impossible to perform until runtime. Strict mode removes most cases where this happens, so the compiler can better optimize strict mode code.\n\n#### Removal of the with statement\n\nStrict mode prohibits [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with). The problem with `with` is that any name inside the block might map either to a property of the object passed to it, or to a variable in surrounding (or even global) scope, at runtime; it's impossible to know which beforehand. Strict mode makes `with` a syntax error, so there's no chance for a name in a `with` to refer to an unknown location at runtime:\n\n```\n\"use strict\";\nconst x = 17;\nwith (obj) {\n  // Syntax error\n  // If this weren't strict mode, would this be const x, or\n  // would it instead be obj.x? It's impossible in general\n  // to say without running the code, so the name can't be\n  // optimized.\n  x;\n}\n```\n\nThe simple alternative of assigning the object to a short name variable, then accessing the corresponding property on that variable, stands ready to replace `with`.\n\n#### Non-leaking eval\n\nIn strict mode, [`eval` does not introduce new variables into the surrounding scope](https://whereswalden.com/2011/01/10/new-es5-strict-mode-support-new-vars-created-by-strict-mode-eval-code-are-local-to-that-code-only/). In sloppy mode, `eval(\"var x;\")` introduces a variable `x` into the surrounding function or the global scope. This means that, in general, in a function containing a call to `eval`, every name not referring to an argument or local variable must be mapped to a particular definition at runtime (because that `eval` might have introduced a new variable that would hide the outer variable). In strict mode, `eval` creates variables only for the code being evaluated, so `eval` can't affect whether a name refers to an outer variable or some local variable:\n\n```\nvar x = 17;\nvar evalX = eval(\"'use strict'; var x = 42; x;\");\nconsole.assert(x === 17);\nconsole.assert(evalX === 42);\n```\n\nWhether the string passed to `eval()` is evaluated in strict mode depends on how `eval()` is invoked ([direct eval or indirect eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#direct_and_indirect_eval)).\n\n#### Block-scoped function declarations\n\nThe JavaScript language specification, since its start, had not allowed function declarations nested in block statements. However, it was so intuitive that most browsers implemented it as an extension grammar. Unfortunately, the implementations' semantics diverged, and it became impossible for the language specification to reconcile all implementations. Therefore, [block-scoped function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#block-level_function_declaration) are only explicitly specified in strict mode (whereas they were once disallowed in strict mode), while sloppy mode behavior remains divergent among browsers.\n\n### [Making eval and arguments simpler](#making_eval_and_arguments_simpler)\n\nStrict mode makes [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) and [`eval`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) less bizarrely magical. Both involve a considerable amount of magical behavior in sloppy mode: `eval` to add or remove bindings and to change binding values, and `arguments` syncing named arguments with its indexed properties. Strict mode makes great strides toward treating `eval` and `arguments` as keywords.\n\n#### Preventing binding or assigning eval and arguments\n\nThe names `eval` and `arguments` can't be bound or assigned in language syntax. All these attempts to do so are syntax errors:\n\n```\n\"use strict\";\neval = 17;\narguments++;\n++eval;\nconst obj = { set p(arguments) {} };\nlet eval;\ntry {\n} catch (arguments) {}\nfunction x(eval) {}\nfunction arguments() {}\nconst y = function eval() {};\nconst f = new Function(\"arguments\", \"'use strict'; return 17;\");\n```\n\n#### No syncing between parameters and arguments indices\n\nStrict mode code doesn't sync indices of the `arguments` object with each parameter binding. In a sloppy mode function whose first argument is `arg`, setting `arg` also sets `arguments[0]`, and vice versa (unless no arguments were provided or `arguments[0]` is deleted). `arguments` objects for strict mode functions store the original arguments when the function was invoked. `arguments[i]` does not track the value of the corresponding named argument, nor does a named argument track the value in the corresponding `arguments[i]`.\n\n```\nfunction f(a) {\n  \"use strict\";\n  a = 42;\n  return [a, arguments[0]];\n}\nconst pair = f(17);\nconsole.assert(pair[0] === 42);\nconsole.assert(pair[1] === 17);\n```\n\n### [\"Securing\" JavaScript](#securing_javascript)\n\nStrict mode makes it easier to write \"secure\" JavaScript. Some websites now provide ways for users to write JavaScript which will be run by the website _on behalf of other users_. JavaScript in browsers can access the user's private information, so such JavaScript must be partially transformed before it is run, to censor access to forbidden functionality. JavaScript's flexibility makes it effectively impossible to do this without many runtime checks. Certain language functions are so pervasive that performing runtime checks has a considerable performance cost. A few strict mode tweaks, plus requiring that user-submitted JavaScript be strict mode code and that it be invoked in a certain manner, substantially reduce the need for those runtime checks.\n\n#### No this substitution\n\nThe value passed as `this` to a function in strict mode is not forced into being an object (a.k.a. \"boxed\"). For a sloppy mode function, `this` is always an object: either the provided object, if called with an object-valued `this`; or the boxed value of `this`, if called with a primitive as `this`; or the global object, if called with `undefined` or `null` as `this`. (Use [`call`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), [`apply`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply), or [`bind`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) to specify a particular `this`.) Not only is automatic boxing a performance cost, but exposing the global object in browsers is a security hazard because the global object provides access to functionality that \"secure\" JavaScript environments must restrict. Thus for a strict mode function, the specified `this` is not boxed into an object, and if unspecified, `this` is `undefined` instead of [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis):\n\n```\n\"use strict\";\nfunction fun() {\n  return this;\n}\nconsole.assert(fun() === undefined);\nconsole.assert(fun.call(2) === 2);\nconsole.assert(fun.apply(null) === null);\nconsole.assert(fun.call(undefined) === undefined);\nconsole.assert(fun.bind(true)() === true);\n```\n\n#### Removal of stack-walking properties\n\nIn strict mode it's no longer possible to \"walk\" the JavaScript stack. Many implementations used to implement some extension features that make it possible to detect the upstream caller of a function. When a function `fun` is in the middle of being called, [`fun.caller`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller) is the function that most recently called `fun`, and [`fun.arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments) is the `arguments` for that invocation of `fun`. Both extensions are problematic for \"secure\" JavaScript because they allow \"secured\" code to access \"privileged\" functions and their (potentially unsecured) arguments. If `fun` is in strict mode, both `fun.caller` and `fun.arguments` are non-deletable properties which throw when set or retrieved:\n\n```\nfunction restricted() {\n  \"use strict\";\n  restricted.caller; // throws a TypeError\n  restricted.arguments; // throws a TypeError\n}\nfunction privilegedInvoker() {\n  return restricted();\n}\nprivilegedInvoker();\n```\n\nSimilarly, [`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) is no longer supported. In sloppy mode, `arguments.callee` refers to the enclosing function. This use case is weak: name the enclosing function! Moreover, `arguments.callee` substantially hinders optimizations like inlining functions, because it must be made possible to provide a reference to the un-inlined function if `arguments.callee` is accessed. `arguments.callee` for strict mode functions is a non-deletable property which throws an error when set or retrieved:\n\n```\n\"use strict\";\nconst f = function () {\n  return arguments.callee;\n};\nf(); // throws a TypeError\n```\n\n### [Future-proofing JavaScript](#future-proofing_javascript)\n\n[Reserved words](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words) are identifiers that can't be used as variable names. Strict mode reserves some more names than sloppy mode, some of which are already used in the language, and some of which are reserved for the future to make future syntax extensions easier to implement.\n\n*   `implements`\n*   `interface`\n*   [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n*   `package`\n*   `private`\n*   `protected`\n*   `public`\n*   [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static)\n*   [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield)\n\n## [Transitioning to strict mode](#transitioning_to_strict_mode)\n\nStrict mode has been designed so that the transition to it can be made gradually. It is possible to change each file individually and even to transition code to strict mode down to the function granularity.\n\nYou can migrate a codebase to strict mode by first adding `\"use strict\"` to a piece of source code, and then fixing all execution errors, while watching out for semantic differences.\n\n### [Syntax errors](#syntax_errors)\n\nWhen adding `'use strict';`, the following cases will throw a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) before the script is executing:\n\n*   Octal syntax `const n = 023;`\n*   [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) statement\n*   Using [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) on a variable name `delete myVariable`;\n*   Using [`eval`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) or [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) as variable or function argument name\n*   Using one of the newly [reserved keywords](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words) (in prevision for future language features): `implements`, `interface`, `let`, `package`, `private`, `protected`, `public`, `static`, and `yield`\n*   Declaring two function parameters with the same name `function f(a, b, b) {}`\n*   Declaring the same property name twice in an object literal `{a: 1, b: 3, a: 7}`. This constraint was later removed ([bug 1041128](https://bugzil.la/1041128)).\n\nThese errors are good, because they reveal plain errors or bad practices. They occur before the code is running, so they are easily discoverable as long as the code gets parsed by the runtime.\n\n### [New runtime errors](#new_runtime_errors)\n\nJavaScript used to silently fail in contexts where what was done should be an error. Strict mode throws in such cases. If your code base contains such cases, testing will be necessary to be sure nothing is broken. You can screen for such errors at the function granularity level.\n\n*   Assigning to an undeclared variable throws a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError). This used to set a property on the global object, which is rarely the expected effect. If you really want to set a value to the global object, explicitly assign it as a property on `globalThis`.\n*   Failing to assign to an object's property (e.g. it's read-only) throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In sloppy mode, this would silently fail.\n*   Deleting a non-deletable property throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In sloppy mode, this would silently fail.\n*   Accessing [`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee), [`strictFunction.caller`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller), or [`strictFunction.arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments) throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the function is in strict mode. If you are using `arguments.callee` to call the function recursively, you can use a named function expression instead.\n\n### [Semantic differences](#semantic_differences)\n\nThese differences are very subtle differences. It's possible that a test suite doesn't catch this kind of subtle difference. Careful review of your code base will probably be necessary to be sure these differences don't affect the semantics of your code. Fortunately, this careful review can be done gradually down the function granularity.\n\n[`this`](#this)\n\nIn sloppy mode, function calls like `f()` would pass the global object as the `this` value. In strict mode, it is now `undefined`. When a function was called with [`call`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) or [`apply`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply), if the value was a primitive value, this one was boxed into an object (or the global object for `undefined` and `null`). In strict mode, the value is passed directly without conversion or replacement.\n\n[`arguments`](#arguments)\n\nIn sloppy mode, modifying a value in the `arguments` object modifies the corresponding named argument. This made optimizations complicated for JavaScript engine and made code harder to read/understand. In strict mode, the `arguments` object is created and initialized with the same values than the named arguments, but changes to either the `arguments` object or the named arguments aren't reflected in one another.\n\n[`eval`](#eval)\n\nIn strict mode code, `eval` doesn't create a new variable in the scope from which it was called. Also, of course, in strict mode, the string is evaluated with strict mode rules. Thorough testing will need to be performed to make sure nothing breaks. Not using eval if you don't really need it may be another pragmatic solution.\n\n[Block-scoped function declarations](#block-scoped_function_declarations_2)\n\nIn sloppy mode, a function declaration inside a block may be visible outside the block and even callable. In strict mode, a function declaration inside a block is only visible inside the block.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>](https://tc39.es/ecma262/multipage/strict-mode-of-ecmascript.html) |\n\n## [See also](#see_also)",
    "title": "Strict mode - JavaScript | MDN",
    "description": "JavaScript's strict mode is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of \"sloppy mode\". Strict mode isn't just a subset: it intentionally has different semantics from normal code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
    "markdown": "# Trailing commas - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Trailing commas** (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.\n\nJavaScript has allowed trailing commas in array literals since the beginning. Trailing commas are now also allowed in object literals, function parameters, named imports, named exports, and more.\n\n[JSON](https://developer.mozilla.org/en-US/docs/Glossary/JSON), however, disallows all trailing commas.\n\n## [Description](#description)\n\nJavaScript allows trailing commas wherever a comma-separated list of values is accepted and more values may be expected after the last item. This includes:\n\n*   [Array literals](#arrays)\n*   [Object literals](#objects)\n*   [Parameter definitions](#parameter_definitions)\n*   [Function calls](#function_calls)\n*   [Named imports](#named_imports)\n*   [Named exports](#named_exports)\n*   [Array and object destructuring](#trailing_commas_in_destructuring)\n\nIn all these cases, the trailing comma is entirely optional and doesn't change the program's semantics in any way.\n\nIt is particular useful when adding, removing, or reordering items in a list that spans multiple lines, because it reduces the number of lines that need to be changed, which helps with both editing and reviewing the diff.\n\n```\n  [\n    \"foo\",\n+   \"baz\",\n    \"bar\",\n-   \"baz\",\n  ]\n```\n\n## [Examples](#examples)\n\n### [Trailing commas in literals](#trailing_commas_in_literals)\n\n#### Arrays\n\nJavaScript ignores trailing commas in arrays literals:\n\n```\nconst arr = [\n  1,\n  2,\n  3,\n];\n\narr; // [1, 2, 3]\narr.length; // 3\n```\n\nIf more than one trailing comma is used, an elision (or hole) is produced. An array with holes is called [_sparse_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) (a _dense_ array has no holes). When iterating arrays for example with [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) or [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), array holes are skipped. Sparse arrays are generally unfavorable, so you should avoid having multiple trailing commas.\n\n```\nconst arr = [1, 2, 3, , ,];\narr.length; // 5\n```\n\n#### Objects\n\nTrailing commas in object literals are legal as well:\n\n```\nconst object = {\n  foo: \"bar\",\n  baz: \"qwerty\",\n  age: 42,\n};\n```\n\n### [Trailing commas in functions](#trailing_commas_in_functions)\n\nTrailing commas are also allowed in function parameter lists.\n\n#### Parameter definitions\n\nThe following function definition pairs are legal and equivalent to each other. Trailing commas don't affect the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) property of function declarations or their [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object.\n\n```\nfunction f(p) {}\nfunction f(p,) {}\n\n(p) => {};\n(p,) => {};\n```\n\nThe trailing comma also works with [method definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions) for classes or objects:\n\n```\nclass C {\n  one(a,) {}\n  two(a, b,) {}\n}\n\nconst obj = {\n  one(a,) {},\n  two(a, b,) {},\n};\n```\n\n#### Function calls\n\nThe following function invocation pairs are legal and equivalent to each other.\n\n```\nf(p);\nf(p,);\n\nMath.max(10, 20);\nMath.max(10, 20,);\n```\n\n#### Illegal trailing commas\n\nFunction parameter definitions or function invocations only containing a comma will throw a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). Furthermore, when using [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), trailing commas are not allowed:\n\n```\nfunction f(,) {} // SyntaxError: missing formal parameter\n(,) => {};       // SyntaxError: expected expression, got ','\nf(,)             // SyntaxError: expected expression, got ','\n\nfunction f(...p,) {} // SyntaxError: parameter after rest parameter\n(...p,) => {}        // SyntaxError: expected closing parenthesis, got ','\n```\n\n### [Trailing commas in destructuring](#trailing_commas_in_destructuring)\n\nA trailing comma is also allowed on the left-hand side when using [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment):\n\n```\n// array destructuring with trailing comma\n[a, b,] = [1, 2];\n\n// object destructuring with trailing comma\nconst o = {\n  p: 42,\n  q: true,\n};\nconst { p, q, } = o;\n```\n\nAgain, when using a rest element, a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) will be thrown:\n\n```\nconst [a, ...b,] = [1, 2, 3];\n// SyntaxError: rest element may not have a trailing comma\n```\n\n### [Trailing commas in JSON](#trailing_commas_in_json)\n\nAs JSON is based on a very restricted subset of JavaScript syntax, **trailing commas are not allowed in JSON**.\n\nBoth lines will throw a `SyntaxError`:\n\n```\nJSON.parse(\"[1, 2, 3, 4, ]\");\nJSON.parse('{\"foo\" : 1, }');\n// SyntaxError JSON.parse: unexpected character\n// at line 1 column 14 of the JSON data\n```\n\nOmit the trailing commas to parse the JSON correctly:\n\n```\nJSON.parse(\"[1, 2, 3, 4 ]\");\nJSON.parse('{\"foo\" : 1 }');\n```\n\n### [Trailing commas in named imports and named exports](#trailing_commas_in_named_imports_and_named_exports)\n\nTrailing commas are valid in [named imports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import) and [named exports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export).\n\n#### Named imports\n\n```\nimport {\n  A,\n  B,\n  C,\n} from \"D\";\n\nimport { X, Y, Z, } from \"W\";\n\nimport { A as B, C as D, E as F, } from \"Z\";\n```\n\n#### Named exports\n\n```\nexport {\n  A,\n  B,\n  C,\n};\n\nexport { A, B, C, };\n\nexport { A as B, C as D, E as F, };\n```\n\n### [Quantifier prefix](#quantifier_prefix)\n\n**Note:** The trailing comma in a [quantifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) actually changes its semantics from matching \"exactly `n`\" to matching \"at least `n`\".\n\n```\n/x{2}/; // Exactly 2 occurrences of \"x\"; equivalent to /xx/\n/x{2,}/; // At least 2 occurrences of \"x\"; equivalent to /xx+/\n/x{2,4}/; // 2 to 4 occurrences of \"x\"; equivalent to /xxx?x?/\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Elision](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-Elision) |\n| [ECMAScript Language Specification  <br>\\# prod-ObjectLiteral](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ObjectLiteral) |\n| [ECMAScript Language Specification  <br>\\# prod-ArrayLiteral](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ArrayLiteral) |\n| [ECMAScript Language Specification  <br>\\# prod-Arguments](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-Arguments) |\n| [ECMAScript Language Specification  <br>\\# prod-FormalParameters](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-FormalParameters) |\n| [ECMAScript Language Specification  <br>\\# prod-CoverParenthesizedExpressionAndArrowParameterList](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-CoverParenthesizedExpressionAndArrowParameterList) |\n| [ECMAScript Language Specification  <br>\\# prod-NamedImports](https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#prod-NamedImports) |\n| [ECMAScript Language Specification  <br>\\# prod-NamedExports](https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#prod-NamedExports) |\n| [ECMAScript Language Specification  <br>\\# prod-QuantifierPrefix](https://tc39.es/ecma262/multipage/text-processing.html#prod-QuantifierPrefix) |\n| [ECMAScript Language Specification  <br>\\# prod-annexB-InvalidBracedQuantifier](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#prod-annexB-InvalidBracedQuantifier) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Trailing commas - JavaScript | MDN",
    "description": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",
    "markdown": "# Template literals (Template strings) - JavaScript\n\n**Template literals** are literals delimited with backtick (`` ` ``) characters, allowing for [multi-line strings](#multi-line_strings), [string interpolation](#string_interpolation) with embedded expressions, and special constructs called [tagged templates](#tagged_templates).\n\nTemplate literals are sometimes informally called _template strings_, because they are used most commonly for [string interpolation](#string_interpolation) (to create strings by doing substitution of placeholders). However, a tagged template literal may not result in a string; it can be used with a custom [tag function](#tagged_templates) to perform whatever operations you want on the different parts of the template literal.\n\n## [Syntax](#syntax)\n\n```\n`string text`\n\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntagFunction`string text ${expression} string text`\n```\n\n### [Parameters](#parameters)\n\n[`string text`](#string_text)\n\nThe string text that will become part of the template literal. Almost all characters are allowed literally, including [line breaks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators) and other [whitespace characters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space). However, invalid escape sequences will cause a syntax error, unless a [tag function](#tagged_templates_and_escape_sequences) is used.\n\n[`expression`](#expression)\n\nAn expression to be inserted in the current position, whose value is converted to a string or passed to `tagFunction`.\n\n[`tagFunction`](#tagfunction)\n\nIf specified, it will be called with the template strings array and substitution expressions, and the return value becomes the value of the template literal. See [tagged templates](#tagged_templates).\n\n## [Description](#description)\n\nTemplate literals are enclosed by backtick (`` ` ``) characters instead of double or single quotes.\n\nAlong with having normal strings, template literals can also contain other parts called _placeholders_, which are embedded expressions delimited by a dollar sign and curly braces: `${expression}`. The strings and placeholders get passed to a function — either a default function, or a function you supply. The default function (when you don't supply your own) just performs [string interpolation](#string_interpolation) to do substitution of the placeholders and then concatenate the parts into a single string.\n\nTo supply a function of your own, precede the template literal with a function name; the result is called a [**tagged template**](#tagged_templates). In that case, the template literal is passed to your tag function, where you can then perform whatever operations you want on the different parts of the template literal.\n\nTo escape a backtick in a template literal, put a backslash (`\\`) before the backtick.\n\nDollar signs can be escaped as well to prevent interpolation.\n\n```\n`\\${1}` === \"${1}\"; // true\n```\n\n### [Multi-line strings](#multi-line_strings)\n\nAny newline characters inserted in the source are part of the template literal.\n\nUsing normal strings, you would have to use the following syntax in order to get multi-line strings:\n\n```\nconsole.log(\"string text line 1\\n\" + \"string text line 2\");\n// \"string text line 1\n// string text line 2\"\n```\n\nUsing template literals, you can do the same with this:\n\n```\nconsole.log(`string text line 1\nstring text line 2`);\n// \"string text line 1\n// string text line 2\"\n```\n\n### [String interpolation](#string_interpolation)\n\nWithout template literals, when you want to combine output from expressions with strings, you'd [concatenate them](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#concatenation_using) using the [addition operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) `+`:\n\n```\nconst a = 5;\nconst b = 10;\nconsole.log(\"Fifteen is \" + (a + b) + \" and\\nnot \" + (2 * a + b) + \".\");\n// \"Fifteen is 15 and\n// not 20.\"\n```\n\nThat can be hard to read – especially when you have multiple expressions.\n\nWith template literals, you can avoid the concatenation operator — and improve the readability of your code — by using placeholders of the form `${expression}` to perform substitutions for embedded expressions:\n\n```\nconst a = 5;\nconst b = 10;\nconsole.log(`Fifteen is ${a + b} and\nnot ${2 * a + b}.`);\n// \"Fifteen is 15 and\n// not 20.\"\n```\n\nNote that there's a mild difference between the two syntaxes. Template literals [coerce their expressions directly to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), while addition coerces its operands to primitives first. For more information, see the reference page for the [`+` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition).\n\n### [Nesting templates](#nesting_templates)\n\nIn certain cases, nesting a template is the easiest (and perhaps more readable) way to have configurable strings. Within a backtick-delimited template, it is simple to allow inner backticks by using them inside an `${expression}` placeholder within the template.\n\nFor example, without template literals, if you wanted to return a certain value based on a particular condition, you could do something like the following:\n\n```\nlet classes = \"header\";\nclasses += isLargeScreen()\n  ? \"\"\n  : item.isCollapsed\n    ? \" icon-expander\"\n    : \" icon-collapser\";\n```\n\nWith a template literal but without nesting, you could do this:\n\n```\nconst classes = `header ${\n  isLargeScreen() ? \"\" : item.isCollapsed ? \"icon-expander\" : \"icon-collapser\"\n}`;\n```\n\nWith nesting of template literals, you can do this:\n\n```\nconst classes = `header ${\n  isLargeScreen() ? \"\" : `icon-${item.isCollapsed ? \"expander\" : \"collapser\"}`\n}`;\n```\n\n### [Tagged templates](#tagged_templates)\n\nA more advanced form of template literals are _tagged_ templates.\n\nTags allow you to parse template literals with a function. The first argument of a tag function contains an array of string values. The remaining arguments are related to the expressions.\n\nThe tag function can then perform whatever operations on these arguments you wish, and return the manipulated string. (Alternatively, it can return something completely different, as described in one of the following examples.)\n\nThe name of the function used for the tag can be whatever you want.\n\n```\nconst person = \"Mike\";\nconst age = 28;\n\nfunction myTag(strings, personExp, ageExp) {\n  const str0 = strings[0]; // \"That \"\n  const str1 = strings[1]; // \" is a \"\n  const str2 = strings[2]; // \".\"\n\n  const ageStr = ageExp < 100 ? \"youngster\" : \"centenarian\";\n\n  // We can even return a string built using a template literal\n  return `${str0}${personExp}${str1}${ageStr}${str2}`;\n}\n\nconst output = myTag`That ${person} is a ${age}.`;\n\nconsole.log(output);\n// That Mike is a youngster.\n```\n\nThe tag does not have to be a plain identifier. You can use any expression with [precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table) greater than 16, which includes [property access](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors), function call, [new expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), or even another tagged template literal.\n\n```\nconsole.log`Hello`; // [ 'Hello' ]\nconsole.log.bind(1, 2)`Hello`; // 2 [ 'Hello' ]\nnew Function(\"console.log(arguments)\")`Hello`; // [Arguments] { '0': [ 'Hello' ] }\n\nfunction recursive(strings, ...values) {\n  console.log(strings, values);\n  return recursive;\n}\nrecursive`Hello``World`;\n// [ 'Hello' ] []\n// [ 'World' ] []\n```\n\nWhile technically permitted by the syntax, _untagged_ template literals are strings and will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) when chained.\n\n```\nconsole.log(`Hello``World`); // TypeError: \"Hello\" is not a function\n```\n\nThe only exception is optional chaining, which will throw a syntax error.\n\n```\nconsole.log?.`Hello`; // SyntaxError: Invalid tagged template on optional chain\nconsole?.log`Hello`; // SyntaxError: Invalid tagged template on optional chain\n```\n\nNote that these two expressions are still parsable. This means they would not be subject to [automatic semicolon insertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion), which will only insert semicolons to fix code that's otherwise unparsable.\n\n```\n// Still a syntax error\nconst a = console?.log\n`Hello`\n```\n\nTag functions don't even need to return a string!\n\n```\nfunction template(strings, ...keys) {\n  return (...values) => {\n    const dict = values[values.length - 1] || {};\n    const result = [strings[0]];\n    keys.forEach((key, i) => {\n      const value = Number.isInteger(key) ? values[key] : dict[key];\n      result.push(value, strings[i + 1]);\n    });\n    return result.join(\"\");\n  };\n}\n\nconst t1Closure = template`${0}${1}${0}!`;\n// const t1Closure = template([\"\",\"\",\"\",\"!\"],0,1,0);\nt1Closure(\"Y\", \"A\"); // \"YAY!\"\n\nconst t2Closure = template`${0} ${\"foo\"}!`;\n// const t2Closure = template([\"\",\" \",\"!\"],0,\"foo\");\nt2Closure(\"Hello\", { foo: \"World\" }); // \"Hello World!\"\n\nconst t3Closure = template`I'm ${\"name\"}. I'm almost ${\"age\"} years old.`;\n// const t3Closure = template([\"I'm \", \". I'm almost \", \" years old.\"], \"name\", \"age\");\nt3Closure(\"foo\", { name: \"MDN\", age: 30 }); // \"I'm MDN. I'm almost 30 years old.\"\nt3Closure({ name: \"MDN\", age: 30 }); // \"I'm MDN. I'm almost 30 years old.\"\n```\n\nThe first argument received by the tag function is an array of strings. For any template literal, its length is equal to the number of substitutions (occurrences of `${…}`) plus one, and is therefore always non-empty.\n\nFor any particular tagged template literal expression, the tag function will always be called with the exact same literal array, no matter how many times the literal is evaluated.\n\n```\nconst callHistory = [];\n\nfunction tag(strings, ...values) {\n  callHistory.push(strings);\n  // Return a freshly made object\n  return {};\n}\n\nfunction evaluateLiteral() {\n  return tag`Hello, ${\"world\"}!`;\n}\n\nconsole.log(evaluateLiteral() === evaluateLiteral()); // false; each time `tag` is called, it returns a new object\nconsole.log(callHistory[0] === callHistory[1]); // true; all evaluations of the same tagged literal would pass in the same strings array\n```\n\nThis allows the tag to cache the result based on the identity of its first argument. To further ensure the array value's stability, the first argument and its [`raw` property](#raw_strings) are both [frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen), so you can't mutate them in any way.\n\n### [Raw strings](#raw_strings)\n\nThe special `raw` property, available on the first argument to the tag function, allows you to access the raw strings as they were entered, without processing [escape sequences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#using_special_characters_in_strings).\n\n```\nfunction tag(strings) {\n  console.log(strings.raw[0]);\n}\n\ntag`string text line 1 \\n string text line 2`;\n// Logs \"string text line 1 \\n string text line 2\" ,\n// including the two characters '\\' and 'n'\n```\n\nIn addition, the [`String.raw()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw) method exists to create raw strings just like the default template function and string concatenation would create.\n\n```\nconst str = String.raw`Hi\\n${2 + 3}!`;\n// \"Hi\\\\n5!\"\n\nstr.length;\n// 6\n\nArray.from(str).join(\",\");\n// \"H,i,\\\\,n,5,!\"\n```\n\n`String.raw` functions like an \"identity\" tag if the literal doesn't contain any escape sequences. In case you want an actual identity tag that always works as if the literal is untagged, you can make a custom function that passes the \"cooked\" (i.e. escape sequences are processed) literal array to `String.raw`, pretending they are raw strings.\n\n```\nconst identity = (strings, ...values) =>\n  String.raw({ raw: strings }, ...values);\nconsole.log(identity`Hi\\n${2 + 3}!`);\n// Hi\n// 5!\n```\n\nThis is useful for many tools which give special treatment to literals tagged by a particular name.\n\n```\nconst html = (strings, ...values) => String.raw({ raw: strings }, ...values);\n// Some formatters will format this literal's content as HTML\nconst doc = html`<!doctype html>\n  <html lang=\"en-US\">\n    <head>\n      <title>Hello</title>\n    </head>\n    <body>\n      <h1>Hello world!</h1>\n    </body>\n  </html>`;\n```\n\n### [Tagged templates and escape sequences](#tagged_templates_and_escape_sequences)\n\nIn normal template literals, [the escape sequences in string literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences) are all allowed. Any other non-well-formed escape sequence is a syntax error. This includes:\n\n*   `\\` followed by any decimal digit other than `0`, or `\\0` followed by a decimal digit; for example `\\9` and `\\07` (which is a [deprecated syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#escape_sequences))\n*   `\\x` followed by fewer than two hex digits (including none); for example `\\xz`\n*   `\\u` not followed by `{` and followed by fewer than four hex digits (including none); for example `\\uz`\n*   `\\u{}` enclosing an invalid Unicode code point — it contains a non-hex digit, or its value is greater than `10FFFF`; for example `\\u{110000}` and `\\u{z}`\n\n**Note:** `\\` followed by other characters, while they may be useless since nothing is escaped, are not syntax errors.\n\nHowever, this is problematic for tagged templates, which, in addition to the \"cooked\" literal, also have access to the raw literals (escape sequences are preserved as-is).\n\nTagged templates enable the embedding of arbitrary string content, where escape sequences may follow a different syntax. Consider for a simple example where we embed [LaTeX](https://en.wikipedia.org/wiki/LaTeX) source text in JavaScript via `String.raw`. We want to still be able to use LaTeX macros that start with `u` or `x` without following JavaScript syntax restrictions. Therefore, the syntax restriction of well-formed escape sequences is removed from tagged templates. The example below uses [MathJax](https://www.mathjax.org/) to render LaTeX in one element:\n\n```\nconst node = document.getElementById(\"formula\");\nMathJax.typesetClear([node]);\n// Throws in older ECMAScript versions (ES2016 and earlier)\n// SyntaxError: malformed Unicode character escape sequence\nnode.innerHTML = String.raw`$\\underline{u}$`;\nMathJax.typesetPromise([node]);\n```\n\nHowever, illegal escape sequences must still be represented in the \"cooked\" representation. They will show up as [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) element in the \"cooked\" array:\n\n```\nfunction log(str) {\n  console.log(\"Cooked:\", str[0]);\n  console.log(\"Raw:\", str.raw[0]);\n}\n\nlog`\\unicode`;\n// Cooked: undefined\n// Raw: \\unicode\n```\n\nNote that the escape-sequence restriction is only dropped from _tagged_ templates, but not from _untagged_ template literals:\n\n```\nconst bad = `bad escape sequence: \\unicode`;\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-template-literals](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-template-literals) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Template literals (Template strings) - JavaScript | MDN",
    "description": "Template literals are literals delimited with backtick (`) characters, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",
    "markdown": "# Iteration protocols - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Iteration protocols** aren't new built-ins or syntax, but _protocols_. These protocols can be implemented by any object by following some conventions.\n\nThere are two protocols: The [iterable protocol](#the_iterable_protocol) and the [iterator protocol](#the_iterator_protocol).\n\n## [The iterable protocol](#the_iterable_protocol)\n\n**The iterable protocol** allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) construct. Some built-in types are [built-in iterables](#built-in_iterables) with a default iteration behavior, such as [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), while other types (such as [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)) are not.\n\nIn order to be **iterable**, an object must implement the **`@@iterator`** method, meaning that the object (or one of the objects up its [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)) must have a property with a `@@iterator` key which is available via constant [`Symbol.iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator):\n\n[`[Symbol.iterator]`](#symbol.iterator)\n\nA zero-argument function that returns an object, conforming to the [iterator protocol](#the_iterator_protocol).\n\nWhenever an object needs to be iterated (such as at the beginning of a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop), its `@@iterator` method is called with no arguments, and the returned **iterator** is used to obtain the values to be iterated.\n\nNote that when this zero-argument function is called, it is invoked as a method on the iterable object. Therefore inside of the function, the `this` keyword can be used to access the properties of the iterable object, to decide what to provide during the iteration.\n\nThis function can be an ordinary function, or it can be a generator function, so that when invoked, an iterator object is returned. Inside of this generator function, each entry can be provided by using `yield`.\n\n## [The iterator protocol](#the_iterator_protocol)\n\n**The iterator protocol** defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.\n\nAn object is an iterator when it implements a **`next()`** method with the following semantics:\n\n[`next()`](#next)\n\nA function that accepts zero or one argument and returns an object conforming to the `IteratorResult` interface (see below). If a non-object value gets returned (such as `false` or `undefined`) when a built-in language feature (such as `for...of`) is using the iterator, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) (`\"iterator.next() returned a non-object value\"`) will be thrown.\n\nAll iterator protocol methods (`next()`, `return()`, and `throw()`) are expected to return an object implementing the `IteratorResult` interface. It must have the following properties:\n\n[`done`](#done) Optional\n\nA boolean that's `false` if the iterator was able to produce the next value in the sequence. (This is equivalent to not specifying the `done` property altogether.)\n\nHas the value `true` if the iterator has completed its sequence. In this case, `value` optionally specifies the return value of the iterator.\n\n[`value`](#value) Optional\n\nAny JavaScript value returned by the iterator. Can be omitted when `done` is `true`.\n\nIn practice, neither property is strictly required; if an object without either property is returned, it's effectively equivalent to `{ done: false, value: undefined }`.\n\nIf an iterator returns a result with `done: true`, any subsequent calls to `next()` are expected to return `done: true` as well, although this is not enforced on the language level.\n\nThe `next` method can receive a value which will be made available to the method body. No built-in language feature will pass any value. The value passed to the `next` method of [generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) will become the value of the corresponding `yield` expression.\n\nOptionally, the iterator can also implement the **`return(value)`** and **`throw(exception)`** methods, which, when called, tells the iterator that the caller is done with iterating it and can perform any necessary cleanup (such as closing database connection).\n\n[`return(value)`](#returnvalue) Optional\n\nA function that accepts zero or one argument and returns an object conforming to the `IteratorResult` interface, typically with `value` equal to the `value` passed in and `done` equal to `true`. Calling this method tells the iterator that the caller does not intend to make any more `next()` calls and can perform any cleanup actions. When built-in language features call `return()` for cleanup, `value` is always `undefined`.\n\n[`throw(exception)`](#throwexception) Optional\n\nA function that accepts zero or one argument and returns an object conforming to the `IteratorResult` interface, typically with `done` equal to `true`. Calling this method tells the iterator that the caller detects an error condition, and `exception` is typically an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance. No built-in language feature calls `throw()` for cleanup purposes — it's a special feature of generators for the symmetry of `return`/`throw`.\n\n**Note:** It is not possible to know reflectively (i.e. without actually calling `next()` and validating the returned result) whether a particular object implements the iterator protocol.\n\nIt is very easy to make an iterator also iterable: just implement an `[@@iterator]()` method that returns `this`.\n\n```\n// Satisfies both the Iterator Protocol and Iterable\nconst myIterator = {\n  next() {\n    // ...\n  },\n  [Symbol.iterator]() {\n    return this;\n  },\n};\n```\n\nSuch object is called an _iterable iterator_. Doing so allows an iterator to be consumed by the various syntaxes expecting iterables — therefore, it is seldom useful to implement the Iterator Protocol without also implementing Iterable. (In fact, almost all syntaxes and APIs expect _iterables_, not _iterators_.) The [generator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) is an example:\n\n```\nconst aGeneratorObject = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n\nconsole.log(typeof aGeneratorObject.next);\n// \"function\" — it has a next method (which returns the right result), so it's an iterator\n\nconsole.log(typeof aGeneratorObject[Symbol.iterator]);\n// \"function\" — it has an @@iterator method (which returns the right iterator), so it's an iterable\n\nconsole.log(aGeneratorObject[Symbol.iterator]() === aGeneratorObject);\n// true — its @@iterator method returns itself (an iterator), so it's an iterable iterator\n```\n\nAll built-in iterators inherit from [`Iterator.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator), which implements the `[@@iterator]()` method as returning `this`, so that built-in iterators are also iterable.\n\nHowever, when possible, it's better for `iterable[Symbol.iterator]` to return different iterators that always start from the beginning, like [`Set.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator) does.\n\n## [The async iterator and async iterable protocols](#the_async_iterator_and_async_iterable_protocols)\n\nThere are another pair of protocols used for async iteration, named **async iterator** and **async iterable** protocols. They have very similar interfaces compared to the iterable and iterator protocols, except that each return value from the calls to the iterator methods is wrapped in a promise.\n\nAn object implements the async iterable protocol when it implements the following methods:\n\n[`[Symbol.asyncIterator]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator)\n\nA zero-argument function that returns an object, conforming to the async iterator protocol.\n\nAn object implements the async iterator protocol when it implements the following methods:\n\n[`next()`](#next_2)\n\nA function that accepts zero or one argument and returns a promise. The promise fulfills to an object conforming to the `IteratorResult` interface, and the properties have the same semantics as those of the sync iterator's.\n\n[`return(value)`](#returnvalue_2) Optional\n\nA function that accepts zero or one argument and returns a promise. The promise fulfills to an object conforming to the `IteratorResult` interface, and the properties have the same semantics as those of the sync iterator's.\n\n[`throw(exception)`](#throwexception_2) Optional\n\nA function that accepts zero or one argument and returns a promise. The promise fulfills to an object conforming to the `IteratorResult` interface, and the properties have the same semantics as those of the sync iterator's.\n\n## [Interactions between the language and iteration protocols](#interactions_between_the_language_and_iteration_protocols)\n\nThe language specifies APIs that either produce or consume iterables and iterators.\n\n### [Built-in iterables](#built-in_iterables)\n\n[`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set), and [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) (returned by [`Intl.Segmenter.prototype.segment()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment)) are all built-in iterables, because each of their `prototype` objects implements an `@@iterator` method. In addition, the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object and some DOM collection types such as [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) are also iterables. There is no object in the core JavaScript language that is async iterable. Some web APIs, such as [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), have the `Symbol.asyncIterator` method set by default.\n\n[Generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) return [generator objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator), which are iterable iterators. [Async generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*) return [async generator objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator), which are async iterable iterators.\n\nThe iterators returned from built-in iterables actually all inherit from a common class [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator), which implements the aforementioned `[Symbol.iterator]() { return this; }` method, making them all iterable iterators. The `Iterator` class also provides additional [helper methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) in addition to the `next()` method required by the iterator protocol. You can inspect an iterator's prototype chain by logging it in a graphical console.\n\nconsole.log(\\[\\]\\[Symbol.iterator\\]());\n\nArray Iterator {}\n  \\[\\[Prototype\\]\\]: Array Iterator     ==> This is the prototype shared by all array iterators\n    next: ƒ next()\n    Symbol(Symbol.toStringTag): \"Array Iterator\"\n    \\[\\[Prototype\\]\\]: Object           ==> This is the prototype shared by all built-in iterators\n      Symbol(Symbol.iterator): ƒ \\[Symbol.iterator\\]()\n      \\[\\[Prototype\\]\\]: Object         ==> This is Object.prototype\n\n### [Built-in APIs accepting iterables](#built-in_apis_accepting_iterables)\n\nThere are many APIs that accept iterables. Some examples include:\n\n*   [`Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map)\n*   [`WeakMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/WeakMap)\n*   [`Set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set)\n*   [`WeakSet()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/WeakSet)\n*   [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)\n*   [`Promise.allSettled()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled)\n*   [`Promise.race()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n*   [`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any)\n*   [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n*   [`Object.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy)\n*   [`Map.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/groupBy)\n\n```\nconst myObj = {};\n\nnew WeakSet(\n  (function* () {\n    yield {};\n    yield myObj;\n    yield {};\n  })(),\n).has(myObj); // true\n```\n\n### [Syntaxes expecting iterables](#syntaxes_expecting_iterables)\n\nSome statements and expressions expect iterables, for example the [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops, [array and parameter spreading](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), [`yield*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*), and [array destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment):\n\n```\nfor (const value of [\"a\", \"b\", \"c\"]) {\n  console.log(value);\n}\n// \"a\"\n// \"b\"\n// \"c\"\n\nconsole.log([...\"abc\"]); // [\"a\", \"b\", \"c\"]\n\nfunction* gen() {\n  yield* [\"a\", \"b\", \"c\"];\n}\n\nconsole.log(gen().next()); // { value: \"a\", done: false }\n\n[a, b, c] = new Set([\"a\", \"b\", \"c\"]);\nconsole.log(a); // \"a\"\n```\n\nWhen built-in syntaxes are iterating an iterator, and the last result's `done` is `false` (i.e. the iterator is able to produce more values) but no more values are needed, the `return` method will get called if present. This can happen, for example, if a `break` or `return` is encountered in a `for...of` loop, or if all identifiers are already bound in an array destructuring.\n\n```\nconst obj = {\n  [Symbol.iterator]() {\n    let i = 0;\n    return {\n      next() {\n        i++;\n        console.log(\"Returning\", i);\n        if (i === 3) return { done: true, value: i };\n        return { done: false, value: i };\n      },\n      return() {\n        console.log(\"Closing\");\n        return { done: true };\n      },\n    };\n  },\n};\n\nconst [a] = obj;\n// Returning 1\n// Closing\n\nconst [b, c, d] = obj;\n// Returning 1\n// Returning 2\n// Returning 3\n// Already reached the end (the last call returned `done: true`),\n// so `return` is not called\n\nfor (const b of obj) {\n  break;\n}\n// Returning 1\n// Closing\n```\n\nThe [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) loop and [`yield*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*) in [async generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*) (but not [sync generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*)) are the only ways to interact with async iterables. Using `for...of`, array spreading, etc. on an async iterable that's not also a sync iterable (i.e. it has `[@@asyncIterator]()` but no `[@@iterator]()`) will throw a TypeError: x is not iterable.\n\n## [Error handling](#error_handling)\n\nBecause iteration involves transferring control back and forth between the iterator and the consumer, error handling happens in both ways: how the consumer handles errors thrown by the iterator, and how the iterator handles errors thrown by the consumer. When you are using one of the built-in ways of iteration, the language may also throw errors because the iterable breaks certain invariants. We will describe how built-in syntaxes generate and handle errors, which can be used as a guideline for your own code if you are manually stepping the iterator.\n\n### [Non-well-formed iterables](#non-well-formed_iterables)\n\nErrors may happen when acquiring the iterator from the iterable. The language invariant enforced here is that the iterable must produce a valid iterator:\n\n*   It has a callable `[@@iterator]()` method.\n*   The `[@@iterator]()` method returns an object.\n*   The object returned by `[@@iterator]()` has a callable `next()` method.\n\nWhen using built-in syntax to initiate iteration on a non-well-formed iterable, a TypeError is thrown.\n\n```\nconst nonWellFormedIterable = { [Symbol.iterator]: 1 };\n[...nonWellFormedIterable]; // TypeError: nonWellFormedIterable is not iterable\nnonWellFormedIterable[Symbol.iterator] = () => 1;\n[...nonWellFormedIterable]; // TypeError: [Symbol.iterator]() returned a non-object value\nnonWellFormedIterable[Symbol.iterator] = () => ({});\n[...nonWellFormedIterable]; // TypeError: nonWellFormedIterable[Symbol.iterator]().next is not a function\n```\n\nFor async iterables, if its `@@asyncIterator` property has value `undefined` or `null`, JavaScript falls back to using the `@@iterator` property instead (and wraps the resulting iterator into an async iterator by [forwarding](#forwarding_errors) the methods). Otherwise, the `@@asyncIterator` property must conform to the above invariants too.\n\nThis type of errors can be prevented by first validating the iterable before attempting to iterate it. However, it's fairly rare because usually you know the type of the object you are iterating over. If you are receiving this iterable from some other code, you should just let the error propagate to the caller so they know an invalid input was provided.\n\n### [Errors during iteration](#errors_during_iteration)\n\nMost errors happen when stepping the iterator (calling `next()`). The language invariant enforced here is that the `next()` method must return an object (for async iterators, an object after awaiting). Otherwise, a TypeError is thrown.\n\nIf the invariant is broken or the `next()` method throws an error (for async iterators, it may also return a rejected promise), the error is progated to the caller. For built-in syntaxes, the iteration in progress is aborted without retrying or cleanup (with the assumption that if the `next()` method threw the error, then it has cleaned up already). If you are manually calling `next()`, you may catch the error and retry calling `next()`, but in general you should assume the iterator is already closed.\n\nIf the caller decides to exit iteration for any reason other than the errors in the previous paragraph, such as when it enters an error state in its own code (for example, while handling an invalid value produced by the iterator), it should call the `return()` method on the iterator, if one exists. This allows the iterator to perform any cleanup. The `return()` method is only called for premature exits—if `next()` returns `done: true`, the `return()` method is not called, with the assumption that the iterator has already cleaned up.\n\nThe `return()` method might be invalid too! The language also enforces that the `return()` method must return an object and throws a TypeError otherwise. If the `return()` method throws an error, the error is propagated to the caller. However, if the `return()` method is called because the caller encountered an error in its own code, then this error overrides the error thrown by the `return()` method.\n\nUsually, the caller implements error handling like this:\n\n```\ntry {\n  for (const value of iterable) {\n    // ...\n  }\n} catch (e) {\n  // Handle the error\n}\n```\n\nThe `catch` will be able to catch errors thrown when `iterable` is not a valid iterable, when `next()` throws an error, when `return()` throws an error (if the `for` loop exits early), and when the `for` loop body throws an error.\n\nMost iterators are implemented with generator functions, so we will demonstrate how generator functions typically handle errors:\n\n```\nfunction* gen() {\n  try {\n    yield doSomething();\n    yield doSomethingElse();\n  } finally {\n    cleanup();\n  }\n}\n```\n\nThe lack of `catch` here causes errors thrown by `doSomething()` or `doSomethingElse()` to propagate to the caller of `gen`. If these errors are caught within the generator function (which is equally advisable), the generator function can decide to continue yielding values or to exit early. However, the `finally` block is necessary for generators that keep open resources. The `finally` block is guaranteed to run, either when the last `next()` is called or when `return()` is called.\n\n### [Forwarding errors](#forwarding_errors)\n\nSome built-in syntaxes wrap an iterator into another iterator. They include the iterator produced by [`Iterator.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/from), [iterator helpers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) (`map()`, `filter()`, `take()`, `drop()`, and `flatMap()`), [`yield *`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*), and a hidden wrapper when you use async iteration (`for await...of`, `Array.fromAsync`) on sync iterators. The wrapped iterator is then responsible for forwarding errors between the inner iterator and the caller.\n\n*   All wrapper iterators directly forward the `next()` method of the inner iterator, including its return value and thrown errors.\n*   Wrapper iterators generally directly forward the `return()` method of the inner iterator. If the `return()` method doesn't exist on the inner iterator, it returns `{ done: true, value: undefined }` instead. In the case of iterator helpers: if the iterator helper's `next()` method has not been called, after trying to call `return()` on the inner iterator, the current iterator always returns `{ done: true, value: undefined }`. This is consistent with generator functions where execution hasn't entered the `yield *` expression yet.\n*   `yield *` is the only built-in syntax that forwards the `throw()` method of the inner iterator. For information on how [`yield *`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*) forwards the `return()` and `throw()` methods, see its own reference.\n\n## [Examples](#examples)\n\n### [User-defined iterables](#user-defined_iterables)\n\nYou can make your own iterables like this:\n\n```\nconst myIterable = {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n\nconsole.log([...myIterable]); // [1, 2, 3]\n```\n\n### [Simple iterator](#simple_iterator)\n\nIterators are stateful by nature. If you don't define it as a [generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) (as the example above shows), you would likely want to encapsulate the state in a closure.\n\n```\nfunction makeIterator(array) {\n  let nextIndex = 0;\n  return {\n    next() {\n      return nextIndex < array.length\n        ? {\n            value: array[nextIndex++],\n            done: false,\n          }\n        : {\n            done: true,\n          };\n    },\n  };\n}\n\nconst it = makeIterator([\"yo\", \"ya\"]);\n\nconsole.log(it.next().value); // 'yo'\nconsole.log(it.next().value); // 'ya'\nconsole.log(it.next().done); // true\n```\n\n### [Infinite iterator](#infinite_iterator)\n\n```\nfunction idMaker() {\n  let index = 0;\n  return {\n    next() {\n      return {\n        value: index++,\n        done: false,\n      };\n    },\n  };\n}\n\nconst it = idMaker();\n\nconsole.log(it.next().value); // 0\nconsole.log(it.next().value); // 1\nconsole.log(it.next().value); // 2\n// ...\n```\n\n### [Defining an iterable with a generator](#defining_an_iterable_with_a_generator)\n\n```\nfunction* makeSimpleGenerator(array) {\n  let nextIndex = 0;\n  while (nextIndex < array.length) {\n    yield array[nextIndex++];\n  }\n}\n\nconst gen = makeSimpleGenerator([\"yo\", \"ya\"]);\n\nconsole.log(gen.next().value); // 'yo'\nconsole.log(gen.next().value); // 'ya'\nconsole.log(gen.next().done); // true\n\nfunction* idMaker() {\n  let index = 0;\n  while (true) {\n    yield index++;\n  }\n}\n\nconst it = idMaker();\n\nconsole.log(it.next().value); // 0\nconsole.log(it.next().value); // 1\nconsole.log(it.next().value); // 2\n// ...\n```\n\n### [Defining an iterable with a class](#defining_an_iterable_with_a_class)\n\nState encapsulation can be done with [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) as well.\n\n```\nclass SimpleClass {\n  #data;\n\n  constructor(data) {\n    this.#data = data;\n  }\n\n  [Symbol.iterator]() {\n    // Use a new index for each iterator. This makes multiple\n    // iterations over the iterable safe for non-trivial cases,\n    // such as use of break or nested looping over the same iterable.\n    let index = 0;\n\n    return {\n      // Note: using an arrow function allows `this` to point to the\n      // one of `[@@iterator]()` instead of `next()`\n      next: () => {\n        if (index < this.#data.length) {\n          return { value: this.#data[index++], done: false };\n        } else {\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n\nconst simple = new SimpleClass([1, 2, 3, 4, 5]);\n\nfor (const val of simple) {\n  console.log(val); // 1 2 3 4 5\n}\n```\n\n### [Overriding built-in iterables](#overriding_built-in_iterables)\n\nFor example, a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) is a built-in iterable object:\n\n```\nconst someString = \"hi\";\nconsole.log(typeof someString[Symbol.iterator]); // \"function\"\n```\n\n`String`'s [default iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator) returns the string's code points one by one:\n\n```\nconst iterator = someString[Symbol.iterator]();\nconsole.log(`${iterator}`); // \"[object String Iterator]\"\n\nconsole.log(iterator.next()); // { value: \"h\", done: false }\nconsole.log(iterator.next()); // { value: \"i\", done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\nYou can redefine the iteration behavior by supplying our own `@@iterator`:\n\n```\n// need to construct a String object explicitly to avoid auto-boxing\nconst someString = new String(\"hi\");\n\nsomeString[Symbol.iterator] = function () {\n  return {\n    // this is the iterator object, returning a single element (the string \"bye\")\n    next() {\n      return this._first\n        ? { value: \"bye\", done: (this._first = false) }\n        : { done: true };\n    },\n    _first: true,\n  };\n};\n```\n\nNotice how redefining `@@iterator` affects the behavior of built-in constructs that use the iteration protocol:\n\n```\nconsole.log([...someString]); // [\"bye\"]\nconsole.log(`${someString}`); // \"hi\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-iteration](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-iteration) |\n\n## [See also](#see_also)",
    "title": "Iteration protocols - JavaScript | MDN",
    "description": "Iteration protocols aren't new built-ins or syntax, but protocols. These protocols can be implemented by any object by following some conventions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features",
    "markdown": "# Deprecated and obsolete features - JavaScript\n\nThis page lists features of JavaScript that are deprecated (that is, still available but planned for removal) and obsolete (that is, no longer usable).\n\n## [Deprecated features](#deprecated_features)\n\nThese deprecated features can still be used, but should be used with caution because they are not required to be implemented by every JavaScript engine. You should work to remove their use from your code.\n\nSome of these deprecated features are listed in the [Annex B](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html) section of the ECMAScript specification. This section is described as normative optional — that is, web browser hosts must implement these features, while non-web hosts may not. These features are likely stable because removing them will cause backward compatibility issues and break legacy websites. (JavaScript has the design goal of \"don't break the web\".) Still, they are not cross-platform portable and may not be supported by all analysis tools, so you are advised to not use them, as the introduction of Annex B states:\n\n> … All of the language features and behaviors specified in this annex have one or more undesirable characteristics and in the absence of legacy usage would be removed from this specification. …\n> \n> … Programmers should not use or assume the existence of these features and behaviors when writing new ECMAScript code. …\n\nSome others, albeit in the main spec body, are also marked as normative optional and should not be depended on.\n\nJavaScript source, if parsed as scripts, allows HTML-like comments, as if the script is part of a `<script>` tag.\n\nThe following is valid JavaScript when running in a web browser (or Node.js, which uses the V8 engine powering Chrome):\n\n```\n<!-- comment\nconsole.log(\"a\"); <!-- another comment\nconsole.log(\"b\");\n--> More comment\n// Logs \"a\" and \"b\"\n```\n\n`<!--` and `-->` both act like `//`, i.e. starting line comments. `-->` is only valid at the start of a line (to avoid ambiguity with a postfix decrement followed by a greater than operator), while `<!--` can occur anywhere in the line.\n\n### [RegExp](#regexp)\n\nThe following properties are deprecated. This does not affect their use in [replacement strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace):\n\n[`$1–$9`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n)\n\nParenthesized substring matches, if any.\n\n[`input, $_`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input)\n\nThe string against which a regular expression is matched.\n\n[`lastMatch, $&`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch)\n\nThe last matched substring.\n\n[`lastParen, $+`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen)\n\nThe last parenthesized substring match, if any.\n\n[`` leftContext, $` ``](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext)\n\nThe substring preceding the most recent match.\n\n[`rightContext, $'`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext)\n\nThe substring following the most recent match.\n\nThe [`compile()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile) method is deprecated. Construct a new `RegExp` instance instead.\n\nThe following regex syntaxes are deprecated and only available in [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode). In Unicode-aware mode, they are all syntax errors:\n\n*   [Lookahead assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) can have [quantifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier).\n*   [Backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) that do not refer to an existing capturing group become [legacy octal escapes](#escape_sequences).\n*   In [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class), character ranges where one boundary is a character class makes the `-` become a literal character.\n*   An escape sequence that's not recognized becomes an [\"identity escape\"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape).\n*   Escape sequences within [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) of the form `\\cX` where `X` is a number or `_` are decoded in the same way as those with [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) letters: `\\c0` is the same as `\\cP` when taken modulo 32. In addition, if the form `\\cX` is encountered anywhere where `X` is not one of the recognized characters, then the backslash is treated as a literal character.\n*   The sequence `\\k` within a regex that doesn't have any [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) is treated as an identity escape.\n*   The syntax characters `]`, `{`, and `}` may appear [literally](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character) without escaping if they cannot be interpreted as the end of a character class or quantifier delimiters.\n\n### [Function](#function)\n\n*   The [`caller`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller) property of functions and the [`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) property are deprecated and unavailable in strict mode.\n*   Instead of accessing `arguments` as a property of a function, you should use the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object inside function closures.\n\n### [Object](#object)\n\n### [String](#string)\n\n*   HTML wrapper methods like [`String.prototype.fontsize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize) and [`String.prototype.big`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big).\n*   [`String.prototype.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) probably won't be removed anytime soon, but it's defined in Annex B and hence normative optional.\n*   `String.prototype.trimLeft` and `String.prototype.trimRight` should be replaced with [`String.prototype.trimStart`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart) and [`String.prototype.trimEnd`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd).\n\n### [Date](#date)\n\n*   The [`getYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear) and [`setYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear) methods are affected by the Year-2000-Problem and have been subsumed by [`getFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear) and [`setFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear).\n*   The `toGMTString()` method is deprecated. Use [`toUTCString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString) instead.\n\n### [Escape sequences](#escape_sequences)\n\n*   Octal escape sequences (\\\\ followed by one, two, or three octal digits) are deprecated in string and regular expression literals.\n*   The [`escape()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape) and [`unescape()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape) functions are deprecated. Use [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI), [`encodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent), [`decodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI), or [`decodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) to encode and decode escape sequences for special characters.\n\n### [Statements](#statements)\n\nThe [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) statement is deprecated and unavailable in strict mode.\n\nInitializers in `var` declarations of [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops headers are deprecated and produce [syntax errors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer) in strict mode. They are silently ignored in non-strict mode.\n\nNormally, the `catch` block of a [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) statement cannot contain any variable declaration with the same name as the variables bound in the `catch()`. An extension grammar allows the `catch` block to contain a [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) declared variable with the same name as the `catch`\\-bound identifier, but only if the `catch` binding is a simple identifier, not a [destructuring pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment). However, this variable's initialization and assignment would only act on the `catch`\\-bound identifier, instead of the upper scope variable, and the behavior could be confusing.\n\n```\nvar a = 2;\ntry {\n  throw 42;\n} catch (a) {\n  var a = 1; // This 1 is assigned to the caught `a`, not the outer `a`.\n}\nconsole.log(a); // 2\n\ntry {\n  throw 42;\n  // Note: identifier changed to `err` to avoid conflict with\n  // the inner declaration of `a`.\n} catch (err) {\n  var a = 1; // This 1 is assigned to the upper-scope `a`.\n}\nconsole.log(a); // 1\n```\n\nThis is listed in Annex B of the spec and hence may not be implemented everywhere. Avoid any name conflicts between the `catch`\\-bound identifier and variables declared in the `catch` block.\n\n## [Obsolete features](#obsolete_features)\n\nThese obsolete features have been entirely removed from JavaScript and can no longer be used as of the indicated version of JavaScript.\n\n### [RegExp](#regexp_2)\n\nThe following are now properties of `RegExp` instances, no longer of the `RegExp` constructor:\n\n| Property | Description |\n| --- | --- |\n| [`global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) | Whether or not to test the regular expression against all possible matches in a string, or only against the first. |\n| [`ignoreCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) | Whether or not to ignore case while attempting a match in a string. |\n| [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) | The index at which to start the next match. |\n| [`multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) (also via `RegExp.$*`) | Whether or not to search in strings across multiple lines. |\n| [`source`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source) | The text of the pattern. |\n\nThe `valueOf()` method is no longer specialized for `RegExp`. It uses [`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf), which returns itself.\n\n### [Function](#function_2)\n\n*   Functions' `arity` property is obsolete. Use [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) instead.\n\n### [Object](#object_2)\n\n| Property | Description | Alternative |\n| --- | --- | --- |\n| `__count__` | Returns the number of enumerable properties directly on a user-defined object. | [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) |\n| `__parent__` | Points to an object's context. | No direct replacement |\n| `__iterator__` | Used with [legacy iterators](#legacy_generator_and_iterator). | [`Symbol.iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) and the new [iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) |\n| `__noSuchMethod__` | A method called when a non-existent property is called as method. | [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n| `Object.prototype.eval()` | Evaluates a string of JavaScript code in the context of the specified object. | No direct replacement |\n| `Object.observe()` | Asynchronously observing the changes to an object. | [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n| `Object.unobserve()` | Remove observers. | [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n| `Object.getNotifier()` | Create a notifier object that allows to synthetically trigger a change observable with `Object.observe()`. | No direct replacement |\n| `Object.prototype.watch()` | Attach a handler callback to a property that gets called when the property is assigned. | [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n| `Object.prototype.unwatch()` | Remove watch handlers on a property. | [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n\n### [String](#string_2)\n\n*   Non-standard String generic methods like `String.slice(myStr, 0, 12)`, `String.replace(myStr, /\\./g, \"!\")`, etc. have been introduced in Firefox 1.5 (JavaScript 1.6), deprecated in Firefox 53, and removed in Firefox 68. You can use methods on [`String.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#instance_methods) together with [`Function.call`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) instead.\n*   `String.prototype.quote` is removed from Firefox 37.\n*   Non-standard `flags` parameter in [`String.prototype.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search), [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), and [`String.prototype.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) are obsolete.\n\n### [WeakMap](#weakmap)\n\n*   `WeakMap.prototype.clear()` was added in Firefox 20 and removed in Firefox 46. It is not possible to traverse all keys in a [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap).\n\n### [Date](#date_2)\n\n*   `Date.prototype.toLocaleFormat()`, which used a format string in the same format expected by the `strftime()` function in C, is obsolete. Use [`toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString) or [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instead.\n\n### [Array](#array)\n\n*   Non-standard Array generic methods like `Array.slice(myArr, 0, 12)`, `Array.forEach(myArr, myFn)`, etc. have been introduced in Firefox 1.5 (JavaScript 1.6), deprecated in Firefox 68, and removed in Firefox 71. You can use methods on [`Array.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods) together with [`Function.call`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) instead.\n\n| Property | Description | Alternative |\n| --- | --- | --- |\n| `Array.observe()` | Asynchronously observing changes to Arrays. | [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n| `Array.unobserve()` | Remove observers. | [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n\n### [Number](#number)\n\n*   `Number.toInteger()` is obsolete. Use [`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor), [`Math.round`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round), or other methods instead.\n\n### [Proxy](#proxy)\n\n*   `Proxy.create` and `Proxy.createFunction` are obsolete. Use the [`Proxy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy) constructor instead.\n*   The following traps are obsolete:\n    *   `hasOwn` ([bug 980565](https://bugzil.la/980565), Firefox 33).\n    *   `getEnumerablePropertyKeys` ([bug 783829](https://bugzil.la/783829), Firefox 37)\n    *   `getOwnPropertyNames` ([bug 1007334](https://bugzil.la/1007334), Firefox 33)\n    *   `keys` ([bug 1007334](https://bugzil.la/1007334), Firefox 33)\n\n### [ParallelArray](#parallelarray)\n\n*   `ParallelArray` is obsolete.\n\n### [Statements](#statements_2)\n\n*   `for each...in` is obsolete. Use [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) instead.\n*   let blocks and let expressions are obsolete.\n*   Expression closures (`function () 1` as a shorthand of `function () { return 1; }`) are obsolete. Use regular [`functions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) or [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) instead.\n\n### [Acquiring source text](#acquiring_source_text)\n\nThe `toSource()` methods of arrays, numbers, strings, etc. and the `uneval()` global function are obsolete. Use [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString), or write your own serialization method instead.\n\n### [Legacy generator and iterator](#legacy_generator_and_iterator)\n\nLegacy generator function statements and legacy generator function expressions are removed. The legacy generator function syntax reuses the `function` keyword, which automatically becomes a generator function when there are one or more `yield` expressions in the body — this is now a syntax error. Use [`function*` statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) and [`function*` expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*) instead.\n\nArray comprehensions and generator comprehensions are removed.\n\n```\n// Legacy array comprehensions\n[for (x of iterable) x]\n[for (x of iterable) if (condition) x]\n[for (x of iterable) for (y of iterable) x + y]\n\n// Legacy generator comprehensions\n(for (x of iterable) x)\n(for (x of iterable) if (condition) x)\n(for (x of iterable) for (y of iterable) x + y)\n```\n\nFirefox, prior to version 26, implemented another iterator protocol that is similar to the standard [Iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols). An object is an legacy iterator when it implements a `next()` method, which produces a value on each call and throws a `StopIteration` object at the end of iteration. This legacy iterator protocol differs from the standard iterator protocol:\n\n*   The value was returned directly as the return value of calls to `next()`, instead of the `value` property of the `IteratorResult` object.\n*   Iteration termination was expressed by throwing a `StopIteration` object, instead of through the `done` property of the `IteratorResult` object.\n\nThis feature, along with the `StopIteration` global constructor, was removed in Firefox 58+. For future-facing usages, consider using [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops and the [iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n\n### [Sharp variables](#sharp_variables)\n\nSharp variables are obsolete. To create circular structures, use temporary variables instead.",
    "title": "Deprecated and obsolete features - JavaScript | MDN",
    "description": "This page lists features of JavaScript that are deprecated (that is, still available but planned for removal) and obsolete (that is, no longer usable).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString",
    "markdown": "# Function.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instances returns a string representing the source code of this function.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the source code of the function.\n\n## [Description](#description)\n\nThe [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) object overrides the `toString()` method inherited from [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object); it does not inherit [`Object.prototype.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). For user-defined `Function` objects, the `toString` method returns a string containing the source text segment which was used to define the function.\n\nJavaScript calls the `toString` method automatically when a `Function` is to be represented as a text value, e.g. when a function is concatenated with a string.\n\nThe `toString()` method will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) exception (\"Function.prototype.toString called on incompatible object\"), if its `this` value object is not a `Function` object.\n\n```\nFunction.prototype.toString.call(\"foo\"); // throws TypeError\n```\n\nIf the `toString()` method is called on built-in function objects, a function created by [`Function.prototype.bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind), or other non-JavaScript functions, then `toString()` returns a _native function string_ which looks like\n\nfunction someName() { \\[native code\\] }\n\nFor intrinsic object methods and functions, `someName` is the initial name of the function; otherwise its content may be implementation-defined, but will always be in property name syntax, like `[1 + 1]`, `someName`, or `1`.\n\n**Note:** This means using [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) on native function strings is a guaranteed syntax error.\n\nIf the `toString()` method is called on a function created by the `Function` constructor, `toString()` returns the source code of a synthesized function declaration named \"anonymous\" using the provided parameters and function body. For example, `Function(\"a\", \"b\", \"return a + b\").toString()` will return:\n\nfunction anonymous(a,b\n) {\nreturn a + b\n}\n\nSince ES2018, the spec requires the return value of `toString()` to be the exact same source code as it was declared, including any whitespace and/or comments — or, if the host doesn't have the source code available for some reason, requires returning a native function string. Support for this revised behavior can be found in the [compatibility table](#browser_compatibility).\n\n## [Examples](#examples)\n\n### [Comparing actual source code and toString results](#comparing_actual_source_code_and_tostring_results)\n\n```\nfunction test(fn) {\n  console.log(fn.toString());\n}\n\nfunction f() {}\nclass A {\n  a() {}\n}\nfunction* g() {}\n\ntest(f); // \"function f() {}\"\ntest(A); // \"class A { a() {} }\"\ntest(g); // \"function* g() {}\"\ntest((a) => a); // \"(a) => a\"\ntest({ a() {} }.a); // \"a() {}\"\ntest({ *a() {} }.a); // \"*a() {}\"\ntest({ [0]() {} }[0]); // \"[0]() {}\"\ntest(Object.getOwnPropertyDescriptor({ get a() {} }, \"a\").get); // \"get a() {}\"\ntest(Object.getOwnPropertyDescriptor({ set a(x) {} }, \"a\").set); // \"set a(x) {}\"\ntest(Function.prototype.toString); // \"function toString() { [native code] }\"\ntest(function f() {}.bind(0)); // \"function () { [native code] }\"\ntest(Function(\"a\", \"b\")); // function anonymous(a\\n) {\\nb\\n}\n```\n\nNote that after the `Function.prototype.toString()` revision, when `toString()` is called, implementations are never allowed to synthesize a function's source that is not a native function string. The method always returns the exact source code used to create the function — including the [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) examples above. The [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) constructor itself has the capability of synthesizing the source code for the function (and is therefore a form of implicit [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)).\n\n### [Getting source text of a function](#getting_source_text_of_a_function)\n\nIt is possible to get the source text of a function by coercing it to a string — for example, by wrapping it in a template literal:\n\n```\nfunction foo() {\n  return \"bar\";\n}\nconsole.log(`${foo}`);\n// function foo() {\n//   return \"bar\";\n// }\n```\n\nThis source text is _exact_, including any interspersed comments (which won't be stored by the engine's internal representation otherwise).\n\n```\nfunction foo /* a comment */() {\n  return \"bar\";\n}\nconsole.log(foo.toString());\n// function foo /* a comment */() {\n//   return \"bar\";\n// }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function.prototype.tostring](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function.prototype.toString() - JavaScript | MDN",
    "description": "The toString() method of Function instances returns a string representing the source code of this function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",
    "markdown": "# Optional chaining (?.) - JavaScript\n\nThe **optional chaining (`?.`)** operator accesses an object's property or calls a function. If the object accessed or function called using this operator is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), the expression short circuits and evaluates to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) instead of throwing an error.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nobj.val?.prop\nobj.val?.[expr]\nobj.func?.(args)\n```\n\n## [Description](#description)\n\nThe `?.` operator is like the `.` chaining operator, except that instead of causing an error if a reference is [nullish](https://developer.mozilla.org/en-US/docs/Glossary/Nullish) ([`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)), the expression short-circuits with a return value of `undefined`. When used with function calls, it returns `undefined` if the given function does not exist.\n\nThis results in shorter and simpler expressions when accessing chained properties when the possibility exists that a reference may be missing. It can also be helpful while exploring the content of an object when there's no known guarantee as to which properties are required.\n\nFor example, consider an object `obj` which has a nested structure. Without optional chaining, looking up a deeply-nested subproperty requires validating the references in between, such as:\n\n```\nconst nestedProp = obj.first && obj.first.second;\n```\n\nThe value of `obj.first` is confirmed to be non-`null` (and non-`undefined`) before accessing the value of `obj.first.second`. This prevents the error that would occur if you accessed `obj.first.second` directly without testing `obj.first`.\n\nThis is an idiomatic pattern in JavaScript, but it gets verbose when the chain is long, and it's not safe. For example, if `obj.first` is a [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value that's not `null` or `undefined`, such as `0`, it would still short-circuit and make `nestedProp` become `0`, which may not be desirable.\n\nWith the optional chaining operator (`?.`), however, you don't have to explicitly test and short-circuit based on the state of `obj.first` before trying to access `obj.first.second`:\n\n```\nconst nestedProp = obj.first?.second;\n```\n\nBy using the `?.` operator instead of just `.`, JavaScript knows to implicitly check to be sure `obj.first` is not `null` or `undefined` before attempting to access `obj.first.second`. If `obj.first` is `null` or `undefined`, the expression automatically short-circuits, returning `undefined`.\n\nThis is equivalent to the following, except that the temporary variable is in fact not created:\n\n```\nconst temp = obj.first;\nconst nestedProp =\n  temp === null || temp === undefined ? undefined : temp.second;\n```\n\nOptional chaining cannot be used on a non-declared root object, but can be used with a root object with value `undefined`.\n\n```\nundeclaredVar?.prop; // ReferenceError: undeclaredVar is not defined\n```\n\n### [Optional chaining with function calls](#optional_chaining_with_function_calls)\n\nYou can use optional chaining when attempting to call a method which may not exist. This can be helpful, for example, when using an API in which a method might be unavailable, either due to the age of the implementation or because of a feature which isn't available on the user's device.\n\nUsing optional chaining with function calls causes the expression to automatically return `undefined` instead of throwing an exception if the method isn't found:\n\n```\nconst result = someInterface.customMethod?.();\n```\n\nHowever, if there is a property with such a name which is not a function, using `?.` will still raise a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) exception \"someInterface.customMethod is not a function\".\n\n**Note:** If `someInterface` itself is `null` or `undefined`, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) exception will still be raised (\"someInterface is null\"). If you expect that `someInterface` itself may be `null` or `undefined`, you have to use `?.` at this position as well: `someInterface?.customMethod?.()`.\n\n`eval?.()` is the shortest way to enter [_indirect eval_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#direct_and_indirect_eval) mode.\n\n### [Optional chaining with expressions](#optional_chaining_with_expressions)\n\nYou can also use the optional chaining operator with [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation), which allows passing an expression as the property name:\n\n```\nconst nestedProp = obj?.[\"prop\" + \"Name\"];\n```\n\nThis is particularly useful for arrays, since array indices must be accessed with square brackets.\n\n```\nfunction printMagicIndex(arr) {\n  console.log(arr?.[42]);\n}\n\nprintMagicIndex([0, 1, 2, 3, 4, 5]); // undefined\nprintMagicIndex(); // undefined; if not using ?., this would throw an error: \"Cannot read properties of undefined (reading '42')\"\n```\n\n### [Invalid optional chaining](#invalid_optional_chaining)\n\nIt is invalid to try to assign to the result of an optional chaining expression:\n\n```\nconst object = {};\nobject?.property = 1; // SyntaxError: Invalid left-hand side in assignment\n```\n\n[Template literal tags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates) cannot be an optional chain (see [SyntaxError: tagged template cannot be used with optional chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_optional_template)):\n\n```\nString?.raw`Hello, world!`;\nString.raw?.`Hello, world!`; // SyntaxError: Invalid tagged template on optional chain\n```\n\nThe constructor of [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) expressions cannot be an optional chain (see [SyntaxError: new keyword cannot be used with an optional chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_new_optional)):\n\n```\nnew Intl?.DateTimeFormat(); // SyntaxError: Invalid optional chain from new expression\nnew Map?.();\n```\n\n### [Short-circuiting](#short-circuiting)\n\nWhen using optional chaining with expressions, if the left operand is `null` or `undefined`, the expression will not be evaluated. For instance:\n\n```\nconst potentiallyNullObj = null;\nlet x = 0;\nconst prop = potentiallyNullObj?.[x++];\n\nconsole.log(x); // 0 as x was not incremented\n```\n\nSubsequent property accesses will not be evaluated either.\n\n```\nconst potentiallyNullObj = null;\nconst prop = potentiallyNullObj?.a.b;\n// This does not throw, because evaluation has already stopped at\n// the first optional chain\n```\n\nThis is equivalent to:\n\n```\nconst potentiallyNullObj = null;\nconst prop =\n  potentiallyNullObj === null || potentiallyNullObj === undefined\n    ? undefined\n    : potentiallyNullObj.a.b;\n```\n\nHowever, this short-circuiting behavior only happens along one continuous \"chain\" of property accesses. If you [group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping) one part of the chain, then subsequent property accesses will still be evaluated.\n\n```\nconst potentiallyNullObj = null;\nconst prop = (potentiallyNullObj?.a).b;\n// TypeError: Cannot read properties of undefined (reading 'b')\n```\n\nThis is equivalent to:\n\n```\nconst potentiallyNullObj = null;\nconst temp = potentiallyNullObj?.a;\nconst prop = temp.b;\n```\n\nExcept the `temp` variable isn't created.\n\n## [Examples](#examples)\n\n### [Basic example](#basic_example)\n\nThis example looks for the value of the `name` property for the member `bar` in a map when there is no such member. The result is therefore `undefined`.\n\n```\nconst myMap = new Map();\nmyMap.set(\"foo\", { name: \"baz\", desc: \"inga\" });\n\nconst nameBar = myMap.get(\"bar\")?.name;\n```\n\n### [Dealing with optional callbacks or event handlers](#dealing_with_optional_callbacks_or_event_handlers)\n\nIf you use callbacks or fetch methods from an object with [a destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring), you may have non-existent values that you cannot call as functions unless you have tested their existence. Using `?.`, you can avoid this extra test:\n\n```\n// Code written without optional chaining\nfunction doSomething(onContent, onError) {\n  try {\n    // Do something with the data\n  } catch (err) {\n    // Testing if onError really exists\n    if (onError) {\n      onError(err.message);\n    }\n  }\n}\n```\n\n```\n// Using optional chaining with function calls\nfunction doSomething(onContent, onError) {\n  try {\n    // Do something with the data\n  } catch (err) {\n    onError?.(err.message); // No exception if onError is undefined\n  }\n}\n```\n\n### [Stacking the optional chaining operator](#stacking_the_optional_chaining_operator)\n\nWith nested structures, it is possible to use optional chaining multiple times:\n\n```\nconst customer = {\n  name: \"Carl\",\n  details: {\n    age: 82,\n    location: \"Paradise Falls\", // Detailed address is unknown\n  },\n};\nconst customerCity = customer.details?.address?.city;\n\n// This also works with optional chaining function call\nconst customerName = customer.name?.getName?.(); // Method does not exist, customerName is undefined\n```\n\n### [Combining with the nullish coalescing operator](#combining_with_the_nullish_coalescing_operator)\n\nThe [nullish coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) may be used after optional chaining in order to build a default value when none was found:\n\n```\nfunction printCustomerCity(customer) {\n  const customerCity = customer?.city ?? \"Unknown city\";\n  console.log(customerCity);\n}\n\nprintCustomerCity({\n  name: \"Nathan\",\n  city: \"Paris\",\n}); // \"Paris\"\nprintCustomerCity({\n  name: \"Carl\",\n  details: { age: 82 },\n}); // \"Unknown city\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-OptionalExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-OptionalExpression) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Optional chaining (?.) - JavaScript | MDN",
    "description": "The optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to undefined instead of throwing an error.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide",
    "markdown": "# JavaScript Guide - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe JavaScript Guide shows you how to use [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript) and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the [JavaScript reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference).\n\nThis Guide is divided into the following chapters.\n\n## [Introduction](#introduction)\n\n## [Grammar and types](#grammar_and_types)\n\n## [Control flow and error handling](#control_flow_and_error_handling)\n\n## [Loops and iteration](#loops_and_iteration)\n\n## [Functions](#functions)\n\n## [Expressions and operators](#expressions_and_operators)\n\n## [Numbers and dates](#numbers_and_dates)\n\n## [Text formatting](#text_formatting)\n\n## [Indexed collections](#indexed_collections)\n\n## [Keyed collections](#keyed_collections)\n\n## [Working with objects](#working_with_objects)\n\n## [Using classes](#using_classes)\n\n## [Promises](#promises)\n\n## [Typed arrays](#typed_arrays)\n\n## [Iterators and generators](#iterators_and_generators)\n\n## [JavaScript modules](#javascript_modules)",
    "title": "JavaScript Guide - JavaScript | MDN",
    "description": "The JavaScript Guide shows you how to use JavaScript and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the JavaScript reference.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors",
    "markdown": "# Property accessors - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Property accessors** provide access to an object's properties by using the dot notation or the bracket notation.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nobject.propertyName\nobject[expression]\nobject.#privateProperty\n```\n\n## [Description](#description)\n\nOne can think of an object as an _associative array_ (a.k.a. _map_, _dictionary_, _hash_, _lookup table_). The _keys_ in this array are the names of the object's [properties](https://developer.mozilla.org/en-US/docs/Glossary/Property/JavaScript).\n\nThere are two ways to access properties: _dot notation_ and _bracket notation_.\n\n### [Dot notation](#dot_notation)\n\nIn the `object.propertyName` syntax, the `propertyName` must be a valid JavaScript [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) which can also be a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords). For example, `object.$1` is valid, while `object.1` is not.\n\n```\nconst variable = object.propertyName;\nobject.propertyName = value;\n```\n\n```\nconst object = {};\nobject.$1 = \"foo\";\nconsole.log(object.$1); // 'foo'\n```\n\n```\nconst object = {};\nobject.1 = 'bar'; // SyntaxError\nconsole.log(object.1); // SyntaxError\n```\n\nHere, the method named `createElement` is retrieved from `document` and is called.\n\n```\ndocument.createElement(\"pre\");\n```\n\nIf you use a method for a numeric literal, and the numeric literal has no exponent and no decimal point, you should leave [white-space(s)](https://developer.mozilla.org/en-US/docs/Glossary/Whitespace) before the dot preceding the method call, so that the dot is not interpreted as a decimal point.\n\n```\n77 .toExponential();\n// or\n77\n.toExponential();\n// or\n(77).toExponential();\n// or\n77..toExponential();\n// or\n77.0.toExponential();\n// because 77. === 77.0, no ambiguity\n```\n\nIn addition, [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) can only be accessed using dot notation within the class that defines them.\n\n### [Bracket notation](#bracket_notation)\n\nIn the `object[expression]` syntax, the `expression` should evaluate to a string or [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) that represents the property's name. So, it can be any string literal, for example, including `'1foo'`, `'!bar!'`, or even `' '` (a space).\n\n```\nconst variable = object[propertyName];\nobject[propertyName] = value;\n```\n\nThis does the exact same thing as the previous example.\n\n```\ndocument[\"createElement\"](\"pre\");\n```\n\nA space before bracket notation is allowed.\n\n```\ndocument [\"createElement\"](\"pre\");\n```\n\nPassing expressions that evaluate to property name will do the same thing as directly passing the property name.\n\n```\nconst key = \"name\";\nconst getKey = () => \"name\";\nconst Obj = { name: \"Michel\" };\n\nObj[\"name\"]; // returns \"Michel\"\nObj[key]; // evaluates to Obj[\"name\"], and returns \"Michel\"\nObj[getKey()]; // evaluates to Obj[\"name\"], and returns \"Michel\"\n```\n\nHowever, beware of using square brackets to access properties whose names are given by external input. This may make your code susceptible to [object injection attacks](https://github.com/nodesecurity/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md).\n\n### [Property names](#property_names)\n\nEach property name is a string or a [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol). Any other value, including a number, is coerced to a string. This outputs `'value'`, since `1` is coerced into `'1'`.\n\n```\nconst object = {};\nobject[\"1\"] = \"value\";\nconsole.log(object[1]);\n```\n\nThis also outputs `'value'`, since both `foo` and `bar` are converted to the same string (`\"[object Object]\"`).\n\n```\nconst foo = { uniqueProp: 1 };\nconst bar = { uniqueProp: 2 };\nconst object = {};\nobject[foo] = \"value\";\nconsole.log(object[bar]);\n```\n\n### [Method binding](#method_binding)\n\nIt's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is a property that can be called (for example, if it has a reference to a [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instance as its value).\n\nA method is not bound to the object that it is a property of. Specifically, `this` is not fixed in a method and does not necessarily refer to the object containing the method. Instead, `this` is \"passed\" by the function call. See [the reference for `this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this).\n\n## [Examples](#examples)\n\n### [Bracket notation vs. eval()](#bracket_notation_vs._eval)\n\nJavaScript novices often make the mistake of using [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) where the bracket notation can be used instead.\n\nFor example, the following syntax is often seen in many scripts.\n\n```\nconst x = eval(`document.forms.form_name.elements.${strFormControl}.value`);\n```\n\n`eval()` is slow and should be avoided whenever possible. Also, `strFormControl` would have to hold an identifier, which is not required for names and `id`s of form controls. It is better to use bracket notation instead:\n\n```\nconst x = document.forms.form_name.elements[strFormControl].value;\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-property-accessors](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-property-accessors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Property accessors - JavaScript | MDN",
    "description": "Property accessors provide access to an object's properties by using the dot notation or the bracket notation.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment",
    "markdown": "# Remainder assignment (%=) - JavaScript\n\nThe **remainder assignment (`%=`)** operator performs [remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x %= y` is equivalent to `x = x % y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Using remainder assignment](#using_remainder_assignment)\n\n```\nlet bar = 5;\n\nbar %= 2; // 1\nbar %= \"foo\"; // NaN\nbar %= 0; // NaN\n\nlet foo = 3n;\nfoo %= 2n; // 1n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Remainder assignment (%=) - JavaScript | MDN",
    "description": "The remainder assignment (%=) operator performs remainder on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",
    "markdown": "# Object initializer - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nAn **object initializer** is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (`{}`). Objects can also be initialized using [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) or [by invoking a constructor function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects#using_a_constructor_function) with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\no = {\n  a: \"foo\",\n  b: 42,\n  c: {},\n  1: \"number literal property\",\n  \"foo:bar\": \"string literal property\",\n\n  shorthandProperty,\n\n  method(parameters) {\n    // …\n  },\n\n  get property() {},\n  set property(value) {},\n\n  [expression]: \"computed property\",\n\n  __proto__: prototype,\n\n  ...spreadProperty,\n};\n```\n\n## [Description](#description)\n\nAn object initializer is an expression that describes the initialization of an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). Objects consist of _properties_, which are used to describe an object. The values of object properties can either contain [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) data types or other objects.\n\n### [Object literal syntax vs. JSON](#object_literal_syntax_vs._json)\n\nThe object literal syntax is not the same as the **J**ava**S**cript **O**bject **N**otation ([JSON](https://developer.mozilla.org/en-US/docs/Glossary/JSON)). Although they look similar, there are differences between them:\n\n*   JSON _only_ permits property definition using the `\"property\": value` syntax. The property name must be double-quoted, and the definition cannot be a shorthand. Computed property names are not allowed either.\n*   JSON object property values can only be strings, numbers, `true`, `false`, `null`, arrays, or another JSON object. This means JSON cannot express methods or non-plain objects like [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) or [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n*   In JSON, `\"__proto__\"` is a normal property key. In an object literal, it [sets the object's prototype](#prototype_setter).\n\nJSON is a _strict subset_ of the object literal syntax, meaning that every valid JSON text can be parsed as an object literal, and would likely not cause syntax errors. The only exception is that the object literal syntax prohibits duplicate `__proto__` keys, which does not apply to [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse). The latter treats `__proto__` like a normal property and takes the last occurrence as the property's value. The only time when the object value they represent (a.k.a. their semantic) differ is also when the source contains the `__proto__` key — for object literals, it sets the object's prototype; for JSON, it's a normal property.\n\n```\nconsole.log(JSON.parse('{ \"__proto__\": 0, \"__proto__\": 1 }')); // {__proto__: 1}\nconsole.log({ \"__proto__\": 0, \"__proto__\": 1 }); // SyntaxError: Duplicate __proto__ fields are not allowed in object literals\n\nconsole.log(JSON.parse('{ \"__proto__\": {} }')); // { __proto__: {} }\nconsole.log({ \"__proto__\": {} }); // {} (with {} as prototype)\n```\n\n## [Examples](#examples)\n\n### [Creating objects](#creating_objects)\n\nAn empty object with no properties can be created like this:\n\nHowever, the advantage of the _literal_ or _initializer_ notation is, that you are able to quickly create objects with properties inside the curly braces. You notate a list of `key: value` pairs delimited by commas.\n\nThe following code creates an object with three properties and the keys are `\"foo\"`, `\"age\"` and `\"baz\"`. The values of these keys are a string `\"bar\"`, the number `42`, and another object.\n\n```\nconst object = {\n  foo: \"bar\",\n  age: 42,\n  baz: { myProp: 12 },\n};\n```\n\n### [Accessing properties](#accessing_properties)\n\nOnce you have created an object, you might want to read or change them. Object properties can be accessed by using the dot notation or the bracket notation. (See [property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) for detailed information.)\n\n```\nobject.foo; // \"bar\"\nobject[\"age\"]; // 42\nobject.baz; // {myProp: 12}\nobject.baz.myProp; //12\n```\n\n### [Property definitions](#property_definitions)\n\nWe have already learned how to notate properties using the initializer syntax. Oftentimes, there are variables in your code that you would like to put into an object. You will see code like this:\n\n```\nconst a = \"foo\";\nconst b = 42;\nconst c = {};\n\nconst o = {\n  a: a,\n  b: b,\n  c: c,\n};\n```\n\nThere is a shorter notation available to achieve the same:\n\n```\nconst a = \"foo\";\nconst b = 42;\nconst c = {};\n\n// Shorthand property names\nconst o = { a, b, c };\n\n// In other words,\nconsole.log(o.a === { a }.a); // true\n```\n\n#### Duplicate property names\n\nWhen using the same name for your properties, the second property will overwrite the first.\n\n```\nconst a = { x: 1, x: 2 };\nconsole.log(a); // {x: 2}\n```\n\nAfter ES2015, duplicate property names are allowed everywhere, including [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#duplicate_property_names). You can also have duplicate property names in [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes). The only exception is [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties), which must be unique in the class body.\n\n### [Method definitions](#method_definitions)\n\nA property of an object can also refer to a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) or a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) or [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) method.\n\n```\nconst o = {\n  property: function (parameters) {},\n  get property() {},\n  set property(value) {},\n};\n```\n\nA shorthand notation is available, so that the keyword `function` is no longer necessary.\n\n```\n// Shorthand method names\nconst o = {\n  property(parameters) {},\n};\n```\n\nThere is also a way to concisely define generator methods.\n\n```\nconst o = {\n  *generator() {\n    // …\n  },\n};\n```\n\nWhich is equivalent to this ES5-like notation (but note that ECMAScript 5 has no generators):\n\n```\nconst o = {\n  generator: function* () {\n    // …\n  },\n};\n```\n\nFor more information and examples about methods, see [method definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions).\n\n### [Computed property names](#computed_property_names)\n\nThe object initializer syntax also supports computed property names. That allows you to put an expression in square brackets `[]`, that will be computed and used as the property name. This is reminiscent of the bracket notation of the [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) syntax, which you may have used to read and set properties already.\n\nNow you can use a similar syntax in object literals, too:\n\n```\n// Computed property names\nlet i = 0;\nconst a = {\n  [`foo${++i}`]: i,\n  [`foo${++i}`]: i,\n  [`foo${++i}`]: i,\n};\n\nconsole.log(a.foo1); // 1\nconsole.log(a.foo2); // 2\nconsole.log(a.foo3); // 3\n\nconst items = [\"A\", \"B\", \"C\"];\nconst obj = {\n  [items]: \"Hello\",\n};\nconsole.log(obj); // A,B,C: \"Hello\"\nconsole.log(obj[\"A,B,C\"]); // \"Hello\"\n\nconst param = \"size\";\nconst config = {\n  [param]: 12,\n  [`mobile${param.charAt(0).toUpperCase()}${param.slice(1)}`]: 4,\n};\n\nconsole.log(config); // {size: 12, mobileSize: 4}\n```\n\n### [Spread properties](#spread_properties)\n\nObject literals support the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax). It copies own enumerable properties from a provided object onto a new object.\n\nShallow-cloning (excluding `prototype`) or merging objects is now possible using a shorter syntax than [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign).\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nconst obj2 = { foo: \"baz\", y: 13 };\n\nconst clonedObj = { ...obj1 };\n// { foo: \"bar\", x: 42 }\n\nconst mergedObj = { ...obj1, ...obj2 };\n// { foo: \"baz\", x: 42, y: 13 }\n```\n\n### [Prototype setter](#prototype_setter)\n\nA property definition of the form `__proto__: value` or `\"__proto__\": value` does not create a property with the name `__proto__`. Instead, if the provided value is an object or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), it points the `[[Prototype]]` of the created object to that value. (If the value is not an object or `null`, the object is not changed.)\n\nNote that the `__proto__` key is standardized syntax, in contrast to the non-standard and non-performant [`Object.prototype.__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) accessors. It sets the `[[Prototype]]` during object creation, similar to [`Object.create`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) — instead of mutating the prototype chain.\n\n```\nconst obj1 = {};\nconsole.log(Object.getPrototypeOf(obj1) === Object.prototype); // true\n\nconst obj2 = { __proto__: null };\nconsole.log(Object.getPrototypeOf(obj2)); // null\n\nconst protoObj = {};\nconst obj3 = { \"__proto__\": protoObj };\nconsole.log(Object.getPrototypeOf(obj3) === protoObj); // true\n\nconst obj4 = { __proto__: \"not an object or null\" };\nconsole.log(Object.getPrototypeOf(obj4) === Object.prototype); // true\nconsole.log(Object.hasOwn(obj4, \"__proto__\")); // false\n```\n\nOnly a single prototype setter is permitted in an object literal. Multiple prototype setters are a syntax error.\n\nProperty definitions that do not use \"colon\" notation are not prototype setters. They are property definitions that behave identically to similar definitions using any other name.\n\n```\nconst __proto__ = \"variable\";\n\nconst obj1 = { __proto__ };\nconsole.log(Object.getPrototypeOf(obj1) === Object.prototype); // true\nconsole.log(Object.hasOwn(obj1, \"__proto__\")); // true\nconsole.log(obj1.__proto__); // \"variable\"\n\nconst obj2 = { __proto__() { return \"hello\"; } };\nconsole.log(obj2.__proto__()); // \"hello\"\n\nconst obj3 = { [\"__proto__\"]: 17 };\nconsole.log(obj3.__proto__); // 17\n\n// Mixing prototype setter with normal own properties with \"__proto__\" key\nconst obj4 = { [\"__proto__\"]: 17, __proto__: {} }; // {__proto__: 17} (with {} as prototype)\nconst obj5 = {\n  [\"__proto__\"]: 17,\n  __proto__: {},\n  __proto__: null, // SyntaxError: Duplicate __proto__ fields are not allowed in object literals\n};\nconst obj6 = {\n  [\"__proto__\"]: 17,\n  [\"__proto__\"]: \"hello\",\n  __proto__: null,\n}; // {__proto__: \"hello\"} (with null as prototype)\nconst obj7 =  {\n  [\"__proto__\"]: 17,\n  __proto__,\n  __proto__: null,\n}; // {__proto__: \"variable\"} (with null as prototype)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object-initializer](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-object-initializer) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object initializer - JavaScript | MDN",
    "description": "An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). Objects can also be initialized using Object.create() or by invoking a constructor function with the new operator.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder",
    "markdown": "# Remainder (%) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **remainder (`%`)** operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `%` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt remainder if both operands become BigInts; otherwise, it performs number remainder. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nFor the operation `n % d`, `n` is called the dividend and `d` is called the divisor. The operation returns `NaN` if one of the operands is `NaN`, `n` is ±Infinity, or if `d` is ±0. Otherwise, if `d` is ±Infinity or if `n` is ±0, the dividend `n` is returned.\n\nWhen both operands are non-zero and finite, the remainder `r` is calculated as `r := n - d * q` where `q` is the integer such that `r` has the same sign as the dividend `n` while being as close to 0 as possible.\n\nNote that while in most languages, '%' is a remainder operator, in some (e.g. [Python, Perl](https://en.wikipedia.org/wiki/Modulo_operation#In_programming_languages)) it is a modulo operator. Modulo is defined as `k := n - d * q` where `q` is the integer such that `k` has the same sign as the divisor `d` while being as close to 0 as possible. For two values of the same sign, the two are equivalent, but when the operands are of different signs, the modulo result always has the same sign as the _divisor_, while the remainder has the same sign as the _dividend_, which can make them differ by one unit of `d`. To obtain a modulo in JavaScript, in place of `n % d`, use `((n % d) + d) % d`. In JavaScript, the modulo operation (which doesn't have a dedicated operator) is used to normalize the second operand of bitwise shift operators ([`<<`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift), [`>>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift), etc.), making the offset always a positive value.\n\nFor BigInt division, a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is thrown if the divisor `y` is `0n`. This is because number remainder by zero returns `NaN`, but BigInt has no concept of `NaN`.\n\n## [Examples](#examples)\n\n### [Remainder with positive dividend](#remainder_with_positive_dividend)\n\n```\n13 % 5; // 3\n1 % -2; // 1\n1 % 2; // 1\n2 % 3; // 2\n5.5 % 2; // 1.5\n\n3n % 2n; // 1n\n```\n\n### [Remainder with negative dividend](#remainder_with_negative_dividend)\n\n```\n-13 % 5; // -3\n-1 % 2; // -1\n-4 % 2; // -0\n\n-3n % 2n; // -1n\n```\n\n### [Remainder with NaN](#remainder_with_nan)\n\n### [Remainder with Infinity](#remainder_with_infinity)\n\n```\nInfinity % 2; // NaN\nInfinity % 0; // NaN\nInfinity % Infinity; // NaN\n2 % Infinity; // 2\n0 % Infinity; // 0\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-multiplicative-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-multiplicative-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Remainder (%) - JavaScript | MDN",
    "description": "The remainder (%) operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence",
    "markdown": "# Operator precedence - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Operator precedence** determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.\n\n## [Try it](#try_it)\n\n## [Precedence and associativity](#precedence_and_associativity)\n\nConsider an expression describable by the representation below, where both `OP1` and `OP2` are fill-in-the-blanks for OPerators.\n\na OP1 b OP2 c\n\nThe combination above has two possible interpretations:\n\n(a OP1 b) OP2 c\na OP1 (b OP2 c)\n\nWhich one the language decides to adopt depends on the identity of `OP1` and `OP2`.\n\nIf `OP1` and `OP2` have different precedence levels (see the table below), the operator with the higher _precedence_ goes first and associativity does not matter. Observe how multiplication has higher precedence than addition and executed first, even though addition is written first in the code.\n\n```\nconsole.log(3 + 10 * 2); // 23\nconsole.log(3 + (10 * 2)); // 23, because parentheses here are superfluous\nconsole.log((3 + 10) * 2); // 26, because the parentheses change the order\n```\n\nWithin operators of the same precedence, the language groups them by _associativity_. _Left-associativity_ (left-to-right) means that it is interpreted as `(a OP1 b) OP2 c`, while _right-associativity_ (right-to-left) means it is interpreted as `a OP1 (b OP2 c)`. Assignment operators are right-associative, so you can write:\n\n```\na = b = 5; // same as writing a = (b = 5);\n```\n\nwith the expected result that `a` and `b` get the value 5. This is because the assignment operator returns the value that is assigned. First, `b` is set to 5. Then the `a` is also set to 5 — the return value of `b = 5`, a.k.a. right operand of the assignment.\n\nAs another example, the unique exponentiation operator has right-associativity, whereas other arithmetic operators have left-associativity.\n\n```\nconst a = 4 ** 3 ** 2; // Same as 4 ** (3 ** 2); evaluates to 262144\nconst b = 4 / 3 / 2; // Same as (4 / 3) / 2; evaluates to 0.6666...\n```\n\nOperators are first grouped by precedence, and then, for adjacent operators that have the same precedence, by associativity. So, when mixing division and exponentiation, the exponentiation always comes before the division. For example, `2 ** 3 / 3 ** 2` results in 0.8888888888888888 because it is the same as `(2 ** 3) / (3 ** 2)`.\n\nFor prefix unary operators, suppose we have the following pattern:\n\nOP1 a OP2 b\n\nwhere `OP1` is a prefix unary operator and `OP2` is a binary operator. If `OP1` has higher precedence than `OP2`, then it would be grouped as `(OP1 a) OP2 b`; otherwise, it would be `OP1 (a OP2 b)`.\n\n```\nconst a = 1;\nconst b = 2;\ntypeof a + b; // Equivalent to (typeof a) + b; result is \"number2\"\n```\n\nIf the unary operator is on the second operand:\n\na OP2 OP1 b\n\nThen the binary operator `OP2` must have lower precedence than the unary operator `OP1` for it to be grouped as `a OP2 (OP1 b)`. For example, the following is invalid:\n\n```\nfunction* foo() {\n  a + yield 1;\n}\n```\n\nBecause `+` has higher precedence than [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield), this would become `(a + yield) 1` — but because `yield` is a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords) in generator functions, this would be a syntax error. Luckily, most unary operators have higher precedence than binary operators and do not suffer from this pitfall.\n\nIf we have two prefix unary operators:\n\nOP1 OP2 a\n\nThen the unary operator closer to the operand, `OP2`, must have higher precedence than `OP1` for it to be grouped as `OP1 (OP2 a)`. It's possible to get it the other way and end up with `(OP1 OP2) a`:\n\n```\nasync function* foo() {\n  await yield 1;\n}\n```\n\nBecause [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) has higher precedence than [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield), this would become `(await yield) 1`, which is awaiting an identifier called `yield`, and a syntax error. Similarly, if you have `new !A;`, because `!` has lower precedence than `new`, this would become `(new !) A`, which is obviously invalid. (This code looks nonsensical to write anyway, since `!A` always produces a boolean, not a constructor function.)\n\nFor postfix unary operators (namely, `++` and `--`), the same rules apply. Luckily, both operators have higher precedence than any binary operator, so the grouping is always what you would expect. Moreover, because `++` evaluates to a _value_, not a _reference_, you can't chain multiple increments together either, as you may do in C.\n\n```\nlet a = 1;\na++++; // SyntaxError: Invalid left-hand side in postfix operation.\n```\n\nOperator precedence will be handled _recursively_. For example, consider this expression:\n\nFirst, we group operators with different precedence by decreasing levels of precedence.\n\n1.  The `**` operator has the highest precedence, so it's grouped first.\n2.  Looking around the `**` expression, it has `*` on the right and `+` on the left. `*` has higher precedence, so it's grouped first. `*` and `/` have the same precedence, so we group them together for now.\n3.  Looking around the `*`/`/` expression grouped in 2, because `+` has higher precedence than `>>`, the former is grouped.\n\n```\n   (1 + ( (2 ** 3) * 4 / 5) ) >> 6\n// │    │ └─ 1. ─┘        │ │\n// │    └────── 2. ───────┘ │\n// └────────── 3. ──────────┘\n```\n\nWithin the `*`/`/` group, because they are both left-associative, the left operand would be grouped.\n\n```\n   (1 + ( ( (2 ** 3) * 4 ) / 5) ) >> 6\n// │    │ │ └─ 1. ─┘     │    │ │\n// │    └─│─────── 2. ───│────┘ │\n// └──────│───── 3. ─────│──────┘\n//        └───── 4. ─────┘\n```\n\nNote that operator precedence and associativity only affect the order of evaluation of _operators_ (the implicit grouping), but not the order of evaluation of _operands_. The operands are always evaluated from left-to-right. The higher-precedence expressions are always evaluated first, and their results are then composed according to the order of operator precedence.\n\n```\nfunction echo(name, num) {\n  console.log(`Evaluating the ${name} side`);\n  return num;\n}\n// Exponentiation operator (**) is right-associative,\n// but all call expressions (echo()), which have higher precedence,\n// will be evaluated before ** does\nconsole.log(echo(\"left\", 4) ** echo(\"middle\", 3) ** echo(\"right\", 2));\n// Evaluating the left side\n// Evaluating the middle side\n// Evaluating the right side\n// 262144\n\n// Exponentiation operator (**) has higher precedence than division (/),\n// but evaluation always starts with the left operand\nconsole.log(echo(\"left\", 4) / echo(\"middle\", 3) ** echo(\"right\", 2));\n// Evaluating the left side\n// Evaluating the middle side\n// Evaluating the right side\n// 0.4444444444444444\n```\n\nIf you are familiar with binary trees, think about it as a [post-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#Post-order,_LRN).\n\n                /\n       ┌────────┴────────┐\necho(\"left\", 4)         \\*\\*\n                ┌────────┴────────┐\n        echo(\"middle\", 3)  echo(\"right\", 2)\n\nAfter all operators have been properly grouped, the binary operators would form a binary tree. Evaluation starts from the outermost group — which is the operator with the lowest precedence (`/` in this case). The left operand of this operator is first evaluated, which may be composed of higher-precedence operators (such as a call expression `echo(\"left\", 4)`). After the left operand has been evaluated, the right operand is evaluated in the same fashion. Therefore, all leaf nodes — the `echo()` calls — would be visited left-to-right, regardless of the precedence of operators joining them.\n\n## [Short-circuiting](#short-circuiting)\n\nIn the previous section, we said \"the higher-precedence expressions are always evaluated first\" — this is generally true, but it has to be amended with the acknowledgement of _short-circuiting_, in which case an operand may not be evaluated at all.\n\nShort-circuiting is jargon for conditional evaluation. For example, in the expression `a && (b + c)`, if `a` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy), then the sub-expression `(b + c)` will not even get evaluated, even if it is grouped and therefore has higher precedence than `&&`. We could say that the logical AND operator (`&&`) is \"short-circuited\". Along with logical AND, other short-circuited operators include logical OR (`||`), nullish coalescing (`??`), and optional chaining (`?.`).\n\n```\na || (b * c); // evaluate `a` first, then produce `a` if `a` is \"truthy\"\na && (b < c); // evaluate `a` first, then produce `a` if `a` is \"falsy\"\na ?? (b || c); // evaluate `a` first, then produce `a` if `a` is not `null` and not `undefined`\na?.b.c; // evaluate `a` first, then produce `undefined` if `a` is `null` or `undefined`\n```\n\nWhen evaluating a short-circuited operator, the left operand is always evaluated. The right operand will only be evaluated if the left operand cannot determine the result of the operation.\n\n**Note:** The behavior of short-circuiting is baked in these operators. Other operators would _always_ evaluate both operands, regardless if that's actually useful — for example, `NaN * foo()` will always call `foo`, even when the result would never be something other than `NaN`.\n\nThe previous model of a post-order traversal still stands. However, after the left subtree of a short-circuiting operator has been visited, the language will decide if the right operand needs to be evaluated. If not (for example, because the left operand of `||` is already truthy), the result is directly returned without visiting the right subtree.\n\nConsider this case:\n\n```\nfunction A() { console.log('called A'); return false; }\nfunction B() { console.log('called B'); return false; }\nfunction C() { console.log('called C'); return true; }\n\nconsole.log(C() || B() && A());\n\n// Logs:\n// called C\n// true\n```\n\nOnly `C()` is evaluated, despite `&&` having higher precedence. This does not mean that `||` has higher precedence in this case — it's exactly _because_ `(B() && A())` has higher precedence that causes it to be neglected as a whole. If it's re-arranged as:\n\n```\nconsole.log(A() && C() || B());\n// Logs:\n// called A\n// called B\n// false\n```\n\nThen the short-circuiting effect of `&&` would only prevent `C()` from being evaluated, but because `A() && C()` as a whole is `false`, `B()` would still be evaluated.\n\nHowever, note that short-circuiting does not change the final evaluation outcome. It only affects the evaluation of _operands_, not how _operators_ are grouped — if evaluation of operands doesn't have side effects (for example, logging to the console, assigning to variables, throwing an error), short-circuiting would not be observable at all.\n\nThe assignment counterparts of these operators ([`&&=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment), [`||=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment), [`??=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment)) are short-circuited as well. They are short-circuited in a way that the assignment does not happen at all.\n\n## [Table](#table)\n\nThe following table lists operators in order from highest precedence (18) to lowest precedence (1).\n\nSeveral general notes about the table:\n\n1.  Not all syntax included here are \"operators\" in the strict sense. For example, spread `...` and arrow `=>` are typically not regarded as operators. However, we still included them to show how tightly they bind compared to other operators/expressions.\n2.  Some operators have certain operands that require expressions narrower than those produced by higher-precedence operators. For example, the right-hand side of member access `.` (precedence 17) must be an identifier instead of a grouped expression. The left-hand side of arrow `=>` (precedence 2) must be an arguments list or a single identifier instead of some random expression.\n3.  Some operators have certain operands that accept expressions wider than those produced by higher-precedence operators. For example, the bracket-enclosed expression of bracket notation `[ … ]` (precedence 17) can be any expression, even comma (precedence 1) joined ones. These operators act as if that operand is \"automatically grouped\". In this case we will omit the associativity.\n\n| Precedence | Associativity | Individual operators | Notes |\n| --- | --- | --- | --- |\n| 18: grouping | n/a | [Grouping](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping)  <br>`(x)` | \\[1\\] |\n| 17: access and call | left-to-right | [Member access](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#dot_notation)  <br>`x.y` | \\[2\\] |\n| [Optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)  <br>`x?.y` |\n| n/a | [Computed member access](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation)  <br>`x[y]` | \\[3\\] |\n| [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) with argument list  <br>`new x(y)` | \\[4\\] |\n| [Function call](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions)  <br>`x(y)` |\n| [`import(x)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) |\n| 16: new | n/a | [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) without argument list  <br>`new x` |\n| 15: postfix operators | n/a | [Postfix increment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment)  <br>`x++` | \\[5\\] |\n| [Postfix decrement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement)  <br>`x--` |\n| 14: prefix operators | n/a | [Prefix increment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment)  <br>`++x` | \\[6\\] |\n| [Prefix decrement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement)  <br>`--x` |\n| [Logical NOT](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT)  <br>`!x` |\n| [Bitwise NOT](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT)  <br>`~x` |\n| [Unary plus](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus)  <br>`+x` |\n| [Unary negation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation)  <br>`-x` |\n| [`typeof x`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) |\n| [`void x`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void) |\n| [`delete x`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) | \\[7\\] |\n| [`await x`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) |\n| 13: exponentiation | right-to-left | [Exponentiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation)  <br>`x ** y` | \\[8\\] |\n| 12: multiplicative operators | left-to-right | [Multiplication](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication)  <br>`x * y` |\n| [Division](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division)  <br>`x / y` |\n| [Remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)  <br>`x % y` |\n| 11: additive operators | left-to-right | [Addition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition)  <br>`x + y` |\n| [Subtraction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction)  <br>`x - y` |\n| 10: bitwise shift | left-to-right | [Left shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift)  <br>`x << y` |\n| [Right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift)  <br>`x >> y` |\n| [Unsigned right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift)  <br>`x >>> y` |\n| 9: relational operators | left-to-right | [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than)  <br>`x < y` |\n| [Less than or equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal)  <br>`x <= y` |\n| [Greater than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than)  <br>`x > y` |\n| [Greater than or equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal)  <br>`x >= y` |\n| [`x in y`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) |\n| [`x instanceof y`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) |\n| 8: equality operators | left-to-right | [Equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality)  <br>`x == y` |\n| [Inequality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality)  <br>`x != y` |\n| [Strict equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)  <br>`x === y` |\n| [Strict inequality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality)  <br>`x !== y` |\n| 7: bitwise AND | left-to-right | [Bitwise AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND)  <br>`x & y` |\n| 6: bitwise XOR | left-to-right | [Bitwise XOR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR)  <br>`x ^ y` |\n| 5: bitwise OR | left-to-right | [Bitwise OR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR)  <br>`x \\| y` |\n| 4: logical AND | left-to-right | [Logical AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND)  <br>`x && y` |\n| 3: logical OR, nullish coalescing | left-to-right | [Logical OR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR)  <br>`x \\| y` |\n| [Nullish coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing)  <br>`x ?? y` | \\[9\\] |\n| 2: assignment and miscellaneous | right-to-left | [Assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)  <br>`x = y` | \\[10\\] |\n| [Addition assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment)  <br>`x += y` |\n| [Subtraction assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment)  <br>`x -= y` |\n| [Exponentiation assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment)  <br>`x **= y` |\n| [Multiplication assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment)  <br>`x *= y` |\n| [Division assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment)  <br>`x /= y` |\n| [Remainder assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment)  <br>`x %= y` |\n| [Left shift assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment)  <br>`x <<= y` |\n| [Right shift assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment)  <br>`x >>= y` |\n| [Unsigned right shift assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment)  <br>`x >>>= y` |\n| [Bitwise AND assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment)  <br>`x &= y` |\n| [Bitwise XOR assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment)  <br>`x ^= y` |\n| [Bitwise OR assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment)  <br>`x \\|= y` |\n| [Logical AND assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment)  <br>`x &&= y` |\n| [Logical OR assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment)  <br>`x \\|= y` |\n| [Nullish coalescing assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment)  <br>`x ??= y` |\n| right-to-left | [Conditional (ternary) operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator)  <br>`x ? y : z` | \\[11\\] |\n| right-to-left | [Arrow](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)  <br>`x => y` | \\[12\\] |\n| n/a | [`yield x`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) |\n| [`yield* x`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*) |\n| [Spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)  <br>`...x` | \\[13\\] |\n| 1: comma | left-to-right | [Comma operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator)  <br>`x, y` |\n\nNotes:\n\n1.  The operand can be any expression.\n2.  The \"right-hand side\" must be an identifier.\n3.  The \"right-hand side\" can be any expression.\n4.  The \"right-hand side\" is a comma-separated list of any expression with precedence > 1 (i.e. not comma expressions). The constructor of a `new` expression cannot be an optional chain.\n5.  The operand must be a valid assignment target (identifier or property access). Its precedence means `new Foo++` is `(new Foo)++` (a syntax error) and not `new (Foo++)` (a TypeError: (Foo++) is not a constructor).\n6.  The operand must be a valid assignment target (identifier or property access).\n7.  The operand cannot be an identifier or a [private property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) access.\n8.  The left-hand side cannot have precedence 14.\n9.  The operands cannot be a logical OR `||` or logical AND `&&` operator without grouping.\n10.  The \"left-hand side\" must be a valid assignment target (identifier or property access).\n11.  The associativity means the two expressions after `?` are implicitly grouped.\n12.  The \"left-hand side\" is a single identifier or a parenthesized parameter list.\n13.  Only valid inside object literals, array literals, or argument lists.\n\nThe precedence of groups 17 and 16 may be a bit ambiguous. Here are a few examples to clarify.\n\n*   Optional chaining is always substitutable for its respective syntax without optionality (barring a few special cases where optional chaining is forbidden). For example, any place that accepts `a?.b` also accepts `a.b` and vice versa, and similarly for `a?.()`, `a()`, etc.\n*   Member expressions and computed member expressions are always substitutable for each other.\n*   Call expressions and `import()` expressions are always substitutable for each other.\n*   This leaves four classes of expressions: member access, `new` with arguments, function call, and `new` without arguments.\n    *   The \"left-hand side\" of a member access can be: a member access (`a.b.c`), `new` with arguments (`new a().b`), and function call (`a().b`).\n    *   The \"left-hand side\" of `new` with arguments can be: a member access (`new a.b()`) and `new` with arguments (`new new a()()`).\n    *   The \"left-hand side\" of a function call can be: a member access (`a.b()`), `new` with arguments (`new a()()`), and function call (`a()()`).\n    *   The operand of `new` without arguments can be: a member access (`new a.b`), `new` with arguments (`new new a()`), and `new` without arguments (`new new a`).",
    "title": "Operator precedence - JavaScript | MDN",
    "description": "Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift",
    "markdown": "# Right shift (>>) - JavaScript\n\nThe **right shift (`>>`)** operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and copies of the leftmost bit are shifted in from the left. This operation is also called \"sign-propagating right shift\" or \"arithmetic right shift\", because the sign of the resulting number is the same as the sign of the first operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `>>` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt right shift if both operands become BigInts; otherwise, it converts both operands to [32-bit integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion) and performs number right shift. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nSince the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name \"sign-propagating\".\n\nThe operator operates on the left operand's bit representation in [two's complement](https://en.wikipedia.org/wiki/Two's_complement). Consider the 32-bit binary representations of the decimal (base 10) numbers `9` and `-9`:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n    -9 (base 10): 11111111111111111111111111110111 (base 2)\n\nThe binary representation under two's complement of the negative decimal (base 10) number `-9` is formed by inverting all the bits of its opposite number, which is `9` and `00000000000000000000000000001001` in binary, and adding `1`.\n\nIn both cases, the sign of the binary number is given by its leftmost bit: for the positive decimal number `9`, the leftmost bit of the binary representation is `0`, and for the negative decimal number `-9`, the leftmost bit of the binary representation is `1`.\n\nGiven those binary representations of the decimal (base 10) numbers `9`, and `-9`:\n\n`9 >> 2` yields 2:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n\nNotice how two rightmost bits, `01`, have been shifted off, and two copies of the leftmost bit, `0` have been shifted in from the left.\n\n`-9 >> 2` yields `-3`:\n\n     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n\nNotice how two rightmost bits, `11`, have been shifted off. But as far as the leftmost bits: in this case, the leftmost bit is `1`. So two copies of that leftmost `1` bit have been shifted in from the left — which preserves the negative sign.\n\nThe binary representation `11111111111111111111111111111101` is equal to the negative decimal (base 10) number `-3`, because all negative integers are stored as [two's complements](https://en.wikipedia.org/wiki/Two's_complement), and this one can be calculated by inverting all the bits of the binary representation of the positive decimal (base 10) number `3`, which is `00000000000000000000000000000011`, and then adding one.\n\nIf the left operand is a number with more than 32 bits, it will get the most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\nBefore: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n\nThe right operand will be converted to an unsigned 32-bit integer and then taken modulo 32, so the actual shift offset will always be a positive integer between 0 and 31, inclusive. For example, `100 >> 32` is the same as `100 >> 0` (and produces `100`) because 32 modulo 32 is 0.\n\nFor BigInts, there's no truncation. Conceptually, understand positive BigInts as having an infinite number of leading `0` bits, and negative BigInts having an infinite number of leading `1` bits.\n\nRight shifting any number `x` by `0` returns `x` converted to a 32-bit integer. Do not use `>> 0` to truncate numbers to integers; use [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#using_bitwise_no-ops_to_truncate_numbers) instead.\n\n## [Examples](#examples)\n\n### [Using right shift](#using_right_shift)\n\n```\n9 >> 2; // 2\n-9 >> 2; // -3\n\n9n >> 2n; // 2n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-signed-right-shift-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-signed-right-shift-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Right shift (>>) - JavaScript | MDN",
    "description": "The right shift (>>) operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and copies of the leftmost bit are shifted in from the left. This operation is also called \"sign-propagating right shift\" or \"arithmetic right shift\", because the sign of the resulting number is the same as the sign of the first operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment",
    "markdown": "# Right shift assignment (>>=) - JavaScript\n\nThe **right shift assignment (`>>=`)** operator performs [right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x >>= y` is equivalent to `x = x >> y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Using right shift assignment](#using_right_shift_assignment)\n\n```\nlet a = 5; //   (00000000000000000000000000000101)\na >>= 2; //   1 (00000000000000000000000000000001)\n\nlet b = -5; //  (-00000000000000000000000000000101)\nb >>= 2; //  -2 (-00000000000000000000000000000010)\n\nlet c = 5n;\nc >>= 2n; // 1n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Right shift assignment (>>=) - JavaScript | MDN",
    "description": "The right shift assignment (>>=) operator performs right shift on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality",
    "markdown": "# Strict inequality (!==) - JavaScript\n\nThe **strict inequality (`!==`)** operator checks whether its two operands are not equal, returning a Boolean result. Unlike the [inequality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality) operator, the strict inequality operator always considers operands of different types to be different.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe strict inequality operator checks whether its operands are not equal. It is the negation of the [strict equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) operator so the following two lines will always give the same result:\n\nFor details of the comparison algorithm, see the page for the [strict equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) operator.\n\nLike the strict equality operator, the strict inequality operator will always consider operands of different types to be different:\n\n## [Examples](#examples)\n\n### [Comparing operands of the same type](#comparing_operands_of_the_same_type)\n\n```\n\"hello\" !== \"hello\"; // false\n\"hello\" !== \"hola\"; // true\n\n3 !== 3; // false\n3 !== 4; // true\n\ntrue !== true; // false\ntrue !== false; // true\n\nnull !== null; // false\n```\n\n### [Comparing operands of different types](#comparing_operands_of_different_types)\n\n```\n\"3\" !== 3; // true\ntrue !== 1; // true\nnull !== undefined; // true\n```\n\n### [Comparing objects](#comparing_objects)\n\n```\nconst object1 = {\n  key: \"value\",\n};\n\nconst object2 = {\n  key: \"value\",\n};\n\nconsole.log(object1 !== object2); // true\nconsole.log(object1 !== object1); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-equality-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-equality-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Strict inequality (!==) - JavaScript | MDN",
    "description": "The strict inequality (!==) operator checks whether its two operands are\n  not equal, returning a Boolean result. Unlike the inequality\n  operator, the strict inequality operator always considers operands of different types to\n  be different.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment",
    "markdown": "# Subtraction assignment (-=) - JavaScript\n\nThe **subtraction assignment (`-=`)** operator performs [subtraction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x -= y` is equivalent to `x = x - y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Subtraction assignment using numbers](#subtraction_assignment_using_numbers)\n\n```\nlet bar = 5;\n\nbar -= 2; // 3\n```\n\nOther non-BigInt values are coerced to numbers:\n\n### [Subtraction assignment using BigInts](#subtraction_assignment_using_bigints)\n\n```\nlet foo = 3n;\nfoo -= 2n; // 1n\nfoo -= 1; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Subtraction assignment (-=) - JavaScript | MDN",
    "description": "The subtraction assignment (-=) operator performs subtraction on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super",
    "markdown": "# super - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`super`** keyword is used to access properties on an object literal or class's \\[\\[Prototype\\]\\], or invoke a superclass's constructor.\n\nThe `super.prop` and `super[expr]` expressions are valid in any [method definition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions) in both [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) and [object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer). The `super(...args)` expression is valid in class constructors.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsuper([arguments]) // calls the parent constructor.\nsuper.propertyOnParent\nsuper[expression]\n```\n\n## [Description](#description)\n\nThe `super` keyword can be used in two ways: as a \"function call\" (`super(...args)`), or as a \"property lookup\" (`super.prop` and `super[expr]`).\n\n**Note:** `super` is a keyword and these are special syntactic constructs. `super` is not a variable that points to the prototype object. Attempting to read `super` itself is a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).\n\n```\nconst child = {\n  myParent() {\n    console.log(super); // SyntaxError: 'super' keyword unexpected here\n  },\n};\n```\n\nIn the [constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor) body of a derived class (with `extends`), the `super` keyword may appear as a \"function call\" (`super(...args)`), which must be called before the `this` keyword is used, and before the constructor returns. It calls the parent class's constructor and binds the parent class's public fields, after which the derived class's constructor can further access and modify `this`.\n\nThe \"property lookup\" form can be used to access methods and properties of an object literal's or class's \\[\\[Prototype\\]\\]. Within a class's body, the reference of `super` can be either the superclass's constructor itself, or the constructor's `prototype`, depending on whether the execution context is instance creation or class initialization. See the Examples section for more details.\n\nNote that the reference of `super` is determined by the class or object literal `super` was declared in, not the object the method is called on. Therefore, unbinding or re-binding a method doesn't change the reference of `super` in it (although they do change the reference of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)). You can see `super` as a variable in the class or object literal scope, which the methods create a closure over. (But also beware that it's not actually a variable, as explained above.)\n\nWhen setting properties through `super`, the property is set on `this` instead.\n\n## [Examples](#examples)\n\n### [Using super in classes](#using_super_in_classes)\n\nThis code snippet is taken from the [classes sample](https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html) ([live demo](https://googlechrome.github.io/samples/classes-es6/index.html)). Here `super()` is called to avoid duplicating the constructor parts' that are common between `Rectangle` and `Square`.\n\n```\nclass Rectangle {\n  constructor(height, width) {\n    this.name = \"Rectangle\";\n    this.height = height;\n    this.width = width;\n  }\n  sayName() {\n    console.log(`Hi, I am a ${this.name}.`);\n  }\n  get area() {\n    return this.height * this.width;\n  }\n  set area(value) {\n    this._area = value;\n  }\n}\n\nclass Square extends Rectangle {\n  constructor(length) {\n    // Here, it calls the parent class's constructor with lengths\n    // provided for the Rectangle's width and height\n    super(length, length);\n\n    // Note: In derived classes, super() must be called before you\n    // can use 'this'. Moving this to the top causes a ReferenceError.\n    this.name = \"Square\";\n  }\n}\n```\n\n### [Super-calling static methods](#super-calling_static_methods)\n\nYou are also able to call super on [static](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) methods.\n\n```\nclass Rectangle {\n  static logNbSides() {\n    return \"I have 4 sides\";\n  }\n}\n\nclass Square extends Rectangle {\n  static logDescription() {\n    return `${super.logNbSides()} which are all equal`;\n  }\n}\nSquare.logDescription(); // 'I have 4 sides which are all equal'\n```\n\n### [Accessing super in class field declaration](#accessing_super_in_class_field_declaration)\n\n`super` can also be accessed during class field initialization. The reference of `super` depends on whether the current field is an instance field or a static field.\n\n```\nclass Base {\n  static baseStaticField = 90;\n  baseMethod() {\n    return 10;\n  }\n}\n\nclass Extended extends Base {\n  extendedField = super.baseMethod(); // 10\n  static extendedStaticField = super.baseStaticField; // 90\n}\n```\n\nNote that instance fields are set on the instance instead of the constructor's `prototype`, so you can't use `super` to access the instance field of a superclass.\n\n```\nclass Base {\n  baseField = 10;\n}\n\nclass Extended extends Base {\n  extendedField = super.baseField; // undefined\n}\n```\n\nHere, `extendedField` is `undefined` instead of 10, because `baseField` is defined as an own property of the `Base` instance, instead of `Base.prototype`. `super`, in this context, only looks up properties on `Base.prototype`, because that's the \\[\\[Prototype\\]\\] of `Extended.prototype`.\n\n### [Deleting super properties will throw an error](#deleting_super_properties_will_throw_an_error)\n\nYou cannot use the [`delete` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) and `super.prop` or `super[expr]` to delete a parent class' property — it will throw a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError).\n\n```\nclass Base {\n  foo() {}\n}\nclass Derived extends Base {\n  delete() {\n    delete super.foo; // this is bad\n  }\n}\n\nnew Derived().delete(); // ReferenceError: invalid delete involving 'super'.\n```\n\n### [Using super.prop in object literals](#using_super.prop_in_object_literals)\n\nSuper can also be used in the [object initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) notation. In this example, two objects define a method. In the second object, `super` calls the first object's method. This works with the help of [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) with which we are able to set the prototype of `obj2` to `obj1`, so that `super` is able to find `method1` on `obj1`.\n\n```\nconst obj1 = {\n  method1() {\n    console.log(\"method 1\");\n  },\n};\n\nconst obj2 = {\n  method2() {\n    super.method1();\n  },\n};\n\nObject.setPrototypeOf(obj2, obj1);\nobj2.method2(); // Logs \"method 1\"\n```\n\n### [Methods that read super.prop do not behave differently when bound to other objects](#methods_that_read_super.prop_do_not_behave_differently_when_bound_to_other_objects)\n\nAccessing `super.x` behaves like `Reflect.get(Object.getPrototypeOf(objectLiteral), \"x\", this)`, which means the property is always seeked on the object literal/class declaration's prototype, and unbinding and re-binding a method won't change the reference of `super`.\n\n```\nclass Base {\n  baseGetX() {\n    return 1;\n  }\n}\nclass Extended extends Base {\n  getX() {\n    return super.baseGetX();\n  }\n}\n\nconst e = new Extended();\nconsole.log(e.getX()); // 1\nconst { getX } = e;\nconsole.log(getX()); // 1\n```\n\nThe same happens in object literals.\n\n```\nconst parent1 = { prop: 1 };\nconst parent2 = { prop: 2 };\n\nconst child = {\n  myParent() {\n    console.log(super.prop);\n  },\n};\n\nObject.setPrototypeOf(child, parent1);\nchild.myParent(); // Logs \"1\"\n\nconst myParent = child.myParent;\nmyParent(); // Still logs \"1\"\n\nconst anotherChild = { __proto__: parent2, myParent };\nanotherChild.myParent(); // Still logs \"1\"\n```\n\nOnly resetting the entire inheritance chain will change the reference of `super`.\n\n```\nclass Base {\n  baseGetX() {\n    return 1;\n  }\n  static staticBaseGetX() {\n    return 3;\n  }\n}\nclass AnotherBase {\n  baseGetX() {\n    return 2;\n  }\n  static staticBaseGetX() {\n    return 4;\n  }\n}\nclass Extended extends Base {\n  getX() {\n    return super.baseGetX();\n  }\n  static staticGetX() {\n    return super.staticBaseGetX();\n  }\n}\n\nconst e = new Extended();\n// Reset instance inheritance\nObject.setPrototypeOf(Extended.prototype, AnotherBase.prototype);\nconsole.log(e.getX()); // Logs \"2\" instead of \"1\", because the prototype chain has changed\nconsole.log(Extended.staticGetX()); // Still logs \"3\", because we haven't modified the static part yet\n// Reset static inheritance\nObject.setPrototypeOf(Extended, AnotherBase);\nconsole.log(Extended.staticGetX()); // Now logs \"4\"\n```\n\n### [Calling methods from super](#calling_methods_from_super)\n\nWhen calling `super.prop` as a function, the `this` value inside the `prop` function is the current `this`, not the object that `super` points to. For example, the `super.getName()` call logs `\"Extended\"`, despite the code looking like it's equivalent to `Base.getName()`.\n\n```\nclass Base {\n  static getName() {\n    console.log(this.name);\n  }\n}\n\nclass Extended extends Base {\n  static getName() {\n    super.getName();\n  }\n}\n\nExtended.getName(); // Logs \"Extended\"\n```\n\nThis is especially important when interacting with [static private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#private_static_fields).\n\n### [Setting super.prop sets the property on this instead](#setting_super.prop_sets_the_property_on_this_instead)\n\nSetting properties of `super`, such as `super.x = 1`, behaves like `Reflect.set(Object.getPrototypeOf(objectLiteral), \"x\", 1, this)`. This is one of the cases where understanding `super` as simply \"reference of the prototype object\" falls short, because it actually sets the property on `this` instead.\n\n```\nclass A {}\nclass B extends A {\n  setX() {\n    super.x = 1;\n  }\n}\n\nconst b = new B();\nb.setX();\nconsole.log(b); // B { x: 1 }\nconsole.log(Object.hasOwn(b, \"x\")); // true\n```\n\n`super.x = 1` will look for the property descriptor of `x` on `A.prototype` (and invoke the setters defined there), but the `this` value will be set to `this`, which is `b` in this context. You can read [`Reflect.set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set) for more details on the case when `target` and `receiver` differ.\n\nThis means that while methods that _get_ `super.prop` are usually not susceptible to changes in the `this` context, those that _set_ `super.prop` are.\n\n```\n/* Reusing same declarations as above */\n\nconst b2 = new B();\nb2.setX.call(null); // TypeError: Cannot assign to read only property 'x' of object 'null'\n```\n\nHowever, `super.x = 1` still consults the property descriptor of the prototype object, which means you cannot rewrite non-writable properties, and setters will be invoked.\n\n```\nclass X {\n  constructor() {\n    // Create a non-writable property\n    Object.defineProperty(this, \"prop\", {\n      configurable: true,\n      writable: false,\n      value: 1,\n    });\n  }\n}\n\nclass Y extends X {\n  constructor() {\n    super();\n  }\n  foo() {\n    super.prop = 2; // Cannot overwrite the value.\n  }\n}\n\nconst y = new Y();\ny.foo(); // TypeError: \"prop\" is read-only\nconsole.log(y.prop); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-super-keyword](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-super-keyword) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "super - JavaScript | MDN",
    "description": "The super keyword is used to access properties on an object literal or class's [[Prototype]], or invoke a superclass's constructor.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality",
    "markdown": "# Strict equality (===) - JavaScript\n\nThe **strict equality (`===`)** operator checks whether its two operands are equal, returning a Boolean result. Unlike the [equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) operator, the strict equality operator always considers operands of different types to be different.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe strict equality operators (`===` and `!==`) provide the [IsStrictlyEqual](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#strict_equality_using) semantic.\n\n*   If the operands are of different types, return `false`.\n*   If both operands are objects, return `true` only if they refer to the same object.\n*   If both operands are `null` or both operands are `undefined`, return `true`.\n*   If either operand is `NaN`, return `false`.\n*   Otherwise, compare the two operand's values:\n    *   Numbers must have the same numeric values. `+0` and `-0` are considered to be the same value.\n    *   Strings must have the same characters in the same order.\n    *   Booleans must be both `true` or both `false`.\n\nThe most notable difference between this operator and the [equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) (`==`) operator is that if the operands are of different types, the `==` operator attempts to convert them to the same type before comparing.\n\n## [Examples](#examples)\n\n### [Comparing operands of the same type](#comparing_operands_of_the_same_type)\n\n```\n\"hello\" === \"hello\"; // true\n\"hello\" === \"hola\"; // false\n\n3 === 3; // true\n3 === 4; // false\n\ntrue === true; // true\ntrue === false; // false\n\nnull === null; // true\n```\n\n### [Comparing operands of different types](#comparing_operands_of_different_types)\n\n```\n\"3\" === 3; // false\ntrue === 1; // false\nnull === undefined; // false\n3 === new Number(3); // false\n```\n\n### [Comparing objects](#comparing_objects)\n\n```\nconst object1 = {\n  key: \"value\",\n};\n\nconst object2 = {\n  key: \"value\",\n};\n\nconsole.log(object1 === object2); // false\nconsole.log(object1 === object1); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-equality-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-equality-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Strict equality (===) - JavaScript | MDN",
    "description": "The strict equality (===) operator checks whether its two operands are\n  equal, returning a Boolean result. Unlike the equality operator,\n  the strict equality operator always considers operands of different types to be\n  different.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation",
    "markdown": "# Unary negation (-) - JavaScript\n\nThe **unary negation (`-`)** operator precedes its operand and negates it.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `-` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). It first [coerces the operand to a numeric value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the type of it. It performs BigInt negation if the operand becomes a BigInt; otherwise, it performs number negation.\n\n## [Examples](#examples)\n\n### [Negating numbers](#negating_numbers)\n\n```\nconst x = 3;\nconst y = -x;\n// y is -3; x is 3\n```\n\n### [Negating non-numbers](#negating_non-numbers)\n\nThe unary negation operator can convert a non-number into a number.\n\n```\nconst x = \"4\";\nconst y = -x;\n\n// y is -4\n```\n\nBigInts can be negated using the unary negation operator.\n\n```\nconst x = 4n;\nconst y = -x;\n\n// y is -4n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-unary-minus-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-unary-minus-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Unary negation (-) - JavaScript | MDN",
    "description": "The unary negation (-) operator precedes its operand and negates it.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction",
    "markdown": "# Subtraction (-) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **subtraction (`-`)** operator subtracts the two operands, producing their difference.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `-` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt subtraction if both operands become BigInts; otherwise, it performs number subtraction. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\n## [Examples](#examples)\n\n### [Subtraction using numbers](#subtraction_using_numbers)\n\nOther non-BigInt values are coerced to numbers:\n\n```\n\"foo\" - 3; // NaN; \"foo\" is converted to the number NaN\n5 - \"3\"; // 2; \"3\" is converted to the number 3\n```\n\n### [Subtraction using BigInts](#subtraction_using_bigints)\n\nYou cannot mix BigInt and number operands in subtraction.\n\n```\n2n - 1; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n2 - 1n; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\nTo do subtraction with a BigInt and a non-BigInt, convert either operand:\n\n```\n2n - BigInt(1); // 1n\nNumber(2n) - 1; // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-subtraction-operator-minus](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-subtraction-operator-minus) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Subtraction (-) - JavaScript | MDN",
    "description": "The subtraction (-) operator subtracts the two operands, producing their difference.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
    "markdown": "# typeof - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`typeof`** operator returns a string indicating the type of the operand's value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`operand`](#operand)\n\nAn expression representing the object or [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) whose type is to be returned.\n\n## [Description](#description)\n\nThe following table summarizes the possible return values of `typeof`. For more information about types and primitives, see also the [JavaScript data structure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) page.\n\n| Type | Result |\n| --- | --- |\n| [Undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) | `\"undefined\"` |\n| [Null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) | `\"object\"` ([reason](#typeof_null)) |\n| [Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) | `\"boolean\"` |\n| [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) | `\"number\"` |\n| [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) | `\"bigint\"` |\n| [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | `\"string\"` |\n| [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | `\"symbol\"` |\n| [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) (implements \\[\\[Call\\]\\] in ECMA-262 terms; [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class) are functions as well) | `\"function\"` |\n| Any other object | `\"object\"` |\n\nThis list of values is exhaustive. No spec-compliant engines are reported to produce (or had historically produced) values other than those listed.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\n```\n// Numbers\ntypeof 37 === \"number\";\ntypeof 3.14 === \"number\";\ntypeof 42 === \"number\";\ntypeof Math.LN2 === \"number\";\ntypeof Infinity === \"number\";\ntypeof NaN === \"number\"; // Despite being \"Not-A-Number\"\ntypeof Number(\"1\") === \"number\"; // Number tries to parse things into numbers\ntypeof Number(\"shoe\") === \"number\"; // including values that cannot be type coerced to a number\n\ntypeof 42n === \"bigint\";\n\n// Strings\ntypeof \"\" === \"string\";\ntypeof \"bla\" === \"string\";\ntypeof `template literal` === \"string\";\ntypeof \"1\" === \"string\"; // note that a number within a string is still typeof string\ntypeof typeof 1 === \"string\"; // typeof always returns a string\ntypeof String(1) === \"string\"; // String converts anything into a string, safer than toString\n\n// Booleans\ntypeof true === \"boolean\";\ntypeof false === \"boolean\";\ntypeof Boolean(1) === \"boolean\"; // Boolean() will convert values based on if they're truthy or falsy\ntypeof !!1 === \"boolean\"; // two calls of the ! (logical NOT) operator are equivalent to Boolean()\n\n// Symbols\ntypeof Symbol() === \"symbol\";\ntypeof Symbol(\"foo\") === \"symbol\";\ntypeof Symbol.iterator === \"symbol\";\n\n// Undefined\ntypeof undefined === \"undefined\";\ntypeof declaredButUndefinedVariable === \"undefined\";\ntypeof undeclaredVariable === \"undefined\";\n\n// Objects\ntypeof { a: 1 } === \"object\";\n\n// use Array.isArray or Object.prototype.toString.call\n// to differentiate regular objects from arrays\ntypeof [1, 2, 4] === \"object\";\n\ntypeof new Date() === \"object\";\ntypeof /regex/ === \"object\";\n\n// The following are confusing, dangerous, and wasteful. Avoid them.\ntypeof new Boolean(true) === \"object\";\ntypeof new Number(1) === \"object\";\ntypeof new String(\"abc\") === \"object\";\n\n// Functions\ntypeof function () {} === \"function\";\ntypeof class C {} === \"function\";\ntypeof Math.sin === \"function\";\n```\n\n### [typeof null](#typeof_null)\n\n```\n// This stands since the beginning of JavaScript\ntypeof null === \"object\";\n```\n\nIn the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was `0`. `null` was represented as the NULL pointer (`0x00` in most platforms). Consequently, `null` had `0` as type tag, hence the `typeof` return value `\"object\"`. ([reference](https://2ality.com/2013/10/typeof-null.html))\n\nA fix was proposed for ECMAScript (via an opt-in), but [was rejected](https://web.archive.org/web/20160331031419/http://wiki.ecmascript.org:80/doku.php?id=harmony:typeof_null). It would have resulted in `typeof null === \"null\"`.\n\n### [Using new operator](#using_new_operator)\n\nAll constructor functions called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) will return non-primitives (`\"object\"` or `\"function\"`). Most return objects, with the notable exception being [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function), which returns a function.\n\n```\nconst str = new String(\"String\");\nconst num = new Number(100);\n\ntypeof str; // \"object\"\ntypeof num; // \"object\"\n\nconst func = new Function();\n\ntypeof func; // \"function\"\n```\n\n### [Need for parentheses in syntax](#need_for_parentheses_in_syntax)\n\nThe `typeof` operator has higher [precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) than binary operators like addition (`+`). Therefore, parentheses are needed to evaluate the type of an addition result.\n\n```\n// Parentheses can be used for determining the data type of expressions.\nconst someData = 99;\n\ntypeof someData + \" Wisen\"; // \"number Wisen\"\ntypeof (someData + \" Wisen\"); // \"string\"\n```\n\n### [Interaction with undeclared and uninitialized variables](#interaction_with_undeclared_and_uninitialized_variables)\n\n`typeof` is generally always guaranteed to return a string for any operand it is supplied with. Even with undeclared identifiers, `typeof` will return `\"undefined\"` instead of throwing an error.\n\n```\ntypeof undeclaredVariable; // \"undefined\"\n```\n\nHowever, using `typeof` on lexical declarations ([`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), and [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class)) in the same block before the place of declaration will throw a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError). Block scoped variables are in a _[temporal dead zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz)_ from the start of the block until the initialization is processed, during which it will throw an error if accessed.\n\n```\ntypeof newLetVariable; // ReferenceError\ntypeof newConstVariable; // ReferenceError\ntypeof newClass; // ReferenceError\n\nlet newLetVariable;\nconst newConstVariable = \"hello\";\nclass newClass {}\n```\n\n### [Exceptional behavior of document.all](#exceptional_behavior_of_document.all)\n\nAll current browsers expose a non-standard host object [`document.all`](https://developer.mozilla.org/en-US/docs/Web/API/Document/all) with type `undefined`.\n\n```\ntypeof document.all === \"undefined\";\n```\n\nAlthough `document.all` is also [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) and [loosely equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) to `undefined`, it is not [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). The case of `document.all` having type `\"undefined\"` is classified in the web standards as a \"willful violation\" of the original ECMAScript standard for web compatibility.\n\n### [Custom method that gets a more specific type](#custom_method_that_gets_a_more_specific_type)\n\n`typeof` is very useful, but it's not as versatile as might be required. For example, `typeof []` is `\"object\"`, as well as `typeof new Date()`, `typeof /abc/`, etc.\n\nFor greater specificity in checking types, here we present a custom `type(value)` function, which mostly mimics the behavior of `typeof`, but for non-primitives (i.e. objects and functions), it returns a more granular type name where possible.\n\n```\nfunction type(value) {\n  if (value === null) {\n    return \"null\";\n  }\n  const baseType = typeof value;\n  // Primitive types\n  if (![\"object\", \"function\"].includes(baseType)) {\n    return baseType;\n  }\n\n  // Symbol.toStringTag often specifies the \"display name\" of the\n  // object's class. It's used in Object.prototype.toString().\n  const tag = value[Symbol.toStringTag];\n  if (typeof tag === \"string\") {\n    return tag;\n  }\n\n  // If it's a function whose source code starts with the \"class\" keyword\n  if (\n    baseType === \"function\" &&\n    Function.prototype.toString.call(value).startsWith(\"class\")\n  ) {\n    return \"class\";\n  }\n\n  // The name of the constructor; for example `Array`, `GeneratorFunction`,\n  // `Number`, `String`, `Boolean` or `MyCustomClass`\n  const className = value.constructor.name;\n  if (typeof className === \"string\" && className !== \"\") {\n    return className;\n  }\n\n  // At this point there's no robust way to get the type of value,\n  // so we use the base implementation.\n  return baseType;\n}\n```\n\nFor checking potentially non-existent variables that would otherwise throw a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError), use `typeof nonExistentVar === \"undefined\"` because this behavior cannot be mimicked with custom code.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typeof-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-typeof-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "typeof - JavaScript | MDN",
    "description": "The typeof operator returns a string indicating the type of the operand's value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment",
    "markdown": "# Unsigned right shift assignment (>>>=) - JavaScript\n\nThe **unsigned right shift assignment (`>>>=`)** operator performs [unsigned right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x >>>= y` is equivalent to `x = x >>> y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Using unsigned right shift assignment](#using_unsigned_right_shift_assignment)\n\n```\nlet a = 5; // (00000000000000000000000000000101)\na >>>= 2; // 1 (00000000000000000000000000000001)\n\nlet b = -5; // (-00000000000000000000000000000101)\nb >>>= 2; // 1073741822 (00111111111111111111111111111110)\n\nlet c = 5n;\nc >>>= 2n; // 1n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Unsigned right shift assignment (>>>=) - JavaScript | MDN",
    "description": "The unsigned right shift assignment (>>>=) operator performs unsigned right shift on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
    "markdown": "# this - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`this`** keyword refers to the context where a piece of code, such as a function's body, is supposed to run. Most typically, it is used in object methods, where `this` refers to the object that the method is attached to, thus allowing the same method to be reused on different objects.\n\nThe value of `this` in JavaScript depends on how a function is invoked (runtime [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding)), not how it is defined. When a regular function is invoked as a method of an object (`obj.method()`), `this` points to that object. When invoked as a standalone function (not attached to an object: `func()`), `this` typically refers to the [global object](https://developer.mozilla.org/en-US/docs/Glossary/Global_object) (in non-strict mode) or `undefined` (in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)). The [`Function.prototype.bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) method can create a function whose `this` binding doesn't change, and methods `apply()` and `call()` can also set the `this` value for a particular call.\n\n[Arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) differ in their handling of `this`: they inherit `this` from the parent scope at the time they are defined. This behavior makes arrow functions particularly useful for callbacks and preserving context. However, arrow functions do not have their own `this` binding. Therefore, their `this` value cannot be set by `bind()`, `apply()` or `call()` methods, nor does it point to the current object in object methods.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Value](#value)\n\nIn non–strict mode, `this` is always a reference to an object. In strict mode, it can be any value. For more information on how the value is determined, see the description below.\n\n## [Description](#description)\n\nThe value of `this` depends on in which context it appears: function, class, or global.\n\n### [Function context](#function_context)\n\nInside a function, the value of `this` depends on how the function is called. Think about `this` as a hidden parameter of a function — just like the parameters declared in the function definition, `this` is a binding that the language creates for you when the function body is evaluated.\n\nFor a regular function (not an arrow function, bound function, etc.), the value of `this` is the object that the function is accessed on. In other words, if the function call is in the form `obj.f()`, then `this` refers to `obj`. For example:\n\n```\nfunction getThis() {\n  return this;\n}\n\nconst obj1 = { name: \"obj1\" };\nconst obj2 = { name: \"obj2\" };\n\nobj1.getThis = getThis;\nobj2.getThis = getThis;\n\nconsole.log(obj1.getThis()); // { name: 'obj1', getThis: [Function: getThis] }\nconsole.log(obj2.getThis()); // { name: 'obj2', getThis: [Function: getThis] }\n```\n\nNote how the function is the same, but based on how it's invoked, the value of `this` is different. This is analogous to how function parameters work.\n\nThe value of `this` is not the object that has the function as an own property, but the object that is used to call the function. You can prove this by calling a method of an object up in the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\n```\nconst obj3 = {\n  __proto__: obj1,\n  name: \"obj3\",\n};\n\nconsole.log(obj3.getThis()); // { name: 'obj3' }\n```\n\nThe value of `this` always changes based on how a function is called, even when the function was defined on an object at creation:\n\n```\nconst obj4 = {\n  name: \"obj4\",\n  getThis() {\n    return this;\n  },\n};\n\nconst obj5 = { name: \"obj5\" };\n\nobj5.getThis = obj4.getThis;\nconsole.log(obj5.getThis()); // { name: 'obj5', getThis: [Function: getThis] }\n```\n\nIf the value that the method is accessed on is a primitive, `this` will be a primitive value as well — but only if the function is in strict mode.\n\n```\nfunction getThisStrict() {\n  \"use strict\"; // Enter strict mode\n  return this;\n}\n\n// Only for demonstration — you should not mutate built-in prototypes\nNumber.prototype.getThisStrict = getThisStrict;\nconsole.log(typeof (1).getThisStrict()); // \"number\"\n```\n\nIf the function is called without being accessed on anything, `this` will be `undefined` — but only if the function is in strict mode.\n\n```\nconsole.log(typeof getThisStrict()); // \"undefined\"\n```\n\nIn non-strict mode, a special process called [`this` substitution](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#no_this_substitution) ensures that the value of `this` is always an object. This means:\n\n*   If a function is called with `this` set to `undefined` or `null`, `this` gets substituted with [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis).\n*   If the function is called with `this` set to a primitive value, `this` gets substituted with the primitive value's wrapper object.\n\n```\nfunction getThis() {\n  return this;\n}\n\n// Only for demonstration — you should not mutate built-in prototypes\nNumber.prototype.getThis = getThis;\nconsole.log(typeof (1).getThis()); // \"object\"\nconsole.log(getThis() === globalThis); // true\n```\n\nIn typical function calls, `this` is implicitly passed like a parameter through the function's prefix (the part before the dot). You can also explicitly set the value of `this` using the [`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply), or [`Reflect.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply) methods. Using [`Function.prototype.bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind), you can create a new function with a specific value of `this` that doesn't change regardless of how the function is called. When using these methods, the `this` substitution rules above still apply if the function is non-strict.\n\n#### Callbacks\n\nWhen a function is passed as a callback, the value of `this` depends on how the callback is called, which is determined by the implementor of the API. Callbacks are _typically_ called with a `this` value of `undefined` (calling it directly without attaching it to any object), which means if the function is non–strict, the value of `this` is the global object ([`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis)). This is the case for [iterative array methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods), the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor, etc.\n\n```\nfunction logThis() {\n  \"use strict\";\n  console.log(this);\n}\n\n[1, 2, 3].forEach(logThis); // undefined, undefined, undefined\n```\n\nSome APIs allow you to set a `this` value for invocations of the callback. For example, all iterative array methods and related ones like [`Set.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach) accept an optional `thisArg` parameter.\n\n```\n[1, 2, 3].forEach(logThis, { name: \"obj\" });\n// { name: 'obj' }, { name: 'obj' }, { name: 'obj' }\n```\n\nOccasionally, a callback is called with a `this` value other than `undefined`. For example, the `reviver` parameter of [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) and the `replacer` parameter of [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) are both called with `this` set to the object that the property being parsed/serialized belongs to.\n\n#### Arrow functions\n\nIn [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), `this` retains the value of the enclosing lexical context's `this`. In other words, when evaluating an arrow function's body, the language does not create a new `this` binding.\n\nFor example, in global code, `this` is always `globalThis` regardless of strictness, because of the [global context](#global_context) binding:\n\n```\nconst globalObject = this;\nconst foo = () => this;\nconsole.log(foo() === globalObject); // true\n```\n\nArrow functions create a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) over the `this` value of its surrounding scope, which means arrow functions behave as if they are \"auto-bound\" — no matter how it's invoked, `this` is bound to what it was when the function was created (in the example above, the global object). The same applies to arrow functions created inside other functions: their `this` remains that of the enclosing lexical context. [See example below](#this_in_arrow_functions).\n\nFurthermore, when invoking arrow functions using `call()`, `bind()`, or `apply()`, the `thisArg` parameter is ignored. You can still pass other arguments using these methods, though.\n\n```\nconst obj = { name: \"obj\" };\n\n// Attempt to set this using call\nconsole.log(foo.call(obj) === globalObject); // true\n\n// Attempt to set this using bind\nconst boundFoo = foo.bind(obj);\nconsole.log(boundFoo() === globalObject); // true\n```\n\n#### Constructors\n\nWhen a function is used as a constructor (with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) keyword), its `this` is bound to the new object being constructed, no matter which object the constructor function is accessed on. The value of `this` becomes the value of the `new` expression unless the constructor returns another non–primitive value.\n\n```\nfunction C() {\n  this.a = 37;\n}\n\nlet o = new C();\nconsole.log(o.a); // 37\n\nfunction C2() {\n  this.a = 37;\n  return { a: 38 };\n}\n\no = new C2();\nconsole.log(o.a); // 38\n```\n\nIn the second example (`C2`), because an object was returned during construction, the new object that `this` was bound to gets discarded. (This essentially makes the statement `this.a = 37;` dead code. It's not exactly dead because it gets executed, but it can be eliminated with no outside effects.)\n\n#### super\n\nWhen a function is invoked in the `super.method()` form, the `this` inside the `method` function is the same value as the `this` value around the `super.method()` call, and is generally not equal to the object that `super` refers to. This is because `super.method` is not an object member access like the ones above — it's a special syntax with different binding rules. For examples, see the [`super` reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#calling_methods_from_super).\n\n### [Class context](#class_context)\n\nA [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) can be split into two contexts: static and instance. [Constructors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor), methods, and instance field initializers ([public](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) or [private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties)) belong to the instance context. [Static](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) methods, static field initializers, and [static initialization blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks) belong to the static context. The `this` value is different in each context.\n\nClass constructors are always called with `new`, so their behavior is the same as [function constructors](#constructors): the `this` value is the new instance being created. Class methods behave like methods in object literals — the `this` value is the object that the method was accessed on. If the method is not transferred to another object, `this` is generally an instance of the class.\n\nStatic methods are not properties of `this`. They are properties of the class itself. Therefore, they are generally accessed on the class, and `this` is the value of the class (or a subclass). Static initialization blocks are also evaluated with `this` set to the current class.\n\nField initializers are also evaluated in the context of the class. Instance fields are evaluated with `this` set to the instance being constructed. Static fields are evaluated with `this` set to the current class. This is why arrow functions in field initializers are [bound to the instance for instance fields and to the class for static fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#cannot_be_used_as_methods).\n\n```\nclass C {\n  instanceField = this;\n  static staticField = this;\n}\n\nconst c = new C();\nconsole.log(c.instanceField === c); // true\nconsole.log(C.staticField === C); // true\n```\n\n#### Derived class constructors\n\nUnlike base class constructors, derived constructors have no initial `this` binding. Calling [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) creates a `this` binding within the constructor and essentially has the effect of evaluating the following line of code, where `Base` is the base class:\n\n**Warning:** Referring to `this` before calling `super()` will throw an error.\n\nDerived classes must not return before calling `super()`, unless the constructor returns an object (so the `this` value is overridden) or the class has no constructor at all.\n\n```\nclass Base {}\nclass Good extends Base {}\nclass AlsoGood extends Base {\n  constructor() {\n    return { a: 5 };\n  }\n}\nclass Bad extends Base {\n  constructor() {}\n}\n\nnew Good();\nnew AlsoGood();\nnew Bad(); // ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n```\n\n### [Global context](#global_context)\n\nIn the global execution context (outside of any functions or classes; may be inside [blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) or [arrow functions](#arrow_functions) defined in the global scope), the `this` value depends on what execution context the script runs in. Like [callbacks](#callbacks), the `this` value is determined by the runtime environment (the caller).\n\nAt the top level of a script, `this` refers to [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) whether in strict mode or not. This is generally the same as the global object — for example, if the source is put inside an HTML [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) element and executed as a script, `this === window`.\n\n**Note:** `globalThis` is generally the same concept as the global object (i.e. adding properties to `globalThis` makes them global variables) — this is the case for browsers and Node — but hosts are allowed to provide a different value for `globalThis` that's unrelated to the global object.\n\n```\n// In web browsers, the window object is also the global object:\nconsole.log(this === window); // true\n\nthis.b = \"MDN\";\nconsole.log(window.b); // \"MDN\"\nconsole.log(b); // \"MDN\"\n```\n\nIf the source is loaded as a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) (for HTML, this means adding `type=\"module\"` to the `<script>` tag), `this` is always `undefined` at the top level.\n\nIf the source is executed with [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval), `this` is the same as the enclosing context for [direct eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#direct_and_indirect_eval), or `globalThis` (as if it's run in a separate global script) for indirect eval.\n\n```\nfunction test() {\n  // Direct eval\n  console.log(eval(\"this\") === this);\n  // Indirect eval, non-strict\n  console.log(eval?.(\"this\") === globalThis);\n  // Indirect eval, strict\n  console.log(eval?.(\"'use strict'; this\") === globalThis);\n}\n\ntest.call({ name: \"obj\" }); // Logs 3 \"true\"\n```\n\nNote that some source code, while looking like the global scope, is actually wrapped in a function when executed. For example, Node.js CommonJS modules are wrapped in a function and executed with the `this` value set to `module.exports`. [Event handler attributes](#this_in_inline_event_handlers) are executed with `this` set to the element they are attached to.\n\nObject literals don't create a `this` scope — only functions (methods) defined within the object do. Using `this` in an object literal inherits the value from the surrounding scope.\n\n```\nconst obj = {\n  a: this,\n};\n\nconsole.log(obj.a === window); // true\n```\n\n## [Examples](#examples)\n\n### [this in function contexts](#this_in_function_contexts)\n\nThe value of the `this` parameter depends on how the function is called, not on how it's defined.\n\n```\n// An object can be passed as the first argument to 'call'\n// or 'apply' and 'this' will be bound to it.\nconst obj = { a: \"Custom\" };\n\n// Variables declared with var become properties of 'globalThis'.\nvar a = \"Global\";\n\nfunction whatsThis() {\n  return this.a; // 'this' depends on how the function is called\n}\n\nwhatsThis(); // 'Global'; the 'this' parameter defaults to 'globalThis' in non–strict mode\nobj.whatsThis = whatsThis;\nobj.whatsThis(); // 'Custom'; the 'this' parameter is bound to obj\n```\n\nUsing `call()` and `apply()`, you can pass the value of `this` as if it's an explicit parameter.\n\n```\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// The first argument is bound to the implicit 'this' parameter; the remaining\n// arguments are bound to the named parameters.\nadd.call(o, 5, 7); // 16\n\n// The first argument is bound to the implicit 'this' parameter; the second\n// argument is an array whose members are bound to the named parameters.\nadd.apply(o, [10, 20]); // 34\n```\n\n### [this and object conversion](#this_and_object_conversion)\n\nIn non–strict mode, if a function is called with a `this` value that's not an object, the `this` value is substituted with an object. `null` and `undefined` become `globalThis`. Primitives like `7` or `'foo'` are converted to an object using the related constructor, so the primitive number `7` is converted to a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) wrapper class and the string `'foo'` to a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) wrapper class.\n\n```\nfunction bar() {\n  console.log(Object.prototype.toString.call(this));\n}\n\nbar.call(7); // [object Number]\nbar.call(\"foo\"); // [object String]\nbar.call(undefined); // [object Window]\n```\n\n### [The bind() method](#the_bind_method)\n\nCalling [`f.bind(someObject)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) creates a new function with the same body and scope as `f`, but the value of `this` is permanently bound to the first argument of `bind`, regardless of how the function is being called.\n\n```\nfunction f() {\n  return this.a;\n}\n\nconst g = f.bind({ a: \"azerty\" });\nconsole.log(g()); // azerty\n\nconst h = g.bind({ a: \"yoo\" }); // bind only works once!\nconsole.log(h()); // azerty\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 azerty azerty\n```\n\n### [this in arrow functions](#this_in_arrow_functions)\n\nArrow functions create closures over the `this` value of the enclosing execution context. In the following example, we create `obj` with a method `getThisGetter` that returns a function that returns the value of `this`. The returned function is created as an arrow function, so its `this` is permanently bound to the `this` of its enclosing function. The value of `this` inside `getThisGetter` can be set in the call, which in turn sets the return value of the returned function. We will assume that `getThisGetter` is a non-strict function, which means it's contained in a non-strict script and not further nested in a class or strict function.\n\n```\nconst obj = {\n  getThisGetter() {\n    const getter = () => this;\n    return getter;\n  },\n};\n```\n\nWe can call `getThisGetter` as a method of `obj`, which binds `this` to `obj` inside its body. The returned function is assigned to a variable `fn`. Now, when calling `fn`, the value of `this` returned is still the one set by the call to `getThisGetter`, which is `obj`. If the returned function was not an arrow function, such calls would cause the `this` value to be `globalThis`, because `getThisGetter` is non-strict.\n\n```\nconst fn = obj.getThisGetter();\nconsole.log(fn() === obj); // true\n```\n\nBut be careful if you unbind the method of `obj` without calling it, because `getThisGetter` is still a method that has a varying `this` value. Calling `fn2()()` in the following example returns `globalThis`, because it follows the `this` from `fn2()`, which is `globalThis` since it's called without being attached to any object.\n\n```\nconst fn2 = obj.getThisGetter;\nconsole.log(fn2()() === globalThis); // true in non-strict mode\n```\n\nThis behavior is very useful when defining callbacks. Usually, each function expression creates its own `this` binding, which shadows the `this` value of the upper scope. Now, you can define functions as arrow functions if you don't care about the `this` value, and only create `this` bindings where you do (e.g. in class methods). See [example with `setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#using_call_bind_and_apply).\n\n### [this with a getter or setter](#this_with_a_getter_or_setter)\n\n`this` in getters and setters is based on which object the property is accessed on, not which object the property is defined on. A function used as getter or setter has its `this` bound to the object from which the property is being set or gotten.\n\n```\nfunction sum() {\n  return this.a + this.b + this.c;\n}\n\nconst o = {\n  a: 1,\n  b: 2,\n  c: 3,\n  get average() {\n    return (this.a + this.b + this.c) / 3;\n  },\n};\n\nObject.defineProperty(o, \"sum\", {\n  get: sum,\n  enumerable: true,\n  configurable: true,\n});\n\nconsole.log(o.average, o.sum); // 2 6\n```\n\n### [this in DOM event handlers](#this_in_dom_event_handlers)\n\nWhen a function is used as an event handler, its `this` parameter is bound to the DOM element on which the listener is placed (some browsers do not follow this convention for listeners added dynamically with methods other than [`addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener \"addEventListener()\")).\n\n```\n// When called as a listener, turns the related element blue\nfunction bluify(e) {\n  // Always true\n  console.log(this === e.currentTarget);\n  // true when currentTarget and target are the same object\n  console.log(this === e.target);\n  this.style.backgroundColor = \"#A5D9F3\";\n}\n\n// Get a list of every element in the document\nconst elements = document.getElementsByTagName(\"*\");\n\n// Add bluify as a click listener so when the\n// element is clicked on, it turns blue\nfor (const element of elements) {\n  element.addEventListener(\"click\", bluify, false);\n}\n```\n\n### [this in inline event handlers](#this_in_inline_event_handlers)\n\nWhen the code is called from an inline [event handler attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes), its `this` is bound to the DOM element on which the listener is placed:\n\n```\n<button onclick=\"alert(this.tagName.toLowerCase());\">Show this</button>\n```\n\nThe above alert shows `button`. Note, however, that only the outer scope has its `this` bound this way:\n\n```\n<button onclick=\"alert((function () { return this; })());\">\n  Show inner this\n</button>\n```\n\nIn this case, the `this` parameter of the inner function is bound to `globalThis` (i.e. the default object in non–strict mode where `this` isn't passed in the call).\n\n### [Bound methods in classes](#bound_methods_in_classes)\n\nJust like with regular functions, the value of `this` within methods depends on how they are called. Sometimes it is useful to override this behavior so that `this` within classes always refers to the class instance. To achieve this, bind the class methods in the constructor:\n\n```\nclass Car {\n  constructor() {\n    // Bind sayBye but not sayHi to show the difference\n    this.sayBye = this.sayBye.bind(this);\n  }\n\n  sayHi() {\n    console.log(`Hello from ${this.name}`);\n  }\n\n  sayBye() {\n    console.log(`Bye from ${this.name}`);\n  }\n\n  get name() {\n    return \"Ferrari\";\n  }\n}\n\nclass Bird {\n  get name() {\n    return \"Tweety\";\n  }\n}\n\nconst car = new Car();\nconst bird = new Bird();\n\n// The value of 'this' in methods depends on their caller\ncar.sayHi(); // Hello from Ferrari\nbird.sayHi = car.sayHi;\nbird.sayHi(); // Hello from Tweety\n\n// For bound methods, 'this' doesn't depend on the caller\nbird.sayBye = car.sayBye;\nbird.sayBye(); // Bye from Ferrari\n```\n\n**Note:** Classes are always in strict mode. Calling methods with an undefined `this` will throw an error if the method tries to access properties on `this`.\n\n```\nconst carSayHi = car.sayHi;\ncarSayHi(); // TypeError because the 'sayHi' method tries to access 'this.name', but 'this' is undefined in strict mode.\n```\n\nNote, however, that auto-bound methods suffer from the same problem as [using arrow functions for class properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#cannot_be_used_as_methods): each instance of the class will have its own copy of the method, which increases memory usage. Only use it where absolutely necessary. You can also mimic the implementation of [`Intl.NumberFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format#using_format_with_map): define the property as a getter that returns a bound function when accessed and saves it, so that the function is only created once and only created when necessary.\n\n### [this in with statements](#this_in_with_statements)\n\nAlthough [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) statements are deprecated and not available in strict mode, they still serve as an exception to the normal `this` binding rules. If a function is called within a `with` statement and that function is a property of the scope object, the `this` value is bound to the scope object, as if the `obj1.` prefix exists.\n\n```\nconst obj1 = {\n  foo() {\n    return this;\n  },\n};\n\nwith (obj1) {\n  console.log(foo() === obj1); // true\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-this-keyword](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-this-keyword) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "this - JavaScript | MDN",
    "description": "The this keyword refers to the context where a piece of code, such as a function's body, is supposed to run. Most typically, it is used in object methods, where this refers to the object that the method is attached to, thus allowing the same method to be reused on different objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift",
    "markdown": "# Unsigned right shift (>>>) - JavaScript\n\nThe **unsigned right shift (`>>>`)** operator returns a number whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and zero bits are shifted in from the left. This operation is also called \"zero-filling right shift\", because the sign bit becomes `0`, so the resulting number is always positive. Unsigned right shift does not accept [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nUnlike other arithmetic and bitwise operators, the unsigned right shift operator does not accept [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values. This is because it fills the leftmost bits with zeroes, but conceptually, BigInts have an infinite number of leading sign bits, so there's no \"leftmost bit\" to fill with zeroes.\n\nThe operator operates on the left operand's bit representation in [two's complement](https://en.wikipedia.org/wiki/Two's_complement). Consider the 32-bit binary representations of the decimal (base 10) numbers `9` and `-9`:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n    -9 (base 10): 11111111111111111111111111110111 (base 2)\n\nThe binary representation under two's complement of the negative decimal (base 10) number `-9` is formed by inverting all the bits of its opposite number, which is `9` and `00000000000000000000000000001001` in binary, and adding `1`.\n\nIn both cases, the sign of the binary number is given by its leftmost bit: for the positive decimal number `9`, the leftmost bit of the binary representation is `0`, and for the negative decimal number `-9`, the leftmost bit of the binary representation is `1`.\n\nGiven those binary representations of the decimal (base 10) numbers `9`, and `-9`:\n\nFor the positive number `9`, zero-fill right shift and [sign-propagating right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift) yield the same result: `9 >>> 2` yields `2`, the same as `9 >> 2`:\n\n      9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 >>  2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n\nNotice how two rightmost bits, `01`, have been shifted off, and two zeroes have been shifted in from the left.\n\nHowever, notice what happens for `-9`: `-9 >> 2` ([sign-propagating right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift)) yields `-3`, but `-9 >>> 2` (zero-fill right shift) yields 1073741821:\n\n      -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 >>  2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n-9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n\nNotice how two rightmost bits, `11`, have been shifted off. For `-9 >> 2` ([sign-propagating right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift)), two copies of the leftmost `1` bit have been shifted in from the left, which preserves the negative sign. On the other hand, for `-9 >>> 2` (zero-fill right shift), zeroes have instead been shifted in from the left, so the negative sign of the number is not preserved, and the result is instead a (large) positive number.\n\nIf the left operand is a number with more than 32 bits, it will get the most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\nBefore: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n\nThe right operand will be converted to an unsigned 32-bit integer and then taken modulo 32, so the actual shift offset will always be a positive integer between 0 and 31, inclusive. For example, `100 >>> 32` is the same as `100 >>> 0` (and produces `100`) because 32 modulo 32 is 0.\n\n## [Examples](#examples)\n\n### [Using unsigned right shift](#using_unsigned_right_shift)\n\n```\n9 >>> 2; // 2\n-9 >>> 2; // 1073741821\n```\n\nUnsigned right shift doesn't work with BigInts.\n\n```\n9n >>> 2n; // TypeError: BigInts have no unsigned right shift, use >> instead\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-unsigned-right-shift-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-unsigned-right-shift-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Unsigned right shift (>>>) - JavaScript | MDN",
    "description": "The unsigned right shift (>>>) operator returns a number whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and zero bits are shifted in from the left. This operation is also called \"zero-filling right shift\", because the sign bit becomes 0, so the resulting number is always positive. Unsigned right shift does not accept BigInt values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus",
    "markdown": "# Unary plus (+) - JavaScript\n\nThe **unary plus (`+`)** operator precedes its operand and evaluates to its operand but attempts to [convert it into a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), if it isn't already.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nAlthough unary negation (`-`) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number.\n\nUnary plus does the exact same steps as normal [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) used by most built-in methods expecting numbers. It can convert string representations of integers and floats, as well as the non-string values `true`, `false`, and `null`. Integers in both decimal and hexadecimal (`0x`\\-prefixed) formats are supported. Negative numbers are supported (though not for hex). If it cannot parse a particular value, it will evaluate to [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). Unlike other arithmetic operators, which work with both numbers and [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), using the `+` operator on BigInt values throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n## [Examples](#examples)\n\n### [Usage with numbers](#usage_with_numbers)\n\n```\nconst x = 1;\nconst y = -1;\n\nconsole.log(+x);\n// 1\nconsole.log(+y);\n// -1\n```\n\n### [Usage with non-numbers](#usage_with_non-numbers)\n\n```\n+true  // 1\n+false // 0\n+null  // 0\n+[]    // 0\n+function (val) { return val; } // NaN\n+1n    // throws TypeError: Cannot convert BigInt value to number\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-unary-plus-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-unary-plus-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Unary plus (+) - JavaScript | MDN",
    "description": "The unary plus (+) operator precedes its operand and evaluates to its\n  operand but attempts to convert it into a number, if it isn't already.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is",
    "markdown": "# Object.is() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.is()`** static method determines whether two values are [the same value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.is(value1, value2)\n```\n\n### [Parameters](#parameters)\n\n[`value1`](#value1)\n\nThe first value to compare.\n\n[`value2`](#value2)\n\nThe second value to compare.\n\n### [Return value](#return_value)\n\nA boolean indicating whether or not the two arguments are the same value.\n\n## [Description](#description)\n\n`Object.is()` determines whether two values are [the same value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is). Two values are the same if one of the following holds:\n\n*   both [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n*   both [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null)\n*   both `true` or both `false`\n*   both strings of the same length with the same characters in the same order\n*   both the same object (meaning both values reference the same object in memory)\n*   both [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) with the same numeric value\n*   both [symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) that reference the same symbol value\n*   both numbers and\n    *   both `+0`\n    *   both `-0`\n    *   both [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)\n    *   or both non-zero, not [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), and have the same value\n\n`Object.is()` is not equivalent to the [`==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) operator. The `==` operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as `\"\" == false` being `true`), but `Object.is()` doesn't coerce either value.\n\n`Object.is()` is also _not_ equivalent to the [`===`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) operator. The only difference between `Object.is()` and `===` is in their treatment of signed zeros and `NaN` values. The `===` operator (and the `==` operator) treats the number values `-0` and `+0` as equal, but treats [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) as not equal to each other.\n\n## [Examples](#examples)\n\n### [Using Object.is()](#using_object.is)\n\n```\n// Case 1: Evaluation result is the same as using ===\nObject.is(25, 25); // true\nObject.is(\"foo\", \"foo\"); // true\nObject.is(\"foo\", \"bar\"); // false\nObject.is(null, null); // true\nObject.is(undefined, undefined); // true\nObject.is(window, window); // true\nObject.is([], []); // false\nconst foo = { a: 1 };\nconst bar = { a: 1 };\nconst sameFoo = foo;\nObject.is(foo, foo); // true\nObject.is(foo, bar); // false\nObject.is(foo, sameFoo); // true\n\n// Case 2: Signed zero\nObject.is(0, -0); // false\nObject.is(+0, -0); // false\nObject.is(-0, -0); // true\n\n// Case 3: NaN\nObject.is(NaN, 0 / 0); // true\nObject.is(NaN, Number.NaN); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.is](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.is) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.is() - JavaScript | MDN",
    "description": "The Object.is() static method determines whether two values are the same value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
    "markdown": "# Spread syntax (...) - JavaScript\n\nThe **spread (`...`)** syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.\n\nSpread syntax looks exactly like rest syntax. In a way, spread syntax is the opposite of rest syntax. Spread syntax \"expands\" an array into its elements, while rest syntax collects multiple elements and \"condenses\" them into a single element. See [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) and [rest property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#rest_property).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nmyFunction(a, ...iterableObj, b)\n[1, ...iterableObj, '4', 'five', 6]\n{ ...obj, key: 'value' }\n```\n\n## [Description](#description)\n\nSpread syntax can be used when all elements from an object or array need to be included in a new array or object, or should be applied one-by-one in a function call's arguments list. There are three distinct places that accept the spread syntax:\n\n*   [Function arguments](#spread_in_function_calls) list (`myFunction(a, ...iterableObj, b)`)\n*   [Array literals](#spread_in_array_literals) (`[1, ...iterableObj, '4', 'five', 6]`)\n*   [Object literals](#spread_in_object_literals) (`{ ...obj, key: 'value' }`)\n\nAlthough the syntax looks the same, they come with slightly different semantics.\n\nOnly [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) values, like [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) and [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), can be spread in [array literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals) and argument lists. Many objects are not iterable, including all [plain objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) that lack a [`Symbol.iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method:\n\n```\nconst obj = { key1: \"value1\" };\nconst array = [...obj]; // TypeError: obj is not iterable\n```\n\nOn the other hand, spreading in [object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) [enumerates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties#traversing_object_properties) the own properties of the value. For typical arrays, all indices are enumerable own properties, so arrays can be spread into objects.\n\n```\nconst array = [1, 2, 3];\nconst obj = { ...array }; // { 0: 1, 1: 2, 2: 3 }\n```\n\nAll [primitives](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values) can be spread in objects. Only strings have enumerable own properties, and spreading anything else doesn't create properties on the new object.\n\n```\nconst obj = { ...true, ...\"test\", ...10 };\n// { '0': 't', '1': 'e', '2': 's', '3': 't' }\n```\n\nWhen using spread syntax for function calls, be aware of the possibility of exceeding the JavaScript engine's argument length limit. See [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) for more details.\n\n## [Examples](#examples)\n\n### [Spread in function calls](#spread_in_function_calls)\n\n#### Replace apply()\n\nIt is common to use [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) in cases where you want to use the elements of an array as arguments to a function.\n\n```\nfunction myFunction(x, y, z) {}\nconst args = [0, 1, 2];\nmyFunction.apply(null, args);\n```\n\nWith spread syntax the above can be written as:\n\n```\nfunction myFunction(x, y, z) {}\nconst args = [0, 1, 2];\nmyFunction(...args);\n```\n\nAny argument in the argument list can use spread syntax, and the spread syntax can be used multiple times.\n\n```\nfunction myFunction(v, w, x, y, z) {}\nconst args = [0, 1];\nmyFunction(-1, ...args, 2, ...[3]);\n```\n\n#### Apply for new operator\n\nWhen calling a constructor with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), it's not possible to **directly** use an array and `apply()`, because `apply()` _calls_ the target function instead of _constructing_ it, which means, among other things, that [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) will be `undefined`. However, an array can be easily used with `new` thanks to spread syntax:\n\n```\nconst dateFields = [1970, 0, 1]; // 1 Jan 1970\nconst d = new Date(...dateFields);\n```\n\n### [Spread in array literals](#spread_in_array_literals)\n\n#### A more powerful array literal\n\nWithout spread syntax, the array literal syntax is no longer sufficient to create a new array using an existing array as one part of it. Instead, imperative code must be used using a combination of methods, including [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push), [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice), [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat), etc. With spread syntax, this becomes much more succinct:\n\n```\nconst parts = [\"shoulders\", \"knees\"];\nconst lyrics = [\"head\", ...parts, \"and\", \"toes\"];\n//  [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n```\n\nJust like spread for argument lists, `...` can be used anywhere in the array literal, and may be used more than once.\n\n#### Copying an array\n\nYou can use spread syntax to make a [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) of an array. Each array element retains its identity without getting copied.\n\n```\nconst arr = [1, 2, 3];\nconst arr2 = [...arr]; // like arr.slice()\n\narr2.push(4);\n// arr2 becomes [1, 2, 3, 4]\n// arr remains unaffected\n```\n\nSpread syntax effectively goes one level deep while copying an array. Therefore, it may be unsuitable for copying multidimensional arrays. The same is true with [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) — no native operation in JavaScript does a deep clone. The web API method [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) allows deep copying values of certain [supported types](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types). See [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) for more details.\n\n```\nconst a = [[1], [2], [3]];\nconst b = [...a];\n\nb.shift().shift();\n// 1\n\n// Oh no! Now array 'a' is affected as well:\nconsole.log(a);\n// [[], [2], [3]]\n```\n\n#### A better way to concatenate arrays\n\n[`Array.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) is often used to concatenate an array to the end of an existing array. Without spread syntax, this is done as:\n\n```\nlet arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\n// Append all items from arr2 onto arr1\narr1 = arr1.concat(arr2);\n```\n\nWith spread syntax this becomes:\n\n```\nlet arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\narr1 = [...arr1, ...arr2];\n// arr1 is now [0, 1, 2, 3, 4, 5]\n```\n\n[`Array.prototype.unshift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) is often used to insert an array of values at the start of an existing array. Without spread syntax, this is done as:\n\n```\nconst arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\n//  Prepend all items from arr2 onto arr1\nArray.prototype.unshift.apply(arr1, arr2);\nconsole.log(arr1); // [3, 4, 5, 0, 1, 2]\n```\n\nWith spread syntax, this becomes:\n\n```\nlet arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\narr1 = [...arr2, ...arr1];\nconsole.log(arr1); // [3, 4, 5, 0, 1, 2]\n```\n\n**Note:** Unlike `unshift()`, this creates a new `arr1`, instead of modifying the original `arr1` array in-place.\n\n#### Conditionally adding values to an array\n\nYou can make an element present or absent in an array literal, depending on a condition, using a [conditional operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator).\n\n```\nconst isSummer = false;\nconst fruits = [\"apple\", \"banana\", ...(isSummer ? [\"watermelon\"] : [])];\n// ['apple', 'banana']\n```\n\nWhen the condition is `false`, we spread an empty array, so that nothing gets added to the final array. Note that this is different from the following:\n\n```\nconst fruits = [\"apple\", \"banana\", isSummer ? \"watermelon\" : undefined];\n// ['apple', 'banana', undefined]\n```\n\nIn this case, an extra `undefined` element is added when `isSummer` is `false`, and this element will be visited by methods such as [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\n### [Spread in object literals](#spread_in_object_literals)\n\n#### Copying and merging objects\n\nYou can use spread syntax to merge multiple objects into one new object.\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nconst obj2 = { bar: \"baz\", y: 13 };\n\nconst mergedObj = { ...obj1, ...obj2 };\n// { foo: \"bar\", x: 42, bar: \"baz\", y: 13 }\n```\n\nA single spread creates a shallow copy of the original object (but without non-enumerable properties and without copying the prototype), similar to [copying an array](#copying_an_array).\n\n```\nconst clonedObj = { ...obj1 };\n// { foo: \"bar\", x: 42 }\n```\n\n#### Overriding properties\n\nWhen one object is spread into another object, or when multiple objects are spread into one object, and properties with identical names are encountered, the property takes the last value assigned while remaining in the position it was originally set.\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nconst obj2 = { foo: \"baz\", y: 13 };\n\nconst mergedObj = { x: 41, ...obj1, ...obj2, y: 9 }; // { x: 42, foo: \"baz\", y: 9 }\n```\n\n#### Conditionally adding properties to an object\n\nYou can make an element present or absent in an object literal, depending on a condition, using a [conditional operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator).\n\n```\nconst isSummer = false;\nconst fruits = {\n  apple: 10,\n  banana: 5,\n  ...(isSummer ? { watermelon: 30 } : {}),\n};\n// { apple: 10, banana: 5 }\n```\n\nThe case where the condition is `false` is an empty object, so that nothing gets spread into the final object. Note that this is different from the following:\n\n```\nconst fruits = {\n  apple: 10,\n  banana: 5,\n  watermelon: isSummer ? 30 : undefined,\n};\n// { apple: 10, banana: 5, watermelon: undefined }\n```\n\nIn this case, the `watermelon` property is always present and will be visited by methods such as [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys).\n\nBecause primitives can be spread into objects as well, and from the observation that all [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) values do not have enumerable properties, you can simply use a [logical AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND) operator:\n\n```\nconst isSummer = false;\nconst fruits = {\n  apple: 10,\n  banana: 5,\n  ...(isSummer && { watermelon: 30 }),\n};\n```\n\nIn this case, if `isSummer` is any falsy value, no property will be created on the `fruits` object.\n\n#### Comparing with Object.assign()\n\nNote that [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) can be used to mutate an object, whereas spread syntax can't.\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nObject.assign(obj1, { x: 1337 });\nconsole.log(obj1); // { foo: \"bar\", x: 1337 }\n```\n\nIn addition, [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) triggers setters on the target object, whereas spread syntax does not.\n\n```\nconst objectAssign = Object.assign(\n  {\n    set foo(val) {\n      console.log(val);\n    },\n  },\n  { foo: 1 },\n);\n// Logs \"1\"; objectAssign.foo is still the original setter\n\nconst spread = {\n  set foo(val) {\n    console.log(val);\n  },\n  ...{ foo: 1 },\n};\n// Nothing is logged; spread.foo is 1\n```\n\nYou cannot naively re-implement the [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) function through a single spreading:\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nconst obj2 = { foo: \"baz\", y: 13 };\nconst merge = (...objects) => ({ ...objects });\n\nconst mergedObj1 = merge(obj1, obj2);\n// { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 13 } }\n\nconst mergedObj2 = merge({}, obj1, obj2);\n// { 0: {}, 1: { foo: 'bar', x: 42 }, 2: { foo: 'baz', y: 13 } }\n```\n\nIn the above example, the spread syntax does not work as one might expect: it spreads an _array_ of arguments into the object literal, due to the rest parameter. Here is an implementation of `merge` using the spread syntax, whose behavior is similar to [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign), except that it doesn't trigger setters, nor mutates any object:\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nconst obj2 = { foo: \"baz\", y: 13 };\nconst merge = (...objects) =>\n  objects.reduce((acc, cur) => ({ ...acc, ...cur }));\n\nconst mergedObj1 = merge(obj1, obj2);\n// { foo: 'baz', x: 42, y: 13 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-SpreadElement](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-SpreadElement) |\n| [ECMAScript Language Specification  <br>\\# prod-ArgumentList](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ArgumentList) |\n| [ECMAScript Language Specification  <br>\\# prod-PropertyDefinition](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-PropertyDefinition) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Spread syntax (...) - JavaScript | MDN",
    "description": "The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",
    "markdown": "# void operator - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`void`** operator evaluates the given `expression` and then returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThis operator allows evaluating expressions that produce a value into places where an expression that evaluates to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is desired.\n\nThe `void` operator is often used merely to obtain the `undefined` primitive value, usually using `void(0)` (which is equivalent to `void 0`). In these cases, the global variable [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) can be used.\n\nIt should be noted that [the precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) of the `void` operator should be taken into account and that parentheses can help clarify the resolution of the expression following the `void` operator:\n\n```\nvoid 2 === \"2\"; // (void 2) === '2', returns false\nvoid (2 === \"2\"); // void (2 === '2'), returns undefined\n```\n\n## [Examples](#examples)\n\n### [Immediately Invoked Function Expressions](#immediately_invoked_function_expressions)\n\nWhen using an [immediately-invoked function expression](https://developer.mozilla.org/en-US/docs/Glossary/IIFE), the `function` keyword cannot be at the immediate start of the [statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement), because that would be parsed as a [function declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function), and would generate a syntax error when the parentheses representing invocation is reached — if the function is unnamed, it would immediately be a syntax error if the function is parsed as a declaration.\n\n```\nfunction iife() {\n  console.log(\"Executed!\");\n}(); // SyntaxError: Unexpected token ')'\n\nfunction () {\n  console.log(\"Executed!\");\n}(); // SyntaxError: Function statements require a function name\n```\n\nIn order for the function to be parsed as an [expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function), the `function` keyword has to appear at a position that only accepts expressions, not statements. This can be achieved by prefixing the keyword with a [unary operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#unary_operators), which only accepts expressions as operands. Function invocation has higher [precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) than unary operators, so it will be executed first. Its return value (which is almost always `undefined`) will be passed to the unary operator and then immediately discarded.\n\nOf all the unary operators, `void` offers the best semantic, because it clearly signals that the return value of the function invocation should be discarded.\n\n```\nvoid function () {\n  console.log(\"Executed!\");\n}();\n\n// Logs \"Executed!\"\n```\n\nThis is a bit longer than wrapping the function expression in parentheses, which has the same effect of forcing the `function` keyword to be parsed as the start of an expression instead of a statement.\n\n```\n(function () {\n  console.log(\"Executed!\");\n})();\n```\n\n### [JavaScript URIs](#javascript_uris)\n\nWhen a browser follows a `javascript:` URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). The `void` operator can be used to return `undefined`. For example:\n\n```\n<a href=\"javascript:void(0);\">Click here to do nothing</a>\n\n<a href=\"javascript:void(document.body.style.backgroundColor='green');\">\n  Click here for green background\n</a>\n```\n\n**Note:** `javascript:` pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers.\n\n### [Non-leaking Arrow Functions](#non-leaking_arrow_functions)\n\nArrow functions introduce a short-hand braceless syntax that returns an expression. This can cause unintended side effects if the expression is a function call where the returned value changes from `undefined` to some other value.\n\nFor example, if `doSomething()` returns `false` in the code below, the checkbox will no longer be marked as checked or unchecked when the checkbox is clicked (returning `false` from the handler disables the default action).\n\n```\ncheckbox.onclick = () => doSomething();\n```\n\nThis is unlikely to be desired behaviour! To be safe, when the return value of a function is not intended to be used, it can be passed to the `void` operator to ensure that (for example) changing APIs do not cause arrow functions' behaviors to change.\n\n```\ncheckbox.onclick = () => void doSomething();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-void-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-void-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "void operator - JavaScript | MDN",
    "description": "The void operator evaluates the given\n  expression and then returns undefined.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield",
    "markdown": "# yield - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`yield`** operator is used to pause and resume a [generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`expression`](#expression) Optional\n\nThe value to yield from the generator function via [the iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol). If omitted, `undefined` is yielded.\n\n### [Return value](#return_value)\n\nReturns the optional value passed to the generator's `next()` method to resume its execution.\n\n**Note:** This means `next()` is asymmetric: it always sends a value to the currently suspended `yield`, but returns the operand of the next `yield`. The argument passed to the first `next()` call cannot be retrieved because there's no currently suspended `yield`.\n\n## [Description](#description)\n\nThe `yield` keyword pauses generator function execution and the value of the expression following the `yield` keyword is returned to the generator's caller. It can be thought of as a generator-based version of the `return` keyword.\n\n`yield` can only be used directly within the generator function that contains it. It cannot be used within nested functions.\n\nCalling a generator function constructs a [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) object. Each time the generator's [`next()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next) method is called, the generator resumes execution, and runs until it reaches one of the following:\n\n*   A `yield` expression. In this case, the generator pauses, and the `next()` method return an [iterator result](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) object with two properties: `value` and `done`. The `value` property is the value of the expression after the `yield` operator, and `done` is `false`, indicating that the generator function has not fully completed.\n*   The end of the generator function. In this case, execution of the generator ends, and the `next()` method returns an iterator result object where the `value` is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and `done` is `true`.\n*   A [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement. In this case, execution of the generator ends, and the `next()` method returns an iterator result object where the `value` is the specified return value and `done` is `true`.\n*   A [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) statement. In this case, execution of the generator halts entirely, and the `next()` method throws the specified exception.\n\nOnce paused on a `yield` expression, the generator's code execution remains paused until the generator's `next()` method is called again. If an optional value is passed to the generator's `next()` method, that value becomes the value returned by the generator's current `yield` operation. The first `next()` call does not have a corresponding suspended `yield` operation, so there's no way to get the argument passed to the first `next()` call.\n\nIf the generator's [`return()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) or [`throw()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw) method is called, it acts as if a [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) or [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) statement was executed at the paused `yield` expression. You can use [`try...catch...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) within the generator function body to handle these early completions. If the `return()` or `throw()` method is called but there's no suspended `yield` expression (because `next()` has not been called yet, or because the generator has already completed), then the early completions cannot be handled and always terminate the generator.\n\n## [Examples](#examples)\n\n### [Using yield](#using_yield)\n\nThe following code is the declaration of an example generator function.\n\n```\nfunction* countAppleSales() {\n  const saleList = [3, 7, 5];\n  for (let i = 0; i < saleList.length; i++) {\n    yield saleList[i];\n  }\n}\n```\n\nOnce a generator function is defined, it can be used by constructing an iterator as shown.\n\n```\nconst appleStore = countAppleSales(); // Generator { }\nconsole.log(appleStore.next()); // { value: 3, done: false }\nconsole.log(appleStore.next()); // { value: 7, done: false }\nconsole.log(appleStore.next()); // { value: 5, done: false }\nconsole.log(appleStore.next()); // { value: undefined, done: true }\n```\n\nYou can also send a value with `next(value)` into the generator. `step` evaluates as a return value of the `yield` expression — although the value passed to the generator's `next()` method the first time `next()` is called is ignored.\n\n```\nfunction* counter(value) {\n  while (true) {\n    const step = yield value++;\n\n    if (step) {\n      value += step;\n    }\n  }\n}\n\nconst generatorFunc = counter(0);\nconsole.log(generatorFunc.next().value); // 0\nconsole.log(generatorFunc.next().value); // 1\nconsole.log(generatorFunc.next().value); // 2\nconsole.log(generatorFunc.next().value); // 3\nconsole.log(generatorFunc.next(10).value); // 14\nconsole.log(generatorFunc.next().value); // 15\nconsole.log(generatorFunc.next(10).value); // 26\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-YieldExpression](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-YieldExpression) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "yield - JavaScript | MDN",
    "description": "The yield operator is used to pause and resume a generator function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*",
    "markdown": "# yield\\* - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`yield*`** operator is used to delegate to another [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) object, such as a [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`expression`](#expression) Optional\n\nAn iterable object.\n\n### [Return value](#return_value)\n\nReturns the value returned by that iterator when it's closed (when `done` is `true`).\n\n## [Description](#description)\n\nThe `yield*` expression iterates over the operand and yields each value returned by it. It delegates iteration of the current generator to an underlying iterator — which we will refer to as \"generator\" and \"iterator\", respectively. `yield*` first gets the iterator from the operand by calling the latter's [`@@iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method. Then, each time the `next()` method of the generator is called, `yield*` calls the iterator's `next()` method, passing the argument received by the generator's `next()` method (always `undefined` for the first call), and yielding the same result object as what's returned from the iterator's `next()` method. If the iterator result has `done: true`, then the `yield*` expression stops executing and returns the `value` of that result.\n\nThe `yield*` operator forwards the current generator's [`throw()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw) and [`return()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) methods to the underlying iterator as well. If the current generator is prematurely closed through one of these methods, the underlying iterator will be notified. If the generator's `throw()`/`return()` method is called, the `throw()`/`return()` method of the underlying iterator is called with the same argument. The return value of `throw()`/`return()` is handled like the `next()` method's result, and if the method throws, the exception is propagated from the `yield*` expression.\n\nIf the underlying iterator doesn't have a `return()` method, the `yield*` expression turns into a [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement, just like calling `return()` on a suspended [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) expression.\n\nIf the underlying iterator doesn't have a `throw()` method, this causes `yield*` to throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) – but before throwing the error, the underlying iterator's `return()` method is called if one exists.\n\n## [Examples](#examples)\n\n### [Delegating to another generator](#delegating_to_another_generator)\n\nIn following code, values yielded by `g1()` are returned from `next()` calls just like those which are yielded by `g2()`.\n\n```\nfunction* g1() {\n  yield 2;\n  yield 3;\n  yield 4;\n}\n\nfunction* g2() {\n  yield 1;\n  yield* g1();\n  yield 5;\n}\n\nconst gen = g2();\n\nconsole.log(gen.next()); // {value: 1, done: false}\nconsole.log(gen.next()); // {value: 2, done: false}\nconsole.log(gen.next()); // {value: 3, done: false}\nconsole.log(gen.next()); // {value: 4, done: false}\nconsole.log(gen.next()); // {value: 5, done: false}\nconsole.log(gen.next()); // {value: undefined, done: true}\n```\n\n### [Other Iterable objects](#other_iterable_objects)\n\nBesides generator objects, `yield*` can also `yield` other kinds of iterables (e.g., arrays, strings, or [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) objects).\n\n```\nfunction* g3(...args) {\n  yield* [1, 2];\n  yield* \"34\";\n  yield* args;\n}\n\nconst gen = g3(5, 6);\n\nconsole.log(gen.next()); // {value: 1, done: false}\nconsole.log(gen.next()); // {value: 2, done: false}\nconsole.log(gen.next()); // {value: \"3\", done: false}\nconsole.log(gen.next()); // {value: \"4\", done: false}\nconsole.log(gen.next()); // {value: 5, done: false}\nconsole.log(gen.next()); // {value: 6, done: false}\nconsole.log(gen.next()); // {value: undefined, done: true}\n```\n\n### [The value of yield\\* expression itself](#the_value_of_yield_expression_itself)\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```\nfunction* g4() {\n  yield* [1, 2, 3];\n  return \"foo\";\n}\n\nfunction* g5() {\n  const g4ReturnValue = yield* g4();\n  console.log(g4ReturnValue); // 'foo'\n  return g4ReturnValue;\n}\n\nconst gen = g5();\n\nconsole.log(gen.next()); // {value: 1, done: false}\nconsole.log(gen.next()); // {value: 2, done: false}\nconsole.log(gen.next()); // {value: 3, done: false} done is false because g5 generator isn't finished, only g4\nconsole.log(gen.next()); // {value: 'foo', done: true}\n```\n\n### [Method forwarding](#method_forwarding)\n\nThe `next()`, `throw()`, and `return()` methods of the current generator are all forwarded to the underlying iterator.\n\n```\nconst iterable = {\n  [Symbol.iterator]() {\n    let count = 0;\n    return {\n      next(v) {\n        console.log(\"next called with\", v);\n        count++;\n        return { value: count, done: false };\n      },\n      return(v) {\n        console.log(\"return called with\", v);\n        return { value: \"iterable return value\", done: true };\n      },\n      throw(v) {\n        console.log(\"throw called with\", v);\n        return { value: \"iterable thrown value\", done: true };\n      },\n    };\n  },\n};\n\nfunction* gf() {\n  yield* iterable;\n  return \"gf return value\";\n}\n\nconst gen = gf();\nconsole.log(gen.next(10));\n// next called with undefined; the argument of the first next() call is always ignored\n// { value: 1, done: false }\nconsole.log(gen.next(20));\n// next called with 20\n// { value: 2, done: false }\nconsole.log(gen.return(30));\n// return called with 30\n// { value: 'iterable return value', done: true }\nconsole.log(gen.next(40));\n// { value: undefined, done: true }; gen is already closed\n\nconst gen2 = gf();\nconsole.log(gen2.next(10));\n// next called with undefined\n// { value: 1, done: false }\nconsole.log(gen2.throw(50));\n// throw called with 50\n// { value: 'gf return value', done: true }\nconsole.log(gen.next(60));\n// { value: undefined, done: true }; gen is already closed\n```\n\nIf the `return()`/`throw()` method of the underlying iterator returns `done: false`, the current generator continues executing and `yield*` continues to delegate to the underlying iterator.\n\n```\nconst iterable = {\n  [Symbol.iterator]() {\n    let count = 0;\n    return {\n      next(v) {\n        console.log(\"next called with\", v);\n        count++;\n        return { value: count, done: false };\n      },\n      return(v) {\n        console.log(\"return called with\", v);\n        return { value: \"iterable return value\", done: false };\n      },\n    };\n  },\n};\n\nfunction* gf() {\n  yield* iterable;\n  return \"gf return value\";\n}\n\nconst gen = gf();\nconsole.log(gen.next(10));\n// next called with undefined\n// { value: 1, done: false }\nconsole.log(gen.return(20));\n// return called with 20\n// { value: 'iterable return value', done: false }\nconsole.log(gen.next(30));\n// { value: 2, done: false }; gen is not closed\n```\n\nIf the underlying iterator doesn't have a `throw()` method and the generator's `throw()` is called, `yield*` throws an error.\n\n```\nconst iterable = {\n  [Symbol.iterator]() {\n    let count = 0;\n    return {\n      next(v) {\n        count++;\n        return { value: count, done: false };\n      },\n    };\n  },\n};\n\nfunction* gf() {\n  yield* iterable;\n  return \"gf return value\";\n}\n\nconst gen = gf();\ngen.next(); // First next() starts the yield* expression\ngen.throw(20); // TypeError: The iterator does not provide a 'throw' method.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generator-function-definitions-runtime-semantics-evaluation](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-generator-function-definitions-runtime-semantics-evaluation) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "yield* - JavaScript | MDN",
    "description": "The yield* operator is used to delegate to another iterable object, such as a Generator.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements",
    "markdown": "# Statements and declarations - JavaScript\n\nJavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.\n\n## [Statements and declarations by category](#statements_and_declarations_by_category)\n\nFor an alphabetical listing see the sidebar on the left.\n\n### [Control flow](#control_flow)\n\n[`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return)\n\nSpecifies the value to be returned by a function.\n\n[`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break)\n\nTerminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.\n\n[`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue)\n\nTerminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\n\n[`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw)\n\nThrows a user-defined exception.\n\n[`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\n\nExecutes a statement if a specified condition is true. If the condition is false, another statement can be executed.\n\n[`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)\n\nEvaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.\n\n[`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n\nMarks a block of statements to try, and specifies a response, should an exception be thrown.\n\n### [Declaring variables](#declaring_variables)\n\n[`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\n\nDeclares a variable, optionally initializing it to a value.\n\n[`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n\nDeclares a block scope local variable, optionally initializing it to a value.\n\n[`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)\n\nDeclares a read-only named constant.\n\n### [Functions and classes](#functions_and_classes)\n\n[`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)\n\nDeclares a function with the specified parameters.\n\n[`function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*)\n\nGenerator Functions enable writing [iterators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) more easily.\n\n[`async function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n\nDeclares an async function with the specified parameters.\n\n[`async function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*)\n\nAsynchronous Generator Functions enable writing async [iterators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) more easily.\n\n[`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class)\n\nDeclares a class.\n\n### [Iterations](#iterations)\n\n[`do...while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while)\n\nCreates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n\n[`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for)\n\nCreates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.\n\n[`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)\n\nIterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.\n\n[`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n\nIterates over iterable objects (including [arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), array-like objects, [iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators)), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n\n[`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)\n\nIterates over async iterable objects, array-like objects, [iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n\n[`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while)\n\nCreates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n### [Others](#others)\n\n[Empty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty)\n\nAn empty statement is used to provide no statement, although the JavaScript syntax would expect one.\n\n[Block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block)\n\nA block statement is used to group zero or more statements. The block is delimited by a pair of curly braces.\n\n[Expression statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement)\n\nAn expression statement evaluates an expression and discards its result. It allows the expression to perform side effects, such as executing a function or updating a variable.\n\n[`debugger`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger)\n\nInvokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.\n\n[`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export)\n\nUsed to export functions to make them available for imports in external modules, and other scripts.\n\n[`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\n\nUsed to import functions exported from an external module, another script.\n\n[label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label)\n\nProvides a statement with an identifier that you can refer to using a `break` or `continue` statement.\n\n[`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) Deprecated\n\nExtends the scope chain for a statement.\n\n## [Difference between statements and declarations](#difference_between_statements_and_declarations)\n\nIn this section, we will be mixing two kinds of constructs: [_statements_](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#prod-Statement) and [_declarations_](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#prod-Declaration). They are two disjoint sets of grammars. The following are declarations:\n\n*   [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n*   [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)\n*   [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)\n*   [`function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*)\n*   [`async function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n*   [`async function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*)\n*   [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class)\n*   [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) (Note: it can only appear at the top-level of a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules))\n*   [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) (Note: it can only appear at the top-level of a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules))\n\nEverything else in the [list above](#statements_and_declarations_by_category) is a statement.\n\nThe terms \"statement\" and \"declaration\" have a precise meaning in the formal syntax of JavaScript that affects where they may be placed in code. For example, in most control-flow structures, the body only accepts statements — such as the two arms of an [`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else):\n\n```\nif (condition)\n  statement1;\nelse\n  statement2;\n```\n\nIf you use a declaration instead of a statement, it would be a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). For example, a [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) declaration is not a statement, so you can't use it in its bare form as the body of an `if` statement.\n\n```\nif (condition)\n  let i = 0; // SyntaxError: Lexical declaration cannot appear in a single-statement context\n```\n\nOn the other hand, [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) is a statement, so you can use it on its own as the `if` body.\n\n```\nif (condition)\n  var i = 0;\n```\n\nYou can see declarations as \"[binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) identifiers to values\", and statements as \"carrying out actions\". The fact that `var` is a statement instead of a declaration is a special case, because it doesn't follow normal lexical scoping rules and may create side effects — in the form of creating global variables, mutating existing `var`\\-defined variables, and defining variables that are visible outside of its block (because `var`\\-defined variables aren't block-scoped).\n\nAs another example, [labels](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) can only be attached to statements.\n\n```\nlabel: const a = 1; // SyntaxError: Lexical declaration cannot appear in a single-statement context\n```\n\nTo get around this, you can wrap the declaration in braces — this makes it part of a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block).\n\n```\nlabel: {\n  const a = 1;\n}\n\nif (condition) {\n  let i = 0;\n}\n```\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Statements and declarations - JavaScript | MDN",
    "description": "JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
    "markdown": "# async function - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`async function`** declaration creates a [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) of a new async function to a given name. The `await` keyword is permitted within the function body, enabling asynchronous, promise-based behavior to be written in a cleaner style and avoiding the need to explicitly configure promise chains.\n\nYou can also define async functions using the [`async function` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nasync function name(param0) {\n  statements\n}\nasync function name(param0, param1) {\n  statements\n}\nasync function name(param0, param1, /* …, */ paramN) {\n  statements\n}\n```\n\n**Note:** There cannot be a line terminator between `async` and `function`, otherwise a semicolon is [automatically inserted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion), causing `async` to become an identifier and the rest to become a `function` declaration.\n\n### [Parameters](#parameters)\n\n[`name`](#name)\n\nThe function's name.\n\n[`param`](#param) Optional\n\nThe name of a formal parameter for the function. For the parameters' syntax, see the [Functions reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters).\n\n[`statements`](#statements) Optional\n\nThe statements comprising the body of the function. The `await` mechanism may be used.\n\n## [Description](#description)\n\nAn `async function` declaration creates an [`AsyncFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction) object. Each time when an async function is called, it returns a new [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which will be resolved with the value returned by the async function, or rejected with an exception uncaught within the async function.\n\nAsync functions can contain zero or more [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) expressions. Await expressions make promise-returning functions behave as though they're synchronous by suspending execution until the returned promise is fulfilled or rejected. The resolved value of the promise is treated as the return value of the await expression. Use of `async` and `await` enables the use of ordinary `try` / `catch` blocks around asynchronous code.\n\n**Note:** The `await` keyword is only valid inside async functions within regular JavaScript code. If you use it outside of an async function's body, you will get a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).\n\n`await` can be used on its own with [JavaScript modules.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)\n\n**Note:** The purpose of `async`/`await` is to simplify the syntax necessary to consume promise-based APIs. The behavior of `async`/`await` is similar to combining [generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) and promises.\n\nAsync functions always return a promise. If the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise.\n\nFor example, consider the following code:\n\n```\nasync function foo() {\n  return 1;\n}\n```\n\nIt is similar to:\n\n```\nfunction foo() {\n  return Promise.resolve(1);\n}\n```\n\n**Note:**\n\nEven though the return value of an async function behaves as if it's wrapped in a `Promise.resolve`, they are not equivalent.\n\nAn async function will return a different _reference_, whereas `Promise.resolve` returns the same reference if the given value is a promise.\n\nIt can be a problem when you want to check the equality of a promise and a return value of an async function.\n\n```\nconst p = new Promise((res, rej) => {\n  res(1);\n});\n\nasync function asyncReturn() {\n  return p;\n}\n\nfunction basicReturn() {\n  return Promise.resolve(p);\n}\n\nconsole.log(p === basicReturn()); // true\nconsole.log(p === asyncReturn()); // false\n```\n\nThe body of an async function can be thought of as being split by zero or more await expressions. Top-level code, up to and including the first await expression (if there is one), is run synchronously. In this way, an async function without an await expression will run synchronously. If there is an await expression inside the function body, however, the async function will always complete asynchronously.\n\nFor example:\n\n```\nasync function foo() {\n  await 1;\n}\n```\n\nIt is also equivalent to:\n\n```\nfunction foo() {\n  return Promise.resolve(1).then(() => undefined);\n}\n```\n\nCode after each await expression can be thought of as existing in a `.then` callback. In this way a promise chain is progressively constructed with each reentrant step through the function. The return value forms the final link in the chain.\n\nIn the following example, we successively await two promises. Progress moves through function `foo` in three stages.\n\n1.  The first line of the body of function `foo` is executed synchronously, with the await expression configured with the pending promise. Progress through `foo` is then suspended and control is yielded back to the function that called `foo`.\n2.  Some time later, when the first promise has either been fulfilled or rejected, control moves back into `foo`. The result of the first promise fulfillment (if it was not rejected) is returned from the await expression. Here `1` is assigned to `result1`. Progress continues, and the second await expression is evaluated. Again, progress through `foo` is suspended and control is yielded.\n3.  Some time later, when the second promise has either been fulfilled or rejected, control re-enters `foo`. The result of the second promise resolution is returned from the second await expression. Here `2` is assigned to `result2`. Control moves to the return expression (if any). The default return value of `undefined` is returned as the resolution value of the current promise.\n\n```\nasync function foo() {\n  const result1 = await new Promise((resolve) =>\n    setTimeout(() => resolve(\"1\")),\n  );\n  const result2 = await new Promise((resolve) =>\n    setTimeout(() => resolve(\"2\")),\n  );\n}\nfoo();\n```\n\nNote how the promise chain is not built-up in one go. Instead, the promise chain is constructed in stages as control is successively yielded from and returned to the async function. As a result, we must be mindful of error handling behavior when dealing with concurrent asynchronous operations.\n\nFor example, in the following code an unhandled promise rejection error will be thrown, even if a `.catch` handler has been configured further along the promise chain. This is because `p2` will not be \"wired into\" the promise chain until control returns from `p1`.\n\n```\nasync function foo() {\n  const p1 = new Promise((resolve) => setTimeout(() => resolve(\"1\"), 1000));\n  const p2 = new Promise((_, reject) => setTimeout(() => reject(\"2\"), 500));\n  const results = [await p1, await p2]; // Do not do this! Use Promise.all or Promise.allSettled instead.\n}\nfoo().catch(() => {}); // Attempt to swallow all errors...\n```\n\n`async function` declarations behave similar to [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) declarations — they are [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) to the top of their scope and can be called anywhere in their scope, and they can be redeclared only in certain contexts.\n\n## [Examples](#examples)\n\n### [Async functions and execution order](#async_functions_and_execution_order)\n\n```\nfunction resolveAfter2Seconds() {\n  console.log(\"starting slow promise\");\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"slow\");\n      console.log(\"slow promise is done\");\n    }, 2000);\n  });\n}\n\nfunction resolveAfter1Second() {\n  console.log(\"starting fast promise\");\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"fast\");\n      console.log(\"fast promise is done\");\n    }, 1000);\n  });\n}\n\nasync function sequentialStart() {\n  console.log(\"== sequentialStart starts ==\");\n\n  // 1. Start a timer, log after it's done\n  const slow = resolveAfter2Seconds();\n  console.log(await slow);\n\n  // 2. Start the next timer after waiting for the previous one\n  const fast = resolveAfter1Second();\n  console.log(await fast);\n\n  console.log(\"== sequentialStart done ==\");\n}\n\nasync function sequentialWait() {\n  console.log(\"== sequentialWait starts ==\");\n\n  // 1. Start two timers without waiting for each other\n  const slow = resolveAfter2Seconds();\n  const fast = resolveAfter1Second();\n\n  // 2. Wait for the slow timer to complete, and then log the result\n  console.log(await slow);\n  // 3. Wait for the fast timer to complete, and then log the result\n  console.log(await fast);\n\n  console.log(\"== sequentialWait done ==\");\n}\n\nasync function concurrent1() {\n  console.log(\"== concurrent1 starts ==\");\n\n  // 1. Start two timers concurrently and wait for both to complete\n  const results = await Promise.all([\n    resolveAfter2Seconds(),\n    resolveAfter1Second(),\n  ]);\n  // 2. Log the results together\n  console.log(results[0]);\n  console.log(results[1]);\n\n  console.log(\"== concurrent1 done ==\");\n}\n\nasync function concurrent2() {\n  console.log(\"== concurrent2 starts ==\");\n\n  // 1. Start two timers concurrently, log immediately after each one is done\n  await Promise.all([\n    (async () => console.log(await resolveAfter2Seconds()))(),\n    (async () => console.log(await resolveAfter1Second()))(),\n  ]);\n  console.log(\"== concurrent2 done ==\");\n}\n\nsequentialStart(); // after 2 seconds, logs \"slow\", then after 1 more second, \"fast\"\n\n// wait above to finish\nsetTimeout(sequentialWait, 4000); // after 2 seconds, logs \"slow\" and then \"fast\"\n\n// wait again\nsetTimeout(concurrent1, 7000); // same as sequentialWait\n\n// wait again\nsetTimeout(concurrent2, 10000); // after 1 second, logs \"fast\", then after 1 more second, \"slow\"\n```\n\n#### await and concurrency\n\nIn `sequentialStart`, execution suspends 2 seconds for the first `await`, and then another second for the second `await`. The second timer is not created until the first has already fired, so the code finishes after 3 seconds.\n\nIn `sequentialWait`, both timers are created and then `await`ed. The timers run concurrently, which means the code finishes in 2 rather than 3 seconds, i.e. the slowest timer. However, the `await` calls still run in series, which means the second `await` will wait for the first one to finish. In this case, the result of the fastest timer is processed after the slowest.\n\nIf you wish to safely perform other jobs after two or more jobs run concurrently and are complete, you must await a call to [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) or [`Promise.allSettled()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled) before that job.\n\n**Warning:** The functions `sequentialWait` and `concurrent1` are not functionally equivalent.\n\nIn `sequentialWait`, if promise `fast` rejects before promise `slow` is fulfilled, then an unhandled promise rejection error will be raised, regardless of whether the caller has configured a catch clause.\n\nIn `concurrent1`, `Promise.all` wires up the promise chain in one go, meaning that the operation will fail-fast regardless of the order of rejection of the promises, and the error will always occur within the configured promise chain, enabling it to be caught in the normal way.\n\n### [Rewriting a Promise chain with an async function](#rewriting_a_promise_chain_with_an_async_function)\n\nAn API that returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) will result in a promise chain, and it splits the function into many parts. Consider the following code:\n\n```\nfunction getProcessedData(url) {\n  return downloadData(url) // returns a promise\n    .catch((e) => downloadFallbackData(url)) // returns a promise\n    .then((v) => processDataInWorker(v)); // returns a promise\n}\n```\n\nit can be rewritten with a single async function as follows:\n\n```\nasync function getProcessedData(url) {\n  let v;\n  try {\n    v = await downloadData(url);\n  } catch (e) {\n    v = await downloadFallbackData(url);\n  }\n  return processDataInWorker(v);\n}\n```\n\nAlternatively, you can chain the promise with `catch()`:\n\n```\nasync function getProcessedData(url) {\n  const v = await downloadData(url).catch((e) => downloadFallbackData(url));\n  return processDataInWorker(v);\n}\n```\n\nIn the two rewritten versions, notice there is no `await` statement after the `return` keyword, although that would be valid too: The return value of an async function is implicitly wrapped in [`Promise.resolve`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) - if it's not already a promise itself (as in the examples).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-async-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "async function - JavaScript | MDN",
    "description": "The async function declaration creates a binding of a new async function to a given name. The await keyword is permitted within the function body, enabling asynchronous, promise-based behavior to be written in a cleaner style and avoiding the need to explicitly configure promise chains.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator",
    "markdown": "# Intl.Collator - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Collator`** object enables language-sensitive string comparison.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`Intl.Collator()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator)\n\nCreates a new `Collator` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.Collator.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/supportedLocalesOf)\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.Collator.prototype` and shared by all `Intl.Collator` instances.\n\n[`Intl.Collator.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.Collator` instances, the initial value is the [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator) constructor.\n\n[`Intl.Collator.prototype[@@toStringTag]`](#intl.collator.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.Collator\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.Collator.prototype.compare()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare)\n\nGetter function that compares two strings according to the sort order of this [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) object.\n\n[`Intl.Collator.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/resolvedOptions)\n\nReturns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n## [Examples](#examples)\n\n### [Using Collator](#using_collator)\n\nThe following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:\n\n```\nconsole.log(new Intl.Collator().compare(\"a\", \"c\")); // -1, or some other negative value\nconsole.log(new Intl.Collator().compare(\"c\", \"a\")); // 1, or some other positive value\nconsole.log(new Intl.Collator().compare(\"a\", \"a\")); // 0\n```\n\nNote that the results shown in the code above can vary between browsers and browser versions. This is because the values are implementation-specific. That is, the specification requires only that the before and after values are negative and positive.\n\n### [Using locales](#using_locales)\n\nThe results provided by [`Intl.Collator.prototype.compare()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare) vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\n// in German, ä sorts with a\nconsole.log(new Intl.Collator(\"de\").compare(\"ä\", \"z\"));\n// -1, or some other negative value\n\n// in Swedish, ä sorts after z\nconsole.log(new Intl.Collator(\"sv\").compare(\"ä\", \"z\"));\n// 1, or some other positive value\n```\n\n### [Using options](#using_options)\n\nThe results provided by [`Intl.Collator.prototype.compare()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare) can be customized using the `options` argument:\n\n```\n// in German, ä has a as the base letter\nconsole.log(new Intl.Collator(\"de\", { sensitivity: \"base\" }).compare(\"ä\", \"a\"));\n// 0\n\n// in Swedish, ä and a are separate base letters\nconsole.log(new Intl.Collator(\"sv\", { sensitivity: \"base\" }).compare(\"ä\", \"a\"));\n// 1, or some other positive value\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# collator-objects](https://tc39.es/ecma402/#collator-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Collator - JavaScript | MDN",
    "description": "The Intl.Collator object enables language-sensitive string comparison.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat",
    "markdown": "# Intl.DateTimeFormat - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DateTimeFormat`** object enables language-sensitive date and time formatting.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`Intl.DateTimeFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat)\n\nCreates a new `Intl.DateTimeFormat` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.DateTimeFormat.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/supportedLocalesOf)\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.DateTimeFormat.prototype` and shared by all `Intl.DateTimeFormat` instances.\n\n[`Intl.DateTimeFormat.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.DateTimeFormat` instances, the initial value is the [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) constructor.\n\n[`Intl.DateTimeFormat.prototype[@@toStringTag]`](#intl.datetimeformat.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.DateTimeFormat\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.DateTimeFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format)\n\nGetter function that formats a date according to the locale and formatting options of this `DateTimeFormat` object.\n\n[`Intl.DateTimeFormat.prototype.formatRange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange)\n\nThis method receives two [Dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) and formats the date range in the most concise way based on the locale and options provided when instantiating `DateTimeFormat`.\n\n[`Intl.DateTimeFormat.prototype.formatRangeToParts()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRangeToParts)\n\nThis method receives two [Dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) and returns an Array of objects containing the locale-specific tokens representing each part of the formatted date range.\n\n[`Intl.DateTimeFormat.prototype.formatToParts()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the date string in parts that can be used for custom locale-aware formatting.\n\n[`Intl.DateTimeFormat.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions)\n\nReturns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## [Examples](#examples)\n\n### [Using DateTimeFormat](#using_datetimeformat)\n\nIn basic use without specifying a locale, `DateTimeFormat` uses the default locale and default options.\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// toLocaleString without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(new Intl.DateTimeFormat().format(date));\n// \"12/19/2012\" if run with en-US locale (language) and time zone America/Los_Angeles (UTC-0800)\n```\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// Results below use the time zone of America/Los_Angeles (UTC-0800, Pacific Standard Time)\n\n// US English uses month-day-year order\nconsole.log(new Intl.DateTimeFormat(\"en-US\").format(date));\n// \"12/19/2012\"\n\n// British English uses day-month-year order\nconsole.log(new Intl.DateTimeFormat(\"en-GB\").format(date));\n// \"19/12/2012\"\n\n// Korean uses year-month-day order\nconsole.log(new Intl.DateTimeFormat(\"ko-KR\").format(date));\n// \"2012. 12. 19.\"\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(new Intl.DateTimeFormat(\"ar-EG\").format(date));\n// \"١٩‏/١٢‏/٢٠١٢\"\n\n// for Japanese, applications may want to use the Japanese calendar,\n// where 2012 was the year 24 of the Heisei era\nconsole.log(new Intl.DateTimeFormat(\"ja-JP-u-ca-japanese\").format(date));\n// \"24/12/19\"\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(new Intl.DateTimeFormat([\"ban\", \"id\"]).format(date));\n// \"19/12/2012\"\n```\n\n### [Using options](#using_options)\n\nThe date and time formats can be customized using the `options` argument:\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0, 200));\n\n// request a weekday along with a long date\nlet options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconsole.log(new Intl.DateTimeFormat(\"de-DE\", options).format(date));\n// \"Donnerstag, 20. Dezember 2012\"\n\n// an application may want to use UTC and make that visible\noptions.timeZone = \"UTC\";\noptions.timeZoneName = \"short\";\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(date));\n// \"Thursday, December 20, 2012, GMT\"\n\n// sometimes you want to be more precise\noptions = {\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  timeZone: \"Australia/Sydney\",\n  timeZoneName: \"short\",\n};\nconsole.log(new Intl.DateTimeFormat(\"en-AU\", options).format(date));\n// \"2:00:00 pm AEDT\"\n\n// sometimes you want to be very precise\noptions.fractionalSecondDigits = 3; //number digits for fraction-of-seconds\nconsole.log(new Intl.DateTimeFormat(\"en-AU\", options).format(date));\n// \"2:00:00.200 pm AEDT\"\n\n// sometimes even the US needs 24-hour time\noptions = {\n  year: \"numeric\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  hour12: false,\n  timeZone: \"America/Los_Angeles\",\n};\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(date));\n// \"12/19/2012, 19:00:00\"\n\n// to specify options but use the browser's default locale, use undefined\nconsole.log(new Intl.DateTimeFormat(undefined, options).format(date));\n// \"12/19/2012, 19:00:00\"\n\n// sometimes it's helpful to include the period of the day\noptions = { hour: \"numeric\", dayPeriod: \"short\" };\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(date));\n// 10 at night\n```\n\nThe used calendar and numbering formats can also be set independently via `options` arguments:\n\n```\nconst options = { calendar: \"chinese\", numberingSystem: \"arab\" };\nconst dateFormat = new Intl.DateTimeFormat(undefined, options);\nconst usedOptions = dateFormat.resolvedOptions();\n\nconsole.log(usedOptions.calendar);\n// \"chinese\"\n\nconsole.log(usedOptions.numberingSystem);\n// \"arab\"\n\nconsole.log(usedOptions.timeZone);\n// \"America/New_York\" (the users default timezone)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# datetimeformat-objects](https://tc39.es/ecma402/#datetimeformat-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DateTimeFormat - JavaScript | MDN",
    "description": "The Intl.DateTimeFormat object enables language-sensitive date and time formatting.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat",
    "markdown": "# Intl.DurationFormat - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`Intl.DurationFormat`** object enables language-sensitive duration formatting.\n\n## [Constructor](#constructor)\n\n[`Intl.DurationFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/DurationFormat) Experimental\n\nCreates a new `Intl.DurationFormat` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.DurationFormat.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/supportedLocalesOf) Experimental\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.DurationFormat.prototype` and shared by all `Intl.DurationFormat` instances.\n\n[`Intl.DurationFormat.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.DurationFormat` instances, the initial value is the [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/DurationFormat) constructor.\n\n[`Intl.DurationFormat.prototype[@@toStringTag]`](#intl.durationformat.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.DurationFormat\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.DurationFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/format) Experimental\n\nGetter function that formats a duration according to the locale and formatting options of this `DurationFormat` object.\n\n[`Intl.DurationFormat.prototype.formatToParts()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/formatToParts) Experimental\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the formatted duration in parts.\n\n[`Intl.DurationFormat.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/resolvedOptions) Experimental\n\nReturns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## [Examples](#examples)\n\n### [Using Intl.DurationFormat](#using_intl.durationformat)\n\nThe examples below show how to use the `Intl.DurationFormat` object to format a duration object with various locales and styles.\n\n```\nconst duration = {\n  hours: 1,\n  minutes: 46,\n  seconds: 40,\n};\n\n// With style set to \"long\" and locale \"fr-FR\"\nnew Intl.DurationFormat(\"fr-FR\", { style: \"long\" }).format(duration);\n// \"1 heure, 46 minutes et 40 secondes\"\n\n// With style set to \"short\" and locale \"en\"\nnew Intl.DurationFormat(\"en\", { style: \"short\" }).format(duration);\n// \"1 hr, 46 min and 40 sec\"\n\n// With style set to \"narrow\" and locale \"pt\"\nnew Intl.DurationFormat(\"pt\", { style: \"narrow\" }).format(duration);\n// \"1h 46min 40s\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# durationformat-objects](https://tc39.es/proposal-intl-duration-format/#durationformat-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DurationFormat - JavaScript | MDN",
    "description": "The Intl.DurationFormat object enables language-sensitive duration formatting.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames",
    "markdown": "# Intl.DisplayNames - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DisplayNames`** object enables the consistent translation of language, region and script display names.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`Intl.DisplayNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/DisplayNames)\n\nCreates a new `Intl.DisplayNames` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.DisplayNames.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/supportedLocalesOf)\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.DisplayNames.prototype` and shared by all `Intl.DisplayNames` instances.\n\n[`Intl.DisplayNames.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.DisplayNames` instances, the initial value is the [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/DisplayNames) constructor.\n\n[`Intl.DisplayNames.prototype[@@toStringTag]`](#intl.displaynames.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.DisplayNames\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.DisplayNames.prototype.of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of)\n\nThis method receives a `code` and returns a string based on the locale and options provided when instantiating `Intl.DisplayNames`.\n\n[`Intl.DisplayNames.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/resolvedOptions)\n\nReturns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## [Examples](#examples)\n\n### [Region Code Display Names](#region_code_display_names)\n\nTo create an `Intl.DisplayNames` for a locale and get the display name for a region code.\n\n```\n// Get display names of region in English\nlet regionNames = new Intl.DisplayNames([\"en\"], { type: \"region\" });\nregionNames.of(\"419\"); // \"Latin America\"\nregionNames.of(\"BZ\"); // \"Belize\"\nregionNames.of(\"US\"); // \"United States\"\nregionNames.of(\"BA\"); // \"Bosnia & Herzegovina\"\nregionNames.of(\"MM\"); // \"Myanmar (Burma)\"\n\n// Get display names of region in Traditional Chinese\nregionNames = new Intl.DisplayNames([\"zh-Hant\"], { type: \"region\" });\nregionNames.of(\"419\"); // \"拉丁美洲\"\nregionNames.of(\"BZ\"); // \"貝里斯\"\nregionNames.of(\"US\"); // \"美國\"\nregionNames.of(\"BA\"); // \"波士尼亞與赫塞哥維納\"\nregionNames.of(\"MM\"); // \"緬甸\"\n```\n\n### [Language Display Names](#language_display_names)\n\nTo create an `Intl.DisplayNames` for a locale and get the display name for a language-script-region sequence.\n\n```\n// Get display names of language in English\nlet languageNames = new Intl.DisplayNames([\"en\"], { type: \"language\" });\nlanguageNames.of(\"fr\"); // \"French\"\nlanguageNames.of(\"de\"); // \"German\"\nlanguageNames.of(\"fr-CA\"); // \"Canadian French\"\nlanguageNames.of(\"zh-Hant\"); // \"Traditional Chinese\"\nlanguageNames.of(\"en-US\"); // \"American English\"\nlanguageNames.of(\"zh-TW\"); // \"Chinese (Taiwan)\"]\n\n// Get display names of language in Traditional Chinese\nlanguageNames = new Intl.DisplayNames([\"zh-Hant\"], { type: \"language\" });\nlanguageNames.of(\"fr\"); // \"法文\"\nlanguageNames.of(\"zh\"); // \"中文\"\nlanguageNames.of(\"de\"); // \"德文\"\n```\n\n### [Script Code Display Names](#script_code_display_names)\n\nTo create an `Intl.DisplayNames` for a locale and get the display name for a script code.\n\n```\n// Get display names of script in English\nlet scriptNames = new Intl.DisplayNames([\"en\"], { type: \"script\" });\n// Get script names\nscriptNames.of(\"Latn\"); // \"Latin\"\nscriptNames.of(\"Arab\"); // \"Arabic\"\nscriptNames.of(\"Kana\"); // \"Katakana\"\n\n// Get display names of script in Traditional Chinese\nscriptNames = new Intl.DisplayNames([\"zh-Hant\"], { type: \"script\" });\nscriptNames.of(\"Latn\"); // \"拉丁文\"\nscriptNames.of(\"Arab\"); // \"阿拉伯文\"\nscriptNames.of(\"Kana\"); // \"片假名\"\n```\n\n### [Currency Code Display Names](#currency_code_display_names)\n\nTo create an `Intl.DisplayNames` for a locale and get the display name for currency code.\n\n```\n// Get display names of currency code in English\nlet currencyNames = new Intl.DisplayNames([\"en\"], { type: \"currency\" });\n// Get currency names\ncurrencyNames.of(\"USD\"); // \"US Dollar\"\ncurrencyNames.of(\"EUR\"); // \"Euro\"\ncurrencyNames.of(\"TWD\"); // \"New Taiwan Dollar\"\ncurrencyNames.of(\"CNY\"); // \"Chinese Yuan\"\n\n// Get display names of currency code in Traditional Chinese\ncurrencyNames = new Intl.DisplayNames([\"zh-Hant\"], { type: \"currency\" });\ncurrencyNames.of(\"USD\"); // \"美元\"\ncurrencyNames.of(\"EUR\"); // \"歐元\"\ncurrencyNames.of(\"TWD\"); // \"新台幣\"\ncurrencyNames.of(\"CNY\"); // \"人民幣\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# intl-displaynames-objects](https://tc39.es/ecma402/#intl-displaynames-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.DisplayNames - JavaScript | MDN",
    "description": "The Intl.DisplayNames object enables the consistent translation of language, region and script display names.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat",
    "markdown": "# Intl.RelativeTimeFormat - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.RelativeTimeFormat`** object enables language-sensitive relative time formatting.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`Intl.RelativeTimeFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat)\n\nCreates a new `Intl.RelativeTimeFormat` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.RelativeTimeFormat.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/supportedLocalesOf)\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.RelativeTimeFormat.prototype` and shared by all `Intl.RelativeTimeFormat` instances.\n\n[`Intl.RelativeTimeFormat.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.RelativeTimeFormat` instances, the initial value is the [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat) constructor.\n\n[`Intl.RelativeTimeFormat.prototype[@@toStringTag]`](#intl.relativetimeformat.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.RelativeTimeFormat\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.RelativeTimeFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format)\n\nFormats a `value` and a `unit` according to the locale and formatting options of the given `Intl.RelativeTimeFormat` object.\n\n[`Intl.RelativeTimeFormat.prototype.formatToParts()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the relative time format in parts that can be used for custom locale-aware formatting.\n\n[`Intl.RelativeTimeFormat.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions)\n\nReturns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## [Examples](#examples)\n\n### [Basic format usage](#basic_format_usage)\n\nThe following example shows how to use a relative time formatter for the English language.\n\n```\n// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n  localeMatcher: \"best fit\", // other values: \"lookup\"\n  numeric: \"always\", // other values: \"auto\"\n  style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"1 day ago\"\n\n// Format relative time using positive value (1).\nrtf.format(1, \"day\"); // \"in 1 day\"\n```\n\n### [Using formatToParts](#using_formattoparts)\n\nThe following example shows how to create a relative time formatter returning formatted parts.\n\n```\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using the day unit.\nrtf.formatToParts(-1, \"day\");\n// [{ type: \"literal\", value: \"yesterday\"}]\n\nrtf.formatToParts(100, \"day\");\n// [\n//   { type: \"literal\", value: \"in \" },\n//   { type: \"integer\", value: \"100\", unit: \"day\" },\n//   { type: \"literal\", value: \" days\" }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# relativetimeformat-objects](https://tc39.es/ecma402/#relativetimeformat-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.RelativeTimeFormat - JavaScript | MDN",
    "description": "The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules",
    "markdown": "# Intl.PluralRules - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.PluralRules`** object enables plural-sensitive formatting and plural-related language rules.\n\n## [Description](#description)\n\nLanguages use different patterns for expressing both plural numbers of items (cardinal numbers) and for expressing the order of items (ordinal numbers). English has two forms for expressing cardinal numbers: one for the singular \"item\" (1 hour, 1 dog, 1 fish) and the other for zero or any other number of \"items\" (0 hours, 2 lemmings, 100000.5 fish), while Chinese has only one form, and Arabic has six! Similarly, English has four forms for expressing ordinal numbers: \"th\", \"st\", \"nd\", \"rd\", giving the sequence: 0th, 1st, 2nd, 3rd, 4th, 5th, ..., 21st, 22nd, 23rd, 24th, 25th, and so on, while both Chinese and Arabic only have one form for ordinal numbers.\n\nGiven a particular language and set of formatting options, the methods [`Intl.PluralRules.prototype.select()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/select) and [`Intl.PluralRules.prototype.selectRange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange) return a _tag_ that represents the plural form of a single or a range of numbers, cardinal or ordinal. Code can use the returned tags to represent numbers appropriately for the given language. The full set of tags that might be returned are: `zero`, `one`, `two`, `few`, `many`, and `other` (the \"general\" plural form, also used if the language only has one form).\n\nAs English only has two forms for cardinal numbers, the `select()` method returns only two tags: `\"one\"` for the singular case, and `\"other\"` for all other cardinal numbers. This allows construction of sentences that make sense in English for each case, such as: \"1 dog is happy; do you want to play with it?\" and \"10 dogs are happy; do you want to play with them?\".\n\nCreating appropriate sentences for each form depends on the language, and even in English may not be as simple as just adding \"s\" to a noun to make the plural form. Using the example above, we see that the form may affect:\n\n*   **Nouns**: 1 dogs/2 dogs (but not \"fish\" or \"sheep\", which have the same singular and plural form).\n*   **Verbs**: 1 dog _is_ happy, 2 dogs _are_ happy\n*   **Pronouns** (and other referents): Do you want to play with _it_ / _them_.\n\nOther languages have more forms, and choosing appropriate sentences can be even more complex.\n\n`select()` can return any of four tags for ordinal numbers in English, representing each of the allowed forms: `one` for \"st\" numbers (1, 21, 31, ...), `two` for \"nd\" numbers (2, 22, 32, ...), `few` for \"rd\" numbers (3, 33, 43, ...), and `other` for \"th\" numbers (0, 4-20, etc.). Again, the returned tags allow appropriate formatting of strings describing an ordinal number.\n\nFor more information about the rules and how they are used, see [Plural Rules](https://cldr.unicode.org/index/cldr-spec/plural-rules). For a list of the rules and how they apply for different languages, see the [LDML Language Plural Rules](https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html).\n\n## [Constructor](#constructor)\n\n[`Intl.PluralRules()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules)\n\nCreates a new `Intl.PluralRules` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.PluralRules.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/supportedLocalesOf)\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.PluralRules.prototype` and shared by all `Intl.PluralRules` instances.\n\n[`Intl.PluralRules.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.PluralRules` instances, the initial value is the [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules) constructor.\n\n[`Intl.PluralRules.prototype[@@toStringTag]`](#intl.pluralrules.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.PluralRules\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.PluralRules.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/resolvedOptions)\n\nReturns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n[`Intl.PluralRules.prototype.select()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/select)\n\nReturns a string indicating which plural rule to use for locale-aware formatting.\n\n[`Intl.PluralRules.prototype.selectRange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange)\n\nThis method receives two values and returns a string indicating which plural rule to use for locale-aware formatting.\n\n## [Examples](#examples)\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized plural rules for cardinal numbers.\n\nIn order to get the format for the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the [constructor `locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules#locales) argument:\n\n```\n// US English\nconst enCardinalRules = new Intl.PluralRules(\"en-US\");\nconsole.log(enCardinalRules.select(0)); // \"other\"\nconsole.log(enCardinalRules.select(1)); // \"one\"\nconsole.log(enCardinalRules.select(2)); // \"other\"\nconsole.log(enCardinalRules.select(3)); // \"other\"\n\n// Arabic\nconst arCardinalRules = new Intl.PluralRules(\"ar-EG\");\nconsole.log(arCardinalRules.select(0)); // \"zero\"\nconsole.log(arCardinalRules.select(1)); // \"one\"\nconsole.log(arCardinalRules.select(2)); // \"two\"\nconsole.log(arCardinalRules.select(6)); // \"few\"\nconsole.log(arCardinalRules.select(18)); // \"many\"\n```\n\n### [Using options](#using_options)\n\nThe plural form of the specified number may also depend on [constructor `options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules#options), such as how the number is rounded, and whether it is cardinal or ordinal.\n\nThis example shows how you can set the type of rules to \"ordinal\", and how this affects the form for some numbers in US English.\n\n```\n// US English - ordinal\nconst enOrdinalRules = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" });\nconsole.log(enOrdinalRules.select(0)); // \"other\" (0th)\nconsole.log(enOrdinalRules.select(1)); // \"one\"   (1st)\nconsole.log(enOrdinalRules.select(2)); // \"two\"   (2nd)\nconsole.log(enOrdinalRules.select(3)); // \"few\"   (3rd)\nconsole.log(enOrdinalRules.select(4)); // \"other\" (4th)\nconsole.log(enOrdinalRules.select(21)); // \"one\"  (21st)\n```\n\n### [Formatting text using the returned tag](#formatting_text_using_the_returned_tag)\n\nThe code below extends the previous example, showing how you might use the returned tag for an ordinal number to format text in English.\n\n```\nconst enOrdinalRules = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" });\n\nconst suffixes = new Map([\n  [\"one\", \"st\"],\n  [\"two\", \"nd\"],\n  [\"few\", \"rd\"],\n  [\"other\", \"th\"],\n]);\nconst formatOrdinals = (n) => {\n  const rule = enOrdinalRules.select(n);\n  const suffix = suffixes.get(rule);\n  return `${n}${suffix}`;\n};\n\nformatOrdinals(0); // '0th'\nformatOrdinals(1); // '1st'\nformatOrdinals(2); // '2nd'\nformatOrdinals(3); // '3rd'\nformatOrdinals(4); // '4th'\nformatOrdinals(11); // '11th'\nformatOrdinals(21); // '21st'\nformatOrdinals(42); // '42nd'\nformatOrdinals(103); // '103rd'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# pluralrules-objects](https://tc39.es/ecma402/#pluralrules-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.PluralRules - JavaScript | MDN",
    "description": "The Intl.PluralRules object enables plural-sensitive formatting and plural-related language rules.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale",
    "markdown": "# Intl.Locale - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Locale`** object is a standard built-in property of the Intl object that represents a Unicode locale identifier.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe **`Intl.Locale`** object was created to allow for easier manipulation of Unicode locales. Unicode represents locales with a string, called a _locale identifier_. The locale identifier consists of a _language identifier_ and _extension tags_. Language identifiers are the core of the locale, consisting of _language_, _script_, and _region subtags_. Additional information about the locale is stored in the optional _extension tags_. Extension tags hold information about locale aspects such as calendar type, clock type, and numbering system type.\n\nTraditionally, the Intl API used strings to represent locales, just as Unicode does. This is a simple and lightweight solution that works well. Adding a Locale class, however, adds ease of parsing and manipulating the language, script, and region, as well as extension tags. The following properties of `Intl.Locale` correspond to Unicode locale identifier subtags:\n\n| Property | Corresponding subtag |\n| --- | --- |\n| [`language`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/language) | `language` (first part) |\n| [`script`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/script) | `script` (second part) |\n| [`region`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/region) | `region` (second/third part) |\n| [`calendar`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar) | `ca` (extension) |\n| [`caseFirst`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/caseFirst) | `kf` (extension) |\n| [`collation`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation) | `co` (extension) |\n| [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle) | `hc` (extension) |\n| [`numberingSystem`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem) | `nu` (extension) |\n| [`numeric`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric) | `kn` (extension) |\n\nThe information above is exactly provided as-is when the `Locale` object is constructed, without consulting any external database. The `Intl.Locale` object additionally provides some methods that return information about the locale's real-world information, such as available calendars, collations, and numbering systems.\n\n## [Constructor](#constructor)\n\n[`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale)\n\nCreates a new `Locale` object.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.Locale.prototype` and shared by all `Intl.Locale` instances.\n\n[`Intl.Locale.prototype.baseName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName)\n\nReturns basic, core information about the `Locale` in the form of a substring of the complete data string.\n\n[`Intl.Locale.prototype.calendar`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar)\n\nReturns the part of the `Locale` that indicates the Locale's calendar era.\n\n[`Intl.Locale.prototype.caseFirst`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/caseFirst)\n\nReturns whether case is taken into account for the locale's collation rules.\n\n[`Intl.Locale.prototype.collation`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation)\n\nReturns the collation type for the `Locale`, which is used to order strings according to the locale's rules.\n\n[`Intl.Locale.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.Locale` instances, the initial value is the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor.\n\n[`Intl.Locale.prototype.hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n\nReturns the time keeping format convention used by the locale.\n\n[`Intl.Locale.prototype.language`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/language)\n\nReturns the language associated with the locale.\n\n[`Intl.Locale.prototype.numberingSystem`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem)\n\nReturns the numeral system used by the locale.\n\n[`Intl.Locale.prototype.numeric`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric)\n\nReturns whether the locale has special collation handling for numeric characters.\n\n[`Intl.Locale.prototype.region`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/region)\n\nReturns the region of the world (usually a country) associated with the locale.\n\n[`Intl.Locale.prototype.script`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/script)\n\nReturns the script used for writing the particular language used in the locale.\n\n[`Intl.Locale.prototype[@@toStringTag]`](#intl.locale.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.Locale\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.Locale.prototype.getCalendars()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of available calendar identifiers, according to the locale's rules.\n\n[`Intl.Locale.prototype.getCollations()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of the collation types for the `Locale`.\n\n[`Intl.Locale.prototype.getHourCycles()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of hour cycle identifiers, indicating either the 12-hour clock (\"h12\"), the Japanese 12-hour clock (\"h11\"), the 24-hour clock (\"h23\"), or the unused format \"h24\".\n\n[`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of numbering system identifiers available according to the locale's rules.\n\n[`Intl.Locale.prototype.getTextInfo()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo)\n\nReturns the part indicating the ordering of characters `ltr` (left-to-right) or `rtl` (right-to-left).\n\n[`Intl.Locale.prototype.getTimeZones()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of time zone identifiers, associated with the `Locale`.\n\n[`Intl.Locale.prototype.getWeekInfo()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo)\n\nReturns [UTS 35's Week Elements](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements) according to the locale rules.\n\n[`Intl.Locale.prototype.maximize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize)\n\nGets the most likely values for the language, script, and region of the locale based on existing values.\n\n[`Intl.Locale.prototype.minimize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/minimize)\n\nAttempts to remove information about the locale that would be added by calling [`maximize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize).\n\n[`Intl.Locale.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/toString)\n\nReturns the Locale's full locale identifier string.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nAt its very simplest, the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor takes a locale identifier string as its argument:\n\n```\nconst us = new Intl.Locale(\"en-US\");\n```\n\n### [Using the Locale constructor with an options object](#using_the_locale_constructor_with_an_options_object)\n\nThe constructor also takes an optional configuration object argument, which can contain any of several extension types. For example, set the [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle) property of the configuration object to your desired hour cycle type, and then pass it into the constructor:\n\n```\nconst us12hour = new Intl.Locale(\"en-US\", { hourCycle: \"h12\" });\nconsole.log(us12hour.hourCycle); // Prints \"h12\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# locale-objects](https://tc39.es/ecma402/#locale-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.Locale - JavaScript | MDN",
    "description": "The Intl.Locale object is a standard built-in property of the Intl object that represents a Unicode locale identifier.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter",
    "markdown": "# Intl.Segmenter - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Segmenter`** object enables locale-sensitive text segmentation, enabling you to get meaningful items (graphemes, words or sentences) from a string.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`Intl.Segmenter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter)\n\nCreates a new `Intl.Segmenter` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.Segmenter.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/supportedLocalesOf)\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.Segmenter.prototype` and shared by all `Intl.Segmenter` instances.\n\n[`Intl.Segmenter.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.Segmenter` instances, the initial value is the [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter) constructor.\n\n[`Intl.Segmenter.prototype[@@toStringTag]`](#intl.segmenter.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.Segmenter\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.Segmenter.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/resolvedOptions)\n\nReturns a new object with properties reflecting the locale and granularity options computed during initialization of this `Intl.Segmenter` object.\n\n[`Intl.Segmenter.prototype.segment()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment)\n\nReturns a new iterable [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) instance representing the segments of a string according to the locale and granularity of this `Intl.Segmenter` instance.\n\n## [Examples](#examples)\n\n### [Basic usage and difference from String.prototype.split()](#basic_usage_and_difference_from_string.prototype.split)\n\nIf we were to use [`String.prototype.split(\" \")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) to segment a text in words, we would not get the correct result if the locale of the text does not use whitespaces between words (which is the case for Japanese, Chinese, Thai, Lao, Khmer, Myanmar, etc.).\n\n```\nconst str = \"吾輩は猫である。名前はたぬき。\";\nconsole.table(str.split(\" \"));\n// ['吾輩は猫である。名前はたぬき。']\n// The two sentences are not correctly segmented.\n```\n\n```\nconst str = \"吾輩は猫である。名前はたぬき。\";\nconst segmenterJa = new Intl.Segmenter(\"ja-JP\", { granularity: \"word\" });\n\nconst segments = segmenterJa.segment(str);\nconsole.table(Array.from(segments));\n// [{segment: '吾輩', index: 0, input: '吾輩は猫である。名前はたぬき。', isWordLike: true},\n// etc.\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# segmenter-objects](https://tc39.es/ecma402/#segmenter-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser",
    "title": "Intl.Segmenter - JavaScript | MDN",
    "description": "The Intl.Segmenter object enables locale-sensitive text segmentation, enabling you to get meaningful items (graphemes, words or sentences) from a string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat",
    "markdown": "# Intl.NumberFormat - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.NumberFormat`** object enables language-sensitive number formatting.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`Intl.NumberFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat)\n\nCreates a new `NumberFormat` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.NumberFormat.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/supportedLocalesOf)\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.NumberFormat.prototype` and shared by all `Intl.NumberFormat` instances.\n\n[`Intl.NumberFormat.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.NumberFormat` instances, the initial value is the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor.\n\n[`Intl.NumberFormat.prototype[@@toStringTag]`](#intl.numberformat.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.NumberFormat\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.NumberFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format)\n\nGetter function that formats a number according to the locale and formatting options of this [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object.\n\n[`Intl.NumberFormat.prototype.formatRange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange)\n\nGetter function that formats a range of numbers according to the locale and formatting options of the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object from which the method is called.\n\n[`Intl.NumberFormat.prototype.formatRangeToParts()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRangeToParts)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the range of number strings in parts that can be used for custom locale-aware formatting.\n\n[`Intl.NumberFormat.prototype.formatToParts()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts)\n\nReturns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the number string in parts that can be used for custom locale-aware formatting.\n\n[`Intl.NumberFormat.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions)\n\nReturns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned.\n\n```\nconst number = 3500;\n\nconsole.log(new Intl.NumberFormat().format(number));\n// '3,500' if in US English locale\n```\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconst number = 123456.789;\n\n// German uses comma as decimal separator and period for thousands\nconsole.log(new Intl.NumberFormat(\"de-DE\").format(number));\n// 123.456,789\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(new Intl.NumberFormat(\"ar-EG\").format(number));\n// ١٢٣٤٥٦٫٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(new Intl.NumberFormat(\"en-IN\").format(number));\n// 1,23,456.789\n\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(new Intl.NumberFormat(\"zh-Hans-CN-u-nu-hanidec\").format(number));\n// 一二三,四五六.七八九\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(new Intl.NumberFormat([\"ban\", \"id\"]).format(number));\n// 123.456,789\n```\n\n### [Using options](#using_options)\n\nThe results can be customized using the [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) argument:\n\n```\nconst number = 123456.789;\n\n// request a currency format\nconsole.log(\n  new Intl.NumberFormat(\"de-DE\", { style: \"currency\", currency: \"EUR\" }).format(\n    number,\n  ),\n);\n// 123.456,79 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(\n  new Intl.NumberFormat(\"ja-JP\", { style: \"currency\", currency: \"JPY\" }).format(\n    number,\n  ),\n);\n// ￥123,457\n\n// limit to three significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en-IN\", { maximumSignificantDigits: 3 }).format(\n    number,\n  ),\n);\n// 1,23,000\n\n// Formatting with units\nconsole.log(\n  new Intl.NumberFormat(\"pt-PT\", {\n    style: \"unit\",\n    unit: \"kilometer-per-hour\",\n  }).format(50),\n);\n// 50 km/h\n\nconsole.log(\n  (16).toLocaleString(\"en-GB\", {\n    style: \"unit\",\n    unit: \"liter\",\n    unitDisplay: \"long\",\n  }),\n);\n// 16 litres\n```\n\nFor an exhaustive list of options, see the [`Intl.NumberFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) page.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# numberformat-objects](https://tc39.es/ecma402/#numberformat-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.NumberFormat - JavaScript | MDN",
    "description": "The Intl.NumberFormat object enables language-sensitive number formatting.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
    "markdown": "# Array.prototype.map() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`map()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances creates a new array populated with the results of calling a provided function on every element in the calling array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nmap(callbackFn)\nmap(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `map()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nA new array with each element being the result of the callback function.\n\n## [Description](#description)\n\nThe `map()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array and constructs a new array from the results. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `map()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\nSince `map` builds a new array, calling it without using the returned array is an anti-pattern; use [`forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) or [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) instead.\n\n## [Examples](#examples)\n\n### [Mapping an array of numbers to an array of square roots](#mapping_an_array_of_numbers_to_an_array_of_square_roots)\n\nThe following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.\n\n```\nconst numbers = [1, 4, 9];\nconst roots = numbers.map((num) => Math.sqrt(num));\n\n// roots is now     [1, 2, 3]\n// numbers is still [1, 4, 9]\n```\n\n### [Using map to reformat objects in an array](#using_map_to_reformat_objects_in_an_array)\n\nThe following code takes an array of objects and creates a new array containing the newly reformatted objects.\n\n```\nconst kvArray = [\n  { key: 1, value: 10 },\n  { key: 2, value: 20 },\n  { key: 3, value: 30 },\n];\n\nconst reformattedArray = kvArray.map(({ key, value }) => ({ [key]: value }));\n\nconsole.log(reformattedArray); // [{ 1: 10 }, { 2: 20 }, { 3: 30 }]\nconsole.log(kvArray);\n// [\n//   { key: 1, value: 10 },\n//   { key: 2, value: 20 },\n//   { key: 3, value: 30 }\n// ]\n```\n\n### [Using parseInt() with map()](#using_parseint_with_map)\n\nIt is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors. Consider:\n\n```\n[\"1\", \"2\", \"3\"].map(parseInt);\n```\n\nWhile one might expect `[1, 2, 3]`, the actual result is `[1, NaN, NaN]`.\n\n[`parseInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) is often used with one argument, but takes two. The first is an expression and the second is the radix to the callback function, `Array.prototype.map` passes 3 arguments: the element, the index, and the array. The third argument is ignored by [`parseInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) — but _not_ the second one! This is the source of possible confusion.\n\nHere is a concise example of the iteration steps:\n\n```\n/* first iteration  (index is 0): */ parseInt(\"1\", 0); // 1\n/* second iteration (index is 1): */ parseInt(\"2\", 1); // NaN\n/* third iteration  (index is 2): */ parseInt(\"3\", 2); // NaN\n```\n\nTo solve this, define another function that only takes one argument:\n\n```\n[\"1\", \"2\", \"3\"].map((str) => parseInt(str, 10)); // [1, 2, 3]\n```\n\nYou can also use the [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) function, which only takes one argument:\n\n```\n[\"1\", \"2\", \"3\"].map(Number); // [1, 2, 3]\n\n// But unlike parseInt(), Number() will also return a float or (resolved) exponential notation:\n[\"1.1\", \"2.2e2\", \"3e300\"].map(Number); // [1.1, 220, 3e+300]\n\n// For comparison, if we use parseInt() on the array above:\n[\"1.1\", \"2.2e2\", \"3e300\"].map((str) => parseInt(str, 10)); // [1, 2, 3]\n```\n\nSee [A JavaScript optional argument hazard](https://wirfs-brock.com/allen/posts/166) by Allen Wirfs-Brock for more discussions.\n\n### [Mapped array contains undefined](#mapped_array_contains_undefined)\n\nWhen [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) or nothing is returned, the resulting array contains `undefined`. If you want to delete the element instead, chain a [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) method, or use the [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) method and return an empty array to signify deletion.\n\n```\nconst numbers = [1, 2, 3, 4];\nconst filteredNumbers = numbers.map((num, index) => {\n  if (index < 3) {\n    return num;\n  }\n});\n\n// index goes from 0, so the filterNumbers are 1,2,3 and undefined.\n// filteredNumbers is [1, 2, 3, undefined]\n// numbers is still [1, 2, 3, 4]\n```\n\n### [Side-effectful mapping](#side-effectful_mapping)\n\nThe callback can have side effects.\n\n```\nconst cart = [5, 15, 25];\nlet total = 0;\nconst withTax = cart.map((cost) => {\n  total += cost;\n  return cost * 1.2;\n});\nconsole.log(withTax); // [6, 18, 30]\nconsole.log(total); // 45\n```\n\nThis is not recommended, because copying methods are best used with pure functions. In this case, we can choose to iterate the array twice.\n\n```\nconst cart = [5, 15, 25];\nconst total = cart.reduce((acc, cost) => acc + cost, 0);\nconst withTax = cart.map((cost) => cost * 1.2);\n```\n\nSometimes this pattern goes to its extreme and the _only_ useful thing that `map()` does is causing side effects.\n\n```\nconst products = [\n  { name: \"sports car\" },\n  { name: \"laptop\" },\n  { name: \"phone\" },\n];\n\nproducts.map((product) => {\n  product.price = 100;\n});\n```\n\nAs mentioned previously, this is an anti-pattern. If you don't use the return value of `map()`, use `forEach()` or a `for...of` loop instead.\n\n```\nproducts.forEach((product) => {\n  product.price = 100;\n});\n```\n\nOr, if you want to create a new array instead:\n\n```\nconst productsWithPrice = products.map((product) => {\n  return { ...product, price: 100 };\n});\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `map()` to create a new array where each element is the average of its neighbors and itself.\n\n```\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst averaged = numbers\n  .filter((num) => num > 0)\n  .map((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    const prev = arr[idx - 1];\n    const next = arr[idx + 1];\n    let count = 1;\n    let total = num;\n    if (prev !== undefined) {\n      count++;\n      total += prev;\n    }\n    if (next !== undefined) {\n      count++;\n      total += next;\n    }\n    const average = total / count;\n    // Keep two decimal places\n    return Math.round(average * 100) / 100;\n  });\nconsole.log(averaged); // [2, 2.67, 2, 3.33, 5, 5.33, 5.67, 4]\n```\n\nThe `array` argument is _not_ the array that is being built — there is no way to access the array being built from the callback function.\n\n### [Using map() on sparse arrays](#using_map_on_sparse_arrays)\n\nA sparse array remains sparse after `map()`. The indices of empty slots are still empty in the returned array, and the callback function won't be called on them.\n\n```\nconsole.log(\n  [1, , 3].map((x, index) => {\n    console.log(`Visit ${index}`);\n    return x * 2;\n  }),\n);\n// Visit 0\n// Visit 2\n// [2, empty, 6]\n```\n\n### [Calling map() on non-array objects](#calling_map_on_non-array_objects)\n\nThe `map()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 5, // ignored by map() since length is 3\n};\nconsole.log(Array.prototype.map.call(arrayLike, (x) => x ** 2));\n// [ 4, 9, 16 ]\n```\n\nThis example shows how to iterate through a collection of objects collected by `querySelectorAll`. This is because `querySelectorAll` returns a `NodeList` (which is a collection of objects). In this case, we return all the selected `option`s' values on the screen:\n\n```\nconst elems = document.querySelectorAll(\"select option:checked\");\nconst values = Array.prototype.map.call(elems, ({ value }) => value);\n```\n\nYou can also use [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) to transform `elems` to an array, and then access the `map()` method.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.map](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.map) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.map() - JavaScript | MDN",
    "description": "The map() method of Array instances creates\n  a new array populated with the results of calling a provided function on\n  every element in the calling array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat",
    "markdown": "# Intl.ListFormat - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.ListFormat`** object enables language-sensitive list formatting.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`Intl.ListFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat)\n\nCreates a new `Intl.ListFormat` object.\n\n## [Static methods](#static_methods)\n\n[`Intl.ListFormat.supportedLocalesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/supportedLocalesOf)\n\nReturns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Intl.ListFormat.prototype` and shared by all `Intl.ListFormat` instances.\n\n[`Intl.ListFormat.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Intl.ListFormat` instances, the initial value is the [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat) constructor.\n\n[`Intl.ListFormat.prototype[@@toStringTag]`](#intl.listformat.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.ListFormat\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Intl.ListFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format)\n\nReturns a language-specific formatted string representing the elements of the list.\n\n[`Intl.ListFormat.prototype.formatToParts()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/formatToParts)\n\nReturns an array of objects representing the different components that can be used to format a list of values in a locale-aware fashion.\n\n[`Intl.ListFormat.prototype.resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/resolvedOptions)\n\nReturns a new object with properties reflecting the locale and style formatting options computed during the construction of the current [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) object.\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nThe following example shows how to create a List formatter using the English language.\n\n```\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"unit\" }).format(list),\n);\n// Motorcycle Bus Car\n```\n\n### [Using formatToParts](#using_formattoparts)\n\nThe following example shows how to create a List formatter returning formatted parts\n\n```\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", {\n    style: \"long\",\n    type: \"conjunction\",\n  }).formatToParts(list),\n);\n\n// [ { \"type\": \"element\", \"value\": \"Motorcycle\" },\n//   { \"type\": \"literal\", \"value\": \", \" },\n//   { \"type\": \"element\", \"value\": \"Bus\" },\n//   { \"type\": \"literal\", \"value\": \", and \" },\n//   { \"type\": \"element\", \"value\": \"Car\" } ];\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# listformat-objects](https://tc39.es/ecma402/#listformat-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl.ListFormat - JavaScript | MDN",
    "description": "The Intl.ListFormat object enables language-sensitive list formatting.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
    "markdown": "# Object.prototype.hasOwnProperty() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`hasOwnProperty()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances returns a boolean indicating whether this object has the specified property as its own property (as opposed to inheriting it).\n\n**Note:** [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) is recommended over `hasOwnProperty()`, in browsers where it is supported.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nThe [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) name or [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) of the property to test.\n\n### [Return value](#return_value)\n\nReturns `true` if the object has the specified property as own property; `false` otherwise.\n\n## [Description](#description)\n\nThe **`hasOwnProperty()`** method returns `true` if the specified property is a direct property of the object — even if the value is `null` or `undefined`. The method returns `false` if the property is inherited, or has not been declared at all. Unlike the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator, this method does not check for the specified property in the object's prototype chain.\n\nThe method can be called on _most_ JavaScript objects, because most objects descend from [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), and hence inherit its methods. For example [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) is an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), so you can use `hasOwnProperty()` method to check whether an index exists:\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Watermelon\", \"Orange\"];\nfruits.hasOwnProperty(3); // true ('Orange')\nfruits.hasOwnProperty(4); // false - not defined\n```\n\nThe method will not be available in objects where it is reimplemented, or on [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) (as these don't inherit from `Object.prototype`). Examples for these cases are given below.\n\n## [Examples](#examples)\n\n### [Using hasOwnProperty to test for an own property's existence](#using_hasownproperty_to_test_for_an_own_propertys_existence)\n\nThe following code shows how to determine whether the `example` object contains a property named `prop`.\n\n```\nconst example = {};\nexample.hasOwnProperty(\"prop\"); // false\n\nexample.prop = \"exists\";\nexample.hasOwnProperty(\"prop\"); // true - 'prop' has been defined\n\nexample.prop = null;\nexample.hasOwnProperty(\"prop\"); // true - own property exists with value of null\n\nexample.prop = undefined;\nexample.hasOwnProperty(\"prop\"); // true - own property exists with value of undefined\n```\n\n### [Direct vs. inherited properties](#direct_vs._inherited_properties)\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n```\nconst example = {};\nexample.prop = \"exists\";\n\n// `hasOwnProperty` will only return true for direct properties:\nexample.hasOwnProperty(\"prop\"); // true\nexample.hasOwnProperty(\"toString\"); // false\nexample.hasOwnProperty(\"hasOwnProperty\"); // false\n\n// The `in` operator will return true for direct or inherited properties:\n\"prop\" in example; // true\n\"toString\" in example; // true\n\"hasOwnProperty\" in example; // true\n```\n\n### [Iterating over the properties of an object](#iterating_over_the_properties_of_an_object)\n\nThe following example shows how to iterate over the enumerable properties of an object without executing on inherited properties.\n\n```\nconst buz = {\n  fog: \"stack\",\n};\n\nfor (const name in buz) {\n  if (buz.hasOwnProperty(name)) {\n    console.log(`this is fog (${name}) for sure. Value: ${buz[name]}`);\n  } else {\n    console.log(name); // toString or something else\n  }\n}\n```\n\nNote that the [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop only iterates enumerable items: the absence of non-enumerable properties emitted from the loop does not imply that `hasOwnProperty` itself is confined strictly to enumerable items. You can iterate over non-enumerable properties with [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames).\n\n### [Using hasOwnProperty as a property name](#using_hasownproperty_as_a_property_name)\n\nJavaScript does not protect the property name `hasOwnProperty`; an object that has a property with this name may return incorrect results:\n\n```\nconst foo = {\n  hasOwnProperty() {\n    return false;\n  },\n  bar: \"Here be dragons\",\n};\n\nfoo.hasOwnProperty(\"bar\"); // re-implementation always returns false\n```\n\nThe recommended way to overcome this problem is to instead use [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) (in browsers that support it). Other alternatives include using an _external_ `hasOwnProperty`:\n\n```\nconst foo = { bar: \"Here be dragons\" };\n\n// Use Object.hasOwn() method - recommended\nObject.hasOwn(foo, \"bar\"); // true\n\n// Use the hasOwnProperty property from the Object prototype\nObject.prototype.hasOwnProperty.call(foo, \"bar\"); // true\n\n// Use another Object's hasOwnProperty\n// and call it with 'this' set to foo\n({}).hasOwnProperty.call(foo, \"bar\"); // true\n```\n\nNote that in the first two cases there are no newly created objects.\n\n### [Objects created with Object.create(null)](#objects_created_with_object.createnull)\n\n[`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) do not inherit from `Object.prototype`, making `hasOwnProperty()` inaccessible.\n\n```\nconst foo = Object.create(null);\nfoo.prop = \"exists\";\nfoo.hasOwnProperty(\"prop\"); // Uncaught TypeError: foo.hasOwnProperty is not a function\n```\n\nThe solutions in this case are the same as for the previous section: use [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) by preference, otherwise use an external object's `hasOwnProperty()`.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.hasownproperty](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.hasownproperty) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.hasOwnProperty() - JavaScript | MDN",
    "description": "The hasOwnProperty() method of Object instances returns a boolean indicating whether this\n  object has the specified property as its own property (as opposed to inheriting\n  it).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf",
    "markdown": "# Object.prototype.isPrototypeOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`isPrototypeOf()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances checks if this object exists in another object's prototype chain.\n\n**Note:** `isPrototypeOf()` differs from the [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator. In the expression `object instanceof AFunction`, `object`'s prototype chain is checked against `AFunction.prototype`, not against `AFunction` itself.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`object`](#object)\n\nThe object whose prototype chain will be searched.\n\n### [Return value](#return_value)\n\nA boolean indicating whether the calling object (`this`) lies in the prototype chain of `object`. Directly returns `false` when `object` is not an object (i.e. a primitive).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `this` is `null` or `undefined` (because it can't be [converted to an object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion)).\n\n## [Description](#description)\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `isPrototypeOf()` method. This method allows you to check whether or not the object exists within another object's prototype chain. If the `object` passed as the parameter is not an object (i.e. a primitive), the method directly returns `false`. Otherwise, the `this` value is [converted to an object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion), and the prototype chain of `object` is searched for the `this` value, until the end of the chain is reached or the `this` value is found.\n\n## [Examples](#examples)\n\n### [Using isPrototypeOf()](#using_isprototypeof)\n\nThis example demonstrates that `Baz.prototype`, `Bar.prototype`, `Foo.prototype` and `Object.prototype` exist in the prototype chain for object `baz`:\n\n```\nclass Foo {}\nclass Bar extends Foo {}\nclass Baz extends Bar {}\n\nconst foo = new Foo();\nconst bar = new Bar();\nconst baz = new Baz();\n\n// prototype chains:\n// foo: Foo --> Object\n// bar: Bar --> Foo --> Object\n// baz: Baz --> Bar --> Foo --> Object\nconsole.log(Baz.prototype.isPrototypeOf(baz)); // true\nconsole.log(Baz.prototype.isPrototypeOf(bar)); // false\nconsole.log(Baz.prototype.isPrototypeOf(foo)); // false\nconsole.log(Bar.prototype.isPrototypeOf(baz)); // true\nconsole.log(Bar.prototype.isPrototypeOf(foo)); // false\nconsole.log(Foo.prototype.isPrototypeOf(baz)); // true\nconsole.log(Foo.prototype.isPrototypeOf(bar)); // true\nconsole.log(Object.prototype.isPrototypeOf(baz)); // true\n```\n\nThe `isPrototypeOf()` method — along with the [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator — comes in particularly handy if you have code that can only function when dealing with objects descended from a specific prototype chain; e.g., to guarantee that certain methods or properties will be present on that object.\n\nFor example, to execute some code that's only safe to run if a `baz` object has `Foo.prototype` in its prototype chain, you can do this:\n\n```\nif (Foo.prototype.isPrototypeOf(baz)) {\n  // do something safe\n}\n```\n\nHowever, `Foo.prototype` existing in `baz`'s prototype chain doesn't imply `baz` was created using `Foo` as its constructor. For example, `baz` could be directly assigned with `Foo.prototype` as its prototype. In this case, if your code reads [private fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) of `Foo` from `baz`, it would still fail:\n\n```\nclass Foo {\n  #value = \"foo\";\n  static getValue(x) {\n    return x.#value;\n  }\n}\n\nconst baz = { __proto__: Foo.prototype };\n\nif (Foo.prototype.isPrototypeOf(baz)) {\n  console.log(Foo.getValue(baz)); // TypeError: Cannot read private member #value from an object whose class did not declare it\n}\n```\n\nThe same applies to [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof). If you need to read private fields in a secure way, offer a branded check method using [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) instead.\n\n```\nclass Foo {\n  #value = \"foo\";\n  static getValue(x) {\n    return x.#value;\n  }\n  static isFoo(x) {\n    return #value in x;\n  }\n}\n\nconst baz = { __proto__: Foo.prototype };\n\nif (Foo.isFoo(baz)) {\n  // Doesn't run, because baz is not a Foo\n  console.log(Foo.getValue(baz));\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.isprototypeof](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.isprototypeof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.isPrototypeOf() - JavaScript | MDN",
    "description": "The isPrototypeOf() method of Object instances checks if this object exists in another object's prototype chain.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",
    "markdown": "# Object.prototype.propertyIsEnumerable() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`propertyIsEnumerable()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances returns a boolean indicating whether the specified property is this object's [enumerable own](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) property.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\npropertyIsEnumerable(prop)\n```\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nThe name of the property to test. Can be a string or a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol).\n\n### [Return value](#return_value)\n\nA boolean value indicating whether the specified property is enumerable and is the object's own property.\n\n## [Description](#description)\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `propertyIsEnumerable()` method. This method determines if the specified property, string or symbol, is an enumerable own property of the object. If the object does not have the specified property, this method returns `false`.\n\nThis method is equivalent to [`Object.getOwnPropertyDescriptor(obj, prop)?.enumerable ?? false`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor).\n\n## [Examples](#examples)\n\n### [Using propertyIsEnumerable()](#using_propertyisenumerable)\n\nThe following example shows the use of `propertyIsEnumerable()` on objects and arrays.\n\n```\nconst o = {};\nconst a = [];\no.prop = \"is enumerable\";\na[0] = \"is enumerable\";\n\no.propertyIsEnumerable(\"prop\"); // true\na.propertyIsEnumerable(0); // true\n```\n\n### [User-defined vs. built-in objects](#user-defined_vs._built-in_objects)\n\nMost built-in properties are non-enumerable by default, while user-created object properties are often enumerable, unless explicitly designated otherwise.\n\n```\nconst a = [\"is enumerable\"];\n\na.propertyIsEnumerable(0); // true\na.propertyIsEnumerable(\"length\"); // false\n\nMath.propertyIsEnumerable(\"random\"); // false\nglobalThis.propertyIsEnumerable(\"Math\"); // false\n```\n\n### [Direct vs. inherited properties](#direct_vs._inherited_properties)\n\nOnly enumerable own properties cause `propertyIsEnumerable()` to return `true`, although all enumerable properties, including inherited ones, are visited by the [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop.\n\n```\nconst o1 = {\n  enumerableInherited: \"is enumerable\",\n};\nObject.defineProperty(o1, \"nonEnumerableInherited\", {\n  value: \"is non-enumerable\",\n  enumerable: false,\n});\nconst o2 = {\n  // o1 is the prototype of o2\n  __proto__: o1,\n  enumerableOwn: \"is enumerable\",\n};\nObject.defineProperty(o2, \"nonEnumerableOwn\", {\n  value: \"is non-enumerable\",\n  enumerable: false,\n});\n\no2.propertyIsEnumerable(\"enumerableInherited\"); // false\no2.propertyIsEnumerable(\"nonEnumerableInherited\"); // false\no2.propertyIsEnumerable(\"enumerableOwn\"); // true\no2.propertyIsEnumerable(\"nonEnumerableOwn\"); // false\n```\n\n### [Testing symbol properties](#testing_symbol_properties)\n\n[`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties are also supported by `propertyIsEnumerable()`. Note that most enumeration methods only visit string properties; enumerability of symbol properties is only useful when using [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) or [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax). For more information, see [Enumerability and ownership of properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties).\n\n```\nconst sym = Symbol(\"enumerable\");\nconst sym2 = Symbol(\"non-enumerable\");\nconst o = {\n  [sym]: \"is enumerable\",\n};\nObject.defineProperty(o, sym2, {\n  value: \"is non-enumerable\",\n  enumerable: false,\n});\n\no.propertyIsEnumerable(sym); // true\no.propertyIsEnumerable(sym2); // false\n```\n\n### [Usage with null-prototype objects](#usage_with_null-prototype_objects)\n\nBecause `null`\\-prototype objects do not inherit from `Object.prototype`, they do not inherit the `propertyIsEnumerable()` method. You must call `Object.prototype.propertyIsEnumerable` with the object as `this` instead.\n\n```\nconst o = {\n  __proto__: null,\n  enumerableOwn: \"is enumerable\",\n};\n\no.propertyIsEnumerable(\"enumerableOwn\"); // TypeError: o.propertyIsEnumerable is not a function\nObject.prototype.propertyIsEnumerable.call(o, \"enumerableOwn\"); // true\n```\n\nAlternatively, you may use [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) instead, which also helps to distinguish between non-existent properties and actually non-enumerable properties.\n\n```\nconst o = {\n  __proto__: null,\n  enumerableOwn: \"is enumerable\",\n};\n\nObject.getOwnPropertyDescriptor(o, \"enumerableOwn\")?.enumerable; // true\nObject.getOwnPropertyDescriptor(o, \"nonExistent\")?.enumerable; // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.propertyisenumerable](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.propertyisenumerable) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.propertyIsEnumerable() - JavaScript | MDN",
    "description": "The propertyIsEnumerable() method of Object instances returns a boolean indicating whether the specified property is this object's enumerable own property.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString",
    "markdown": "# Object.prototype.toLocaleString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLocaleString()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances returns a string representing this object. This method is meant to be overridden by derived objects for locale-specific purposes.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone. However, all objects that override this method are expected to accept at most two parameters, corresponding to `locales` and `options`, such as [`Date.prototype.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString). The parameter positions should not be used for any other purpose.\n\n### [Return value](#return_value)\n\nThe return value of calling `this.toString()`.\n\n## [Description](#description)\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `toLocaleString()` method. [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)'s `toLocaleString` returns the result of calling [`this.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\nThis function is provided to give objects a generic `toLocaleString` method, even though not all may use it. In the core language, these built-in objects override `toLocaleString` to provide locale-specific formatting:\n\n*   [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array): [`Array.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)\n*   [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number): [`Number.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString)\n*   [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date): [`Date.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)\n*   [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray): [`TypedArray.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString)\n*   [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt): [`BigInt.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString)\n\n## [Examples](#examples)\n\n### [Using the base toLocaleString() method](#using_the_base_tolocalestring_method)\n\nThe base `toLocaleString()` method simply calls `toString()`.\n\n```\nconst obj = {\n  toString() {\n    return \"My Object\";\n  },\n};\nconsole.log(obj.toLocaleString()); // \"My Object\"\n```\n\n### [Array toLocaleString() override](#array_tolocalestring_override)\n\n[`Array.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString) is used to print array values as a string by invoking each element's `toLocaleString()` method and joining the results with a locale-specific separator. For example:\n\n```\nconst testArray = [4, 7, 10];\n\nconst euroPrices = testArray.toLocaleString(\"fr\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n// \"4,00 €,7,00 €,10,00 €\"\n```\n\n### [Date toLocaleString() override](#date_tolocalestring_override)\n\n[`Date.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString) is used to print out date displays more suitable for specific locales. For example:\n\n```\nconst testDate = new Date();\n// \"Fri May 29 2020 18:04:24 GMT+0100 (British Summer Time)\"\n\nconst deDate = testDate.toLocaleString(\"de\");\n// \"29.5.2020, 18:04:24\"\n\nconst frDate = testDate.toLocaleString(\"fr\");\n// \"29/05/2020, 18:04:24\"\n```\n\n### [Number toLocaleString() override](#number_tolocalestring_override)\n\n[`Number.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString) is used to print out number displays more suitable for specific locales, e.g. with the correct separators. For example:\n\n```\nconst testNumber = 2901234564;\n// \"2901234564\"\n\nconst deNumber = testNumber.toLocaleString(\"de\");\n// \"2.901.234.564\"\n\nconst frNumber = testNumber.toLocaleString(\"fr\");\n// \"2 901 234 564\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.tolocalestring](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.tolocalestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.toLocaleString() - JavaScript | MDN",
    "description": "The toLocaleString() method of Object instances returns a string representing this object. This method is meant to be overridden by derived objects for locale-specific purposes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",
    "markdown": "# Object.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances returns a string representing this object. This method is meant to be overridden by derived objects for custom [type coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion) logic.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nBy default `toString()` takes no parameters. However, objects that inherit from `Object` may override it with their own implementations that do take parameters. For example, the [`Number.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) and [`BigInt.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString) methods take an optional `radix` parameter.\n\n### [Return value](#return_value)\n\nA string representing the object.\n\n## [Description](#description)\n\nJavaScript calls the `toString` method to [convert an object to a primitive value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion). You rarely need to invoke the `toString` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\nThis method is called in priority by [string conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), but [numeric conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and [primitive conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) call `valueOf()` in priority. However, because the base [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method returns an object, the `toString()` method is usually called in the end, unless the object overrides `valueOf()`. For example, `+[1]` returns `1`, because its [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) method returns `\"1\"`, which is then converted to a number.\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `toString()` method. When you create a custom object, you can override `toString()` to call a custom method, so that your custom object can be converted to a string value. Alternatively, you can add a [`@@toPrimitive`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, which allows even more control over the conversion process, and will always be preferred over `valueOf` or `toString` for any type conversion.\n\nTo use the base `Object.prototype.toString()` with an object that has it overridden (or to invoke it on `null` or `undefined`), you need to call [`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) or [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) on it, passing the object you want to inspect as the first parameter (called `thisArg`).\n\n```\nconst arr = [1, 2, 3];\n\narr.toString(); // \"1,2,3\"\nObject.prototype.toString.call(arr); // \"[object Array]\"\n```\n\n`Object.prototype.toString()` returns `\"[object Type]\"`, where `Type` is the object type. If the object has a [`Symbol.toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property whose value is a string, that value will be used as the `Type`. Many built-in objects, including [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), have a `Symbol.toStringTag`. Some objects predating ES6 do not have `Symbol.toStringTag`, but have a special tag nonetheless. They include (the tag is the same as the type name given below):\n\n*   [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n*   [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) (anything whose [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) returns `\"function\"`)\n*   [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)\n*   [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\n*   [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\n*   [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\n*   [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\n*   [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\nThe [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object returns `\"[object Arguments]\"`. Everything else, including user-defined classes, unless with a custom `Symbol.toStringTag`, will return `\"[object Object]\"`.\n\n`Object.prototype.toString()` invoked on [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) returns `[object Null]` and `[object Undefined]`, respectively.\n\n## [Examples](#examples)\n\n### [Overriding toString for custom objects](#overriding_tostring_for_custom_objects)\n\nYou can create a function to be called in place of the default `toString()` method. The `toString()` function you create should return a string value. If it returns an object and the method is called implicitly during [type conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion), then its result is ignored and the value of a related method, [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf), is used instead, or a `TypeError` is thrown if none of these methods return a primitive.\n\nThe following code defines a `Dog` class.\n\n```\nclass Dog {\n  constructor(name, breed, color, sex) {\n    this.name = name;\n    this.breed = breed;\n    this.color = color;\n    this.sex = sex;\n  }\n}\n```\n\nIf you call the `toString()` method, either explicitly or implicitly, on an instance of `Dog`, it returns the default value inherited from [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object):\n\n```\nconst theDog = new Dog(\"Gabby\", \"Lab\", \"chocolate\", \"female\");\n\ntheDog.toString(); // \"[object Object]\"\n`${theDog}`; // \"[object Object]\"\n```\n\nThe following code overrides the default `toString()` method. This method generates a string containing the `name`, `breed`, `color`, and `sex` of the object.\n\n```\nclass Dog {\n  constructor(name, breed, color, sex) {\n    this.name = name;\n    this.breed = breed;\n    this.color = color;\n    this.sex = sex;\n  }\n  toString() {\n    return `Dog ${this.name} is a ${this.sex} ${this.color} ${this.breed}`;\n  }\n}\n```\n\nWith the preceding code in place, any time an instance of `Dog` is used in a string context, JavaScript automatically calls the `toString()` method.\n\n```\nconst theDog = new Dog(\"Gabby\", \"Lab\", \"chocolate\", \"female\");\n\n`${theDog}`; // \"Dog Gabby is a female chocolate Lab\"\n```\n\n### [Using toString() to detect object class](#using_tostring_to_detect_object_class)\n\n`toString()` can be used with every object and (by default) allows you to get its class.\n\n```\nconst toString = Object.prototype.toString;\n\ntoString.call(new Date()); // [object Date]\ntoString.call(new String()); // [object String]\n// Math has its Symbol.toStringTag\ntoString.call(Math); // [object Math]\n\ntoString.call(undefined); // [object Undefined]\ntoString.call(null); // [object Null]\n```\n\nUsing `toString()` in this way is unreliable; objects can change the behavior of `Object.prototype.toString()` by defining a [`Symbol.toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property, leading to unexpected results. For example:\n\n```\nconst myDate = new Date();\nObject.prototype.toString.call(myDate); // [object Date]\n\nmyDate[Symbol.toStringTag] = \"myDate\";\nObject.prototype.toString.call(myDate); // [object myDate]\n\nDate.prototype[Symbol.toStringTag] = \"prototype polluted\";\nObject.prototype.toString.call(new Date()); // [object prototype polluted]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.tostring](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.toString() - JavaScript | MDN",
    "description": "The toString() method of Object instances returns a string representing this object. This method is meant to be overridden by derived objects for custom type coercion logic.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",
    "markdown": "# Object.prototype.valueOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`valueOf()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances converts the `this` value [to an object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion). This method is meant to be overridden by derived objects for custom [type conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion) logic.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe `this` value, converted to an object.\n\n**Note:** In order for `valueOf` to be useful during type conversion, it must return a primitive. Because all primitive types have their own `valueOf()` methods, calling `aPrimitiveValue.valueOf()` generally does not invoke `Object.prototype.valueOf()`.\n\n## [Description](#description)\n\nJavaScript calls the `valueOf` method to [convert an object to a primitive value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion). You rarely need to invoke the `valueOf` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\nThis method is called in priority by [numeric conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and [primitive conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion), but [string conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) calls `toString()` in priority, and `toString()` is very likely to return a string value (even for the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) base implementation), so `valueOf()` is usually not called in this case.\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `toString()` method. The `Object.prototype.valueOf()` base implementation is deliberately useless: by returning an object, its return value will never be used by any [primitive conversion algorithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion). Many built-in objects override this method to return an appropriate primitive value. When you create a custom object, you can override `valueOf()` to call a custom method, so that your custom object can be converted to a primitive value. Generally, `valueOf()` is used to return a value that is most meaningful for the object — unlike `toString()`, it does not need to be a string. Alternatively, you can add a [`@@toPrimitive`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, which allows even more control over the conversion process, and will always be preferred over `valueOf` or `toString` for any type conversion.\n\n## [Examples](#examples)\n\n### [Using valueOf()](#using_valueof)\n\nThe base `valueOf()` method returns the `this` value itself, converted to an object if it isn't already. Therefore its return value will never be used by any primitive conversion algorithm.\n\n```\nconst obj = { foo: 1 };\nconsole.log(obj.valueOf() === obj); // true\n\nconsole.log(Object.prototype.valueOf.call(\"primitive\"));\n// [String: 'primitive'] (a wrapper object)\n```\n\n### [Overriding valueOf for custom objects](#overriding_valueof_for_custom_objects)\n\nYou can create a function to be called in place of the default `valueOf` method. Your function should take no arguments, since it won't be passed any when called during type conversion.\n\nFor example, you can add a `valueOf` method to your custom class `Box`.\n\n```\nclass Box {\n  #value;\n  constructor(value) {\n    this.#value = value;\n  }\n  valueOf() {\n    return this.#value;\n  }\n}\n```\n\nWith the preceding code in place, any time an object of type `Box` is used in a context where it is to be represented as a primitive value (but not specifically a string), JavaScript automatically calls the function defined in the preceding code.\n\n```\nconst box = new Box(123);\nconsole.log(box + 456); // 579\nconsole.log(box == 123); // true\n```\n\nAn object's `valueOf` method is usually invoked by JavaScript, but you can invoke it yourself as follows:\n\n### [Using unary plus on objects](#using_unary_plus_on_objects)\n\n[Unary plus](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus) performs [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) on its operand, which, for most objects without [`@@toPrimitive`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive), means calling its `valueOf()`. However, if the object doesn't have a custom `valueOf()` method, the base implementation will cause `valueOf()` to be ignored and the return value of `toString()` to be used instead.\n\n```\n+new Date(); // the current timestamp; same as new Date().getTime()\n+{}; // NaN (toString() returns \"[object Object]\")\n+[]; // 0 (toString() returns an empty string list)\n+[1]; // 1 (toString() returns \"1\")\n+[1, 2]; // NaN (toString() returns \"1,2\")\n+new Set([1]); // NaN (toString() returns \"[object Set]\")\n+{ valueOf: () => 42 }; // 42\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.valueof](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.valueof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.valueOf() - JavaScript | MDN",
    "description": "The valueOf() method of Object instances converts the this value to an object. This method is meant to be overridden by derived objects for custom type conversion logic.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/errors",
    "markdown": "# AggregateError: errors - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`errors`** data property of an [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError) instance contains an array representing the errors that were aggregated.\n\n## [Value](#value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) containing values in the same order as the iterable passed as the first argument of the [`AggregateError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/AggregateError) constructor.\n\n| Property attributes of `AggregateError: errors` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Examples](#examples)\n\n### [Using errors](#using_errors)\n\n```\ntry {\n  throw new AggregateError(\n    // An iterable of errors\n    new Set([new Error(\"some error\"), new Error(\"another error\")]),\n    \"Multiple errors thrown\",\n  );\n} catch (err) {\n  console.log(err.errors);\n  // [\n  //   Error: some error,\n  //   Error: another error\n  // ]\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-aggregate-error](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-aggregate-error) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AggregateError: errors - JavaScript | MDN",
    "description": "The errors data property of an AggregateError instance contains an array representing the errors that were aggregated.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/AggregateError",
    "markdown": "# AggregateError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`AggregateError()`** constructor creates [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew AggregateError(errors)\nnew AggregateError(errors, message)\nnew AggregateError(errors, message, options)\n\nAggregateError(errors)\nAggregateError(errors, message)\nAggregateError(errors, message, options)\n```\n\n**Note:** `AggregateError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `AggregateError` instance.\n\n### [Parameters](#parameters)\n\n[`errors`](#errors)\n\nAn iterable of errors, may not actually be [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instances.\n\n[`message`](#message) Optional\n\nAn optional human-readable description of the aggregate error.\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n## [Examples](#examples)\n\n### [Creating an AggregateError](#creating_an_aggregateerror)\n\n```\ntry {\n  throw new AggregateError([new Error(\"some error\")], \"Hello\");\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"some error\" ]\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-aggregate-error-constructor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-aggregate-error-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AggregateError() constructor - JavaScript | MDN",
    "description": "The AggregateError() constructor creates AggregateError objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto",
    "markdown": "# Object.prototype.\\_\\_proto\\_\\_ - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Warning:** Changing the `[[Prototype]]` of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the `obj.__proto__ = ...` statement, but may extend to **_any_** code that has access to any object whose `[[Prototype]]` has been altered. You can read more in [JavaScript engine fundamentals: optimizing prototypes](https://mathiasbynens.be/notes/prototypes).\n\nThe **`__proto__`** accessor property of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances exposes the [`[[Prototype]]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) (either an object or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null)) of this object.\n\nThe `__proto__` property can also be used in an object literal definition to set the object `[[Prototype]]` on creation, as an alternative to [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create). See: [object initializer / literal syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer). That syntax is standard and optimized for in implementations, and quite different from `Object.prototype.__proto__`.\n\n## [Syntax](#syntax)\n\n### [Return value](#return_value)\n\nIf used as a getter, returns the object's `[[Prototype]]`.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if attempting to set the prototype of a [non-extensible](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible) object or an [immutable prototype exotic object](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-immutable-prototype-exotic-objects), such as `Object.prototype` or [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window).\n\n## [Description](#description)\n\nThe `__proto__` getter function exposes the value of the internal `[[Prototype]]` of an object. For objects created using an object literal (unless you use the [prototype setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#prototype_setter) syntax), this value is `Object.prototype`. For objects created using array literals, this value is [`Array.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). For functions, this value is [`Function.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype). You can read more about the prototype chain in [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\nThe `__proto__` setter allows the `[[Prototype]]` of an object to be mutated. The value provided must be an object or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null). Providing any other value will do nothing.\n\nUnlike [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf) and [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf), which are always available on `Object` as static properties and always reflect the `[[Prototype]]` internal property, the `__proto__` property doesn't always exist as a property on all objects, and as a result doesn't reflect `[[Prototype]]` reliably.\n\nThe `__proto__` property is a simple accessor property on `Object.prototype` consisting of a getter and setter function. A property access for `__proto__` that eventually consults `Object.prototype` will find this property, but an access that does not consult `Object.prototype` will not. If some other `__proto__` property is found before `Object.prototype` is consulted, that property will hide the one found on `Object.prototype`.\n\n[`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) don't inherit any property from `Object.prototype`, including the `__proto__` accessor property, so if you try to read `__proto__` on such an object, the value is always `undefined` regardless of the object's actual `[[Prototype]]`, and any assignment to `__proto__` would create a new property called `__proto__` instead of setting the object's prototype. Furthermore, `__proto__` can be redefined as an own property on any object instance through [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) without triggering the setter. In this case, `__proto__` will no longer be an accessor for `[[Prototype]]`. Therefore, always prefer [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf) and [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) for setting and getting the `[[Prototype]]` of an object.\n\n## [Examples](#examples)\n\n### [Using \\_\\_proto\\_\\_](#using___proto)\n\n```\nfunction Circle() {}\nconst shape = {};\nconst circle = new Circle();\n\n// Set the object prototype.\n// DEPRECATED. This is for example purposes only. DO NOT DO THIS in real code.\nshape.__proto__ = circle;\n\n// Get the object prototype\nconsole.log(shape.__proto__ === Circle); // false\n```\n\n```\nconst ShapeA = function () {};\nconst ShapeB = {\n  a() {\n    console.log(\"aaa\");\n  },\n};\n\nShapeA.prototype.__proto__ = ShapeB;\nconsole.log(ShapeA.prototype.__proto__); // { a: [Function: a] }\n\nconst shapeA = new ShapeA();\nshapeA.a(); // aaa\nconsole.log(ShapeA.prototype === shapeA.__proto__); // true\n```\n\n```\nconst ShapeC = function () {};\nconst ShapeD = {\n  a() {\n    console.log(\"a\");\n  },\n};\n\nconst shapeC = new ShapeC();\nshapeC.__proto__ = ShapeD;\nshapeC.a(); // a\nconsole.log(ShapeC.prototype === shapeC.__proto__); // false\n```\n\n```\nfunction Test() {}\nTest.prototype.myName = function () {\n  console.log(\"myName\");\n};\n\nconst test = new Test();\nconsole.log(test.__proto__ === Test.prototype); // true\ntest.myName(); // myName\n\nconst obj = {};\nobj.__proto__ = Test.prototype;\nobj.myName(); // myName\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.\\_\\_proto\\_\\_](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.__proto__) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.__proto__ - JavaScript | MDN",
    "description": "The __proto__ accessor property of Object instances exposes the [[Prototype]] (either an object or null) of this object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",
    "markdown": "# Object.prototype.constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`constructor`** data property of an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instance returns a reference to the constructor function that created the instance object. Note that the value of this property is a reference to _the function itself_, not a string containing the function's name.\n\n**Note:** This is a property of JavaScript objects. For the `constructor` method in classes, see [its own reference page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor).\n\n## [Value](#value)\n\nA reference to the constructor function that created the instance object.\n\n| Property attributes of `Object.prototype.constructor` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n**Note:** This property is created by default on the [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property of every constructor function and is inherited by all objects created by that constructor.\n\n## [Description](#description)\n\nAny object (with the exception of [`null` prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) will have a `constructor` property on its `[[Prototype]]`. Objects created with literals will also have a `constructor` property that points to the constructor type for that object — for example, array literals create [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) objects, and [object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) create plain objects.\n\n```\nconst o1 = {};\no1.constructor === Object; // true\n\nconst o2 = new Object();\no2.constructor === Object; // true\n\nconst a1 = [];\na1.constructor === Array; // true\n\nconst a2 = new Array();\na2.constructor === Array; // true\n\nconst n = 3;\nn.constructor === Number; // true\n```\n\nNote that `constructor` usually comes from the constructor's [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property. If you have a longer prototype chain, you can usually expect every object in the chain to have a `constructor` property.\n\n```\nconst o = new TypeError(); // Inheritance: TypeError -> Error -> Object\nconst proto = Object.getPrototypeOf;\n\nObject.hasOwn(o, \"constructor\"); // false\nproto(o).constructor === TypeError; // true\nproto(proto(o)).constructor === Error; // true\nproto(proto(proto(o))).constructor === Object; // true\n```\n\n## [Examples](#examples)\n\n### [Displaying the constructor of an object](#displaying_the_constructor_of_an_object)\n\nThe following example creates a constructor (`Tree`) and an object of that type (`theTree`). The example then displays the `constructor` property for the object `theTree`.\n\n```\nfunction Tree(name) {\n  this.name = name;\n}\n\nconst theTree = new Tree(\"Redwood\");\nconsole.log(`theTree.constructor is ${theTree.constructor}`);\n```\n\nThis example displays the following output:\n\ntheTree.constructor is function Tree(name) {\n  this.name = name;\n}\n\n### [Assigning the constructor property to an object](#assigning_the_constructor_property_to_an_object)\n\nOne can assign the `constructor` property of non-primitives.\n\n```\nconst arr = [];\narr.constructor = String;\narr.constructor === String; // true\narr instanceof String; // false\narr instanceof Array; // true\n\nconst foo = new Foo();\nfoo.constructor = \"bar\";\nfoo.constructor === \"bar\"; // true\n\n// etc.\n```\n\nThis does not overwrite the old `constructor` property — it was originally present on the instance's `[[Prototype]]`, not as its own property.\n\n```\nconst arr = [];\nObject.hasOwn(arr, \"constructor\"); // false\nObject.hasOwn(Object.getPrototypeOf(arr), \"constructor\"); // true\n\narr.constructor = String;\nObject.hasOwn(arr, \"constructor\"); // true — the instance property shadows the one on its prototype\n```\n\nBut even when `Object.getPrototypeOf(a).constructor` is re-assigned, it won't change other behaviors of the object. For example, the behavior of `instanceof` is controlled by [`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance), not `constructor`:\n\n```\nconst arr = [];\narr.constructor = String;\narr instanceof String; // false\narr instanceof Array; // true\n```\n\nThere is nothing protecting the `constructor` property from being re-assigned or shadowed, so using it to detect the type of a variable should usually be avoided in favor of less fragile ways like `instanceof` and [`Symbol.toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) for objects, or [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) for primitives.\n\n### [Changing the constructor of a constructor function's prototype](#changing_the_constructor_of_a_constructor_functions_prototype)\n\nEvery constructor has a [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property, which will become the instance's `[[Prototype]]` when called via the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. `ConstructorFunction.prototype.constructor` will therefore become a property on the instance's `[[Prototype]]`, as previously demonstrated.\n\nHowever, if `ConstructorFunction.prototype` is re-assigned, the `constructor` property will be lost. For example, the following is a common way to create an inheritance pattern:\n\n```\nfunction Parent() {\n  // …\n}\nParent.prototype.parentMethod = function () {};\n\nfunction Child() {\n  Parent.call(this); // Make sure everything is initialized properly\n}\n// Pointing the [[Prototype]] of Child.prototype to Parent.prototype\nChild.prototype = Object.create(Parent.prototype);\n```\n\nThe `constructor` of instances of `Child` will be `Parent` due to `Child.prototype` being re-assigned.\n\nThis is usually not a big deal — the language almost never reads the `constructor` property of an object. The only exception is when using [`@@species`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species) to create new instances of a class, but such cases are rare, and you should be using the [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) syntax to subclass builtins anyway.\n\nHowever, ensuring that `Child.prototype.constructor` always points to `Child` itself is crucial when some caller is using `constructor` to access the original class from an instance. Take the following case: the object has the `create()` method to create itself.\n\n```\nfunction Parent() {\n  // …\n}\nfunction CreatedConstructor() {\n  Parent.call(this);\n}\n\nCreatedConstructor.prototype = Object.create(Parent.prototype);\n\nCreatedConstructor.prototype.create = function () {\n  return new this.constructor();\n};\n\nnew CreatedConstructor().create().create(); // TypeError: new CreatedConstructor().create().create is undefined, since constructor === Parent\n```\n\nIn the example above, an exception is thrown, since the `constructor` links to `Parent`. To avoid this, just assign the necessary constructor you are going to use.\n\n```\nfunction Parent() {\n  // …\n}\nfunction CreatedConstructor() {\n  // …\n}\n\nCreatedConstructor.prototype = Object.create(Parent.prototype, {\n  // Return original constructor to Child\n  constructor: {\n    value: CreatedConstructor,\n    enumerable: false, // Make it non-enumerable, so it won't appear in `for...in` loop\n    writable: true,\n    configurable: true,\n  },\n});\n\nCreatedConstructor.prototype.create = function () {\n  return new this.constructor();\n};\n\nnew CreatedConstructor().create().create(); // it's pretty fine\n```\n\nNote that when manually adding the `constructor` property, it's crucial to make the property [non-enumerable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties), so `constructor` won't be visited in [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops — as it normally isn't.\n\nIf the code above looks like too much boilerplate, you may also consider using [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) to manipulate the prototype chain.\n\n```\nfunction Parent() {\n  // …\n}\nfunction CreatedConstructor() {\n  // …\n}\n\nObject.setPrototypeOf(CreatedConstructor.prototype, Parent.prototype);\n\nCreatedConstructor.prototype.create = function () {\n  return new this.constructor();\n};\n\nnew CreatedConstructor().create().create(); // still works without re-creating constructor property\n```\n\n`Object.setPrototypeOf()` comes with its potential performance downsides because all previously created objects involved in the prototype chain have to be re-compiled; but if the above initialization code happens before `Parent` or `CreatedConstructor` are constructed, the effect should be minimal.\n\nLet's consider one more involved case.\n\n```\nfunction ParentWithStatic() {}\n\nParentWithStatic.startPosition = { x: 0, y: 0 }; // Static member property\nParentWithStatic.getStartPosition = function () {\n  return this.startPosition;\n};\n\nfunction Child(x, y) {\n  this.position = { x, y };\n}\n\nChild.prototype = Object.create(ParentWithStatic.prototype, {\n  // Return original constructor to Child\n  constructor: {\n    value: Child,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\n\nChild.prototype.getOffsetByInitialPosition = function () {\n  const position = this.position;\n  // Using this.constructor, in hope that getStartPosition exists as a static method\n  const startPosition = this.constructor.getStartPosition();\n\n  return {\n    offsetX: startPosition.x - position.x,\n    offsetY: startPosition.y - position.y,\n  };\n};\n\nnew Child(1, 1).getOffsetByInitialPosition();\n// Error: this.constructor.getStartPosition is undefined, since the\n// constructor is Child, which doesn't have the getStartPosition static method\n```\n\nFor this example to work properly, we can reassign the `Parent`'s static properties to `Child`:\n\n```\n// …\nObject.assign(Child, ParentWithStatic); // Notice that we assign it before we create() a prototype below\nChild.prototype = Object.create(ParentWithStatic.prototype, {\n  // Return original constructor to Child\n  constructor: {\n    value: Child,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\n// …\n```\n\nBut even better, we can make the constructor functions themselves extend each other, as classes' [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) do.\n\n```\nfunction ParentWithStatic() {}\n\nParentWithStatic.startPosition = { x: 0, y: 0 }; // Static member property\nParentWithStatic.getStartPosition = function () {\n  return this.startPosition;\n};\n\nfunction Child(x, y) {\n  this.position = { x, y };\n}\n\n// Properly create inheritance!\nObject.setPrototypeOf(Child.prototype, ParentWithStatic.prototype);\nObject.setPrototypeOf(Child, ParentWithStatic);\n\nChild.prototype.getOffsetByInitialPosition = function () {\n  const position = this.position;\n  const startPosition = this.constructor.getStartPosition();\n\n  return {\n    offsetX: startPosition.x - position.x,\n    offsetY: startPosition.y - position.y,\n  };\n};\n\nconsole.log(new Child(1, 1).getOffsetByInitialPosition()); // { offsetX: -1, offsetY: -1 }\n```\n\nAgain, using `Object.setPrototypeOf()` may have adverse performance effects, so make sure it happens immediately after the constructor declaration and before any instances are created — to avoid objects being \"tainted\".\n\n**Note:** Manually updating or setting the constructor can lead to different and sometimes confusing consequences. To prevent this, just define the role of `constructor` in each specific case. In most cases, `constructor` is not used and reassigning it is not necessary.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.constructor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.constructor - JavaScript | MDN",
    "description": "The constructor data property of an Object instance returns a reference to the constructor function that created the instance object. Note that the value of this property is a reference to the function itself, not a string containing the function's name.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error",
    "markdown": "# Error() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Error()`** constructor creates [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Error()\nnew Error(message)\nnew Error(message, options)\nnew Error(message, fileName)\nnew Error(message, fileName, lineNumber)\n\nError()\nError(message)\nError(message, options)\nError(message, fileName)\nError(message, fileName, lineNumber)\n```\n\n**Note:** `Error()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Error` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nA human-readable description of the error.\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA value indicating the specific cause of the error, reflected in the [`cause`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause) property. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe path to the file that raised this error, reflected in the [`fileName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName) property. Defaults to the name of the file containing the code that called the `Error()` constructor.\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number within the file on which the error was raised, reflected in the [`lineNumber`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber) property. Defaults to the line number containing the `Error()` constructor invocation.\n\n## [Examples](#examples)\n\n### [Function call or new construction](#function_call_or_new_construction)\n\nWhen `Error` is used like a function, that is without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), it will return an `Error` object. Therefore, a mere call to `Error` will produce the same output that constructing an `Error` object via the `new` keyword would.\n\n```\nconst x = Error(\"I was created using a function call!\");\n\n// above has the same functionality as following\nconst y = new Error('I was constructed via the \"new\" keyword!');\n```\n\n### [Rethrowing an error with a cause](#rethrowing_an_error_with_a_cause)\n\nIt is sometimes useful to catch an error and re-throw it with a new message. In this case you should pass the original error into the constructor for the new `Error`, as shown.\n\n```\ntry {\n  frameworkThatCanThrow();\n} catch (err) {\n  throw new Error(\"New error message\", { cause: err });\n}\n```\n\nFor a more detailed example see [Error > Differentiate between similar errors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#differentiate_between_similar_errors).\n\n### [Omitting options argument](#omitting_options_argument)\n\nJavaScript only tries to read `options.cause` if `options` is an object — this avoids ambiguity with the other non-standard `Error(message, fileName, lineNumber)` signature, which requires the second parameter to be a string. If you omit `options`, pass a primitive value as `options`, or pass an object without the `cause` property, then the created `Error` object will have no `cause` property.\n\n```\n// Omitting options\nconst error1 = new Error(\"Error message\");\nconsole.log(\"cause\" in error1); // false\n\n// Passing a primitive value\nconst error2 = new Error(\"Error message\", \"\");\nconsole.log(\"cause\" in error2); // false\n\n// Passing an object without a cause property\nconst error3 = new Error(\"Error message\", { details: \"http error\" });\nconsole.log(\"cause\" in error3); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-error-constructor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error() constructor - JavaScript | MDN",
    "description": "The Error() constructor creates Error objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any",
    "markdown": "# Promise.any() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise.any()`** static method takes an iterable of promises as input and returns a single [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError) containing an array of rejection reasons.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable)\n\nAn [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)) of promises.\n\n### [Return value](#return_value)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that is:\n\n*   **Already rejected**, if the `iterable` passed is empty.\n*   **Asynchronously fulfilled**, when any of the promises in the given `iterable` fulfills. The fulfillment value is the fulfillment value of the first promise that was fulfilled.\n*   **Asynchronously rejected**, when all of the promises in the given `iterable` reject. The rejection reason is an [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError) containing an array of rejection reasons in its `errors` property. The errors are in the order of the promises passed, regardless of completion order. If the `iterable` passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) rejected.\n\n## [Description](#description)\n\nThe `Promise.any()` method is one of the [promise concurrency](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) methods. This method is useful for returning the first promise that fulfills. It short-circuits after a promise fulfills, so it does not wait for the other promises to complete once it finds one.\n\nUnlike [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all), which returns an _array_ of fulfillment values, we only get one fulfillment value (assuming at least one promise fulfills). This can be beneficial if we need only one promise to fulfill but we do not care which one does. Note another difference: this method rejects upon receiving an _empty iterable_, since, truthfully, the iterable contains no items that fulfill. You may compare `Promise.any()` and `Promise.all()` with [`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) and [`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n\nAlso, unlike [`Promise.race()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race), which returns the first _settled_ value (either fulfillment or rejection), this method returns the first _fulfilled_ value. This method ignores all rejected promises up until the first promise that fulfills.\n\n## [Examples](#examples)\n\n### [Using Promise.any()](#using_promise.any)\n\n`Promise.any()` fulfills with the first promise to fulfill, even if a promise rejects first. This is in contrast to [`Promise.race()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race), which fulfills or rejects with the first promise to settle.\n\n```\nconst pErr = new Promise((resolve, reject) => {\n  reject(\"Always fails\");\n});\n\nconst pSlow = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"Done eventually\");\n});\n\nconst pFast = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"Done quick\");\n});\n\nPromise.any([pErr, pSlow, pFast]).then((value) => {\n  console.log(value);\n  // pFast fulfills first\n});\n// Logs:\n// Done quick\n```\n\n### [Rejections with AggregateError](#rejections_with_aggregateerror)\n\n`Promise.any()` rejects with an [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError) if no promise fulfills.\n\n```\nconst failure = new Promise((resolve, reject) => {\n  reject(\"Always fails\");\n});\n\nPromise.any([failure]).catch((err) => {\n  console.log(err);\n});\n// AggregateError: No Promise in Promise.any was resolved\n```\n\n### [Displaying the first image loaded](#displaying_the_first_image_loaded)\n\nIn this example, we have a function that fetches an image and returns a blob. We use `Promise.any()` to fetch a couple of images and display the first one available (i.e. whose promise has resolved).\n\n```\nasync function fetchAndDecode(url, description) {\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw new Error(`HTTP error! status: ${res.status}`);\n  }\n  const data = await res.blob();\n  return [data, description];\n}\n\nconst coffee = fetchAndDecode(\"coffee.jpg\", \"Coffee\");\nconst tea = fetchAndDecode(\"tea.jpg\", \"Tea\");\n\nPromise.any([coffee, tea])\n  .then(([blob, description]) => {\n    const objectURL = URL.createObjectURL(blob);\n    const image = document.createElement(\"img\");\n    image.src = objectURL;\n    image.alt = description;\n    document.body.appendChild(image);\n  })\n  .catch((e) => {\n    console.error(e);\n  });\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.any](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.any) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Promise.any() - JavaScript | MDN",
    "description": "The Promise.any() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an AggregateError containing an array of rejection reasons.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString",
    "markdown": "# Error.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instances returns a string representing this error.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the specified [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object.\n\n## [Description](#description)\n\nThe [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method inherited by all objects. Its semantics are as follows:\n\n```\nError.prototype.toString = function () {\n  if (\n    this === null ||\n    (typeof this !== \"object\" && typeof this !== \"function\")\n  ) {\n    throw new TypeError();\n  }\n  let name = this.name;\n  name = name === undefined ? \"Error\" : `${name}`;\n  let msg = this.message;\n  msg = msg === undefined ? \"\" : `${msg}`;\n  if (name === \"\") {\n    return msg;\n  }\n  if (msg === \"\") {\n    return name;\n  }\n  return `${name}: ${msg}`;\n};\n```\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\n```\nconst e1 = new Error(\"fatal error\");\nconsole.log(e1.toString()); // \"Error: fatal error\"\n\nconst e2 = new Error(\"fatal error\");\ne2.name = undefined;\nconsole.log(e2.toString()); // \"Error: fatal error\"\n\nconst e3 = new Error(\"fatal error\");\ne3.name = \"\";\nconsole.log(e3.toString()); // \"fatal error\"\n\nconst e4 = new Error(\"fatal error\");\ne4.name = \"\";\ne4.message = undefined;\nconsole.log(e4.toString()); // \"\"\n\nconst e5 = new Error(\"fatal error\");\ne5.name = \"hello\";\ne5.message = undefined;\nconsole.log(e5.toString()); // \"hello\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-error.prototype.tostring](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error.prototype.toString() - JavaScript | MDN",
    "description": "The toString() method of Error instances returns a string representing this error.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber",
    "markdown": "# Error: columnNumber - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`columnNumber`** data property of an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance contains the column number in the line of the file that raised this error.\n\n## [Value](#value)\n\nA positive integer.\n\n| Property attributes of `Error: columnNumber` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Examples](#examples)\n\n### [Using columnNumber](#using_columnnumber)\n\n```\ntry {\n  throw new Error(\"Could not parse input\");\n} catch (err) {\n  console.log(err.columnNumber); // 9\n}\n```\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error: columnNumber - JavaScript | MDN",
    "description": "The columnNumber data property of an Error instance contains the column number in the line of the file that raised this error.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause",
    "markdown": "# Error: cause - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`cause`** data property of an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance indicates the specific original cause of the error.\n\nIt is used when catching and re-throwing an error with a more-specific or useful error message in order to still have access to the original error.\n\n## [Value](#value)\n\nThe value that was passed to the [`Error()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error) constructor in the `options.cause` argument. It may not be present.\n\n| Property attributes of `Error: cause` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nThe value of `cause` can be of any type. You should not make assumptions that the error you caught has an `Error` as its `cause`, in the same way that you cannot be sure the variable bound in the `catch` statement is an `Error` either. The \"Providing structured data as the error cause\" example below shows a case where a non-error is deliberately provided as the cause.\n\n## [Examples](#examples)\n\n### [Rethrowing an error with a cause](#rethrowing_an_error_with_a_cause)\n\nIt is sometimes useful to catch an error and re-throw it with a new message. In this case you should pass the original error into the constructor for the new `Error`, as shown.\n\n```\ntry {\n  connectToDatabase();\n} catch (err) {\n  throw new Error(\"Connecting to database failed.\", { cause: err });\n}\n```\n\nFor a more detailed example see [Error > Differentiate between similar errors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#differentiate_between_similar_errors).\n\n### [Providing structured data as the error cause](#providing_structured_data_as_the_error_cause)\n\nError messages written for human consumption may be inappropriate for machine parsing — since they're subject to rewording or punctuation changes that may break any existing parsing written to consume them. So when throwing an error from a function, as an alternative to a human-readable error message, you can instead provide the cause as structured data, for machine parsing.\n\n```\nfunction makeRSA(p, q) {\n  if (!Number.isInteger(p) || !Number.isInteger(q)) {\n    throw new Error(\"RSA key generation requires integer inputs.\", {\n      cause: { code: \"NonInteger\", values: [p, q] },\n    });\n  }\n  if (!areCoprime(p, q)) {\n    throw new Error(\"RSA key generation requires two co-prime integers.\", {\n      cause: { code: \"NonCoprime\", values: [p, q] },\n    });\n  }\n  // rsa algorithm…\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-installerrorcause](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-installerrorcause) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error: cause - JavaScript | MDN",
    "description": "The cause data property of an Error instance indicates the specific original cause of the error.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack",
    "markdown": "# Error.prototype.stack - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Note:** The `stack` property is de facto implemented by all major JavaScript engines, and [the JavaScript standards committee is looking to standardize it](https://github.com/tc39/proposal-error-stacks). You cannot rely on the precise content of the stack string due to implementation inconsistencies, but you can generally assume it exists and use it for debugging purposes.\n\nThe non-standard **`stack`** property of an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.\n\n## [Value](#value)\n\nA string.\n\nBecause the `stack` property is non-standard, implementations differ about where it's installed.\n\n*   In Firefox, it's an accessor property on `Error.prototype`.\n*   In Chrome and Safari, it's a data property on each `Error` instance, with the descriptor:\n\n| Property attributes of `Error.prototype.stack` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nEach JavaScript engine uses its own format for stack traces, but they are fairly consistent in their high-level structure. Every implementation uses a separate line in the stack to represent each function call. The call that directly caused the error is placed at the top, and the call that started the whole call chain is placed at the bottom. Below are some examples of stack traces:\n\n```\nfunction foo() {\n  bar();\n}\n\nfunction bar() {\n  baz();\n}\n\nfunction baz() {\n  console.log(new Error().stack);\n}\n\nfoo();\n```\n\n\\#### JavaScriptCore\nbaz@filename.js:10:24\nbar@filename.js:6:6\nfoo@filename.js:2:6\nglobal code@filename.js:13:4\n\n#### SpiderMonkey\nbaz@filename.js:10:15\nbar@filename.js:6:3\nfoo@filename.js:2:3\n@filename.js:13:1\n\n#### V8\nError\n    at baz (filename.js:10:15)\n    at bar (filename.js:6:3)\n    at foo (filename.js:2:3)\n    at filename.js:13:1\n\nDifferent engines set this value at different times. Most modern engines set it when the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object is created. This means you can get the full call stack information within a function using the following:\n\n```\nfunction foo() {\n  console.log(new Error().stack);\n}\n```\n\nWithout having to throw an error and then catch it.\n\nIn V8, the non-standard `Error.captureStackTrace()`, `Error.stackTraceLimit`, and `Error.prepareStackTrace()` APIs can be used to customize the stack trace. Read the [Stack trace API](https://v8.dev/docs/stack-trace-api) in the V8 docs for more information.\n\nStack frames can be things other than explicit function calls, too. For example, event listeners, timeout jobs, and promise handlers all begin their own call chain. Source code within [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) and [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) constructor calls also appear in the stack:\n\n```\nconsole.log(new Function(\"return new Error('Function failed')\")().stack);\nconsole.log(\"====\");\nconsole.log(eval(\"new Error('eval failed')\").stack);\n```\n\n\\#### JavaScriptCore\nanonymous@\nglobal code@filename.js:1:65\n====\neval code@\neval@\\[native code\\]\nglobal code@filename.js:3:17\n\n#### SpiderMonkey\nanonymous@filename.js line 1 > Function:1:8\n@filename.js:1:65\n\n====\n@filename.js line 3 > eval:1:1\n@filename.js:3:13\n\n#### V8\nError: Function failed\n    at eval (eval at <anonymous> (filename.js:1:13), <anonymous>:1:8)\n    at filename.js:1:65\n====\nError: eval failed\n    at eval (eval at <anonymous> (filename.js:3:13), <anonymous>:1:1)\n    at filename.js:3:13\n\nIn Firefox, you can use the `//# sourceURL` directive to name an eval source. See the Firefox [Debug eval sources](https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/debug_eval_sources/index.html) docs and the [Naming `eval` Scripts with the `//# sourceURL` Directive](https://fitzgeraldnick.com/2014/12/05/name-eval-scripts.html) blog post for more details.\n\n## [Examples](#examples)\n\n### [Using the stack property](#using_the_stack_property)\n\nThe following script demonstrates how to use the `stack` property to output a stack trace into your browser window. You can use this to check what your browser's stack structure looks like.\n\n```\n#output {\n  white-space: pre;\n  font-family: monospace;\n}\n```\n\n```\nfunction trace() {\n  throw new Error(\"trace() failed\");\n}\nfunction b() {\n  trace();\n}\nfunction a() {\n  b(3, 4, \"\\n\\n\", undefined, {});\n}\ntry {\n  a(\"first call, firstarg\");\n} catch (e) {\n  document.getElementById(\"output\").textContent = e.stack;\n}\n```\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [TraceKit](https://github.com/csnover/TraceKit/) on GitHub\n*   [stacktrace.js](https://github.com/stacktracejs/stacktrace.js) on GitHub\n*   [Stack trace API](https://v8.dev/docs/stack-trace-api) in the V8 docs",
    "title": "Error.prototype.stack - JavaScript | MDN",
    "description": "The non-standard stack property of an Error instance offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber",
    "markdown": "# Error: lineNumber - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`lineNumber`** data property of an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance contains the line number in the file that raised this error.\n\n## [Value](#value)\n\nA positive integer.\n\n| Property attributes of `Error: lineNumber` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Examples](#examples)\n\n### [Using lineNumber](#using_linenumber)\n\n```\ntry {\n  throw new Error(\"Could not parse input\");\n} catch (err) {\n  console.log(err.lineNumber); // 2\n}\n```\n\n### [Alternative example using error event](#alternative_example_using_error_event)\n\n```\nwindow.addEventListener(\"error\", (e) => {\n  console.log(e.lineNumber); // 5\n});\nconst e = new Error(\"Could not parse input\");\nthrow e;\n```\n\nThis is not a standard feature and lacks widespread support. See the browser compatibility table below.\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error: lineNumber - JavaScript | MDN",
    "description": "The lineNumber data property of an Error instance contains the line number in the file that raised this error.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message",
    "markdown": "# Error: message - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`message`** data property of an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance is a human-readable description of the error.\n\n## [Value](#value)\n\nA string corresponding to the value passed to the [`Error()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error) constructor as the first argument.\n\n| Property attributes of `Error: message` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nThis property contains a brief description of the error if one is available or has been set. The `message` property combined with the [`name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name) property is used by the [`Error.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString) method to create a string representation of the Error.\n\nBy default, the `message` property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error) constructor.\n\n## [Examples](#examples)\n\n### [Throwing a custom error](#throwing_a_custom_error)\n\n```\nconst e = new Error(\"Could not parse input\");\n// e.message is 'Could not parse input'\nthrow e;\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-error.prototype.message](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error.prototype.message) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error: message - JavaScript | MDN",
    "description": "The message data property of an Error instance is a human-readable description of the error.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName",
    "markdown": "# Error: fileName - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`fileName`** data property of an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance contains the path to the file that raised this error.\n\n## [Value](#value)\n\nA string.\n\n| Property attributes of `Error: fileName` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nThis non-standard property contains the path to the file that raised this error. If called from a debugger context, the Firefox Developer Tools for example, \"debugger eval code\" is returned.\n\n## [Examples](#examples)\n\n### [Using fileName](#using_filename)\n\n```\nconst e = new Error(\"Could not parse input\");\nthrow e;\n// e.fileName could look like \"file:///C:/example.html\"\n```\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error: fileName - JavaScript | MDN",
    "description": "The fileName data property of an Error instance contains the path to the file that raised this error.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name",
    "markdown": "# Error.prototype.name - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`name`** data property of `Error.prototype` is shared by all [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instances. It represents the name for the type of error. For `Error.prototype.name`, the initial value is `\"Error\"`. Subclasses like [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) and [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) provide their own `name` properties.\n\n## [Value](#value)\n\nA string. For `Error.prototype.name`, the initial value is `\"Error\"`.\n\n| Property attributes of `Error.prototype.name` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nBy default, [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instances are given the name \"Error\". The `name` property, in addition to the [`message`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message) property, is used by the [`Error.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString) method to create a string representation of the error.\n\n## [Examples](#examples)\n\n### [Throwing a custom error](#throwing_a_custom_error)\n\n```\nconst e = new Error(\"Malformed input\"); // e.name is 'Error'\n\ne.name = \"ParseError\";\nthrow e;\n// e.toString() would return 'ParseError: Malformed input'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-error.prototype.name](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error.prototype.name) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error.prototype.name - JavaScript | MDN",
    "description": "The name data property of Error.prototype is shared by all Error instances. It represents the name for the type of error. For Error.prototype.name, the initial value is \"Error\". Subclasses like TypeError and SyntaxError provide their own name properties.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance",
    "markdown": "# Function.prototype\\[@@hasInstance\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@hasInstance]()`** method of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instances specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. It is called by the [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator.\n\n## [Syntax](#syntax)\n\n```\nfunc[Symbol.hasInstance](value)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe object to test. Primitive values always return `false`.\n\n### [Return value](#return_value)\n\n`true` if `func.prototype` is in the prototype chain of `value`; otherwise, `false`. Always returns `false` if `value` is not an object or `this` is not a function. If `this` is a [bound function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind), returns the result of a `instanceof` test on `value` and the underlying target function.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `this` is not a bound function and `this.prototype` is not an object.\n\n## [Description](#description)\n\nThe [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator calls the [`[@@hasInstance]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) method of the right-hand side whenever such a method exists. Because all functions inherit from `Function.prototype` by default, they would all have the `[@@hasInstance]()` method, so most of the time, the `Function.prototype[@@hasInstance]` method specifies the behavior of `instanceof` when the right-hand side is a function. This method implements the default behavior of the `instanceof` operator (the same algorithm when `constructor` has no `@@hasInstance` method).\n\nUnlike most methods, the `Function.prototype[@@hasInstance]()` property is non-configurable and non-writable. This is a security feature to prevent the underlying target function of a bound function from being obtainable. See [this StackOverflow answer](https://stackoverflow.com/questions/38215027/trying-to-understand-the-official-es6-spec-regarding-symbol-hasinstance/38215392#38215392) for an example.\n\n## [Examples](#examples)\n\n### [Reverting to default instanceof behavior](#reverting_to_default_instanceof_behavior)\n\nYou would rarely need to call this method directly. Instead, this method is called by the `instanceof` operator. You should expect the two results to usually be equivalent.\n\n```\nclass Foo {}\nconst foo = new Foo();\nconsole.log(foo instanceof Foo === Foo[Symbol.hasInstance](foo)); // true\n```\n\nYou may want to use this method if you want to invoke the default `instanceof` behavior, but you don't know if a constructor has a overridden `[@@hasInstance]()` method.\n\n```\nclass Foo {\n  static [Symbol.hasInstance](value) {\n    // A custom implementation\n    return false;\n  }\n}\n\nconst foo = new Foo();\nconsole.log(foo instanceof Foo); // false\nconsole.log(Function.prototype[Symbol.hasInstance].call(Foo, foo)); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function.prototype-@@hasinstance](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype-@@hasinstance) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function.prototype[@@hasInstance]() - JavaScript | MDN",
    "description": "The [@@hasInstance]() method of Function instances specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. It is called by the instanceof operator.",
    "languageCode": "en-US"
  }
]