docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Resume a subscription | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscriptions/list",
  "markdown": "# List subscriptions | Stripe API Reference\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a subscription](https://docs.stripe.com/api/subscriptions/cancel)\n\nCancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually [deleted](#delete_invoiceitem). If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n### Returns\n\nThe canceled `Subscription` object. Its subscription status will be set to `canceled`.\n\nDELETE /v1/subscriptions/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1MlPf9LkdIwHu7ixB6VIYRyX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1678768838,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": 1678768842,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": \"cancellation_requested\"  },  \"collection_method\": \"charge_automatically\",  \"created\": 1678768838,  \"currency\": \"usd\",  \"current_period_end\": 1681447238,  \"current_period_start\": 1678768838,  \"customer\": \"cus_NWSaVkvdacCUi4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": 1678768842,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NWSaWTp80M123q\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1678768839,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MlPf9LkdIwHu7ixB6VIYRyX\"  },  \"latest_invoice\": \"in_1MlPf9LkdIwHu7ixEo6hdgCw\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1678768837,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NWSaMgipulx8IQ\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1678768838,  \"status\": \"canceled\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Resume a subscription](https://docs.stripe.com/api/subscriptions/resume)\n\nInitiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become `active`, and if payment fails the subscription will be `past_due`. The resumption invoice will void automatically if not paid by the expiration date.\n\n### Parameters\n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n    Either `now` or `unchanged`. Setting the value to `now` resets the subscription’s billing cycle anchor to the current time (in UTC). Setting the value to `unchanged` advances the subscription’s billing cycle anchor to the period that surrounds the current time. For more information, see the billing cycle [documentation](https://docs.stripe.com/billing/subscriptions/billing-cycle).\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n### Returns\n\nThe subscription object.\n\nPOST /v1/subscriptions/:id/resume\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MoGGtLkdIwHu7ixk5CfdiqC/resume \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d billing_cycle_anchor=now\n```\n\n```\n{  \"id\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679447726,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679447723,  \"currency\": \"usd\",  \"current_period_end\": 1682126126,  \"current_period_start\": 1679447726,  \"customer\": \"cus_NZP5i1diUz55jp\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NZP5BhUIuWzXDG\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679447724,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MoGGtLkdIwHu7ixk5CfdiqC\"  },  \"latest_invoice\": \"in_1MoGGwLkdIwHu7ixHSrelo8X\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1679447722,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NZP5rEATBlScM9\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1679447723,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Search subscriptions](https://docs.stripe.com/api/subscriptions/search)\n\nSearch for subscriptions you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscriptions. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/subscriptions/search\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"status:'active' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/subscriptions/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679446874,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679446874,      \"currency\": \"usd\",      \"current_period_end\": 1682125274,      \"current_period_start\": 1679446874,      \"customer\": \"cus_NZOq6LNU39H6ZI\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_NZOqmziODmZt2v\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679446875,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1099,              \"amount_decimal\": \"1099\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679446873,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_NZOqsBJfaRYI1M\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1099,              \"unit_amount_decimal\": \"1099\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MoG3CLkdIwHu7ixd86qvAfe\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MoG3CLkdIwHu7ixd86qvAfe\"      },      \"latest_invoice\": \"in_1MoG3CLkdIwHu7ixuBm2QIyW\",      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"plan\": {        \"id\": \"price_1MoG3BLkdIwHu7ixrHMcmj3f\",        \"object\": \"plan\",        \"active\": true,        \"aggregate_usage\": null,        \"amount\": 1099,        \"amount_decimal\": \"1099\",        \"billing_scheme\": \"per_unit\",        \"created\": 1679446873,        \"currency\": \"usd\",        \"interval\": \"month\",        \"interval_count\": 1,        \"livemode\": false,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NZOqsBJfaRYI1M\",        \"tiers_mode\": null,        \"transform_usage\": null,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"quantity\": 1,      \"schedule\": null,      \"start_date\": 1679446874,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List subscriptions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_items",
  "markdown": "# Subscription Items | Stripe API Reference\n\n## [The Subscription Item object](https://docs.stripe.com/api/subscription_items/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The price the customer is subscribed to.\n    \n*   The [quantity](https://docs.stripe.com/subscriptions/quantities) of the plan to which the customer should be subscribed.\n    \n*   The `subscription` this `subscription_item` belongs to.\n    \n\n### More attributes\n\n*   #### \n    \n    billing\\_thresholdsnullable object\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    tax\\_ratesnullable array of objects\n    \n\nThe Subscription Item object\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Create a subscription item](https://docs.stripe.com/api/subscription_items/create)\n\nAdds a new item to an existing subscription. No existing items will be changed or replaced.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The identifier of the subscription to modify.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nReturns the created `Subscription Item` object, if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/subscription\\_items\n\n```\ncurl https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d subscription=sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd \\  -d price=price_1Mr6rdLkdIwHu7ixwPmiybbR \\  -d quantity=2\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Update a subscription item](https://docs.stripe.com/api/subscription_items/update)\n\nUpdates the plan or quantity of an item on a current subscription.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item’s price, `quantity` is set to 1 unless a `quantity` parameter is provided.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nPOST /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {    \"order_id\": \"6735\"  },  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Retrieve a subscription item](https://docs.stripe.com/api/subscription_items/retrieve)\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```",
  "title": "Subscription Items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_items/create",
  "markdown": "# Create a subscription item | Stripe API Reference\n\nAdds a new item to an existing subscription. No existing items will be changed or replaced.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The identifier of the subscription to modify.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nReturns the created `Subscription Item` object, if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/subscription\\_items\n\n```\ncurl https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d subscription=sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd \\  -d price=price_1Mr6rdLkdIwHu7ixwPmiybbR \\  -d quantity=2\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Update a subscription item](https://docs.stripe.com/api/subscription_items/update)\n\nUpdates the plan or quantity of an item on a current subscription.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item’s price, `quantity` is set to 1 unless a `quantity` parameter is provided.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nPOST /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {    \"order_id\": \"6735\"  },  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Retrieve a subscription item](https://docs.stripe.com/api/subscription_items/retrieve)\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [List all subscription items](https://docs.stripe.com/api/subscription_items/list)\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```\n\n## [Delete a subscription item](https://docs.stripe.com/api/subscription_items/delete)\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```",
  "title": "Create a subscription item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_items/list",
  "markdown": "# List all subscription items | Stripe API Reference\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```\n\n## [Delete a subscription item](https://docs.stripe.com/api/subscription_items/delete)\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all subscription items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_items/update",
  "markdown": "# Update a subscription item | Stripe API Reference\n\nUpdates the plan or quantity of an item on a current subscription.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item’s price, `quantity` is set to 1 unless a `quantity` parameter is provided.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nPOST /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {    \"order_id\": \"6735\"  },  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Retrieve a subscription item](https://docs.stripe.com/api/subscription_items/retrieve)\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [List all subscription items](https://docs.stripe.com/api/subscription_items/list)\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```\n\n## [Delete a subscription item](https://docs.stripe.com/api/subscription_items/delete)\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a subscription item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_items/delete",
  "markdown": "# Delete a subscription item | Stripe API Reference\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a subscription item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_items/retrieve",
  "markdown": "# Retrieve a subscription item | Stripe API Reference\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [List all subscription items](https://docs.stripe.com/api/subscription_items/list)\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```\n\n## [Delete a subscription item](https://docs.stripe.com/api/subscription_items/delete)\n\nDeletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\n\n### Parameters\n\n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n\n### More parameters\n\n### Returns\n\nAn subscription item object with a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the subscription item has already been deleted.\n\nDELETE /v1/subscription\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a subscription item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_schedules/update",
  "markdown": "# Update a schedule | Stripe API Reference\n\nUpdates an existing subscription schedule.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted.\n    \n*   If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Prorate changes, and force an invoice to be immediately created for any prorations. |\n    | `create_prorations`<br><br>Prorate changes, but leave any prorations as pending invoice items to be picked up on the customer’s next invoice. |\n    | `none`<br><br>Does not create any prorations. |\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated subscription schedule object if the call succeeded.\n\nPOST /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d end_behavior=release\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Retrieve a schedule](https://docs.stripe.com/api/subscription_schedules/retrieve)\n\nRetrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription schedule object if a valid identifier was provided.\n\nGET /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [List all schedules](https://docs.stripe.com/api/subscription_schedules/list)\n\nRetrieves the list of your subscription schedules.\n\n### Parameters\n\n*   Only return subscription schedules for the given customer.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription schedules, starting after subscription schedule `starting_after`. Each entry in the array is a separate subscription schedule object. If no more subscription schedules are available, the resulting array will be empty.\n\nGET /v1/subscription\\_schedules\n\n```\ncurl -G https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_schedules\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",      \"object\": \"subscription_schedule\",      \"application\": null,      \"canceled_at\": null,      \"completed_at\": null,      \"created\": 1680113835,      \"current_phase\": null,      \"customer\": \"cus_NcI8FsMbh0OeFs\",      \"default_settings\": {        \"application_fee_percent\": null,        \"automatic_tax\": {          \"enabled\": false,          \"liability\": null        },        \"billing_cycle_anchor\": \"automatic\",        \"billing_thresholds\": null,        \"collection_method\": \"charge_automatically\",        \"default_payment_method\": null,        \"default_source\": null,        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"on_behalf_of\": null,        \"transfer_data\": null      },      \"end_behavior\": \"release\",      \"livemode\": false,      \"metadata\": {},      \"phases\": [        {          \"add_invoice_items\": [],          \"application_fee_percent\": null,          \"billing_cycle_anchor\": null,          \"billing_thresholds\": null,          \"collection_method\": null,          \"coupon\": null,          \"currency\": \"usd\",          \"default_payment_method\": null,          \"default_tax_rates\": [],          \"description\": null,          \"discounts\": null,          \"end_date\": 1712339228,          \"invoice_settings\": null,          \"items\": [            {              \"billing_thresholds\": null,              \"discounts\": null,              \"metadata\": {},              \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"quantity\": 1,              \"tax_rates\": []            }          ],          \"metadata\": {},          \"on_behalf_of\": null,          \"proration_behavior\": \"create_prorations\",          \"start_date\": 1680716828,          \"transfer_data\": null,          \"trial_end\": null        }      ],      \"released_at\": null,      \"released_subscription\": null,      \"renewal_interval\": null,      \"status\": \"not_started\",      \"subscription\": null,      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a schedule](https://docs.stripe.com/api/subscription_schedules/cancel)\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Release a schedule](https://docs.stripe.com/api/subscription_schedules/release)\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```",
  "title": "Update a schedule | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_schedules/list",
  "markdown": "# List all schedules | Stripe API Reference\n\nRetrieves the list of your subscription schedules.\n\n### Parameters\n\n*   Only return subscription schedules for the given customer.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription schedules, starting after subscription schedule `starting_after`. Each entry in the array is a separate subscription schedule object. If no more subscription schedules are available, the resulting array will be empty.\n\nGET /v1/subscription\\_schedules\n\n```\ncurl -G https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_schedules\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",      \"object\": \"subscription_schedule\",      \"application\": null,      \"canceled_at\": null,      \"completed_at\": null,      \"created\": 1680113835,      \"current_phase\": null,      \"customer\": \"cus_NcI8FsMbh0OeFs\",      \"default_settings\": {        \"application_fee_percent\": null,        \"automatic_tax\": {          \"enabled\": false,          \"liability\": null        },        \"billing_cycle_anchor\": \"automatic\",        \"billing_thresholds\": null,        \"collection_method\": \"charge_automatically\",        \"default_payment_method\": null,        \"default_source\": null,        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"on_behalf_of\": null,        \"transfer_data\": null      },      \"end_behavior\": \"release\",      \"livemode\": false,      \"metadata\": {},      \"phases\": [        {          \"add_invoice_items\": [],          \"application_fee_percent\": null,          \"billing_cycle_anchor\": null,          \"billing_thresholds\": null,          \"collection_method\": null,          \"coupon\": null,          \"currency\": \"usd\",          \"default_payment_method\": null,          \"default_tax_rates\": [],          \"description\": null,          \"discounts\": null,          \"end_date\": 1712339228,          \"invoice_settings\": null,          \"items\": [            {              \"billing_thresholds\": null,              \"discounts\": null,              \"metadata\": {},              \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"quantity\": 1,              \"tax_rates\": []            }          ],          \"metadata\": {},          \"on_behalf_of\": null,          \"proration_behavior\": \"create_prorations\",          \"start_date\": 1680716828,          \"transfer_data\": null,          \"trial_end\": null        }      ],      \"released_at\": null,      \"released_subscription\": null,      \"renewal_interval\": null,      \"status\": \"not_started\",      \"subscription\": null,      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a schedule](https://docs.stripe.com/api/subscription_schedules/cancel)\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Release a schedule](https://docs.stripe.com/api/subscription_schedules/release)\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all schedules | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_schedules/cancel",
  "markdown": "# Cancel a schedule | Stripe API Reference\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Release a schedule](https://docs.stripe.com/api/subscription_schedules/release)\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Cancel a schedule | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_schedules/retrieve",
  "markdown": "# Retrieve a schedule | Stripe API Reference\n\nRetrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription schedule object if a valid identifier was provided.\n\nGET /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [List all schedules](https://docs.stripe.com/api/subscription_schedules/list)\n\nRetrieves the list of your subscription schedules.\n\n### Parameters\n\n*   Only return subscription schedules for the given customer.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription schedules, starting after subscription schedule `starting_after`. Each entry in the array is a separate subscription schedule object. If no more subscription schedules are available, the resulting array will be empty.\n\nGET /v1/subscription\\_schedules\n\n```\ncurl -G https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_schedules\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",      \"object\": \"subscription_schedule\",      \"application\": null,      \"canceled_at\": null,      \"completed_at\": null,      \"created\": 1680113835,      \"current_phase\": null,      \"customer\": \"cus_NcI8FsMbh0OeFs\",      \"default_settings\": {        \"application_fee_percent\": null,        \"automatic_tax\": {          \"enabled\": false,          \"liability\": null        },        \"billing_cycle_anchor\": \"automatic\",        \"billing_thresholds\": null,        \"collection_method\": \"charge_automatically\",        \"default_payment_method\": null,        \"default_source\": null,        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"on_behalf_of\": null,        \"transfer_data\": null      },      \"end_behavior\": \"release\",      \"livemode\": false,      \"metadata\": {},      \"phases\": [        {          \"add_invoice_items\": [],          \"application_fee_percent\": null,          \"billing_cycle_anchor\": null,          \"billing_thresholds\": null,          \"collection_method\": null,          \"coupon\": null,          \"currency\": \"usd\",          \"default_payment_method\": null,          \"default_tax_rates\": [],          \"description\": null,          \"discounts\": null,          \"end_date\": 1712339228,          \"invoice_settings\": null,          \"items\": [            {              \"billing_thresholds\": null,              \"discounts\": null,              \"metadata\": {},              \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"quantity\": 1,              \"tax_rates\": []            }          ],          \"metadata\": {},          \"on_behalf_of\": null,          \"proration_behavior\": \"create_prorations\",          \"start_date\": 1680716828,          \"transfer_data\": null,          \"trial_end\": null        }      ],      \"released_at\": null,      \"released_subscription\": null,      \"renewal_interval\": null,      \"status\": \"not_started\",      \"subscription\": null,      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a schedule](https://docs.stripe.com/api/subscription_schedules/cancel)\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Release a schedule](https://docs.stripe.com/api/subscription_schedules/release)\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a schedule | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_balance_transactions",
  "markdown": "# Customer Balance Transaction | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fcustomer_balance_transactions)\n\n## [The Customer Balance Transaction object](https://docs.stripe.com/api/customer_balance_transactions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount of the transaction. A negative value is a credit for the customer’s balance, and a positive value is a debit to the customer’s `balance`.\n    \n\n*   The ID of the customer the transaction belongs to.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The customer’s `balance` after the transaction was applied. A negative value decreases the amount due on the customer’s next invoice. A positive value increases the amount due on the customer’s next invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://docs.stripe.com/billing/customer/balance#types) to learn more about transaction types.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `adjustment`<br><br>An explicitly created adjustment transaction to debit or credit the credit balance. |\n    | `applied_to_invoice`<br><br>Traces the application of credit against a linked Invoice. |\n    | `credit_note`<br><br>Traces the creation of credit to a Credit Note and its associated Invoice. |\n    | `initial`<br><br>The starting value of the customer’s credit balance. |\n    | `invoice_overpaid`<br><br>Credits to the credit balance when an invoice receives payments exceeding the amount due. |\n    | `invoice_too_large`<br><br>Debits to the credit balance when the amount due on an invoice is greater than Stripe’s maximum chargeable amount and the customer does not have a cash balance. |\n    | `invoice_too_small`<br><br>Debits to the credit balance when the amount due on an invoice is less than Stripe’s minimum chargeable amount and the customer does not have a cash balance. |\n    | `migration`<br><br>Funds migrated from the legacy customer credit balance. |\n    | `unapplied_from_invoice`<br><br>Traces the reversal of an applied credit balance from a linked Invoice. Paired with an earlier ‘applied\\_to\\_invoice’ transaction. |\n    | `unspent_receiver_credit`<br><br>Unspent funds in receiver Sources that got automatically charged and credited to the balance. |\n    | Show 1 more |\n    \n\n### More attributes\n\n*   #### \n    \n    credit\\_notenullable stringExpandable\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n\nThe Customer Balance Transaction object\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Create a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/create)\n\nCreates an immutable transaction that updates the customer’s credit [balance](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\n*   The integer amount in **cents** to apply to the customer’s credit balance.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=-500 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Update a customer credit balance transaction](https://docs.stripe.com/api/customer_balance_transactions/update)\n\nMost credit balance transaction fields are immutable, but you may update its `description` and `metadata`.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"adjustment\"}\n```\n\n## [Retrieve a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/retrieve)\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```",
  "title": "Customer Balance Transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/credit_notes/preview",
  "markdown": "# Preview a credit note | Stripe API Reference\n\nGet a preview of a credit note without creating it.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object.\n\nGET /v1/credit\\_notes/preview\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Void a credit note](https://docs.stripe.com/api/credit_notes/void)\n\nMarks a credit note as void. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"void\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": 1681750959}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Preview a credit note | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_balance_transactions/update",
  "markdown": "# Update a customer credit balance transaction\n\nMost credit balance transaction fields are immutable, but you may update its `description` and `metadata`.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"adjustment\"}\n```\n\n## [Retrieve a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/retrieve)\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [List customer balance transactions](https://docs.stripe.com/api/customer_balance_transactions/list)\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a customer credit balance transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_balance_transactions/create",
  "markdown": "# Create a customer balance transaction\n\nCreates an immutable transaction that updates the customer’s credit [balance](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\n*   The integer amount in **cents** to apply to the customer’s credit balance.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=-500 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Update a customer credit balance transaction](https://docs.stripe.com/api/customer_balance_transactions/update)\n\nMost credit balance transaction fields are immutable, but you may update its `description` and `metadata`.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"adjustment\"}\n```\n\n## [Retrieve a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/retrieve)\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [List customer balance transactions](https://docs.stripe.com/api/customer_balance_transactions/list)\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a customer balance transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_balance_transactions/retrieve",
  "markdown": "# Retrieve a customer balance transaction\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [List customer balance transactions](https://docs.stripe.com/api/customer_balance_transactions/list)\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a customer balance transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_ids/customer_create",
  "markdown": "# Create a Customer tax ID\n\nCreates a new `tax_id` object for a customer.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### Returns\n\nThe created `tax_id` object.\n\nPOST /v1/customers/:id/tax\\_ids\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Create a tax ID](https://docs.stripe.com/api/tax_ids/create)\n\nCreates a new account or customer `tax_id` object.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### More parameters\n\n### Returns\n\nThe created `tax_id` object.\n\n```\ncurl https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Retrieve a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Retrieve a tax ID](https://docs.stripe.com/api/tax_ids/retrieve)\n\nRetrieves an account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [List all Customer tax IDs](https://docs.stripe.com/api/tax_ids/customer_list)\n\nReturns a list of tax IDs for a customer.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty. Raises [an error](#errors) if the customer ID is invalid.\n\nGET /v1/customers/:id/tax\\_ids\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 1679431857,      \"customer\": \"cus_NZKoSNZZ58qtO0\",      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": {        \"status\": \"pending\",        \"verified_address\": null,        \"verified_name\": null      }    }    {...}    {...}  ],}\n```",
  "title": "Create a Customer tax ID | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_balance_transactions/list",
  "markdown": "# List customer balance transactions | Stripe API Reference\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List customer balance transactions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/sessions",
  "markdown": "# Customer Portal Session | Stripe API Reference\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [The Customer Portal Session object](https://docs.stripe.com/api/customer_portal/sessions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    configurationstringExpandable\n    \n    The configuration used by this session, describing the features available.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The ID of the customer for this session.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n    The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    The URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n*   The short-lived URL of the session that gives customers access to the customer portal.\n    \n\nThe Customer Portal Session object\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Create a portal session](https://docs.stripe.com/api/customer_portal/sessions/create)\n\nCreates a session of the customer portal.\n\n### Parameters\n\n*   The ID of an existing customer.\n    \n*   The ID of an existing [configuration](https://docs.stripe.com/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n    The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n\n### Returns\n\nReturns a portal session object.\n\nPOST /v1/billing\\_portal/sessions\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NciAYcXfLnqBoz \\  --data-urlencode return_url=\"https://example.com/account\"\n```\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Customer Portal Session | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_ids/customer_retrieve",
  "markdown": "# Retrieve a Customer tax ID\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax_ids%2Fcustomer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Retrieve a tax ID](https://docs.stripe.com/api/tax_ids/retrieve)\n\nRetrieves an account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [List all Customer tax IDs](https://docs.stripe.com/api/tax_ids/customer_list)\n\nReturns a list of tax IDs for a customer.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty. Raises [an error](#errors) if the customer ID is invalid.\n\nGET /v1/customers/:id/tax\\_ids\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 1679431857,      \"customer\": \"cus_NZKoSNZZ58qtO0\",      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": {        \"status\": \"pending\",        \"verified_address\": null,        \"verified_name\": null      }    }    {...}    {...}  ],}\n```\n\n## [List all tax IDs](https://docs.stripe.com/api/tax_ids/list)\n\nReturns a list of tax IDs.\n\n### Parameters\n\n*   The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 123456789,      \"customer\": null,      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": null,      \"owner\": {        \"type\": \"self\",        \"customer\": null      }    }    {...}    {...}  ],}\n```\n\n## [Delete a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_delete)\n\nDeletes an existing `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\nDELETE /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"deleted\": true}\n```",
  "title": "Retrieve a Customer tax ID | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/configurations",
  "markdown": "# Customer Portal Configuration | Stripe API Reference\n\n## [The Customer portal configuration object](https://docs.stripe.com/api/customer_portal/configurations/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n    ID of the Connect Application that created the configuration.\n    \n*   The business information shown to customers in the portal.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    default\\_return\\_urlnullable string\n    \n    The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n\nThe Customer portal configuration object\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Create a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/create)\n\nCreates a configuration that describes the functionality and behavior of a PortalSession\n\n### Parameters\n\n*   #### \n    \n    business\\_profileobjectRequired\n    \n    The business information shown to customers in the portal.\n    \n*   Information about the features available in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/privacy\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/terms\" \\  -d \"features[customer_update][allowed_updates][]\"=email \\  -d \"features[customer_update][allowed_updates][]\"=tax_id \\  -d \"features[customer_update][enabled]\"=true \\  -d \"features[invoice_history][enabled]\"=true\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Update a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/update)\n\nUpdates a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   The business information shown to customers in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/new_privacy_url\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/new_terms_of_service_url\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/new_privacy_url\",    \"terms_of_service_url\": \"https://example.com/new_terms_of_service_url\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1688593779}\n```\n\n## [Retrieve a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/retrieve)\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```",
  "title": "Customer Portal Configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/configurations/create",
  "markdown": "# Create a portal configuration | Stripe API Reference\n\nCreates a configuration that describes the functionality and behavior of a PortalSession\n\n### Parameters\n\n*   #### \n    \n    business\\_profileobjectRequired\n    \n    The business information shown to customers in the portal.\n    \n*   Information about the features available in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/privacy\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/terms\" \\  -d \"features[customer_update][allowed_updates][]\"=email \\  -d \"features[customer_update][allowed_updates][]\"=tax_id \\  -d \"features[customer_update][enabled]\"=true \\  -d \"features[invoice_history][enabled]\"=true\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Update a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/update)\n\nUpdates a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   The business information shown to customers in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/new_privacy_url\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/new_terms_of_service_url\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/new_privacy_url\",    \"terms_of_service_url\": \"https://example.com/new_terms_of_service_url\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1688593779}\n```\n\n## [Retrieve a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/retrieve)\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [List portal configurations](https://docs.stripe.com/api/customer_portal/configurations/list)\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a portal configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter/retrieve",
  "markdown": "# Retrieve a billing meter | Stripe API Reference\n\nRetrieves a billing meter given an ID\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nGET /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [List billing meters](https://docs.stripe.com/api/billing/meter/list)\n\nRetrieve a list of billing meters.\n\n### Parameters\n\n*   Filter results to only include meters with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meters.\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtr_123\",      \"object\": \"billing.meter\",      \"created\": 1704824589,      \"customer_mapping\": {        \"type\": \"by_id\",        \"event_payload_key\": \"stripe_customer_id\"      },      \"default_aggregation\": {        \"formula\": \"sum\"      },      \"display_name\": \"Search API Calls\",      \"event_name\": \"ai_search_api\",      \"event_time_window\": null,      \"livemode\": false,      \"status\": \"active\",      \"status_transitions\": {        \"deactivated_at\": null      },      \"updated\": 1704898330,      \"value_settings\": {        \"event_payload_key\": \"tokens\"      }    }  ],  \"has_more\": true,  \"url\": \"v1/billing/meters\"}\n```\n\n## [Deactivate a billing meter](https://docs.stripe.com/api/billing/meter/deactivate)\n\nDeactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": 1704898330  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Reactivate a billing meter](https://docs.stripe.com/api/billing/meter/reactivate)\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a billing meter | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/configurations/update",
  "markdown": "# Update a portal configuration | Stripe API Reference\n\nUpdates a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   The business information shown to customers in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/new_privacy_url\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/new_terms_of_service_url\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/new_privacy_url\",    \"terms_of_service_url\": \"https://example.com/new_terms_of_service_url\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1688593779}\n```\n\n## [Retrieve a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/retrieve)\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [List portal configurations](https://docs.stripe.com/api/customer_portal/configurations/list)\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a portal configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/configurations/retrieve",
  "markdown": "# Retrieve a portal configuration | Stripe API Reference\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [List portal configurations](https://docs.stripe.com/api/customer_portal/configurations/list)\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a portal configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/configurations/list",
  "markdown": "# List portal configurations | Stripe API Reference\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List portal configurations | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter/list",
  "markdown": "# List billing meters | Stripe API Reference\n\nRetrieve a list of billing meters.\n\n### Parameters\n\n*   Filter results to only include meters with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meters.\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtr_123\",      \"object\": \"billing.meter\",      \"created\": 1704824589,      \"customer_mapping\": {        \"type\": \"by_id\",        \"event_payload_key\": \"stripe_customer_id\"      },      \"default_aggregation\": {        \"formula\": \"sum\"      },      \"display_name\": \"Search API Calls\",      \"event_name\": \"ai_search_api\",      \"event_time_window\": null,      \"livemode\": false,      \"status\": \"active\",      \"status_transitions\": {        \"deactivated_at\": null      },      \"updated\": 1704898330,      \"value_settings\": {        \"event_payload_key\": \"tokens\"      }    }  ],  \"has_more\": true,  \"url\": \"v1/billing/meters\"}\n```\n\n## [Deactivate a billing meter](https://docs.stripe.com/api/billing/meter/deactivate)\n\nDeactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": 1704898330  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Reactivate a billing meter](https://docs.stripe.com/api/billing/meter/reactivate)\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List billing meters | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter/deactivate",
  "markdown": "# Deactivate a billing meter | Stripe API Reference\n\nDeactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": 1704898330  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Reactivate a billing meter](https://docs.stripe.com/api/billing/meter/reactivate)\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Deactivate a billing meter | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter/reactivate",
  "markdown": "# Reactivate a billing meter | Stripe API Reference\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Reactivate a billing meter | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event/create",
  "markdown": "# Create a billing meter event\n\nCreates a billing meter event\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   The payload of the event. This must contain the fields corresponding to a meter’s `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).\n    \n*   A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this. We’ll enforce uniqueness within a rolling 24 hour period.\n    \n*   The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.\n    \n\n### Returns\n\nReturns a billing meter event\n\nPOST /v1/billing/meter\\_events\n\n```\ncurl https://api.stripe.com/v1/billing/meter_events \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d event_name=ai_search_api \\  -d \"payload[value]\"=25 \\  -d \"payload[stripe_customer_id]\"=cus_NciAYcXfLnqBoz \\  -d identifier=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event\",  \"created\": 1704824589,  \"event_name\": \"ai_search_api\",  \"identifier\": \"identifier_123\",  \"livemode\": true,  \"payload\": {    \"value\": \"25\",    \"stripe_customer_id\": \"cus_NciAYcXfLnqBoz\"  },  \"timestamp\": 1680210639}\n```\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a billing meter event | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoiceitems/create",
  "markdown": "# Create an invoice item | Stripe API Reference\n\nCreates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.\n\n### Parameters\n\n*   The ID of the customer who will be billed when this invoice item is billed.\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice.\n    \n\n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe created invoice item object is returned if successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZei8imSbMVvi \\  -d price=price_1MtGUsLkdIwHu7ix1be5Ljaj\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Update an invoice item](https://docs.stripe.com/api/invoiceitems/update)\n\nUpdates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.\n\n### Parameters\n\n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe updated invoice item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoiceitems/:id\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Retrieve an invoice item](https://docs.stripe.com/api/invoiceitems/retrieve)\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [List all invoice items](https://docs.stripe.com/api/invoiceitems/list)\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```\n\n## [Delete an invoice item](https://docs.stripe.com/api/invoiceitems/delete)\n\nDeletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted invoice item’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the invoice item has already been deleted.\n\nDELETE /v1/invoiceitems/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"deleted\": true}\n```",
  "title": "Create an invoice item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event_adjustment",
  "markdown": "# Meter Event Adjustment | Stripe API Reference\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [The Meter Event Adjustment object](https://docs.stripe.com/api/billing/meter-event_adjustment/object)\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Specifies which event to cancel.\n    \n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter event adjustment’s status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `complete`<br><br>The event adjustment has been processed. |\n    | `pending`<br><br>The event adjustment is still being processed. |\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n\nThe Meter Event Adjustment object\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Create a billing meter event adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment/create)\n\nCreates a billing meter event adjustment\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n*   Specifies which event to cancel.\n    \n\n### Returns\n\nReturns a billing meter event adjustment\n\nPOST /v1/billing/meter\\_event\\_adjustments\n\n```\ncurl https://api.stripe.com/v1/billing/meter_event_adjustments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cancel \\  -d event_name=ai_search_api \\  -d \"cancel[identifier]\"=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Meter Event Adjustment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoiceitems/update",
  "markdown": "# Update an invoice item | Stripe API Reference\n\nUpdates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.\n\n### Parameters\n\n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe updated invoice item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoiceitems/:id\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Retrieve an invoice item](https://docs.stripe.com/api/invoiceitems/retrieve)\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [List all invoice items](https://docs.stripe.com/api/invoiceitems/list)\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```\n\n## [Delete an invoice item](https://docs.stripe.com/api/invoiceitems/delete)\n\nDeletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted invoice item’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the invoice item has already been deleted.\n\nDELETE /v1/invoiceitems/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"deleted\": true}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update an invoice item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoiceitems/retrieve",
  "markdown": "# Retrieve an invoice item | Stripe API Reference\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [List all invoice items](https://docs.stripe.com/api/invoiceitems/list)\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```\n\n## [Delete an invoice item](https://docs.stripe.com/api/invoiceitems/delete)\n\nDeletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted invoice item’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the invoice item has already been deleted.\n\nDELETE /v1/invoiceitems/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"deleted\": true}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an invoice item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event_adjustment/create",
  "markdown": "# Create a billing meter event adjustment\n\nCreates a billing meter event adjustment\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n*   Specifies which event to cancel.\n    \n\n### Returns\n\nReturns a billing meter event adjustment\n\nPOST /v1/billing/meter\\_event\\_adjustments\n\n```\ncurl https://api.stripe.com/v1/billing/meter_event_adjustments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cancel \\  -d event_name=ai_search_api \\  -d \"cancel[identifier]\"=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a billing meter event adjustment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event_summary",
  "markdown": "# Meter Event Summary | Stripe API Reference\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [The Meter Event Summary object](https://docs.stripe.com/api/billing/meter-event_summary/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`.\n    \n*   End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter associated with this event summary.\n    \n*   Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.\n    \n\nThe Meter Event Summary object\n\n```\n{  \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xi3Cy3Cy3Cy\",  \"object\": \"billing.meter_event_summary\",  \"aggregated_value\": 10,  \"end_time\": 1711659600,  \"livemode\": false,  \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",  \"start_time\": 1711656000}\n```\n\n## [List billing meter event summaries](https://docs.stripe.com/api/billing/meter-event_summary/list)\n\nRetrieve a list of billing meter event summaries.\n\n### Parameters\n\n*   The customer for which to fetch event summaries.\n    \n*   #### \n    \n    end\\_timetimestampRequired\n    \n    The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.\n    \n*   Unique identifier for the object.\n    \n*   #### \n    \n    start\\_timetimestampRequired\n    \n    The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.\n    \n*   #### \n    \n    value\\_grouping\\_windowenum\n    \n    Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, …, 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Generate event summaries per day. |\n    | `hour`<br><br>Generate event summaries per hour. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meter event summaries.\n\nGET /v1/billing/meters/:id/event\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/billing/meters/mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA/event_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Pp40waj64hdRxb \\  -d start_time=1711584000 \\  -d end_time=1711666800 \\  -d value_grouping_window=hour\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xl3bk3Cy3Cy\",      \"object\": \"billing.meter_event_summary\",      \"aggregated_value\": 15,      \"end_time\": 1711663200,      \"livemode\": false,      \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",      \"start_time\": 1711659600    },    {      \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xi3Cy3Cy3Cy\",      \"object\": \"billing.meter_event_summary\",      \"aggregated_value\": 10,      \"end_time\": 1711659600,      \"livemode\": false,      \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",      \"start_time\": 1711656000    }  ],  \"has_more\": false,  \"url\": \"/v1/billing/meters/:id/event_summaries\"}\n```\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Meter Event Summary | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoiceitems/list",
  "markdown": "# List all invoice items | Stripe API Reference\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```\n\n## [Delete an invoice item](https://docs.stripe.com/api/invoiceitems/delete)\n\nDeletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted invoice item’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the invoice item has already been deleted.\n\nDELETE /v1/invoiceitems/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"deleted\": true}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all invoice items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event_summary/list",
  "markdown": "# List billing meter event summaries\n\nRetrieve a list of billing meter event summaries.\n\n### Parameters\n\n*   The customer for which to fetch event summaries.\n    \n*   #### \n    \n    end\\_timetimestampRequired\n    \n    The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.\n    \n*   Unique identifier for the object.\n    \n*   #### \n    \n    start\\_timetimestampRequired\n    \n    The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.\n    \n*   #### \n    \n    value\\_grouping\\_windowenum\n    \n    Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, …, 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Generate event summaries per day. |\n    | `hour`<br><br>Generate event summaries per hour. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meter event summaries.\n\nGET /v1/billing/meters/:id/event\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/billing/meters/mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA/event_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Pp40waj64hdRxb \\  -d start_time=1711584000 \\  -d end_time=1711666800 \\  -d value_grouping_window=hour\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xl3bk3Cy3Cy\",      \"object\": \"billing.meter_event_summary\",      \"aggregated_value\": 15,      \"end_time\": 1711663200,      \"livemode\": false,      \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",      \"start_time\": 1711659600    },    {      \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xi3Cy3Cy3Cy\",      \"object\": \"billing.meter_event_summary\",      \"aggregated_value\": 10,      \"end_time\": 1711659600,      \"livemode\": false,      \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",      \"start_time\": 1711656000    }  ],  \"has_more\": false,  \"url\": \"/v1/billing/meters/:id/event_summaries\"}\n```\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List billing meter event summaries | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/plans",
  "markdown": "# Plans | Stripe API Reference\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [The Plan object](https://docs.stripe.com/api/plans/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the plan can be used for new purchases.\n    \n*   The unit amount in cents to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.\n    \n\n*   The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A brief description of the plan, hidden from customers.\n    \n*   #### \n    \n    productnullable stringExpandable\n    \n    The product whose pricing this plan determines.\n    \n\n### More attributes\n\n*   #### \n    \n    aggregate\\_usagenullable enum\n    \n*   #### \n    \n    amount\\_decimalnullable decimal string\n    \n\n*   #### \n    \n    tiersnullable array of objectsExpandable\n    \n\n*   #### \n    \n    transform\\_usagenullable object\n    \n*   #### \n    \n    trial\\_period\\_daysnullable integer\n    \n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Create a plan](https://docs.stripe.com/api/plans/create)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\n### Parameters\n\n*   Specifies billing frequency. Either `day`, `week`, `month` or `year`.\n    \n*   The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://docs.stripe.com/api#product_object-type).\n    \n*   Whether the plan is currently available for new subscriptions. Defaults to `true`.\n    \n*   #### \n    \n    amountintegerRequired unless billing\\_scheme=tiered\n    \n    A positive integer in cents (or 0 for a free plan) representing how much to charge on a recurring basis.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n*   #### \n    \n    tiersarray of objectsRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    tiers\\_modeenumRequired if billing\\_scheme=tiered\n    \n\n### Returns\n\nReturns the plan object.\n\n```\ncurl https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1200 \\  -d currency=usd \\  -d interval=month \\  -d product=prod_NjpI7DbZx6AlWQ\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Update a plan](https://docs.stripe.com/api/plans/update)\n\nUpdates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.\n\n### Parameters\n\n*   Whether the plan is currently available for new subscriptions.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n### Returns\n\nThe updated plan object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Retrieve a plan](https://docs.stripe.com/api/plans/retrieve)\n\nRetrieves the plan with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a plan if a valid plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```",
  "title": "Plans | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoiceitems/delete",
  "markdown": "# Delete an invoice item | Stripe API Reference\n\nDeletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted invoice item’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the invoice item has already been deleted.\n\nDELETE /v1/invoiceitems/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"deleted\": true}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete an invoice item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter/create",
  "markdown": "# Create a billing meter | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fbilling%2Fmeter%2Fcreate)\n\nCreates a billing meter\n\n### Parameters\n\n*   #### \n    \n    default\\_aggregationobjectRequired\n    \n    The default settings to aggregate a meter’s events with.\n    \n*   #### \n    \n    display\\_namestringRequired\n    \n    The meter’s name.\n    \n*   The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.\n    \n*   Fields that specify how to map a meter event to a customer.\n    \n*   The time window to pre-aggregate meter events for, if any.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Events are pre-aggregated in daily buckets. |\n    | `hour`<br><br>Events are pre-aggregated in hourly buckets. |\n    \n*   Fields that specify how to calculate a meter event’s value.\n    \n\n### Returns\n\nReturns a billing meter\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Search API Calls\" \\  -d event_name=ai_search_api \\  -d \"default_aggregation[formula]\"=sum \\  -d \"value_settings[event_payload_key]\"=tokens \\  -d \"customer_mapping[type]\"=by_id \\  -d \"customer_mapping[event_payload_key]\"=stripe_customer_id\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704824589,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Update a billing meter](https://docs.stripe.com/api/billing/meter/update)\n\nUpdates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n*   The meter’s name.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Updated Display Name\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Updated Display Name\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Retrieve a billing meter](https://docs.stripe.com/api/billing/meter/retrieve)\n\nRetrieves a billing meter given an ID\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nGET /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [List billing meters](https://docs.stripe.com/api/billing/meter/list)\n\nRetrieve a list of billing meters.\n\n### Parameters\n\n*   Filter results to only include meters with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meters.\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtr_123\",      \"object\": \"billing.meter\",      \"created\": 1704824589,      \"customer_mapping\": {        \"type\": \"by_id\",        \"event_payload_key\": \"stripe_customer_id\"      },      \"default_aggregation\": {        \"formula\": \"sum\"      },      \"display_name\": \"Search API Calls\",      \"event_name\": \"ai_search_api\",      \"event_time_window\": null,      \"livemode\": false,      \"status\": \"active\",      \"status_transitions\": {        \"deactivated_at\": null      },      \"updated\": 1704898330,      \"value_settings\": {        \"event_payload_key\": \"tokens\"      }    }  ],  \"has_more\": true,  \"url\": \"v1/billing/meters\"}\n```\n\n## [Deactivate a billing meter](https://docs.stripe.com/api/billing/meter/deactivate)\n\nDeactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": 1704898330  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```",
  "title": "Create a billing meter | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter",
  "markdown": "# Meters | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fbilling%2Fmeter)\n\n## [The Meter object](https://docs.stripe.com/api/billing/meter/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Fields that specify how to map a meter event to a customer.\n    \n*   The meter’s name.\n    \n*   The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.\n    \n*   #### \n    \n    event\\_time\\_windownullable enum\n    \n    The time window to pre-aggregate meter events for, if any.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Events are pre-aggregated in daily buckets. |\n    | `hour`<br><br>Events are pre-aggregated in hourly buckets. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter’s status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n*   The timestamps at which the meter status changed.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n*   Fields that specify how to calculate a meter event’s value.\n    \n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Create a billing meter](https://docs.stripe.com/api/billing/meter/create)\n\nCreates a billing meter\n\n### Parameters\n\n*   #### \n    \n    default\\_aggregationobjectRequired\n    \n    The default settings to aggregate a meter’s events with.\n    \n*   #### \n    \n    display\\_namestringRequired\n    \n    The meter’s name.\n    \n*   The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.\n    \n*   Fields that specify how to map a meter event to a customer.\n    \n*   The time window to pre-aggregate meter events for, if any.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Events are pre-aggregated in daily buckets. |\n    | `hour`<br><br>Events are pre-aggregated in hourly buckets. |\n    \n*   Fields that specify how to calculate a meter event’s value.\n    \n\n### Returns\n\nReturns a billing meter\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Search API Calls\" \\  -d event_name=ai_search_api \\  -d \"default_aggregation[formula]\"=sum \\  -d \"value_settings[event_payload_key]\"=tokens \\  -d \"customer_mapping[type]\"=by_id \\  -d \"customer_mapping[event_payload_key]\"=stripe_customer_id\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704824589,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Update a billing meter](https://docs.stripe.com/api/billing/meter/update)\n\nUpdates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n*   The meter’s name.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Updated Display Name\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Updated Display Name\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Retrieve a billing meter](https://docs.stripe.com/api/billing/meter/retrieve)\n\nRetrieves a billing meter given an ID\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nGET /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```",
  "title": "Meters | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/plans/create",
  "markdown": "# Create a plan | Stripe API Reference\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\n### Parameters\n\n*   Specifies billing frequency. Either `day`, `week`, `month` or `year`.\n    \n*   The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://docs.stripe.com/api#product_object-type).\n    \n*   Whether the plan is currently available for new subscriptions. Defaults to `true`.\n    \n*   #### \n    \n    amountintegerRequired unless billing\\_scheme=tiered\n    \n    A positive integer in cents (or 0 for a free plan) representing how much to charge on a recurring basis.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n*   #### \n    \n    tiersarray of objectsRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    tiers\\_modeenumRequired if billing\\_scheme=tiered\n    \n\n### Returns\n\nReturns the plan object.\n\n```\ncurl https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1200 \\  -d currency=usd \\  -d interval=month \\  -d product=prod_NjpI7DbZx6AlWQ\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Update a plan](https://docs.stripe.com/api/plans/update)\n\nUpdates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.\n\n### Parameters\n\n*   Whether the plan is currently available for new subscriptions.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n### Returns\n\nThe updated plan object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Retrieve a plan](https://docs.stripe.com/api/plans/retrieve)\n\nRetrieves the plan with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a plan if a valid plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [List all plans](https://docs.stripe.com/api/plans/list)\n\nReturns a list of your plans.\n\n### Parameters\n\n*   Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).\n    \n*   Only return plans for the given product.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` plans, starting after plan `starting_after`. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/plans\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plan_NjpIbv3g3ZibnD\",      \"object\": \"plan\",      \"active\": true,      \"aggregate_usage\": null,      \"amount\": 1200,      \"amount_decimal\": \"1200\",      \"billing_scheme\": \"per_unit\",      \"created\": 1681851647,      \"currency\": \"usd\",      \"interval\": \"month\",      \"interval_count\": 1,      \"livemode\": false,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NjpI7DbZx6AlWQ\",      \"tiers_mode\": null,      \"transform_usage\": null,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    }    {...}    {...}  ],}\n```\n\n## [Delete a plan](https://docs.stripe.com/api/plans/delete)\n\nDeleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted plan’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the plan has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"deleted\": true}\n```",
  "title": "Create a plan | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter/update",
  "markdown": "# Update a billing meter | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fbilling%2Fmeter%2Fupdate)\n\nUpdates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n*   The meter’s name.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Updated Display Name\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Updated Display Name\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Retrieve a billing meter](https://docs.stripe.com/api/billing/meter/retrieve)\n\nRetrieves a billing meter given an ID\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nGET /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [List billing meters](https://docs.stripe.com/api/billing/meter/list)\n\nRetrieve a list of billing meters.\n\n### Parameters\n\n*   Filter results to only include meters with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meters.\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtr_123\",      \"object\": \"billing.meter\",      \"created\": 1704824589,      \"customer_mapping\": {        \"type\": \"by_id\",        \"event_payload_key\": \"stripe_customer_id\"      },      \"default_aggregation\": {        \"formula\": \"sum\"      },      \"display_name\": \"Search API Calls\",      \"event_name\": \"ai_search_api\",      \"event_time_window\": null,      \"livemode\": false,      \"status\": \"active\",      \"status_transitions\": {        \"deactivated_at\": null      },      \"updated\": 1704898330,      \"value_settings\": {        \"event_payload_key\": \"tokens\"      }    }  ],  \"has_more\": true,  \"url\": \"v1/billing/meters\"}\n```\n\n## [Deactivate a billing meter](https://docs.stripe.com/api/billing/meter/deactivate)\n\nDeactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": 1704898330  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Reactivate a billing meter](https://docs.stripe.com/api/billing/meter/reactivate)\n\nReactivates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id/reactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/billing/meters/mtr_123/reactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```",
  "title": "Update a billing meter | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/plans/delete",
  "markdown": "# Delete a plan | Stripe API Reference\n\nDeleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted plan’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the plan has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a plan | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/create",
  "markdown": "# Create a quote | Stripe API Reference\n\nA quote models prices and services for a customer. Default options for `header`, `description`, `footer`, and `expires_at` can be set in the dashboard via the [quote template](https://dashboard.stripe.com/settings/billing/quote).\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NcMfB0SSFHINCV \\  -d \"line_items[0][price]\"=price_1Mr7wULkdIwHu7ixhPkIEN2w \\  -d \"line_items[0][quantity]\"=2\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Update a quote](https://docs.stripe.com/api/quotes/update)\n\nA quote models prices and services for a customer.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the updated quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Retrieve a quote's line items](https://docs.stripe.com/api/quotes/line_items/list)\n\nWhen retrieving a quote, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quote line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixBJJ8ww4j\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }    {...}    {...}  ],}\n```\n\n## [Retrieve a quote's upfront line items](https://docs.stripe.com/api/quotes/line_items/upfront/list)\n\nWhen retrieving a quote, there is an includable [**computed.upfront.line\\_items**](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` upfront line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more upfront line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/computed\\_upfront\\_line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixMMjVsIUH\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items\"}\n```\n\n## [Retrieve a quote](https://docs.stripe.com/api/quotes/retrieve)\n\nRetrieves the quote with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a quote if a valid quote ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```",
  "title": "Create a quote | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/plans/list",
  "markdown": "# List all plans | Stripe API Reference\n\nReturns a list of your plans.\n\n### Parameters\n\n*   Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).\n    \n*   Only return plans for the given product.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` plans, starting after plan `starting_after`. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/plans\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plan_NjpIbv3g3ZibnD\",      \"object\": \"plan\",      \"active\": true,      \"aggregate_usage\": null,      \"amount\": 1200,      \"amount_decimal\": \"1200\",      \"billing_scheme\": \"per_unit\",      \"created\": 1681851647,      \"currency\": \"usd\",      \"interval\": \"month\",      \"interval_count\": 1,      \"livemode\": false,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NjpI7DbZx6AlWQ\",      \"tiers_mode\": null,      \"transform_usage\": null,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    }    {...}    {...}  ],}\n```\n\n## [Delete a plan](https://docs.stripe.com/api/plans/delete)\n\nDeleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted plan’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the plan has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all plans | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/plans/update",
  "markdown": "# Update a plan | Stripe API Reference\n\nUpdates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.\n\n### Parameters\n\n*   Whether the plan is currently available for new subscriptions.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n### Returns\n\nThe updated plan object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Retrieve a plan](https://docs.stripe.com/api/plans/retrieve)\n\nRetrieves the plan with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a plan if a valid plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [List all plans](https://docs.stripe.com/api/plans/list)\n\nReturns a list of your plans.\n\n### Parameters\n\n*   Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).\n    \n*   Only return plans for the given product.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` plans, starting after plan `starting_after`. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/plans\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plan_NjpIbv3g3ZibnD\",      \"object\": \"plan\",      \"active\": true,      \"aggregate_usage\": null,      \"amount\": 1200,      \"amount_decimal\": \"1200\",      \"billing_scheme\": \"per_unit\",      \"created\": 1681851647,      \"currency\": \"usd\",      \"interval\": \"month\",      \"interval_count\": 1,      \"livemode\": false,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NjpI7DbZx6AlWQ\",      \"tiers_mode\": null,      \"transform_usage\": null,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    }    {...}    {...}  ],}\n```\n\n## [Delete a plan](https://docs.stripe.com/api/plans/delete)\n\nDeleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted plan’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the plan has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a plan | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/plans/retrieve",
  "markdown": "# Retrieve a plan | Stripe API Reference\n\nRetrieves the plan with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a plan if a valid plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [List all plans](https://docs.stripe.com/api/plans/list)\n\nReturns a list of your plans.\n\n### Parameters\n\n*   Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).\n    \n*   Only return plans for the given product.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` plans, starting after plan `starting_after`. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/plans\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plan_NjpIbv3g3ZibnD\",      \"object\": \"plan\",      \"active\": true,      \"aggregate_usage\": null,      \"amount\": 1200,      \"amount_decimal\": \"1200\",      \"billing_scheme\": \"per_unit\",      \"created\": 1681851647,      \"currency\": \"usd\",      \"interval\": \"month\",      \"interval_count\": 1,      \"livemode\": false,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NjpI7DbZx6AlWQ\",      \"tiers_mode\": null,      \"transform_usage\": null,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    }    {...}    {...}  ],}\n```\n\n## [Delete a plan](https://docs.stripe.com/api/plans/delete)\n\nDeleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted plan’s ID and a deleted flag upon success. Otherwise, this call raises [an error](#errors), such as if the plan has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"deleted\": true}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a plan | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/update",
  "markdown": "# Update a quote | Stripe API Reference\n\nA quote models prices and services for a customer.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the updated quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Retrieve a quote's line items](https://docs.stripe.com/api/quotes/line_items/list)\n\nWhen retrieving a quote, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quote line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixBJJ8ww4j\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }    {...}    {...}  ],}\n```\n\n## [Retrieve a quote's upfront line items](https://docs.stripe.com/api/quotes/line_items/upfront/list)\n\nWhen retrieving a quote, there is an includable [**computed.upfront.line\\_items**](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` upfront line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more upfront line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/computed\\_upfront\\_line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixMMjVsIUH\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items\"}\n```\n\n## [Retrieve a quote](https://docs.stripe.com/api/quotes/retrieve)\n\nRetrieves the quote with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a quote if a valid quote ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [List all quotes](https://docs.stripe.com/api/quotes/list)\n\nReturns a list of your quotes.\n\n### Parameters\n\n*   The ID of the customer whose quotes will be retrieved.\n    \n*   The status of the quote.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quotes, starting after quote `starting_after`. Each entry in the array is a separate quote object. If no more quotes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",      \"object\": \"quote\",      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"application\": null,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"collection_method\": \"charge_automatically\",      \"computed\": {        \"recurring\": null,        \"upfront\": {          \"amount_subtotal\": 2198,          \"amount_total\": 2198,          \"total_details\": {            \"amount_discount\": 0,            \"amount_shipping\": 0,            \"amount_tax\": 0          }        }      },      \"created\": 1680128852,      \"currency\": \"usd\",      \"customer\": \"cus_NcMBZUWCIOEgEW\",      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": [],      \"expires_at\": 1682720852,      \"footer\": null,      \"from_quote\": null,      \"header\": null,      \"invoice\": null,      \"invoice_settings\": {        \"days_until_due\": null,        \"issuer\": {          \"type\": \"self\"        }      },      \"livemode\": false,      \"metadata\": {},      \"number\": \"QT-5B9DA057-0001-1\",      \"on_behalf_of\": null,      \"status\": \"open\",      \"status_transitions\": {        \"accepted_at\": null,        \"canceled_at\": null,        \"finalized_at\": 1680128853      },      \"subscription\": null,      \"subscription_data\": {        \"description\": null,        \"effective_date\": null,        \"trial_period_days\": null      },      \"subscription_schedule\": null,      \"test_clock\": null,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      },      \"transfer_data\": null    }    {...}    {...}  ],}\n```",
  "title": "Update a quote | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/line_items/upfront/list",
  "markdown": "# Retrieve a quote's upfront line items\n\nWhen retrieving a quote, there is an includable [**computed.upfront.line\\_items**](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` upfront line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more upfront line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/computed\\_upfront\\_line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixMMjVsIUH\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items\"}\n```\n\n## [Retrieve a quote](https://docs.stripe.com/api/quotes/retrieve)\n\nRetrieves the quote with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a quote if a valid quote ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [List all quotes](https://docs.stripe.com/api/quotes/list)\n\nReturns a list of your quotes.\n\n### Parameters\n\n*   The ID of the customer whose quotes will be retrieved.\n    \n*   The status of the quote.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quotes, starting after quote `starting_after`. Each entry in the array is a separate quote object. If no more quotes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",      \"object\": \"quote\",      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"application\": null,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"collection_method\": \"charge_automatically\",      \"computed\": {        \"recurring\": null,        \"upfront\": {          \"amount_subtotal\": 2198,          \"amount_total\": 2198,          \"total_details\": {            \"amount_discount\": 0,            \"amount_shipping\": 0,            \"amount_tax\": 0          }        }      },      \"created\": 1680128852,      \"currency\": \"usd\",      \"customer\": \"cus_NcMBZUWCIOEgEW\",      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": [],      \"expires_at\": 1682720852,      \"footer\": null,      \"from_quote\": null,      \"header\": null,      \"invoice\": null,      \"invoice_settings\": {        \"days_until_due\": null,        \"issuer\": {          \"type\": \"self\"        }      },      \"livemode\": false,      \"metadata\": {},      \"number\": \"QT-5B9DA057-0001-1\",      \"on_behalf_of\": null,      \"status\": \"open\",      \"status_transitions\": {        \"accepted_at\": null,        \"canceled_at\": null,        \"finalized_at\": 1680128853      },      \"subscription\": null,      \"subscription_data\": {        \"description\": null,        \"effective_date\": null,        \"trial_period_days\": null      },      \"subscription_schedule\": null,      \"test_clock\": null,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      },      \"transfer_data\": null    }    {...}    {...}  ],}\n```\n\n## [Accept a quote](https://docs.stripe.com/api/quotes/accept)\n\nAccepts the specified quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an accepted quote and creates an invoice, subscription or subscription schedule. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/accept\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7YsLkdIwHu7ixoRgFs97D/accept \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7YsLkdIwHu7ixoRgFs97D\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129226,  \"currency\": \"usd\",  \"customer\": \"cus_NcMHflMGStIAoB\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721226,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": \"in_1Mr7YtLkdIwHu7ixzgJJpJ3L\",  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-7F68F7D2-0001-1\",  \"on_behalf_of\": null,  \"status\": \"accepted\",  \"status_transitions\": {    \"accepted_at\": 1680129227,    \"canceled_at\": null,    \"finalized_at\": 1680129227  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Cancel a quote](https://docs.stripe.com/api/quotes/cancel)\n\nCancels the quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a canceled quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7ZYLkdIwHu7ixvsdZr97I/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7ZYLkdIwHu7ixvsdZr97I\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129268,  \"currency\": \"usd\",  \"customer\": \"cus_NcMIIkPfQZQEHR\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721268,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-FF4741D9-0001-1\",  \"on_behalf_of\": null,  \"status\": \"canceled\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": 1680129269,    \"finalized_at\": 1680129269  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```",
  "title": "Retrieve a quote's upfront line items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/line_items/list",
  "markdown": "# Retrieve a quote's line items\n\nWhen retrieving a quote, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quote line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixBJJ8ww4j\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }    {...}    {...}  ],}\n```\n\n## [Retrieve a quote's upfront line items](https://docs.stripe.com/api/quotes/line_items/upfront/list)\n\nWhen retrieving a quote, there is an includable [**computed.upfront.line\\_items**](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` upfront line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more upfront line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/computed\\_upfront\\_line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixMMjVsIUH\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items\"}\n```\n\n## [Retrieve a quote](https://docs.stripe.com/api/quotes/retrieve)\n\nRetrieves the quote with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a quote if a valid quote ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [List all quotes](https://docs.stripe.com/api/quotes/list)\n\nReturns a list of your quotes.\n\n### Parameters\n\n*   The ID of the customer whose quotes will be retrieved.\n    \n*   The status of the quote.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quotes, starting after quote `starting_after`. Each entry in the array is a separate quote object. If no more quotes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",      \"object\": \"quote\",      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"application\": null,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"collection_method\": \"charge_automatically\",      \"computed\": {        \"recurring\": null,        \"upfront\": {          \"amount_subtotal\": 2198,          \"amount_total\": 2198,          \"total_details\": {            \"amount_discount\": 0,            \"amount_shipping\": 0,            \"amount_tax\": 0          }        }      },      \"created\": 1680128852,      \"currency\": \"usd\",      \"customer\": \"cus_NcMBZUWCIOEgEW\",      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": [],      \"expires_at\": 1682720852,      \"footer\": null,      \"from_quote\": null,      \"header\": null,      \"invoice\": null,      \"invoice_settings\": {        \"days_until_due\": null,        \"issuer\": {          \"type\": \"self\"        }      },      \"livemode\": false,      \"metadata\": {},      \"number\": \"QT-5B9DA057-0001-1\",      \"on_behalf_of\": null,      \"status\": \"open\",      \"status_transitions\": {        \"accepted_at\": null,        \"canceled_at\": null,        \"finalized_at\": 1680128853      },      \"subscription\": null,      \"subscription_data\": {        \"description\": null,        \"effective_date\": null,        \"trial_period_days\": null      },      \"subscription_schedule\": null,      \"test_clock\": null,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      },      \"transfer_data\": null    }    {...}    {...}  ],}\n```\n\n## [Accept a quote](https://docs.stripe.com/api/quotes/accept)\n\nAccepts the specified quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an accepted quote and creates an invoice, subscription or subscription schedule. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/accept\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7YsLkdIwHu7ixoRgFs97D/accept \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7YsLkdIwHu7ixoRgFs97D\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129226,  \"currency\": \"usd\",  \"customer\": \"cus_NcMHflMGStIAoB\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721226,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": \"in_1Mr7YtLkdIwHu7ixzgJJpJ3L\",  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-7F68F7D2-0001-1\",  \"on_behalf_of\": null,  \"status\": \"accepted\",  \"status_transitions\": {    \"accepted_at\": 1680129227,    \"canceled_at\": null,    \"finalized_at\": 1680129227  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```",
  "title": "Retrieve a quote's line items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/retrieve",
  "markdown": "# Retrieve a quote | Stripe API Reference\n\nRetrieves the quote with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a quote if a valid quote ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [List all quotes](https://docs.stripe.com/api/quotes/list)\n\nReturns a list of your quotes.\n\n### Parameters\n\n*   The ID of the customer whose quotes will be retrieved.\n    \n*   The status of the quote.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quotes, starting after quote `starting_after`. Each entry in the array is a separate quote object. If no more quotes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",      \"object\": \"quote\",      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"application\": null,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"collection_method\": \"charge_automatically\",      \"computed\": {        \"recurring\": null,        \"upfront\": {          \"amount_subtotal\": 2198,          \"amount_total\": 2198,          \"total_details\": {            \"amount_discount\": 0,            \"amount_shipping\": 0,            \"amount_tax\": 0          }        }      },      \"created\": 1680128852,      \"currency\": \"usd\",      \"customer\": \"cus_NcMBZUWCIOEgEW\",      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": [],      \"expires_at\": 1682720852,      \"footer\": null,      \"from_quote\": null,      \"header\": null,      \"invoice\": null,      \"invoice_settings\": {        \"days_until_due\": null,        \"issuer\": {          \"type\": \"self\"        }      },      \"livemode\": false,      \"metadata\": {},      \"number\": \"QT-5B9DA057-0001-1\",      \"on_behalf_of\": null,      \"status\": \"open\",      \"status_transitions\": {        \"accepted_at\": null,        \"canceled_at\": null,        \"finalized_at\": 1680128853      },      \"subscription\": null,      \"subscription_data\": {        \"description\": null,        \"effective_date\": null,        \"trial_period_days\": null      },      \"subscription_schedule\": null,      \"test_clock\": null,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      },      \"transfer_data\": null    }    {...}    {...}  ],}\n```\n\n## [Accept a quote](https://docs.stripe.com/api/quotes/accept)\n\nAccepts the specified quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an accepted quote and creates an invoice, subscription or subscription schedule. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/accept\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7YsLkdIwHu7ixoRgFs97D/accept \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7YsLkdIwHu7ixoRgFs97D\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129226,  \"currency\": \"usd\",  \"customer\": \"cus_NcMHflMGStIAoB\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721226,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": \"in_1Mr7YtLkdIwHu7ixzgJJpJ3L\",  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-7F68F7D2-0001-1\",  \"on_behalf_of\": null,  \"status\": \"accepted\",  \"status_transitions\": {    \"accepted_at\": 1680129227,    \"canceled_at\": null,    \"finalized_at\": 1680129227  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Cancel a quote](https://docs.stripe.com/api/quotes/cancel)\n\nCancels the quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a canceled quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7ZYLkdIwHu7ixvsdZr97I/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7ZYLkdIwHu7ixvsdZr97I\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129268,  \"currency\": \"usd\",  \"customer\": \"cus_NcMIIkPfQZQEHR\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721268,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-FF4741D9-0001-1\",  \"on_behalf_of\": null,  \"status\": \"canceled\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": 1680129269,    \"finalized_at\": 1680129269  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Download quote PDF](https://docs.stripe.com/api/quotes/pdf)\n\nDownload the PDF for a finalized quote. Explanation for special handling can be found [here](https://docs.corp.stripe.com/quotes/overview#quote_pdf)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe PDF file for the quote.\n\n```\ncurl https://files.stripe.com/v1/quotes/qt_0J1EnX589O8KAxCGEdmhZY3r/pdf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```",
  "title": "Retrieve a quote | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/list",
  "markdown": "# List all quotes | Stripe API Reference\n\nReturns a list of your quotes.\n\n### Parameters\n\n*   The ID of the customer whose quotes will be retrieved.\n    \n*   The status of the quote.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quotes, starting after quote `starting_after`. Each entry in the array is a separate quote object. If no more quotes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",      \"object\": \"quote\",      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"application\": null,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"collection_method\": \"charge_automatically\",      \"computed\": {        \"recurring\": null,        \"upfront\": {          \"amount_subtotal\": 2198,          \"amount_total\": 2198,          \"total_details\": {            \"amount_discount\": 0,            \"amount_shipping\": 0,            \"amount_tax\": 0          }        }      },      \"created\": 1680128852,      \"currency\": \"usd\",      \"customer\": \"cus_NcMBZUWCIOEgEW\",      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": [],      \"expires_at\": 1682720852,      \"footer\": null,      \"from_quote\": null,      \"header\": null,      \"invoice\": null,      \"invoice_settings\": {        \"days_until_due\": null,        \"issuer\": {          \"type\": \"self\"        }      },      \"livemode\": false,      \"metadata\": {},      \"number\": \"QT-5B9DA057-0001-1\",      \"on_behalf_of\": null,      \"status\": \"open\",      \"status_transitions\": {        \"accepted_at\": null,        \"canceled_at\": null,        \"finalized_at\": 1680128853      },      \"subscription\": null,      \"subscription_data\": {        \"description\": null,        \"effective_date\": null,        \"trial_period_days\": null      },      \"subscription_schedule\": null,      \"test_clock\": null,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      },      \"transfer_data\": null    }    {...}    {...}  ],}\n```\n\n## [Accept a quote](https://docs.stripe.com/api/quotes/accept)\n\nAccepts the specified quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an accepted quote and creates an invoice, subscription or subscription schedule. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/accept\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7YsLkdIwHu7ixoRgFs97D/accept \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7YsLkdIwHu7ixoRgFs97D\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129226,  \"currency\": \"usd\",  \"customer\": \"cus_NcMHflMGStIAoB\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721226,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": \"in_1Mr7YtLkdIwHu7ixzgJJpJ3L\",  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-7F68F7D2-0001-1\",  \"on_behalf_of\": null,  \"status\": \"accepted\",  \"status_transitions\": {    \"accepted_at\": 1680129227,    \"canceled_at\": null,    \"finalized_at\": 1680129227  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Cancel a quote](https://docs.stripe.com/api/quotes/cancel)\n\nCancels the quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a canceled quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7ZYLkdIwHu7ixvsdZr97I/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7ZYLkdIwHu7ixvsdZr97I\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129268,  \"currency\": \"usd\",  \"customer\": \"cus_NcMIIkPfQZQEHR\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721268,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-FF4741D9-0001-1\",  \"on_behalf_of\": null,  \"status\": \"canceled\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": 1680129269,    \"finalized_at\": 1680129269  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Download quote PDF](https://docs.stripe.com/api/quotes/pdf)\n\nDownload the PDF for a finalized quote. Explanation for special handling can be found [here](https://docs.corp.stripe.com/quotes/overview#quote_pdf)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe PDF file for the quote.\n\n```\ncurl https://files.stripe.com/v1/quotes/qt_0J1EnX589O8KAxCGEdmhZY3r/pdf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n## [Finalize a quote](https://docs.stripe.com/api/quotes/finalize)\n\nFinalizes the quote.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns an open quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7SqLkdIwHu7ixpI1ClZ6z/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680128852,  \"currency\": \"usd\",  \"customer\": \"cus_NcMBZUWCIOEgEW\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682720852,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-5B9DA057-0001-1\",  \"on_behalf_of\": null,  \"status\": \"open\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": 1680128853  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```",
  "title": "List all quotes | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/fee_refunds",
  "markdown": "# Application Fee Refunds | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffee_refunds)\n\n## [The Application Fee Refund object](https://docs.stripe.com/api/fee_refunds/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n\n*   ID of the application fee that was refunded.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\nThe Application Fee Refund object\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [Create an application fee refund](https://docs.stripe.com/api/fee_refunds/create)\n\nRefunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.\n\nYou can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.\n\nOnce entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.\n\n### Parameters\n\n*   A positive integer, in _cents_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the `Application Fee Refund` object if the refund succeeded. Raises [an error](#errors) if the fee has already been refunded, or if an invalid fee identifier was provided.\n\nPOST /v1/application\\_fees/:id/refunds\n\n```\ncurl -X POST https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [Update an application fee refund](https://docs.stripe.com/api/fee_refunds/update)\n\nUpdates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the application fee refund object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve an application fee refund](https://docs.stripe.com/api/fee_refunds/retrieve)\n\nBy default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the application fee refund object.\n\nGET /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```",
  "title": "Application Fee Refunds | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/fee_refunds/create",
  "markdown": "# Create an application fee refund\n\nRefunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.\n\nYou can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.\n\nOnce entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.\n\n### Parameters\n\n*   A positive integer, in _cents_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the `Application Fee Refund` object if the refund succeeded. Raises [an error](#errors) if the fee has already been refunded, or if an invalid fee identifier was provided.\n\nPOST /v1/application\\_fees/:id/refunds\n\n```\ncurl -X POST https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [Update an application fee refund](https://docs.stripe.com/api/fee_refunds/update)\n\nUpdates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the application fee refund object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve an application fee refund](https://docs.stripe.com/api/fee_refunds/retrieve)\n\nBy default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the application fee refund object.\n\nGET /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [List all application fee refunds](https://docs.stripe.com/api/fee_refunds/list)\n\nYou can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional refunds.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after `starting_after`. Each entry in the array is a separate application fee refund object. If no more refunds are available, the resulting array will be empty. If you provide a non-existent application fee ID, this call raises [an error](#errors).\n\nGET /v1/application\\_fees/:id/refunds\n\n```\ncurl -G https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",      \"object\": \"fee_refund\",      \"amount\": 100,      \"balance_transaction\": null,      \"created\": 1680651573,      \"currency\": \"usd\",      \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create an application fee refund | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/fee_refunds/update",
  "markdown": "# Update an application fee refund\n\nUpdates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the application fee refund object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve an application fee refund](https://docs.stripe.com/api/fee_refunds/retrieve)\n\nBy default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the application fee refund object.\n\nGET /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [List all application fee refunds](https://docs.stripe.com/api/fee_refunds/list)\n\nYou can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional refunds.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after `starting_after`. Each entry in the array is a separate application fee refund object. If no more refunds are available, the resulting array will be empty. If you provide a non-existent application fee ID, this call raises [an error](#errors).\n\nGET /v1/application\\_fees/:id/refunds\n\n```\ncurl -G https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",      \"object\": \"fee_refund\",      \"amount\": 100,      \"balance_transaction\": null,      \"created\": 1680651573,      \"currency\": \"usd\",      \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update an application fee refund | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/fee_refunds/retrieve",
  "markdown": "# Retrieve an application fee refund\n\nBy default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the application fee refund object.\n\nGET /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [List all application fee refunds](https://docs.stripe.com/api/fee_refunds/list)\n\nYou can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional refunds.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after `starting_after`. Each entry in the array is a separate application fee refund object. If no more refunds are available, the resulting array will be empty. If you provide a non-existent application fee ID, this call raises [an error](#errors).\n\nGET /v1/application\\_fees/:id/refunds\n\n```\ncurl -G https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",      \"object\": \"fee_refund\",      \"amount\": 100,      \"balance_transaction\": null,      \"created\": 1680651573,      \"currency\": \"usd\",      \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an application fee refund | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/fee_refunds/list",
  "markdown": "# List all application fee refunds\n\nYou can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional refunds.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after `starting_after`. Each entry in the array is a separate application fee refund object. If no more refunds are available, the resulting array will be empty. If you provide a non-existent application fee ID, this call raises [an error](#errors).\n\nGET /v1/application\\_fees/:id/refunds\n\n```\ncurl -G https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",      \"object\": \"fee_refund\",      \"amount\": 100,      \"balance_transaction\": null,      \"created\": 1680651573,      \"currency\": \"usd\",      \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all application fee refunds | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/capabilities/update",
  "markdown": "# Update an Account Capability | Stripe API Reference\n\nUpdates an existing Account Capability. Request or remove a capability by updating its `requested` parameter.\n\n### Parameters\n\n*   To request a new capability for an account, pass true. There can be a delay before the requested capability becomes active. If the capability has any activation requirements, the response includes them in the `requirements` arrays.\n    \n    If a capability isn’t permanent, you can remove it from the account by passing false. Some capabilities are permanent after they’ve been requested. Attempting to remove a permanent capability returns an error.\n    \n\n### Returns\n\nReturns an Account Capability object.\n\nPOST /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d requested=true\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [Retrieve an Account Capability](https://docs.stripe.com/api/capabilities/retrieve)\n\nRetrieves information about the specified Account Capability.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Account Capability object.\n\nGET /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [List all account capabilities](https://docs.stripe.com/api/capabilities/list)\n\nReturns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of the capabilities of this account. Each entry in the array is a separate capability object.\n\nGET /v1/accounts/:id/capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/capabilities\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_payments\",      \"object\": \"capability\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"requested\": true,      \"requested_at\": 1693951912,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"status\": \"inactive\"    }  ]}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update an Account Capability | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_ids/retrieve",
  "markdown": "# Retrieve a tax ID | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax_ids%2Fretrieve)\n\nRetrieves an account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [List all Customer tax IDs](https://docs.stripe.com/api/tax_ids/customer_list)\n\nReturns a list of tax IDs for a customer.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty. Raises [an error](#errors) if the customer ID is invalid.\n\nGET /v1/customers/:id/tax\\_ids\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 1679431857,      \"customer\": \"cus_NZKoSNZZ58qtO0\",      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": {        \"status\": \"pending\",        \"verified_address\": null,        \"verified_name\": null      }    }    {...}    {...}  ],}\n```\n\n## [List all tax IDs](https://docs.stripe.com/api/tax_ids/list)\n\nReturns a list of tax IDs.\n\n### Parameters\n\n*   The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 123456789,      \"customer\": null,      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": null,      \"owner\": {        \"type\": \"self\",        \"customer\": null      }    }    {...}    {...}  ],}\n```\n\n## [Delete a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_delete)\n\nDeletes an existing `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\nDELETE /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"deleted\": true}\n```\n\n## [Delete a tax ID](https://docs.stripe.com/api/tax_ids/delete)\n\nDeletes an existing account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"deleted\": true}\n```",
  "title": "Retrieve a tax ID | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_ids/customer_list",
  "markdown": "# List all Customer tax IDs\n\nReturns a list of tax IDs for a customer.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty. Raises [an error](#errors) if the customer ID is invalid.\n\nGET /v1/customers/:id/tax\\_ids\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 1679431857,      \"customer\": \"cus_NZKoSNZZ58qtO0\",      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": {        \"status\": \"pending\",        \"verified_address\": null,        \"verified_name\": null      }    }    {...}    {...}  ],}\n```\n\n## [List all tax IDs](https://docs.stripe.com/api/tax_ids/list)\n\nReturns a list of tax IDs.\n\n### Parameters\n\n*   The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 123456789,      \"customer\": null,      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": null,      \"owner\": {        \"type\": \"self\",        \"customer\": null      }    }    {...}    {...}  ],}\n```\n\n## [Delete a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_delete)\n\nDeletes an existing `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\nDELETE /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"deleted\": true}\n```\n\n## [Delete a tax ID](https://docs.stripe.com/api/tax_ids/delete)\n\nDeletes an existing account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"deleted\": true}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all Customer tax IDs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/capabilities/list",
  "markdown": "# List all account capabilities | Stripe API Reference\n\nReturns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of the capabilities of this account. Each entry in the array is a separate capability object.\n\nGET /v1/accounts/:id/capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/capabilities\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_payments\",      \"object\": \"capability\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"requested\": true,      \"requested_at\": 1693951912,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"status\": \"inactive\"    }  ]}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all account capabilities | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_ids/list",
  "markdown": "# List all tax IDs | Stripe API Reference\n\nReturns a list of tax IDs.\n\n### Parameters\n\n*   The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 123456789,      \"customer\": null,      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": null,      \"owner\": {        \"type\": \"self\",        \"customer\": null      }    }    {...}    {...}  ],}\n```\n\n## [Delete a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_delete)\n\nDeletes an existing `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\nDELETE /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"deleted\": true}\n```\n\n## [Delete a tax ID](https://docs.stripe.com/api/tax_ids/delete)\n\nDeletes an existing account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"deleted\": true}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all tax IDs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/country_specs",
  "markdown": "# Country Specs | Stripe API Reference\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [The Country Spec object](https://docs.stripe.com/api/country_specs/object)\n\n### Attributes\n\n*   Unique identifier for the object. Represented as the ISO country code for this country.\n    \n*   The default currency for this country. This applies to both payment methods and bank accounts.\n    \n*   #### \n    \n    supported\\_bank\\_account\\_currenciesobject\n    \n    Currencies that can be accepted in the specific country (for transfers).\n    \n*   #### \n    \n    supported\\_payment\\_currenciesarray of strings\n    \n    Currencies that can be accepted in the specified country (for payments).\n    \n*   #### \n    \n    supported\\_payment\\_methodsarray of strings\n    \n    Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).\n    \n*   #### \n    \n    supported\\_transfer\\_countriesarray of strings\n    \n    Countries that can accept transfers from the specified country.\n    \n\n### More attributes\n\n*   #### \n    \n    verification\\_fieldsobject\n    \n\n```\n{  \"id\": \"US\",  \"object\": \"country_spec\",  \"default_currency\": \"usd\",  \"supported_bank_account_currencies\": {    \"usd\": [      \"US\"    ]  },  \"supported_payment_currencies\": [    \"usd\",    \"aed\",    \"afn\",    \"...\"  ],  \"supported_payment_methods\": [    \"ach\",    \"card\",    \"stripe\"  ],  \"supported_transfer_countriesverification_fields\": {    \"company\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"company.address.city\",        \"company.address.line1\",        \"company.address.postal_code\",        \"company.address.state\",        \"company.name\",        \"company.owners_provided\",        \"company.phone\",        \"company.tax_id\",        \"external_account\",        \"owners.address.city\",        \"owners.address.line1\",        \"owners.address.postal_code\",        \"owners.address.state\",        \"owners.dob.day\",        \"owners.dob.month\",        \"owners.dob.year\",        \"owners.email\",        \"owners.first_name\",        \"owners.id_number\",        \"owners.last_name\",        \"owners.phone\",        \"owners.ssn_last_4\",        \"owners.verification.document\",        \"representative.address.city\",        \"representative.address.line1\",        \"representative.address.postal_code\",        \"representative.address.state\",        \"representative.dob.day\",        \"representative.dob.month\",        \"representative.dob.year\",        \"representative.email\",        \"representative.first_name\",        \"representative.id_number\",        \"representative.last_name\",        \"representative.phone\",        \"representative.relationship.executive\",        \"representative.relationship.title\",        \"representative.ssn_last_4\",        \"representative.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    },    \"individual\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"external_account\",        \"individual.address.city\",        \"individual.address.line1\",        \"individual.address.postal_code\",        \"individual.address.state\",        \"individual.dob.day\",        \"individual.dob.month\",        \"individual.dob.year\",        \"individual.email\",        \"individual.first_name\",        \"individual.id_number\",        \"individual.last_name\",        \"individual.phone\",        \"individual.ssn_last_4\",        \"individual.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    }  }}\n```\n\n## [Retrieve a Country Spec](https://docs.stripe.com/api/country_specs/retrieve)\n\nReturns a Country Spec for a given Country code.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a [country\\_spec](#country_spec_object) object if a valid country code is provided, and raises [an error](#errors) otherwise.\n\nGET /v1/country\\_specs/:id\n\n```\ncurl https://api.stripe.com/v1/country_specs/US \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"US\",  \"object\": \"country_spec\",  \"default_currency\": \"usd\",  \"supported_bank_account_currencies\": {    \"usd\": [      \"US\"    ]  },  \"supported_payment_currencies\": [    \"usd\",    \"aed\",    \"afn\",    \"...\"  ],  \"supported_payment_methods\": [    \"ach\",    \"card\",    \"stripe\"  ],  \"supported_transfer_countriesverification_fields\": {    \"company\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"company.address.city\",        \"company.address.line1\",        \"company.address.postal_code\",        \"company.address.state\",        \"company.name\",        \"company.owners_provided\",        \"company.phone\",        \"company.tax_id\",        \"external_account\",        \"owners.address.city\",        \"owners.address.line1\",        \"owners.address.postal_code\",        \"owners.address.state\",        \"owners.dob.day\",        \"owners.dob.month\",        \"owners.dob.year\",        \"owners.email\",        \"owners.first_name\",        \"owners.id_number\",        \"owners.last_name\",        \"owners.phone\",        \"owners.ssn_last_4\",        \"owners.verification.document\",        \"representative.address.city\",        \"representative.address.line1\",        \"representative.address.postal_code\",        \"representative.address.state\",        \"representative.dob.day\",        \"representative.dob.month\",        \"representative.dob.year\",        \"representative.email\",        \"representative.first_name\",        \"representative.id_number\",        \"representative.last_name\",        \"representative.phone\",        \"representative.relationship.executive\",        \"representative.relationship.title\",        \"representative.ssn_last_4\",        \"representative.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    },    \"individual\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"external_account\",        \"individual.address.city\",        \"individual.address.line1\",        \"individual.address.postal_code\",        \"individual.address.state\",        \"individual.dob.day\",        \"individual.dob.month\",        \"individual.dob.year\",        \"individual.email\",        \"individual.first_name\",        \"individual.id_number\",        \"individual.last_name\",        \"individual.phone\",        \"individual.ssn_last_4\",        \"individual.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    }  }}\n```\n\n## [List Country Specs](https://docs.stripe.com/api/country_specs/list)\n\nLists all Country Spec objects available in the API.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of country\\_spec objects.\n\n```\ncurl -G https://api.stripe.com/v1/country_specs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/country_specs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"US\",      \"object\": \"country_spec\",      \"default_currency\": \"usd\",      \"supported_bank_account_currencies\": {        \"usd\": [          \"US\"        ]      },      \"supported_payment_currencies\": [        \"usd\",        \"aed\",        \"afn\",        \"...\"      ],      \"supported_payment_methods\": [        \"ach\",        \"card\",        \"stripe\"      ],      \"supported_transfer_countriesverification_fields\": {        \"company\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"company.address.city\",            \"company.address.line1\",            \"company.address.postal_code\",            \"company.address.state\",            \"company.name\",            \"company.owners_provided\",            \"company.phone\",            \"company.tax_id\",            \"external_account\",            \"owners.address.city\",            \"owners.address.line1\",            \"owners.address.postal_code\",            \"owners.address.state\",            \"owners.dob.day\",            \"owners.dob.month\",            \"owners.dob.year\",            \"owners.email\",            \"owners.first_name\",            \"owners.id_number\",            \"owners.last_name\",            \"owners.phone\",            \"owners.ssn_last_4\",            \"owners.verification.document\",            \"representative.address.city\",            \"representative.address.line1\",            \"representative.address.postal_code\",            \"representative.address.state\",            \"representative.dob.day\",            \"representative.dob.month\",            \"representative.dob.year\",            \"representative.email\",            \"representative.first_name\",            \"representative.id_number\",            \"representative.last_name\",            \"representative.phone\",            \"representative.relationship.executive\",            \"representative.relationship.title\",            \"representative.ssn_last_4\",            \"representative.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        },        \"individual\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"external_account\",            \"individual.address.city\",            \"individual.address.line1\",            \"individual.address.postal_code\",            \"individual.address.state\",            \"individual.dob.day\",            \"individual.dob.month\",            \"individual.dob.year\",            \"individual.email\",            \"individual.first_name\",            \"individual.id_number\",            \"individual.last_name\",            \"individual.phone\",            \"individual.ssn_last_4\",            \"individual.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        }      }    }    {...}    {...}  ],}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Country Specs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_ids/customer_delete",
  "markdown": "# Delete a Customer tax ID\n\nDeletes an existing `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\nDELETE /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"deleted\": true}\n```\n\n## [Delete a tax ID](https://docs.stripe.com/api/tax_ids/delete)\n\nDeletes an existing account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"deleted\": true}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a Customer tax ID | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/country_specs/list",
  "markdown": "# List Country Specs | Stripe API Reference\n\nLists all Country Spec objects available in the API.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of country\\_spec objects.\n\n```\ncurl -G https://api.stripe.com/v1/country_specs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/country_specs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"US\",      \"object\": \"country_spec\",      \"default_currency\": \"usd\",      \"supported_bank_account_currencies\": {        \"usd\": [          \"US\"        ]      },      \"supported_payment_currencies\": [        \"usd\",        \"aed\",        \"afn\",        \"...\"      ],      \"supported_payment_methods\": [        \"ach\",        \"card\",        \"stripe\"      ],      \"supported_transfer_countriesverification_fields\": {        \"company\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"company.address.city\",            \"company.address.line1\",            \"company.address.postal_code\",            \"company.address.state\",            \"company.name\",            \"company.owners_provided\",            \"company.phone\",            \"company.tax_id\",            \"external_account\",            \"owners.address.city\",            \"owners.address.line1\",            \"owners.address.postal_code\",            \"owners.address.state\",            \"owners.dob.day\",            \"owners.dob.month\",            \"owners.dob.year\",            \"owners.email\",            \"owners.first_name\",            \"owners.id_number\",            \"owners.last_name\",            \"owners.phone\",            \"owners.ssn_last_4\",            \"owners.verification.document\",            \"representative.address.city\",            \"representative.address.line1\",            \"representative.address.postal_code\",            \"representative.address.state\",            \"representative.dob.day\",            \"representative.dob.month\",            \"representative.dob.year\",            \"representative.email\",            \"representative.first_name\",            \"representative.id_number\",            \"representative.last_name\",            \"representative.phone\",            \"representative.relationship.executive\",            \"representative.relationship.title\",            \"representative.ssn_last_4\",            \"representative.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        },        \"individual\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"external_account\",            \"individual.address.city\",            \"individual.address.line1\",            \"individual.address.postal_code\",            \"individual.address.state\",            \"individual.dob.day\",            \"individual.dob.month\",            \"individual.dob.year\",            \"individual.email\",            \"individual.first_name\",            \"individual.id_number\",            \"individual.last_name\",            \"individual.phone\",            \"individual.ssn_last_4\",            \"individual.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        }      }    }    {...}    {...}  ],}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List Country Specs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/country_specs/retrieve",
  "markdown": "# Retrieve a Country Spec | Stripe API Reference\n\nReturns a Country Spec for a given Country code.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a [country\\_spec](#country_spec_object) object if a valid country code is provided, and raises [an error](#errors) otherwise.\n\nGET /v1/country\\_specs/:id\n\n```\ncurl https://api.stripe.com/v1/country_specs/US \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"US\",  \"object\": \"country_spec\",  \"default_currency\": \"usd\",  \"supported_bank_account_currencies\": {    \"usd\": [      \"US\"    ]  },  \"supported_payment_currencies\": [    \"usd\",    \"aed\",    \"afn\",    \"...\"  ],  \"supported_payment_methods\": [    \"ach\",    \"card\",    \"stripe\"  ],  \"supported_transfer_countriesverification_fields\": {    \"company\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"company.address.city\",        \"company.address.line1\",        \"company.address.postal_code\",        \"company.address.state\",        \"company.name\",        \"company.owners_provided\",        \"company.phone\",        \"company.tax_id\",        \"external_account\",        \"owners.address.city\",        \"owners.address.line1\",        \"owners.address.postal_code\",        \"owners.address.state\",        \"owners.dob.day\",        \"owners.dob.month\",        \"owners.dob.year\",        \"owners.email\",        \"owners.first_name\",        \"owners.id_number\",        \"owners.last_name\",        \"owners.phone\",        \"owners.ssn_last_4\",        \"owners.verification.document\",        \"representative.address.city\",        \"representative.address.line1\",        \"representative.address.postal_code\",        \"representative.address.state\",        \"representative.dob.day\",        \"representative.dob.month\",        \"representative.dob.year\",        \"representative.email\",        \"representative.first_name\",        \"representative.id_number\",        \"representative.last_name\",        \"representative.phone\",        \"representative.relationship.executive\",        \"representative.relationship.title\",        \"representative.ssn_last_4\",        \"representative.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    },    \"individual\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"external_account\",        \"individual.address.city\",        \"individual.address.line1\",        \"individual.address.postal_code\",        \"individual.address.state\",        \"individual.dob.day\",        \"individual.dob.month\",        \"individual.dob.year\",        \"individual.email\",        \"individual.first_name\",        \"individual.id_number\",        \"individual.last_name\",        \"individual.phone\",        \"individual.ssn_last_4\",        \"individual.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    }  }}\n```\n\n## [List Country Specs](https://docs.stripe.com/api/country_specs/list)\n\nLists all Country Spec objects available in the API.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of country\\_spec objects.\n\n```\ncurl -G https://api.stripe.com/v1/country_specs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/country_specs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"US\",      \"object\": \"country_spec\",      \"default_currency\": \"usd\",      \"supported_bank_account_currencies\": {        \"usd\": [          \"US\"        ]      },      \"supported_payment_currencies\": [        \"usd\",        \"aed\",        \"afn\",        \"...\"      ],      \"supported_payment_methods\": [        \"ach\",        \"card\",        \"stripe\"      ],      \"supported_transfer_countriesverification_fields\": {        \"company\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"company.address.city\",            \"company.address.line1\",            \"company.address.postal_code\",            \"company.address.state\",            \"company.name\",            \"company.owners_provided\",            \"company.phone\",            \"company.tax_id\",            \"external_account\",            \"owners.address.city\",            \"owners.address.line1\",            \"owners.address.postal_code\",            \"owners.address.state\",            \"owners.dob.day\",            \"owners.dob.month\",            \"owners.dob.year\",            \"owners.email\",            \"owners.first_name\",            \"owners.id_number\",            \"owners.last_name\",            \"owners.phone\",            \"owners.ssn_last_4\",            \"owners.verification.document\",            \"representative.address.city\",            \"representative.address.line1\",            \"representative.address.postal_code\",            \"representative.address.state\",            \"representative.dob.day\",            \"representative.dob.month\",            \"representative.dob.year\",            \"representative.email\",            \"representative.first_name\",            \"representative.id_number\",            \"representative.last_name\",            \"representative.phone\",            \"representative.relationship.executive\",            \"representative.relationship.title\",            \"representative.ssn_last_4\",            \"representative.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        },        \"individual\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"external_account\",            \"individual.address.city\",            \"individual.address.line1\",            \"individual.address.postal_code\",            \"individual.address.state\",            \"individual.dob.day\",            \"individual.dob.month\",            \"individual.dob.year\",            \"individual.email\",            \"individual.first_name\",            \"individual.id_number\",            \"individual.last_name\",            \"individual.phone\",            \"individual.ssn_last_4\",            \"individual.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        }      }    }    {...}    {...}  ],}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Country Spec | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/capabilities",
  "markdown": "# Capabilities | Stripe API Reference\n\n## [The Capability object](https://docs.stripe.com/api/capabilities/object)\n\n### Attributes\n\n*   The identifier for the capability.\n    \n*   The account for which the capability enables functionality.\n    \n*   Whether the capability has been requested.\n    \n*   Information about the requirements for the capability, including what information needs to be collected, and by when.\n    \n*   The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active` |\n    | `disabled` |\n    | `inactive` |\n    | `pending` |\n    | `unrequested` |\n    \n\n### More attributes\n\n*   #### \n    \n    future\\_requirementsobject\n    \n*   #### \n    \n    requested\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [Update an Account Capability](https://docs.stripe.com/api/capabilities/update)\n\nUpdates an existing Account Capability. Request or remove a capability by updating its `requested` parameter.\n\n### Parameters\n\n*   To request a new capability for an account, pass true. There can be a delay before the requested capability becomes active. If the capability has any activation requirements, the response includes them in the `requirements` arrays.\n    \n    If a capability isn’t permanent, you can remove it from the account by passing false. Some capabilities are permanent after they’ve been requested. Attempting to remove a permanent capability returns an error.\n    \n\n### Returns\n\nReturns an Account Capability object.\n\nPOST /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d requested=true\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [Retrieve an Account Capability](https://docs.stripe.com/api/capabilities/retrieve)\n\nRetrieves information about the specified Account Capability.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Account Capability object.\n\nGET /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [List all account capabilities](https://docs.stripe.com/api/capabilities/list)\n\nReturns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of the capabilities of this account. Each entry in the array is a separate capability object.\n\nGET /v1/accounts/:id/capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/capabilities\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_payments\",      \"object\": \"capability\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"requested\": true,      \"requested_at\": 1693951912,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"status\": \"inactive\"    }  ]}\n```",
  "title": "Capabilities | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/test_clocks",
  "markdown": "# Test Clocks | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftest_clocks)\n\n## [Test Clocks](https://docs.stripe.com/api/test_clocks)Test helper\n\n## [The Test Clock object](https://docs.stripe.com/api/test_clocks/object)Test helper\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Time at which this clock is scheduled to auto delete.\n    \n*   Time at which all objects belonging to this clock are frozen.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The custom name supplied at creation.\n    \n*   The status of the Test Clock.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `advancing`<br><br>In the process of advancing time for the test clock objects. |\n    | `internal_failure`<br><br>Failed to advance time. Future requests to advance time will fail. |\n    | `ready`<br><br>All test clock objects have advanced to the `frozen_time`. |\n    \n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [Create a test clock](https://docs.stripe.com/api/test_clocks/create)Test helper\n\nCreates a new test clock that can be attached to new customers and quotes.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The initial frozen time for this test clock.\n    \n*   The name for this test clock.\n    \n\n### Returns\n\nThe newly created `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1577836800\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [Retrieve a test clock](https://docs.stripe.com/api/test_clocks/retrieve)Test helper\n\nRetrieves a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TestClock` object. Otherwise, this call raises [an error](#errors).\n\nGET /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [List all test clocks](https://docs.stripe.com/api/test_clocks/list)Test helper\n\nReturns a list of your test clocks.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` test clocks, starting after `starting_after`. Each entry in the array is a separate test clock object. If no more test clocks are available, the resulting array will be empty.\n\nGET /v1/test\\_helpers/test\\_clocks\n\n```\ncurl -G https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/test_helpers/test_clocks\",  \"has_more\": false,  \"data\": [    {      \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",      \"object\": \"test_helpers.test_clock\",      \"created\": 1680112806,      \"deletes_after\": 1680717606,      \"frozen_time\": 1577836800,      \"livemode\": false,      \"name\": null,      \"status\": \"ready\"    }    {...}    {...}  ],}\n```",
  "title": "Test Clocks | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/test_clocks/create",
  "markdown": "# Create a test clock | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftest_clocks%2Fcreate)\n\n## [Create a test clock](https://docs.stripe.com/api/test_clocks/create)Test helper\n\nCreates a new test clock that can be attached to new customers and quotes.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The initial frozen time for this test clock.\n    \n*   The name for this test clock.\n    \n\n### Returns\n\nThe newly created `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1577836800\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [Retrieve a test clock](https://docs.stripe.com/api/test_clocks/retrieve)Test helper\n\nRetrieves a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TestClock` object. Otherwise, this call raises [an error](#errors).\n\nGET /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [List all test clocks](https://docs.stripe.com/api/test_clocks/list)Test helper\n\nReturns a list of your test clocks.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` test clocks, starting after `starting_after`. Each entry in the array is a separate test clock object. If no more test clocks are available, the resulting array will be empty.\n\nGET /v1/test\\_helpers/test\\_clocks\n\n```\ncurl -G https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/test_helpers/test_clocks\",  \"has_more\": false,  \"data\": [    {      \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",      \"object\": \"test_helpers.test_clock\",      \"created\": 1680112806,      \"deletes_after\": 1680717606,      \"frozen_time\": 1577836800,      \"livemode\": false,      \"name\": null,      \"status\": \"ready\"    }    {...}    {...}  ],}\n```\n\n## [Delete a test clock](https://docs.stripe.com/api/test_clocks/delete)Test helper\n\nDeletes a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe deleted `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"deleted\": true}\n```\n\n## [Advance a test clock](https://docs.stripe.com/api/test_clocks/advance)Test helper\n\nStarts advancing a test clock to a specified time in the future. Advancement is done when status changes to `Ready`.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The time to advance the test clock. Must be after the test clock’s current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.\n    \n\n### Returns\n\nA `TestClock` object with status `Advancing` is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks/:id/advance\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7/advance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1680199613\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"advancing\"}\n```",
  "title": "Create a test clock | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_bank_accounts/update",
  "markdown": "# Update a bank account | Stripe API Reference\n\nUpdates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.\n\nYou can only update bank accounts when [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAiwl2eZvKYlo2CRdCLZSxO \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ba_1NAiwl2eZvKYlo2CRdCLZSxO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\",  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/external_account_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAinX2eZvKYlo2CpFGcuuEG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/external_account_bank_accounts/list)\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=bank_account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a bank account](https://docs.stripe.com/api/external_account_bank_accounts/delete)\n\nYou can delete destination bank accounts from a connected account where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a bank account with `default_for_currency` set to true. You cannot delete a bank account if any of the following apply:\n\n*   The bank account’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the bank account.\n\nTo delete a bank account, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted bank account object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAz2w2eZvKYlo2CgeR2w6yU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAz2w2eZvKYlo2CgeR2w6yU\",  \"object\": \"bank_account\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a bank account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/test_clocks/retrieve",
  "markdown": "# Retrieve a test clock | Stripe API Reference\n\n## [Retrieve a test clock](https://docs.stripe.com/api/test_clocks/retrieve)Test helper\n\nRetrieves a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TestClock` object. Otherwise, this call raises [an error](#errors).\n\nGET /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [List all test clocks](https://docs.stripe.com/api/test_clocks/list)Test helper\n\nReturns a list of your test clocks.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` test clocks, starting after `starting_after`. Each entry in the array is a separate test clock object. If no more test clocks are available, the resulting array will be empty.\n\nGET /v1/test\\_helpers/test\\_clocks\n\n```\ncurl -G https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/test_helpers/test_clocks\",  \"has_more\": false,  \"data\": [    {      \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",      \"object\": \"test_helpers.test_clock\",      \"created\": 1680112806,      \"deletes_after\": 1680717606,      \"frozen_time\": 1577836800,      \"livemode\": false,      \"name\": null,      \"status\": \"ready\"    }    {...}    {...}  ],}\n```\n\n## [Delete a test clock](https://docs.stripe.com/api/test_clocks/delete)Test helper\n\nDeletes a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe deleted `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"deleted\": true}\n```\n\n## [Advance a test clock](https://docs.stripe.com/api/test_clocks/advance)Test helper\n\nStarts advancing a test clock to a specified time in the future. Advancement is done when status changes to `Ready`.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The time to advance the test clock. Must be after the test clock’s current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.\n    \n\n### Returns\n\nA `TestClock` object with status `Advancing` is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks/:id/advance\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7/advance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1680199613\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"advancing\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a test clock | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/test_clocks/list",
  "markdown": "# List all test clocks | Stripe API Reference\n\n## [List all test clocks](https://docs.stripe.com/api/test_clocks/list)Test helper\n\nReturns a list of your test clocks.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` test clocks, starting after `starting_after`. Each entry in the array is a separate test clock object. If no more test clocks are available, the resulting array will be empty.\n\nGET /v1/test\\_helpers/test\\_clocks\n\n```\ncurl -G https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/test_helpers/test_clocks\",  \"has_more\": false,  \"data\": [    {      \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",      \"object\": \"test_helpers.test_clock\",      \"created\": 1680112806,      \"deletes_after\": 1680717606,      \"frozen_time\": 1577836800,      \"livemode\": false,      \"name\": null,      \"status\": \"ready\"    }    {...}    {...}  ],}\n```\n\n## [Delete a test clock](https://docs.stripe.com/api/test_clocks/delete)Test helper\n\nDeletes a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe deleted `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"deleted\": true}\n```\n\n## [Advance a test clock](https://docs.stripe.com/api/test_clocks/advance)Test helper\n\nStarts advancing a test clock to a specified time in the future. Advancement is done when status changes to `Ready`.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The time to advance the test clock. Must be after the test clock’s current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.\n    \n\n### Returns\n\nA `TestClock` object with status `Advancing` is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks/:id/advance\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7/advance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1680199613\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"advancing\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all test clocks | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_bank_accounts/retrieve",
  "markdown": "# Retrieve a bank account | Stripe API Reference\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAinX2eZvKYlo2CpFGcuuEG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/external_account_bank_accounts/list)\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=bank_account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a bank account](https://docs.stripe.com/api/external_account_bank_accounts/delete)\n\nYou can delete destination bank accounts from a connected account where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a bank account with `default_for_currency` set to true. You cannot delete a bank account if any of the following apply:\n\n*   The bank account’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the bank account.\n\nTo delete a bank account, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted bank account object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAz2w2eZvKYlo2CgeR2w6yU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAz2w2eZvKYlo2CgeR2w6yU\",  \"object\": \"bank_account\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a bank account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_bank_accounts/list",
  "markdown": "# List all bank accounts | Stripe API Reference\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=bank_account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a bank account](https://docs.stripe.com/api/external_account_bank_accounts/delete)\n\nYou can delete destination bank accounts from a connected account where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a bank account with `default_for_currency` set to true. You cannot delete a bank account if any of the following apply:\n\n*   The bank account’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the bank account.\n\nTo delete a bank account, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted bank account object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAz2w2eZvKYlo2CgeR2w6yU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAz2w2eZvKYlo2CgeR2w6yU\",  \"object\": \"bank_account\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all bank accounts | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/test_clocks/delete",
  "markdown": "# Delete a test clock | Stripe API Reference\n\n## [Delete a test clock](https://docs.stripe.com/api/test_clocks/delete)Test helper\n\nDeletes a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe deleted `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"deleted\": true}\n```\n\n## [Advance a test clock](https://docs.stripe.com/api/test_clocks/advance)Test helper\n\nStarts advancing a test clock to a specified time in the future. Advancement is done when status changes to `Ready`.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The time to advance the test clock. Must be after the test clock’s current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.\n    \n\n### Returns\n\nA `TestClock` object with status `Advancing` is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks/:id/advance\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7/advance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1680199613\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"advancing\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a test clock | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_bank_accounts/delete",
  "markdown": "# Delete a bank account | Stripe API Reference\n\nYou can delete destination bank accounts from a connected account where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a bank account with `default_for_currency` set to true. You cannot delete a bank account if any of the following apply:\n\n*   The bank account’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the bank account.\n\nTo delete a bank account, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted bank account object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAz2w2eZvKYlo2CgeR2w6yU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAz2w2eZvKYlo2CgeR2w6yU\",  \"object\": \"bank_account\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a bank account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/persons/create",
  "markdown": "# Create a person | Stripe API Reference\n\nCreates a new person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Update a person](https://docs.stripe.com/api/persons/update)\n\nUpdates an existing person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1680035496,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": \"Jane\",  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": \"Diaz\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Retrieve a person](https://docs.stripe.com/api/persons/retrieve)\n\nRetrieves an existing person.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a person object.\n\nGET /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [List all persons](https://docs.stripe.com/api/persons/list)\n\nReturns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.\n\n### Parameters\n\n*   Filters on the list of people returned based on the person’s relationship to the account’s company.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` people, starting after person `starting_after`. Each entry in the array is a separate person object. If no more people are available, the resulting array will be empty.\n\nGET /v1/accounts/:id/persons\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/persons\",  \"has_more\": false,  \"data\": [    {      \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"object\": \"person\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"created\": 1680035496,      \"dob\": {        \"day\": null,        \"month\": null,        \"year\": null      },      \"first_name\": \"Jane\",      \"future_requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"id_number_provided\": false,      \"last_name\": \"Diaz\",      \"metadata\": {},      \"relationship\": {        \"director\": false,        \"executive\": false,        \"owner\": false,        \"percent_ownership\": null,        \"representative\": false,        \"title\": null      },      \"requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"ssn_last_4_provided\": false,      \"verification\": {        \"additional_document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"details\": null,        \"details_code\": null,        \"document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"status\": \"unverified\"      }    }    {...}    {...}  ],}\n```\n\n## [Delete a person](https://docs.stripe.com/api/persons/delete)\n\nDeletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the `account_opener`. If your integration is using the `executive` parameter, you cannot delete the only verified `executive` on file.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted person object.\n\nDELETE /v1/accounts/:id/persons/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"deleted\": true}\n```",
  "title": "Create a person | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/list",
  "markdown": "# List all authorizations | Stripe API Reference\n\nReturns a list of Issuing `Authorization` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return authorizations that belong to the given card.\n    \n*   Only return authorizations that belong to the given cardholder.\n    \n*   Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` authorizations, starting after authorization `starting_after`. Each entry in the array is a separate Issuing `Authorization` object. If no more authorizations are available, the resulting array will be empty.\n\nGET /v1/issuing/authorizations\n\n```\ncurl -G https://api.stripe.com/v1/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/authorizations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",      \"object\": \"issuing.authorization\",      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"authorization_method\": \"online\",      \"balance_transactions\": [],      \"card\": {        \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",        \"object\": \"issuing.card\",        \"brand\": \"Visa\",        \"cancellation_reason\": null,        \"cardholder\": {          \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",          \"object\": \"issuing.cardholder\",          \"billing\": {            \"address\": {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"line1\": \"123 Main Street\",              \"line2\": null,              \"postal_code\": \"94111\",              \"state\": \"CA\"            }          },          \"company\": null,          \"created\": 1626425119,          \"email\": \"jenny.rosen@example.com\",          \"individual\": null,          \"livemode\": false,          \"metadata\": {},          \"name\": \"Jenny Rosen\",          \"phone_number\": \"+18008675309\",          \"redaction\": null,          \"requirements\": {            \"disabled_reason\": null,            \"past_due\": []          },          \"spending_controls\": {            \"allowed_categories\": [],            \"blocked_categories\": [],            \"spending_limits\": [],            \"spending_limits_currency\": null          },          \"status\": \"active\",          \"type\": \"individual\"        },        \"created\": 1626425206,        \"currency\": \"usd\",        \"exp_month\": 6,        \"exp_year\": 2024,        \"last4\": \"8693\",        \"livemode\": false,        \"metadata\": {},        \"redaction\": null,        \"replaced_by\": null,        \"replacement_for\": null,        \"replacement_reason\": null,        \"shipping\": null,        \"spending_controls\": {          \"allowed_categories\": null,          \"blocked_categories\": null,          \"spending_limits\": [            {              \"amount\": 50000,              \"categories\": [],              \"interval\": \"daily\"            }          ],          \"spending_limits_currency\": \"usd\"        },        \"status\": \"active\",        \"type\": \"virtual\",        \"wallets\": {          \"apple_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"google_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"primary_account_identifier\": null        }      },      \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"created\": 1630657706,      \"currency\": \"usd\",      \"livemode\": false,      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"STRIPE\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {        \"order_id\": \"6735\"      },      \"network_data\": null,      \"pending_request\": null,      \"redaction\": null,      \"request_history\": [        {          \"amount\": 382,          \"amount_details\": {            \"atm_fee\": null          },          \"approved\": false,          \"created\": 1630657706,          \"currency\": \"usd\",          \"merchant_amount\": 382,          \"merchant_currency\": \"usd\",          \"reason\": \"verification_failed\",          \"reason_message\": null        }      ],      \"status\": \"closed\",      \"transactions\": [],      \"verification_data\": {        \"address_line1_check\": \"not_provided\",        \"address_postal_code_check\": \"not_provided\",        \"cvc_check\": \"mismatch\",        \"expiry_check\": \"match\"      },      \"wallet\": null    }    {...}    {...}  ],}\n```\n\n## [Approve an authorization](https://docs.stripe.com/api/issuing/authorizations/approve)\n\n\\[Deprecated\\] Approves a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   If the authorization’s `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://docs.stripe.com/api/issuing/authorizations/decline) to decline an authorization request).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an approved Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1MvSKeLkdIwHu7ixKr8rO1HV/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1MvSKeLkdIwHu7ixKr8rO1HV\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1MvSKeLkdIwHu7ixFANTvxgn\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Anytown\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"12345\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": null,      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"John Doe\",      \"phone_number\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1681162380,    \"currency\": \"usd\",    \"exp_month\": 8,    \"exp_year\": 2024,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {},    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": null,  \"created\": 1681162380,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\"  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": {    \"amount\": 700,    \"amount_details\": {      \"atm_fee\": null    },    \"currency\": \"usd\",    \"is_amount_controllable\": false,    \"merchant_amount\": 700,    \"merchant_currency\": \"usd\"  },  \"request_history\": [],  \"status\": \"pending\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Decline an authorization](https://docs.stripe.com/api/issuing/authorizations/decline)\n\n\\[Deprecated\\] Declines a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a declined Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/decline\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/decline \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Create a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)Test helper\n\nCreate a test-mode authorization.\n\n### Parameters\n\n*   The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card’s currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this authorization.\n    \n*   The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Nsse72eZvKYlo2CWBGm2WQ5\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Capture a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)Test helper\n\nCapture a test-mode authorization.\n\n### Parameters\n\n*   The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    close\\_authorizationboolean\n    \n    Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.\n    \n*   Additional purchase information that is optionally provided by the merchant.\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
  "title": "List all authorizations | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/apps/secret_store/list",
  "markdown": "# List secrets | Stripe API Reference\n\nList all secrets stored on the given scope.\n\n### Parameters\n\n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Secrets, starting after Secret `starting_after`. Each entry in the array is a separate Secret object. If no more Secrets are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/apps/secrets \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/apps/secrets\",  \"has_more\": false,  \"data\": [    {      \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",      \"object\": \"apps.secret\",      \"created\": 1680209063,      \"expires_at\": null,      \"livemode\": false,      \"name\": \"my-api-key\",      \"scope\": {        \"type\": \"account\"      }    }    {...}    {...}  ],}\n```\n\n## [Delete a Secret](https://docs.stripe.com/api/apps/secret_store/delete)\n\nDeletes a secret from the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns the deleted secret object.\n\nPOST /v1/apps/secrets/delete\n\n```\ncurl https://api.stripe.com/v1/apps/secrets/delete \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"deleted\": true}\n```\n\n## [Find a Secret](https://docs.stripe.com/api/apps/secret_store/find)\n\nFinds a secret in the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns a secret object.\n\nGET /v1/apps/secrets/find\n\n```\ncurl -G https://api.stripe.com/v1/apps/secrets/find \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [Set a Secret](https://docs.stripe.com/api/apps/secret_store/set)\n\nCreate or replace a secret in the secret store.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   The plaintext secret value to be stored.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n*   The Unix timestamp for the expiry time of the secret, after which the secret deletes.\n    \n\n### Returns\n\nReturns a secret object.\n\n```\ncurl https://api.stripe.com/v1/apps/secrets \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d payload=secret_key_xxxxxx \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List secrets | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/persons/update",
  "markdown": "# Update a person | Stripe API Reference\n\nUpdates an existing person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1680035496,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": \"Jane\",  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": \"Diaz\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Retrieve a person](https://docs.stripe.com/api/persons/retrieve)\n\nRetrieves an existing person.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a person object.\n\nGET /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [List all persons](https://docs.stripe.com/api/persons/list)\n\nReturns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.\n\n### Parameters\n\n*   Filters on the list of people returned based on the person’s relationship to the account’s company.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` people, starting after person `starting_after`. Each entry in the array is a separate person object. If no more people are available, the resulting array will be empty.\n\nGET /v1/accounts/:id/persons\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/persons\",  \"has_more\": false,  \"data\": [    {      \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"object\": \"person\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"created\": 1680035496,      \"dob\": {        \"day\": null,        \"month\": null,        \"year\": null      },      \"first_name\": \"Jane\",      \"future_requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"id_number_provided\": false,      \"last_name\": \"Diaz\",      \"metadata\": {},      \"relationship\": {        \"director\": false,        \"executive\": false,        \"owner\": false,        \"percent_ownership\": null,        \"representative\": false,        \"title\": null      },      \"requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"ssn_last_4_provided\": false,      \"verification\": {        \"additional_document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"details\": null,        \"details_code\": null,        \"document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"status\": \"unverified\"      }    }    {...}    {...}  ],}\n```\n\n## [Delete a person](https://docs.stripe.com/api/persons/delete)\n\nDeletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the `account_opener`. If your integration is using the `executive` parameter, you cannot delete the only verified `executive` on file.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted person object.\n\nDELETE /v1/accounts/:id/persons/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"deleted\": true}\n```\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a person | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/apps/secret_store/delete",
  "markdown": "# Delete a Secret | Stripe API Reference\n\nDeletes a secret from the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns the deleted secret object.\n\nPOST /v1/apps/secrets/delete\n\n```\ncurl https://api.stripe.com/v1/apps/secrets/delete \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"deleted\": true}\n```\n\n## [Find a Secret](https://docs.stripe.com/api/apps/secret_store/find)\n\nFinds a secret in the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns a secret object.\n\nGET /v1/apps/secrets/find\n\n```\ncurl -G https://api.stripe.com/v1/apps/secrets/find \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [Set a Secret](https://docs.stripe.com/api/apps/secret_store/set)\n\nCreate or replace a secret in the secret store.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   The plaintext secret value to be stored.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n*   The Unix timestamp for the expiry time of the secret, after which the secret deletes.\n    \n\n### Returns\n\nReturns a secret object.\n\n```\ncurl https://api.stripe.com/v1/apps/secrets \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d payload=secret_key_xxxxxx \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a Secret | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/persons/retrieve",
  "markdown": "# Retrieve a person | Stripe API Reference\n\nRetrieves an existing person.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a person object.\n\nGET /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [List all persons](https://docs.stripe.com/api/persons/list)\n\nReturns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.\n\n### Parameters\n\n*   Filters on the list of people returned based on the person’s relationship to the account’s company.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` people, starting after person `starting_after`. Each entry in the array is a separate person object. If no more people are available, the resulting array will be empty.\n\nGET /v1/accounts/:id/persons\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/persons\",  \"has_more\": false,  \"data\": [    {      \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"object\": \"person\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"created\": 1680035496,      \"dob\": {        \"day\": null,        \"month\": null,        \"year\": null      },      \"first_name\": \"Jane\",      \"future_requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"id_number_provided\": false,      \"last_name\": \"Diaz\",      \"metadata\": {},      \"relationship\": {        \"director\": false,        \"executive\": false,        \"owner\": false,        \"percent_ownership\": null,        \"representative\": false,        \"title\": null      },      \"requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"ssn_last_4_provided\": false,      \"verification\": {        \"additional_document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"details\": null,        \"details_code\": null,        \"document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"status\": \"unverified\"      }    }    {...}    {...}  ],}\n```\n\n## [Delete a person](https://docs.stripe.com/api/persons/delete)\n\nDeletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the `account_opener`. If your integration is using the `executive` parameter, you cannot delete the only verified `executive` on file.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted person object.\n\nDELETE /v1/accounts/:id/persons/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"deleted\": true}\n```\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a person | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/apps/secret_store/find",
  "markdown": "# Find a Secret | Stripe API Reference\n\nFinds a secret in the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns a secret object.\n\nGET /v1/apps/secrets/find\n\n```\ncurl -G https://api.stripe.com/v1/apps/secrets/find \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [Set a Secret](https://docs.stripe.com/api/apps/secret_store/set)\n\nCreate or replace a secret in the secret store.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   The plaintext secret value to be stored.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n*   The Unix timestamp for the expiry time of the secret, after which the secret deletes.\n    \n\n### Returns\n\nReturns a secret object.\n\n```\ncurl https://api.stripe.com/v1/apps/secrets \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d payload=secret_key_xxxxxx \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Find a Secret | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/persons/list",
  "markdown": "# List all persons | Stripe API Reference\n\nReturns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.\n\n### Parameters\n\n*   Filters on the list of people returned based on the person’s relationship to the account’s company.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` people, starting after person `starting_after`. Each entry in the array is a separate person object. If no more people are available, the resulting array will be empty.\n\nGET /v1/accounts/:id/persons\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/persons\",  \"has_more\": false,  \"data\": [    {      \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"object\": \"person\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"created\": 1680035496,      \"dob\": {        \"day\": null,        \"month\": null,        \"year\": null      },      \"first_name\": \"Jane\",      \"future_requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"id_number_provided\": false,      \"last_name\": \"Diaz\",      \"metadata\": {},      \"relationship\": {        \"director\": false,        \"executive\": false,        \"owner\": false,        \"percent_ownership\": null,        \"representative\": false,        \"title\": null      },      \"requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"ssn_last_4_provided\": false,      \"verification\": {        \"additional_document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"details\": null,        \"details_code\": null,        \"document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"status\": \"unverified\"      }    }    {...}    {...}  ],}\n```\n\n## [Delete a person](https://docs.stripe.com/api/persons/delete)\n\nDeletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the `account_opener`. If your integration is using the `executive` parameter, you cannot delete the only verified `executive` on file.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted person object.\n\nDELETE /v1/accounts/:id/persons/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"deleted\": true}\n```\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all persons | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/test_mode_capture",
  "markdown": "# Capture a test-mode authorization | Stripe API Reference\n\n## [Capture a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)Test helper\n\nCapture a test-mode authorization.\n\n### Parameters\n\n*   The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    close\\_authorizationboolean\n    \n    Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.\n    \n*   Additional purchase information that is optionally provided by the merchant.\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Expire a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)Test helper\n\nExpire a test-mode Authorization.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Finalize a test-mode authorization's amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)Test helper\n\nFinalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.\n\n### Parameters\n\n*   #### \n    \n    final\\_amountintegerRequired\n    \n    The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### More parameters\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/finalize_amount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d final_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"chip\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"automated_fuel_dispensers\",    \"category_code\": \"5542\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Increment a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)Test helper\n\nIncrement a test-mode Authorization.\n\n### Parameters\n\n*   #### \n    \n    increment\\_amountintegerRequired\n    \n    The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n    If set `true`, you may provide [amount](https://docs.stripe.com/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/increment\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/increment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d increment_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Respond to fraud challenge](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)Test helper\n\nRespond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.\n\n### Parameters\n\n*   Whether to simulate the user confirming that the transaction was legitimate (true) or telling Stripe that it was fraudulent (false).\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/fraud_challenges/respond \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d confirmed=true\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
  "title": "Capture a test-mode authorization | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/apps/secret_store/set",
  "markdown": "# Set a Secret | Stripe API Reference\n\nCreate or replace a secret in the secret store.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   The plaintext secret value to be stored.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n*   The Unix timestamp for the expiry time of the secret, after which the secret deletes.\n    \n\n### Returns\n\nReturns a secret object.\n\n```\ncurl https://api.stripe.com/v1/apps/secrets \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d payload=secret_key_xxxxxx \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Set a Secret | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/persons/delete",
  "markdown": "# Delete a person | Stripe API Reference\n\nDeletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the `account_opener`. If your integration is using the `executive` parameter, you cannot delete the only verified `executive` on file.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted person object.\n\nDELETE /v1/accounts/:id/persons/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"deleted\": true}\n```\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a person | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/early_fraud_warnings",
  "markdown": "# Early Fraud Warning | Stripe API Reference\n\nAn early fraud warning indicates that the card issuer has notified us that a charge may be fraudulent.\n\nRelated guide: [Early fraud warnings](https://docs.stripe.com/disputes/measuring#early-fraud-warnings)\n\n## [The Early Fraud Warning object](https://docs.stripe.com/api/radar/early_fraud_warnings/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.\n    \n*   ID of the charge this early fraud warning is for, optionally expanded.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the Payment Intent this early fraud warning is for, optionally expanded.\n    \n\nThe Early Fraud Warning object\n\n```\n{  \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",  \"object\": \"radar.early_fraud_warning\",  \"actionable\": true,  \"charge\": \"ch_1234\",  \"created\": 123456789,  \"fraud_type\": \"misc\",  \"livemode\": false}\n```\n\n## [Retrieve an early fraud warning](https://docs.stripe.com/api/radar/early_fraud_warnings/retrieve)\n\nRetrieves the details of an early fraud warning that has previously been created.\n\nPlease refer to the [early fraud warning](#early_fraud_warning_object) object reference for more details.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an EarlyFraudWarning if a valid identifier was provided.\n\nGET /v1/radar/early\\_fraud\\_warnings/:id\n\n```\ncurl https://api.stripe.com/v1/radar/early_fraud_warnings/issfr_1NnrwHBw2dPENLoi9lnhV3RQ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",  \"object\": \"radar.early_fraud_warning\",  \"actionable\": true,  \"charge\": \"ch_1234\",  \"created\": 123456789,  \"fraud_type\": \"misc\",  \"livemode\": false}\n```\n\n## [List all early fraud warnings](https://docs.stripe.com/api/radar/early_fraud_warnings/list)\n\nReturns a list of early fraud warnings.\n\n### Parameters\n\n*   Only return early fraud warnings for the charge specified by this charge ID.\n    \n*   Only return early fraud warnings that were created during the given date interval.\n    \n*   Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` EarlyFraudWarnings, starting after EarlyFraudWarnings `starting_after`. Each entry in the array is a separate EarlyFraudWarning object. If no more EarlyFraudWarnings are available, the resulting array will be empty.\n\nGET /v1/radar/early\\_fraud\\_warnings\n\n```\ncurl -G https://api.stripe.com/v1/radar/early_fraud_warnings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/early_fraud_warnings\",  \"has_more\": false,  \"data\": [    {      \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",      \"object\": \"radar.early_fraud_warning\",      \"actionable\": true,      \"charge\": \"ch_1234\",      \"created\": 123456789,      \"fraud_type\": \"misc\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Early Fraud Warning | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/test_mode_expire",
  "markdown": "# Expire a test-mode authorization | Stripe API Reference\n\n## [Expire a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)Test helper\n\nExpire a test-mode Authorization.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Finalize a test-mode authorization's amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)Test helper\n\nFinalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.\n\n### Parameters\n\n*   #### \n    \n    final\\_amountintegerRequired\n    \n    The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### More parameters\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/finalize_amount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d final_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"chip\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"automated_fuel_dispensers\",    \"category_code\": \"5542\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Increment a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)Test helper\n\nIncrement a test-mode Authorization.\n\n### Parameters\n\n*   #### \n    \n    increment\\_amountintegerRequired\n    \n    The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n    If set `true`, you may provide [amount](https://docs.stripe.com/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/increment\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/increment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d increment_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Respond to fraud challenge](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)Test helper\n\nRespond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.\n\n### Parameters\n\n*   Whether to simulate the user confirming that the transaction was legitimate (true) or telling Stripe that it was fraudulent (false).\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/fraud_challenges/respond \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d confirmed=true\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Reverse a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)Test helper\n\nReverse a test-mode Authorization.\n\n### Parameters\n\n*   The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/reverse\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/reverse \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
  "title": "Expire a test-mode authorization | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/early_fraud_warnings/retrieve",
  "markdown": "# Retrieve an early fraud warning\n\nRetrieves the details of an early fraud warning that has previously been created.\n\nPlease refer to the [early fraud warning](#early_fraud_warning_object) object reference for more details.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an EarlyFraudWarning if a valid identifier was provided.\n\nGET /v1/radar/early\\_fraud\\_warnings/:id\n\n```\ncurl https://api.stripe.com/v1/radar/early_fraud_warnings/issfr_1NnrwHBw2dPENLoi9lnhV3RQ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",  \"object\": \"radar.early_fraud_warning\",  \"actionable\": true,  \"charge\": \"ch_1234\",  \"created\": 123456789,  \"fraud_type\": \"misc\",  \"livemode\": false}\n```\n\n## [List all early fraud warnings](https://docs.stripe.com/api/radar/early_fraud_warnings/list)\n\nReturns a list of early fraud warnings.\n\n### Parameters\n\n*   Only return early fraud warnings for the charge specified by this charge ID.\n    \n*   Only return early fraud warnings that were created during the given date interval.\n    \n*   Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` EarlyFraudWarnings, starting after EarlyFraudWarnings `starting_after`. Each entry in the array is a separate EarlyFraudWarning object. If no more EarlyFraudWarnings are available, the resulting array will be empty.\n\nGET /v1/radar/early\\_fraud\\_warnings\n\n```\ncurl -G https://api.stripe.com/v1/radar/early_fraud_warnings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/early_fraud_warnings\",  \"has_more\": false,  \"data\": [    {      \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",      \"object\": \"radar.early_fraud_warning\",      \"actionable\": true,      \"charge\": \"ch_1234\",      \"created\": 123456789,      \"fraud_type\": \"misc\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an early fraud warning | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount",
  "markdown": "# Finalize a test-mode authorization's amount\n\n## [Finalize a test-mode authorization's amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)Test helper\n\nFinalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.\n\n### Parameters\n\n*   #### \n    \n    final\\_amountintegerRequired\n    \n    The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### More parameters\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/finalize_amount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d final_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"chip\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"automated_fuel_dispensers\",    \"category_code\": \"5542\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Increment a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)Test helper\n\nIncrement a test-mode Authorization.\n\n### Parameters\n\n*   #### \n    \n    increment\\_amountintegerRequired\n    \n    The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n    If set `true`, you may provide [amount](https://docs.stripe.com/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/increment\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/increment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d increment_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Respond to fraud challenge](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)Test helper\n\nRespond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.\n\n### Parameters\n\n*   Whether to simulate the user confirming that the transaction was legitimate (true) or telling Stripe that it was fraudulent (false).\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/fraud_challenges/respond \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d confirmed=true\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Reverse a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)Test helper\n\nReverse a test-mode Authorization.\n\n### Parameters\n\n*   The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/reverse\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/reverse \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Finalize a test-mode authorization's amount | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/test_mode_increment",
  "markdown": "# Increment a test-mode authorization | Stripe API Reference\n\n## [Increment a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)Test helper\n\nIncrement a test-mode Authorization.\n\n### Parameters\n\n*   #### \n    \n    increment\\_amountintegerRequired\n    \n    The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n    If set `true`, you may provide [amount](https://docs.stripe.com/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/increment\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/increment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d increment_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Respond to fraud challenge](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)Test helper\n\nRespond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.\n\n### Parameters\n\n*   Whether to simulate the user confirming that the transaction was legitimate (true) or telling Stripe that it was fraudulent (false).\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/fraud_challenges/respond \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d confirmed=true\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Reverse a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)Test helper\n\nReverse a test-mode Authorization.\n\n### Parameters\n\n*   The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/reverse\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/reverse \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Increment a test-mode authorization | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/early_fraud_warnings/list",
  "markdown": "# List all early fraud warnings\n\nReturns a list of early fraud warnings.\n\n### Parameters\n\n*   Only return early fraud warnings for the charge specified by this charge ID.\n    \n*   Only return early fraud warnings that were created during the given date interval.\n    \n*   Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` EarlyFraudWarnings, starting after EarlyFraudWarnings `starting_after`. Each entry in the array is a separate EarlyFraudWarning object. If no more EarlyFraudWarnings are available, the resulting array will be empty.\n\nGET /v1/radar/early\\_fraud\\_warnings\n\n```\ncurl -G https://api.stripe.com/v1/radar/early_fraud_warnings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/early_fraud_warnings\",  \"has_more\": false,  \"data\": [    {      \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",      \"object\": \"radar.early_fraud_warning\",      \"actionable\": true,      \"charge\": \"ch_1234\",      \"created\": 123456789,      \"fraud_type\": \"misc\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all early fraud warnings | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/reviews",
  "markdown": "# Reviews | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fradar%2Freviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [The Review object](https://docs.stripe.com/api/radar/reviews/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    The charge associated with this review.\n    \n*   If `true`, the review needs action.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The PaymentIntent ID associated with this review, if one exists.\n    \n*   The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.\n    \n\n### More attributes\n\n*   #### \n    \n    billing\\_zipnullable string\n    \n*   #### \n    \n    closed\\_reasonnullable enum\n    \n\n*   #### \n    \n    ip\\_addressnullable string\n    \n*   #### \n    \n    ip\\_address\\_locationnullable object\n    \n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [Retrieve a review](https://docs.stripe.com/api/radar/reviews/retrieve)\n\nRetrieves a `Review` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Review` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [List all open reviews](https://docs.stripe.com/api/radar/reviews/list)\n\nReturns a list of `Review` objects that have `open` set to `true`. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reviews, starting after review `starting_after`. Each entry in the array is a separate `Review` object. If no more reviews are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/reviews \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reviews\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",      \"object\": \"review\",      \"billing_zip\": null,      \"charge\": null,      \"closed_reason\": null,      \"created\": 1689864901,      \"ip_address\": null,      \"ip_address_location\": null,      \"livemode\": false,      \"open\": true,      \"opened_reason\": \"rule\",      \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",      \"reason\": \"rule\",      \"session\": null    }    {...}    {...}  ],}\n```\n\n## [Approve a review](https://docs.stripe.com/api/radar/reviews/approve)\n\nApproves a `Review` object, closing it and removing it from the list of reviews.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the approved `Review` object.\n\nPOST /v1/reviews/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```",
  "title": "Reviews | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/topups/update",
  "markdown": "# Update a top-up | Stripe API Reference\n\nUpdates the metadata of a top-up. Other top-up details are not editable by design.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe newly updated top-up object if the call succeeded. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve a top-up](https://docs.stripe.com/api/topups/retrieve)\n\nRetrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a top-up if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [List all top-ups](https://docs.stripe.com/api/topups/list)\n\nReturns a list of top-ups.\n\n### Parameters\n\n*   Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary containing the `data` property, which is an array of separate top-up objects. The number of top-ups in the array is limited to the number designated in `limit`. If no more top-ups are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/topups\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",      \"object\": \"topup\",      \"amount\": 2000,      \"balance_transaction\": null,      \"created\": 123456789,      \"currency\": \"usd\",      \"description\": \"Top-up for Jenny Rosen\",      \"expected_availability_date\": 123456789,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"source\": null,      \"statement_descriptor\": \"Top-up\",      \"status\": \"pending\",      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a top-up](https://docs.stripe.com/api/topups/cancel)\n\nCancels a top-up. Only pending top-ups can be canceled.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled top-up. If the top-up is already canceled or can’t be canceled, an error is returned.\n\nPOST /v1/topups/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"canceled\",  \"transfer_group\": null}\n```\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a top-up | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges",
  "markdown": "# Respond to fraud challenge | Stripe API Reference\n\n## [Respond to fraud challenge](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)Test helper\n\nRespond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.\n\n### Parameters\n\n*   Whether to simulate the user confirming that the transaction was legitimate (true) or telling Stripe that it was fraudulent (false).\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/fraud_challenges/respond \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d confirmed=true\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Reverse a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)Test helper\n\nReverse a test-mode Authorization.\n\n### Parameters\n\n*   The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/reverse\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/reverse \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Respond to fraud challenge | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse",
  "markdown": "# Reverse a test-mode authorization | Stripe API Reference\n\n## [Reverse a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)Test helper\n\nReverse a test-mode Authorization.\n\n### Parameters\n\n*   The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/reverse\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/reverse \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Reverse a test-mode authorization | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cardholders",
  "markdown": "# Cardholders | Stripe API Reference\n\nEndpoints\n\n[POST/v1/issuing/cardholders](https://docs.stripe.com/api/issuing/cardholders/create)[POST/v1/issuing/cardholders/:id](https://docs.stripe.com/api/issuing/cardholders/update)[GET/v1/issuing/cardholders/:id](https://docs.stripe.com/api/issuing/cardholders/retrieve)[GET/v1/issuing/cardholders](https://docs.stripe.com/api/issuing/cardholders/list)\n\n## [The Cardholder object](https://docs.stripe.com/api/issuing/cardholders/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The cardholder’s billing information.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The cardholder’s name. This will be printed on cards issued to them.\n    \n*   #### \n    \n    phone\\_numbernullable string\n    \n    The cardholder’s phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure#when-is-3d-secure-applied) for more details.\n    \n\n### More attributes\n\n*   #### \n    \n    individualnullable object\n    \n\n*   #### \n    \n    preferred\\_localesnullable array of enums\n    \n\n*   #### \n    \n    spending\\_controlsnullable object\n    \n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Create a cardholder](https://docs.stripe.com/api/issuing/cardholders/create)\n\nCreates a new Issuing `Cardholder` object that can be issued cards.\n\n### Parameters\n\n*   The cardholder’s billing address.\n    \n*   The cardholder’s name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The cardholder’s phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure#when-is-3d-secure-applied) for more details.\n    \n\n### More parameters\n\n*   #### \n    \n    preferred\\_localesarray of enums\n    \n\n### Returns\n\nReturns an Issuing `Cardholder` object if creation succeeds.\n\nPOST /v1/issuing/cardholders\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=individual \\  -d name=\"Jenny Rosen\" \\  --data-urlencode email=\"jenny.rosen@example.com\" \\  --data-urlencode phone_number=\"+18888675309\" \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][country]\"=US \\  -d \"billing[address][postal_code]\"=94111\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Update a cardholder](https://docs.stripe.com/api/issuing/cardholders/update)\n\nUpdates the specified Issuing `Cardholder` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The cardholder’s billing address.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The cardholder’s phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure) for more details.\n    \n\n### More parameters\n\n*   #### \n    \n    preferred\\_localesarray of enums\n    \n\n### Returns\n\nReturns an updated Issuing `Cardholder` object if a valid identifier was provided.\n\nPOST /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Retrieve a cardholder](https://docs.stripe.com/api/issuing/cardholders/retrieve)\n\nRetrieves an Issuing `Cardholder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Cardholder` object if a valid identifier was provided.\n\nGET /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```",
  "title": "Cardholders | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/topups/list",
  "markdown": "# List all top-ups | Stripe API Reference\n\nReturns a list of top-ups.\n\n### Parameters\n\n*   Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary containing the `data` property, which is an array of separate top-up objects. The number of top-ups in the array is limited to the number designated in `limit`. If no more top-ups are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/topups\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",      \"object\": \"topup\",      \"amount\": 2000,      \"balance_transaction\": null,      \"created\": 123456789,      \"currency\": \"usd\",      \"description\": \"Top-up for Jenny Rosen\",      \"expected_availability_date\": 123456789,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"source\": null,      \"statement_descriptor\": \"Top-up\",      \"status\": \"pending\",      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a top-up](https://docs.stripe.com/api/topups/cancel)\n\nCancels a top-up. Only pending top-ups can be canceled.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled top-up. If the top-up is already canceled or can’t be canceled, an error is returned.\n\nPOST /v1/topups/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"canceled\",  \"transfer_group\": null}\n```\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all top-ups | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/reviews/retrieve",
  "markdown": "# Retrieve a review | Stripe API Reference\n\nRetrieves a `Review` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Review` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [List all open reviews](https://docs.stripe.com/api/radar/reviews/list)\n\nReturns a list of `Review` objects that have `open` set to `true`. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reviews, starting after review `starting_after`. Each entry in the array is a separate `Review` object. If no more reviews are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/reviews \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reviews\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",      \"object\": \"review\",      \"billing_zip\": null,      \"charge\": null,      \"closed_reason\": null,      \"created\": 1689864901,      \"ip_address\": null,      \"ip_address_location\": null,      \"livemode\": false,      \"open\": true,      \"opened_reason\": \"rule\",      \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",      \"reason\": \"rule\",      \"session\": null    }    {...}    {...}  ],}\n```\n\n## [Approve a review](https://docs.stripe.com/api/radar/reviews/approve)\n\nApproves a `Review` object, closing it and removing it from the list of reviews.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the approved `Review` object.\n\nPOST /v1/reviews/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a review | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/transfer-payout-split",
  "markdown": "# Transfer Payout Split: Stripe-Version 2017-04-06\n\nOn April 6, 2017, Stripe split the `/v1/transfers` resource into `/v1/transfers` and `/v1/payouts`. This is a versioned change–your existing integrations don’t need to change.\n\nSince Stripe was launched, we’ve used the word **transfer** to mean moving money out of Stripe and into your bank account or debit card. But when [Connect](https://docs.stripe.com/connect \"Connect\") was launched years later, we co-opted that term to also mean moving money between a platform and its connected accounts.\n\nThis ultimately turned out to be confusing. These are conceptually different flows of funds as they apply to a business. This made it difficult to document transfers, and also bloated the `/v1/transfers` API because the fields needed to support each flow of funds were different.\n\nAs of Stripe-Version `2017-04-06`:\n\n*   **Payouts** will mean moving money from Stripe to your bank account or debit card and will be represented by `/v1/payouts`.\n*   **Transfers** will mean moving money between Stripe accounts as part of Connect and will be represented by `/v1/transfers`.\n*   Relative to the legacy `/v1/transfers` resource, the new `/v1/transfers` resource won’t have these fields:\n    *   `method` - this only applies to [payouts](https://docs.stripe.com/payouts \"payout\").\n    *   `status` - this only applies to payouts.\n    *   `type` - this only applies to payouts.\n    *   `bank_account` - this only applies to payouts.\n    *   `card` - this only applies to payouts.\n    *   `failure_message` - this only applies to payouts.\n    *   `failure_code` - this only applies to payouts.\n    *   `description` - description was confusing because it applied to the transfer but not the resultant payment on the connected account. Use `metadata` to attach additional information to a transfer.\n    *   `application_fee` - application\\_fee is no longer necessary. See [Connect destination charges](https://docs.stripe.com/connect/destination-charges).\n*   Relative to the legacy `/v1/transfers`, the new `/v1/payouts` resource won’t have these fields:\n    *   `reversals` - payouts can now be simply canceled.\n    *   `reversed` - refer to the payout status.\n    *   `application_fee` - this only applies to legacy transfers.\n    *   `destination_payment` - this only applies to transfers.\n    *   `source_transaction` - this only applies to legacy transfers.\n    *   `description` - description was removed because it didn’t provide enough value. Use metadata to attach additional information to a payout.\n*   On the `/v1/payouts` resource, the `date` field was renamed to `arrival_date`.\n*   To send a payout to your default bank account or debit card, instead of including the parameter `destination=default_for_currency`, simply omit the `destination` entirely.\n*   Canceling a payout is now done via `POST /v1/payouts/:id/cancel`. The balance transaction resulting from a cancellation is available via the `cancellation_balance_transaction` field on the payout. The `status` of a canceled payout is `canceled`.\n*   When creating a transfer, you can now only use a charge as the `source_transaction`. Previously, it was possible to use any transaction (such as an application fee, or an adjustment) as a `source_transaction`. This did not mesh well with the intended use case of tagging outgoing transfers with the incoming source of funds, so this is no longer supported on the new API version.\n*   Payouts now generate these events: `payout.created`, `payout.failed`, `payout.reversed`, `payout.paid`, `payout.updated`, which are the equivalent of the legacy `transfer.*` events.\n*   Transfers no longer generate these events: `transfer.paid` and `transfer.failed`.\n*   Balance transactions can have these types as they relate to payouts: `type` ∈ {`payout`, `payout_failure`, `payout_cancel`}\n*   Balance transactions can have these types as they relate to transfers: `type` ∈ {`transfer`, `transfer_refund`}\n*   Fields on the [Account API](https://docs.stripe.com/api/accounts) were renamed:\n    *   `transfers_enabled` → `payouts_enabled`\n    *   `transfer_schedule` → `payout_schedule`\n    *   `transfer_statement_descriptor` → `payout_statement_descriptor`\n*   Transfers to deprecated Recipients API (link) are no longer represented on this version of the API. Use a legacy API version to access any transfers to recipients that you may have.",
  "title": "Transfer Payout Split: Stripe-Version 2017-04-06 | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/reviews/approve",
  "markdown": "# Approve a review | Stripe API Reference\n\nApproves a `Review` object, closing it and removing it from the list of reviews.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the approved `Review` object.\n\nPOST /v1/reviews/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Approve a review | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/reviews/list",
  "markdown": "# List all open reviews | Stripe API Reference\n\nReturns a list of `Review` objects that have `open` set to `true`. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reviews, starting after review `starting_after`. Each entry in the array is a separate `Review` object. If no more reviews are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/reviews \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reviews\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",      \"object\": \"review\",      \"billing_zip\": null,      \"charge\": null,      \"closed_reason\": null,      \"created\": 1689864901,      \"ip_address\": null,      \"ip_address_location\": null,      \"livemode\": false,      \"open\": true,      \"opened_reason\": \"rule\",      \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",      \"reason\": \"rule\",      \"session\": null    }    {...}    {...}  ],}\n```\n\n## [Approve a review](https://docs.stripe.com/api/radar/reviews/approve)\n\nApproves a `Review` object, closing it and removing it from the list of reviews.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the approved `Review` object.\n\nPOST /v1/reviews/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all open reviews | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_lists",
  "markdown": "# Value Lists | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fradar%2Fvalue_lists)\n\n## [The Value List object](https://docs.stripe.com/api/radar/value_lists/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The name of the value list for use in rules.\n    \n*   The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_bin` |\n    | `card_fingerprint` |\n    | `case_sensitive_string` |\n    | `country` |\n    | `customer_id` |\n    | `email` |\n    | `ip_address` |\n    | `sepa_debit_fingerprint` |\n    | `string` |\n    | `us_bank_account_fingerprint` |\n    \n*   List of items contained within this value list.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The name of the value list.\n    \n\n### More attributes\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [Create a value list](https://docs.stripe.com/api/radar/value_lists/create)\n\nCreates a new `ValueList` object, which can then be referenced in rules.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   The human-readable name of the value list.\n    \n*   Type of the items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a `ValueList` object if creation succeeds.\n\nPOST /v1/radar/value\\_lists\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Custom IP Blocklist\" \\  -d alias=custom_ip_blocklist \\  -d item_type=ip_address\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [Update a value list](https://docs.stripe.com/api/radar/value_lists/update)\n\nUpdates a `ValueList` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that `item_type` is immutable.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The human-readable name of the value list.\n    \n\n### Returns\n\nReturns an updated `ValueList` object if a valid identifier was provided.\n\nPOST /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Updated IP Blocklist\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Updated IP Blocklist\"}\n```\n\n## [Retrieve a value list](https://docs.stripe.com/api/radar/value_lists/retrieve)\n\nRetrieves a `ValueList` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueList` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```",
  "title": "Value Lists | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfers/create",
  "markdown": "# Create a transfer | Stripe API Reference\n\nTo send funds from your Stripe account to a connected account, you create a new transfer object. Your [Stripe balance](#balance) must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.\n\n### Parameters\n\n*   #### \n    \n    destinationstringRequired\n    \n*   A positive integer in cents representing how much to transfer.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a transfer object if there were no initial errors with the transfer creation (e.g., insufficient funds).\n\n```\ncurl https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=400 \\  -d currency=usd \\  -d destination=acct_1MTfjCQ9PRzxEwkZ \\  -d transfer_group=ORDER_95\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Update a transfer](https://docs.stripe.com/api/transfers/update)\n\nUpdates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts only metadata as an argument.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the transfer object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Retrieve a transfer](https://docs.stripe.com/api/transfers/retrieve)\n\nRetrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a transfer object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [List all transfers](https://docs.stripe.com/api/transfers/list)\n\nReturns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.\n\n### Parameters\n\n*   Only return transfers for the destination specified by this account ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transfers, starting after transfer `starting_after`. Each entry in the array is a separate transfer object. If no more transfers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",      \"object\": \"transfer\",      \"amount\": 400,      \"amount_reversed\": 0,      \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",      \"created\": 1678043844,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",      \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",      \"livemode\": false,      \"metadata\": {},      \"reversals\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"      },      \"reversed\": false,      \"source_transaction\": null,      \"source_type\": \"card\",      \"transfer_group\": \"ORDER_95\"    }    {...}    {...}  ],}\n```\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a transfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cardholders/retrieve",
  "markdown": "# Retrieve a cardholder | Stripe API Reference\n\nRetrieves an Issuing `Cardholder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Cardholder` object if a valid identifier was provided.\n\nGET /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [List all cardholders](https://docs.stripe.com/api/issuing/cardholders/list)\n\nReturns a list of Issuing `Cardholder` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cardholders, starting after cardholder `starting_after`. Each entry in the array is a separate Issuing `Cardholder` object. If no more cardholders are available, the resulting array will be empty.\n\nGET /v1/issuing/cardholders\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cardholders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cardholders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"line1\": \"1234 Main Street\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"country\": \"US\",          \"postal_code\": \"94111\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18888675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    }    {...}    {...}  ],}\n```\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a cardholder | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cardholders/list",
  "markdown": "# List all cardholders | Stripe API Reference\n\nReturns a list of Issuing `Cardholder` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cardholders, starting after cardholder `starting_after`. Each entry in the array is a separate Issuing `Cardholder` object. If no more cardholders are available, the resulting array will be empty.\n\nGET /v1/issuing/cardholders\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cardholders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cardholders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"line1\": \"1234 Main Street\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"country\": \"US\",          \"postal_code\": \"94111\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18888675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    }    {...}    {...}  ],}\n```\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all cardholders | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfers/update",
  "markdown": "# Update a transfer | Stripe API Reference\n\nUpdates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts only metadata as an argument.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the transfer object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Retrieve a transfer](https://docs.stripe.com/api/transfers/retrieve)\n\nRetrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a transfer object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [List all transfers](https://docs.stripe.com/api/transfers/list)\n\nReturns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.\n\n### Parameters\n\n*   Only return transfers for the destination specified by this account ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transfers, starting after transfer `starting_after`. Each entry in the array is a separate transfer object. If no more transfers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",      \"object\": \"transfer\",      \"amount\": 400,      \"amount_reversed\": 0,      \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",      \"created\": 1678043844,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",      \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",      \"livemode\": false,      \"metadata\": {},      \"reversals\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"      },      \"reversed\": false,      \"source_transaction\": null,      \"source_type\": \"card\",      \"transfer_group\": \"ORDER_95\"    }    {...}    {...}  ],}\n```\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a transfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_lists/create",
  "markdown": "# Create a value list | Stripe API Reference\n\nCreates a new `ValueList` object, which can then be referenced in rules.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   The human-readable name of the value list.\n    \n*   Type of the items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a `ValueList` object if creation succeeds.\n\nPOST /v1/radar/value\\_lists\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Custom IP Blocklist\" \\  -d alias=custom_ip_blocklist \\  -d item_type=ip_address\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [Update a value list](https://docs.stripe.com/api/radar/value_lists/update)\n\nUpdates a `ValueList` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that `item_type` is immutable.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The human-readable name of the value list.\n    \n\n### Returns\n\nReturns an updated `ValueList` object if a valid identifier was provided.\n\nPOST /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Updated IP Blocklist\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Updated IP Blocklist\"}\n```\n\n## [Retrieve a value list](https://docs.stripe.com/api/radar/value_lists/retrieve)\n\nRetrieves a `ValueList` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueList` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [List all value lists](https://docs.stripe.com/api/radar/value_lists/list)\n\nReturns a list of `ValueList` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   The alias used to reference the value list when writing rules.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` lists, starting after list `starting_after`. Each entry in the array is a separate `ValueList` object. If no more lists are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_lists\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_lists\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1680201894,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list](https://docs.stripe.com/api/radar/value_lists/delete)\n\nDeletes a `ValueList` object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueList` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_lists/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"deleted\": true}\n```",
  "title": "Create a value list | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfers/retrieve",
  "markdown": "# Retrieve a transfer | Stripe API Reference\n\nRetrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a transfer object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [List all transfers](https://docs.stripe.com/api/transfers/list)\n\nReturns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.\n\n### Parameters\n\n*   Only return transfers for the destination specified by this account ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transfers, starting after transfer `starting_after`. Each entry in the array is a separate transfer object. If no more transfers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",      \"object\": \"transfer\",      \"amount\": 400,      \"amount_reversed\": 0,      \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",      \"created\": 1678043844,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",      \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",      \"livemode\": false,      \"metadata\": {},      \"reversals\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"      },      \"reversed\": false,      \"source_transaction\": null,      \"source_type\": \"card\",      \"transfer_group\": \"ORDER_95\"    }    {...}    {...}  ],}\n```\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a transfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfers/list",
  "markdown": "# List all transfers | Stripe API Reference\n\nReturns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.\n\n### Parameters\n\n*   Only return transfers for the destination specified by this account ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transfers, starting after transfer `starting_after`. Each entry in the array is a separate transfer object. If no more transfers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",      \"object\": \"transfer\",      \"amount\": 400,      \"amount_reversed\": 0,      \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",      \"created\": 1678043844,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",      \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",      \"livemode\": false,      \"metadata\": {},      \"reversals\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"      },      \"reversed\": false,      \"source_transaction\": null,      \"source_type\": \"card\",      \"transfer_group\": \"ORDER_95\"    }    {...}    {...}  ],}\n```\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all transfers | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/topups/cancel",
  "markdown": "# Cancel a top-up | Stripe API Reference\n\nCancels a top-up. Only pending top-ups can be canceled.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled top-up. If the top-up is already canceled or can’t be canceled, an error is returned.\n\nPOST /v1/topups/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"canceled\",  \"transfer_group\": null}\n```\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Cancel a top-up | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_lists/update",
  "markdown": "# Update a value list | Stripe API Reference\n\nUpdates a `ValueList` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that `item_type` is immutable.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The human-readable name of the value list.\n    \n\n### Returns\n\nReturns an updated `ValueList` object if a valid identifier was provided.\n\nPOST /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Updated IP Blocklist\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Updated IP Blocklist\"}\n```\n\n## [Retrieve a value list](https://docs.stripe.com/api/radar/value_lists/retrieve)\n\nRetrieves a `ValueList` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueList` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [List all value lists](https://docs.stripe.com/api/radar/value_lists/list)\n\nReturns a list of `ValueList` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   The alias used to reference the value list when writing rules.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` lists, starting after list `starting_after`. Each entry in the array is a separate `ValueList` object. If no more lists are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_lists\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_lists\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1680201894,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list](https://docs.stripe.com/api/radar/value_lists/delete)\n\nDeletes a `ValueList` object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueList` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_lists/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"deleted\": true}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a value list | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfer_reversals",
  "markdown": "# Transfer Reversals | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftransfer_reversals)\n\n## [The Transfer Reversal object](https://docs.stripe.com/api/transfer_reversals/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   ID of the transfer that was reversed.\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destination\\_payment\\_refundnullable stringExpandable\n    \n*   #### \n    \n    source\\_refundnullable stringExpandable\n    \n\nThe Transfer Reversal object\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Create a transfer reversal](https://docs.stripe.com/api/transfer_reversals/create)\n\nWhen you create a new reversal, you must specify a transfer to create it on.\n\nWhen reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.\n\nOnce entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.\n\n### Parameters\n\n*   A positive integer in cents representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount.\n    \n*   An arbitrary string which you can attach to a reversal object. This will be unset if you POST an empty value.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_application\\_feeboolean\n    \n\n### Returns\n\nReturns a transfer reversal object if the reversal succeeded. Raises [an error](#errors) if the transfer has already been reversed or an invalid transfer identifier was provided.\n\nPOST /v1/transfers/:id/reversals\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=400\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Update a reversal](https://docs.stripe.com/api/transfer_reversals/update)\n\nUpdates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata and description as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the reversal object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Retrieve a reversal](https://docs.stripe.com/api/transfer_reversals/retrieve)\n\nBy default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the reversal object.\n\nGET /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```",
  "title": "Transfer Reversals | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_lists/retrieve",
  "markdown": "# Retrieve a value list | Stripe API Reference\n\nRetrieves a `ValueList` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueList` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [List all value lists](https://docs.stripe.com/api/radar/value_lists/list)\n\nReturns a list of `ValueList` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   The alias used to reference the value list when writing rules.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` lists, starting after list `starting_after`. Each entry in the array is a separate `ValueList` object. If no more lists are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_lists\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_lists\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1680201894,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list](https://docs.stripe.com/api/radar/value_lists/delete)\n\nDeletes a `ValueList` object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueList` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_lists/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"deleted\": true}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a value list | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_lists/list",
  "markdown": "# List all value lists | Stripe API Reference\n\nReturns a list of `ValueList` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   The alias used to reference the value list when writing rules.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` lists, starting after list `starting_after`. Each entry in the array is a separate `ValueList` object. If no more lists are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_lists\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_lists\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1680201894,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list](https://docs.stripe.com/api/radar/value_lists/delete)\n\nDeletes a `ValueList` object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueList` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_lists/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"deleted\": true}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all value lists | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfer_reversals/create",
  "markdown": "# Create a transfer reversal | Stripe API Reference\n\nWhen you create a new reversal, you must specify a transfer to create it on.\n\nWhen reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.\n\nOnce entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.\n\n### Parameters\n\n*   A positive integer in cents representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount.\n    \n*   An arbitrary string which you can attach to a reversal object. This will be unset if you POST an empty value.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_application\\_feeboolean\n    \n\n### Returns\n\nReturns a transfer reversal object if the reversal succeeded. Raises [an error](#errors) if the transfer has already been reversed or an invalid transfer identifier was provided.\n\nPOST /v1/transfers/:id/reversals\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=400\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Update a reversal](https://docs.stripe.com/api/transfer_reversals/update)\n\nUpdates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata and description as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the reversal object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Retrieve a reversal](https://docs.stripe.com/api/transfer_reversals/retrieve)\n\nBy default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the reversal object.\n\nGET /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [List all reversals](https://docs.stripe.com/api/transfer_reversals/list)\n\nYou can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional reversals.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reversals, starting after reversal `starting_after`. Each entry in the array is a separate reversal object. If no more reversals are available, the resulting array will be empty. If you provide a non-existent transfer ID, this call raises [an error](#errors).\n\nGET /v1/transfers/:id/reversals\n\n```\ncurl -G https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",      \"object\": \"transfer_reversal\",      \"amount\": 400,      \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",      \"created\": 1678147568,      \"currency\": \"usd\",      \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",      \"metadata\": {},      \"source_refund\": null,      \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"    }    {...}    {...}  ],}\n```\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a transfer reversal | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_lists/delete",
  "markdown": "# Delete a value list | Stripe API Reference\n\nDeletes a `ValueList` object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueList` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_lists/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"deleted\": true}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a value list | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfer_reversals/update",
  "markdown": "# Update a reversal | Stripe API Reference\n\nUpdates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata and description as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the reversal object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Retrieve a reversal](https://docs.stripe.com/api/transfer_reversals/retrieve)\n\nBy default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the reversal object.\n\nGET /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [List all reversals](https://docs.stripe.com/api/transfer_reversals/list)\n\nYou can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional reversals.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reversals, starting after reversal `starting_after`. Each entry in the array is a separate reversal object. If no more reversals are available, the resulting array will be empty. If you provide a non-existent transfer ID, this call raises [an error](#errors).\n\nGET /v1/transfers/:id/reversals\n\n```\ncurl -G https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",      \"object\": \"transfer_reversal\",      \"amount\": 400,      \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",      \"created\": 1678147568,      \"currency\": \"usd\",      \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",      \"metadata\": {},      \"source_refund\": null,      \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"    }    {...}    {...}  ],}\n```\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a reversal | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_list_items",
  "markdown": "# Value List Items | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fradar%2Fvalue_list_items)\n\n## [The Value List Item object](https://docs.stripe.com/api/radar/value_list_items/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The value of the item.\n    \n*   The identifier of the value list this item belongs to.\n    \n\n### More attributes\n\nThe Value List Item object\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [Create a value list item](https://docs.stripe.com/api/radar/value_list_items/create)\n\nCreates a new `ValueListItem` object, which is added to the specified parent value list.\n\n### Parameters\n\n*   The value of the item (whose type must match the type of the parent value list).\n    \n*   The identifier of the value list which the created item will be added to.\n    \n\n### Returns\n\nReturns a `ValueListItem` object if creation succeeds.\n\nPOST /v1/radar/value\\_list\\_items\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj \\  -d value=\"1.2.3.4\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [Retrieve a value list item](https://docs.stripe.com/api/radar/value_list_items/retrieve)\n\nRetrieves a `ValueListItem` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueListItem` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_list\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [List all value list items](https://docs.stripe.com/api/radar/value_list_items/list)\n\nReturns a list of `ValueListItem` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Identifier for the parent value list this item belongs to.\n    \n*   Return items belonging to the parent list whose value matches the specified value (using an “is like” match).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` items, starting after item `starting_after`. Each entry in the array is a separate `ValueListItem` object. If no more items are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_list\\_items\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_list_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1681760074,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```",
  "title": "Value List Items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfer_reversals/retrieve",
  "markdown": "# Retrieve a reversal | Stripe API Reference\n\nBy default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the reversal object.\n\nGET /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [List all reversals](https://docs.stripe.com/api/transfer_reversals/list)\n\nYou can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional reversals.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reversals, starting after reversal `starting_after`. Each entry in the array is a separate reversal object. If no more reversals are available, the resulting array will be empty. If you provide a non-existent transfer ID, this call raises [an error](#errors).\n\nGET /v1/transfers/:id/reversals\n\n```\ncurl -G https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",      \"object\": \"transfer_reversal\",      \"amount\": 400,      \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",      \"created\": 1678147568,      \"currency\": \"usd\",      \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",      \"metadata\": {},      \"source_refund\": null,      \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"    }    {...}    {...}  ],}\n```\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a reversal | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/test_mode_fail",
  "markdown": "# Fail a testmode card | Stripe API Reference\n\n## [Fail a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_fail)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `failure`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"failed\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Return a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_return)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `returned`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"returned\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Ship a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_ship)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `shipped`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/ship\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"shipped\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Fail a testmode card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/test_mode_deliver",
  "markdown": "# Deliver a testmode card | Stripe API Reference\n\n## [Deliver a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `delivered`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/deliver\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"delivered\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Fail a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_fail)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `failure`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"failed\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Return a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_return)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `returned`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"returned\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Ship a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_ship)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `shipped`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/ship\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"shipped\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Deliver a testmode card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_list_items/create",
  "markdown": "# Create a value list item\n\nCreates a new `ValueListItem` object, which is added to the specified parent value list.\n\n### Parameters\n\n*   The value of the item (whose type must match the type of the parent value list).\n    \n*   The identifier of the value list which the created item will be added to.\n    \n\n### Returns\n\nReturns a `ValueListItem` object if creation succeeds.\n\nPOST /v1/radar/value\\_list\\_items\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj \\  -d value=\"1.2.3.4\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [Retrieve a value list item](https://docs.stripe.com/api/radar/value_list_items/retrieve)\n\nRetrieves a `ValueListItem` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueListItem` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_list\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [List all value list items](https://docs.stripe.com/api/radar/value_list_items/list)\n\nReturns a list of `ValueListItem` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Identifier for the parent value list this item belongs to.\n    \n*   Return items belonging to the parent list whose value matches the specified value (using an “is like” match).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` items, starting after item `starting_after`. Each entry in the array is a separate `ValueListItem` object. If no more items are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_list\\_items\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_list_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1681760074,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list item](https://docs.stripe.com/api/radar/value_list_items/delete)\n\nDeletes a `ValueListItem` object, removing it from its parent value list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueListItem` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_list\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"deleted\": true}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a value list item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfer_reversals/list",
  "markdown": "# List all reversals | Stripe API Reference\n\nYou can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional reversals.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reversals, starting after reversal `starting_after`. Each entry in the array is a separate reversal object. If no more reversals are available, the resulting array will be empty. If you provide a non-existent transfer ID, this call raises [an error](#errors).\n\nGET /v1/transfers/:id/reversals\n\n```\ncurl -G https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",      \"object\": \"transfer_reversal\",      \"amount\": 400,      \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",      \"created\": 1678147568,      \"currency\": \"usd\",      \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",      \"metadata\": {},      \"source_refund\": null,      \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"    }    {...}    {...}  ],}\n```\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all reversals | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_list_items/retrieve",
  "markdown": "# Retrieve a value list item\n\nRetrieves a `ValueListItem` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueListItem` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_list\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [List all value list items](https://docs.stripe.com/api/radar/value_list_items/list)\n\nReturns a list of `ValueListItem` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Identifier for the parent value list this item belongs to.\n    \n*   Return items belonging to the parent list whose value matches the specified value (using an “is like” match).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` items, starting after item `starting_after`. Each entry in the array is a separate `ValueListItem` object. If no more items are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_list\\_items\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_list_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1681760074,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list item](https://docs.stripe.com/api/radar/value_list_items/delete)\n\nDeletes a `ValueListItem` object, removing it from its parent value list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueListItem` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_list\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"deleted\": true}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a value list item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/test_mode_return",
  "markdown": "# Return a testmode card | Stripe API Reference\n\n## [Return a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_return)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `returned`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"returned\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Ship a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_ship)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `shipped`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/ship\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"shipped\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Return a testmode card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_list_items/list",
  "markdown": "# List all value list items\n\nReturns a list of `ValueListItem` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Identifier for the parent value list this item belongs to.\n    \n*   Return items belonging to the parent list whose value matches the specified value (using an “is like” match).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` items, starting after item `starting_after`. Each entry in the array is a separate `ValueListItem` object. If no more items are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_list\\_items\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_list_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1681760074,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list item](https://docs.stripe.com/api/radar/value_list_items/delete)\n\nDeletes a `ValueListItem` object, removing it from its parent value list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueListItem` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_list\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"deleted\": true}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all value list items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/test_mode_ship",
  "markdown": "# Ship a testmode card | Stripe API Reference\n\n## [Ship a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_ship)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `shipped`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/ship\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"shipped\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Ship a testmode card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_list_items/delete",
  "markdown": "# Delete a value list item\n\nDeletes a `ValueListItem` object, removing it from its parent value list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueListItem` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_list\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"deleted\": true}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a value list item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/transactions",
  "markdown": "# Transactions | Stripe API Reference\n\n## [The Transaction object](https://docs.stripe.com/api/issuing/transactions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    authorizationnullable stringExpandable\n    \n    The `Authorization` object that led to this transaction.\n    \n*   The card used to make this transaction.\n    \n*   #### \n    \n    cardholdernullable stringExpandable\n    \n    The cardholder to whom this transaction belongs.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The nature of the transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `capture`<br><br>Funds were captured by the acquirer. `amount` will be negative as funds are moving out of your balance. Not all captures will be linked to an authorization, as acquirers [can force capture in some cases](https://stripe.com/docs/issuing/purchases/transactions). |\n    | `refund`<br><br>An acquirer initiated a refund. This transaction might not be linked to an original capture, for example credits are original transactions. `amount` will be positive for refunds and negative for refund reversals (very rare). |\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_detailsnullable object\n    \n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    disputenullable stringExpandable\n    \n\n*   #### \n    \n    network\\_datanullable object\n    \n*   #### \n    \n    purchase\\_detailsnullable objectExpandable\n    \n*   #### \n    \n    tokennullable stringPreview featureExpandable\n    \n\n```\n{  \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",  \"object\": \"issuing.transaction\",  \"amount\": -100,  \"amount_details\": {    \"atm_fee\": null  },  \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",  \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",  \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",  \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",  \"created\": 1682065867,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -100,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"WWWW.BROWSEBUG.BIZ\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {},  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Update a transaction](https://docs.stripe.com/api/issuing/transactions/update)\n\nUpdates the specified Issuing `Transaction` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated Issuing `Transaction` object if a valid identifier was provided.\n\nPOST /v1/issuing/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/transactions/ipi_1MzFN1K8F4fqH0lBmFq8CjbU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",  \"object\": \"issuing.transaction\",  \"amount\": -100,  \"amount_details\": {    \"atm_fee\": null  },  \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",  \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",  \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",  \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",  \"created\": 1682065867,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -100,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"WWWW.BROWSEBUG.BIZ\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Retrieve a transaction](https://docs.stripe.com/api/issuing/transactions/retrieve)\n\nRetrieves an Issuing `Transaction` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Transaction` object if a valid identifier was provided.\n\nGET /v1/issuing/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/transactions/ipi_1MzFN1K8F4fqH0lBmFq8CjbU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",  \"object\": \"issuing.transaction\",  \"amount\": -100,  \"amount_details\": {    \"atm_fee\": null  },  \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",  \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",  \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",  \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",  \"created\": 1682065867,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -100,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"WWWW.BROWSEBUG.BIZ\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {},  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [List all transactions](https://docs.stripe.com/api/issuing/transactions/list)\n\nReturns a list of Issuing `Transaction` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return transactions that belong to the given card.\n    \n*   Only return transactions that belong to the given cardholder.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transactions, starting after transaction `starting_after`. Each entry in the array is a separate Issuing `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/issuing/transactions\n\n```\ncurl -G https://api.stripe.com/v1/issuing/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",      \"object\": \"issuing.transaction\",      \"amount\": -100,      \"amount_details\": {        \"atm_fee\": null      },      \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",      \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",      \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",      \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",      \"created\": 1682065867,      \"currency\": \"usd\",      \"dispute\": null,      \"livemode\": false,      \"merchant_amount\": -100,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"WWWW.BROWSEBUG.BIZ\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {},      \"type\": \"capture\",      \"wallet\": null    }    {...}    {...}  ],}\n```",
  "title": "Transactions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/update",
  "markdown": "# Update an authorization | Stripe API Reference\n\nUpdates the specified Issuing `Authorization` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated Issuing `Authorization` object if a valid identifier was provided.\n\nPOST /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Retrieve an authorization](https://docs.stripe.com/api/issuing/authorizations/retrieve)\n\nRetrieves an Issuing `Authorization` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Authorization` object if a valid identifier was provided.\n\nGET /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [List all authorizations](https://docs.stripe.com/api/issuing/authorizations/list)\n\nReturns a list of Issuing `Authorization` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return authorizations that belong to the given card.\n    \n*   Only return authorizations that belong to the given cardholder.\n    \n*   Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` authorizations, starting after authorization `starting_after`. Each entry in the array is a separate Issuing `Authorization` object. If no more authorizations are available, the resulting array will be empty.\n\nGET /v1/issuing/authorizations\n\n```\ncurl -G https://api.stripe.com/v1/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/authorizations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",      \"object\": \"issuing.authorization\",      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"authorization_method\": \"online\",      \"balance_transactions\": [],      \"card\": {        \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",        \"object\": \"issuing.card\",        \"brand\": \"Visa\",        \"cancellation_reason\": null,        \"cardholder\": {          \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",          \"object\": \"issuing.cardholder\",          \"billing\": {            \"address\": {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"line1\": \"123 Main Street\",              \"line2\": null,              \"postal_code\": \"94111\",              \"state\": \"CA\"            }          },          \"company\": null,          \"created\": 1626425119,          \"email\": \"jenny.rosen@example.com\",          \"individual\": null,          \"livemode\": false,          \"metadata\": {},          \"name\": \"Jenny Rosen\",          \"phone_number\": \"+18008675309\",          \"redaction\": null,          \"requirements\": {            \"disabled_reason\": null,            \"past_due\": []          },          \"spending_controls\": {            \"allowed_categories\": [],            \"blocked_categories\": [],            \"spending_limits\": [],            \"spending_limits_currency\": null          },          \"status\": \"active\",          \"type\": \"individual\"        },        \"created\": 1626425206,        \"currency\": \"usd\",        \"exp_month\": 6,        \"exp_year\": 2024,        \"last4\": \"8693\",        \"livemode\": false,        \"metadata\": {},        \"redaction\": null,        \"replaced_by\": null,        \"replacement_for\": null,        \"replacement_reason\": null,        \"shipping\": null,        \"spending_controls\": {          \"allowed_categories\": null,          \"blocked_categories\": null,          \"spending_limits\": [            {              \"amount\": 50000,              \"categories\": [],              \"interval\": \"daily\"            }          ],          \"spending_limits_currency\": \"usd\"        },        \"status\": \"active\",        \"type\": \"virtual\",        \"wallets\": {          \"apple_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"google_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"primary_account_identifier\": null        }      },      \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"created\": 1630657706,      \"currency\": \"usd\",      \"livemode\": false,      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"STRIPE\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {        \"order_id\": \"6735\"      },      \"network_data\": null,      \"pending_request\": null,      \"redaction\": null,      \"request_history\": [        {          \"amount\": 382,          \"amount_details\": {            \"atm_fee\": null          },          \"approved\": false,          \"created\": 1630657706,          \"currency\": \"usd\",          \"merchant_amount\": 382,          \"merchant_currency\": \"usd\",          \"reason\": \"verification_failed\",          \"reason_message\": null        }      ],      \"status\": \"closed\",      \"transactions\": [],      \"verification_data\": {        \"address_line1_check\": \"not_provided\",        \"address_postal_code_check\": \"not_provided\",        \"cvc_check\": \"mismatch\",        \"expiry_check\": \"match\"      },      \"wallet\": null    }    {...}    {...}  ],}\n```\n\n## [Approve an authorization](https://docs.stripe.com/api/issuing/authorizations/approve)\n\n\\[Deprecated\\] Approves a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   If the authorization’s `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://docs.stripe.com/api/issuing/authorizations/decline) to decline an authorization request).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an approved Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1MvSKeLkdIwHu7ixKr8rO1HV/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1MvSKeLkdIwHu7ixKr8rO1HV\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1MvSKeLkdIwHu7ixFANTvxgn\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Anytown\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"12345\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": null,      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"John Doe\",      \"phone_number\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1681162380,    \"currency\": \"usd\",    \"exp_month\": 8,    \"exp_year\": 2024,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {},    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": null,  \"created\": 1681162380,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\"  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": {    \"amount\": 700,    \"amount_details\": {      \"atm_fee\": null    },    \"currency\": \"usd\",    \"is_amount_controllable\": false,    \"merchant_amount\": 700,    \"merchant_currency\": \"usd\"  },  \"request_history\": [],  \"status\": \"pending\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Decline an authorization](https://docs.stripe.com/api/issuing/authorizations/decline)\n\n\\[Deprecated\\] Declines a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a declined Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/decline\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/decline \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
  "title": "Update an authorization | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/secret_management",
  "markdown": "# Secrets | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fsecret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [The Secret object](https://docs.stripe.com/api/apps/secret_store/secret_resource)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   If true, indicates that this secret has been deleted\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    The Unix timestamp for the expiry time of the secret, after which the secret deletes.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   A name for the secret that’s unique within the scope.\n    \n*   #### \n    \n    payloadnullable stringExpandable\n    \n    The plaintext secret value to be stored.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [List secrets](https://docs.stripe.com/api/apps/secret_store/list)\n\nList all secrets stored on the given scope.\n\n### Parameters\n\n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Secrets, starting after Secret `starting_after`. Each entry in the array is a separate Secret object. If no more Secrets are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/apps/secrets \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/apps/secrets\",  \"has_more\": false,  \"data\": [    {      \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",      \"object\": \"apps.secret\",      \"created\": 1680209063,      \"expires_at\": null,      \"livemode\": false,      \"name\": \"my-api-key\",      \"scope\": {        \"type\": \"account\"      }    }    {...}    {...}  ],}\n```\n\n## [Delete a Secret](https://docs.stripe.com/api/apps/secret_store/delete)\n\nDeletes a secret from the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns the deleted secret object.\n\nPOST /v1/apps/secrets/delete\n\n```\ncurl https://api.stripe.com/v1/apps/secrets/delete \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"deleted\": true}\n```\n\n## [Find a Secret](https://docs.stripe.com/api/apps/secret_store/find)\n\nFinds a secret in the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns a secret object.\n\nGET /v1/apps/secrets/find\n\n```\ncurl -G https://api.stripe.com/v1/apps/secrets/find \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```",
  "title": "Secrets | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/transactions/update",
  "markdown": "# Update a transaction | Stripe API Reference\n\nUpdates the specified Issuing `Transaction` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated Issuing `Transaction` object if a valid identifier was provided.\n\nPOST /v1/issuing/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/transactions/ipi_1MzFN1K8F4fqH0lBmFq8CjbU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",  \"object\": \"issuing.transaction\",  \"amount\": -100,  \"amount_details\": {    \"atm_fee\": null  },  \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",  \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",  \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",  \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",  \"created\": 1682065867,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -100,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"WWWW.BROWSEBUG.BIZ\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Retrieve a transaction](https://docs.stripe.com/api/issuing/transactions/retrieve)\n\nRetrieves an Issuing `Transaction` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Transaction` object if a valid identifier was provided.\n\nGET /v1/issuing/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/transactions/ipi_1MzFN1K8F4fqH0lBmFq8CjbU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",  \"object\": \"issuing.transaction\",  \"amount\": -100,  \"amount_details\": {    \"atm_fee\": null  },  \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",  \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",  \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",  \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",  \"created\": 1682065867,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -100,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"WWWW.BROWSEBUG.BIZ\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {},  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [List all transactions](https://docs.stripe.com/api/issuing/transactions/list)\n\nReturns a list of Issuing `Transaction` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return transactions that belong to the given card.\n    \n*   Only return transactions that belong to the given cardholder.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transactions, starting after transaction `starting_after`. Each entry in the array is a separate Issuing `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/issuing/transactions\n\n```\ncurl -G https://api.stripe.com/v1/issuing/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",      \"object\": \"issuing.transaction\",      \"amount\": -100,      \"amount_details\": {        \"atm_fee\": null      },      \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",      \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",      \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",      \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",      \"created\": 1682065867,      \"currency\": \"usd\",      \"dispute\": null,      \"livemode\": false,      \"merchant_amount\": -100,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"WWWW.BROWSEBUG.BIZ\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {},      \"type\": \"capture\",      \"wallet\": null    }    {...}    {...}  ],}\n```\n\n## [Create a test-mode force capture](https://docs.stripe.com/api/issuing/transactions/test_mode_create_force_capture)Test helper\n\nAllows the user to capture an arbitrary amount, also known as a forced capture.\n\n### Parameters\n\n*   The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this transaction.\n    \n*   The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_force\\_capture\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_force_capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Create a test-mode unlinked refund](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund)Test helper\n\nAllows the user to refund an arbitrary amount, also known as a unlinked refund.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this unlinked refund transaction.\n    \n*   The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_unlinked\\_refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```",
  "title": "Update a transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/transactions/test_mode_create_force_capture",
  "markdown": "# Create a test-mode force capture\n\n## [Create a test-mode force capture](https://docs.stripe.com/api/issuing/transactions/test_mode_create_force_capture)Test helper\n\nAllows the user to capture an arbitrary amount, also known as a forced capture.\n\n### Parameters\n\n*   The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this transaction.\n    \n*   The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_force\\_capture\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_force_capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Create a test-mode unlinked refund](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund)Test helper\n\nAllows the user to refund an arbitrary amount, also known as a unlinked refund.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this unlinked refund transaction.\n    \n*   The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_unlinked\\_refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Refund a test-mode transaction](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)Test helper\n\nRefund a test-mode Transaction.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nA `Transaction` object. This will be the `Transaction` object of type `capture` referenced in the request’s URL, not the new `Transaction` object of type `refund` that will be created as a side-effect of this API call. To find the newly created `Transaction` object, you can use the [Retrieve an authorization](https://stripe.com/docs/api/issuing/authorizations/retrieve) API, whose response will contain a list of related `Transaction` IDs, including the newly created `Transaction` of type `refund`. You can also use the [List all transactions](https://stripe.com/docs/api/issuing/transactions/list) API, or listen for the `issuing_transaction.created` webhook event to retrieve the newly created `Transaction` of type `refund`.\n\nPOST /v1/test\\_helpers/issuing/transactions/:id/refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/ipi_1GswaK2eZvKYlo2Co7wmNJhD/refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d refund_amount=1000\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a test-mode force capture | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/transactions/retrieve",
  "markdown": "# Retrieve a transaction | Stripe API Reference\n\nRetrieves an Issuing `Transaction` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Transaction` object if a valid identifier was provided.\n\nGET /v1/issuing/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/transactions/ipi_1MzFN1K8F4fqH0lBmFq8CjbU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",  \"object\": \"issuing.transaction\",  \"amount\": -100,  \"amount_details\": {    \"atm_fee\": null  },  \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",  \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",  \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",  \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",  \"created\": 1682065867,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -100,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"WWWW.BROWSEBUG.BIZ\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {},  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [List all transactions](https://docs.stripe.com/api/issuing/transactions/list)\n\nReturns a list of Issuing `Transaction` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return transactions that belong to the given card.\n    \n*   Only return transactions that belong to the given cardholder.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transactions, starting after transaction `starting_after`. Each entry in the array is a separate Issuing `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/issuing/transactions\n\n```\ncurl -G https://api.stripe.com/v1/issuing/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",      \"object\": \"issuing.transaction\",      \"amount\": -100,      \"amount_details\": {        \"atm_fee\": null      },      \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",      \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",      \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",      \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",      \"created\": 1682065867,      \"currency\": \"usd\",      \"dispute\": null,      \"livemode\": false,      \"merchant_amount\": -100,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"WWWW.BROWSEBUG.BIZ\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {},      \"type\": \"capture\",      \"wallet\": null    }    {...}    {...}  ],}\n```\n\n## [Create a test-mode force capture](https://docs.stripe.com/api/issuing/transactions/test_mode_create_force_capture)Test helper\n\nAllows the user to capture an arbitrary amount, also known as a forced capture.\n\n### Parameters\n\n*   The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this transaction.\n    \n*   The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_force\\_capture\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_force_capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Create a test-mode unlinked refund](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund)Test helper\n\nAllows the user to refund an arbitrary amount, also known as a unlinked refund.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this unlinked refund transaction.\n    \n*   The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_unlinked\\_refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Refund a test-mode transaction](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)Test helper\n\nRefund a test-mode Transaction.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nA `Transaction` object. This will be the `Transaction` object of type `capture` referenced in the request’s URL, not the new `Transaction` object of type `refund` that will be created as a side-effect of this API call. To find the newly created `Transaction` object, you can use the [Retrieve an authorization](https://stripe.com/docs/api/issuing/authorizations/retrieve) API, whose response will contain a list of related `Transaction` IDs, including the newly created `Transaction` of type `refund`. You can also use the [List all transactions](https://stripe.com/docs/api/issuing/transactions/list) API, or listen for the `issuing_transaction.created` webhook event to retrieve the newly created `Transaction` of type `refund`.\n\nPOST /v1/test\\_helpers/issuing/transactions/:id/refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/ipi_1GswaK2eZvKYlo2Co7wmNJhD/refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d refund_amount=1000\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```",
  "title": "Retrieve a transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/disputes",
  "markdown": "# Disputes | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fissuing%2Fdisputes)\n\n## [The Dispute object](https://docs.stripe.com/api/issuing/disputes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Disputed amount in the card’s currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).\n    \n*   #### \n    \n    balance\\_transactionsnullable array of objectsExpandable\n    \n    List of balance transactions associated with the dispute.\n    \n*   The currency the `transaction` was made in.\n    \n*   Evidence for the dispute. Evidence contains exactly two non-null fields: the `reason` for the dispute and the associated evidence field for the selected `reason`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Current status of the dispute.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `expired`<br><br>The dispute has expired. |\n    | `lost`<br><br>The dispute is lost. |\n    | `submitted`<br><br>The dispute has been submitted to Stripe. |\n    | `unsubmitted`<br><br>The dispute is pending submission to Stripe. |\n    | `won`<br><br>The dispute is won. |\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The transaction being disputed.\n    \n\n### More attributes\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Create a dispute](https://docs.stripe.com/api/issuing/disputes/create)\n\nCreates an Issuing `Dispute` object. Individual pieces of evidence within the `evidence` object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to [Dispute reasons and evidence](https://docs.stripe.com/issuing/purchases/disputes#dispute-reasons-and-evidence) for more details about evidence requirements.\n\n### Parameters\n\n*   Evidence provided for the dispute.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an Issuing `Dispute` object in `unsubmitted` status if creation succeeds.\n\nPOST /v1/issuing/disputes\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d transaction=ipi_1MykXhFtDWhhyHE1UjsZZ3xQ \\  -d \"evidence[reason]\"=fraudulent \\  -d \"evidence[fraudulent][explanation]\"=\"This transaction is fraudulent.\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Update a dispute](https://docs.stripe.com/api/issuing/disputes/update)\n\nUpdates the specified Issuing `Dispute` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the `evidence` object can be unset by passing in an empty string.\n\n### Parameters\n\n*   Evidence provided for the dispute.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated Issuing `Dispute` object if a valid identifier was provided.\n\nPOST /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"evidence[reason]\"=not_received \\  -d \"evidence[not_received][expected_at]\"=1590000000 \\  -d \"evidence[not_received][explanation]\"= \\  -d \"evidence[not_received][product_description]\"=\"Baseball cap\" \\  -d \"evidence[not_received][product_type]\"=merchandise\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"reason\": \"not_received\",    \"not_received\": {      \"expected_at\": 1590000000,      \"explanation\": \"\",      \"product_description\": \"Baseball cap\",      \"product_type\": \"merchandise\"    }  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Retrieve a dispute](https://docs.stripe.com/api/issuing/disputes/retrieve)\n\nRetrieves an Issuing `Dispute` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Dispute` object if a valid identifier was provided.\n\nGET /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```",
  "title": "Disputes | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/connection_tokens",
  "markdown": "# Connection Token | Stripe API Reference\n\nA Connection Token is used by the Stripe Terminal SDK to connect to a reader.\n\nRelated guide: [Fleet management](https://docs.stripe.com/terminal/fleet/locations)\n\n## [The Connection Token object](https://docs.stripe.com/api/terminal/connection_tokens/object)\n\n### Attributes\n\n*   The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).\n    \n*   Your application should pass this token to the Stripe Terminal SDK.\n    \n\n### More attributes\n\nThe Connection Token object\n\n```\n{  \"object\": \"terminal.connection_token\",  \"secret\": \"pst_test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LE81ZEdIalZ6NlVuMUdjM3c3WkRnN0ZYRHZxRURwTXo_00gNK2DWAV\"}\n```\n\n## [Create a Connection Token](https://docs.stripe.com/api/terminal/connection_tokens/create)\n\nTo connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.\n\n### Parameters\n\n*   The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).\n    \n\n### Returns\n\nReturns a Connection Token.\n\nPOST /v1/terminal/connection\\_tokens\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/connection_tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"terminal.connection_token\",  \"secret\": \"pst_test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LE81ZEdIalZ6NlVuMUdjM3c3WkRnN0ZYRHZxRURwTXo_00gNK2DWAV\"}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to