[
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/sepa-imports",
    "markdown": "# Import SEPA Data | Stripe DocumentationThe Stripe Docs logo\n\nWhen you migrate SEPA data from your previous processor, you can import the data in Stripe as the default payment method card (`pm_`) object or a deprecated source (`src_`) object. The [Payment Intents API](https://docs.stripe.com/payments/payment-intents) supports only `pm_` identifiers for all Stripe products, but your integration might favor one based on the following considerations.\n\n*   If you’re using a third-party subscription platform with Stripe, check with the platform or your developer to see if they prefer `pm_` or `src_` for SEPA transactions.\n*   If you have existing payment data in your Stripe account, try to match the type you’re already using:\n    *   `pm_`: Use the [Payment Methods API](https://docs.stripe.com/api/payment-methods) in conjunction with the Payment Intents API.\n    *   `src_`: If your existing integration already uses `src_` objects, you might benefit from importing your SEPA data to match it, and then [transitioning to the Payment Intents and Payment Methods APIs](https://docs.stripe.com/payments/payment-methods/transitioning).\n*   Each option has different requirements for notifications:\n    *   Payment methods issue automatic email notifications to customers when their SEPA payment method is debited, so imported data requires an email address for each payment account. You can disable automatic email notifications after migration.\n    *   Sources don’t require email addresses and you can choose to manage communication manually.\n\n## Importing the mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the context of SEPA, mandates refer to the original authorized agreement that the customer and the business have already established.\n\nIn Stripe, _creating a new mandate object_ doesn’t mean creating a new mandate from scratch. On import, we create a new _mandate object_ that:\n\n*   Uses the same `mandate_reference` as your original agreement.\n*   Represents the same agreement the customer initially authorized for the first direct debit instruction.\n\nNo new information is required from the customer. The original agreement stays the same.\n\n### Creditor ID![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA SEPA Creditor Identifier (Creditor ID) is an ID associated with each SEPA Direct Debit payment that identifies the company requesting the payment. While companies might have multiple creditor identifiers, each creditor identifier is unique and allows your customers to identify the debits on their account.\n\nBy default, your Stripe account uses a Stripe Creditor ID when collecting SEPA Direct Debit Payments. **Stripe Payments** appears on bank statements alongside your configurable [Stripe statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). We recommend that you:\n\n*   Configure a recognizable statement descriptor to make sure customers recognize payments and to reduce the risk of disputes.\n*   Use your own Creditor ID to reduce dispute rates and improve your customer’s recognition of their payment to you.\n*   If you’re using the Stripe Creditor ID, use Stripe Checkout to collect mandates from your customers for SEPA Direct Debits.\n\nYou can configure your own Creditor ID in the [Payment Method Settings](https://dashboard.stripe.com/settings/payment_methods) page. When using your own Creditor ID, your name appears on statements instead of Stripe’s.\n\n#### Example SEPA Bank Mandate if using Stripe’s Creditor ID![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`From Account Account name: CURRENT-ACCOUNT BIC: BANBICKIEXXXXX IBAN: IE11BANK11111111111111  Originator Details Originator name: Stripe Payments Europe Ltd Creditor Identifier: BE111111111111 The Creditor Identifier is a unique identifier used by the company to process collections.  UMR: UMR123 PSP The Unique Mandate Reference (UMR) is specific to the mandate you have signed and identifies each direct debit mandate.  Additional details Status: Active`\n\n#### Example SEPA Bank Mandate if using your own Creditor ID![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`From Account Account name: CURRENT-ACCOUNT BIC: BANBICKIEXXXXX IBAN: IE11BANK11111111111111  Originator Details Originator name: Merchant Creditor ID Name Creditor Identifier: BE222222222222 The Creditor Identifier is a unique identifier used by the company to process collections.  UMR: UMR123 PSP The Unique Mandate Reference (UMR) is specific to the mandate you have signed and identifies each direct debit mandate.  Additional details Status: Active`\n\n## Migration notification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInform your customers about the migration before it happens. They don’t need to give permission again or set up a new SEPA Direct Debit mandate. The approval you already have is sufficient.\n\n### General guidelines for communication:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPoint out any changes such as:\n\n*   Creditor ID if you opt for Stripe’s Creditor ID\n*   Creditor name if you opt for Stripe’s Creditor ID\n*   Recipient bank IBAN\n\nMake sure the communication reassures customers their current mandates are valid without requiring any action from them, unless they choose to cancel the mandate.\n\n## SEPA debit notification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSEPA rules state that you must [notify your customers](https://docs.stripe.com/payments/sepa-debit#debit-notification-emails) when debiting their SEPA payment method.\n\nYou can choose to have Stripe automatically send this email notification, or you can send it manually.\n\nTo have Stripe send the notification, make sure you include the email field in the data when importing SEPA. The email field is always a required field as part of the SEPA Payment method (`pm_`) import.\n\n## SEPA file guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   A processor can provide a number of different fields.\n*   We advise your processor to provide a full export of all customer and payment method data to Stripe.\n*   Stripe can filter out any unnecessary fields from the previous processor’s data as needed.\n*   Stripe can merge multiple received files if either the old customer ID or the old source ID is present in both files.\n\n### File formatting requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExport data files must meet the following data standards for us to proceed with an import:\n\n*   The file must be in CSV format.\n*   The file must be UTF-8 encoded.\n*   Delimit rows by a single newline character `\\n` (not `\\r\\n`).\n*   Delimit columns by a comma (`,`).\n*   You must wrap all fields containing commas in double quotes (`\"`). We recommend wrapping all fields in double quotes.\n*   Leave empty fields entirely empty (no character in between delimiters). You must _not_ denote a missing field with `NULL`, `N/A`, or any other value.\n*   Escape any double quotes that are part of the content with another double quote per the CSV RFC. Example: `\"``William` `\"\"``Bard of Avon``\"\"` `Shakespeare``\"`\n*   Fields can’t contain newline characters (`\\r` or `\\n`) within a field. An example of what to avoid would be: `101 1st Ave\\nApt 1`.\n*   All rows must have the same number of columns.\n*   Columns support any order.\n*   You must encrypt sensitive data files with our [PGP key](https://docs.stripe.com/get-started/data-migrations/pan-import#migration-pgp-key) before submitting them through SFTP.\n\n### SEPA data Fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n* * *\n\n| Field | Required | Additional info |\n| --- | --- | --- |\n| Old customer ID | Required | We create a customer ID for each unique old customer ID provided. |\n| Name | Required | We must include the name of the person on the mandate. |\n| IBAN | Required | Follow [Stripe’s valid IBAN structure](https://stripe.com/ie/resources/more/iban). |\n| Mandate reference | Required | Existing mandate reference ID |\n| Email | Required\\* | \\*SEPA requires you to email a notification to the customer upon debiting their SEPA payment method. Stripe can send this email notification automatically or you can manually send it. This field is mandatory if:<br><br>*   You request Stripe to send the customer email notification automatically.<br>*   You’re importing SEPA records as payment methods. |\n| Address line 1 | Required\\* | \\*Mandatory for non EU IBANs |\n| Country | Required\\* | \\*Mandatory for non EU IBANs. This must be in the form of the ISO 2 letter country code. |\n| Postal | Optional | Additional metadata |\n| Country | Optional | Additional metadata |\n| Phone | Optional | Additional metadata |\n| Address line 2 | Optional | Additional metadata |\n| State | Optional | Additional metadata |\n| Stripe customer ID | Optional | Additional metadata |\n| Old source ID | Optional | Additional metadata |\n| Customer/SEPA Metadata | Optional | Any additional metadata |",
    "title": "Import SEPA Data | Stripe Documentation",
    "description": "Covers the fundamental elements of a SEPA import migration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/pads-imports",
    "markdown": "# Import PACs/ACSS Data | Stripe DocumentationThe Stripe Docs logo\n\n## Mandate requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Payments Canada Rules for pre-authorized debits](https://www.payments.ca/sites/default/files/h1eng.pdf) (PADs) require businesses to present a mandate agreement with clear and specific terms for one-time or recurring debits prior to debiting a customer’s bank account. After you collect customer agreement, this [mandate](https://docs.stripe.com/payments/acss-debit#mandates) gives your business authorization to debit the customer’s bank account on a specified schedule. The mandate includes the customer’s institution number, transit number, account number, name and email.\n\nStripe can only import the PADs that you confirm you hold the mandates for. After determining mandate status for all, some, or none of the bank accounts, inform us so we can instruct you which steps to take next.\n\n## Debiting PADs/ACSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn our [intake form](https://support.stripe.com/contact/email?topic=migrations), choose how you’ll debit the PADs:\n\n*   **Only for automatic** use with invoices, subscriptions, or recurring payment schedules.\n*   **Only for on-demand** customer-initiated payments.\n    \n    #### Note\n    \n    You can’t debit these PADs for automatic use with invoices, subscriptions, or recurring payment schedules.\n    \n*   **For both** on-demand customer-initiated payments and automatic use with invoices, subscriptions, or recurring payment schedules.\n\n## PADs/ACSS file guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   A processor can provide a number of different fields.\n*   We advise your processor to provide a full export of all customer and payment method data to Stripe.\n*   Stripe can filter out any unnecessary fields from the previous processor’s data as needed.\n*   Stripe can merge multiple received files if either the old customer ID or the old source ID is present in both files.\n*   Stripe can only import PADs that are pre-authorized because verification is a requirement of ACSS scheme rules.\n\n### File formatting requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExport data files must meet the following data standards for us to proceed with an import:\n\n*   The file must be in CSV format.\n*   The file must be UTF-8 encoded.\n*   Delimit rows by a single newline character `\\n` (not `\\r\\n`).\n*   Delimit columns by `,`\n*   You must wrap all fields containing commas in double quotes `\"`. We recommend wrapping all fields in double quotes.\n*   Leave empty fields entirely empty (no character in between delimiters). You must _not_ denote a missing field with `NULL`, `N/A`, or any other value.\n*   Escape any double quotes that are part of the content with another double quote per the CSV RFC. For example: `\"``William` `\"\"``Bard of Avon``\"\"` `Shakespeare``\"`\n*   Fields can’t contain newline characters (`\\r` or `\\n`) within a field. Example of what to avoid: `101 1st Ave\\nApt 1`\n*   All rows must have the same number of columns.\n*   Columns support any order.\n*   You must encrypt sensitive data files with our [PGP key](https://docs.stripe.com/get-started/data-migrations/pan-import#migration-pgp-key) before submitting through SFTP.\n\n## PADs/ACSS data fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n* * *\n\n| Field | Required | Additional info |\n| --- | --- | --- |\n| Old customer ID | Required | We create a customer ID for each unique old customer ID provided. |\n| Institution Number | Required | The 3-digit institution number identifies your bank. |\n| Transit Number | Required | The transit number (5 digits) identifies the branch where you opened your account. |\n| Account Number | Required | The account number (11 digits) identifies your individual account. |\n| Email | Required/Optional1 | Additional metadata (Optional if full address is provided instead). |\n| Address line 1 | Required/Optional1 | Additional metadata (Optional if email is provided instead). |\n| Address line 2 | Required/Optional1 | Additional metadata (Optional if email is provided instead). |\n| City | Required/Optional1 | Additional metadata (Optional if email is provided instead). |\n| State | Required/Optional1 | Additional metadata (Optional if email is provided instead). |\n| Postal | Required/Optional1 | Additional metadata (Optional if email is provided instead). |\n| Country | Required/Optional1 | Additional metadata (Optional if email is provided instead). |\n| Phone | Optional | Additional metadata |\n| Name | Optional | Additional metadata |\n| Stripe customer ID | Optional | Additional metadata |\n| Old source ID | Optional | Additional metadata |\n| Description | Optional | Additional metadata |\n| Customer metadata | Optional | Any additional metadata |\n\n1 Either the customer email address or their full address must be present within the data file to import PADs/ACSS. If you provide neither an email address nor a full address, the PAD fails to import.",
    "title": "Import PACs/ACSS Data | Stripe Documentation",
    "description": "Learn how to migrate PADs/ACSS data, including mandate requirements, debiting, file formatting, and data fields.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit",
    "markdown": "# Migrate subscriptions to Stripe Billing using toolkit\n\n## Learn how to migrate your existing subscriptions to Stripe using the toolkit.\n\nUse the [Billing migration toolkit](https://dashboard.stripe.com/billing/migrations) to migrate your existing [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") from a third-party system, home-grown system, or an existing Stripe account to Stripe Billing.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  If you haven’t already, review the [migration stages](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions#migration-stages).\n2.  [Set up a Stripe Billing integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions) before you begin migration. This is a one-time setup that you don’t need to repeat for future migrations.\n3.  [Request a PAN data import](https://docs.stripe.com/get-started/data-migrations/pan-import) from your current processor. This step is only required if you’re migrating to Stripe from another processor. If you’re migrating from Stripe to Stripe, you can skip this prerequisite.\n4.  If you’re migrating from a third-party or home-grown system, carefully time the cancellation of your existing subscriptions and the creation of new ones in Stripe. To avoid missing a billing period, create the new subscriptions in Stripe first, before canceling the old subscriptions. To avoid double billing, cancel subscriptions in your old system before the subscriptions are set to charge. For subscriptions with upcoming billing dates close to migration, schedule them to start after the cycle so the final bill is in the old system.\n\n[](#open-billing-toolkit)\n\nSelect the test-mode toggle on the top right corner if you want to run a test migration first.\n\n1.  Navigate to [Dashboard](https://dashboard.stripe.com/billing) > [Subscriptions](https://dashboard.stripe.com/test/subscriptions) > [**Migrations**](https://dashboard.stripe.com/test/billing/migrations).\n    \n    Alternatively, you can click the overflow menu () next to **\\+ Create subscription**, and select [Migrate subscriptions](https://dashboard.stripe.com/settings/billing/migrations).\n    \n2.  To start your migration, click **Let’s get started**.\n    \n\n[](#download-csv)\n\nFirst, export your existing subscriptions by matching the exported data to a migration-compatible CSV file. You can create your own CSV file, or download any of the following CSV templates provided by Stripe:\n\n*   [Basic](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#basic)\n*   [Multi-price items](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#multi-price)\n*   [Ad-hoc pricing](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#ad-hoc)\n\nYou can also find examples of CSV files for common migration use cases in the [Toolkit CSV reference](https://docs.stripe.com/billing/subscriptions/toolkit-reference#migration-use-cases).\n\n1.  Click **Download CSV template**.\n    \n2.  Choose a CSV template (basic, multi-price items, or ad-hoc pricing) based on your billing use case.\n    \n    ### Basic CSV ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n    \n    This example shows a migration for common subscription use cases like quantity, taxes, billing anchor, discounts, trials, and backdating.\n    \n    ### Specify the following fields for a Basic CSV file:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n    \n    ### Multi-price items CSV ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n    \n    This example shows a migration that has multiple products per subscription.\n    \n    ### Specify the following fields for a Multi-price items CSV file:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n    \n    ### Ad-hoc prices CSV ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n    \n    This example shows handling a subscription migration using [ad-hoc pricing](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data) for existing products.\n    \n    ### Specify the following fields for an Ad-hoc pricing CSV file:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n    \n3.  In the CSV file, specify the details of the subscriptions you want to export.\n    \n    #### For Stripe-to-Stripe migrations\n    \n    If you’re migrating subscriptions within Stripe accounts, refer to the [CSV example](https://docs.stripe.com/billing/subscriptions/toolkit-reference#within-Stripe-accounts) before you specify and upload a CSV file.\n    \n\n[](#upload-csv)\n\nClick **Upload CSV**. The CSV file size limit is 120 MB.\n\nStripe validates the file to verify that the uploaded subscriptions are in the required CSV format. This process might take up to a few hours, depending on the size of the file. If the file is valid, you can proceed to the next step in the migration.\n\n### Resolve validation errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have any errors in your uploaded file, the toolkit displays a failure summary. To resolve the errors:\n\n1.  Click **Download file to review errors**.\n    \n2.  Review the `processing_error` column to see the errors.\n    \n3.  Correct all the errors. Common errors include:\n    \n    | Error | Troubleshooting |\n    | --- | --- |\n    | Invalid dates | Make sure all the dates are in epoch or Unix timestamp format. |\n    | Incorrect `start_date` range | Make sure the `start_date` for each subscription is at least 24 hours in the future. |\n    | Missing data | Make sure every record contains the required fields. |\n    | Incompatible price and tax | Make sure prices for specified tax rates have the same `tax_behavior` (inclusive versus exclusive). |\n    \n4.  Click **Upload revised file** to re-upload the corrected CSV (the CSV file size limit is 120 mb).\n    \n5.  Wait for re-validation to see the latest validation status.\n    \n\n[](#review-subscriptions)\n\nAfter Stripe validates your CSV file, review the summary of your uploaded subscriptions for any discrepancies:\n\n1.  Cross-check the summary for the correct:\n    \n    *   Date of upload\n    *   Uploaded file name\n    *   Number of subscriptions\n    *   Number of customers\n    *   First subscription go-live date\n2.  If everything is valid, click **Start migration**.\n    \n    If you see errors, click **Cancel migration** and restart the migration from [Download a CSV file](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#download-csv).\n    \n\n[](#track-migration)\n\nAfter you review your uploaded subscriptions, track the progress of your migration:\n\n### Migration in progress![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour subscriptions are queued to schedule on the specified start date. This process can take a few minutes to a few hours, depending on the size of the file. For example, the validation and migration for 100,000 subscriptions takes approximately 30 minutes to complete.\n\nThe Billing migration toolkit uses the [Subscription schedule](https://docs.stripe.com/api/subscription_schedules) to migrate your subscriptions. This allows your subscriptions to remain in a scheduled state for 24 hours before going live. In test mode, the buffer time is reduced to 1 hour for faster evaluation and testing.\n\n### Scheduled subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter migration, your subscriptions remain in a scheduled state for 24 hours before going live. You have 10 hours to [cancel these scheduled subscriptions](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#cancel-migration) using the toolkit.\n\nCurrently, you can’t update scheduled subscriptions using the toolkit. If you want to update your scheduled subscriptions, you can either call the [update](https://docs.stripe.com/api/subscription_schedules/update) endpoint, or update each subscription (one-by-one) in the [Subscriptions](https://dashboard.stripe.com/subscriptions) Dashboard.\n\nCustomers can’t cancel scheduled subscriptions from their customer portal. They can only cancel live subscriptions.\n\n### Go live with subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter 24 hours, your scheduled subscriptions go live and charge customers on their applicable start dates. You can view all your live subscriptions in the [Subscriptions](https://dashboard.stripe.com/subscriptions) Dashboard.\n\nAfter the migration goes live, we recommend you monitor your subscriptions starting from the first payment. Make sure the charge dates and amounts for the migrated subscriptions match the specified [start\\_date](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-start_date).\n\nCustomers can cancel live subscriptions from their customer portal.\n\n[](#view-migrations)\n\nTo view all of your migrations:\n\n1.  Select the migration you want to review in [**Migrations**](https://dashboard.stripe.com/billing/migrations).\n    \n2.  To open a migration, click **View** in the dropdown menu.\n    \n    You can track the following fields:\n    \n    *   Upload date\n    *   File name\n    *   Stripe billing migration id\n    *   Number of subscriptions\n    *   Migration status\n\n[](#cancel-migration)\n\nIf you identify any problems with the scheduled subscriptions, you can roll back the migration and revert the scheduled subscriptions. The Dashboard displays a timestamp to indicate if you can still cancel the migration using the toolkit. You have 10 hours from when you scheduled the subscriptions to cancel them. After 10 hours, the cancel option is disabled in the toolkit.\n\n1.  Find the migration you want to cancel in your [**Migrations**](https://dashboard.stripe.com/billing/migrations).\n2.  Click **Cancel migration** in the dropdown menu.\n\n### Cancel after 10 hours![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo cancel the migration after 10 hours, you can either call the [cancel](https://docs.stripe.com/api/subscription_schedules/cancel) endpoint, or individually cancel each subscription (one-by-one) in the [**Subscriptions**](https://dashboard.stripe.com/subscriptions) Dashboard.\n\n[](#run-multiple-migrations)\n\nYou can run as many simultaneous subscription migrations as you want. For large migrations, divide the subscriptions into batches and start with a small batch. This can help you quickly identify any validation issues and save validation time.\n\nTo start a new migration:\n\n1.  Click **Start new migration**.\n    \n2.  Restart the migration process from [Download a CSV file](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#download-csv).\n    \n    You can also find examples of CSV files for common migration use cases in the [Toolkit CSV reference](https://docs.stripe.com/billing/subscriptions/toolkit-reference#migration-use-cases).",
    "title": "Migrate subscriptions to Stripe Billing using toolkit | Stripe Documentation",
    "description": "Learn how to migrate your existing subscriptions to Stripe using the toolkit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/ach-imports",
    "markdown": "# Import ACH data | Stripe DocumentationThe Stripe Docs logo\n\nWhen migrating ACH data from your previous processor, we can import the ACH records into Stripe using the default bank account (`ba_`) object or a payment method (`pm_`) object representation.\n\nBefore the first charge with ACH direct debit, a business must get permission from the customer to debit their bank account by presenting a mandate to the customer. To import ACH records as `pm_` objects, we need your confirmation that you hold mandates for the bank accounts you’re importing. If you’re unsure, consult with your previous payment service provider. If you don’t hold the mandates, we import the ACH records with the `ba_` object representation.\n\nAfter determining mandate status for all, some, or none of the bank accounts, inform us. Based on your response, we’ll then provide instructions on the next steps you need to take.\n\n## ACH validation status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must confirm the WEB debit accounts’ validation status by choosing one of the options below:\n\n*   **All** WEB debit accounts were **debited** before the Nacha WEB Debit Account Validation Rule took effect on March 19, 2022.\n*   **All** WEB debit accounts have been **validated** according to Nacha’s Web Debit Account Validation rule by your previous payment service provider.\n*   **Some** WEB debit accounts were debited before Nacha’s WEB Debit Account Validation Rule became effective on March 19, 2022, or complied with the rule through your previous provider. You must provide a list of validated and non-validated records.\n*   **None** of the WEB debit accounts were processed before the effective date of the Nacha WEB Debit Account Validation Rule on March 19, 2022, nor successfully validated by your previous provider. Stripe must validate these accounts. (An instant verification fee applies per bank account validation.)\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![Shows the ACH record import process ](https://b.stripecdn.com/docs-statics-srv/assets/dm-ach.6b9d5e4b6efa67df8e0fa76331a1e904.jpg)\n\n## ACH emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn our [intake form](https://support.stripe.com/contact/email?topic=migrations), choose whether to import the mandates as bank account (`ba_`) or payment method (`pm_`) objects.\n\n*   If you choose bank accounts, we don’t notify your customers about the migration.\n*   If you choose payment methods and provide customer emails, we’ll automatically send your customers an email to confirm the mandate in accordance with Nacha requirements after the import. Your customers don’t need to do anything after receiving the emails.\n\n## ACH file guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   A processor can provide a number of different fields.\n*   We advise your processor to provide a full export of all customer and payment method data to Stripe.\n*   Stripe can filter out any unnecessary fields from the previous processor’s data as needed.\n*   Stripe can merge multiple received files if either the old customer ID or the old source ID is present in both files.\n\n### File formatting requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExport data files must meet the following data standards for us to proceed with an import:\n\n*   The file must be in CSV format.\n*   The file must be UTF-8 encoded.\n*   Delimit rows by a single newline character `\\n` (not `\\r\\n`).\n*   Delimit columns by `,`\n*   You must wrap all fields containing commas in double quotes `\"`. We recommend wrapping all fields in double quotes.\n*   Leave empty fields entirely empty (no character in between delimiters). You must _not_ denote a missing field with `NULL`, `N/A`, or any other value.\n*   Escape any double quotes that are part of the content with another double quote per the CSV RFC. For example: `\"``William` `\"\"``Bard of Avon``\"\"` `Shakespeare``\"`\n*   Fields can’t contain newline characters (`\\r` or `\\n`) within a field. Example of what to avoid: `101 1st Ave\\nApt 1`\n*   All rows must have the same number of columns.\n*   Columns support any order.\n*   You must encrypt sensitive data files with our [PGP key](https://docs.stripe.com/get-started/data-migrations/pan-import#migration-pgp-key) before submitting through SFTP.\n\n## ACH data fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | Required | Additional info |\n| --- | --- | --- |\n| Old customer ID | Required | We create a customer ID for each unique old customer ID provided. |\n| Routing number | Required | Must be 9 digits in length and include leading zeros. |\n| Account number | Required | Most bank account numbers have between 8 and 12 digits, though they can range from 5 to 17 digits. |\n| Account holder type | Required | Specifies `individual` or `company` as the type of business. |\n| Account type | Required | Specifies a `checking` or `savings` account. Unspecified account are imported as `checking`. |\n| Account name | Required | First and last name of account holder or company name. |\n| Email | Optional\\* | Additional metadata \\*If importing ACH records as payment methods and providing customer emails, we’ll automatically send your customers an email to confirm the mandate in accordance with Nacha requirements after the import. Your customers don’t need to do anything after receiving the emails. |\n| City | Optional | Additional metadata |\n| Postal | Optional | Additional metadata |\n| Country | Optional | Provide in ISO 2 letter country code format. |\n| Phone | Optional | Additional metadata |\n| Address line 1 | Optional | Additional metadata |\n| State | Optional | Additional metadata |\n| Stripe customer ID | Optional | Additional metadata |\n| Old source ID | Optional | Additional metadata |\n| Customer/ACH Metadata | Optional | Any additional metadata |",
    "title": "Import ACH data | Stripe Documentation",
    "description": "Review the fundamental elements required for migrating ACH data, including validation, ACH emails, formatting requirements, and data fields.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/charges",
    "markdown": "# Charges | Stripe API Reference\n\n## [The Charge object](https://docs.stripe.com/api/charges/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n    ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).\n    \n*   Billing information associated with the payment method at the time of the transaction.\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the customer this charge is for if one exists.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Whether the charge has been disputed.\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n    ID of the invoice this charge is for if one exists.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the PaymentIntent associated with this charge, if one exists.\n    \n*   #### \n    \n    payment\\_method\\_detailsnullable object\n    \n    Details about the payment method at the time of the transaction.\n    \n*   #### \n    \n    receipt\\_emailnullable string\n    \n    This is the email address that the receipt for this charge was sent to.\n    \n*   Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.\n    \n*   Shipping information for the charge.\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixnullable string\n    \n    Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n*   The status of the payment is either `succeeded`, `pending`, or `failed`.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_feenullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    calculated\\_statement\\_descriptornullable string\n    \n\n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_codenullable string\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n*   #### \n    \n    fraud\\_detailsnullable object\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    payment\\_methodnullable string\n    \n*   #### \n    \n    radar\\_optionsnullable object\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n*   #### \n    \n    receipt\\_urlnullable string\n    \n*   #### \n    \n    refundsnullable objectExpandable\n    \n*   #### \n    \n    reviewnullable stringExpandable\n    \n*   #### \n    \n    source\\_transfernullable stringExpandableConnect only\n    \n*   #### \n    \n    transfernullable stringExpandableConnect only\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    transfer\\_groupnullable stringConnect only\n    \n\n```\n{  \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",  \"object\": \"charge\",  \"amount\": 1099,  \"amount_captured\": 1099,  \"amount_refunded\": 0,  \"application\": null,  \"application_fee\": null,  \"application_fee_amount\": null,  \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"calculated_statement_descriptor\": \"Stripe\",  \"captured\": true,  \"created\": 1679090539,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"disputed\": false,  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"fraud_details\": {},  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"outcome\": {    \"network_status\": \"approved_by_network\",    \"reason\": null,    \"risk_level\": \"normal\",    \"risk_score\": 32,    \"seller_message\": \"Payment complete.\",    \"type\": \"authorized\"  },  \"paid\": true,  \"payment_intent\": null,  \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",  \"payment_method_details\": {    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"exp_month\": 3,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"installments\": null,      \"last4\": \"4242\",      \"mandate\": null,      \"network\": \"visa\",      \"three_d_secure\": null,      \"wallet\": null    },    \"type\": \"card\"  },  \"receipt_email\": null,  \"receipt_number\": null,  \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KOvG06AGMgZfBXyr1aw6LBa9vaaSRWU96d8qBwz9z2J_CObiV_H2-e8RezSK_sw0KISesp4czsOUlVKY\",  \"refunded\": false,  \"review\": null,  \"shipping\": null,  \"source_transfer\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Create a charge](https://docs.stripe.com/api/charges/create)Deprecated\n\nThis method is no longer recommended—use the [Payment Intents API](https://docs.stripe.com/api/payment_intents) to initiate a new payment instead. Confirmation of the PaymentIntent creates the `Charge` object used to request payment.\n\n### Parameters\n\n*   Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   The ID of an existing customer that will be charged in this request.\n    \n*   An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The email address to which this charge’s [receipt](https://docs.stripe.com/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://docs.stripe.com/api/customers/object), the email address specified here will override the customer’s email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Shipping information for the charge. Helps prevent fraud on charges for physical goods.\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns the charge object if the charge succeeded. This call raises [an error](#errors) if something goes wrong. A common source of error is an invalid or expired card, or a valid card with insufficient available balance.\n\n```\ncurl https://api.stripe.com/v1/charges \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1099 \\  -d currency=usd \\  -d source=tok_visa\n```\n\n```\n{  \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",  \"object\": \"charge\",  \"amount\": 1099,  \"amount_captured\": 1099,  \"amount_refunded\": 0,  \"application\": null,  \"application_fee\": null,  \"application_fee_amount\": null,  \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"calculated_statement_descriptor\": \"Stripe\",  \"captured\": true,  \"created\": 1679090539,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"disputed\": false,  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"fraud_details\": {},  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"outcome\": {    \"network_status\": \"approved_by_network\",    \"reason\": null,    \"risk_level\": \"normal\",    \"risk_score\": 32,    \"seller_message\": \"Payment complete.\",    \"type\": \"authorized\"  },  \"paid\": true,  \"payment_intent\": null,  \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",  \"payment_method_details\": {    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"exp_month\": 3,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"installments\": null,      \"last4\": \"4242\",      \"mandate\": null,      \"network\": \"visa\",      \"three_d_secure\": null,      \"wallet\": null    },    \"type\": \"card\"  },  \"receipt_email\": null,  \"receipt_number\": null,  \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KOvG06AGMgZfBXyr1aw6LBa9vaaSRWU96d8qBwz9z2J_CObiV_H2-e8RezSK_sw0KISesp4czsOUlVKY\",  \"refunded\": false,  \"review\": null,  \"shipping\": null,  \"source_transfer\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Update a charge](https://docs.stripe.com/api/charges/update)\n\nUpdates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.\n    \n*   An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.\n    \n*   Shipping information for the charge. Helps prevent fraud on charges for physical goods.\n    \n\n### More parameters\n\n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns the charge object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3MmlLrLkdIwHu7ix0snN0B15 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[shipping]\"=express\n```\n\n```\n{  \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",  \"object\": \"charge\",  \"amount\": 1099,  \"amount_captured\": 1099,  \"amount_refunded\": 0,  \"application\": null,  \"application_fee\": null,  \"application_fee_amount\": null,  \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"calculated_statement_descriptor\": \"Stripe\",  \"captured\": true,  \"created\": 1679090539,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"disputed\": false,  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"fraud_details\": {},  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"shipping\": \"express\"  },  \"on_behalf_of\": null,  \"outcome\": {    \"network_status\": \"approved_by_network\",    \"reason\": null,    \"risk_level\": \"normal\",    \"risk_score\": 32,    \"seller_message\": \"Payment complete.\",    \"type\": \"authorized\"  },  \"paid\": true,  \"payment_intent\": null,  \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",  \"payment_method_details\": {    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"exp_month\": 3,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"installments\": null,      \"last4\": \"4242\",      \"mandate\": null,      \"network\": \"visa\",      \"network_token\": {        \"used\": false      },      \"three_d_secure\": null,      \"wallet\": null    },    \"type\": \"card\"  },  \"receipt_email\": null,  \"receipt_number\": null,  \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KPDLl6UGMgawkab5iK86LBYtkq0XrhiQf1RsA2ubesH4GHiixEU8_1-Wp7h4oQEdfSUGiZpJwtQHBErT\",  \"refunded\": false,  \"refunds\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/charges/ch_3MmlLrLkdIwHu7ix0snN0B15/refunds\"  },  \"review\": null,  \"shipping\": null,  \"source_transfer\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Retrieve a charge](https://docs.stripe.com/api/charges/retrieve)\n\nRetrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a charge if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3MmlLrLkdIwHu7ix0snN0B15 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",  \"object\": \"charge\",  \"amount\": 1099,  \"amount_captured\": 1099,  \"amount_refunded\": 0,  \"application\": null,  \"application_fee\": null,  \"application_fee_amount\": null,  \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"calculated_statement_descriptor\": \"Stripe\",  \"captured\": true,  \"created\": 1679090539,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"disputed\": false,  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"fraud_details\": {},  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"outcome\": {    \"network_status\": \"approved_by_network\",    \"reason\": null,    \"risk_level\": \"normal\",    \"risk_score\": 32,    \"seller_message\": \"Payment complete.\",    \"type\": \"authorized\"  },  \"paid\": true,  \"payment_intent\": null,  \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",  \"payment_method_details\": {    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"exp_month\": 3,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"installments\": null,      \"last4\": \"4242\",      \"mandate\": null,      \"network\": \"visa\",      \"three_d_secure\": null,      \"wallet\": null    },    \"type\": \"card\"  },  \"receipt_email\": null,  \"receipt_number\": null,  \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KOvG06AGMgZfBXyr1aw6LBa9vaaSRWU96d8qBwz9z2J_CObiV_H2-e8RezSK_sw0KISesp4czsOUlVKY\",  \"refunded\": false,  \"review\": null,  \"shipping\": null,  \"source_transfer\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```",
    "title": "Charges | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/references/api/js-sdk",
    "markdown": "# JavaScript API reference | Stripe DocumentationThe Stripe Docs logo\n\n*   [StripeTerminal.create()](#stripeterminal-create)\n*   [discoverReaders()](#discover-readers)\n*   [connectReader()](#connect-reader)\n*   [disconnectReader()](#disconnect)\n*   [getConnectionStatus()](#get-connection-status)\n*   [getPaymentStatus()](#get-payment-status)\n*   [clearCachedCredentials()](#clear-cached-credentials)\n*   [collectPaymentMethod()](#collect-payment-method)\n*   [cancelCollectPaymentMethod()](#cancel-collect-payment-method)\n*   [processPayment()](#process-payment)\n*   [collectSetupIntentPaymentMethod()](#collect-setup-intent-payment-method)\n*   [cancelCollectSetupIntentPaymentMethod()](#cancel-collect-setup-intent-payment-method)\n*   [confirmSetupIntent()](#confirm-setup-intent)\n*   [readReusableCard()](#read-reusable-card)\n*   [cancelReadReusableCard()](#cancel-read-reusable-card)\n*   [setReaderDisplay()](#set-reader-display)\n*   [clearReaderDisplay()](#clear-reader-display)\n*   [setSimulatorConfiguration()](#stripeterminal-setsimulatorconfig)\n*   [getSimulatorConfiguration()](#stripeterminal-getsimulatorconfig)\n*   [collectRefundPaymentMethod()](#stripeterminal-collectrefundpaymentmethod)\n*   [processRefund()](#stripeterminal-processrefund)\n*   [cancelCollectRefundPaymentMethod()](#stripeterminal-cancelcollectrefundpaymentmethod)\n*   [collectInputs()](#collect-inputs)\n*   [cancelCollectInputs()](#cancel-collect-inputs)\n\n### `StripeTerminal.create([options])` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreates an instance of `StripeTerminal` with the given options:\n\n| Option | Description |\n| --- | --- |\n| **onFetchConnectionToken** | An event handler that [fetches a connection token](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js#connection-token) from your backend. |\n| **onUnexpectedReaderDisconnect** | An event handler called when a reader disconnects from your app. |\n| **onConnectionStatusChange** optional | An event handler called when the SDK’s ConnectionStatus changes. |\n| **onPaymentStatusChange** optional | An event handler called when the SDK’s PaymentStatus changes. |\n| **readerBehavior** optional | An object that sets the behavior on the reader throughout the lifecycle of the SDK. See below for readerBehavior configuration options. |\n\n### Reader Behavior Configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nToday, there is only one behavior configuration option:\n\n| Behavior | Description |\n| --- | --- |\n| **allowCustomerCancel** | A boolean that determines whether the customer can cancel `collectPaymentMethod` from the reader’s interface. Defaults to `false`.<br><br>**Note:** This property isn’t broadly available, and we’re not accepting users at this time. |\n\n### `discoverReaders([options])` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBegins discovering readers with the given options:\n\n| Option | Description |\n| --- | --- |\n| **simulated** optional | A boolean value indicating whether to discover a [simulated reader](https://docs.stripe.com/terminal/references/testing#simulated-reader). If left empty, this value defaults to `false`. |\n| **location** optional | Return only readers assigned to the given `location`. This parameter is ignored when discovering a simulated reader.<br><br>For more information on using locations to filter discovered readers, see [Manage locations](https://docs.stripe.com/terminal/fleet/locations-and-zones). |\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n*   `discoveredReaders`: A list of discovered [Reader](https://docs.stripe.com/api/terminal/readers/object) objects, if the command succeeded.\n*   `error`: An [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the command failed.\n\n#### Note\n\nBefore you can discover the Verifone P400 in your application, you must [register](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet#register-reader) the reader to your account.\n\n### `connectReader(reader, connectOptions)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAttempts to [connect](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet#connect-reader) to the given reader with the given options:\n\n| Option | Description |\n| --- | --- |\n| **fail\\_if\\_in\\_use** optional | A boolean value indicating that the connection fails if the reader is currently connected to a Terminal SDK. If left empty, this value defaults to `false`. |\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n*   `reader`: The connected [Reader](https://docs.stripe.com/api/terminal/readers/object), if the command succeeded.\n*   `error`: An [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the command failed.\n\n#### Note\n\nDon’t cache the `Reader` object in your application. Connecting to a stale `Reader` can fail if the reader’s IP address has changed.\n\n### `disconnectReader()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDisconnects from the connected reader.\n\n### `getConnectionStatus()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReturns the current connection status.\n\nConnectionStatus can be one of `connecting`, `connected`, or `not_connected`.\n\n### `getPaymentStatus()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReturns the reader’s payment status.\n\nPaymentStatus can be one of `not_ready`, `ready`, `waiting_for_input`, or `processing`.\n\n### `clearCachedCredentials()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nClears the current [ConnectionToken](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js#connection-token), and any other cached credentials.\n\nUse this method to switch accounts in your application (for example, to switch between live and test Stripe API keys on your backend). To switch accounts, follow these steps:\n\n1.  If a reader is connected, call `disconnectReader`.\n2.  Configure your `onFetchConnectionToken` handler to return connection tokens for the new account.\n3.  Call `clearCachedCredentials`.\n4.  Reconnect to a reader. The SDK requests a new connection token from your `onFetchConnectionToken` handler.\n\n### `collectPaymentMethod(request, options)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBegins [collecting a payment method](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment) for a PaymentIntent. This method takes one required parameter, `request`:\n\n*   `request`: The `clientSecret` field from a `PaymentIntent` object created on your backend. Learn how to [create a PaymentIntent and pass its client secret](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#web-create-intent).\n*   `options`: An object containing additional payment parameters.\n\n| Option | Description |\n| --- | --- |\n| **config\\_override** optional | An object that allows you to specify configuration overrides per transaction. This object defaults to null.<br><br>`skip_tipping`<br><br>*   Optional, defaults to false. If true, the reader skips the tipping screen.<br><br>`tipping`<br><br>*   An object that allows you to specify tipping-related options per transaction. It’s described below.<br><br>`update_payment_intent`<br><br>*   A boolean, when paired with `payment_intent_id`, instructs the call to update the `PaymentIntent` and return the attached `PaymentMethod` with card details.<br><br>`payment_intent_id`<br><br>*   The `id` from the `PaymentIntent` object created on your backend.<br><br>`enable_customer_cancellation`<br><br>*   Optional, defaults to false. If true, Android-based smart readers show a cancel button.<br><br>`{   update_payment_intent: boolean,   payment_intent_id: string,   enable_customer_cancellation: boolean,   skip_tipping: boolean,   tipping: object }` |\n\nThe following option is available for the `tipping` object:\n\n| Option | Description |\n| --- | --- |\n| **eligible\\_amount** optional | A number that allows you to specify the amount of a transaction that percentage-based tips are calculated against. Set this value to 0 or higher.<br><br>If it’s equal to 0, tipping is skipped regardless of the value of `skip_tipping`.<br><br>If it’s equal to the payment intent amount, the parameter is ignored and the tip is calculated based on the specified amount.<br><br>`{   eligible_amount: number, }` |\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n*   `paymentIntent`: The updated [PaymentIntent object](https://docs.stripe.com/api/payment_intents/object), if the command succeeded.\n*   `error`: An [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the command failed.\n\nFor more information on collecting payments, see our [Collecting Payments](https://docs.stripe.com/terminal/payments/collect-card-payment) guide.\n\n### `cancelCollectPaymentMethod()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCancels an outstanding [collectPaymentMethod](https://docs.stripe.com/terminal/references/api/js-sdk#collect-payment-method) command.\n\nReturns a `Promise` that resolves to an empty object when command has been successfully canceled. If cancellation fails, the `Promise` resolves to an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors)\n\n### `processPayment(paymentIntent, options)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Processes](https://docs.stripe.com/terminal/payments/collect-card-payment#process-payment) a payment after a payment method has been [collected](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment).\n\nThis method takes one required parameter, `paymentIntent`:\n\n*   `paymentIntent`: A `PaymentIntent` object obtained from a successful call to `collectPaymentMethod`.\n*   `options`: An object containing additional payment parameters.\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n*   `paymentIntent`: The confirmed [PaymentIntent object](https://docs.stripe.com/api/payment_intents/object), if the command succeeded.\n*   `error`: An [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the command failed. For more information, see [Handling processing failures](https://docs.stripe.com/terminal/payments/collect-card-payment#handling-failures).\n\n### `collectSetupIntentPaymentMethod(clientSecret, customerConsentCollected, config)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBegins [collecting a payment method for online reuse](https://docs.stripe.com/terminal/features/saving-cards/overview) for a [SetupIntent](https://docs.stripe.com/api/setup_intents/object).\n\nThe method takes two required parameters:\n\n*   `clientSecret`: The `clientSecret` field from a `SetupIntent` object created on your backend.\n    \n*   `customerConsentCollected`: A boolean value indicating whether you have collected a customer’s consent to save their cards.\n    \n*   `config`: an optional object containing collection configuration.\n    \n\n| Option | Description |\n| --- | --- |\n| **enable\\_customer\\_cancellation** | Optional, defaults to false.<br><br>If true, Android-based smart readers show a cancel button. |\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n*   `setupIntent`: The updated [SetupIntent object](https://docs.stripe.com/api/setup_intents/object), if the command succeeded.\n*   `error`: An [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the command failed.\n\nFor more information on saving cards, see our [Saving cards for online payments](https://docs.stripe.com/terminal/features/saving-cards/overview) guide.\n\n### `cancelCollectSetupIntentPaymentMethod()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCancels an outstanding [`collectSetupIntentPaymentMethod`](#collect-setup-intent-payment-method) command.\n\nReturns a `Promise` that resolves to an empty object when the command has been successfully canceled. If cancellation fails, the `Promise` resolves to an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors)\n\n### `confirmSetupIntent(setupIntent)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Confirms](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly#submit-payment-method) a SetupIntent after a payment method has been [collected](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly#collect-payment-method).\n\nThis method takes a single parameter, a `SetupIntent` object obtained from a successful call to `collectSetupIntentPaymentMethod`.\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n*   `setupIntent`: The confirmed [SetupIntent object](https://docs.stripe.com/api/setup_intents/object), if the command succeeded.\n*   `error`: An [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the command failed.\n\n### `readReusableCard()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReads a card for [online reuse](https://docs.stripe.com/terminal/features/saving-cards/overview).\n\nOnline payments initiated from Terminal do _not_ benefit from the [lower pricing](https://stripe.com/terminal#pricing) and liability shift given to [standard Terminal payments](https://docs.stripe.com/terminal/payments/collect-card-payment). Most integrations do _not_ need to use `readReusableCard`. To only collect an in-person payment from a customer, use the [standard flow](https://docs.stripe.com/terminal/payments/collect-card-payment).\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n*   `payment_method`: The [PaymentMethod object](https://docs.stripe.com/api/payment_methods/object), if the command succeeded.\n*   `error`: An [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the command failed.\n\n#### Note\n\nCurrently, you can’t use Stripe Terminal to save contactless cards and mobile wallets (for example, Apple Pay, Google Pay) for later reuse.\n\n### `cancelReadReusableCard()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCancels an outstanding [readReusableCard](https://docs.stripe.com/terminal/references/api/js-sdk#read-reusable-card) command.\n\nReturns a `Promise` that resolves to an empty object when the command has been successfully canceled. If cancellation fails, the `Promise` resolves to an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n### `setReaderDisplay(displayInfo)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUpdates the reader display with [cart details](https://docs.stripe.com/terminal/features/display).\n\nThis method takes a `DisplayInfo` object as input.\n\n`{   type: 'cart',   cart: {     line_items: [       {         description: string,         amount: number,         quantity: number,       },     ],     tax: number,     total: number,     currency: string,   } }`\n\nReturns a `Promise` that resolves to an empty object if the command succeeds. If the command fails, the `Promise` resolves to an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n### `clearReaderDisplay()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the reader is displaying cart details set with `setReaderDisplay`, this method clears the screen and resets it to the splash screen.\n\nReturns a `Promise` that resolves to an empty object if the command succeeds. If the command fails, the `Promise` resolves to an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n### `setSimulatorConfiguration(configuration)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSets the configuration object for the [simulated card reader](https://docs.stripe.com/terminal/references/testing#simulated-reader).\n\nThis method only takes effect when connected to the simulated reader; it performs no action otherwise.\n\nThe simulated reader will follow the specified configuration only until `processPayment` is complete. At that point, the simulated reader will revert to its default behavior.\n\nNote that this method overwrites any currently active configuration object; to add specific key-value pairs to the object, make sure to use a combination of this method and `getSimulatorConfiguration`.\n\nThe configuration options available are:\n\n| Field | Values | Description |\n| --- | --- | --- |\n| **testCardNumber** | Refer to the [Simulated test cards](https://docs.stripe.com/terminal/references/testing#simulated-test-cards) list. | Configures the simulated reader to use a test card number as the payment method presented by the user. Use it to test different scenarios in your integration, such as payments with different card brands or processing errors like a declined charge. |\n| **testPaymentMethod** | Refer to the [Simulated test cards](https://docs.stripe.com/terminal/references/testing#simulated-test-cards) list. | Serves the same purpose as `testCardNumber`, but relies on test payment methods instead. |\n| **tipAmount** | Any amount or null. | Configures the simulated reader to simulate an on-reader tip amount selected by the customer. |\n| **paymentMethodType** deprecated | *   `card_present` (default)<br>*   `interac_present` | Determine the type of payment method created by the simulated reader when `collectPaymentMethod` is called. |\n\n### `getSimulatorConfiguration()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReturns the currently active configuration object.\n\nThe Stripe Terminal JavaScript SDK may overwrite this value as necessary, including (but not limited to) resetting the value after processPayment is complete, and removing unknown key-value pairs.\n\n### `collectRefundPaymentMethod(charge_id, amount, currency, options, config)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBegins collecting a payment method to be refunded. The method takes two required parameters:\n\n*   `charge_id`, the ID of the charge that will be refunded.\n*   `amount`: a number that represents the amount, in cents, that will be refunded from the charge. This number must be less than or equal to the amount that was charged in the original payment.\n*   `currency`: Three-letter [ISO code for the currency](https://docs.stripe.com/currencies), in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies).\n*   `options`: an optional object containing additional refund parameters.\n\n| Option | Description |\n| --- | --- |\n| **refund\\_application\\_fee** | Optional, defaults to false. Connect only.<br><br>Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded.<br><br>An application fee can be refunded only by the application that created the charge. |\n| **reverse\\_transfer** | Optional, defaults to false. Connect only.<br><br>Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge. |\n\n*   `config`: an optional object containing collection configuration.\n\n| Option | Description |\n| --- | --- |\n| **enable\\_customer\\_cancellation** | Optional, defaults to false.<br><br>If true, Android-based smart readers show a cancel button. |\n\nReturns a `Promise` that resolves to either:\n\n*   an empty object if the payment method collection was successful, or\n*   an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors) field if there was an error while collecting the refund payment method.\n\n### `processRefund()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nProcesses an in-progress refund. This method can only be successfully called after `collectRefundPaymentMethod` has returned successfully.\n\nReturns a `Promise` that resolves to either:\n\n*   a refund object if the refund was successful, or\n*   an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors) field if there was an error while processing the refund.\n\n### `cancelCollectRefundPaymentMethod()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCancels an outstanding `collectRefundPaymentMethod` command.\n\nReturns a `Promise` that resolves to an empty object if the cancellation was successful. If the cancellation fails, the `Promise` resolves to an object with an `error` field.\n\n### `collectInputs(collectInputsParameters)` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nStart displaying forms and collecting information from customers using [collect inputs](https://docs.stripe.com/terminal/features/collect-inputs).\n\nThis method takes a `ICollectInputsParameters` object as input.\n\nReturns a `Promise` that resolves to the collected results if the command succeeds. If the command fails, the `Promise` resolves to an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n### `cancelCollectInputs()` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nCancels an outstanding `collectInputs` command.\n\nReturns a `Promise` that resolves to an empty object if the cancellation succeeds. If the command fails, the `Promise` resolves to an object with an [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).",
    "title": "JavaScript API reference | Stripe Documentation",
    "description": "Use our API reference to navigate the Stripe Terminal JavaScript SDK.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/confirmation_tokens/object",
    "markdown": "# The Confirmation Token object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    mandate\\_datanullable object\n    \n    Data used for generating a Mandate.\n    \n*   #### \n    \n    payment\\_intentnullable string\n    \n    ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.\n    \n*   #### \n    \n    payment\\_method\\_optionsnullable object\n    \n    Payment-method-specific configuration for this ConfirmationToken.\n    \n*   #### \n    \n    payment\\_method\\_previewnullable object\n    \n    Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    Return URL used to confirm the Intent.\n    \n*   #### \n    \n    setup\\_future\\_usagenullable enum\n    \n    Indicates that you intend to make future payments with this ConfirmationToken’s payment method.\n    \n    The presence of this property will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   #### \n    \n    setup\\_intentnullable string\n    \n    ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.\n    \n*   Shipping information collected on this ConfirmationToken.\n    \n*   Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken.\n    \n\nThe Confirmation Token object\n\n```\n{  \"id\": \"ctoken_1NnQUf2eZvKYlo2CIObdtbnb\",  \"object\": \"confirmation_token\",  \"created\": 1694025025,  \"expires_at\": 1694068225,  \"livemode\": true,  \"mandate_data\": null,  \"payment_intent\": null,  \"payment_method\": null,  \"payment_method_preview\": {    \"billing_details\": {      \"address\": {        \"city\": \"Hyde Park\",        \"country\": \"US\",        \"line1\": \"50 Sprague St\",        \"line2\": \"\",        \"postal_code\": \"02136\",        \"state\": \"MA\"      },      \"email\": \"jennyrosen@stripe.com\",      \"name\": \"Jenny Rosen\",      \"phone\": null    },    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"display_brand\": \"visa\",      \"exp_month\": 8,      \"exp_year\": 2026,      \"funding\": \"credit\",      \"generated_from\": null,      \"last4\": \"4242\",      \"networks\": {        \"available\": [          \"visa\"        ],        \"preferred\": null      },      \"three_d_secure_usage\": {        \"supported\": true      },      \"wallet\": null    },    \"type\": \"card\"  },  \"return_url\": \"https://example.com/return\",  \"setup_future_usage\": \"off_session\",  \"setup_intent\": null,  \"shipping\": {    \"address\": {      \"city\": \"Hyde Park\",      \"country\": \"US\",      \"line1\": \"50 Sprague St\",      \"line2\": \"\",      \"postal_code\": \"02136\",      \"state\": \"MA\"    },    \"name\": \"Jenny Rosen\",    \"phone\": null  }}\n```\n\n## [Retrieve a ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens/retrieve)\n\nRetrieves an existing ConfirmationToken object\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified ConfirmationToken\n\nGET /v1/confirmation\\_tokens/:id\n\n```\ncurl https://api.stripe.com/v1/confirmation_tokens/ctoken_1NnQUf2eZvKYlo2CIObdtbnb \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ctoken_1NnQUf2eZvKYlo2CIObdtbnb\",  \"object\": \"confirmation_token\",  \"created\": 1694025025,  \"expires_at\": 1694068225,  \"livemode\": true,  \"mandate_data\": null,  \"payment_intent\": null,  \"payment_method\": null,  \"payment_method_preview\": {    \"billing_details\": {      \"address\": {        \"city\": \"Hyde Park\",        \"country\": \"US\",        \"line1\": \"50 Sprague St\",        \"line2\": \"\",        \"postal_code\": \"02136\",        \"state\": \"MA\"      },      \"email\": \"jennyrosen@stripe.com\",      \"name\": \"Jenny Rosen\",      \"phone\": null    },    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"display_brand\": \"visa\",      \"exp_month\": 8,      \"exp_year\": 2026,      \"funding\": \"credit\",      \"generated_from\": null,      \"last4\": \"4242\",      \"networks\": {        \"available\": [          \"visa\"        ],        \"preferred\": null      },      \"three_d_secure_usage\": {        \"supported\": true      },      \"wallet\": null    },    \"type\": \"card\"  },  \"return_url\": \"https://example.com/return\",  \"setup_future_usage\": \"off_session\",  \"setup_intent\": null,  \"shipping\": {    \"address\": {      \"city\": \"Hyde Park\",      \"country\": \"US\",      \"line1\": \"50 Sprague St\",      \"line2\": \"\",      \"postal_code\": \"02136\",      \"state\": \"MA\"    },    \"name\": \"Jenny Rosen\",    \"phone\": null  }}\n```\n\n## [Create a test Confirmation Token](https://docs.stripe.com/api/confirmation_tokens/test_create)Test helper\n\nCreates a test mode Confirmation Token server side for your integration tests.\n\n### Parameters\n\n*   ID of an existing PaymentMethod.\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n    If provided, this hash will be used to create a PaymentMethod.\n    \n*   Return URL used to confirm the Intent.\n    \n*   Indicates that you intend to make future payments with this ConfirmationToken’s payment method.\n    \n    The presence of this property will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this ConfirmationToken.\n    \n\n### Returns\n\nReturns a testmode Confirmation Token\n\nPOST /v1/test\\_helpers/confirmation\\_tokens\n\n```\ncurl https://api.stripe.com/v1/test_helpers/confirmation_tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa\n```\n\n```\n{  \"id\": \"ctoken_1Ow71CL4FhS6zgoxWjxc7sfr\",  \"object\": \"confirmation_token\",  \"created\": 1710871450,  \"expires_at\": 1710914650,  \"livemode\": false,  \"payment_intent\": null,  \"payment_method_preview\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": null,      \"phone\": null    },    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": \"unchecked\"      },      \"country\": \"US\",      \"display_brand\": \"visa\",      \"exp_month\": 3,      \"exp_year\": 2025,      \"fingerprint\": \"jbGyCKrSRsFpOBWP\",      \"funding\": \"credit\",      \"generated_from\": null,      \"last4\": \"4242\",      \"networks\": {        \"available\": [          \"visa\"        ],        \"preferred\": null      },      \"three_d_secure_usage\": {        \"supported\": true      },      \"wallet\": null    },    \"type\": \"card\"  },  \"return_url\": null,  \"setup_future_usage\": null,  \"setup_intent\": null,  \"shipping\": null,  \"use_stripe_sdk\": true}\n```\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Confirmation Token object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ideal/accept-a-payment",
    "markdown": "# Accept an iDEAL payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\niDEAL is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with iDEAL by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n#### Note\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support iDEAL payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Euro (currency code `eur`).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable iDEAL—it shows the differences between accepting a card payment and using iDEAL.\n\n### Enable iDEAL as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `ideal` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `eur` currency\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'ideal'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `ideal`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select iDEAL as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for iDEAL is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
    "title": "Accept an iDEAL payment | Stripe Documentation",
    "description": "Learn how to accept iDEAL, a common payment method in the Netherlands.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/regional?integration-country=AU",
    "markdown": "# Regional considerations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about regional considerations for integrating Terminal in different countries.\n\n​​For the most part, you’ll be able to use a single Terminal integration in all supported countries. However, due to local payment methods or regulations there are some country-specific requirements. After going through the [sample integration](https://docs.stripe.com/terminal/quickstart), use this guide to learn about country-specific requirements for Terminal.\n\n#### Note\n\nIn order to process Terminal payments, both the Stripe account receiving the funds and the [location](https://docs.stripe.com/terminal/fleet/locations-and-zones) associated with the reader must be in the same country, accepting local currency only.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefer to the following table to understand which readers and SDK platforms you can use in each country.\n\n| Countries | Android\\*\\* | iOS\\*\\* | JavaScript | Server-Driven |\n| --- | --- | --- | --- | --- |\n| United States | ![](https://b.stripecdn.com/docs-statics-srv/assets/84052c4398178d23ae59cfdfd4c1a4e3.png)<br><br>Stripe Reader M2<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/84052c4398178d23ae59cfdfd4c1a4e3.png)<br><br>Stripe Reader M2<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Canada<br><br>Italy<br><br>Netherlands | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| United Kingdom | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Austria+<br><br>Belgium<br><br>Czech Republic+<br><br>Denmark<br><br>Finland+<br><br>Ireland<br><br>Luxembourg+<br><br>Malaysia+<br><br>Norway+<br><br>Portugal+<br><br>Spain<br><br>Sweden<br><br>Switzerland+ | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| New Zealand+<br><br>Singapore | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Australia | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| France<br><br>Germany | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart |\n\n+Terminal is currently in beta in this country.\n\n\\*This Terminal integration shape is currently in beta.\n\n\\*\\*Compatibility for this mobile SDK also applies when used with React Native.\n\n## Integrate Terminal in Australia![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports Visa, Mastercard, American Express, and [eftpos](https://docs.stripe.com/terminal/payments/regional?integration-country=AU#eftpos-payments) payments in Australia. All transactions must be made in Australian dollars (AUD). To accept Terminal charges in Australia, either your platform account or connected account must be in Australia.\n\n### Use locations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate [Locations](https://docs.stripe.com/api/terminal/locations/create) for your business with addresses in Australia and [associate your readers to them](https://docs.stripe.com/terminal/fleet/locations-and-zones). This will ensure that they automatically download the configuration needed to properly process charges in Australia.\n\nA valid [address for a Location](https://docs.stripe.com/api/terminal/locations/create#create_terminal_location-address) in Australia must contain the `line1`, `city`, `state`, `postal_code`, and `country` properties.\n\n`curl https://api.stripe.com/v1/terminal/locations \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"display_name\"=\"HQ\" \\   -d \"address[line1]\"=\"1234 Victoria Street\" \\   -d \"address[city]\"=\"Melbourne\" \\   -d \"address[state]\"=\"Victoria\" \\   -d \"address[country]\"=\"AU\" \\   -d \"address[postal_code]\"=\"3000\" \\`\n\n### Reader software version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBBPOS WisePad 3 readers operating in Australia must use the reader software version `4.01.00.38_Prod_APAC1_on_v23_490001` or later. Read about [BBPOS WisePad 3 software updates](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth#update-reader) for details.\n\n## eftpos payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Eftpos](https://www.eftposaustralia.com.au/) is Australia’s local debit card network. More than 90% of eftpos cards are co-branded with either Visa or Mastercard, meaning you can process these cards over either network supported by the card.\n\nStripe processes co-branded eftpos cards over eftpos, Visa, or Mastercard depending on the [least cost routing requirements](https://support.stripe.com/questions/supporting-dual-network-debit-cards-in-australia) and the [type of transaction](https://docs.stripe.com/terminal/payments/regional?integration-country=AU#identify-which-network-a-payment-was-processed-on).\n\n### Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEftpos is available to any business that uses Stripe in Australia, with the following exceptions:\n\n*   Massage parlors ([MCC](https://docs.stripe.com/connect/setting-mcc) 7297)\n*   Financial institutions—manual cash disbursements ([MCC](https://docs.stripe.com/connect/setting-mcc) 6010)\n*   Financial institutions—merchandise and services ([MCC](https://docs.stripe.com/connect/setting-mcc) 6012)\n*   Non-financial institutions—foreign currency, money orders and travelers’ checks. ([MCC](https://docs.stripe.com/connect/setting-mcc) 6051)\n*   Remote stored value load—merchant ([MCC](https://docs.stripe.com/connect/setting-mcc) 6530)\n*   Stored value card purchase/load ([MCC](https://docs.stripe.com/connect/setting-mcc) 6540)\n*   Wires, money orders ([MCC](https://docs.stripe.com/connect/setting-mcc) 4829)\n\nCash out transactions, where the business disburses cash to a customer, aren’t supported on Terminal.\n\n### Integration requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo process in-person payments over the eftpos network, you need to make sure that your Terminal integration:\n\n*   Uses up-to-date Terminal SDKs\n    \n    If you use the Terminal [iOS SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios), [Android SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android), or [React Native SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=react-native), you need to use the following minimum SDK versions to accept eftpos payments:\n    \n    *   [iOS SDK 2.20.0](https://github.com/stripe/stripe-terminal-ios/releases), released on May 3, 2023\n    *   [Android SDK 2.20.0](https://github.com/stripe/stripe-terminal-android/releases), released on May 11, 2023\n    *   [React Native SDK 0.0.1-beta.12](https://github.com/stripe/stripe-terminal-react-native/releases), released on June 1, 2023\n    \n    You don’t need to make any changes if you use the Terminal [Javascript SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js) or [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven).\n    \n*   Uses `automatic` or `manual_preferred` capture type on your payments\n    \n    Eftpos only supports payments that are authorized and captured in a single step. Unlike networks like Visa and Mastercard, eftpos doesn’t support placing a “hold” on a card and capturing the funds later. Only payments with `automatic` or `manual_preferred` capture type can be processed on eftpos.\n    \n    | Capture type | Implementation | Result |\n    | --- | --- | --- |\n    | **automatic** | Set [`​capture_method`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) on the payment intent to `automatic`. | All card payments will be authorized and captured in a single step. |\n    | **manual\\_preferred** | Set [`​capture_method`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-capture_method) on the nested `payment_method_options.card_present` attribute to `manual_preferred`. | eftpos card payments will be authorized and captured in a single step.<br><br>Non-eftpos card payments will be authorized only. To [capture the funds](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#capture-payment), make a separate request. |\n    | **manual** | Set [`​capture_method`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) on the payment intent to `manual`. | eftpos card payments will always decline.<br><br>Non-eftpos card payments will be authorized only. To [capture the funds](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#capture-payment), make a separate request. |\n    \n\n### Refund an eftpos payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEftpos supports online refunds through the [API](https://docs.stripe.com/refunds?dashboard-or-api=api) or [Dashboard](https://docs.stripe.com/refunds?dashboard-or-api=dashboard). The cardholder isn’t required to present their card again at the point of sale.\n\n### Routing multi-network debit cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor co-branded, multi-network debit cards supporting both eftpos domestic debit and international card networks, Stripe uses the following default routing:\n\n| Capture type | Default routing for contact payments | Default routing for contactless payments |\n| --- | --- | --- |\n| **automatic** | Customer selects on the Terminal reader | eftpos |\n| **manual\\_preferred** | Customer selects on the Terminal reader | International network |\n| **manual** | International network | International network |\n\nYou can optionally request a preferred network routing choice on PaymentIntent creation, by setting the [`requested_priority`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-routing-requested_priority) on the nested `payment_method_options.card_present.routing` attribute.\n\n| Routing | Implementation | Result |\n| --- | --- | --- |\n| **eftpos** | Set [`requested_priority`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-routing-requested_priority) on the nested `payment_method_options.card_present.routing` attribute to `domestic` | For co-branded eftpos cards, Stripe prioritizes the eftpos network.<br><br>Stripe will continue to authorize all other cards as-is. |\n| **International networks** | Set [`requested_priority`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-routing-requested_priority) on the nested `payment_method_options.card_present.routing` attribute to `international` | For co-branded eftpos cards, Stripe prioritizes the international network.<br><br>Stripe will continue to authorize all other cards as-is. |\n\n### Identify which network a payment was processed on![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo identify which network a payment was processed on, inspect the [network](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-network) field on the [Charge](https://docs.stripe.com/api/charges/object) object associated with a successful [Payment Intent](https://docs.stripe.com/api/payment_intents/object).\n\n`{   \"id\": \"ch_1Ff52K2eZvKYlo2CWe10i0s7\",   \"object\": \"charge\",   ...   \"payment_method_details\": {     \"card_present\": {       \"brand\": \"visa\",       ...       \"network\": \"eftpos_au\"     },     \"type\": \"card_present\"   } }`",
    "title": "Regional considerations | Stripe Documentation",
    "description": "Learn about regional considerations for integrating Terminal in different countries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/verification-checks?type=selfie",
    "markdown": "# Verification checks | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different verification checks supported by Stripe Identity.\n\nStripe Identity currently supports five types of verification checks: document, selfie, ID number, address, and phone.\n\nEach verification check requires different information from your user, has different coverage, and has a different verification flow. After you’ve integrated one check, you can add another with minimal changes to your integration.\n\nWhile document checks provide a defense against the use of fraudulent identity documents, it’s possible for fraudsters to get access to legitimate stolen documents. To prevent this, Stripe Identity can perform selfie checks on your users.\n\nSelfie checks look for distinguishing biological traits, such as face geometry, from a photo ID and a picture of your user’s face. Stripe then uses advanced machine learning algorithms to ensure the face pictures belong to the same person.\n\nIn some places, such as the EU, there are privacy laws that require you to justify your use of biometric technology or offer an alternative, non-biometric means of verification. We recommend you offer an alternative verification option or consult with your legal counsel.\n\nSee [Adding selfie checks](https://docs.stripe.com/identity/selfie) to learn how to add selfie checks to your app.\n\n### Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSelfie checks are available for government issued photo IDs from the following countries:\n\nAlbania\n\nAlgeria\n\nArgentina\n\nArmenia\n\nAustralia\n\nAustria\n\nAzerbaijan\n\nBahamas\n\nBahrain\n\nBangladesh\n\nBelarus\n\nBelgium\n\nBenin\n\nBolivia\n\nBrazil\n\nBulgaria\n\nCameroon\n\nCanada\n\nChile\n\nChina\n\nColombia\n\nCosta Rica\n\nCôte d’Ivoire\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nDominican Republic\n\nEcuador\n\nEgypt\n\nEl Salvador\n\nEstonia\n\nFinland\n\nFrance\n\nGeorgia\n\nGermany\n\nGhana\n\nGreece\n\nGuatemala\n\nHaiti\n\nHonduras\n\nHong Kong\n\nHungary\n\nIndia\n\nIndonesia\n\nIraq\n\nIreland\n\nIsrael\n\nItaly\n\nJamaica\n\nJapan\n\nJersey\n\nJordan\n\nKazakhstan\n\nKenya\n\nKuwait\n\nLatvia\n\nLebanon\n\nLiechtenstein\n\nLithuania\n\nLuxembourg\n\nMalaysia\n\nMalta\n\nMauritius\n\nMexico\n\nMoldova\n\nMongolia\n\nMorocco\n\nMyanmar (Burma)\n\nNepal\n\nNetherlands\n\nNew Zealand\n\nNigeria\n\nNorth Macedonia\n\nNorway\n\nPakistan\n\nPalestinian Territories\n\nPanama\n\nParaguay\n\nPeru\n\nPhilippines\n\nPoland\n\nPortugal\n\nPuerto Rico\n\nRomania\n\nRussia\n\nSaudi Arabia\n\nSerbia\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSouth Africa\n\nSouth Korea\n\nSpain\n\nSri Lanka\n\nSweden\n\nSwitzerland\n\nTaiwan\n\nThailand\n\nTunisia\n\nTurkey\n\nUganda\n\nUkraine\n\nUnited Arab Emirates\n\nUnited Kingdom\n\nUnited States\n\nUruguay\n\nUzbekistan\n\nVenezuela\n\nVietnam\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents)\n*   [Adding selfie checks](https://docs.stripe.com/identity/selfie)\n*   [The Verification Sessions API](https://docs.stripe.com/identity/verification-sessions#create)",
    "title": "Verification checks | Stripe Documentation",
    "description": "Learn about the different verification checks supported by Stripe Identity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ideal/set-up-payment",
    "markdown": "# Use iDEAL to set up future SEPA Direct Debit payments\n\niDEAL is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. With this integration, Stripe charges your customer 0.01 EUR through iDEAL to collect their bank details. After your customer authenticates the payment, Stripe refunds the payment and stores your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods) to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit).\n\nYou can use [Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) to collect payment details and set up future SEPA Direct Debit payments using iDEAL.\n\n[](#create-retrieve-customer)\n\nTo set up future SEPA Direct Debit payments using iDEAL, you must attach the SEPA Direct Debit payment method to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a `Customer` object when your customer creates an account with your business. You can retrieve and use a customer’s stored payment method details later, if you associate the ID of the `Customer` object with your own internal representation of the customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#setup-a-payment)\n\nThis guide builds on the foundational [set up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) Checkout integration and describes how to enable iDEAL—it shows the differences between setting up future payments for cards and using iDEAL.\n\n### Enable iDEAL as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to add `ideal` to the list of `payment_method_types`.\n\n[](#charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_attempt` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_attempt`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#testing)\n\nUsing your [test API keys](https://docs.stripe.com/keys#test-live-modes), select any bank from the list. After confirming, you’re redirected to a test page with options to authorize or fail the payment method setup.\n\n*   Click **Authorize test payment** to test the case when the setup is successful.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate.",
    "title": "Use iDEAL to set up future SEPA Direct Debit payments | Stripe Documentation",
    "description": "Learn how to save bank details from an iDEAL payment and charge your customers later with SEPA Direct Debit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/balance_transactions/object",
    "markdown": "# The Balance Transaction object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Gross amount of this transaction (in cents). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Fees (in cents) paid for this transaction. Represented as a positive integer when assessed.\n    \n*   #### \n    \n    fee\\_detailsarray of objects\n    \n    Detailed breakdown of fees (in cents) paid for this transaction.\n    \n*   Net impact to a Stripe balance (in cents). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`\n    \n*   #### \n    \n    sourcenullable stringExpandable\n    \n    This transaction relates to the Stripe object.\n    \n*   The transaction’s net funds status in the Stripe balance, which are either `available` or `pending`.\n    \n*   Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `adjustment` |\n    | `advance` |\n    | `advance_funding` |\n    | `anticipation_repayment` |\n    | `application_fee` |\n    | `application_fee_refund` |\n    | `charge` |\n    | `climate_order_purchase` |\n    | `climate_order_refund` |\n    | `connect_collection_transfer` |\n    | Show 30 more |\n    \n\n### More attributes\n\n*   #### \n    \n    exchange\\_ratenullable float\n    \n\nThe Balance Transaction object\n\n```\n{  \"id\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"object\": \"balance_transaction\",  \"amount\": -400,  \"available_on\": 1678043844,  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"exchange_rate\": null,  \"fee\": 0,  \"fee_details\": [],  \"net\": -400,  \"reporting_category\": \"transfer\",  \"source\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"status\": \"available\",  \"type\": \"transfer\"}\n```\n\n## [Retrieve a balance transaction](https://docs.stripe.com/api/balance_transactions/retrieve)\n\nRetrieves the balance transaction with the given ID.\n\nNote that this endpoint previously used the path `/v1/balance/history/:id`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a balance transaction if a valid balance transaction ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/balance_transactions/txn_1MiN3gLkdIwHu7ixxapQrznl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"object\": \"balance_transaction\",  \"amount\": -400,  \"available_on\": 1678043844,  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"exchange_rate\": null,  \"fee\": 0,  \"fee_details\": [],  \"net\": -400,  \"reporting_category\": \"transfer\",  \"source\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"status\": \"available\",  \"type\": \"transfer\"}\n```\n\n## [List all balance transactions](https://docs.stripe.com/api/balance_transactions/list)\n\nReturns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.\n\nNote that this endpoint was previously called “Balance history” and used the path `/v1/balance/history`.\n\n### Parameters\n\n*   For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.\n    \n*   Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transactions, starting after transaction `starting_after`. Each entry in the array is a separate transaction history object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",      \"object\": \"balance_transaction\",      \"amount\": -400,      \"available_on\": 1678043844,      \"created\": 1678043844,      \"currency\": \"usd\",      \"description\": null,      \"exchange_rate\": null,      \"fee\": 0,      \"fee_details\": [],      \"net\": -400,      \"reporting_category\": \"transfer\",      \"source\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",      \"status\": \"available\",      \"type\": \"transfer\"    }    {...}    {...}  ],}\n```\n\n## [Customer Session](https://docs.stripe.com/api/customer_sessions)\n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Balance Transaction object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ideal/save-during-payment",
    "markdown": "# Save bank details during an iDEAL payment\n\n## Learn how to save your customer's IBAN bank details from an iDEAL payment.\n\n#### Caution\n\niDEAL is a popular [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method in the Netherlands where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with iDEAL by redirecting to a webview, authorizing the payment, then returning to your app where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\nYou can also use iDEAL to save your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) bank details into a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). You can then use the SEPA Direct Debit PaymentMethod to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit). This reduces friction for your customer as they don’t have to enter their IBAN again. You also receive their verified name and validated IBAN.\n\n#### Caution\n\nAccepting iDEAL payments consists of creating a [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object to track a payment, collecting payment method details and mandate acknowledgement, and submitting the payment to Stripe for processing. Stripe uses the PaymentIntent to track and handle all the states of the payment until the payment completes. Use the ID of the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") collected from your initial iDEAL PaymentIntent to create future payments.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") when they create an account with your business and associate it with your internal representation of their account. This enables you to retrieve and use their saved payment method details later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-payment-intent)\n\nCreate a `PaymentIntent` on your server and specify the `amount` to collect, the `eur` currency, the customer ID, and `off_session` as an argument for [setup future usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). There is no minimum charge amount and iDEAL doesn’t support other currencies. If you have an existing [Payment Intents API](https://docs.stripe.com/payments/payment-intents) integration, add `ideal` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=ideal \\  -d customer={{CUSTOMER_ID}} \\   -d setup_future_usage=off_session`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#web-collect-payment-method-details)\n\nCollect payment information on the client with [Stripe Elements](https://docs.stripe.com/payments/elements). Elements is a set of prebuilt UI components for collecting payment details. A Stripe Element contains an iframe that securely sends the payment information to Stripe over an HTTPS connection.\n\nThe checkout page address must also start with https:// rather than http:// for your integration to work. You can test your integration without using HTTPS. [Enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Elements is automatically available as a feature of Stripe.js. Include the Stripe.js script on your payment page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Do not include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Elements with the following JavaScript on your checkout page:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\n### Add and configure an `idealBank` Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nElements needs a place to live in your payment form. Create empty DOM nodes (containers) with unique IDs in your payment form and then pass those IDs to Elements.\n\n​​To process SEPA Direct Debit payments, you must collect a mandate agreement from your customer. Display the following standard authorization text for your customer to implicitly sign the mandate.\n\nReplace _Rocket Rides_ with your company name.\n\nAuthorization text template\n\nBy providing your payment information and confirming this payment, you authorise (A)\n\nRocket Rides\n\nReplace this with your company name\n\nand Stripe, our payment service provider, to send instructions to your bank to debit your account and (B) your bank to debit your account in accordance with those instructions. As part of your rights, you are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited. Your rights are explained in a statement that you can obtain from your bank. You agree to receive notifications for future debits up to 2 days before they occur.\n\n​​Setting up a payment method or confirming a PaymentIntent creates the accepted mandate. As the customer has implicitly signed the mandate, you must communicate these terms in your form or through email.\n\n`<form id=\"payment-form\">   <div class=\"form-row\">     <label for=\"accountholder-name\">       Name     </label>     <input id=\"accountholder-name\"  name=\"accountholder-name\">   </div>    <div class=\"form-row\">     <label for=\"accountholder-email\">       Email     </label>     <input id=\"accountholder-email\"  name=\"accountholder-email\">   </div>    <div class=\"form-row\">     <!--       Using a label with a for attribute that matches the ID of the       Element container enables the Element to automatically gain focus       when the customer clicks on the label.     -->     <label for=\"ideal-bank-element\">       iDEAL Bank     </label>     <div id=\"ideal-bank-element\">       <!-- A Stripe Element will be inserted here. -->     </div>   </div>    <button id=\"submit-button\" data-secret=\"{CLIENT_SECRET}\">Submit</button>    <!-- Display mandate acceptance text. -->   <div id=\"mandate-acceptance\">     By providing your payment information and confirming this payment, you     authorise (A) Rocket Rides and Stripe, our payment service provider, to     send instructions to your bank to debit your account and (B) your bank to     debit your account in accordance with those instructions. As part of your     rights, you are entitled to a refund from your bank under the terms and     conditions of your agreement with your bank. A refund must be claimed     within 8 weeks starting from the date on which your account was debited.     Your rights are explained in a statement that you can obtain from your     bank. You agree to receive notifications for future debits up to 2 days     before they occur.   </div>   <!-- Used to display form errors. -->   <div id=\"error-message\" role=\"alert\"></div> </form>`\n\nWhen the form above has loaded, [create an instance](https://docs.stripe.com/js/elements_object/create_element?type=idealBank) of an `idealBank` Element and mount it to the Element container created above:\n\n``const options = {   // Custom styling can be passed to options when creating an Element   style: {     base: {       padding: '10px 12px',       color: '#32325d',       fontSize: '16px',       '::placeholder': {         color: '#aab7c4'       },     },   }, };  // Create an instance of the idealBank Element const idealBank = elements.create('idealBank', options);  // Add an instance of the idealBank Element into // the `ideal-bank-element` <div> idealBank.mount('#ideal-bank-element');``\n\nElements are completely customizable. You can [style Elements](https://docs.stripe.com/js/elements_object/create_element?type=idealBank#elements_create-options) to match the look and feel of your site, providing seamless checkout for your customers. It’s also possible to style various input states, for example when the Element has focus.\n\n[](#web-submit-payment)\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from [step 3](#web-create-payment-intent). This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmIdealPayment](https://docs.stripe.com/js/payment_intents/confirm_ideal_payment) to handle the redirect away from your page and to complete the payment. Add a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe should redirect the user after they complete the payment on their bank’s website or mobile application.\n\nInclude your customer’s name and email address in `payment_method[billing_details]`. They will be used when generating the SEPA Direct Debit PaymentMethod.\n\n#### Caution\n\nIn order to pass the `setup_future_usage` parameter as shown below, you must modify the API version you passed when creating your instance of Elements. Review the instructions for [setting up Stripe Elements](https://docs.stripe.com/payments/ideal/save-during-payment#set-up-stripe-elements) from above if you are unable to pass `setup_future_usage` at this step.\n\n`const form = document.getElementById('payment-form'); const accountholderName = document.getElementById('accountholder-name');  form.addEventListener('submit', (event) => {   event.preventDefault();    // Redirects away from the client   const {error} = await stripe.confirmIdealPayment(     '{{PAYMENT_INTENT_CLIENT_SECRET}}',     {       payment_method: {         ideal: idealBank,         billing_details: {           name: accountholderName.value,         },       },       return_url: 'https://example.com/checkout/complete',     }   ); });`\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n[](#web-charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/payment_intents/retrieve) the previous PaymentIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_charge` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_charge`\n\nThe SEPA Direct Debit payment method ID is the `generated_sepa_debit` ID under [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-ideal) in the response.\n\n`{   \"latest_charge\": {     \"payment_method_details\": {       \"ideal\": {         \"bank\": \"ing\",         \"bic\": \"INGBNL2A\",         \"iban_last4\": \"****\",         \"generated_sepa_debit\": \"pm_1GrddXGf98efjktuBIi3ag7aJQ\",         \"verified_name\": \"JENNY ROSEN\"       },       \"type\": \"ideal\"     },   },   \"payment_method_options\": {     \"ideal\": {}`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#test-your-integration)\n\nUsing your [test API keys](https://docs.stripe.com/keys#test-live-modes), select any bank from the list. After confirming the PaymentIntent, you’re redirected to a test page with options to authorize or fail the payment.\n\n*   Click **Authorize test payment** to test the case when the payment is successful. The PaymentIntent transitions from `requires_action` to `succeeded`.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate. The PaymentIntent transitions from `requires_action` to `requires_payment_method`.\n\n### Test your SEPA Direct Debit integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSet `payment_method.billing_details.email` to one of the following values to test the PaymentIntent status transitions. You can include your own custom text at the beginning of the email address followed by an underscore. For example, `test_1_generatedSepaDebitIntentsFail@example.com` results in a SEPA Direct Debit PaymentMethod that always fails when used with a PaymentIntent.\n\n| Email Address | Description |\n| --- | --- |\n| `generatedSepaDebitIntentsSucceed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `generatedSepaDebitIntentsSucceedDelayed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `generatedSepaDebitIntentsFail@example.com` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `generatedSepaDebitIntentsFailDelayed@example.com` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `generatedSepaDebitIntentsSucceedDisputed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is created immediately. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accept a SEPA Direct Debit payment](https://docs.stripe.com/payments/sepa-debit/accept-a-payment)\n*   [Set up a subscription with SEPA Direct Debit in the EU](https://docs.stripe.com/billing/subscriptions/sepa-debit)",
    "title": "Save bank details during an iDEAL payment | Stripe Documentation",
    "description": "Learn how to save your customer's IBAN bank details from an iDEAL payment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/oauth-standard-accounts",
    "markdown": "# Using OAuth with Standard accounts that your platform controls\n\n## Use the OAuth connection flow to allow a Stripe user to connect to your platform.\n\nOAuth is not recommended for new [Connect](https://docs.stripe.com/connect \"Connect\") platforms. We recommend using [Connect Onboarding for Standard accounts](https://docs.stripe.com/connect/standard-accounts) instead.\n\nStarting in June 2021, Platforms using OAuth with `read_write` scope won’t be able to connect to Standard accounts that are controlled by another platform.\n\n[Extensions](https://docs.stripe.com/building-extensions) will not experience any changes to how OAuth behaves. Learn more about [OAuth changes for platform-controlled Standard accounts](https://docs.stripe.com/connect/oauth-changes-for-standard-platforms).\n\n## The OAuth connection flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA user connects to your platform using the following OAuth connection flow:\n\n1.  From a page on your site, the user clicks a [link](#integrating-oauth) that redirects them to Stripe, passing along your platform’s `client_id`.\n2.  On Stripe’s website, the user provides the necessary information for [connecting](#connect-users) to your platform.\n3.  The user is [redirected](#redirected) to your site, along with an authorization code.\n4.  Your site then makes a request to Stripe’s [OAuth token endpoint](#token-request) to complete the connection and fetch the user’s account ID.\n\n#### Note\n\nAs a platform, remember that data you create for an account (for example, charges, customers, [invoices](https://docs.stripe.com/api/invoices \"invoices\"), and so on) will be visible on their Stripe account. It also means that if they connect other platforms, those platforms can access this data too.\n\n[\n\n## Create the OAuth link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#integrating-oauth)\n\nTo start your integration, go to your [platform settings](https://dashboard.stripe.com/account/applications/settings) and:\n\n*   Enable onboarding accounts with OAuth in the OAuth settings.\n*   Copy your `client_id`, a unique identifier for your platform that is generated by Stripe.\n*   Set your `redirect_uri`, the URL which your user will be redirected to after connecting their account. You must specify all redirect URLs in your platform settings. If you do not include the `redirect_uri` parameter in your request, Stripe defaults to using the first address you have configured in your platform settings.\n\nStripe also provides a development `client_id` to help with [testing](https://docs.stripe.com/connect/testing#using-oauth).\n\nWith these two pieces of information in hand, you’re ready to create the OAuth link. We recommend showing a **Connect with Stripe** button that sends users to the `authorize_url` endpoint:\n\nThe Stripe endpoint should receive at least these three parameters:\n\n*   `response_type`, with a value of **code**\n*   Your `client_id`\n*   `scope`, with a value of **read\\_write**\n\nThe `scope` parameter dictates what your platform can do on behalf of the connected account, with **read\\_only** being the default.\n\nTo prevent CSRF attacks, add the `state` parameter, passing along a unique token as the value. We’ll include the `state` you gave us when we redirect the user back to your site. Your site should confirm the `state` parameter hasn’t been modified.\n\nHere’s how the above URL can be presented to your user to begin the connection, along with our [Connect with Stripe button](https://d37ugbyn3rpeym.cloudfront.net/docs/connect/Connect-with-Stripe-button.zip):\n\n[Connect with](https://connect.stripe.com/oauth/authorize?response_type=code&client_id=ca_FkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&scope=read_write)\n\n### Customize onboarding with OAuth parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can change the behavior of the onboarding flow by including additional URL parameters in your OAuth link. A complete list of available parameters is available in the [OAuth reference](https://docs.stripe.com/connect/oauth-reference).\n\n[\n\n## User creates or connects their account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#connect-users)\n\nAfter the user clicks the link on your site, they’ll be taken to Stripe’s website where they’ll be prompted to allow or deny the connection to your platform.\n\nThe process of creating a Stripe account is incorporated into our authorization flow. You don’t need to worry about whether or not your users already have accounts.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/oauth-select-account.536d5cf58d244be2ff9723b78c4817e8.png)\n\nThe user is logged in and can choose an account to connect to your platform directly.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/oauth-register.fa953a975b7eb6112dddf8faaff24f67.png)\n\nThe user needs to create an account.\n\n[\n\n## User is redirected back to your site![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#redirected)\n\nAfter the user connects their existing or newly created account to your platform, they are redirected back to your site, to the URL established as your platform’s `redirect_uri`.\n\nFor successful connections, we’ll pass along in the URL:\n\n*   The `scope` granted\n*   The `state` value, if provided\n*   An authorization code. The authorization code is short-lived, and can be used only once, in the POST request described in the next step.\n\nIf the authorization was denied by the user, they’ll still be redirected back to your site, but the URL includes an error instead of the authorization code:\n\n[\n\n## Platform completes the account connection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#token-request)\n\nInclude the provided authorization `code` in a POST request to Stripe’s token endpoint to complete the connection and fetch the user’s account ID:\n\n`curl https://connect.stripe.com/oauth/token \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"code\"=\"ac_123456789\" \\   -d \"grant_type\"=\"authorization_code\"`\n\nNote that you’ll make the request with your live or test secret API key, depending on whether you want to get a live or test access token back.\n\nStripe returns a response that includes the account ID (`stripe_user_id`) for the user:\n\n`{   \"token_type\": \"bearer\",   \"scope\": \"read_write\",   \"livemode\": false,   \"stripe_user_id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`, }`\n\nIf there was a problem, we instead return an error:\n\n`{   \"error\": \"invalid_grant\",   \"error_description\": \"Authorization code does not exist: {AUTHORIZATION_CODE}\" }`\n\nYou’re done! The user is now connected to your platform. Store the `stripe_user_id` in your database; this is the Stripe account ID for the new account. You’ll use this value to [authenticate](https://docs.stripe.com/connect/authentication) as the connected account by passing it into requests in the `Stripe-Account` header.\n\nIn your application, you might want to consider using a dedicated OAuth client library to simplify these steps. To find an OAuth library for your language or framework, you can refer to the [list of client libraries](https://oauth.net/code/) on the OAuth website.\n\nThe `refresh_token` can be used to [generate test access tokens](https://docs.stripe.com/connect/testing#creating-accounts) for a production `client_id` or to roll your access token. You should hold on to this value, too, as you’re only able to get it after this initial POST request.\n\n#### Note\n\n**Store the received account ID!** Platforms need this information to perform requests on the user’s behalf.\n\n## Revoked and revoking access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn `account.application.deauthorized` [event](https://docs.stripe.com/api#list_events) occurs when a user disconnects your platform from their account. By watching for this event via [webhooks](https://docs.stripe.com/connect/webhooks), you can perform any necessary cleanup on your servers.\n\nTo disconnect an account with access to the Stripe Dashboard from your platform, POST your `client_id` and the connected account’s ID to `connect.stripe.com/oauth/deauthorize`:\n\n`curl https://connect.stripe.com/oauth/deauthorize \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d client_id=\"ca_FkyHCg7X8mlvCUdMDao4mMxagUfhIwXb\" \\   -d stripe_user_id=acct_ON3nXtRQkhmUIQ`\n\nYou can use the API on your user’s behalf to accept payments, set up recurring billing, fetch account data, and so on.",
    "title": "Using OAuth with Standard accounts that your platform controls | Stripe Documentation",
    "description": "Use the OAuth connection flow to allow a Stripe user to connect to your platform.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/eftpos-australia",
    "markdown": "# eftpos Australia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about eftpos Australia, a common payment method in Australia.\n\n[Eftpos](https://www.eftposaustralia.com.au/) is Australia’s local debit card network. More than 90% of eftpos cards are co-branded with either Visa or Mastercard, meaning you can process these cards over either network supported by the card.\n\nStripe processes co-branded eftpos cards over eftpos, plus either Visa or Mastercard, in accordance with [least cost routing requirements](https://support.stripe.com/questions/supporting-dual-network-debit-cards-in-australia) and depending on the [type of transaction](https://docs.stripe.com/payments/eftpos-australia#identify-which-network-a-payment-was-processed-on).\n\n#### Note\n\nEftpos-only cards (also known as “proprietary eftpos cards”) only support in-person payments and can’t be used for online transactions.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEftpos is available to any business that uses Stripe in Australia, with the following exceptions:\n\n*   Massage parlors ([MCC](https://docs.stripe.com/connect/setting-mcc) 7297)\n*   Financial institutions—manual cash disbursements ([MCC](https://docs.stripe.com/connect/setting-mcc) 6010)\n*   Financial institutions—merchandise and services ([MCC](https://docs.stripe.com/connect/setting-mcc) 6012)\n*   Non-financial institutions—foreign currency, money orders and travelers’ checks. ([MCC](https://docs.stripe.com/connect/setting-mcc) 6051)\n*   Remote stored value load—merchant ([MCC](https://docs.stripe.com/connect/setting-mcc) 6530)\n*   Stored value card purchase/load ([MCC](https://docs.stripe.com/connect/setting-mcc) 6540)\n*   Wires, money orders ([MCC](https://docs.stripe.com/connect/setting-mcc) 4829)\n\n## Integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your integration can already [accept card payments](https://docs.stripe.com/payments/accept-a-payment), you can also accept eftpos without additional updates.\n\nEftpos is the default network for payment. Unless you change the default network, you must inform your customers that whenever they use a dual-network debit card, their payments might be processed through the debit network, regardless of the logo that appears when they enter their payment information.\n\nWe recommend you notify your customers based on the type of payment transaction:\n\n*   For single payment transactions, display a notification to the customer before the completion of the checkout process.\n*   For new recurring payment transactions, display a notification to the customer at the time of setup.\n*   For existing recurring payment transactions, notify your customers in advance of future transactions.\n\nYou must notify your customers about how network routing functions, and how payments processing works. You can use the suggested notification message below:\n\n#### Note\n\nNotwithstanding the payment brand logo displayed when you enter your payment information, whenever you use a dual-network debit card displaying eftpos and another payment brand, your payment (including any future recurring debit payments authorized by you) might be processed through either network. See the \\[Terms and Conditions\\] or \\[FAQs\\] for more information.\n\nWe recommend that you provide further information in your Terms and Conditions or FAQs on how network routing functions and how payments processing works. For guidelines on best practices, see the Australian Payments Network [MCR Online Notification Guidelines](https://www.auspaynet.com.au/resources/cards-and-devices).\n\n## Understand which network processes payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe dynamically routes between the international scheme (Visa or Mastercard) and eftpos, depending on the type of payment, technical availability and authorization rate considerations:\n\n*   If a payment requires [placing a hold on the card](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) (in other words, if there’s a delay between authorization and capture), or if it requires [3D Secure](https://docs.stripe.com/payments/3d-secure), Stripe always routes to the international scheme.\n*   For other types of payments, Stripe generally defaults to the eftpos network.\n\nIf you require that eftpos is never the default network for any payments, please contact [support](https://support.stripe.com/contact).\n\nTo identify which network a payment was processed on, inspect the [network](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-network) field on the [Charge](https://docs.stripe.com/api/charges/object) object associated with a successful [Payment Intent](https://docs.stripe.com/api/payment_intents/object):\n\n`{   \"id\": \"ch_1Ff52K2eZvKYlo2CWe10i0s7\",   \"object\": \"charge\",   ...   \"payment_method_details\": {     \"card\": {       \"brand\": \"visa\",       ...       \"network\": \"eftpos_au\"     },     \"type\": \"card\"   } }`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Migrating from Charges API to the Payment Intents API](https://docs.stripe.com/payments/payment-intents/migration)\n*   [Available eftpos test cards](https://docs.stripe.com/testing#cards)",
    "title": "eftpos Australia | Stripe Documentation",
    "description": "Learn about eftpos Australia, a common payment method in Australia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/disputes/prevention/identifying-fraud",
    "markdown": "# Identifying potential fraud | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the most common fraud indicators.\n\nBecause Stripe users are responsible for fulfilling orders for customers and possess the most information about their customer at the time of purchase, they’re best equipped to determine whether or not a payment is potentially fraudulent. There are external indicators that indicate a payment might be fraud, such as [Early Fraud Warnings](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings), but fraud activity also has many implicit indicators that by themselves don’t unambiguously signal fraud. However, the existence of several of these indicators at the same time can more clearly suggest a payment is fraudulent.\n\nWith [Radar](https://docs.stripe.com/radar \"Radar\") for Fraud Teams, card payments that have an elevated risk of fraud are automatically placed into [review](https://docs.stripe.com/radar/reviews). However, you might want to create additional rules based on the following factors to place additional payments into review—or block them completely. Although our recommendations can help prevent disputes and fraud, they can’t eliminate them completely. We want our users to be as informed as possible, both so that they can accept or refund any payments they believe are fraudulent and so they’re equipped to accept the [financial responsibility](https://stripe.com/terms#chargebacks) of any suspicious payments that enter their Stripe account.\n\n## Common types of fraud indicators![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are many types of fraud indicators, some of which are easy to identify such as false numbers or email addresses, other types may be more intuitive and nuanced, such as a conversation with a customer that seems off. Having an understanding of the various ways fraudsters use false information to make fraudulent transactions will better help you to protect against them. Some of the most common types of fraud indicators are:\n\n*   Use of likely false information (for example, fake phone numbers and email addresses like **asdkf12495@freemail.example.com**).\n*   Inconsistencies in customer details across multiple purchases (for example, using the same e-mail address but a different name for another payment).\n*   Communication that doesn’t sounds quite right. Fraudsters often use a canned response that is sent to multiple sellers using common phrases. If any communication appears scripted, use a search engine (putting the short phrase in quotes) to see if it’s been used elsewhere (for example, [this particular phrase](https://www.google.com/search?sourceid=gmail&rls=gm&q=%22%20I%20%20would%20like%20to%20proceed%20with%20the%20payment.%20I%27m%20buying%20it%20for%20someone%20special%20as%20a%20gift.%20%22&gws_rd=ssl) has been used many times).\n*   Unusually large orders (for example, multiples of the same item, only your most expensive merchandise, expensive items or total order amount that seems inconsistent with normal customer behavior).\n*   Many payments (including those that have been declined) made with:\n    *   The same card but different shipping addresses.\n    *   Many cards that use the same shipping address.\n    *   The same card from the same IP address.\n    *   The same customer name/email address.\n    *   If each failed attempt is associated with a different credit card, any successful payment carries a much greater risk for fraud.\n    *   Similar or the same card numbers, especially over a short duration and for smaller amount. This is especially true for crowdfunding/fundraising sites.\n*   Any requests to:\n    *   Split a large order into multiple payments across different cards that don’t share the same verified billing address information.\n    *   Process a payment manually, either through the Dashboard or your store. Fraudsters may make this request in order to have the charge run with your local IP address instead of their own.\n    *   Charge a card more than the required amount (known as an “overcharge”) and pay out a third-party (for example, driver, shipper or freight company) using a different payment method (for example, cash, money order).\n    *   Charge a card and then provide a refund outside the card network (for example, check, wire transfer).\n\nDeclined payments can provide valuable information and should also be regularly reviewed.\n\n## Shipping physical goods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFraudsters can take advantage of various shipping methods to steal physical goods. When shipping products be sure to:\n\n*   Check whether the shipping and billing addresses match. Although a difference in address by itself doesn’t indicate fraud (for example, the customer might have purchased a gift), it indicates that the charge should be looked at more carefully. If the addresses do match and the customer is using a credit card from the US, Canada, or UK, check to see if the postal code and street address verifications passed.\n*   Watch for customers who ask to change the shipping address after the order is placed. Fraudsters may use a legitimate address to obtain a successful charge but later ask that products be shipped elsewhere.\n*   Evaluate rush orders or requests for overnight delivery (which would allow fraudsters to take advantage of timing).\n*   Review the credit card’s country of origin (the country in which it was issued) in a charge’s payment detail in the Stripe Dashboard. The billing address provided should match this country. Where the shipping country that doesn’t match the card’s origin or is a country typically not shipped to, it’s important to take extra steps to verify the legitimacy of the charge.\n*   Ensure that shipping methods are appropriate, especially for overnight shipping at a high cost. People using stolen credit cards don’t usually worry about how expensive the shipping is and want goods right away, before the card number is reported as stolen or compromised. Never agree to use a customer’s “preferred shipper” or agree to pay a third party shipping company on your customer’s behalf; these are usually a second front for fraud.\n*   Consider instituting a 24-48 hour shipping delay for high-value orders or shipments to non-verified addresses or first-time customers.\n*   If you have a verified billing postal code, make sure the shipping label generated by your shipper displays this postal code after you enter the address. Some fraudsters provide a valid billing postal code, but the rest of the address (street, city, and state) is fraudulent, and automated systems such as USPS self-service often autocorrect the postal code you enter—effectively changing it from the verified billing postal code to the fraudster’s.\n*   Use of international cards or orders with international shipping addresses.\n*   Be aware of high-risk shipping destinations.\n*   Take extra care when shipping to a [freight forwarder](http://www.forwarders.com/home/directories.html).\n\nIf you’d like to familiarize yourself with the postal code prefixes in the US by region, use this [reference map](http://upload.wikimedia.org/wikipedia/commons/thumb/2/24/ZIP_Code_zones.svg/1024px-ZIP_Code_zones.svg.png).\n\nGenerally, Stripe can’t see the shipping address customers provide and shipping information isn’t necessary to successfully accept a payment. However, you can improve Stripe’s fraud detection by sending the shipping address when [creating a payment](https://docs.stripe.com/api/payment_intents/create).\n\n## Digital goods or services![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") that misuse digital goods or services are more likely to be using stolen credit cards. It is very important to collect and verify as many card details as possible, including CVC, street address, and postal code. Consider rejecting charges that fail the CVC and postal code checks. As a general rule when selling digital goods or services, be sure to:\n\n*   Be aware of customers sending spam using a product for messaging or making many purchases in a short period of time for downloadable content or “in-game” items.\n*   Watch for multiple accounts using similar email addresses or the same credit card. You can include this in your review queue through a [review rule](https://dashboard.stripe.com/fraud/rules).\n*   Watch for multiple charges to the same email address in rapid succession. You can include this in your review queue through a [review rule](https://dashboard.stripe.com/fraud/rules).\n*   Watch for unexpected or significant changes in account activity. If the purchase frequency or dollar amount of payments for an account increases significantly, it may be an indication of fraudulent activity.\n*   View evidence about the payments, including IP address, email logs, usage logs (that is, did they log in and actually use the service?), and so on. Pass this information to us, so that you can view it as you review a charge.\n\n## Donations or crowdfunding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure the donation makes sense for your campaign. If you’re running a small, personal campaign and you receive a very large donation from an unknown individual, scrutinize it carefully. Consider refunding if you can’t verify the individual making the donation.\n\nIf you receive a large donation and the donor reaches out to you to say they made a mistake and only meant to donate part of the amount, be cautious. Fraudsters sometimes make a large donation (such as 1,000 USD) and later tell you they only meant to donate a smaller amount (like 100 USD) and ask you to refund the rest. This is done to test a stolen card’s credit limit. If this scenario appears, it may be prudent to refund the entire donation.\n\nMonitor your declined payments. Many of them that used different cards in rapid succession indicate a fraudster is testing stolen card numbers. If it does look like someone is testing cards on your website, consider adding a delay or implementing a [CAPTCHA](http://captcha.net/) during checkout to slow them down. This usually encourages a card tester to move on.\n\n## Mark a payment as fraudulent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can mark a payment as fraudulent using either the Stripe API or the Dashboard. For instructions, see the [Feedback on risk evaluations](https://docs.stripe.com/radar/risk-evaluation#feedback-on-risk-evaluations) section in the Risk evaluation guide.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Common types of fraud](https://docs.stripe.com/disputes/prevention/fraud-types)\n*   [Verification checks](https://docs.stripe.com/disputes/prevention/verification)\n*   [Best practices for preventing fraud](https://docs.stripe.com/disputes/prevention/best-practices)",
    "title": "Identifying potential fraud | Stripe Documentation",
    "description": "Learn about the most common fraud indicators.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/confirm_sofort_payment",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/sandboxes",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## SandboxesBeta\n\n## Test Stripe functionality in an isolated environment.\n\n#### Beta\n\nSandboxes is currently in private beta. Join [Stripe Insiders](https://insiders.stripe.dev/c/sandboxes/6), our new early access program, to register your interest in joining the Sandboxes private beta.\n\nA sandbox is an isolated environment that replaces test mode. You can use your sandbox to test all available Stripe functionality in your business account, and experiment with new features without affecting your live integration. When testing in a sandbox, the payments you create aren’t processed by card networks or payment providers, and funds aren’t moved.\n\n## Key features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSandboxes provide the following key features:\n\n*   **Simulate Stripe events to test without real money movement**: Use your sandbox to test payments functionality without real money movement. Create payments in your business account to accumulate a fake balance or use test helpers to simulate external events.\n    \n*   **Scale isolated sandboxes for teams**: Your team can work in separate sandboxes to make sure that data and actions are completely isolated from other sandboxes. Changes made in one sandbox don’t interfere with changes in another. Your business account can have up to six sandboxes at a time.\n    \n*   **Test in the Dashboard or the CLI**: Access your sandbox from the Dashboard or the [Stripe CLI](https://docs.stripe.com/cli-preview-plugin). Test Stripe functionality directly in the Dashboard or use familiar CLI commands and fixtures.\n    \n\n## Test mode data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour test mode data is still available in your Legacy Test mode sandbox. We recommend using sandboxes that contain more features rather than using Legacy Test mode. The following features are only available in sandboxes:\n\n*   Create and delete a sandbox.\n*   Assign access to select users. All users who have access to your live business account have access to the Legacy Test mode sandbox.\n*   Verify that settings changes don’t affect your live business. Changing some settings in Legacy Test mode might affect settings for your live business.\n\n## Manage sandboxes through the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nClick **Sandboxes** for an overview of your sandboxes. Select **Manage Sandboxes** to manage your sandboxes, view additional details, and take further actions (for example, managing who has access to your sandbox and managing the API keys associated with your sandbox).\n\n## Test in a sandbox![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLearn more about [how to test](https://docs.stripe.com/testing) in a sandbox, including simulating payments and using test cards.\n\n## Default Sandbox![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Default Sandbox is automatically created for your business.\n\nEmail us at [sandboxes-feedback@stripe.com](mailto:sandboxes-feedback@stripe.com) with feedback about Sandboxes.",
    "title": "Sandboxes | Stripe Documentation",
    "description": "Test Stripe functionality in an isolated environment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/docs/js/element/payment_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payouts/alternative-currencies",
    "markdown": "# Alternative currencies | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to pay out in currencies other than your primary currency.\n\n## Primary and alternative currency payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor businesses with international operations that need to settle and pay out in multiple currencies or to multiple countries, Stripe enables payouts for select currencies and countries in addition to your primary currency and domestic bank.\n\nExamples:\n\n*   The primary currency for Stripe accounts in France is EUR. All other currencies fall under alternative currencies.\n*   The primary currency for Stripe accounts in Hong Kong is HKD. All other currencies fall under alternative currencies.\n\n## Alternative currency payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt Stripe, a domestic payout is when you pay out to a bank account that’s domiciled in the same country as your Stripe account. You can make domestic payouts using the primary currency for a Stripe account or with an alternative currency. For example, when you pay out in EUR from an account based in France to a France-domiciled bank account, it’s a domestic payout in the primary currency. However, if you make a payout in any other currency to a France-domiciled bank account, it’s a domestic payout but in an alternative currency.\n\nYou can also pay out to certain non-domestic bank accounts in the account’s local currency, subject to applicable fees. For example, when you pay out in USD from a France-based account to a US-domiciled bank account, the non-domestic payout is subject to the fees listed below.\n\nWith alternative currency payouts, it’s easier to hold funds in up to 18 supported currencies needed to pay suppliers, process refunds, and so on, without having to re-convert funds or use third-party sites.\n\nAlternative currency payouts are available in select currencies for businesses in Hong Kong, Singapore, Australia, and Europe, including the United Kingdom.\n\nIf your business is based in a country that’s not currently eligible for alternative currency payouts, [we’d love to hear from you](https://support.stripe.com/) as we work to expand.\n\n## Setting up your bank account for alternative currency payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo enable alternative currency payouts, you must configure the currencies and bank accounts in your [Dashboard](https://dashboard.stripe.com/account/payouts).\n\nFirst, in your Payout Settings, you need to select the settlement currency you want to receive funds in using the **Manage currencies** button to start accumulating a balance in that currency.\n\nA settlement currency is the currency your bank account uses, and you must select a settlement currency before adding a bank account in that currency. After you add a bank account in that currency, you can receive the accrued balance.\n\nIf you select a settlement currency but don’t add a bank account for that currency, funds still accrue and remain in the account balance in the alternative currency until you add a supported bank account. Additionally, removing a bank account from your Dashboard doesn’t disable the settlement currency, so you can still accrue a balance in that currency. You need to disable a currency to stop accruing a balance in that currency.\n\n### Presentment currency payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the presentment currency differs from any of your enabled settlement currencies, the currencies accepted by any of your bank accounts or debit cards, we automatically convert the payment to your default settlement currency before transferring the funds. View [Currency conversions](https://docs.stripe.com/currencies/conversions) for details.\n\n### Connected Accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can enable your connected accounts to pay out in alternative currencies using the toggle under “Alternative currency payouts” in your [Connect payout settings](https://dashboard.stripe.com/settings/connect/payouts).\n\n## Payout fees & minimum payout amount for alternative currency payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe bills alternative currency payout fees asynchronously in the currency matching the payout. For example, a payout submitted today bills the following day. To learn more about how Stripe handles fees in other currencies, see [conversion on Stripe fees](https://docs.stripe.com/currencies/conversions#conversion-stripe-fees).\n\nLoading a table of settlement currencies",
    "title": "Alternative currencies | Stripe Documentation",
    "description": "Learn how to pay out in currencies other than your primary currency.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/access-data-in-warehouse/cloud-storage/azure-blob-storage",
    "markdown": "# Export Data to Azure Blob Storage\n\n## Export Data to Azure Blob StorageBeta\n\n## Automate recurring data exports from Stripe to your Azure Blob Storage container.\n\n#### Beta\n\nOur Azure Blob Storage destination is currently in private beta and doesn’t include a UI. Before beginning integration steps, please reach out to [data-pipeline-beta@stripe.com](mailto:data-pipeline@stripe.com) to confirm access.\n\n## Azure Blob Storage Destination![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Azure Blob Storage destination delivers copies of all your Stripe data as Parquet files into your Azure Blob Storage bucket. It contains a directory of files for each table, delivered, and updated every 6 hours.\n\n[](#prerequisites)\n\nBefore starting the integration, make sure you have access to:\n\n1.  Create a new Azure Storage account.\n2.  Create a new Azure Storage container.\n3.  Access the Stripe Dashboard as an admin.\n\n[](#storage-account)\n\n1.  On the [Storage accounts](https://portal.azure.com/#view/HubsExtension/BrowseResource/resourceType/Microsoft.Storage%2FStorageAccounts) page, click **\\+ Create**.\n2.  Choose a Subscription and Resource group.\n3.  Enter a Storage account name that’s unique across all storage accounts in Azure.\n\n#### Note\n\nExample: stripe-unique-name or stripe-asd5dwju8awkwe. Naming allows only lowercase letters and numbers.\n\n1.  Choose a Region.\n\n#### Caution\n\nWe don’t support data regions in India at this time. Let us know if you have questions about support for your desired region.\n\n1.  Choose a **Performance** level and **Redundancy** option.\n2.  Click **Review + create**.\n3.  Review your settings and click **Create**.\n4.  After creating the account, click **Go to resource**. Resource creation can take a moment.\n\n[](#create-service-account)\n\n1.  Click **Data storage** > **Containers**.\n2.  Click **\\+ Container**.\n3.  Choose a name for your container (for example, “stripe-data.”)\n4.  Make sure to disable anonymous access level (no anonymous access).\n5.  Click **Create**.\n\n[](#access-key)\n\n1.  From within your Storage account, click **Overview**.\n2.  Stripe needs the **Storage account name**, **Resource group**, **Subscription ID**.\n3.  Stripe needs the Container name created from **Data storage** > **Containers**.\n4.  Stripe needs an Access Key located on **Security + networking** > **Access keys**.\n5.  Make sure the **Storage account name** is correct for the account you intend to provide Stripe access to.\n6.  Click **Show** on either **key1** or **key2**, and use the copy to clipboard icon next to the key. Either key works, though rotating a key without updating Stripe’s copy can break your integration.\n\n[](#establishing-connection)\n\n1.  This beta requires approval for access, if you haven’t done so yet, fill out the beta form at the bottom of this page.\n2.  After you complete all of the steps above, you need to share your account details with the Data Pipeline team so we can manually onboard you to the beta.\n3.  Reach out to [data-pipeline@stripe.com](mailto:data-pipeline@stripe.com) to receive instructions for securely sharing your account details.",
    "title": "Export Data to Azure Blob Storage | Stripe Documentation",
    "description": "Automate recurring data exports from Stripe to your Azure Blob Storage container.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/migration/invoice-states",
    "markdown": "# Invoices API updates | Stripe DocumentationThe Stripe Docs logo\n\n## Stripe has recently improved the clarity and expressiveness of the statuses that an invoice can have.\n\nIn previous versions of the Stripe API, [Invoices](https://docs.stripe.com/api/invoices \"invoices\") didn’t have statuses. Instead, there was a series of booleans, like `closed`, `paid`, and `forgiven`.\n\nWe’ve introduced statuses on invoices to better correlate Stripe invoices with finance workflows. Now, all [Invoice objects](https://docs.stripe.com/api/invoices/object) have a `status` property. The `status` field can have the values `draft`, `open`, `paid`, `void`, and `uncollectible`.\n\n*   The `draft` status indicates that an invoice is mutable.\n*   The `open` status indicates that the invoice has been finalized, is no longer mutable, and is ready for payment.\n*   The `paid` status indicates that the invoice has been paid in full.\n*   The `void` status indicates that the invoice is no longer valid.\n*   The `uncollectible` status indicates that the invoice is very unlikely to be paid, and could be considered a bad debt.\n\nFor more details on these statuses, and the transitions between them, see the [invoicing](https://docs.stripe.com/invoicing/overview) guide.\n\n## Sample invoice timelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section presents sample timelines for both [one-off](https://docs.stripe.com/invoicing/dashboard#create-invoice) and [subscription](https://docs.stripe.com/billing/invoices/subscription) invoices, showing the statuses that both types of invoices can proceed through.\n\n### One-off invoice example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere is an example timeline that a one-off invoice could go through. This sequence of events presents no changes from the pre-existing invoicing timeline, except that Stripe now exposes a `status` field to more clearly represent an invoice’s status.\n\n*   **Nov 16**: Through the API, you might create an invoice that represents shipping 12 widgets to a customer. Stripe sends an `invoice.created` [webhook](https://docs.stripe.com/webhooks \"webhook\"), notifying you of the recently-created invoice. Looking at the API, you see that the invoice has `status='draft'`.\n*   **Nov 26**: After reviewing the invoice, an accountant finalizes the invoice using the Stripe Dashboard. While the invoice is being finalized, its status is updated to `status='open'` and the `finalized_at` field is set. Stripe sends an `invoice.finalized` webhook, notifying you that the invoice was finalized.\n*   **Nov 26**: Seconds later, Stripe emails the invoice, and begins retries. To help your CRM system keep track of when invoices are sent, Stripe sends an `invoice.sent` webhook each time it’s sent.\n*   **Dec 01**: Your customer clicks the link in the email and pays the invoice using a Hosted Invoice Payment page. Unfortunately, they pay with an expired credit card. Their payment fails, and Stripe sends the `invoice.payment_failed` webhook notifying you of this failure.\n*   **Dec 03**: With an updated credit card, the customer tries again. This time, the payment succeeds! Stripe sends the `invoice.paid` webhook notifying you of this success, saves the card, and sets the invoice to `status='paid'`. If configured, Stripe also immediately emails your customer a receipt showing that the invoice was paid.\n\n### Subscription invoice example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere is an example timeline for an invoice generated by a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\").\n\n*   **Nov 13**: Through the dashboard, you create a recurring subscription for a customer, configured for [charging automatically](https://docs.stripe.com/invoicing/automatic-charging). The subscription has a 20 day trial, so the first invoice will be in 20 days (Dec 03). Stripe sends a `customer.subscription.created` webhook.\n\n*   **Nov 30**: Three days before the trial ends, Stripe [sends](https://docs.stripe.com/billing/subscriptions/trials) a `customer.subscription.trial_will_end` webhook. Three days before charging the credit card would be a good time to send a trial reminder email.\n\n*   **Dec 03**: At the end of the trial, a `status='draft'` invoice is created. Stripe sends an `invoice.created` webhook, notifying you of the recently-created invoice.\n*   **Dec 03**: [Approximately one hour](https://docs.stripe.com/billing/subscriptions/webhooks) later, the invoice is [automatically finalized](https://docs.stripe.com/invoicing/overview). This entails updating the `status` as `'open'`, setting `finalized_at`, and sending an `invoice.finalized` webhook.\n*   **Dec 03**: Soon after, Stripe attempts to charge the customer’s card on file. The customer’s payment succeeds. Stripe sends the `invoice.paid` webhook to notify you of this success, and sets the invoice to `status='paid'`.\n\n## New API methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe has released a [suite of new APIs](https://docs.stripe.com/api#invoices) for managing the status of an invoice. The new options, detailed in the [upgrade checklist](#upgrade-checklist) below, are:\n\n*   **Send an invoice**: Stripe automatically sends and re-sends invoices through email. This endpoint, available in the Stripe API, allows you to send the invoice to your customer whenever you want.\n*   **Finalize an invoice**: In the example above, the accountant finalized the invoice using the Stripe Dashboard. This functionality is also available in the Stripe API.\n*   **Void an invoice**: Once an invoice has been finalized, it can’t be deleted. _Voiding_ is used to indicate that the invoice was issued in error. You could consider voiding an invoice with an error in your company’s name, and then creating an entirely new invoice to replace it.\n*   **Delete a draft invoice**: This action is applicable only to draft invoices. Deleted invoices aren’t visible through your Dashboard or the API. They cannot be un-deleted.\n*   **Mark an invoice uncollectible**: Your accounting department might want to maintain a register of “doubtful debts” - that is, a list of invoices that are deemed to be uncollectible. You can use this API to tag applicable invoices.\n\n## Upgrade checklist ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following sections list functional changes in the `Invoice` object, and in invoice-related webhooks.\n\n### `Invoice` object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe has added several fields to the `Invoice` object to help users better understand its status and behavior.\n\n#### `finalized_at`\n\nThe new `finalized_at` field indicates the time at which the invoice was finalized. This is available for requests made on all API versions.\n\n#### `status`\n\nThe new `status` field is available for requests made on all API versions. This replaces many booleans on the invoice, such as:\n\n*   For requests made with the 2018-11-08 version and later, the `paid=true` boolean is removed. Check for the equivalent `status='paid'` instead.\n*   For requests made with the 2018-11-08 version and later, the `forgiven=true` boolean is removed. Check for the equivalent `status='uncollectible'` instead.\n\n#### `auto_advance`\n\nThe new `auto_advance` field indicates whether automatic collection is active. For the `'draft'` and `'open'` statuses, the `auto_advance` field can be updated. Otherwise, `auto_advance` will always be `false`.\n\nWhen `auto_advance=false`, Stripe will _not_:\n\n*   Automatically issue draft invoices\n*   Automatically send the first (or reminder) emails for `collection_method='send_invoice'` invoices\n*   Automatically attempt the first (or retry) payments for `collection_method='charge_automatically'` invoices\n\nEven with `auto_advance=false`, Stripe automatically reconciles inbound credit transfers. If a transfer references an invoice, the credit transfer is reconciled to that invoice. If an invoice isn’t provided, Stripe searches for unpaid invoices and tries to pay them.\n\nFor invoices with the statuses `'uncollectible'`, `'void'`, and `'paid'`, the `auto_advance` field is always `false`.\n\nOn versions prior to 2018-11-08, the `closed` field is still present, and equal to the inverse of `auto_advance`. For example, `auto_advance=true` is equivalent to `closed=false` (and vice versa). Invoices created using prior API versions will continue to default to `closed=false`.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith this update, we’ve introduced three new webhooks:\n\n*   `invoice.finalized`: Sent when an invoice is finalized.\n*   `invoice.voided`: Sent when an invoice is voided.\n*   `invoice.marked_uncollectible`: Sent when an invoice is marked uncollectible.\n\nThe existing `invoice.created` webhook is sent upon creating an invoice. If your webhook handler needs to differentiate between one-off invoices and invoices generated by a subscription, check for the existence of the `invoice.subscription` property in the webhook body.\n\nThese pre-existing webhooks are unchanged:\n\n*   `invoice.sent`: Sent when an invoice is emailed to a user, either automatically, through the [API](https://docs.stripe.com/api/invoices/send), or in the Dashboard.\n*   `invoice.deleted`: Sent when a `draft` invoice is deleted, either through the [API](https://docs.stripe.com/api/invoices/delete) or in the Dashboard.\n*   `invoice.paid` or `invoice.payment_failed`: Sent when an attempt to pay an invoice succeeds or fails.",
    "title": "Invoices API updates | Stripe Documentation",
    "description": "Stripe has recently improved the clarity and expressiveness of the statuses that an invoice can have.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/link/payment-element-link",
    "markdown": "# Link in the Payment Element\n\n## Link in the Payment Element lets your customers check out faster.\n\nLet your customer check out faster by using [Link](https://docs.stripe.com/payments/link/what-is-link) in the [Payment Element](https://docs.stripe.com/payments/payment-element). You can autofill information for any logged-in customer already using Link, regardless of whether they initially saved their information in Link with another business. The default Payment Element integration includes a Link prompt in the card form. To manage Link in the Payment Element, go to your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n\n![Authenticate or enroll with Link directly in the Payment Element during checkout](https://b.stripecdn.com/docs-statics-srv/assets/link-in-pe.2efb5138a4708b781b8a913ebddd9aba.png)\n\nCollect a customer email address for Link authentication or enrollment\n\n## Integration options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are two ways you can integrate Link with the Payment Element. Of these, Stripe recommends passing a customer email address to the Payment Element if available. Remember to consider how your checkout flow works when deciding between these options:\n\n| Integration option | Checkout flow | Description |\n| --- | --- | --- |\n| [Pass a customer email address](https://docs.stripe.com/payments/link/add-link-elements-integration?link-integration-type=before-payment) to the Payment Element Recommended | *   Your customer enters their email address before landing on the checkout page (in a previous account creation step, for example).<br>*   You prefer to use your own email input field. | Programmatically pass a customer email address to the Payment Element. In this scenario, a customer authenticates to Link directly in the payment form instead of a separate UI component. |\n| [Collect a customer email address](https://docs.stripe.com/payments/link/add-link-elements-integration?link-integration-type=collect-email) in the Payment Element | Your customers enter their email and authenticate or enroll with Link directly in the Payment Element during checkout. | If a customer hasn’t enrolled with Link and they choose a supported payment method in the Payment Element, they’re prompted to save their details using Link. For those who have already enrolled, Link automatically populates their payment information. |\n\n## The defaultValues parameter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re planning on passing customer email addresses to the Payment Element, use the [defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues) object to specify a customer’s [billingDetails](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues-billingDetails). Prefilling as much information as possible streamlines the checkout process:\n\n`// Pass in defaultValues to prefill consumer information const paymentElement = elements.create('payment', {   defaultValues: {     billingDetails: {       name: 'John Doe',       email: 'john.doe@example.com',       address: {         city: 'New York',         country: 'US',         line1: '123 Main St',         postal_code: '10001',         state: 'NY'       }     }, }});`\n\n## Automatically prefill Link for your customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSave your customers from re-entering details to sign up for or log into Link when they’ve already provided them elsewhere on your checkout page. Link includes a prefill tool that detects customer information such as email or phone number in your checkout, then automatically populates corresponding Link fields. This convenience encourages your customers to use Link, which has been shown to increase the likelihood that a customer successfully completes checkout. Prefilled values are never stored unless the customer completes a Link sign-up.\n\nWhen a customer enters information such as their email, phone number, or name on the same checkout page as the Element where Link is enabled, Link’s prefill tool can:\n\n*   Populate the Link sign-up form with the customer email/phone/name. The customer must proceed with Link sign-up to create an account.\n*   Populate the Link login with the customer’s email when they already have a Link account, so they can just enter the one time password.\n\n### Enable the prefill tool![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Link prefill tool requires no changes to your existing integration. The prefill tool is on by default when you enable Link. You can disable the prefill tool in the [Link settings](https://dashboard.stripe.com/settings/link#features) on your Dashboard at any time.\n\n#### How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer loads a page containing the Element with Link enabled and the `defaultValue` parameter hasn’t already provided Stripe customer data, our system analyzes the surrounding checkout page to locate input fields containing details that match Link sign-up or login fields. Link only looks for information applicable to creating or reusing a Link account.\n\nIf Stripe detects such data fields, we use the values to prefill the Link login with email, or prefill sign-up fields with customer information required to create a Link account. We don’t store the prefilled values on the browser using cookies or local storage or any other service. We only hold the values temporarily in local memory for use in the context of the session.\n\nFor current Link users, we use the prefilled information to trigger a login to Link, and don’t store any information from the page.\n\nCustomers who haven’t previously created a Link account can choose whether to use the prefilled information to sign up for Link. We only store the prefilled information if the customer takes action and provides consent to create a Link account.",
    "title": "Link in the Payment Element | Stripe Documentation",
    "description": "Link in the Payment Element lets your customers check out faster.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/buttongroup",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `ButtonGroup` component to your app:\n\n`import {ButtonGroup} from '@stripe/ui-extension-sdk/ui';`\n\n`<ButtonGroup>   <Button     onPress={() => {       console.log('Filter');     }}   >     Filter   </Button>   <Button     onPress={() => {       console.log('Export');     }}   >     Export   </Button>   <Button type=\"primary\"     onPress={() => {       console.log('Save');     }}   >     Save   </Button> </ButtonGroup>`\n\n### ButtonGroup props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>One or more Button components. |\n| `collapse` | Optional<br><br>`(\"auto\" \\| \"none\") \\| undefined`<br><br>Controls whether or not buttons within the group collapse when there isn’t enough space to display them without overflowing. |\n| `direction` | Optional<br><br>`(\"row\" \\| \"column\") \\| undefined`<br><br>Controls which axis the button group should span. |\n| `menuTrigger` | Optional<br><br>`React.ReactNode`<br><br>Allows overriding the trigger element used for an overflow menu. Must be a component that supports press events. |\n\n## Overflow collapsing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nButton groups responsively adapt to the space available in their container by collapsing buttons into an overflow menu. Primary buttons collapse after any other buttons, and larger buttons collapse first.\n\n`<ButtonGroup>   <Button     onPress={() => {       console.log('Filter');     }}   >     Filter   </Button>   <Button     onPress={() => {       console.log('Export');     }}   >     Export   </Button>   <Button type=\"primary\"     onPress={() => {       console.log('Save');     }}   >     Save   </Button> </ButtonGroup>`\n\n### Disabling collapse behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to turn off collapsing behavior, you can specify the `collapse=\"none\"` prop value.\n\n`<ButtonGroup collapse=\"none\">   <Button     onPress={() => {       console.log('Filter');     }}   >     Filter   </Button>   <Button     onPress={() => {       console.log('Export');     }}   >     Export   </Button>   <Button type=\"primary\"     onPress={() => {       console.log('Save');     }}   >     Save   </Button> </ButtonGroup>`\n\n## Customizing the overflow menu trigger ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can replace the default overflow menu trigger with any element that supports `onPress` events. To adhere to best practices, remember to add an appropriate `aria-label` to your trigger element if it doesn’t contain descriptive text.\n\n`<ButtonGroup   menuTrigger={     <Button>More actions</Button>   } >   <Button     onPress={() => {       console.log('Filter');     }}   >     Filter   </Button>   <Button     onPress={() => {       console.log('Export');     }}   >     Export   </Button>   <Button     type=\"primary\"     onPress={() => {       console.log('Save');     }}   >     Save   </Button> </ButtonGroup>`",
    "title": "ButtonGroup | Stripe Documentation",
    "description": "Use ButtonGroup to handle the layout for multiple buttons and collapse them into an overflow menu when space is limited.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/usage_records/object",
    "markdown": "# The Usage Record object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The usage quantity for the specified date.\n    \n*   The ID of the subscription item this usage record contains data for.\n    \n*   The timestamp when this usage occurred.\n    \n\n### More attributes\n\n```\n{  \"id\": \"mbur_1IJ3zE2eZvKYlo2CsJAtf1Jl\",  \"object\": \"usage_record\",  \"livemode\": false,  \"quantity\": 100,  \"subscription_item\": \"si_IutmSSymhsWA5i\",  \"timestamp\": 1571252444}\n```\n\n## [Create a usage record](https://docs.stripe.com/api/usage_records/create)\n\nCreates a usage record for a specified subscription item and date, and fills it with a quantity.\n\nUsage records provide `quantity` information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the [metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing) plan, Stripe helps you send accurate invoices to your customers.\n\nThe default calculation for usage is to add up all the `quantity` values of the usage records within a billing period. You can change this default behavior with the billing plan’s `aggregate_usage` [parameter](https://docs.stripe.com/api/plans/create#create_plan-aggregate_usage). When there is more than one usage record with the same timestamp, Stripe adds the `quantity` values together. In most cases, this is the desired resolution, however, you can change this behavior with the `action` parameter.\n\nThe default pricing model for metered billing is [per-unit pricing](https://docs.stripe.com/api/plans/object#plan_object-billing_scheme). For finer granularity, you can configure metered billing to have a [tiered pricing](https://stripe.com/docs/billing/subscriptions/tiers) model.\n\n### Parameters\n\n*   The usage quantity for the specified timestamp.\n    \n*   Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://docs.stripe.com/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value.\n    \n*   #### \n    \n    timestampstring | timestamp\n    \n    The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`, and must not be in the future. When passing `\"now\"`, Stripe records usage for the current time. Default is `\"now\"` if a value is not provided.\n    \n\n### Returns\n\nReturns the usage record object.\n\nPOST /v1/subscription\\_items/:id/usage\\_records\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_IutmSSymhsWA5i/usage_records \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d quantity=100 \\  -d timestamp=1571252444\n```\n\n```\n{  \"id\": \"mbur_1IJ3zE2eZvKYlo2CsJAtf1Jl\",  \"object\": \"usage_record\",  \"livemode\": false,  \"quantity\": 100,  \"subscription_item\": \"si_IutmSSymhsWA5i\",  \"timestamp\": 1571252444}\n```\n\n## [List all subscription item period summaries](https://docs.stripe.com/api/usage_records/subscription_item_summary_list)\n\nFor the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).\n\nThe list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` summaries, starting after summary `starting_after`. Each entry in the array is a separate summary object. If no more summaries are available, the resulting array is empty.\n\nGET /v1/subscription\\_items/:id/usage\\_record\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sis_1Bnyrd2eZvKYlo2CuVcUbXln\",          \"object\": \"usage_record_summary\",          \"invoice\": \"in_1Bnyrd2eZvKYlo2CSV57GLV8\",          \"livemode\": false,          \"period\": {            \"end\": 0,            \"start\": null          },          \"subscription_item\": \"si_18UXa82eZvKYlo2CbYoIEZVv\",          \"total_usage\": 1        }      ]    }    {...}    {...}  ],}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Usage Record object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/webhooks/quickstart?lang=node",
    "markdown": "# Set up and deploy a webhook\n\nSearch the docs or ask a question",
    "title": "Set up and deploy a webhook | Stripe Documentation",
    "description": "Learn how to set up and deploy a webhook to listen to events from Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/textarea",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `TextArea` component to your app:\n\n`import {TextArea} from '@stripe/ui-extension-sdk/ui';`\n\n`<TextArea   label=\"Description\"   placeholder=\"Acme Inc was founded in…\"   defaultValue=\"Stripe Apps lets you embed custom…\"   onChange={(e) => {     console.log(e.target.value);   }} />`\n\n### TextArea props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `autoComplete` | Optional<br><br>`string \\| undefined`<br><br>Specifies one of the possible autocomplete behaviors. |\n| `autoFocus` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, React will focus the element on mount. |\n| `cols` | Optional<br><br>`number \\| undefined` |\n| `css` | Optional<br><br>`Object`<br><br>Related types: [CSS](#css). |\n| `defaultValue` | Optional<br><br>`string \\| undefined`<br><br>Specifies the initial value that a user can change. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>Descriptive text that will be rendered adjacent to the control’s label. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element should be disabled. Prevents selection. |\n| `error` | Optional<br><br>`string \\| undefined`<br><br>Error text that will be rendered below the control. |\n| `form` | Optional<br><br>`string \\| undefined`<br><br>Specifies the `id` of the `<form>` this input belongs to. If omitted, it’s the closest parent form. |\n| `hiddenElements` | Optional<br><br>`(\"label\" \\| \"description\" \\| \"error\")[] \\| undefined`<br><br>Visually hides the specified elements. The hidden elements will still be present and visible to screen readers. |\n| `invalid` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element is in an invalid state. This is a display-only prop, and will not prevent form submission. |\n| `label` | Optional<br><br>`React.ReactNode`<br><br>Text that describes the control. Will be both visible and clickable. |\n| `maxLength` | Optional<br><br>`number \\| undefined`<br><br>Specifies the maximum length of text. |\n| `minLength` | Optional<br><br>`number \\| undefined`<br><br>Specifies the minimum length of text. |\n| `name` | Optional<br><br>`string \\| undefined`<br><br>Specifies the name for this input that’s submitted with the form. |\n| `onChange` | Optional<br><br>`((event: React.ChangeEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Required for controlled inputs. Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser input event. |\n| `onKeyDown` | Optional<br><br>`((event: React.KeyboardEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Fires when a key is pressed. |\n| `onKeyUp` | Optional<br><br>`((event: React.KeyboardEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Fires when a key is released. |\n| `placeholder` | Optional<br><br>`string \\| undefined`<br><br>Displayed in a dimmed color when the input value is empty. |\n| `readOnly` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the input is not editable by the user. |\n| `required` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the value must be provided for the form to submit. |\n| `resizeable` | Optional<br><br>`boolean \\| undefined` |\n| `rows` | Optional<br><br>`number \\| undefined` |\n| `size` | Optional<br><br>`(\"small\" \\| \"medium\" \\| \"large\") \\| undefined`<br><br>The size of the component. |\n| `spellCheck` | Optional<br><br>`boolean \\| \"true\" \\| \"false\" \\| undefined`<br><br>If explicitly set to `true` or `false`, enables or disables spellchecking. |\n| `tabIndex` | Optional<br><br>`number \\| undefined`<br><br>Overrides the default Tab button behavior. Avoid using values other than `-1` and `0`. |\n| `value` | Optional<br><br>`string \\| undefined`<br><br>Controls the input’s text. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n| `wrap` | Optional<br><br>`string \\| undefined` |\n| `onKeyPress` | OptionalDeprecated<br><br>`((event: React.KeyboardEvent<HTMLInputElement>) => void) \\| undefined` |\n\n### CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Invalid![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can mark a `TextArea` as invalid by setting the `invalid` prop on the element. This is purely visual. It defaults to `false`.\n\n`<TextArea label=\"Favorite word\" defaultValue=\"Stripe Apps lets you embed custom…\" invalid />`\n\n## Resizeable![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, `TextArea` is vertically resizable. Users who need more space typically prefer this. If you need to prevent the element from resizing, set `resizeable` to `false`.\n\n`<TextArea label=\"Resizable bio\" defaultValue=\"Stripe Apps lets you embed custom…\" /> <TextArea   label=\"Unresizable bio\"   resizeable={false}   defaultValue=\"Stripe Apps lets you embed custom…\" />`\n\n## Size![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChanging the `size` allows you to choose variants with slightly more or slightly less room than the default. In general you don’t want to mix and match different sizes within the same form. The default is `medium`.\n\n`<TextArea   label=\"Description (large)\"   size=\"large\"   defaultValue=\"Stripe Apps lets you embed custom…\" /> <TextArea   label=\"Description (medium, default)\"   size=\"medium\"   defaultValue=\"Stripe Apps lets you embed custom…\" /> <TextArea   label=\"Description (small)\"   size=\"small\"   defaultValue=\"Stripe Apps lets you embed custom…\" />`\n\n## Disable and read only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can mark a field as `disabled`, which prevents any interaction and changes the styling. Disabled means that no data from that form element is submitted when the form is submitted.\n\nYou can also make a field as `readOnly`. Read-only means any data from within the element is submitted, but the user can’t change it.\n\n`<TextArea label=\"Disabled\" defaultValue=\"Stripe Apps lets you embed custom…\" disabled /> <TextArea label=\"Readonly\" defaultValue=\"Stripe Apps lets you embed custom…\" readOnly />`\n\n## Rows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA `TextArea` uses rows to control its height rather than using a traditional height in pixels, just like a regular `<TextArea />`. This allows the element to size itself based on multiples of the font size, rather than a raw pixel value. It prevents text from being partially obscured by default.\n\nThe vertical height of your `TextArea` component also changes depending on what size value you set, because that changes the line height of the text inside the input.\n\n`<TextArea label=\"Description (3 rows, default)\" defaultValue=\"Stripe Apps lets you embed custom…\" /> <TextArea label=\"Description (6 rows)\" rows={6} defaultValue=\"Stripe Apps lets you embed custom…\" />`\n\n## State management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `TextArea` component as an [uncontrolled input](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions):\n\n`<TextArea   onChange={(e) => {     console.log(e);   }}   label=\"About your business\"   placeholder=\"Our business is…\" />`\n\n## Width![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet the width of a `TexaArea` component using [the available values](https://docs.stripe.com/stripe-apps/style#sizing) with the `css` prop:\n\n`<TextArea   label=\"App feedback\"   defaultValue=\"Stripe Apps lets you embed custom…\"   css={{width: 'fill'}} />`",
    "title": "TextArea | Stripe Documentation",
    "description": "Use TextArea to create an input field for multiple lines of text.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/atlas/company-types?business-type=llc",
    "markdown": "# Company types | Stripe DocumentationThe Stripe Docs logo\n\n## Form a C Corporation or an LLC using Stripe Atlas.\n\nStripe Atlas supports two options for forming a US company in Delaware: C Corporations and Limited Liability Companies (LLC).\n\nWith Stripe Atlas, you can only form a standalone LLC. You can’t form an LLC as a subsidiary. If you choose to form an LLC, you establish a new company that’s owned by one individual or a group. The following list contains some of the characteristics of an LLC:\n\n*   **Capital**: LLCs are common for self-funded or small businesses with no plans to raise outside capital.\n*   **Tax treatment**: Profits and losses of an LLC flow through to its members, and the LLC has no entity-level tax. If you have more than one member or if you have a non-US member for your LLC, however, tax filings can become complex.\n\n#### Note\n\nFor information about LLCs as an alternative to C Corporations, take a look at our Stripe Atlas guide on [picking an entity](https://stripe.com/atlas/guides/llc-vs-c-corp).\n\n## When to form your company ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you plan to form your company near the end of the calendar year, it can make sense to wait until the start of the new year to form your company because of the tax implications. C Corporations active in Delaware any time before December 31 owe at least the minimum Delaware franchise tax for that year. LLCs active before December 31 owe the full annual LLC tax for that year.\n\nNeither the franchise tax nor the LLC tax is prorated. Your company might also owe US federal corporate income tax for the outgoing year. It might also owe taxes to a US state other than Delaware, depending on where the LLC operates.",
    "title": "Company types | Stripe Documentation",
    "description": "Form a C Corporation or an LLC using Stripe Atlas.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/textfield",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `TextField` component to your app:\n\n`import {TextField} from '@stripe/ui-extension-sdk/ui';`\n\n`<TextField   label=\"Business name\"   placeholder=\"Acme Inc…\"   onChange={(e) => {     console.log(e.target.value);   }} />`\n\n### TextField props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `autoComplete` | Optional<br><br>`string \\| undefined`<br><br>Specifies one of the possible autocomplete behaviors. |\n| `autoFocus` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, React will focus the element on mount. |\n| `css` | Optional<br><br>`Object`<br><br>Related types: [CSS](#css). |\n| `defaultValue` | Optional<br><br>`string \\| undefined`<br><br>Specifies the initial value that a user can change. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>Descriptive text that will be rendered adjacent to the control’s label. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element should be disabled. Prevents selection. |\n| `error` | Optional<br><br>`string \\| undefined`<br><br>Error text that will be rendered below the control. |\n| `form` | Optional<br><br>`string \\| undefined`<br><br>Specifies the `id` of the `<form>` this input belongs to. If omitted, it’s the closest parent form. |\n| `hiddenElements` | Optional<br><br>`(\"label\" \\| \"description\" \\| \"error\")[] \\| undefined`<br><br>Visually hides the specified elements. The hidden elements will still be present and visible to screen readers. |\n| `invalid` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element is in an invalid state. This is a display-only prop, and will not prevent form submission. |\n| `label` | Optional<br><br>`React.ReactNode`<br><br>Text that describes the control. Will be both visible and clickable. |\n| `maxLength` | Optional<br><br>`number \\| undefined`<br><br>Specifies the maximum length of text. |\n| `minLength` | Optional<br><br>`number \\| undefined`<br><br>Specifies the minimum length of text. |\n| `name` | Optional<br><br>`string \\| undefined`<br><br>Specifies the name for this input that’s submitted with the form. |\n| `onChange` | Optional<br><br>`((event: React.ChangeEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Required for controlled inputs. Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser input event. |\n| `onKeyDown` | Optional<br><br>`((event: React.KeyboardEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Fires when a key is pressed. |\n| `onKeyUp` | Optional<br><br>`((event: React.KeyboardEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Fires when a key is released. |\n| `placeholder` | Optional<br><br>`string \\| undefined`<br><br>Displayed in a dimmed color when the input value is empty. |\n| `readOnly` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the input is not editable by the user. |\n| `required` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the value must be provided for the form to submit. |\n| `size` | Optional<br><br>`(\"small\" \\| \"medium\" \\| \"large\") \\| undefined`<br><br>The size of the component. |\n| `spellCheck` | Optional<br><br>`boolean \\| \"true\" \\| \"false\" \\| undefined`<br><br>If explicitly set to `true` or `false`, enables or disables spellchecking. |\n| `tabIndex` | Optional<br><br>`number \\| undefined`<br><br>Overrides the default Tab button behavior. Avoid using values other than `-1` and `0`. |\n| `type` | Optional<br><br>`(\"number\" \\| \"text\" \\| \"search\" \\| \"tel\" \\| \"url\" \\| \"email\" \\| \"password\") \\| undefined`<br><br>Choose between the text-alike types on an input. |\n| `value` | Optional<br><br>`string \\| undefined`<br><br>Controls the input’s text. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n| `onKeyPress` | OptionalDeprecated<br><br>`((event: React.KeyboardEvent<HTMLInputElement>) => void) \\| undefined` |\n\n### CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Invalid![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set `invalid` on a TextField element to render the component with a red outline as a visual indicator that the value provided isn’t acceptable. Omitting this property defaults to `false`.\n\n`<TextField label=\"Current year\" defaultValue=\"1892\" invalid />`\n\n## Type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set the `type` property for the TextField to render it differently depending on the type of text value expected. This is similar to the type attribute on an `<input />`, but is restricted to types that allow text. Omitting this property defaults to `text`.\n\n`<TextField label=\"Text\" type=\"text\" /> <TextField label=\"Password\" type=\"password\" /> <TextField label=\"Search\" type=\"search\" /> <TextField label=\"Number\" type=\"number\" />`\n\n## Size![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChanging the `size` allows you to choose variants with slightly more or slightly less room than the default. In general you don’t want to mix and match different sizes within the same form. The default is `medium`.\n\n`<TextField label=\"Small\" size=\"small\" /> <TextField label=\"Medium\" size=\"medium\" /> <TextField label=\"Large\" size=\"large\" />`\n\n## Disabled and read only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can mark a field as `disabled`, which prevents any interaction and changes the styling. Disabled means that no data from that form element is submitted when the form is submitted.\n\nYou can also make a field as `readOnly`. Read-only means any data from within the element will be submitted, but the user can’t change it.\n\n`<TextField label=\"Disabled\" defaultValue=\"Field is disabled\" disabled /> <TextField label=\"Readonly\" defaultValue=\"Field is readonly\" readOnly />`\n\n## State management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `TextField` component as an [uncontrolled input](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions):\n\n`<TextField   onChange={(e) => {     console.log(e);   }}   label=\"First name\" />`\n\n## Width![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet the width of a `TextField` component using [the available values](https://docs.stripe.com/stripe-apps/style#sizing) with the `css` prop:\n\n`<TextField label=\"Search\" type=\"search\" css={{width: 'fill'}} />`",
    "title": "TextField | Stripe Documentation",
    "description": "Use TextField to create a text input field.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/tooltip",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Tooltip` component to your app:\n\n`import {Tooltip} from '@stripe/ui-extension-sdk/ui';`\n\nThis is a preview of two `Tooltip` components with each type of `label`:\n\n`<Tooltip   type=\"description\"   trigger={     <Button type=\"primary\" disabled onPress={undefined}>       Pay out to bank     </Button>   } >   You have no available balance to pay out. You can create payouts when   you've accumulated a positive balance again. </Tooltip>  <Tooltip   type=\"label\"   trigger={     <Button onPress={undefined}>       <Icon name=\"notifications\" />     </Button>   } >   Notifications </Tooltip>`\n\nTooltips are overlays that appear when a user hovers or focuses a target element. Use Tooltips to provide additional contextual information about a particular element or subject. You can use tooltips as either **descriptions** or **labels**.\n\nAvoid putting any interactive content such as links within a Tooltip, because keyboard users won’t be able to access it.\n\n### Tooltip props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `trigger` | Required<br><br>`React.RefObject<HTMLElement> \\| React.ReactElement`<br><br>The target element that should be used as the Tooltip trigger. |\n| `delay` | Optional<br><br>`number \\| undefined`<br><br>How much time in milliseconds to wait before showing the Tooltip on hover. |\n| `placement` | Optional<br><br>`(\"bottom\" \\| \"bottom left\" \\| \"bottom right\" \\| \"bottom start\" \\| \"bottom end\" \\| \"top\" \\| \"top left\" \\| \"top right\" \\| \"top start\" \\| \"top end\" \\| \"left\" \\| \"left top\" \\| \"left bottom\" \\| \"start\" \\| \"start top\" \\| \"start bottom\" \\| \"right\" \\| \"right top\" \\| \"right bottom\" \\| \"end\" \\| \"end top\" \\| \"end bottom\") \\| undefined`<br><br>How the Tooltip should be placed relative to the trigger element. |\n| `type` | Optional<br><br>`(\"label\" \\| \"description\") \\| undefined`<br><br>The style variant of the Tooltip. |\n\n## Placement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can place tooltips in one of four primary directions and further align them along a secondary axis, resulting in a total of 12 possible placement options relative to the `trigger`. The placement automatically adjusts as necessary to ensure the Tooltip remains visible within the viewport.\n\n`<Tooltip placement=\"top left\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"top left\" </Tooltip> <Tooltip placement=\"top\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"top\" </Tooltip> <Tooltip placement=\"top right\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"top right\" </Tooltip> <Tooltip placement=\"right top\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"right top\" </Tooltip> <Tooltip placement=\"right\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"right\" </Tooltip> <Tooltip placement=\"right bottom\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"right bottom\" </Tooltip> <Tooltip placement=\"bottom right\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"bottom right\" </Tooltip> <Tooltip placement=\"bottom\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"bottom\" </Tooltip> <Tooltip placement=\"bottom left\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"bottom left\" </Tooltip> <Tooltip placement=\"left bottom\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"left bottom\" </Tooltip> <Tooltip placement=\"left\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"left\" </Tooltip> <Tooltip placement=\"left top\" trigger={<Button onPress={undefined}><Icon name=\"info\" /></Button>}>   \"left top\" </Tooltip>`\n\n## Delay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTooltips have a short delay for when they appear after hovering over their trigger element. You can control the amount of time it takes for a Tooltip to become active on hover using the `delay` prop. Tooltips always appear immediately when their trigger element receives keyboard focus.\n\n`<Tooltip delay={0} trigger={<Button onPress={undefined}>Immediate</Button>}>   I showed up immediately. </Tooltip>`\n\nTooltips appear immediately on hover while another Tooltip is already active.\n\n`<Tooltip trigger={<Button onPress={undefined}>Hover me</Button>}>   I showed up after a delay. </Tooltip>  <Tooltip trigger={<Button onPress={undefined}>Then me</Button>}>   I showed up immediately. </Tooltip>`",
    "title": "Tooltip | Stripe Documentation",
    "description": "Use Tooltips to provide additional contextual information about a particular element or subject.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/link",
    "markdown": "# Faster checkout with Link | Stripe DocumentationThe Stripe Docs logo\n\n## Let your customers check out faster with Link.\n\n[Link](https://stripe.com/payments/link) is Stripe’s fast-checkout solution. It securely saves and autofills customer address and payment details, with support for credit cards, debit cards, US bank accounts, and other payment methods. Customers can save their shipping and payment details on your site or the checkout page of a different business—Link saves and autofills the information on any site where Link’s enabled.\n\nIf your customer wants to make changes to their account, view their purchase history, or reach out to the Link customer support team, have them visit [link.com](https://www.link.com/).\n\n![Add Link to your prebuilt checkout page](https://b.stripecdn.com/docs-statics-srv/assets/link-in-checkout.2eb9f8d06da3dca74af9b81fa7524049.png)\n\nAdd Link to your prebuilt checkout page\n\n## Link on no-code surfaces ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Link with Elements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Faster checkout with Link | Stripe Documentation",
    "description": "Let your customers check out faster with Link.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/email-domain",
    "markdown": "# Custom email domain | Stripe DocumentationThe Stripe Docs logo\n\n## Set up your own custom domain to interact with your customers.\n\nBy default, when Stripe sends invoices, receipts, and failed payment notifications to your customers, it sends them from the `stripe.com` domain. You can change this to a custom domain.\n\n## Set up a custom email domain ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo start sending emails from your own domain, complete the following steps:\n\n1.  [Add your domain](#adding_domain) in the Dashboard.\n2.  [Verify your domain](#verifying_domain) to allow sending.\n3.  [Set your sending domain](#setting_sending_domain) as your domain.\n\nTo modify the look and feel of your emails, go to your [Branding](https://dashboard.stripe.com/account/branding) settings.\n\n[\n\n## Add your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#adding_domain)\n\nNavigate to your [Customer email](https://dashboard.stripe.com/settings/emails) settings and add the domain that you want to send customer emails from.\n\n[\n\n## Verify your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#verifying_domain)\n\nTo verify your domain, you must configure the Domain Name System (DNS) records provided in the Dashboard. These DNS records are necessary to verify your domain ownership and reliable email delivery.\n\nThe procedure for adding DNS records to the DNS server for your domain depends on who provides your DNS service. Consult the documentation for your DNS service for specific instructions.\n\n### Instructions for popular providers\n\nIt can take up to 72 hours for DNS record changes to be confirmed. Stripe lets you know whether your domain has been verified.\n\n### Troubleshoot DNS issues ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your domain hasn’t been verified after 72 hours, try the following:\n\n*   Correct any typos. You can check your domain records in the Dashboard’s [Customer emails](https://dashboard.stripe.com/settings/emails) settings by clicking **Verify domain** to filter issues.\n    \n*   Make sure you don’t have any records that share the same name as the provided CNAME records. CNAME records must be the [only record present](https://tools.ietf.org/html/rfc2181#section-10.1) for a record name.\n    \n*   Make sure the added record names don’t include your domain twice. Some providers automatically append DNS record names with the domain name. For example, to create a record with the name **bounce.example.com**, enter only `bounce` in the **Name** field.\n    \n*   Check that the DNS records are published. You can verify this by using a [DNS lookup tool](https://dnschecker.org/all-dns-records-of-domain.php), which displays the published records for your domain.\n    \n\nIf you’ve tried all of our troubleshooting recommendations and are still having trouble verifying your domain, contact your DNS provider.\n\n### DNS records ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach category of record that needs to be configured has a purpose.\n\n| Record Category | Type | Purpose |\n| --- | --- | --- |\n| Stripe proof-of-ownership | TXT | Before you can send email from a domain, we must confirm ownership of the domain you plan to use. |\n| Mail From Domain | CNAME | This specifies the source of the message to the receiving email server and the [Sender Policy Framework (SPF)](https://tools.ietf.org/html/rfc7208) policy to allow sending. |\n| [DomainKeys Identified Mail (DKIM)](http://www.dkim.org/) | CNAME | These allow a mail server to verify that a third party didn’t modify a message in transit. |\n\n#### Caution\n\nAfter we verify the domain, don’t delete the provided DNS records from your domain. Stripe frequently checks these records. If a record becomes invalid or goes missing, we notify you. Also, make sure to correct DNS records within 48 hours. If you don’t, we send customer emails from _stripe.com_ until you resolve the problem.\n\n### Sender authentication (DMARC) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo use a custom email domain, you need to set up a DMARC policy for your domain. [Domain-based Message Authentication, Reporting & Conformance (DMARC)](https://dmarc.org/) shields your domain from impersonation attacks, such as phishing. Notably, major email providers like Google and Yahoo now necessitate DMARC for those sending bulk emails.\n\nYou publish DMARC policy as a DNS TXT record. The record’s name is always `_dmarc`, and the value comprises tag-value pairs that symbolize your policy. Additionally, you can learn about all the [supported tags and their uses](https://dmarc.org/overview/), but let’s cover some of the most significant tags:\n\n| Tag | Description | Sample value |\n| --- | --- | --- |\n| v required | The protocol version. This must always be DMARC1. | v=DMARC1 |\n| p required | The policy for domain. The possible values are: none, quarantine, reject. | p=none |\n| rua optional | Address(es) to receive aggregate reports | rua=mailto:report@example.com |\n\nIf you’re new to DMARC, we suggest beginning with a `p=none` policy for initial monitoring, then switch to either `quarantine` or `reject` in due course. After you’ve settled on the appropriate policy, you must incorporate the following DNS record into your domain:\n\n| Type | Name | Value |\n| --- | --- | --- |\n| TXT | `_dmarc` | Your DMARC policy. For example: `v=DMARC1; p=none; rua=mailto:report@example.com` |\n\n#### Caution\n\nWe don’t currently support strict SPF alignment. Make sure your DMARC policy doesn’t have `aspf=s`.\n\nIf you’re already using this domain to send email, use caution when adding DMARC to make sure that it doesn’t interfere with your existing configuration. Consult an email or IT professional before adding or modifying this record.\n\n[\n\n## Set your sending domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#setting_sending_domain)\n\nIf Stripe has verified your domain, you’ll see a **Verified** badge under the **Verification** column in your [Customer email](https://dashboard.stripe.com/settings/emails) settings. Customer emails are now sent from your domain. You can send a test email by clicking the overflow menu ().\n\nWhenever a customer replies to your emails, their responses are sent to the support email address you specified in your [public business information](https://dashboard.stripe.com/settings/public).\n\n## Change email domains ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe must verify each domain that you want to set as your sending domain. To switch to a new domain, return to [Add your domain](#setup). You can always switch back to sending your customer emails using `stripe.com`.\n\nWhen you’re no longer using a domain to send customer emails, you can remove it from your [Customer email](https://dashboard.stripe.com/settings/emails) settings. In the **Your custom email domains** section, click the overflow menu () next to the domain name and select **Remove domain**. After removing the domain from your Dashboard, remove the unused DNS records from your DNS service.\n\n### Instructions for popular providers",
    "title": "Custom email domain | Stripe Documentation",
    "description": "Set up your own custom domain to interact with your customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models",
    "markdown": "# Model usage-based pricing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about different pricing models for usage-based billing on Stripe.\n\n#### Note\n\nThere are various pricing models for usage-based billing: pay as you go, fixed fee and overage (recommended for most users), and credit burndowns.\n\n## Pay as you go![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCommonly referred to as “in arrears billing”, the “pay as you go” model lets you track usage incurred over a determined period, then charge the customer at the end of the period. There are four different pricing strategies you can deploy:\n\n*   **Per unit**: Charge the same amount for every single unit.\n*   **Per package**: Charge for a package or bundle of units or usage. This is the model for the [fictional Alpaca AI company](https://docs.stripe.com/billing/subscriptions/usage-based/implementation-guide#what-you-will-build).\n*   **Tiered and volume based pricing**: The subscription item is billed at the tier corresponding to the amount of usage at the end of the period. Learn more about [volume-based pricing](https://docs.stripe.com/products-prices/pricing-models#volume-based-pricing).\n*   **Tiered and graduated pricing**: Similar to volume pricing, [graduated pricing](https://docs.stripe.com/products-prices/pricing-models#graduated-pricing) charges for the usage in each tier instead of applying a single price to all usage.\n\nThis model might not be ideal if your business involves customers with low-trust because customers might accumulate significant usage and then have their payment method fail at the end of the month.\n\n## Fixed fee and overage model![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn this model, you charge a flat fee per month for your service at the beginning of the period. This flat fee has some included usage entitlement, and any additional usage (overage) is charged at the end of the period.\n\nYou can model this with two prices within the same product. For example, Alpaca AI introduces a new advanced model called Llama AI. Priced at 200 USD per month, this model includes 100,000 tokens. Any usage beyond the included tokens is charged at an additional rate of 0.001 USD per token.\n\nTo create a product:\n\n1.  Navigate to the [Products tab](https://dashboard.stripe.com/test/products).\n2.  Click **\\+ Add product**.\n3.  Enter the name of the product (in this case, Llama AI).\n\nNext, add a **recurring** flat fee price to the Llama AI product:\n\n1.  Select **Flat rate** pricing for the pricing model.\n2.  Set the amount to **200 USD**.\n\nNext, add a second **recurring** price to the product. The first tier is priced at 0 USD because the first 100,000 units are included in the flat rate.\n\n1.  Select **Usage-based, Per Tier and Graduated** for the pricing model\n    \n2.  Create two graduated pricing tiers:\n    \n    |     | First unit | Last unit | Per unit | Flat fee |\n    | --- | --- | --- | --- | --- |\n    | For the first | 0   | 100,000 | 0.00 USD | 0.00 USD |\n    | For the next | 100,001 | ∞   | 0.001 USD | 0.00 USD |\n    \n3.  Create a new meter `llama_api_tokens` to record usage.\n    \n\nWhen you create subscriptions, specify both of the prices you created above.\n\n## Credit burndown model![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn this payment model, users pay an initial amount and gradually use up credits for their usage. Currently, Stripe doesn’t support this specific model, but we’re actively developing native support for it. [Click here](#) if you’re interested in gaining access to a future beta.\n\n[](#billing-thresholds)\n\nSet [billing thresholds](https://docs.stripe.com/api/subscriptions/object#subscription_object-billing_thresholds) to issue an [invoice](https://docs.stripe.com/api/invoices \"invoices\") and, optionally, to reset a subscription’s [billing cycle anchor](https://docs.stripe.com/api/subscriptions/create#create_subscription-billing_thresholds-reset_billing_cycle_anchor) after a customer’s accrued usage in a subscription cycle reaches a specified monetary threshold. Consider using billing thresholds to add precautions to limit the amount owed or to limit the products consumed between invoices or charges.\n\n#### Add a monetary threshold to a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt’s common to set the value of a threshold as a multiple of the cost of one unit of the product being sold.\n\nSetting a lower amount threshold causes your customers to receive an invoice for every unit of usage, which might cause confusion.\n\nThe value is a positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (for example, 100 cents to charge 1 USD; or 100 to charge 100 JPY, a zero-decimal currency). Set the value to at least 50 currency units.\n\nYou can also set monetary thresholds in the [Dashboard](https://dashboard.stripe.com/test/subscriptions) when you create or update a subscription.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"billing_thresholds[amount_gte]\"=10000 \\  -d \"billing_thresholds[reset_billing_cycle_anchor]\"=false`\n\n#### Add a usage threshold to a subscription item ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSet usage thresholds to exceed one unit of usage to prevent frequent invoicing. Stripe doesn’t support setting usage thresholds in the Dashboard.\n\n`curl https://api.stripe.com/v1/subscription_items/si_CFhSgkWb0MyTWg \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"billing_thresholds[usage_gte]\"=2000`\n\n#### Thresholds and billing cycle anchor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, the [billing cycle anchor](https://docs.stripe.com/billing/subscriptions/billing-cycle) of a subscription remains unchanged after a customer’s usage reaches a threshold. For example, if a threshold is reached in the middle of a month-long subscription, the subscription resets at the end of the month, similar to a subscription without thresholds.\n\nYou can change this behavior by configuring the subscription to reset the billing cycle anchor after it reaches a threshold. Stripe treats the reaching of a threshold as if the subscription had naturally arrived at its rollover point at the end of the month.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"billing_thresholds[reset_billing_cycle_anchor]\"=true`\n\n#### Thresholds and tiered pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe maintains tiers across threshold invoices. Tiers reset at the end of the billing period by default, or if you configure the subscription to reset the billing cycle anchor after it reaches a threshold, similar to a subscription without thresholds.\n\nFor example, let’s say you run an ad platform that has the following `graduated` tiering structure for ad impressions:\n\n| Tier | Amount (unit cost) |\n| --- | --- |\n| 1-10000 (up\\_to=10000) | 0.50 USD (`unit_amount=50`) |\n| 10000+ (`up_to=inf`) | 0.40 USD (`unit_amount=40`) |\n\nBecause Stripe bills usage retrospectively, you can set a threshold of 100 USD as a temporary measure for new customers. Under this scheme, your customer is billed every 200 impressions for the first 10,000 impressions (200 \\* 0.50 USD = 100 USD). When the customer exceeds 10,000 impressions, they’re billed every 250 impressions (250 \\* 0.40 USD = 100 USD). This continues until the end of the billing period, at which point all un-invoiced usage are invoiced, and the subscription and tiers reset.\n\nTo enable the resetting of tiers after reaching a threshold, you must configure the subscription to reset the billing cycle anchor after the usage reaches the thresholds that you set.\n\n##### Volume tiers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Volume tiers](#volume-based-pricing) define the pricing for all units of usage, as opposed to [graduated tiers](#graduated-pricing), which define pricing for a specific amount of usage. Some pricing models use volume tiers that decrease the unit cost at each successive tier. You can use these models to incentivize customers to use more of a product (for example, ad impressions, or GB of storage).\n\nWhen combined with thresholds, these pricing models can lead to invoices with line items for negative amounts under the following conditions:\n\n1.  A threshold invoice has already been issued.\n2.  Subsequent usage bills at a lower unit cost.\n\nFor example, consider the following tiered pricing structure:\n\n| Tier | Amount (unit cost) |\n| --- | --- |\n| 1-10000 (`up_to=10000`) | 0.50 USD (`unit_amount=50`) |\n| 10000+ (`up_to=inf`) | 0.40 USD (`unit_amount=40`) |\n\nIf a customer uses 10,000 units, the invoice total is 5,000 USD (10,000 \\* 0.50 USD = 5,000 USD). Any additional usage causes _all_ usage to bill at the lower unit cost of 0.40 USD. If the customer uses one more unit, the invoice total _drops_ to 4,000.40 USD (10,001 \\* 0.40 USD = 4,000.40 USD).\n\nWithout thresholds, Stripe would issue an invoice for 4,000.40 USD at the end of the billing period.\n\nHowever, to see how negative invoicing can occur, assume that we have a 5,000 USD monetary threshold in place. In this scenario, Stripe issues an invoice when the customer reaches 10,000 units of usage.\n\nIf the customer uses one more unit, the invoice total drops to 4,000.40 USD (10,001 \\* 0.40 USD = 4,000.40 USD). However, if the customer doesn’t consume more units, they’re _owed_ 999.60 USD (5,000 USD - 4,000.40 USD = 999.60 USD). At the end of the billing period, Stripe credits this amount to the customer’s balance, which we use to pay down future invoices.\n\nLet’s say the customer continues to accrue usage. The cost of this usage reaches 5,000 USD again when the customer uses 12,500 units (5,000 USD / 0.40 USD = 12,500). However, the previous payment of 5,000 USD covers all of this usage. As a result, we don’t issue an invoice.\n\nStripe won’t issue an invoice until either the total usage reaches 25,000 units (for a total cost of 10,000 USD), or the end of the billing period arrives—whichever occurs first. The tables below show the line items you see for the two invoices issued in the scenario where usage reaches 25,000 units.\n\nInvoice 1:\n\n| Line item | Quantity | Amount |\n| --- | --- | --- |\n| Usage (0.50 USD per unit) | 10,000 | 5,000 USD |\n| **Total** |     | **5,000 USD** |\n\nInvoice 2:\n\n| Line item | Quantity | Amount |\n| --- | --- | --- |\n| Usage (0.40 USD per unit) | 25,000 | 10,000 USD |\n| Amount previously billed (at 0.50 USD per unit) |     | \\-5,000 USD |\n| **Total** |     | **5,000 USD** |\n\n#### Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Thresholds don’t apply to [trial subscriptions](https://docs.stripe.com/billing/subscriptions/trials).\n*   Monetary thresholds must be greater than the sum of any flat fees on metered subscription items.\n*   Billing thresholds aren’t evaluated during the 24 hours leading up to the end of a subscription. This helps limit confusion for a customer who receives multiple invoices on the same date.\n*   We only allow subscriptions a single monetary threshold.\n*   We only allow subscription items a single usage threshold.\n*   Due to the real-time nature of usage reporting, we might not issue invoices at the exact moment a specified threshold is reached. Invoiced amounts or usage might be slightly higher than the specified thresholds.\n*   The value used to determine whether a monetary threshold has been reached excludes taxes, but includes discounts.\n*   Per package per tiering pricing isn’t currently supported\n\n[](#trials)\n\nYou can use [trial periods](https://docs.stripe.com/billing/subscriptions/trials) for subscriptions with usage-based billing. During the trial period, any usage accrued doesn’t count toward the total charged to the customer at the end of the billing cycle. After the trial period ends, usage accrues and is billed at the end of the next billing cycle.\n\nLearn more about [trial periods and subscriptions](https://docs.stripe.com/billing/subscriptions/trials).\n\n### Webhooks and trials![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure that your integration properly monitors and handles web events related to changes in trial status.\n\nA few days before a trial ends and the subscription moves from `trialing` to `active`, you receive a `customer.subscription.trial_will_end` event. When you receive this event, make sure that you have a payment method on the customer’s account to proceed with billing them. Optionally, notify the customer in advance about the upcoming charge.\n\n| Status | Description |\n| --- | --- |\n| `trialing` | The subscription is currently in a trial period and it’s safe to provision your product for your customer. The subscription transitions automatically to `active` when the first payment is made. |\n| `active` | The subscription is in good standing and the most recent payment is successful. It’s safe to provision your product for your customer. |\n| `incomplete` | A successful payment needs to be made within 23 hours to activate the subscription. Or the payment [requires action](#requires-action), like customer authentication. Subscriptions can also be `incomplete` if there’s a pending payment and the PaymentIntent status would be `processing`. |\n| `incomplete_expired` | The initial payment on the subscription failed and no successful payment was made within 23 hours of creating the subscription. These subscriptions don’t bill customers. This status exists so you can track customers that failed to activate their subscriptions. |\n| `past_due` | Payment on the latest _finalized_ invoice either failed or wasn’t attempted. The subscription continues to create invoices. Your [subscription settings](https://docs.stripe.com/billing/subscriptions/overview#settings) determine the subscription’s next state. If the invoice is still unpaid after all [Smart Retries](https://docs.stripe.com/billing/revenue-recovery/smart-retries) have been attempted, you can configure the subscription to move to `canceled`, `unpaid`, or leave it as `past_due`. To move the subscription to `active`, pay the most recent invoice before its due date. |\n| `canceled` | The subscription has been canceled. During cancellation, automatic collection for all unpaid invoices is disabled (`auto_advance=false`). This is a terminal state that can’t be updated. |\n| `unpaid` | The latest invoice hasn’t been paid but the subscription remains in place. The latest invoice remains open and invoices continue to be generated but payments aren’t attempted. You should revoke access to your product when the subscription is `unpaid` since payments were already attempted and retried when it was `past_due`. To move the subscription to `active`, pay the most recent invoice before its due date. |\n| `paused` | The subscription has ended its trial period without a default payment method and the [`trial_settings.end_behavior.missing_payment_method`](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment) is set to `pause`. Invoices will no longer be created for the subscription. After a default payment method has been attached to the customer, you can [resume the subscription](https://docs.stripe.com/billing/subscriptions/trials#resume-a-paused-subscription). |\n\nLearn more about [subscriptions and webhooks](https://docs.stripe.com/billing/subscriptions/webhooks).\n\n[](#cancellations)\n\nWith usage-based billing, the bill the customer pays varies based on consumption during the billing cycle. When changing the billing cycle results in ending a subscription interval early, you charge the customer for the usage accrued during the shortened billing cycle. We don’t support [proration](https://docs.stripe.com/billing/subscriptions/prorations) with usage-based billing.\n\nAfter a subscription is canceled, you can’t reactivate it. Instead, you can collect updated billing information from your customer, update their default payment method, and create a new subscription with their existing customer record.\n\nAfter you schedule the cancellation of a subscription using [`cancel_at_period_end`](https://docs.stripe.com/api/subscriptions/update#update_subscription-cancel_at_period_end), you can reactivate it at any point up to the end of the period by updating `cancel_at_period_end` to `false`. The final invoice includes any metered usage after the subscription cancels at the end of the billing period.\n\n[](#transform-quantities)\n\nUse the [transform\\_quantity option](https://docs.stripe.com/api/prices/create#create_price-transform_quantity) to transform usage before applying the price. This allows you to divide the reported usage by a specific number and round the result either up or down. This is commonly used when pricing on packages of a product instead of individual units. Quantity transformation isn’t compatible with [tiered pricing](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing).\n\nFor example, let’s say you have a car rental service. You report usage as a number of minutes, and you want to charge customers for each hour the car is rented.\n\n`curl https://api.stripe.com/v1/products \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Car Rental Service\"`\n\nNext, create a price for the car rental service product, charging 10 USD an hour and rounding up (to charge for a full hour even if only part of the hour is used):\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Car Rental Per Hour Rate\" \\  -d unit_amount=1000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=metered \\  -d product={{CAR_RENTAL_SERVICE_PRODUCT_ID}} \\   -d \"transform_quantity[divide_by]\"=60 \\  -d \"transform_quantity[round]\"=up`\n\nIf a car is rented for 150 minutes, that customer is charged 30 USD for 3 hours of renting (2 hours and 30 minutes, rounded up).\n\n[](#decimal-amounts)\n\nDecimal pricing is useful if you need to create pricing amounts that aren’t whole numbers. For example, if you’re running a cloud storage SaaS business, you can create a price that charges 0.05 cents for each MB used per month. Based on usage, the quantity of MB is then multiplied by 0.05 cents and rounded to the nearest whole cent.\n\nTo [create prices](https://docs.stripe.com/api#create_price) with decimal amounts, specify `unit_amount_decimal` instead of `unit_amount`. `unit_amount_decimal` allows you to set the amount in the minor unit of the currency that you charge in. For example, you can set `unit_amount_decimal = 105.5` in USD to represent 105.5 cents, or 1.055 USD. `unit_amount_decimal` accepts decimals up to 12 decimal places.\n\nIf you plan to use [tiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing), you can specify `unit_amount_decimal` instead of `unit_amount`. You can also [create invoice items](https://docs.stripe.com/api/invoiceitems/create) with `unit_amount_decimal` instead of `unit_amount`.\n\nIn API responses, the integer `unit_amount` field doesn’t populate if you create the object with a decimal value. For example, if you create a price with `unit_amount_decimal = 0.05`, the response contains `unit_amount = null` and `unit_amount_decimal = 0.05`. You can still pass integer values into `unit_amount_decimal`, in which case `unit_amount` is populated in the response. For example, if you create a price with `unit_amount_decimal = 5`, the response contains `unit_amount = 5` and `unit_amount_decimal = 5.0`.\n\n#### Note\n\nIf your integration has event handling that uses `unit_amount` values and you begin using decimal amounts, you need to use `unit_amount_decimal` instead. This is important because `unit_amount` returns as `null` if the decimal amounts can’t be converted into integers, which might cause errors in your integration.\n\n[](#grace-periods)\n\nBy default, Stripe finalizes subscription invoices one hour after they’re [generated](https://docs.stripe.com/billing/invoices/subscription#subscription-renewal). During this one hour grace period, you can continue to report usage for the previous period. When the invoice finalizes, we update it to reflect the latest quantity for its billing period.\n\nUsage reported after the invoice finalizes aren’t captured in future invoices.\n\nIf you’re interested in enabling a longer grace period, contact us at [usage-based-billing@stripe.com](mailto:usage-based-billing@stripe.com).\n\n[](#mid-cycle-updates)\n\nYou can update a subscription item’s price during a billing cycle. However, we only reflect usage occurring after the update on the invoice. Usage occurring before the change won’t be invoiced.\n\n`curl https://api.stripe.com/v1/subscription_items/{{SUBSCRIPTION_ITEM_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d price={{NEW_PRICE_ID}}`\n\nAfter the update, we invoice any new usage reported at the new price.\n\nTo delete a subscription item:\n\n`curl -X DELETE https://api.stripe.com/v1/subscription_items/{{SUBSCRIPTION_ITEM_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nWe don’t reflect any usage from that item on the invoice.\n\n[](#backdating-subscription-creation)\n\nYou can create backdated subscriptions to start reporting usage before creating a subscription.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d backdate_start_date=1711670400`",
    "title": "Model usage-based pricing | Stripe Documentation",
    "description": "Create your usage-based pricing model with Stripe Billing",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/registrations/object",
    "markdown": "# The Tax Registration object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fregistrations%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the registration becomes active. Measured in seconds since the Unix epoch.\n    \n\n*   Specific options for a registration in the specified `country`.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The status of the registration. This field is present for convenience and can be deduced from `active_from` and `expires_at`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The Tax Registration is currently active. |\n    | `expired`<br><br>The Tax Registration is no longer active. |\n    | `scheduled`<br><br>The Tax Registration will become active in the future. |\n    \n\nThe Tax Registration object\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Create a registration](https://docs.stripe.com/api/tax/registrations/create)\n\nCreates a new Tax `Registration` object.\n\n### Parameters\n\n*   #### \n    \n    active\\_fromstring | timestampRequired\n    \n    Time at which the Tax Registration becomes active. It can be either `now` to indicate the current time, or a future timestamp measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    country\\_optionsobjectRequired\n    \n    Specific options for a registration in the specified `country`.\n    \n*   If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.\n    \n\n### Returns\n\nA Tax `Registration` object.\n\nPOST /v1/tax/registrations\n\n```\ncurl https://api.stripe.com/v1/tax/registrations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d country=US \\  -d \"country_options[us][state]\"=CA \\  -d \"country_options[us][type]\"=state_sales_tax \\  -d active_from=now\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Update a registration](https://docs.stripe.com/api/tax/registrations/update)\n\nUpdates an existing Tax `Registration` object.\n\nA registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting `expires_at`.\n\n### Parameters\n\n*   #### \n    \n    active\\_fromstring | timestamp\n    \n    Time at which the registration becomes active. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    expires\\_atstring | timestamp\n    \n    If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch.\n    \n\n### Returns\n\nA Tax `Registration` object.\n\nPOST /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d expires_at=now\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1683036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": 1684072000,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Retrieve a registration](https://docs.stripe.com/api/tax/registrations/retrieve)\n\nReturns a Tax `Registration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Registration` object.\n\nGET /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [List registrations](https://docs.stripe.com/api/tax/registrations/all)\n\nReturns a list of Tax `Registration` objects.\n\n### Parameters\n\n*   The status of the Tax Registration.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Return all active Tax Registrations. |\n    | `all`<br><br>Return all Tax Registrations (default). |\n    | `expired`<br><br>Return all expired Tax Registrations. |\n    | `scheduled`<br><br>Return all scheduled Tax Registrations. |\n    \n\n### More parameters\n\n### Returns\n\nA list of Tax `Registration` objects.\n\nGET /v1/tax/registrations\n\n```\ncurl -G https://api.stripe.com/v1/tax/registrations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/registrations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"taxreg_NkyGPRPytKq66j\",      \"object\": \"tax.registration\",      \"active_from\": 1682036640,      \"country\": \"US\",      \"country_options\": {        \"us\": {          \"state\": \"CA\",          \"type\": \"state_sales_tax\"        }      },      \"created\": 1682006400,      \"expires_at\": null,      \"livemode\": false,      \"status\": \"active\",      \"state\": \"CA\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```",
    "title": "The Tax Registration object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/custom_checkout/react/custom_checkout_provider",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/collect-shipping-or-billing-information",
    "markdown": "# Collect shipping or billing information\n\n## Collect shipping or billing informationBeta\n\n## Learn how to collect shipping or billing information with the Address Element.\n\n#### Beta\n\nThe Custom Checkout integration is in private beta. To request access, [click here.](#)\n\n[](#enable-address-collection)\n\nEnable address collection when you [create a Checkout Session](https://docs.stripe.com/api/checkout/sessions/create):\n\n*   To enable shipping address collection when you create a Checkout Session, pass [shipping\\_address\\_collection](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_address_collection). Specify which countries to allow shipping to by configuring the [allowed\\_countries](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries) property with an array of [two-letter ISO country codes](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n*   To enable billing address collection when you create a Checkout Session, pass [billing\\_address\\_collection=required](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-billing_address_collection).\n\n`const session = await stripe.checkout.sessions.create({   line_items: [     {       price_data: {         currency: 'usd',         product_data: {           name: 'T-shirt',         },         unit_amount: 2000,       },       quantity: 1,     },   ],   mode: 'payment',   ui_mode: 'custom' as any,   return_url: '{{RETURN_URL}}',   billing_address_collection: 'required',   shipping_address_collection: {     allowed_countries: ['US'],   }, });`\n\n[](#render-address-element)\n\nThe Address Element is an embeddable UI component for accepting complete addresses. Use it to collect shipping addresses, or when you need a complete billing address, such as for tax purposes.\n\nYou can collect both shipping and billing addresses by using multiple Address Elements on your page.\n\nIf you prefer to build your own address form, you can [render a custom form](#render-address-element) for address collection.\n\nCreate a container DOM element to mount the Address Element. Then create an instance of the Address Element using [checkout.createElement](https://docs.stripe.com/js/custom_checkout/create_element?type=address) and mount it by calling [element.mount](https://docs.stripe.com/js/element/mount), providing either a CSS selector or the container DOM element. Use [mode](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-mode) to configure whether the Address Element collects billing details or shipping details.\n\n`<div id=\"shipping-address\"></div> <div id=\"billing-address\"></div>`\n\n`const shippingAddressElement = checkout.createElement('address', {mode: 'shipping'}); shippingAddressElement.mount('#shipping-address');  const billingAddressElement = checkout.createElement('address', {mode: 'billing'}); billingAddressElement.mount('#billing-address');`\n\nThe following options are supported:\n\n*   [mode](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-mode)\n*   [contacts](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-contacts)\n*   [display](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-display)\n\n[](#update-an-address-manually)\n\nYou can update billing or shipping information manually by setting [updateBillingAddress](https://docs.stripe.com/js/custom_checkout/react/update_billing_address) or [updateShippingAddress](https://docs.stripe.com/js/custom_checkout/react/update_shipping_address).\n\nIf you are rendering a custom address form, do not call these functions on every change. Instead, call the update functions after your customer has finished inputting the address (e.g., in response to a “save” button).",
    "title": "Collect shipping or billing information | Stripe Documentation",
    "description": "Learn how to collect shipping or billing information with the Address Element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/sources/object",
    "markdown": "# The Source object | Stripe API Reference\n\n## [The Source object](https://docs.stripe.com/api/sources/object)Deprecated\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.\n    \n*   Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.\n    \n*   The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Information about the owner of the payment instrument that may be used or required by particular source types.\n    \n*   Information related to the redirect flow. Present if the source is authenticated by a redirect (`flow` is `redirect`).\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    Extra information about a source. This will appear on your customer’s statement every time you charge the source.\n    \n*   The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.\n    \n*   The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://docs.stripe.com/sources) used.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ach_credit_transfer` |\n    | `ach_debit` |\n    | `alipay` |\n    | `bancontact` |\n    | `card` |\n    | `card_present` |\n    | `eps` |\n    | `giropay` |\n    | `ideal` |\n    | `klarna` |\n    | Show 6 more |\n    \n\n### More attributes\n\n*   #### \n    \n    code\\_verificationnullable object\n    \n\n*   #### \n    \n    source\\_ordernullable object\n    \n\n```\n{  \"id\": \"src_1N3lxdLkdIwHu7ixPHXy8UcI\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_eb829353ed79\",    \"bank_name\": \"TEST BANK\",    \"fingerprint\": \"kBQsBk9KtfCgjEYK\",    \"refund_account_holder_name\": null,    \"refund_account_holder_type\": null,    \"refund_routing_number\": null,    \"routing_number\": \"110000000\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": null,  \"client_secret\": \"src_client_secret_ZaOIRUD8a9uGmQobLxGvqKSr\",  \"created\": 1683144457,  \"currency\": \"usd\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {},  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"110000000-test_eb829353ed79\",    \"amount_charged\": 0,    \"amount_received\": 0,    \"amount_returned\": 0,    \"refund_attributes_method\": \"email\",    \"refund_attributes_status\": \"missing\"  },  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```\n\n## [Create a source](https://docs.stripe.com/api/sources/create)\n\nCreates a new source object.\n\n### Parameters\n\n*   The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://docs.stripe.com/sources/connect#cloning-card-sources) guide)\n    \n*   Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.\n    \n*   Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Information about the owner of the payment instrument that may be used or required by particular source types.\n    \n*   Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    An arbitrary string to be displayed on your customer’s statement. As an example, if your website is `RunClub` and the item you’re charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.\n    \n\n### More parameters\n\n### Returns\n\nReturns a newly created source.\n\n```\ncurl https://api.stripe.com/v1/sources \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=ach_credit_transfer \\  -d currency=usd \\  --data-urlencode \"owner[email]\"=\"jenny.rosen@example.com\"\n```\n\n```\n{  \"id\": \"src_1N3lxdLkdIwHu7ixPHXy8UcI\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_eb829353ed79\",    \"bank_name\": \"TEST BANK\",    \"fingerprint\": \"kBQsBk9KtfCgjEYK\",    \"refund_account_holder_name\": null,    \"refund_account_holder_type\": null,    \"refund_routing_number\": null,    \"routing_number\": \"110000000\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": null,  \"client_secret\": \"src_client_secret_ZaOIRUD8a9uGmQobLxGvqKSr\",  \"created\": 1683144457,  \"currency\": \"usd\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {},  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"110000000-test_eb829353ed79\",    \"amount_charged\": 0,    \"amount_received\": 0,    \"amount_returned\": 0,    \"refund_attributes_method\": \"email\",    \"refund_attributes_status\": \"missing\"  },  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```\n\n## [Update a source](https://docs.stripe.com/api/sources/update)\n\nUpdates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts the `metadata` and `owner` as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our [payment method guides](https://docs.stripe.com/sources) for more detail.\n\n### Parameters\n\n*   Amount associated with the source.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Information about the owner of the payment instrument that may be used or required by particular source types.\n    \n\n### More parameters\n\n### Returns\n\nReturns the source object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/sources/src_1N3lxdLkdIwHu7ixPHXy8UcI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"src_1N3lxdLkdIwHu7ixPHXy8UcI\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_eb829353ed79\",    \"bank_name\": \"TEST BANK\",    \"fingerprint\": \"kBQsBk9KtfCgjEYK\",    \"refund_account_holder_name\": null,    \"refund_account_holder_type\": null,    \"refund_routing_number\": null,    \"routing_number\": \"110000000\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": null,  \"client_secret\": \"src_client_secret_ZaOIRUD8a9uGmQobLxGvqKSr\",  \"created\": 1683144457,  \"currency\": \"usd\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"110000000-test_eb829353ed79\",    \"amount_charged\": 0,    \"amount_received\": 0,    \"amount_returned\": 0,    \"refund_attributes_method\": \"email\",    \"refund_attributes_status\": \"missing\"  },  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```\n\n## [Retrieve a source](https://docs.stripe.com/api/sources/retrieve)\n\nRetrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a source if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/sources/src_1N3lxdLkdIwHu7ixPHXy8UcI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"src_1N3lxdLkdIwHu7ixPHXy8UcI\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_eb829353ed79\",    \"bank_name\": \"TEST BANK\",    \"fingerprint\": \"kBQsBk9KtfCgjEYK\",    \"refund_account_holder_name\": null,    \"refund_account_holder_type\": null,    \"refund_routing_number\": null,    \"routing_number\": \"110000000\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": null,  \"client_secret\": \"src_client_secret_ZaOIRUD8a9uGmQobLxGvqKSr\",  \"created\": 1683144457,  \"currency\": \"usd\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {},  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"110000000-test_eb829353ed79\",    \"amount_charged\": 0,    \"amount_received\": 0,    \"amount_returned\": 0,    \"refund_attributes_method\": \"email\",    \"refund_attributes_status\": \"missing\"  },  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```\n\n## [Attach a source](https://docs.stripe.com/api/sources/attach)\n\nAttaches a Source object to a Customer. The source must be in a chargeable or pending state.\n\n### Parameters\n\n*   The identifier of the source to be attached.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the attached Source object.\n\nPOST /v1/customers/:id/sources\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/sources \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d source=src_1NfRGv2eZvKYlo2Cv7NAImBL\n```\n\n```\n{  \"id\": \"src_1NfRGv2eZvKYlo2Cv7NAImBL\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_52796e3294dc\",    \"routing_number\": \"110000000\",    \"fingerprint\": \"ecpwEzmBOSMOqQTL\",    \"bank_name\": \"TEST BANK\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": 1000,  \"client_secret\": \"src_client_secret_sBqfX18eq6GPfGxGvVfMByCp\",  \"created\": 1692121393,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {},  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"121042882-38381234567890123\",    \"amount_received\": 1000,    \"amount_charged\": 0,    \"amount_returned\": 0,    \"refund_attributes_status\": \"missing\",    \"refund_attributes_method\": \"email\"  },  \"redaction\": null,  \"statement_descriptor\": null,  \"status\": \"chargeable\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```",
    "title": "The Source object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-shell/launch",
    "markdown": "# Get started with the Stripe Shell\n\n## Get started with the Stripe Shell on any page in the Stripe docs site.\n\nThis page describes how to launch the Stripe Shell terminal window from any page on the Stripe docs site and how to get started.\n\n## Initial setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  To begin, you need a Stripe account. If you don’t already have one, [follow these instructions](https://dashboard.stripe.com/register).\n2.  Click **Sign in** to authenticate with your Stripe account’s API _secret key_ for [test mode](https://docs.stripe.com/test-mode \"test mode\").\n\n[](#listen)\n\n1.  Press the `Control` + `Backtick` (on Windows, Linux or macOS) keys on your keyboard to launch the Stripe Shell.\n2.  Click the **stripe listen** command to listen for [events](https://docs.stripe.com/webhooks#events-overview), or type the command and press the **Enter** key on your keyboard.\n\n> This launches a Stripe Shell session inside a new frame at the bottom of the site and displays a command-line terminal.\n\n[](#first)\n\n1.  Press the `Alt` + `Shift` + `D` (on Windows, Linux) or `Command` + `D` (on macOS) keys on your keyboard to open a new pane.\n2.  Click the green _play_ button to run the command, or copy and paste the command and press the `Enter` key on your keyboard.\n3.  Copy the Stripe resource identifier (in `id`) in the response for subsequent requests.\n\n`stripe products create \\ --name=\"Introductory offer (Monthly)\" \\ --description=\"$0.99 per month\"`\n\n> This creates a product with a name and description.\n\n[](#get-started)\n\nWatch this video to learn all of the different ways to use the Stripe Shell.\n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Keyboard shortcuts in the Stripe Shell](https://docs.stripe.com/stripe-shell/keyboard-shortcuts)",
    "title": "Get started with the Stripe Shell | Stripe Documentation",
    "description": "Get started with the Stripe Shell on any page in the Stripe docs site.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/collect-taxes",
    "markdown": "# Collect taxes | Stripe DocumentationThe Stripe Docs logo\n\nTo start collecting tax:\n\n1.  Pass [automatic\\_tax\\[enabled\\]=true](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-automatic_tax-enabled).\n2.  Specify a [tax\\_code](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data-product_data-tax_code) for each line item.\n3.  Specify a [tax\\_behavior](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data-tax_behavior) for each line item.\n\n`const session = await stripe.checkout.sessions.create({   line_items: [     {       price_data: {         currency: 'usd',         product_data: {           name: 'T-shirt',           tax_code: 'txcd_99999999',         },         unit_amount: 2000,         tax_behavior: 'exclusive',       },       quantity: 1,     },   ],   mode: 'payment',   ui_mode: 'custom' as any,   automatic_tax: {enabled: true},   return_url: '{{RETURN_URL}}' });`\n\n### Tax codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTax codes associate products with tax rates. Choose the tax code that best fits your product from the [list of available tax codes](https://docs.stripe.com/tax/tax-codes). If a product doesn’t fit any of the specific codes, use one of the codes with “General” in its name.\n\n### Tax behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax behavior determines how tax is presented to the buyer. There are two options for tax behavior:\n\n*   Exclusive: The product price doesn’t include tax. Tax is added as a separate amount.\n*   Inclusive: The product price includes any tax amount.\n\nYou can also set a [default tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#setting-a-default-tax-behavior-(recommended)) in the Stripe Tax settings.\n\nLearn more about [tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior).",
    "title": "Collect taxes | Stripe Documentation",
    "description": "Use Stripe Tax to collect taxes in Custom Checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/crypto/onramp_sessions/object",
    "markdown": "# The Crypto Onramp Session object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n\n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    kyc\\_details\\_providedboolean\n    \n    Has the value `true` if any user kyc details were provided during the creation of the onramp session. Otherwise, has the value `false`.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    redirect\\_urlnullable string\n    \n*   The status of the Onramp Session. One of = `{initialized, rejected, requires_payment, fulfillment_processing, fulfillment_complete}`\n    \n*   #### \n    \n    transaction\\_detailsobject\n    \n    A hash representing monetary details of the transaction this session represents.\n    \n\nThe Crypto Onramp Session object\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [Create a CryptoOnrampSession](https://docs.stripe.com/api/crypto/onramp_sessions/create)\n\nCreates a CryptoOnrampSession object.\n\nAfter the CryptoOnrampSession is created, display the onramp session modal using the `client_secret`.\n\nRelated guide: [Set up an onramp integration](https://docs.stripe.com/crypto/integrate-the-onramp)\n\n### Parameters\n\n*   #### \n    \n    customer\\_ip\\_addressstring\n    \n    The IP address of the customer the platform intends to onramp.\n    \n    If the user’s IP is in a region we can’t support, we return an `HTTP 400` with an appropriate error code.\n    \n    We support IPv4 and IPv6 addresses. Geographic supportability is checked again later in the onramp flow, which provides a way to hide the onramp option from ineligible users for a better user experience.\n    \n*   The default amount of crypto to exchange into.\n    \n    *   When left null, a default value is computed if `source_amount`, `destination_currency`, and `destination_network` are set.\n    *   When set, both `destination_currency` and `destination_network` must also be set. All cryptocurrencies are supported to their full precisions (for example, 18 decimal places for `eth`). We validate and generate an error if the amount exceeds the supported precision based on the exchange currency. Setting `source_amount` is mutually exclusive with setting `destination_amount` (only one or the other is supported). Users can update the amount in the onramp UI.\n    \n*   #### \n    \n    destination\\_currenciesarray of enums\n    \n    The list of destination cryptocurrencies a user can choose from.\n    \n    *   When left null, all supported cryptocurrencies are shown in the onramp UI subject to `destination_networks` if set.\n    *   When set, it must be a non-empty array where all values in the array are valid cryptocurrencies. You can use it to lock users to a specific cryptocurrency by passing a single value array. Users **cannot** override this parameter.\n    \n*   The default destination cryptocurrency.\n    \n    *   When left null, the first value of `destination_currencies` is selected.\n    *   When set, if `destination_currencies` is also set, the value of `destination_currency` must be present in that array. To lock a `destination_currency`, specify that value as the single value for `destination_currencies`. Users can select a different cryptocurrency in the onramp UI subject to `destination_currencies` if set.\n    \n*   The default destination crypto network.\n    \n    *   When left null, the first value of `destination_networks` is selected.\n    *   When set, if `destination_networks` is also set, the value of `destination_network` must be present in that array. To lock a `destination_network`, specify that value as the single value for `destination_networks`. Users can select a different network in the onramp UI subject to `destination_networks` if set.\n    \n*   #### \n    \n    destination\\_networksarray of enums\n    \n    The list of destination crypto networks user can choose from.\n    \n    *   When left null, all supported crypto networks are shown in the onramp UI.\n    *   When set, it must be a non-empty array where values in the array are each a valid crypto network. It can be used to lock users to a specific network by passing a single value array. Users **cannot** override this parameter.\n    \n*   Pre-populate some of the required KYC information for the user if you’ve already collected it within your application.\n    \n    Related guide: [Using the API](https://docs.stripe.com/crypto/using-the-api#how-to-pre-populate-customer-information)\n    \n*   #### \n    \n    lock\\_wallet\\_addressboolean\n    \n    Whether or not to lock the suggested wallet address. If destination tags are provided, this will also lock the destination tags.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The default amount of fiat (in decimal) to exchange into crypto.\n    \n    *   When left null, a default value is computed if `destination_amount` is set.\n    *   When set, setting `source_amount` is mutually exclusive with setting `destination_amount` (only one or the other is supported). We don’t support fractional pennies. If fractional minor units of a currency are passed in, it generates an error. Users can update the value in the onramp UI.\n    \n*   The default source fiat currency for the onramp session.\n    \n    *   When left null, a default currency is selected based on user locale.\n    *   When set, it must be one of the fiat currencies supported by onramp. Users can still select a different currency in the onramp UI.\n    \n*   The end customer’s crypto wallet address (for each network) to use for this transaction.\n    \n    *   When left null, the user enters their wallet in the onramp UI.\n    *   When set, the platform must set either `destination_networks` or `destination_network` and we perform address validation. Users can still select a different wallet in the onramp UI.\n    \n\n### Returns\n\nReturns the created CryptoOnrampSession object\n\nPOST /v1/crypto/onramp\\_sessions\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [Retrieve a CryptoOnrampSession](https://docs.stripe.com/api/crypto/onramp_sessions/retrieve)\n\nRetrieves the details of a CryptoOnrampSession that was previously created.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CryptoOnrampSession object\n\nGET /v1/crypto/onramp\\_sessions/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/crypto/onramp_sessions/cos_1NamBL2eZvKYlo2CP38sZVEW \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [List CryptoOnrampSessions](https://docs.stripe.com/api/crypto/onramp_sessions/list)\n\nReturns a list of onramp sessions that match the filter criteria. The onramp sessions are returned in sorted order, with the most recent onramp sessions appearing first.\n\n### Parameters\n\n*   Only return onramp sessions that were created during the given date interval.\n    \n*   The destination cryptocurrency to filter by.\n    \n*   The destination blockchain network to filter by.\n    \n*   An object ID cursor for use in pagination.\n    \n*   A limit ranging from 1 to 100 (defaults to 10).\n    \n*   An object ID cursor for use in pagination.\n    \n*   The status of the Onramp Session. One of = `{initialized, rejected, requires_payment, fulfillment_processing, fulfillment_complete}`\n    \n\n### Returns\n\nA dictionary with a data property that contains an array of up to `limit` onramp sessions, starting after onramp session `starting_after`. Each entry in the array is a separate onramp session object. If no more onramp sessions are available, the resulting array will be empty.\n\nGET /v1/crypto/onramp\\_sessions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/crypto/onramp_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/crypto/onramp_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",      \"object\": \"crypto.onramp_session\",      \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",      \"created\": 1691010131,      \"kyc_details_provided\": false,      \"livemode\": true,      \"metadata\": {},      \"redirect_url\": null,      \"status\": \"initialized\",      \"transaction_details\": {        \"destination_amount\": null,        \"destination_currencies\": [          \"btc\",          \"eth\",          \"matic\",          \"sol\",          \"xlm\",          \"avax\",          \"usdc\"        ],        \"destination_currency\": null,        \"destination_network\": null,        \"destination_networks\": [          \"bitcoin\",          \"ethereum\",          \"base\",          \"polygon\",          \"solana\",          \"stellar\",          \"avalanche\"        ],        \"fees\": null,        \"lock_wallet_address\": false,        \"source_amount\": null,        \"source_currency\": null,        \"transaction_id\": null,        \"wallet_address\": null,        \"wallet_addresses\": null      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Crypto Onramp Session object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/link/card-element-link",
    "markdown": "# Link in the Card Element\n\n## Enable checkout using Link with the Card Element.\n\n#### Caution\n\nStripe no longer recommends using the Card Element as part of your Web Elements integration. To integrate Link, use one of our preferred Elements: the Link Authentication Element, Express Checkout Element, or Payment Element.\n\nUse [Link](https://docs.stripe.com/payments/link/what-is-link) in the Card Element to save and autofill payment information for your customers, so they don’t need to enter their payment details manually.\n\nThe Card Element can take on two forms: a single line [Card Element](https://docs.stripe.com/js/element/other_element?type=card) or split Elements (like [Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), and [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)). When referring to the Card Element, the following information applies to both forms.\n\n## The Link flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen Link is enabled, the card input form displays a **Link** button, which an authenticated customer can click to autofill their payment details. They only need to authenticate their account once every 90 days on any Link-enabled business.\n\n![Link autofilling customer payment details](https://b.stripecdn.com/docs-statics-srv/assets/link-single-ce-returning-user.e50d94e96551810ac4f95c2fabfd33b9.png)\n\nLink autofilling customer payment details\n\nIf a customer hasn’t signed up for Link and they click the **Link** button, they’re asked to add their email address, phone number, and payment method. A customer can also enter their card details into the Card Element first, and save that card in a Link account.\n\n![A customer signing up for Link](https://b.stripecdn.com/docs-statics-srv/assets/link-single-ce-new-user.b8495f2e5258b8cf04b5d43e3a290ec0.png)\n\nA customer signing up for Link\n\nIf a returning Link customer clicks the **Link** button and needs to authenticate, Link asks them to do it with an SMS or email code. After the customer authenticates, Link loads their previously saved payment details, allowing them to check out faster.\n\n![Link authenticating a customer](https://b.stripecdn.com/docs-statics-srv/assets/link-in-ce-dialog.ec3340f0aaa847f610249e7dcc3fb7ad.png)\n\nLink authenticating a customer\n\nWe’re continuously optimizing Link to improve checkout conversion, and may selectively show Link when it’s most beneficial to customers at checkout. You can expect to see changes over time, including how and when Link appears.\n\n## Link enablement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLink is supported in the [Card Element](https://docs.stripe.com/js/element/other_element?type=card) globally for all businesses with granted access and doesn’t require additional fees or code changes (see note below for details). Link is fully compatible with the other features you receive from card payments.\n\nStripe automatically enables Link in the Card Element. If you want to turn Link off for all instances of the Card Element, visit the Link section of your [payment Method settings](https://dashboard.stripe.com/settings/payment_methods) and disable the `Link in Card Element` setting. This setting applies to both forms of the Card Element. To selectively disable Link in the Card Element, use the [disableLink](https://docs.stripe.com/js/elements_object/create_element?type=card#elements_create-options-disableLink) parameter. You only need to use one of these controls—if either `disableLink` is true or Link in the Card Element is disabled in settings, Link won’t appear in the Card Element.\n\nLink _isn’t_ visible in the Card Element if:\n\n*   The parent container that the Card Element is mounted in is too short in height or narrow in width to display the Link button.\n    \n*   The Card Element is displayed on a browser that doesn’t support pop-ups, including in-app browsers. View information about [supported browsers](#test-link-in-the-card-element).\n    \n*   The [Cross-Origin-Opener-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) is set to `same-origin`. The Link pop-up must communicate with the page that opened it, so Link in the Card Element isn’t compatible with configurations that block this communication.\n    \n\n#### Note\n\nWe’re releasing Link in the Card Element in phases. Link for the [single line Card Element](https://docs.stripe.com/js/element/other_element?type=card) was released in 2023, followed by Link in [split Elements](https://docs.stripe.com/js/element/other_element?type=cardNumber) in late 2023 and early 2024. Only accounts with granted access can see Link in the Card Element in their [Payment Method settings](https://dashboard.stripe.com/settings/link) or use Link in production or test mode. Link isn’t currently supported for Stripe accounts based in India.\n\n## Use the Card Element and Payment Request Button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also use Link with the [Payment Request Button](https://docs.stripe.com/payments/link/payment-request-button-link). Link in the Card Element operates independently from Link in the Payment Request button. If you use both the Payment Request Button and the Card Element, Link might appear in both during checkout. For more information on when Link appears in the Payment Request Button, see [Link in the Payment Request Button](https://docs.stripe.com/payments/link/payment-request-button-link).\n\n## Link and Connect platforms ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLink is automatically available to any accounts that access the Card Element through a Connect platform integration. Depending on a platform’s integration, a platform may be able to give its users ([connected accounts](https://docs.stripe.com/connect/enable-payment-acceptance-guide?platform=web#create-account)) the ability to customize their own Link settings in the Dashboard:\n\n### Eligibility requirements for connected platforms ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the following conditions are all met by your platform, then your connected accounts can manage their Link settings directly in their own Dashboard.\n\n*   You use [direct charges](https://docs.stripe.com/connect/direct-charges).\n    \n*   You create and charge payment methods on your connected accounts.\n    \n*   Your connected accounts have access to the full Stripe Dashboard.\n    \n\nTo set the default state for all connected accounts on your platform:\n\n1.  Click **Edit settings** under **Your connected accounts** in [Payment Method settings](https://dashboard.stripe.com/settings/connect/payment_methods).\n    \n2.  Navigate to **Link in the Card Element** in the Link section.\n    \n\n### Ineligible connected platforms ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the following cases, Link is controlled by your platform account settings, and your connected accounts can’t customize their Link settings for payments processed through your platform:\n\n*   You create payment methods on your platform and then [clone payment methods](https://docs.stripe.com/payments/payment-methods/connect#cloning-payment-methods) to your connected accounts.\n    \n*   You use [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).\n    \n*   Your connected accounts don’t have access to the full Stripe Dashboard.\n    \n\nTo manage your platform account settings:\n\n1.  Click **Edit settings** under **Your Account** in [Payment Method settings](https://dashboard.stripe.com/settings/connect/payment_methods).\n    \n2.  Navigate to **Link in the Card Element** in the Link section. If you want to turn Link off for only specific connected accounts, you can use the [disableLink](https://docs.stripe.com/js/elements_object/create_element?type=card#elements_create-options-disableLink) parameter.\n    \n\n### Payment processing for connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   If your platform offers you the ability to customize your Link settings for platform payments, then you can manage your Link in Card Element settings within [Payment Method settings](https://dashboard.stripe.com/settings/payment_methods) by selecting your platform from the dropdown menu at the top of the page.\n    \n*   If your platform isn’t able to offer you settings customization, then the platform determines Link’s availability for all payments processed through the platform, and you won’t have settings control for platform payments in your Dashboard.\n    \n*   For payments you process without a platform, you can manage Link in your [Payment Method settings](https://dashboard.stripe.com/settings/payment_methods) by selecting “no platform” from the dropdown menu at the top of the page.\n    \n\n## Test Link in the Card Element ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Caution\n\nDon’t store real user data in [test mode](https://docs.stripe.com/test-mode \"test mode\") Link accounts. Treat them as if they’re publicly available, because these test accounts are associated with your publishable key.\n\nLink works with the following browsers:\n\n*   Chrome, Chrome Mobile, and Microsoft Edge.\n    \n*   Safari on desktop and iOS (last 3 major versions).\n    \n\nLink is available in both production and test mode. You can create test mode Link accounts using any valid email address. The following table shows the fixed one-time passcode values that Stripe accepts for authenticating Link test mode accounts:\n\n| Value | Outcome |\n| --- | --- |\n| Any other 6 digits not listed below | Success |\n| 000001 | Error, code invalid |\n| 000002 | Error, code expired |\n| 000003 | Error, max attempts exceeded |\n\nEnabling Link in test mode presents Link on all Card Element test mode sessions that meet the [enablement requirements](#enable-link). In production, Link’s visibility might vary to maximize Link’s conversion benefits in each checkout session.",
    "title": "Link in the Card Element | Stripe Documentation",
    "description": "Enable checkout using Link with the Card Element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/naver-pay/set-up-future-payments",
    "markdown": "# Set up future payments with Naver Pay\n\nSave Naver Pay payment details using [Checkout](https://docs.stripe.com/payments/checkout), our fully hosted checkout page.\n\nLearn how to [set up a subscription with Naver Pay](https://docs.stripe.com/billing/subscriptions/naver-pay) to create recurring payments after saving a payment method in Checkout.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-permissions)\n\nIf you save your customer’s payment method for future use, you need permission. Creating an agreement (sometimes called a mandate) up front allows you to save your customer’s payment details and charge them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save your customer’s payment method details, and let them opt in. If you plan to charge your customer when they’re offline, make sure that your terms also include the following:\n\n*   The customer’s permission for you to initiate a payment or a series of payments on their behalf for specified transactions\n*   The anticipated frequency (one-time or recurring) and timing of payments\n*   How you determine the payment amount\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service\n\nMake sure that you keep a record of your customer’s written agreement to these terms, and only submit charges in accordance with the agreed terms.\n\n[](#web-create-customer)\n\nTo reuse a Naver Pay payment method for future payments, attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a [Customer object](https://docs.stripe.com/api/customers) when your customer creates an account with your business, and associate the ID of the Customer object with your own internal representation of that customer. Alternatively, you can create a new Customer before saving a payment method for future payments.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#web-create-checkout-session)\n\nYour customer must authorize you to use their NicePay account for future payments through Stripe Checkout. This allows you to accept Naver Pay payments. Add a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) that the response returns.\n\n``Stripe::Checkout::Session.create({   mode: 'setup',   payment_method_types: ['card'],   payment_method_types: ['card', 'naver_pay'],   payment_method_data: {     naver_pay: {       funding: 'point' # or card   },   line_items: [{     price_data: {       currency: 'usd',       # To accept `naver_pay`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#web-test-integration)\n\nWhile testing your Checkout integration, select **Naver Pay** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
    "title": "Set up future payments with Naver Pay | Stripe Documentation",
    "description": "Learn how to save Naver Pay to charge your customers later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/application_fees/object",
    "markdown": "# The Application Fee object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   ID of the Stripe account this fee was taken from.\n    \n*   Amount earned, in cents.\n    \n*   Amount in cents refunded (can be less than the amount attribute on the fee if a partial refund was issued)\n    \n*   ID of the charge that the application fee was taken from.\n    \n\n*   Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationstringExpandable\n    \n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    fee\\_sourcenullable object\n    \n\n*   #### \n    \n    originating\\_transactionnullable stringExpandable\n    \n\nThe Application Fee object\n\n```\n{  \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"object\": \"application_fee\",  \"account\": \"acct_164wxjKbnvuxQXGu\",  \"amount\": 105,  \"amount_refunded\": 105,  \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",  \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",  \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",  \"created\": 1506609734,  \"currency\": \"gbp\",  \"livemode\": false,  \"originating_transaction\": null,  \"refunded\": true,  \"refunds\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284508,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284441,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284315,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284154,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284084,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670283974,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670015681,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1625738880,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {          \"order_id\": \"6735\"        }      },      {        \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1602005482,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_D0s7fGBKB40Twy\",        \"object\": \"fee_refund\",        \"amount\": 138,        \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",        \"created\": 1528486576,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      }    ],    \"has_more\": false,    \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"  },  \"fee_source\": {    \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",    \"type\": \"charge\"  }}\n```\n\n## [Retrieve an application fee](https://docs.stripe.com/api/application_fees/retrieve)\n\nRetrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an application fee object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/application\\_fees/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"object\": \"application_fee\",  \"account\": \"acct_164wxjKbnvuxQXGu\",  \"amount\": 105,  \"amount_refunded\": 105,  \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",  \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",  \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",  \"created\": 1506609734,  \"currency\": \"gbp\",  \"livemode\": false,  \"originating_transaction\": null,  \"refunded\": true,  \"refunds\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284508,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284441,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284315,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284154,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284084,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670283974,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670015681,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1625738880,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {          \"order_id\": \"6735\"        }      },      {        \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1602005482,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_D0s7fGBKB40Twy\",        \"object\": \"fee_refund\",        \"amount\": 138,        \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",        \"created\": 1528486576,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      }    ],    \"has_more\": false,    \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"  },  \"fee_source\": {    \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",    \"type\": \"charge\"  }}\n```\n\n## [List all application fees](https://docs.stripe.com/api/application_fees/list)\n\nReturns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.\n\n### Parameters\n\n*   Only return application fees for the charge specified by this charge ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` application fees, starting after application fee `starting_after`. Each entry in the array is a separate application fee object. If no more fees are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/application_fees \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"object\": \"application_fee\",      \"account\": \"acct_164wxjKbnvuxQXGu\",      \"amount\": 105,      \"amount_refunded\": 105,      \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",      \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",      \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",      \"created\": 1506609734,      \"currency\": \"gbp\",      \"livemode\": false,      \"originating_transaction\": null,      \"refunded\": true,      \"refunds\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284508,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284441,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284315,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284154,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284084,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670283974,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670015681,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1625738880,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {              \"order_id\": \"6735\"            }          },          {            \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1602005482,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_D0s7fGBKB40Twy\",            \"object\": \"fee_refund\",            \"amount\": 138,            \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",            \"created\": 1528486576,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          }        ],        \"has_more\": false,        \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"      },      \"fee_source\": {        \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",        \"type\": \"charge\"      }    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Application Fee object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/access-data-in-warehouse/cloud-storage/google-cloud-storage",
    "markdown": "# Export Data to Google Cloud Storage with Data Pipeline\n\n## Automate recurring data exports from Stripe to your Google Cloud Storage bucket with Data Pipeline.\n\n## Google Cloud Storage destination![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nData pipeline can deliver copies of all your Stripe data as Parquet files into your Google Cloud Storage (GCS) bucket. It includes a directory of files for each table, delivered, and updated every 6 hours.\n\n[](#prerequisites)\n\nBefore starting the integration, make sure you have access and permission to:\n\n1.  Create a Google Cloud Storage bucket.\n2.  Create a service account enabling Stripe to create objects in the provisioned bucket.\n3.  Access the Stripe Dashboard as an admin.\n\n[](#select-project)\n\n1.  Navigate to the [Google Cloud Console](https://console.cloud.google.com/).\n2.  Select the project that you want to send your Stripe data to.\n\n[](#create-service-account)\n\n1.  On the [Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) page, make sure you’re in the correct Google Cloud Project.\n2.  Click **\\+ CREATE SERVICE ACCOUNT**.\n3.  Enter a name for the service account, for example, “<name>-stripe-data-pipeline.”\n4.  Add a description—for example, “This role gives Stripe access to upload data files to our bucket.”\n5.  Click **CREATE AND CONTINUE**.\n6.  In the **Select a Role** dropdown, add three roles: `Storage Object User`, `Storage Object Creator`, and `Storage Insights Collector Service`.\n7.  Click **DONE**.\n8.  For your new [Service Account](https://console.cloud.google.com/iam-admin/serviceaccounts), click **Manage keys** in the **Actions** menu.\n9.  Click **ADD KEY ▾** and select **Create new key**.\n10.  Choose **Key type JSON** and click **CREATE**. The JSON file downloads to your device.\n\n[](#create-bucket)\n\n1.  Make sure you’re in the correct Google Cloud project by navigating to **Cloud Storage** > **Buckets** in the [Google Cloud console](https://console.cloud.google.com/storage/browser).\n2.  Click **\\+ CREATE**.\n3.  In the **Name** field, we recommend a name including “stripe,” such as “<name>-stripe-data.”\n4.  For the **Location type**, we recommend **Multi-Regional US**.\n5.  For the **Storage class**, we recommend **Set a default class - Standard**.\n6.  For the **Access Control**, choose **Prevent public access** with **Uniform** access control.\n7.  For **Data protection**, we recommend a logical **Retention Policy**, for example **7 days**.\n8.  Click **CREATE** button to create the bucket.\n9.  Select the **PERMISSIONS** tab for your newly created bucket.\n10.  Under **Permissions** in the **VIEW BY PRINCIPAL** tab, check the box next to the Service Account you created in the previous step.\n\n[](#establishing-connection)\n\n1.  Visit the [Data Pipeline Dashboard](https://dashboard.stripe.com/settings/stripe-data-pipeline).\n2.  Click **Get started**.\n3.  Select the Google Cloud Storage logo and click **Continue ->**. This step generates a bucket name.\n4.  Enter the bucket name generated in the previous step.\n5.  Upload your Service Account `.json` file generated earlier.\n6.  Select your data encryption option. If you chose to use a customer managed key, upload your public key.\n7.  Click the **Next** button. Clicking this button sends test data to the bucket you provided, but not production data.\n8.  When you confirm test data delivery, go to your [Cloud Storage bucket](https://console.cloud.google.com/storage/browser).\n9.  Open the bucket, navigate to the **penny\\_test** directory, and open the **acct\\_** prefixed sub-directory to locate the delivered `account_validation.csv` test file.\n10.  Click the **account\\_validation.csv** file.\n11.  Click **DOWNLOAD**.\n12.  Click the **Upload the test value file** and upload the downloaded `account_validation.csv`.\n13.  Click **Confirm value**.\n14.  When you confirm the test value, click **Subscribe**. This subscribes you to the product and schedules the initial full load of data for delivery to your Google Cloud Storage bucket, a process that can take 6-12 hours.\n\n\\*Google Cloud Storage is a trademark of Google LLC.",
    "title": "Export Data to Google Cloud Storage with Data Pipeline | Stripe Documentation",
    "description": "Automate recurring data exports from Stripe to your Google Cloud Storage bucket with Data Pipeline.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/overview",
    "markdown": "# How subscriptions work | Stripe DocumentationThe Stripe Docs logo\n\nTo simplify the handling of failed payments and to create subscriptions before attempting payment:\n\n1.  Pass [payment\\_behavior=default\\_incomplete](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) when creating a subscription. If your subscription requires payment, it’s created with an `incomplete` status, otherwise your subscription immediately becomes `active`.\n2.  Activate an incomplete subscription by paying the first invoice.\n3.  Pass the payment intent identifier from the invoice to your user interface to collect payment information and confirm the payment intent. You can use [Elements](https://docs.stripe.com/js/elements_object), the [Android SDK](https://stripe.dev/stripe-android/), or the [iOS SDK](https://stripe.dev/stripe-ios/).\n\n### Payment status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe payment process differs across payment methods and geographical locations. Payments can also fail initially (for example, a customer might enter the wrong card number or have insufficient funds), so various payment outcomes are possible.\n\nA [PaymentIntent](https://docs.stripe.com/payments/payment-intents) tracks the lifecycle of every payment. Whenever a payment is due for a subscription, Stripe generates an invoice and a PaymentIntent. The PaymentIntent ID attaches to the invoice and you can access it from the Invoice and Subscription objects. The state of the PaymentIntent affects the state of the invoice and the subscription. Here’s how the different outcomes of a payment map to the different statuses:\n\n| Payment outcome | PaymentIntent status | Invoice status | Subscription status |\n| --- | --- | --- | --- |\n| Success | `succeeded` | `paid` | `active` |\n| Fails because of a card error | `requires_payment_method` | `open` | `incomplete` |\n| Fails because of authentication | `requires_action` | `open` | `incomplete` |\n\nThe following sections explain these statuses and the actions to take for each.\n\n### Payment succeeded ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your payment succeeds, the status of the PaymentIntent is `succeeded`, and the subscription becomes `active`. For [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options) with longer processing periods, subscriptions are immediately activated. In these cases, the status of the PaymentIntent may be `processing` for an `active` subscription until the payment succeeds.\n\nWith your subscription now activated, provision access to your product. Read the guide to learn more about [the subscription lifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle) and best practices for provisioning.\n\n| Response | Subscription | PaymentIntent |\n| --- | --- | --- |\n| `{   \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",   \"object\": \"subscription\",   \"status\": \"active\",   ...   \"latest_invoice\": {     \"id\": \"in_EmGqfJMYy3Nt9M\",     \"status\": \"paid\",     ...     \"payment_intent\": {       \"status\": \"succeeded\",       ...     }   } }` | **active** | **succeeded** |\n\n![Subscription payment network flow.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-succeeds.ac7343c9ec9a77e6efa1a84c02bb597d.svg)\n\n### Requires payment method ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf payment fails because of a [card error](https://docs.stripe.com/api/errors#errors-card_error), such as a [decline](https://docs.stripe.com/declines#issuer-declines), the status of the PaymentIntent is `requires_payment_method` and the subscription is `incomplete`.\n\n| Response | Subscription | PaymentIntent |\n| --- | --- | --- |\n| `{   \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",   \"object\": \"subscription\",   \"status\": \"incomplete\",   ...   \"latest_invoice\": {     \"id\": \"in_EmGqfJMYy3Nt9M\",     \"status\": \"open\",     ...     \"payment_intent\": {       \"status\": \"requires_payment_method\",       ...     }   } }` | **incomplete** | **requires\\_payment\\_method** |\n\nTo resolve these scenarios:\n\n*   Notify the customer.\n*   Collect new payment information and [confirm the payment intent](https://docs.stripe.com/api/payment_intents/confirm).\n*   Update the [default payment method](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method) on the subscription.\n\nLearn how to [handle payment failures for subscriptions](https://docs.stripe.com/billing/subscriptions/webhooks#payment-failures).\n\n![How to handle subscription payment failures.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-requires-payment-method.8305917aa91650ba7f7e9b6e5999ce32.svg)\n\n### Requires action ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome payment methods require customer authentication with [3D Secure](https://docs.stripe.com/payments/3d-secure) (3DS) to complete the payment process. If you use the [Payment Intents API](https://docs.stripe.com/api/payment_intents), the value of `latest_invoice.payment_intent.status` is `requires_action` when a customer needs to authenticate a payment. 3DS completes the authentication process. Whether a payment method requires authentication depends on your [Radar rules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar) and the issuing bank for the card.\n\nRegulations in Europe often require 3D Secure. See [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) to determine whether handling this status is important for your business. If you have an existing billing integration and want to add support for this flow, also see the [Billing SCA Migration guide](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\n| Response | Subscription | PaymentIntent |\n| --- | --- | --- |\n| `{   \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",   \"object\": \"subscription\",   \"status\": \"incomplete\",   ...   \"latest_invoice\": {     \"id\": \"in_EmGqfJMYy3Nt9M\",     \"status\": \"open\",     ...     \"payment_intent\": {       \"status\": \"requires_action\",       \"client_secret\": \"pi_91_secret_W9\",       \"next_action\": {         \"type\": \"use_stripe_sdk\",         ...       },       ...     }   } }` | **incomplete** | **requires\\_action** |\n\nTo handle these scenarios:\n\n*   Monitor for the `invoice.payment_action_required` event notification with [webhooks](https://docs.stripe.com/billing/subscriptions/webhooks). This indicates that authentication is required.\n*   Notify your customer that they must authenticate.\n*   Retrieve the client secret for the payment intent and pass it in a call to [stripe.ConfirmCardPayment](https://docs.stripe.com/js/payment_intents/confirm_card_payment). This displays an authentication modal to your customers, attempts payment, then closes the modal and returns context to your application.\n*   Monitor the `invoice.paid` event on your webhook endpoint to verify that the payment succeeded. Users can leave your application before `confirmCardPayment()` finishes. Verifying whether the payment succeeded allows you to correctly provision your product.\n\n![How to handle subscription payments that require additional action from the customer.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-requires-action.ac57889e9bccdb6ec4f5ea47fba194ec.svg)\n\n### Recurring charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe handles recurring charges for you automatically. This includes:\n\n*   [Automatically invoicing](https://docs.stripe.com/billing/invoices/subscription#subscription-renewal) customers and attempting payments when new billing cycles start.\n*   When payments fail, Stripe retries them using the [Smart Retries](https://docs.stripe.com/invoicing/automatic-collection#smart-retries) feature or your custom retry schedule. This automatically re-attempts payment according to your Dashboard settings when cards are declined. If a failure returns a non-retryable [decline code](https://docs.stripe.com/declines/codes), the scheduled retries continue but the payment executes only if you obtain a new payment method.\n\nYou can send a [dunning email](https://docs.stripe.com/invoicing/integration/send-email \"dunning email\") to customers for overdue payments to increase recovery chances. For payments that require 3D Secure, you can [configure your billing settings](https://dashboard.stripe.com/account/billing/automatic) to send a [hosted link](https://docs.stripe.com/invoicing/hosted-invoice-page) to customers so they can complete the flow.\n\n#### Build your own handling for recurring charge failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you don’t want to use Stripe’s tooling to manage failures, you can build your own. If a payment fails or if it requires customer authentication, the subscription’s `status` is set to `past_due` and the PaymentIntent status is either `requires_payment_method` or `requires_action`.\n\n![Objects involved when handling failed or action required subscription payments.](https://b.stripecdn.com/docs-statics-srv/assets/recurring-charge-failure.f0db8a9b3a90000f3df0b98f7aacfa36.svg)\n\nTo manage these scenarios, set up a [webhook](https://docs.stripe.com/webhooks \"webhook\") and listen to the [customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated) event so that you’re notified when subscriptions enter a `past_due` state:\n\n`{   \"id\": \"sub_E8uXk63MAbZbto\",   \"object\": \"subscription\",   ...   \"status\": \"past_due\",   \"latest_invoice\": \"in_1EMLu1ClCIKljWvsfTjRFAxa\" }`\n\nFor these subscriptions, you need to get your customers back into your application to collect a different payment method so they can complete the payment. You can use an email or a mobile push notification. Stripe provides built-in reminder emails to handle this case, which you can configure in your [billing settings](https://dashboard.stripe.com/account/billing/automatic).\n\nWhen your customer is back in your application, reuse either your [payment failure flow](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method) or [customer action flow](https://docs.stripe.com/billing/subscriptions/overview#requires-action) depending on the status of the associated PaymentIntent. After the payment succeeds, the status of the subscription is `active` and the invoice is `paid`.\n\n### Handle non-payment invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSubscriptions that include [free trials](https://docs.stripe.com/billing/subscriptions/trials), [usage-based billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing), invoices with coupons, or applied customer credit balances often result in non-payment invoices. This means you don’t immediately charge your customer when you create the subscription.\n\nEven though you don’t charge customers for the first invoice, authenticating and authorizing their card is often beneficial as it can increase the chance that the first non-zero payment completes successfully. Payments made this way are known as off-session payments. To manage these scenarios, Stripe created SetupIntents.\n\n#### Using SetupIntents ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use SetupIntents to:\n\n*   Collect payment information.\n*   Authenticate your customer’s card to claim [exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication \"SCA exemptions\") later.\n*   Authorize your customer’s card without charging it.\n\nAuthenticating payments allows your customer to grant permissions to charge their card. [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) requires this, and [3DS](https://docs.stripe.com/payments/3d-secure) is a common way to complete it. Collecting payment method information and authorizing it ensures that you can successfully charge the payment method.\n\nIn off-session scenarios, SetupIntents enable you to charge customers for their first non-zero payment without having to bring them back to your website or app for authentication. This reduces the friction on your customers.\n\nThe `pending_setup_intent` field on a subscription doesn’t cancel automatically when the subscription ends. Listen for `customer.subscription.deleted` webhooks and manually [cancel a subscription SetupIntent](https://docs.stripe.com/api/setup_intents/cancel) if needed.\n\nStripe automatically creates SetupIntents for subscriptions that don’t require an initial payment. The authentication and authorization process also completes at this point, if required. If both succeed or aren’t required, no action is necessary, and the `subscription.pending_setup_intent` field is `null`. If either step fails, Stripe recommends using the SetupIntent on your frontend to resolve the issue while your customer is on-session. The next two sections explain in detail how to manage scenarios where authentication or authorization fail.\n\n#### Managing authentication failures Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAuthentication failures occur when Stripe is unable to authenticate your customer with their card issuer. When this happens, the `status` of the SetupIntent is set to `requires_action`.\n\n![How to handle subscription payment authentication failures.](https://b.stripecdn.com/docs-statics-srv/assets/authentication_failure.2eaec43cac8c688f0ff3438fbe3b50e4.svg)\n\nTo resolve these scenarios, call [confirmCardSetup](https://docs.stripe.com/js#stripe-confirm-card-setup) on your frontend so that your customer can complete the authentication flow manually. The code example below [expands](https://docs.stripe.com/api/expanding_objects) the `pending_setup_intent` to complete the flow.\n\n`const {pending_setup_intent} = subscription;  if (pending_setup_intent) {   const {client_secret, status} = subscription.pending_setup_intent;    if (status === \"requires_action\") {     const {setupIntent, error} = await stripe.confirmCardSetup(client_secret);      if (error) {       // Display error.message in your UI.     } else {       // The setup has succeeded. Display a success message.     }   } }`\n\nAfter completing this flow, authorization executes if it’s required. If authorization succeeds, or if it’s not required, `pending_setup_intent` is updated to `null` upon completion.\n\nPayment authorization failures occur when Stripe can’t verify that a card can be charged. When this happens, the `status` of the SetupIntent is set to `requires_payment_method`. This generally means that subsequent charges with that card fail.\n\n![How to handle subscription payment authorization failures.](https://b.stripecdn.com/docs-statics-srv/assets/authorization_failure.0b6ca4a2e2bbeba11710bf22fb0a5d00.svg)\n\nTo resolve these scenarios, [collect a new payment method](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method), then update the default payment method for your customer or the subscription. The code example below [expands](https://docs.stripe.com/api/expanding_objects) the `pending_setup_intent` to complete the flow.\n\n`const {pending_setup_intent, latest_invoice} = subscription;  if (pending_setup_intent) {   const {client_secret, status} = subscription.pending_setup_intent;    if (status === \"requires_action\") {     const {setupIntent, error} = await stripe.confirmCardSetup(client_secret);      if (error) {       // Display error.message in your UI.     } else {       // The setup has succeeded. Display a success message.     }   } else if (status === \"requires_payment_method\") {     // Collect new payment method   } }`",
    "title": "How subscriptions work | Stripe Documentation",
    "description": "Learn how subscriptions work within Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/workbench/webhooks",
    "markdown": "# Set up a webhook endpoint with Workbench\n\n## Set up a webhook endpoint with WorkbenchBeta\n\n## Use Workbench to set up a webhook endpoint and receive events from Stripe.\n\nThis guide describes how to set up a webhook endpoint using Workbench.\n\nTo register a webhook endpoint in Workbench:\n\n1.  Open **Workbench** in the [Dashboard](https://dashboard.stripe.com/), then click the **Webhooks** tab.\n2.  Click **Register a new webhook endpoint**.\n3.  Select the API version for the [events object](https://docs.stripe.com/api/events) you want to consume.\n4.  If you’re using [Connect](https://docs.stripe.com/connect), you can listen for **Events on connected accounts**. Otherwise, choose **Events on your account**.\n5.  Select the [event types](https://docs.stripe.com/api/events/types) that you want to send to a webhook endpoint, then click **Continue**.\n6.  Provide the **Endpoint URL** for Stripe to send webhooks to and an optional description for the endpoint.\n7.  Click **Create destination** to create your webhook endpoint.\n\n![Register a new webhook endpoint in the Webhooks tab](https://b.stripecdn.com/docs-statics-srv/assets/create-webhook-endpoint.92271ebcb6d3c1f936baaeeda36feafc.png)\n\nRegister a new webhook endpoint in the **Webhooks** tab\n\n## Configure an existing webhook endpoint ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can update or delete existing webhook endpoints in the Workbench **Webhooks** tab. You can also temporarily disable a registered webhook endpoint. Stripe won’t attempt to resend any events generated while the respective webhook endpoint is disabled. You can also [manage webhook endpoints](https://docs.stripe.com/api/webhook_endpoints) programmatically.\n\n## View event deliveries ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo view event deliveries, select the webhook endpoint in **Webhooks**, then select the **Event deliveries** tab.\n\nThe **Event deliveries** tab provides a list of events and whether they’re `Delivered`, `Pending`, or `Failed`. Click an event to view the `Delivery attempts`, which includes the HTTP status code of previous delivery attempts and the time of pending future deliveries.\n\n![View event delivery attempts on a webhook endpoint's Event deliveries tab](https://b.stripecdn.com/docs-statics-srv/assets/view-event-deliveries.375483a863ab143a0e92f01fa01c14b0.png)\n\nView event delivery attempts on a webhook endpoint’s **Event deliveries** tab.\n\n## Retry sending an event ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn live mode, Stripe attempts to deliver a given event to your webhook endpoint for up to 3 days with an exponential back off. In the **Event deliveries** section of your webhook endpoint listed on Workbench, you can view when the next retry will occur.\n\nIn test mode, Stripe retries three times over a few hours. You can manually retry transmitting individual events to your webhook endpoint after this time using the Workbench **Webhooks** tab by navigating to the **Event deliveries** listed for your desired endpoint. You can also [query for missed events](https://docs.stripe.com/api/events/list) to reconcile the data over any time period.\n\n![Retry sending events using a webhook endpoint's Event deliveries tab](https://b.stripecdn.com/docs-statics-srv/assets/retry-failed-event-deliveries.225753ebf217cd1e9d0798f0c6f0a198.png)\n\nRetry sending events using a webhook endpoint’s **Event deliveries** tab.",
    "title": "Set up a webhook endpoint with Workbench | Stripe Documentation",
    "description": "Use Workbench to set up a webhook endpoint and receive events from Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/workbench/keyboard-shortcuts",
    "markdown": "# Keyboard shortcuts | Stripe DocumentationThe Stripe Docs logo\n\n## Keyboard shortcutsBeta\n\n## Learn about the keyboard shortcuts available for Workbench.\n\n## Show and hide Workbench![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOpen or minimize [Workbench](https://docs.stripe.com/workbench) from anywhere in the Dashboard with the **~** keyboard shortcut.\n\n## Keyboard shortcuts for Shell![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Shell](https://docs.stripe.com/workbench/shell) uses a similar set of keyboard shortcuts to other command-line environments, such as\\\\ [Bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell)).\n\n| Operation | Keyboard shortcut |\n| --- | --- |\n| Command-line completion provides suggestions after typing `stripe` and pressing spacebar. | *   **Tab** to see the next suggestion<br>*   **Shift**+**Tab** to see previous suggestions. |\n| Navigate through command prompt history to select a recent command. | *   **Up arrow** and **Down arrow** keys to cycle through recent commands<br>*   **Enter** to run the selected command |\n| Move the cursor position by one character | *   **Left arrow** key or **Control**+**B** to move left<br>*   **Right arrow** key or **Control**+**F** to move right |\n| Move the cursor position to the beginning of the command prompt | *   **Control**+**Left arrow** key (Windows or Linux)<br>*   **Command**+**Left arrow** key (macOS) |\n| Move the cursor position to the end of the command prompt | *   **Control**+**Right arrow** key (Windows or Linux)<br>*   **Command**+**Right arrow** key (macOS) |\n| Delete one word at a time in the command prompt | **Control**+**W** |\n| Delete one character after (and starting from) the cursor | **Control**+**D** |\n| Delete one character before the cursor | **Backspace** |\n| Remove all characters starting from the cursor to the end of the command prompt | **Control**+**K** |\n| Clear the command prompt | **Control**+**U** |\n| Open a new terminal pane (or click **New pane**) | *   **Alt**+**Shift**+**D** (Windows or Linux)<br>*   **Command**+**D** (macOS) |\n| Clear the terminal pane (or type “clear”) | *   **Control**+**L** (Windows or Linux)<br>*   **Command**+**K** (macOS) |",
    "title": "Keyboard shortcuts | Stripe Documentation",
    "description": "Learn about the keyboard shortcuts available for Workbench.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/skus",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/orders_legacy",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/accordion",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Accordion` component to your app:\n\n`import {Accordion, AccordionItem} from '@stripe/ui-extension-sdk/ui';`\n\nAccordions help a user to quickly scan a collection, identify elements, and access more details without leaving the context that they’re working in.\n\nThis is a preview of an `Accordion` component with three `AccordionItem` components inside:\n\n`<Accordion>   <AccordionItem title=\"Apples\">     <Box css={{padding: 'xlarge'}}>Accordion contents</Box>   </AccordionItem>   <AccordionItem title=\"Bananas\">     <Box css={{padding: 'xlarge'}}>Accordion contents</Box>   </AccordionItem>   <AccordionItem title=\"Peaches\" subtitle=\"A subtitle can be provided\">     <Box css={{padding: 'xlarge'}}>Accordion contents</Box>   </AccordionItem> </Accordion>`\n\n### Accordion props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>One or more AccordionItem components. |\n\n## AccordionItem![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`Accordion` components contain one or more `AccordionItem` components.\n\n### AccordionItem props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `title` | Required<br><br>`React.ReactNode`<br><br>A title describing the accordion item. |\n| `actions` | Optional<br><br>`React.ReactNode`<br><br>A component containing actions that a user can take on the item. If there are more than 2 actions, use an overflow menu to show the rest. |\n| `defaultOpen` | Optional<br><br>`boolean \\| undefined`<br><br>Whether or not the item should be open on the first render. |\n| `media` | Optional<br><br>`React.ReactNode`<br><br>A component containing an optional image or icon to help identify the item. |\n| `onChange` | Optional<br><br>`((isOpen: boolean) => void) \\| undefined`<br><br>Callback when the open state has changed. |\n| `subtitle` | Optional<br><br>`React.ReactNode`<br><br>An optional subtitle with addition descriptive information. |\n\n## Titles and subtitles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLabel all `AccordionItem` components with a `title` that uniquely identifies the item. You can also use an optional `subtitle` to provide a description or additional relevant information.\n\n`<Accordion>   <AccordionItem title=\"Apples\">     <Box css={{padding: 'xlarge'}}>Accordion contents</Box>   </AccordionItem>   <AccordionItem title=\"Bananas\">     <Box css={{padding: 'xlarge'}}>Accordion contents</Box>   </AccordionItem>   <AccordionItem title=\"Oranges\">     <Box css={{padding: 'xlarge'}}>Accordion contents</Box>   </AccordionItem>   <AccordionItem title=\"Peaches\" subtitle=\"A subtitle can be provided\">     <Box css={{padding: 'xlarge'}}>Accordion contents</Box>   </AccordionItem> </Accordion>`\n\nThe `AccordionItem` component can contain a media element to show a relevant icon or image that helps the user identify the item. Only include media when it helps users identify items and when there’s a strong association between the media and the item itself.\n\n`<Accordion>   <AccordionItem     media={<Img src=\"https://example.com/bank.svg\" />}     title=\"ACH credit transfer\"     subtitle=\"ACH Credit Transfer enables US customers...\"   >     <Box css={{padding: 'xlarge'}}>Accordion AccordionContents</Box>   </AccordionItem>   <AccordionItem     title=\"Cards\"     subtitle=\"Accept Visa, Mastercard, American Express...\"   >     <Box css={{padding: 'xlarge'}}>Accordion AccordionContents</Box>   </AccordionItem>   <AccordionItem title=\"Apple Pay\" subtitle=\"Manage Apple Pay domains and certificates.\">     <Box css={{padding: 'xlarge'}}>Accordion AccordionContents</Box>   </AccordionItem> </Accordion>`\n\n## Actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can represent actions that an item can have performed on it with buttons or links placed on the right-hand side of the accordion trigger.\n\n`const titles = ['Example using a link', 'Example using a button', 'Multiple buttons are cool too']; const actionExamples = [   <Link onPress={() => null}>Edit</Link>,   <Button onPress={() => null}>Configure</Button>,   <ButtonGroup>     <Button onPress={() => null}>Action 1</Button>     <Button onPress={() => null}>Action 2</Button>   </ButtonGroup>, ];  <Accordion>   {[0, 1, 2].map(i => (     <AccordionItem       title={titles[i]}       subtitle={i > 2 && 'An optional subtitle can be provided.'}       actions={actionExamples[i]}       key={i}     >       <Box css={{padding: 'xlarge'}}>Accordion AccordionContents</Box>     </AccordionItem>   ))} </Accordion>`\n\n## Disabling items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstead of removing a user’s ability to interact with disabled accordion items, disable the associated actions while still presenting as much information within the item as possible to the user.\n\n`<Accordion>   <AccordionItem     title=\"Orangesss\"     actions={<Button disabled onPress={() => null}>Edit</Button>}   >     <Box css={{padding: 'xlarge'}}>Accordion contents</Box>   </AccordionItem> </Accordion>`",
    "title": "Accordion | Stripe Documentation",
    "description": "Use accordions to split long or complex content into collapsible chunks.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/design",
    "markdown": "# Design your app | Stripe DocumentationThe Stripe Docs logo\n\n## Get started with design tools, guidelines, and philosophy.\n\nStripe Apps lets you build your own app on top of Stripe’s platform. You can give your app a user interface in the Stripe Dashboard by [building a UI extension](https://docs.stripe.com/stripe-apps/build-ui). If you do create a user interface for your app, use the provided tools and guidelines to simplify the design process.\n\nStripe Apps provides [UI components](#components-and-patterns), [common design patterns](#components-and-patterns), and a [Figma UI toolkit](#figma-ui-toolkit).\n\n## Brand expression and custom styling![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Custom styling![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustom styling of UI elements is intentionally limited. This is to maintain platform consistency with core UI elements and to ensure a high accessibility bar. In particular, we limit the colors you can use for each element because color contrast is an important aspect of accessible UI.\n\n### Branding elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo make your app visually distinctive, use the _app indicator_, a color bar and icon at the top of the app that helps users quickly identify which app they’re in. Unlike other UI elements, you can select any color for the app indicator.\n\nSelect your brand’s primary color and a simple icon or logo to match with it. Specify the color and icon using the `brandIcon` and `brandColor` props of your app’s [ContextView](https://docs.stripe.com/stripe-apps/components/contextview) component.\n\n![Five example apps with different color schemes and icons](https://b.stripecdn.com/docs-statics-srv/assets/branding.a28aed3191edfeb83ac39ca45f6638bc.png)\n\nHow your brand color and icon choices appear to users\n\n## Components and patterns![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Apps provides a range of [UI components](https://docs.stripe.com/stripe-apps/components) you can combine to create more complex UIs.\n\n[Patterns](https://docs.stripe.com/stripe-apps/patterns) are compositions of components that demonstrate how to use the latest UI components effectively. Using recommended patterns to build your app is the fastest way to make sure users have a high quality, consistent experience. It also speeds up the app review process.\n\nThe Figma UI toolkit contains every component, pattern, and a few example apps. It’s available at [@stripedesign](https://www.figma.com/@stripedesign) on Figma Community.\n\n[View UI toolkit](https://www.figma.com/community/file/1105918844720321397)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/ui-toolkit.45d84fe75b99d7ad307123e89be508bc.png)\n\nThe Figma UI toolkit\n\n## UI components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe users expect a consistent look and feel across the Stripe Dashboard, and Stripe Apps provides UI components to help you create them. These components are in an expandable drawer for Stripe Apps in the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/user-experience.f17e6a3c8a23fcc4cb78f414c6c2d066.png)\n\nUsers see your app’s UI extension in the Stripe Dashboard\n\nWhen users install an app that uses UI extensions, the app appears in a dock. When they click the dock, a drawer opens to show details about your app and actions users can take.\n\n## Available surfaces![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app drawer serves as the entry point for all apps a user has installed. You can display it on several surfaces. A _surface_ is a viewport corresponding to a page on the Stripe Dashboard.\n\n### Details pages![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDetails pages give a detailed look into a particular Stripe object—for example, a details page for a single payment, invoice, subscription, customer, or product. On a details page, your app can access information about the current object using the [UI extensions SDK](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api). For security reasons, this requires permission. For more information, see [Permissions](https://docs.stripe.com/stripe-apps/reference/permissions).\n\nConsider the Stripe objects that best correspond to your product, and build relevant apps across each one of them. Stripe Apps is an opportunity to build a contextual app that meets users in their existing workflows.\n\n### List pages![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nList pages give an overview of activity on your account: for example, the [Customers page](https://dashboard.stripe.com/customers) lists all customers, and the [Payments page](https://dashboard.stripe.com/payments) lists all payments.\n\nNot every app needs to have a view for list pages. Only build for list pages if you have features to offer that don’t relate to a specific object.\n\n### Home![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Dashboard homepage gives users a quick overview of their business and routes them to core workflows. Consider building apps for the home surface if you can showcase a relevant overview of the user’s business, corresponding to your product and its intersection with Stripe.\n\nNot every app needs to have a view for the home surface. Only build for home if you have relevant overview material to show incoming users.\n\n## App anatomy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/app-anatomy.c14d4c86a8882de27b023d62302faba6.png)\n\nThe parts of a Stripe app\n\n**App indicator** helps users identify which app they’re in. It contextually appears on the pages that you’ve built an app for. Users identify and invoke your app by seeing and clicking the app icon.\n\n**Header** houses your app name, view name, external link to your product, and a few top level actions that the user can perform on your app.\n\n**Content** is the blank canvas for your app that you can compose using the available set of UI components.\n\n**App Marketplace entrypoint** is the entry point for exploring and adding new apps. When a user adds a new app from the App Marketplace, the dock updates to show the new app’s icon.\n\n**Active app icon** is an icon that represents the currently selected app. If the user has other apps installed, their app icons appear above or below in the app dock. To set your app icon, use the [app manifest reference documentation](https://docs.stripe.com/stripe-apps/reference/app-manifest).\n\n## Types of views![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn app can be built of three different view types:\n\n1.  [ContextView](#contextview)\n2.  [FocusView](#focusview)\n3.  [SettingsView](#settingsview)\n\nThe view determines what the user sees at different points to engage with your app. Views are similar to the different HTML pages of a website.\n\n`ContextView` is the default view of your app. `SettingsView` is for the settings page. Both of these views are view root components, meaning they serve as base containers for other components to populate. Every component must have a view root component.\n\n#### `ContextView` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/views-contextview.be48c893f02a6e6be989ec659ddd29a7.png)\n\nWhat ContextView looks like\n\nThe first view of the app must be a [ContextView](https://docs.stripe.com/stripe-apps/components/contextview).\n\n`ContextView` allows apps to render next to Stripe content in a drawer, so users can look at them side-by-side and share context across your app and the Stripe content.\n\nThese in-context modules allow the app to meet users in their existing workflows and augment them with contextual information and actions.\n\nA user’s interaction with an app always begins with a `ContextView`. Each app must have at least one `ContextView` (per viewport), which acts as the default view when it loads—similar to the `index.html` of a website).\n\n#### `FocusView` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/views-focusview.3e3f40d737518fc2f2e083cc6395710c.png)\n\nWhat FocusView looks like\n\nA [FocusView](https://docs.stripe.com/stripe-apps/components/focusview) is for deeper or longer workflows, triggered from a `ContextView`.\n\nIn `FocusView`, a blocking backdrop is applied to the rest of the page to focus the user’s attention on the current view, reinforcing their purpose for any focused, start-to-finish tasks.\n\nThe backdrop doesn’t allow the user to interact with the contents of the page behind the drawer.\n\nChoose `FocusView` when:\n\n*   Your user is filling a form or performing a workflow that doesn’t need the immediate context of the Stripe page, and shouldn’t be easily interrupted\n*   You need a wider canvas to show a more complex view (for example, to preview a foreign object, like a support ticket).\n\n#### Not sure which view?\n\nWhen choosing between `ContextView` and `FocusView`, default to `ContextView`. This view provides users with Stripe content and your app’s content side-by-side.\n\nChoose `FocusView` when it’s important for the user to complete a focused task, from start to finish, or when you need a wider canvas to show a more complex view.\n\n#### `SettingsView` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/views-settings.b878b0d4b8240d7f3f2cdb89d5fc7626.png)\n\nWhat SettingsView looks like\n\nA [SettingsView](https://docs.stripe.com/stripe-apps/components/settingsview) appears on your app’s configuration page to let you provide custom settings for your app. Learn how to [add an app settings page](https://docs.stripe.com/stripe-apps/app-settings).",
    "title": "Design your app | Stripe Documentation",
    "description": "Get started with design tools, guidelines, and philosophy.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/development/dashboard/events",
    "markdown": "# View events and event object payloads\n\n## View events triggered by your account and their event object payload in the Developers Dashboard.\n\nWhen you send an API request, Stripe logs one or more events for your account. This page describes how to view events triggered by your account and their event object payload in the Developers Dashboard.\n\n## How events are logged![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis table describes the different ways Stripe logs an [Event](https://docs.stripe.com/api/events/types) for your account.\n\n| Source | Trigger | Events |\n| --- | --- | --- |\n| API | When user actions in your app or website result in an API call. | Logs one or more events on the [Events](https://dashboard.stripe.com/events) page. |\n| Dashboard | When you call an API by modifying your Stripe resources in the Stripe Dashboard. | Logs one or more events on the [Events](https://dashboard.stripe.com/events) page. |\n| API | When you manually trigger an event with the Stripe CLI. | Logs one or more events on the [Events](https://dashboard.stripe.com/events) page. |\n| API | When you call an API directly with the Stripe CLI. | Logs one or more events on the [Events](https://dashboard.stripe.com/events) page. |\n\n## Filter events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these steps to view events and their event object payload.\n\n1.  Open the [Events](https://dashboard.stripe.com/events) page.\n2.  To filter by event, click **Filter**, **Type**:\n    *   Enter an event name. For example, `payment_intent.created`.\n    *   Enter an event with the wild card character. For example, `payment_intent.*`.\n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Webhooks](https://docs.stripe.com/webhooks)",
    "title": "View events and event object payloads | Stripe Documentation",
    "description": "View events triggered by your account and their event object payload in the Developers Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/toolkit-reference",
    "markdown": "# Toolkit CSV reference | Stripe DocumentationThe Stripe Docs logo\n\n## Follow best practices to successfully migrate your subscriptions using the no-code Billing migration toolkit.\n\nUse this guide to help you specify your CSV file in the Billing migration toolkit. In the following examples, all timestamps are in Unix EPOCH format. We also provide test customer and price IDs that you can use while in test mode.\n\n## CSV prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you create or download a CSV file, make sure you know the following:\n\n|     |     |\n| --- | --- |\n| **Customer object** | All customers must have a default [payment method attached to them](https://docs.stripe.com/api/payment_methods/attach). Without a default payment method, future subscription payments will fail. If you don’t have a default payment method set for your customers after migrating their data, you have two options:<br><br>*   Obtain the user’s consent or rely on their past payment behavior to determine the default payment method on a per-customer basis.<br>*   Use this [provided script](https://gist.github.com/bsears90/c3f36bfe379dfd13cae749824c5b45ae) to attach the latest payment method to your customers and make it the default method. |\n| **Automatic tax** | If you use Stripe Tax (where you set automatic tax to true), all customers must have either [addresses or postal codes](https://docs.stripe.com/tax/customer-locations) (or †both) per country. Stripe needs this information to calculate taxes for the given subscriptions. |\n| **[`collection_method`](https://docs.stripe.com/api/subscriptions/create#create_subscription-collection_method)** | If you’re using the `send_invoice` payment method for your subscriptions:<br><br>*   Add email addresses to the required customers.<br>*   Add the [`days_until_due`](https://docs.stripe.com/api/subscriptions/create#create_subscription-days_until_due) parameter in the migration CSV file to state the validity of [invoices](https://docs.stripe.com/api/invoices \"invoices\") for each customer. |\n| **Dates** | *   To ensure accurate timing, pay special attention to timezones when you create epoch date-time formats for your migration CSV file.<br>*   For the toolkit, set the [`start_date`](https://docs.stripe.com/api/subscriptions/object#subscription_object-start_date) with a buffer of at least 24 hours in advance from the CSV upload time. We create a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules) so that you get this buffer time to confirm and verify accuracy. When the start date begins, the subscription changes from scheduled start to live state. |\n| **Coupons** | *   If the subscription schedule or subscription has [billing cycle anchor](https://docs.stripe.com/billing/subscriptions/billing-cycle) in the future and `proration_behavior` [set to](https://docs.stripe.com/billing/subscriptions/prorations#disable-prorations)`none`, updating these objects unsets the coupon. Re-apply the coupon if you make any updates to the subscription schedule or subscription.<br>*   To migrate a subscription with ongoing `discount_behavior`:<br>    *   Set a future phase that removes the coupon at the correct date instead of waiting for an expiration.<br>    *   Create a coupon for each subscription, with the duration being different on each one so they all expire correctly. |\n| **Stripe to Stripe migration** | Users can migrate subscriptions within Stripe accounts. You must input Customer IDs and Price IDs (and both Coupon IDs and Tax IDs, if using them) into the template associated with your destination Stripe account, and not your source Stripe account. The migration tool generates an error if you input IDs associated with your source account. |\n\n## Migration use-cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can apply the following migration use cases to your own migration, if applicable:\n\n*   [Migrate subscriptions with various pricing models](https://docs.stripe.com/billing/subscriptions/toolkit-reference#various-pricing)\n*   [Migrate subscriptions with different types of payment collection methods](https://docs.stripe.com/billing/subscriptions/toolkit-reference#payment-collection)\n*   [Migrate subscriptions at different stages of the subscription cycle](https://docs.stripe.com/billing/subscriptions/toolkit-reference#subscription-stage)\n*   [Migrate subscriptions with taxes](https://docs.stripe.com/billing/subscriptions/toolkit-reference#subscription-taxes)\n*   [Migrate subscriptions with discounts](https://docs.stripe.com/billing/subscriptions/toolkit-reference#subscription-discounts)\n*   [Migrate subscriptions within Stripe accounts](https://docs.stripe.com/billing/subscriptions/toolkit-reference#within-Stripe-accounts)\n*   [Migrate subscriptions with multiple phases](https://docs.stripe.com/billing/subscriptions/toolkit-reference#multiple-phases)\n\nYou can combine any Stripe-provided CSV template ([Basic](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#basic), [Multi-price items](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#multi-price), [Ad-hoc pricing](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit#ad-hoc)) with any of the examples below as needed.\n\n### Migrate subscriptions with various pricing models ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can migrate subscriptions with flat-rate pricing, such as a basic plan at 100 USD per month or an advanced plan at 200 USD per month. These subscriptions can have one or more line items.\n\n**Example 1 (Basic)**: Migrate a basic 100 USD monthly subscription with a quantity of 2, starting on January 1, 2024. The subscription is charged automatically using the default payment method.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 2   | subscription\\_1 |     |     |     |     | none | charge\\_automatically |     |     |     |     |     |     |     |\n\n**Example 2 (Multi-price items)**: Migrate the following subscriptions starting on January 1, 2024, to be charged automatically using the default payment method:\n\n*   A basic 100 USD monthly subscription with a quantity of 2\n*   An advanced 200 USD monthly subscription with a quantity of 1\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | items.0.price (required) | items.0.quantity | items.1.price | items.1.quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 1   | price\\_xxx2 | subscription\\_1 |     |     |     |     |     | none | charge\\_automatically |     |     |     |     |     |     |     |     |\n\n**Example 3 (Basic)**: Migrate the following subscription starting on January 1, 2024, to be charged automatically using the default payment method:\n\n*   A basic 100 USD monthly subscription with a quantity of 2\n*   An ad-hoc invoice add-on fee of 20 USD\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 2   | subscription\\_1 |     |     |     |     | none | charge\\_automatically |     |     |     |     | 50  | prod\\_xxx1 | usd |\n\nYou can also migrate subscriptions with ad-hoc pricing, in cases where you don’t have fixed pricing amounts.\n\n**Example 4 (Ad-hoc pricing)**: Migrate the following subscription starting on January 1, 2024, to be charged automatically using the default payment method:\n\n*   A 153 USD ad-hoc monthly subscription with a quantity of 1\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | adhoc\\_items.0.amount (required) | adhoc\\_items.0.product | adhoc\\_items.0.interval | adhoc\\_items.0.currency | adhoc\\_items.0.quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | prod\\_xxx1 | 1   | subscription\\_1 |     |     |     |     |     | none | charge\\_automatically |     |     |     |     |     |     |     |     |\n\n### Migrate subscriptions with different types of payment collection methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can collect payment for the migrated subscriptions either automatically with the default saved payment method or by sending an invoice that the customer can pay by the due date.\n\n**Example 1 (Basic)**: Migrate a yearly 500 USD subscription with a quantity of 1, starting on January 1, 2024, to be charged automatically using the default payment method.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 1   | subscription\\_1 |     |     |     |     | none | charge\\_automatically |     |     |     |     |     |     |     |\n\n**Example 2 (Basic)**: Migrate a yearly 500 USD subscription with a quantity of 1, starting on January 1, 2024. This subscription is billed using an invoice sent to the customer, with a 30-day due date.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 1   | subscription\\_1 |     |     |     |     | none | send\\_invoice |     |     | 30  |     |     |     |     |\n\n### Migrate subscriptions at different stages of subscription cycle ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Example 1 (Basic): Migrate a subscription that’s due for renewal**. For example, migrate a 100 USD monthly subscription with a renewal date of January 1, 2024. The subscription renews on the 1st of every month.\n\n*   Set the `start_date` to the current renewal date, so the subscription is charged immediately.\n*   Set the `billing_cycle_anchor` to the next renewal cycle date.\n*   Set `proration_behavior` to `none`.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 |     | subscription\\_1 |     | 1706745600 |     |     | none | charge\\_automatically |     |     |     |     |     |     |     |\n\n**Example 2 (Basic): Migrate a paid subscription that’s in the middle of a billing cycle**. For example, migrate a 100 USD monthly subscription with an original start date of December 25. The migration date is January 1, and the subscription renews on the 25th of every month.\n\n*   Set `backdate_start_date` to the original start date of the subscription.\n*   Set `billing_cycle_anchor` to the upcoming renewal date.\n*   Set `start_date` to the migration date.\n*   Set `proration_behavior` to `none` to avoid charging the customer again and keep the subscription in a scheduled state until the next billing cycle.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 |     | subscription\\_1 |     | 1706140800 |     |     | none | charge\\_automatically |     | 1703462400 |     |     |     |     |     |\n\n**Example 3 (Basic): Migrate subscriptions with trials**. For example, migrate a basic 100 USD monthly subscription starting on January 1, 2024. The subscription is under a trial until January 31, 2024. After the trial ends, the subscription is charged automatically using the default payment method.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 1   | subscription\\_1 |     |     |     | 1706659200 | none | charge\\_automatically |     | 1703462400 |     |     |     |     |     |\n\n**Example 4 (Basic): Migrate past-due subscriptions**. For example, migrate a 100 USD monthly subscription with a last cycle start date of December 25, which hasn’t been paid. Migrate this mid-cycle starting January 1, with a renewal date on the 25th of each month. This creates a prorated invoice from January 1 to January 25 that Stripe can attempt to collect payment for.\n\nTo migrate subscriptions that are in an active cycle but haven’t been paid in the previous system, set `proration_behavior` to `create_prorations` to immediately create an invoice and collect payment. This also enters the subscription into Stripe’s dunning flow, if the payment is still unpaid.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 1   | subscription\\_1 |     | 1706140800 |     |     | create\\_prorations | charge\\_automatically |     | 1703462400 |     |     |     |     |     |\n\n**Example 5: Migrate subscriptions that need to be canceled at the end of the cycle**. After migration, you can choose whether or not to charge these subscriptions, based on the migration timing (mid-cycle or at renewal).\n\nThey’re canceled at the end of that period. For example, migrate a basic 100 USD monthly subscription starting on January 1, 2024. This subscription is automatically canceled on January 31, 2024.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 1   | subscription\\_1 |     | 1706140800 |     |     | none | charge\\_automatically |     | 1703462400 |     |     | TRUE |     |     |\n\n### Migrate subscriptions with taxes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Example 1 (Basic)**: Migrate subscriptions to automatically calculate tax by enabling Stripe Tax. For example, migrate a 100 USD monthly subscription starting January 1, 2024, with Stripe Tax enabled to calculate the tax automatically.\n\nThe migration toolkit validates if you enabled Stripe Tax in advance, and if customers provided the required fields to calculate tax automatically. Make sure your customers provide the necessary information before migration.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 1   | subscription\\_1 | TRUE |     |     |     | none | charge\\_automatically |     |     |     |     |     |     |     |\n\n**Example 2 (Basic)**: Migrate subscriptions and calculate tax using [manual tax rates](https://dashboard.stripe.com/test/tax-rates). For example, to migrate a basic $100 monthly subscription starting on January 1, 2024, with 10% tax created using manual tax rates:\n\n*   Create a 10% manual tax rate in the [Dashboard](https://dashboard.stripe.com/test/tax-rates) (**Product catalog** > **Coupons**).\n*   Use the tax rate ID in the migration CSV template.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxx1 | 1704067200 | price\\_xxx1 | 1   | subscription\\_1 | FALSE | 1706140800 |     |     | none | charge\\_automatically | txr\\_xxx1 |     |     |     |     |     |     |\n\n**Example 3 (Basic)**: If you use an external tax provider, such as Avalara or Vertex:\n\nFor migrated subscriptions where tax is already calculated, leave both `automatic_tax` and `default_tax_rate` blank in the CSV.\n\nAfter the subscriptions are migrated and live, they automatically follow the tax integration workflows you set up for new subscriptions in your Billing integration.\n\n### Migrate subscriptions with discounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCurrently, the migration toolkit supports only one coupon per subscription.\n\n**Example 1 (Basic)**: You can migrate subscriptions with discounts that are applied after migration. For example, to migrate a $100 monthly subscription starting January 1, 2024, with a 10% forever discount:\n\n*   Create a 10% coupon in the [Dashboard](https://dashboard.stripe.com/test/tax-rates) (**Product catalog** > **Coupons**).\n*   Use the coupon name in the migration CSV file.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.third\\_party\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end | add\\_invoice\\_items.0.amount | add\\_invoice\\_items.0.product | add\\_invoice\\_items.0.currency |\n| **FIELD** | cus\\_xxxx1 | 1704067200 | price\\_xxx1 | 1   | subscription\\_1 |     |     | sample\\_coupon |     | none | charge\\_automatically |     |     |     |     |     |     |     |\n\n### Migrate subscriptions within Stripe accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe steps to migrate subscriptions from one Stripe account to another are the same as when migrating from a third-party system. Use the [Billing migration toolkit](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit) to migrate subscriptions. You’ll need to export the subscription data for your CSV file from your old Stripe account.\n\n**Example 1 (Basic)**: To create a migration CSV for a Stripe-to-Stripe migration:\n\n1.  Export the subscriptions from the old Stripe account using the Dashboard.\n2.  Use the following CSV example as a reference to map fields between the old and new Stripe accounts.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **ATTRIBUTE** | customer (required) | start\\_date (required) | price (required) | quantity | metadata.old\\_Stripe\\_sub\\_id | automatic\\_tax | billing\\_cycle\\_anchor | coupon | trial\\_end | proration\\_behavior | collection\\_method | default\\_tax\\_rate | backdate\\_start\\_date | days\\_until\\_due | cancel\\_at\\_period\\_end |\n| **FIELD** | Export field: Customer ID (from previous account export) | Export field: Current Period End UTC (from previous account export) | Respective price id in the new account | Export field: Quantity (from previous account export) | Export field: id (from previous account export) | TRUE if using Stripe tax in new account, else FALSE | Future billing date in new account | Respective coupon in the new account, if any | Respective trial in the new account, if any | `create_prorations` in case of prorated invoice, else `none` | `charge_automatically` or `send_invoice` | Respective tax rate in the new account, if any | Export field: Start Date UTC (from previous account export) | Specify if using `send_invoice` as collection method | Specify if a subscription is due to be canceled at period end |\n\n### Migrate subscriptions with multiple phases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe migration toolkit doesn’t support adding multiple phases directly to a subscription. We recommend the following approach:\n\n1.  Use the migration toolkit to migrate the initial phase of the subscription.\n2.  After the migration, add the additional phases to the migrated subscription schedules. To do so, call the [update](https://docs.stripe.com/api/subscription_schedules/update) endpoint or use the Stripe [Subscriptions](https://dashboard.stripe.com/test/subscriptions) Dashboard.\n3.  Adjust the `start_date` of the migration to allow enough time between the scheduled and live status changes. This allows you to make the phase updates before the subscriptions go live.\n\n## Full CSV specification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Attribute | Type | Description |\n| --- | --- | --- |\n| `customer` **(required)** | Stripe Customer ID | The identifier of the customer to create the subscription for. |\n| `start_date` **(required)** | Timestamp in epoch UNIX format | Determines when to create the subscription. You must provide a value that’s 24 hours (or greater) into the future. In test mode, you can set this to 1 hour in the future. |\n| `price` **(required)** | Stripe Price ID | Must be a recurring price. If migrating multiple items, use `items.x.{price, quantity}` format instead. Ad-hoc prices are also supported with `adhoc_items.x.{amount, interval, product, currency}`. |\n| `quantity` | Number | Determines quantity of a subscription. By default, each subscription is for one product, but Stripe allows you to subscribe a customer to multiple quantities of an item. |\n| `items.x.price` **(required)** | Stripe Price ID | The ID of the price object. Must be a recurring price. |\n| `items.x.quantity` | Number | Determines quantity of a subscription. By default, each subscription is for one product, but Stripe allows you to subscribe a customer to multiple quantities of an item. |\n| `adhoc_items.x.amount` **(required)** | Integer | A positive integer in cents (or 0 for a free price). For more information, see [Create a subscription](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data). |\n| `adhoc_items.x.product` **(required)** | Stripe Product ID | The identifier of the product that belongs with the ad-hoc price. |\n| `adhoc_items.x.interval` **(required)** | `day`, `week`, `month` or `year` | The billing frequency. |\n| `adhoc_items.x.currency` **(required)** | String | A three-letter ISO currency code, in lowercase, for a [supported currency](https://docs.stripe.com/currencies). |\n| `adhoc_items.x.quantity` | Number | Determines quantity of a subscription. By default, each subscription is for one product, but Stripe allows you to subscribe a customer to multiple quantities of an item. |\n| `metadata_source` | String | If you’re doing a Stripe-to-Stripe migration, enter `internal:Stripe`. |\n| `metadata_*` | String | Attach these key-value pairs to an object. This is useful for storing additional information about the object in a structured format. |\n| `automatic_tax` | Boolean | Specify `true` to use automatic tax settings by Stripe Tax. |\n| `coupon` | Stripe Coupon ID | The identifier of the coupon to apply to this subscription. |\n| `trial_end` | Timestamp | Sets the phase to trialing from the start date to the `trial_end` date. You must specify a value that’s before the cycle/phase end date, and you can’t combine it with the trial. |\n| `proration_behavior` | `create_prorations` or `none` | Determines if the subscription creates prorations after migration. The default value is `create_prorations`. |\n| `collection_method` | `charge_automatically` or `send_invoice` | When charging automatically, Stripe attempts to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. The default value is `charge_automatically`. When sending an invoice, Stripe emails your customer an invoice with payment instructions, and marks the subscription as active. If using `send_invoice`, you must set `days_until_due`. |\n| `default_tax_rate` | Stripe Tax ID | Sets the subscription’s `default_tax_rates`. This also determines the invoice’s `default_tax_rates` for any invoices issued by the subscription during this phase. This value is incompatible with `automatic_tax`. |\n| `backdate_start_date` | Timestamp in epoch UNIX format | Determines the `start_date` of the created subscription, which must occur in the past. If set, you must specify `none` for the `proration_behavior`. Doing so prevents the creation of a prorated invoice for the time between `backdate_start_date` and actual `start_date`. For more details, see [backdating no charge](https://docs.stripe.com/billing/subscriptions/backdating#backdating-no-charge). |\n| `billing_cycle_anchor` | Timestamp | Determines the future dates of when to bill the subscription to the customer. |\n| `days_until_due` | Integer | The number of days from when the invoice is created until it’s due. This is required and valid only for invoices with `collection_method` set to `send_invoice`. |\n| `cancel_at_period_end` | Boolean | Specify `true` to cancel a subscription at the end of the period. |",
    "title": "Toolkit CSV reference | Stripe Documentation",
    "description": "Follow best practices to successfully migrate your subscriptions using the no-code Billing migration toolkit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment-methods",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/link/save-and-reuse",
    "markdown": "# Set up future payments using Elements and Link\n\n## Save your Link customers' details and charge them later.\n\nThis guide walks you through how to accept payments with [Link](https://docs.stripe.com/payments/link/what-is-link) using the [Setup Intents API](https://docs.stripe.com/api/setup_intents) and either the [Payment Element](https://docs.stripe.com/payments/payment-element) or [Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element).\n\nThere are three ways you can secure a customer email address for Link authentication and enrollment:\n\n*   **Pass in an email address:** You can pass an email address to the Payment Element using [defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues). If you’re already collecting the email address and or customer’s phone number in the checkout flow, we recommend this approach.\n*   **Collect an email address:** You can collect an email address directly in the Payment Element. If you’re not collecting the email address anywhere in the checkout flow, we recommend this approach.\n*   **Link Authentication Element:** You can use the Link Authentication Element to create a single email input field for both email collection and Link authentication. We recommend doing this if you use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n![Authenticate or enroll with Link directly in the Payment Element during checkout](https://b.stripecdn.com/docs-statics-srv/assets/link-in-pe.2efb5138a4708b781b8a913ebddd9aba.png)\n\nCollect a customer email address for Link authentication or enrollment\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-customer)\n\nTo set up a payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). Create a `Customer` object when your customer creates an account with your business. `Customer` objects allow for reusing payment methods and tracking across multiple payments.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-intent)\n\n#### Note\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments during a session and tracks the status of that session. Create a SetupIntent on your server with `link` and the other payment methods you want to support:\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=card \\  -d \"payment_method_types[]\"=link`\n\nTo see how to set up other payment methods, see the [Set up future payments](https://docs.stripe.com/payments/save-and-reuse) guide.\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#design-your-integration)\n\nLink authenticates a customer by using their email address. Depending on your checkout flow, you have the following options: pass an email to the Payment Element, collect it directly within the Payment Element, or use the Link Authentication Element. Of these, Stripe recommends passing a customer email address to the Payment Element if available.\n\nIf _any_ of the following apply to you:\n\n*   You want a single, optimized component for email collection and Link authentication.\n*   You need to collect a shipping address from your customer.\n\nThen use the integration flow that implements these elements: the Link Authentication Element, Payment Element and optional Address Element.\n\nA Link-enabled checkout page has the Link Authentication Element at the beginning, followed by the Address Element, and the Payment Element at the end. You can also display the Link Authentication Element on separate pages, in this same order, for multi-page checkout flows.\n\n![Create a payment form using multiple Elements](https://b.stripecdn.com/docs-statics-srv/assets/link-with-elements.f60af275f69b6e6e73c766d1f9928457.png)\n\nCreate a payment form using multiple Elements\n\nThe integration works as follows:\n\n[](#web-collect-payment-details)\n\nNow you can set up your custom payment form with the Elements prebuilt UI components. Your payment page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS. [Enable HTTPS](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\nThe Link Authentication Element renders an email address input. When Link matches a customer email with an existing Link account, it sends the customer a secure, one-time code to their phone to authenticate. If the customer successfully authenticates, Stripe displays their Link-saved addresses and payment methods automatically for them to use.\n\nThis integration also creates the Payment Element, which renders a dynamic form that allows your customer to pick a payment method type. The form automatically collects all necessary payments details for the payment method type selected by the customer. The Payment Element also handles the display of Link-saved payment methods for authenticated customers.\n\n### Set up Stripe Elements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstall React Stripe.js and the Stripe.js loader from the [npm public registry](https://www.npmjs.com/package/@stripe/react-stripe-js).\n\n`npm install --save @stripe/react-stripe-js @stripe/stripe-js`\n\nOn your payment page, wrap your payment form with the `Elements` component, passing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from [the previous step](#web-create-intent). ​​If you already collect the customer’s email in another part of your form, replace your existing input with the `linkAuthenticationElement​`.\n\nIf you don’t collect email, add the `linkAuthenticationElement​` to your checkout flow. You must place the `linkAuthenticationElement` before the `ShippingAddressElement` (optional if you collect shipping addresses) and the `PaymentElement` for Link to autofill Link-saved details for your customer in the `ShippingAddressElement` and `PaymentElement`. You can also pass in the [appearance option](https://docs.stripe.com/elements/appearance-api), customizing the Elements to match the design of your site.\n\nIf you have the customer’s email, pass it to the `defaultValues` option of the `linkAuthenticationElement`. This prefills their email address and initiates the Link authentication process.\n\nIf you have other customer information, pass it to the `defaultValues.billingDetails` object for the `PaymentElement`. Prefilling as much information as possible simplifies Link account creation and reuse for your customers.\n\nThen, render the `linkAuthenticationElement` and `PaymentElement` components in your payment form:\n\n`import {loadStripe} from \"@stripe/stripe-js\"; import {   Elements,   LinkAuthenticationElement,   PaymentElement, } from \"@stripe/react-stripe-js\";  const stripe = loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  // Customize the appearance of Elements using the Appearance API. const appearance = {/* ... */};  // Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';`\n\nThe `linkAuthenticationElement`, `PaymentElement`, and `ShippingAddressElement` don’t need to be on the same page. If you have a process where customer contact information, shipping details, and payment details display to the customer in separate steps, you can display each Element in the appropriate step or page. Include the `linkAuthenticationElement` as the email input form in the contact info collection step to make sure the customer can take full advantage of the shipping and payment autofill provided by Link.\n\nIf you collect your customer’s email with the Link Authentication Element early in the checkout flow, you don’t need to show it again on the shipping or payment pages.\n\n### Retrieve an email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can retrieve the email address details using the `onChange` prop on the `linkAuthenticationElement` component. The `onChange` handler fires whenever the user updates the email field, or when a saved customer email is autofilled.\n\n`<linkAuthenticationElement onChange={(event) => {   setEmail(event.value.email); }} />`\n\n### Prefill a customer email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Link Authentication Element accepts an email address. Providing a customer’s email address triggers the Link authentication flow as soon as the customer lands on the payment page using the `defaultValues` option.\n\n`<linkAuthenticationElement options={{defaultValues: {email: 'foo@bar.com'}}}/>`\n\n[](#web-submit-payment)\n\nUse [stripe.confirmSetup](https://docs.stripe.com/js/setup_intents/confirm_setup) to complete the setup with the details you collected. Provide a [return\\_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url) to this function so that Stripe can redirect users after they complete their setup. When a payment is successful, Stripe immediately redirects Link and card payments to the `return_url`.\n\n`import {loadStripe} from \"@stripe/stripe-js\"; import {   useStripe,   useElements,   Elements,   LinkAuthenticationElement,   PaymentElement,   // If collecting shipping   AddressElement, } from \"@stripe/react-stripe-js\";  const stripe = loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {/* ... */};  // Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';  const CheckoutPage =({clientSecret}) => (   <Elements stripe={stripe} options={{clientSecret, appearance, loader}}>     <CheckoutForm />   </Elements> );  export default function CheckoutForm() {   const stripe = useStripe();   const elements = useElements();    const handleSubmit = async (event) => {     event.preventDefault();      const {error} = await stripe.confirmSetup({       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (error) {       // handle error     }   };    return (     <form onSubmit={handleSubmit}>       <h3>Contact info</h3>       <LinkAuthenticationElement />       {/* If collecting shipping */}       <h3>Shipping</h3>       <AddressElement options={{mode: 'shipping', allowedCountries: ['US']}} />       <h3>Payment</h3>       <PaymentElement />        <button type=\"submit\">Submit</button>     </form>   ); }`\n\n[](#charge-saved-payment-method)\n\nWhen you’re ready to charge your customer, use the Customer and PaymentMethod IDs to create a PaymentIntent. To find a payment method to charge, list the payment methods associated with your customer.\n\n`curl https://api.stripe.com/v1/payment_methods \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"type\"=\"link\" \\   -G`\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with the amount and currency of the payment with these parameters:\n\n*   Set the value of the PaymentIntent’s [confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm) property to `true`, which causes confirmation to occur immediately when the PaymentIntent is created.\n*   Set [payment\\_method](https://docs.stripe.com/api#create_payment_intent-payment_method) to the ID of the PaymentMethod\n*   Set [customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID of the Customer.\n*   Set [off\\_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to `true`. This causes the PaymentIntent to send an error if authentication is required when your customer isn’t actively using your site or app.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n``: \\   -d amount=1099 \\   -d currency=usd \\   # In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.   -d \"automatic_payment_methods[enabled]\"=true \\   -d customer=\"{{CUSTOMER_ID}}\" \\   -d payment_method=\"{{PAYMENT_METHOD_ID}}\" \\   -d return_url=\"https://example.com/order/123/complete\" \\   -d off_session=true \\   -d confirm=true``\n\n[](#web-test-the-integration)\n\n#### Caution\n\nDon’t store real user data in [test mode](https://docs.stripe.com/test-mode \"test mode\") Link accounts. Treat them as if they’re publicly available, because these test accounts are associated with your publishable key.\n\nCurrently, Link only works with credit cards, debit cards, and qualified US bank account purchases. Link requires [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\nYou can create test mode accounts for Link using any valid email address. The following table shows the fixed one-time passcode values that Stripe accepts for authenticating test mode accounts:\n\n| Value | Outcome |\n| --- | --- |\n| Any other 6 digits not listed below | Success |\n| 000001 | Error, code invalid |\n| 000002 | Error, code expired |\n| 000003 | Error, max attempts exceeded |\n\nFor testing specific payment methods, refer to the [Payment Element testing examples](https://docs.stripe.com/payments/accept-a-payment?platform=web#additional-testing-resources).\n\n### Multiple funding sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs Stripe adds additional funding source support, you don’t need to update your integration. Stripe automatically supports them with the same transaction settlement time and guarantees as card and bank account payments.\n\n### Card authentication and 3D Secure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLink supports [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2 \"3D Secure 2 (3DS2)\") authentication for card payments. 3DS2 requires customers to complete an additional verification step with the card issuer when paying. Payments that have been successfully authenticated using 3D Secure are covered by a liability shift.\n\nTo trigger 3DS2 authentication challenge flows with Link in test mode, use the following test card with any CVC, postal code, and future expiration date: .\n\nIn test mode, the authentication process displays a mock authentication page. On that page, you can either authorize or cancel the payment. Authorizing the payment simulates successful authentication and redirects you to the specified return URL. Clicking the **Failure** button simulates an unsuccessful attempt at authentication.\n\nFor more details, refer to the [3D Secure authentication page](https://docs.stripe.com/payments/3d-secure).\n\n#### Note\n\nWhen testing 3DS flows, only test cards for 3DS2 will trigger authentication on Link.\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [What is Link](https://docs.stripe.com/payments/link/what-is-link)\n*   [Link in the Payment Element](https://docs.stripe.com/payments/link/payment-element-link)\n*   [Explore the Link Authentication Element](https://docs.stripe.com/payments/link/link-authentication-element)",
    "title": "Set up future payments using Elements and Link | Stripe Documentation",
    "description": "Save your Link customers' details and charge them later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/terminal/hardware_skus/object",
    "markdown": "# The TerminalHardwareSKU object | Stripe API Reference\n\n## [The TerminalHardwareSKU object](https://docs.stripe.com/api/terminal/hardware_skus/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The price of this SKU.\n    \n\n### More attributes\n\n*   #### \n    \n    unavailable\\_afternullable integer\n    \n\nThe TerminalHardwareSKU object\n\n```\n{  \"id\": \"thsku_L5fys7HZ5o02Nc\",  \"object\": \"terminal.hardware_sku\",  \"amount\": 450,  \"country\": \"AT\",  \"currency\": \"usd\",  \"orderable\": 100,  \"product\": \"thpr_MJfof7SLvdkG6T\",  \"status\": \"available\",  \"unavailable_after\": null}\n```\n\n## [Retrieve an available Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus/retrieve)Preview feature\n\nRetrieves an available `TerminalHardwareSKU` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an available `TerminalHardwareSKU` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_skus/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_skus/thsku_L5fys7HZ5o02Nc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thsku_L5fys7HZ5o02Nc\",  \"object\": \"terminal.hardware_sku\",  \"amount\": 450,  \"country\": \"AT\",  \"currency\": \"usd\",  \"orderable\": 100,  \"product\": \"thpr_MJfof7SLvdkG6T\",  \"status\": \"available\",  \"unavailable_after\": null}\n```\n\n## [List all Terminal Hardware SKUs](https://docs.stripe.com/api/terminal/hardware_skus/list)Preview feature\n\nList all `TerminalHardwareSKU` objects.\n\n### Parameters\n\n*   The ISO 3166-1 alpha-2 country code representing the country associated with the SKUs to be retrieved. Available country codes can be listed with the [List Country Specs](https://docs.stripe.com/api#list_country_specs) endpoint.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware SKUs. Each entry in the array is a separate SKU object.\n\nGET /v1/terminal/hardware\\_skus\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_skus \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_skus\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thsku_L5fys7HZ5o02Nc\",      \"object\": \"terminal.hardware_sku\",      \"amount\": 450,      \"country\": \"AT\",      \"currency\": \"usd\",      \"orderable\": 100,      \"product\": \"thpr_MJfof7SLvdkG6T\",      \"status\": \"available\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The TerminalHardwareSKU object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/confirm_acss_debit_payment",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/update-line-items",
    "markdown": "# Update line items | Stripe DocumentationThe Stripe Docs logo\n\nSet [adjustable\\_quantity](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-adjustable_quantity) on your [line\\_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) when creating a Checkout Session to enable your customers to update the quantity of an item during checkout.\n\n`const session = await stripe.checkout.sessions.create({   line_items: [     {       price_data: {         currency: 'usd',         product_data: {           name: 'T-shirt',         },         unit_amount: 2000,       },       quantity: 1,       adjustable_quantity: {         enabled: true,         maximum: 100,         minimum: 0,       },     },   ],   mode: 'payment',   ui_mode: 'custom' as any,   automatic_tax: {enabled: true},   return_url: '{{RETURN_URL}}' });`\n\nYou can customize the default settings for the minimum and maximum quantities allowed by setting [adjustable\\_quantity.minimum](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-adjustable_quantity-minimum) and [adjustable\\_quantity.maximum](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-adjustable_quantity-maximum). By default, an item’s minimum adjustable quantity is 0 and the maximum adjustable quantity is 99. You can specify a value of up to 999999 for `adjustable_quantity.maximum`.\n\nCheckout prevents the customer from removing an item if it is the only item remaining.",
    "title": "Update line items | Stripe Documentation",
    "description": "Make changes to the line items during checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/collect-customer-details",
    "markdown": "# Collect customer details | Stripe DocumentationThe Stripe Docs logo\n\n## Collect customer detailsBeta\n\n## Collect customer email addresses.\n\n#### Beta\n\nThe Custom Checkout integration is in private beta. To request access, [click here.](#)\n\n[](#collect-email)\n\nCustomer email address collection is required by Custom Checkout.\n\n`import React from 'react'; import {useCustomCheckout} from '@stripe/react-stripe-js';  const EmailInput = () => {   const checkout = useCustomCheckout();   const looksValid = checkout.email.test(/^\\S+@\\S+\\.\\S+$/);   const handleChange = (e) => checkout.updateEmail(e.target.value);   return (     <input       type=\"text\"       className={looksValid ? '' : 'invalid'}       value={checkout.email}       onChange={handleChange}     />   ); };  export default EmailInput;`\n\n#### Note\n\nCustom Checkout doesn’t validate the format of the `email` value. Make sure to do a basic validation on the front end, such as checking that it contains `@` and `.` characters.",
    "title": "Collect customer details | Stripe Documentation",
    "description": "Collect customer email addresses.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_method",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/supplementary-data",
    "markdown": "# Upload supplementary data | Stripe DocumentationThe Stripe Docs logo\n\n## Provide additional data to Stripe when migrating payment data.\n\n## Data encryption![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor PCI data such as credit data, make sure you first encrypt the data with Stripe’s PGP key.\n\n1.  If you’re unfamiliar with the OpenPGP standard used in these encryption steps, [download the GnuPG software](https://www.gnupg.org/).\n    \n    #### Note\n    \n    You can use Terminal or iTerm on Mac or Windows Terminal on PC instead for the command-line interface.\n    \n2.  Save the non-encrypted data file on your desktop.\n    \n3.  Zip the data file (we only support .zip or .tar.gz compression).\n    \n4.  Download the Stripe public key from the Stripe website by copying and pasting the key into a .txt file. Save the .txt file with the filename **Stripe\\_Import\\_Key.txt** on your desktop.\n    \n5.  Add the key to your list of known keys using your command-line interface:\n    \n    1.  Navigate to your desktop: `cd ~/Desktop`.\n    2.  Type the command: `gpg --import \"Stripe Import Key\"`.\n    3.  Confirm the output matches:\n    \n    `cd ~/Desktop  gpg --import Stripe_Import_Key.txt gpg: key 9C78B7620C1E99AD: public key \"Stripe Import Key (PCI) <support-migrations@stripe.com>\" imported gpg: Total number processed: 1 gpg:               imported: 1`\n    \n6.  Verify the key with the command: `gpg --list-keys`.\n    \n7.  Encrypt the non-encrypted data file with that key: `gpg --recipient \"Stripe Import Key (PCI)\" --encrypt 20240418_rocket_rides_cards.csv`. The action returns an encrypted GPG file, such as **20240418\\_rocket\\_rides\\_cards.csv.gpg**. The output looks like:\n    \n    `gpg --recipient \"Stripe Import Key (PCI)\" --encrypt 20240418_rocket_rides_cards.csv  gpg: 8A3B0AC7944266D9: There is no assurance this key belongs to the named user  sub  rsa4096/8A3B0AC7944266D9 2023-04-11 Stripe Import Key (PCI) <support-migrations@stripe.com>      Primary key fingerprint: AEBF 7C48 38C4 4D2F DC99  A3F9 9C78 B762 0C1E 99AD      Subkey fingerprint: 2100 F77A 7937 9D29 9C96  420B 8A3B 0AC7 9442 66D9  It is NOT certain that the key belongs to the person named in the user ID. If you *really* know what you are doing, you may answer the next question with yes.  Use this key anyway? (y/N) y`\n    \n\n## Upload your encrypted file![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Data Migration team securely emails or texts your SFTP access credentials to you. You must log into you Stripe account and submit your migration request using the [secure intake request form](https://support.stripe.com/contact/email?topic=migrations) to obtain access credentials.\n\n1.  Save the file to upload on your desktop.\n    \n2.  Navigate to the desktop in your command-line: `cd ~/Desktop`.\n    \n3.  Connect to Stripe’s SFTP server with the command: `sftp -P 22 <username>@sftp.stripe.com` (where `<username>` is the username provided by the Stripe Data Migrations Team).\n    \n4.  Provide your password when prompted, then press **Enter**.\n    \n5.  Upload the file to the SFTP account with the command: `put <file name>`, where `<file name>` is the name of the data file to upload, such as `20240418_rocket_rides_cards.csv.gpg`.\n    \n6.  After you upload the file, you might not see the file in the folder, though it transferred successfully. You can view a successful status file under the upload-success directory.\n    \n    `sftp -P 22 username@sftp.stripe.com   username@sftp.stripe.com's password: Connected to sftp.stripe.com. sftp> put 20240418_rocket_rides_cards.csv.gpg Uploading 20240418_rocket_rides_cards.csv.gpg to /20240418_rocket_rides_cards.csv.gpg  20240418_rocket_rides_cards.csv.gpg                                                                  100%  663    26.5KB/s   00:00`",
    "title": "Upload supplementary  data | Stripe Documentation",
    "description": "Guidance on how you can provide additional data to Stripe as part of your payment method migration, including data encryption.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/enable-payment-acceptance-guide?platform=web",
    "markdown": "# Enable other businesses to accept payments directly\n\nThis guide covers letting your users accept payments, moving a portion of your users’ earnings into your balance, and paying out the remainder to your users’ bank accounts. To illustrate these concepts, we’ll use an example platform that lets businesses build their own online stores.\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\n[](#setup)\n\nInstall Stripe’s official libraries so you can access the API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-account)\n\nWhen a user (seller or service provider) signs up on your platform, create a user [Account](https://docs.stripe.com/api/accounts) (referred to as a _connected account_) so you can accept payments and move funds to their bank account. Connected accounts represent your user in Stripe’s API and help facilitate the collection of onboarding requirements so Stripe can verify the user’s identity. In our store builder example, the connected account represents the business setting up their Internet store.\n\n![Screenshot of Connect Onboarding form](https://b.stripecdn.com/docs-statics-srv/assets/Kavholm-Seamless-Standard.78b64d90c0bf87130c8b6ba1ef53df7f.png)\n\n### Create a connected account and prefill information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the `/v1/accounts` API to [create](https://docs.stripe.com/api/accounts/create) a connected account. You can create the connected account by using the [default connected account parameters](https://docs.stripe.com/connect/migrate-to-controller-properties), or by specifying the account type.\n\n`curl -X POST https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nIf you’ve already collected information for your connected accounts, you can prefill that information on the account object. You can prefill any account information, including personal and business information, external account information, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen testing your integration, prefill account information using [test data](https://docs.stripe.com/connect/testing).\n\n### Create an account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create an account link by calling the [Account Links](https://docs.stripe.com/api/account_links) API with the following parameters:\n\n*   `account`\n*   `refresh_url`\n*   `return_url`\n*   `type` = `account_onboarding`\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\n### Redirect your user to the account link URL ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe response to your [Account Links](https://docs.stripe.com/api/account_links) request includes a value for the key `url`. Redirect to this link to send your user into the flow. Account Links are temporary and are single-use only because they grant access to the connected account user’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link, you won’t be able to read or write information for the account.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n\n### Handle the user returning to your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to swap testing URLs for HTTPS URLs before going live.\n\n#### return\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\n\nNo state is passed through this URL. After a user is redirected to your `return_url`, check the state of the `details_submitted` parameter on their account by doing either of the following:\n\n*   Listening to `account.updated` webhooks\n*   Calling the [Accounts](https://docs.stripe.com/api/accounts) API and inspecting the returned object\n\n#### refresh\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour user is redirected to the `refresh_url` in these cases:\n\n*   The link is expired (a few minutes went by since the link was created)\n*   The user already visited the link (the user refreshed the page or clicked back or forward in the browser)\n*   Your platform is no longer able to access the account\n*   The account has been rejected\n\nYour `refresh_url` should trigger a method on your server to call [Account Links](https://docs.stripe.com/api/account_links) again with the same parameters, and redirect the user to the Connect Onboarding flow to create a seamless experience.\n\n### Handle users that haven’t completed onboarding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a user is redirected to your `return_url`, they might not have completed the onboarding process. Use the `/v1/accounts` endpoint to retrieve the user’s account and check for `charges_enabled`. If the account isn’t fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). To see if they’ve completed the onboarding process, check the state of the `details_submitted` parameter on their account.\n\n[](#enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/connect/payment_methods) and enable the payment methods you want to support. Card payments are enabled by default but you can enable and disable payment methods as needed. This guide assumes Bancontact, credit cards, EPS, giropay, iDEAL, Przelewy24, SEPA Direct Debit, and Sofort are enabled.\n\nBefore the payment form is displayed, Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized. Lower priority payment methods are hidden in an overflow menu.\n\n[](#accept-payment)\n\nEmbed [Stripe Checkout](https://stripe.com/payments/checkout) as a payment form directly on your website or redirect users to a Stripe-hosted page to accept payments. Checkout supports multiple payment methods and automatically shows the most relevant ones to your customer You can also use the Payment Element, a prebuilt UI component that is embedded as an iframe in your payment form, to accept multiple payment methods with a single frontend integration.\n\n### Create a Checkout Session Client-side Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA Checkout Session controls what your customer sees in the embeddable payment form such as line items, the order amount and currency, and acceptable payment methods. When performing direct charges, Checkout uses the connected account’s branding settings. See the [Customize branding](https://docs.stripe.com/connect/direct-charges?platform=web&ui=stripe-hosted#branding) section for more information.\n\nUnlike destination charges and separate charges and transfers, users (connected accounts) are responsible for handling disputes on direct charges—it’s not the responsibility of the platform.\n\nOn your server, make the following call to the Stripe API. After creating a Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d mode=payment \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[application_fee_amount]\"=123 \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n*   `line_items` - This argument represents items that your customer is purchasing and that will show up in the hosted user interface.\n*   `success_url` - This argument redirects a user after they complete a payment.\n*   `cancel_url` - This argument redirects a user after they click cancel.\n*   `Stripe-Account` - This header indicates a [direct charge](https://docs.stripe.com/connect/direct-charges) for your connected account. With direct charges, the connected account is responsible for Stripe fees, refunds, and chargebacks. The connected account’s branding is used in Checkout, which allows their customers to feel like they’re interacting directly with the merchant instead of your platform.\n*   (Optional) `payment_intent_data[application_fee_amount]` - This argument specifies the amount your platform plans to take from the transaction. After the payment is processed on the connected account, the `application_fee_amount` is transferred to the platform and the Stripe fee is deducted from the connected account’s balance.\n\n![Account creation flow](https://b.stripecdn.com/docs-statics-srv/assets/direct_charges.a2a8b68037ac95fe22140d6dde9740d3.svg)\n\n### Handle post-payment events Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple [payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `checkout.session.completed` event, we recommend handling two other events when collecting payments with Checkout:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\n[](#testing)\n\nTest your account creation flow by [creating accounts](https://docs.stripe.com/connect/testing#creating-accounts) and [using OAuth](https://docs.stripe.com/connect/testing#using-oauth). Test your **Payment methods** settings for your connected accounts by logging into one of your test accounts and navigating to the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). Test your checkout flow with your test keys and a test account. You can use our [test cards](https://docs.stripe.com/testing) to test your payments flow and simulate various payment outcomes.\n\nBy default, any charge that you create for a connected account accumulates in the connected account’s [Stripe balance](https://docs.stripe.com/connect/account-balances) and is paid out on a daily rolling basis. Connected accounts can manage their own payout schedules in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payouts).",
    "title": "Enable other businesses to accept payments directly | Stripe Documentation",
    "description": "Facilitate direct payments between other businesses and their own customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/discounts/object",
    "markdown": "# The Discount object | Stripe API Reference\n\n### Attributes\n\n*   The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.\n    \n*   Hash describing the coupon applied to create this discount.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    The ID of the customer associated with this discount.\n    \n*   If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.\n    \n*   Date that the coupon was applied.\n    \n*   #### \n    \n    subscriptionnullable string\n    \n    The subscription that this coupon is applied to, if it is applied to a particular subscription.\n    \n\n### More attributes\n\n*   #### \n    \n    checkout\\_sessionnullable string\n    \n\n*   #### \n    \n    invoice\\_itemnullable string\n    \n*   #### \n    \n    promotion\\_codenullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable string\n    \n\n```\n{  \"id\": \"di_1M6vk22eZvKYlo2CYMGIhk14\",  \"object\": \"discount\",  \"checkout_session\": \"cs_test_b1mywbZHtQCQW2ncaItVPFqupwmfqNU4IMMdw3lArEBGt0QD0CZDrNQswR\",  \"coupon\": {    \"id\": \"wsd\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1669116350,    \"currency\": null,    \"duration\": \"forever\",    \"duration_in_months\": null,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 10,    \"redeem_by\": null,    \"times_redeemed\": 1,    \"valid\": true  },  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"end\": null,  \"invoice\": null,  \"invoice_item\": null,  \"promotion_code\": null,  \"start\": 1669120702,  \"subscription\": null}\n```\n\n## [Delete a customer discount](https://docs.stripe.com/api/discounts/delete)\n\nRemoves the currently applied discount on a customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with a deleted flag set to true upon success. This call returns [an error](#errors) otherwise, such as if no discount exists on this customer.\n\nDELETE /v1/customers/:id/discount\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/discount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"discount\",  \"deleted\": true}\n```\n\n## [Delete a subscription discount](https://docs.stripe.com/api/discounts/subscription_delete)\n\nRemoves the currently applied discount on a subscription.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with a deleted flag set to true upon success. This call returns [an error](#errors) otherwise, such as if no discount exists on this subscription.\n\nDELETE /v1/subscriptions/:id/discount\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1NlcNX2eZvKYlo2CFqnrn9ow/discount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"discount\",  \"deleted\": true}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Discount object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/map-payment-data",
    "markdown": "# Map payment data | Stripe DocumentationThe Stripe Docs logo\n\n## Map payment data to existing Stripe Customers.\n\nOur standard process creates new customers alongside the payment method data from your previous provider. If you’ve been processing new transactions on Stripe during the migration, you might already have some customers in Stripe. Map imported payment data to these existing Stripe customers to avoid creating duplicates.\n\nAfter you submit the migration intake form, reply in the same email thread with a CSV file that includes two columns:\n\n*   **old\\_customer\\_id**: The unique identifier from your former processor.\n*   **stripe\\_customer\\_id**: The corresponding Stripe customer ID in the `cus_xxxx` format.\n\nTo download a list of customers with their Stripe IDs:\n\n1.  Go to the Customers section in the [Stripe Dashboard](https://dashboard.stripe.com/customers).\n2.  Filter the list based on your desired parameters.\n3.  Click **Export**.\n4.  Select the `ID` field for export.\n5.  Export your list.\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![Shows the migration mapping process.](https://b.stripecdn.com/docs-statics-srv/assets/dm-mapping.5205a45bfb84e031c593db5525349ce2.jpg)\n\n## Example mapping file![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n|     |     |\n| --- | --- |\n| **old\\_customer\\_id** | **stripe\\_customer\\_id** |\n| `PSP_buyer_ID_1` | `cus_NsKvEuOxdDP111` |\n| `PSP_buyer_ID_2` | `cus_Nrt6IryCjAK222` |\n| `PSP_buyer_ID_3` | `cus_OAiRfxde7Ya333` |\n\n## Customer data overwrite![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOur current tooling preserves existing customer level data. Mapping doesn’t overwrite any information already present in the customer’s record. Rather, it appends data for any new cards that aren’t already included without altering the customer level information displayed in the Dashboard. If the data file flags a card as the default card, it overrides any previously set default cards in the Dashboard.",
    "title": "Map payment data | Stripe Documentation",
    "description": "When you migrate to Strpe from another payment processor, you can map payment data from your previous processor into existing customer records if some of your customers already existed in Stripe before the migration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/events/list",
    "markdown": "# List all events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
    "title": "List all events | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/plan-integration/get-started/server-side-integration",
    "markdown": "# Server-side integration | Stripe DocumentationThe Stripe Docs logo\n\n## Set up your Stripe back-end integration.\n\nTo set up an optimal backend integration, you must authenticate to Stripe, learn API request best practices, and appropriately configure your webhooks.\n\n## Authenticate to Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides authentication through API key. It’s also possible to create [restricted access keys](https://docs.stripe.com/keys#limit-access) to further control access to specific resources. You can use the [secret and publishable API keys](https://docs.stripe.com/keys#obtain-api-keys) to create tokens, but need secret keys for any server-side authentication.\n\nHere’s an example API call:\n\n`curl https://api.stripe.com/v1/balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#API-requests-best-practices)\n\nStripe recommends adding an [idempotency key](https://docs.stripe.com/api/idempotent_requests) to all POST requests. Make sure that the key is unique, such as a universally unique identifier (UUID) or a combination of customer ID and order ID. These keys allow you to safely retry requests if you encounter a network error.\n\n### Customer objects: storing payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo store and reuse [PaymentMethods](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"), you must attach them to [Customer objects](https://docs.stripe.com/payments/save-and-reuse).\n\nAfter attaching the PaymentMethod to a Customer, store the [Customer ID](https://docs.stripe.com/api/customers/object#customer_object-id) and [PaymentMethod ID](https://docs.stripe.com/api/payment_methods/object#payment_method_object-id) in your system to use it for payments in the future. Because one Customer object can have a [list of multiple payment methods](https://docs.stripe.com/api/payment_methods/list), you must specify both the Customer ID and the PaymentMethod ID when creating a charge later on.\n\nHere’s an example creating a Customer and attaching a PaymentMethod:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\" \\   --data-urlencode email=\"jenny.rosen@stripe.com\" \\  -d payment_method={PAYMENT_METHOD_ID}`\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefunds are managed using the [Refunds](https://docs.stripe.com/api/refunds) API and can be made for full or partial amounts. To refund a transaction with Stripe, you’ll need either the PaymentIntent ID or the Charge ID for the transaction you need to refund.\n\nRefunds use your _available_ Stripe balance, and can’t use your pending balance. If your available balance doesn’t have sufficient funds to cover the amount of the refund, Stripe debits the remaining amount from your bank account. You can issue partial refunds, full refunds, and more than one refund against a charge, but you can’t refund a total greater than the original charge amount.\n\nYou can issue refunds using the [API](https://docs.stripe.com/api) or the [Dashboard](https://dashboard.stripe.com/test/dashboard). You can’t cancel a refund after you issue it. It takes [5-10 business days](https://support.stripe.com/questions/customer-refund-processing-time) for the refund to appear on the customer’s statement. If a customer is curious about the status of their refund, you can [provide the ARN](https://support.stripe.com/questions/acquirer-reference-number-(arn)-for-refunds) so that they can inquire about the refund with their bank.\n\nHere’s an example refund for a PaymentIntent:\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent={PAYMENT_INTENT_ID}`\n\nHere’s a partial refund example with an amount specified:\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent={PAYMENT_INTENT_ID} \\   -d amount=1000`\n\n### Disputes and chargebacks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour business is responsible for managing [disputes (also known as chargebacks)](https://docs.stripe.com/disputes). We recommend that you actively monitor disputes and collect and submit evidence to support the validity of charges where appropriate. We hold disputed funds and deduct them from your Stripe balance pending a decision. We return the funds if you win the dispute.\n\nYou can monitor disputes in two ways:\n\n*   Use the Stripe Dashboard and email notifications that you can configure in your [Dashboard profile](https://dashboard.stripe.com/settings/user).\n*   You can fully automate the dispute response and evidence submission through the [Disputes](https://docs.stripe.com/api/disputes) API.\n\n[](#configuring-webhooks)\n\nYou can use [webhooks](https://docs.stripe.com/webhooks \"webhook\") to capture events that occur on your account (such as payouts to your bank account, refunds, payments, and so on). They’re helpful when handling Stripe [events](https://docs.stripe.com/api/events) that occur asynchronously, or for those that you want to trigger additional actions for.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/webhooks-endpoints.871d5a30be8e59762e191fa45b0421a2.png)\n\nSee our recommended webhook for each type:\n\n| **WEBHOOK TYPE** | **RECOMMENDED WEBHOOKS** |\n| --- | --- |\n| **CHARGES** | *   `charge.succeeded`<br>*   `charge.failed`<br>*   `charge.refunded` |\n| **REFUNDS** | *   `refund.created`<br>*   `refund.failed` |\n| **PAYOUTS** | *   `payout.created`<br>*   `payout.paid`<br>*   `payout.failed` |\n| **PAYMENT INTENTS** | *   `payment_intent.succeeded`<br>*   `payment_intent.payment_failed`<br>*   `payment_intent.canceled` |\n| **DISPUTES** | *   `radar.early_fraud_warning.created`<br>*   `charge.dispute.created`<br>*   `charge.dispute.closed` |\n\nUse the following resources to set up your webhooks and validate that they’ve been configured correctly:\n\n*   [Webhooks](https://docs.stripe.com/webhooks)\n*   [Check the webhook signatures](https://docs.stripe.com/webhooks#verify-events)\n*   [Types of events](https://docs.stripe.com/api/events/types)\n*   [Best practices for using webhooks](https://docs.stripe.com/webhooks#best-practices)\n*   [Check your webhook configurations](https://dashboard.stripe.com/account/webhooks)",
    "title": "Server-side integration | Stripe Documentation",
    "description": "Set up your Stripe back-end integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/webhooks/quickstart",
    "markdown": "# Set up and deploy a webhook\n\nSearch the docs or ask a question",
    "title": "Set up and deploy a webhook | Stripe Documentation",
    "description": "Learn how to set up and deploy a webhook to listen to events from Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment-deferred?type=setup",
    "markdown": "# Collect payment details before creating an Intent\n\n## Build an integration where you can render the Payment Element prior to creating a PaymentIntent or SetupIntent.\n\nA setup flow allows you to set up a payment method for future payments without charging your customer right away. In this integration, you’ll build a custom payment flow where you render the Payment Element, create the [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\"), and confirm the setup from the buyer’s browser.\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode ‘setup’. Then, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'setup',   currency: 'usd',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[](#create-customer)\n\nTo set up a payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). Create a `Customer` object when your customer creates an account with your business. `Customer` objects allow for reusing payment methods and tracking across multiple payments.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-intent)\n\nWhen the customer submits your payment form, create a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") on your server. With `automatic_payment_methods` enabled, the SetupIntent is created using the payment methods you configured in the Dashboard.\n\nIncluded on a SetupIntent is a client secret. Return this value to your client for Stripe.js to use to securely complete the setup process.\n\n`require 'stripe' Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``post '/create-intent' do   intent = Stripe::SetupIntent.create({     customer: customer.id,     # In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.     automatic_payment_methods: {enabled: true},   })   {client_secret: intent.client_secret}.to_json end``\n\n[](#submit-the-setup)\n\nUse [stripe.confirmSetup](https://docs.stripe.com/js/setup_intents/confirm_setup) to complete the setup using details from the Payment Element.\n\nProvide a [return\\_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url) to this function to indicate where Stripe should redirect the user after they complete the setup. Your user might be initially redirected to an intermediate site, like a bank authorization page, before being redirected to the `return_url`. Card setups immediately redirect to the `return_url` when a setup is successful.\n\nIf you don’t want to redirect for card setups after setup completion, you can set [redirect](https://docs.stripe.com/js/setup_intents/confirm_setup#confirm_setup_intent-options-redirect) to `if_required`. This only redirects customers that check out with redirect-based payment methods.\n\n``const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the SetupIntent and obtain clientSecret   const res = await fetch(\"/create-intent\", {     method: \"POST\",   });    const {client_secret: clientSecret} = await res.json();    // Confirm the SetupIntent using the details collected by the Payment Element   const {error} = await stripe.confirmSetup({     elements,     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },   });    if (error) {     // This point is only reached if there's an immediate error when     // confirming the setup. Show the error to your customer (for example, payment details incomplete)     handleError(error);   } else {     // Your customer is redirected to your `return_url`. For some payment     // methods like iDEAL, your customer is redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\n[](#charge-saved-payment-method)\n\n#### Warning\n\n`bancontact` and `ideal` are one-time payment methods by default. When set up for future usage, they generate a `sepa_debit` reusable payment method type so you need to use `sepa_debit` to query for saved payment methods.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. When rendering past payment methods to your end customer for future purchases, make sure you’re listing payment methods where you’ve collected consent from the customer to save the payment method details for this specific future use. To differentiate between payment methods attached to customers that can and can’t be presented to your end customer as a saved payment method for future purchases, use the [allow\\_redisplay](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) parameter.\n\nWhen you’re ready to charge your customer off-session, use the Customer and PaymentMethod IDs to create a PaymentIntent. To find a payment method to charge, list the payment methods associated with your customer. This example lists cards but you can list any supported [type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).\n\n`curl -G https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d type=card`\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with the amount and currency of the payment. Set a few other parameters to make the off-session payment:\n\n*   Set [off\\_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to `true` to indicate that the customer isn’t in your checkout flow during a payment attempt and can’t fulfill an authentication request made by a partner, such as a card issuer, bank, or other payment institution. If, during your checkout flow, a partner requests authentication, Stripe requests exemptions using customer information from a previous on-session transaction. If the conditions for exemption aren’t met, the PaymentIntent might throw an error.\n*   Set the value of the PaymentIntent’s [confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm) property to `true`, which causes confirmation to occur immediately when the PaymentIntent is created.\n*   Set [payment\\_method](https://docs.stripe.com/api#create_payment_intent-payment_method) to the ID of the PaymentMethod and [customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID of the Customer.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n``: \\   -d amount=1099 \\   -d currency=usd \\   # In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.   -d \"automatic_payment_methods[enabled]\"=true \\   -d customer=\"{{CUSTOMER_ID}}\" \\   -d payment_method=\"{{PAYMENT_METHOD_ID}}\" \\   -d return_url=\"https://example.com/order/123/complete\" \\   -d off_session=true \\   -d confirm=true``\n\nWhen a payment attempt fails, the request also fails with a 402 HTTP status code and the status of the PaymentIntent is [requires\\_payment\\_method](https://docs.stripe.com/upgrades#2019-02-11 \"requires_payment_method\"). You must notify your customer to return to your application to complete the payment (for example, by sending an email or in-app notification).\n\nCheck the code of the [error](https://docs.stripe.com/api/errors/handling) raised by the Stripe API library. If the payment failed due to an [authentication\\_required](https://docs.stripe.com/declines/codes) decline code, use the declined PaymentIntent’s client secret with confirmPayment to allow the customer to authenticate the payment.\n\n``const form = document.getElementById('payment-form');  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {error} = await stripe.confirmPayment({     // The client secret of the PaymentIntent     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },   });    if (error) {     // This point will only be reached if there is an immediate error when     // confirming the payment. Show error to your customer (for example, payment     // details incomplete)     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;   } else {     // Your customer will be redirected to your `return_url`. For some payment     // methods like iDEAL, your customer will be redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\n#### Note\n\n`stripe.confirmPayment` can take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator. If the customer must perform additional steps to complete the payment, such as authentication, Stripe.js walks them through that process.\n\nIf the payment failed for other reasons, such as insufficient funds, send your customer to a payment page to enter a new payment method. You can reuse the existing PaymentIntent to attempt the payment again with the new payment details.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Design an integration](https://docs.stripe.com/payments/payment-element/design-an-integration)",
    "title": "Collect payment details before creating an Intent | Stripe Documentation",
    "description": "Build an integration where you can render the Payment Element prior to creating a PaymentIntent or SetupIntent.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/custom_checkout/react/update_billing_address",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=tap-to-pay",
    "markdown": "# Connect to a reader | Stripe DocumentationThe Stripe Docs logo\n\nTap to Pay on Android (TTPA) lets users accept in-person contactless payments with [compatible NFC-equipped Android devices](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android#supported-devices). TTPA requires the latest version of the [Terminal Android SDK](https://docs.stripe.com/terminal/references/api). TTPA includes support for Visa, Mastercard, and American Express contactless cards and NFC-based mobile wallets (Apple Pay, Google Pay, and Samsung Pay). TTPA is an extension to the Terminal Android SDK and enables payments directly in your Android app.\n\nFollow these steps to connect your app to the Tap to Pay reader on a supported Android device:\n\n*   [Discover readers](#discover-readers) using the SDK to confirm device compatibility.\n*   [Connect to a reader](#connect-reader) using the SDK to accept payments.\n*   [Handle unexpected disconnects](#handling-disconnects) to make sure your user can continue to accept payments if the reader disconnects unexpectedly.\n\nIf your application runs on a device that doesn’t meet the [supported device criteria](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android#supported-devices), the SDK returns a `TerminalException` that provides additional context in an `onFailure` callback.\n\n[](#create-location)\n\nCreate a [Location](https://docs.stripe.com/api/terminal/locations) for each physical location where your readers operate. Set the `display_name` to represent the name of the business. Your customer sees the `display_name` on the device’s tap screen unless you explicitly provide the name of a business when you connect to a reader. You can edit existing locations as necessary to adjust this text.\n\nIf your business requires you to move your readers frequently, your locations can use an address that represents your primary place of business.\n\nTo create a location using the API, use the [create location](https://docs.stripe.com/api/terminal/locations/create) request.\n\nLocations for the US require:\n\n*   `line1`\n*   `city`\n*   `state`\n*   `postal_code`\n*   `country`\n\n`curl https://api.stripe.com/v1/terminal/locations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d display_name=\"Venice Burrito Shop\" \\  -d \"address[line1]\"=\"1272 Valencia Street\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94110`\n\nTo create a location in the Dashboard, click the **+New** button on the [Locations](https://dashboard.stripe.com/test/terminal/locations) page.\n\n[](#discover-readers)\n\nUse the `discoverReaders` method to determine hardware support for Tap to Pay on the Android device. `discoverReaders` verifies the following requirements:\n\n*   The device contains a functioning NFC antenna and chipset.\n*   The device has a hardware-backed keystore.\n*   The device runs a current version of Android (Android 11 or above).\n*   For the non-simulated version of the Tap to Pay reader, the application isn’t debuggable.\n\nYour application **must be** in the foreground for the Tap to Pay reader service to successfully start.\n\nIf your application runs on a device that doesn’t meet the requirements above, the `onFailure` callback returns with a `TerminalException` that contains a [TerminalErrorCode](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.models/-terminal-exception/-terminal-error-code/index.html) and additional context. The failures at this stage aren’t actionable by the end user.\n\nUsing the non-simulated, production version of the Tap to Pay reader with debuggable applications isn’t supported for security and compliance reasons. To test your integration with the Tap to Pay on Android reader, set `DiscoveryConfiguration.isSimulated` to _true_ during reader discovery. You must set this value to _false_ in the release version of your application.\n\n`var discoveryCancelable: Cancelable? = null  fun onDiscoverReaders() {   val isApplicationDebuggable = 0 != applicationInfo.flags and ApplicationInfo.FLAG_DEBUGGABLE   val config = DiscoveryConfiguration.LocalMobileDiscoveryConfiguration(     isSimulated = isApplicationDebuggable,   )   // Save this cancelable to an instance variable   discoveryCancelable = Terminal.getInstance().discoverReaders(     config,     object : DiscoveryListener {       override fun onUpdateDiscoveredReaders(readers: List<Reader>) {         // Automatically connect to supported mobile readers       }     },     object : Callback {       override fun onSuccess() {         println(\"Finished discovering readers\")       }        override fun onFailure(e: TerminalException) {         e.printStackTrace()       }     }   ) }  override fun onStop() {   super.onStop()    // If you're leaving the activity or fragment without selecting a reader,   // make sure you cancel the discovery process or the SDK will be stuck in   // a discover readers phase   discoveryCancelable?.cancel(object : Callback {     override fun onSuccess() { }     override fun onFailure(e: TerminalException) { }   }) }`\n\nTo check if a device meets the Tap to Pay hardware and OS requirements at runtime, use the [Terminal.supportsReadersOfType](https://stripe.dev/stripe-terminal-android/core/com.stripe.stripeterminal/-terminal/supports-readers-of-type.html) function. As part of initializing the Terminal SDK, this function requires your end user to accept permission requests to access the location and bluetooth. This function takes approximately 10ms to run on most devices.\n\n[](#connect-reader)\n\nTo accept Tap to Pay payments, provide the discovered reader from the previous step to the `connectLocalMobileReader` method.\n\n`connectLocalMobileReader` verifies the following requirements:\n\n*   The device has a stable connection to the internet.\n*   The device isn’t rooted and the device bootloader is locked and unchanged.\n*   The device uses Google Mobile Services.\n*   The device runs a current version of Android (Android 11 or above).\n*   The application uses a supported version of the Tap to Pay SDK (currently 2.20.0 or above).\n\nIf your application runs on a device that doesn’t meet the requirements above, the `onFailure` callback returns with a `TerminalException` that contains a [TerminalErrorCode](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.models/-terminal-exception/-terminal-error-code/index.html) and additional context. The end user can take action on some of the [failure reasons](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.models/-terminal-exception/-terminal-error-code/index.html). For example:\n\n*   `STRIPE_API_CONNECTION_ERROR`: The user can connect to a stable internet source.\n*   `LOCAL_MOBILE_UNSUPPORTED_ANDROID_VERSION`: The user can upgrade their operating system, if an update is available from the device manufacturer.\n\n`// after selecting a reader to connect to val config = LocalMobileConnectionConfiguration(`\n\n`\"{{LOCATION_ID}}\"`\n\n`) Terminal.getInstance().connectLocalMobileReader(firstReader, config, object : ReaderCallback {     override fun onSuccess(reader: Reader) {         System.out.println(\"Connected to mobile device\")     }      override fun onFailure(e: TerminalException) {         e.printStackTrace()     } })`\n\n## Handle unexpected disconnects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUnexpected disconnects might occur between your app and the reader. For example, the Tap to Pay reader might unexpectedly disconnect because:\n\n*   Android OS terminates the Tap to Pay reader service due to memory constraints.\n*   The device loses internet connectivity.\n\nThere are two ways you can choose to handle this:\n\n#### 1\\. Handle the disconnect manually![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo handle the disconnect, you must implement the `TerminalListener.onUnexpectedReaderDisconnect` callback. This allows your app to reconnect to the Tap to Pay reader and, when appropriate, notify the user of what went wrong and how they can enable access to Tap to Pay. End users can resolve [certain errors](#connect-reader), such as internet connectivity issues.\n\n`class ReaderActivity : AppCompatActivity(), TerminalListener {    // ...    Terminal.getInstance().setTerminalListener(this)    // TerminalListener   override fun onUnexpectedReaderDisconnect(reader: Reader) {     // Consider displaying a UI to notify the user and start rediscovering readers   } }`\n\n#### 2\\. Automatically attempt reconnection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet `autoReconnectOnUnexpectedDisconnect` as `true` on the `LocalMobileConnectionConfiguration` and a `ReaderReconnectionListener` listener for reconnection events in your app.\n\n`val localMobileReaderReconnectionListener = yourReconnectionListener  Terminal.getInstance().connectLocalMobileReader(     reader,     LocalMobileConnectionConfiguration(       connectLocationId,       autoReconnectOnUnexpectedDisconnect = true,       localMobileReaderReconnectionListener     ),     readerListener,     readerCallback, )`\n\nIf you automatically attempt reconnection, the following occurs:\n\n1.  When a disconnect occurs, the SDK automatically attempts to reconnect and notifies you through `onReaderReconnectStarted`. Make sure your app announces that the connection was lost and a reconnection is in progress.\n    *   You can use the `Cancelable` object to stop the reconnection attempt at any time.\n2.  If the SDK successfully reconnects to the reader, Stripe notifies you through `onReaderReconnectSucceeded`. Make sure your app announces that the connection was restored and to continue normal operations.\n3.  If the SDK can’t reconnect to the reader, Stripe notifies you through `onReaderReconnectFailed`. Make sure your app announces that an unexpected disconnect occurred.\n\n`val localMobileReaderReconnectionListener = object : ReaderReconnectionListener {     override fun onReaderReconnectStarted(reader: Reader, cancelReconnect: Cancelable) {         // 1. Notified at the start of a reconnection attempt         // Use cancelable to stop reconnection at any time     }      override fun onReaderReconnectSucceeded(reader: Reader) {         // 2. Notified when reader reconnection succeeds         // App is now connected     }      override fun onReaderReconnectFailed(reader: Reader) {         // 3. Notified when reader reconnection fails         // App is now disconnected     } }`\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
    "title": "Connect to a reader | Stripe Documentation",
    "description": "Connect your application to a Stripe Terminal reader.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/application_fee/retrieve",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/apps-on-devices/build",
    "markdown": "# Build and test your app\n\n## Learn how to build and test your app using a DevKit.\n\nUse your SmartPOS DevKit device to test and iterate your application without going through the deployment, app review, or signing process.\n\nIf you need a DevKit device, you can [order up to five per user](https://docs.stripe.com/terminal/fleet/order-and-return-readers) from the [Readers](https://dashboard.stripe.com/terminal) section in your Dashboard.\n\n## Set up the DevKit ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you can use your DevKit for app development, you must do the following:\n\n1.  Follow the on-screen prompts to connect to a network.\n2.  [Register](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=internet#register-reader) the device to your Stripe account.\n3.  Install all available updates.\n\nAfter the initial setup, you can register your DevKit to another account or location at any time. To do so, connect the DevKit to the internet and follow the steps to [register a reader](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=internet#register-reader).\n\nWhile similar to production devices, DevKit devices:\n\n*   Can only operate in [test mode](https://docs.stripe.com/keys#test-live-modes).\n*   Ship with [developer options](https://developer.android.com/studio/debug/dev-options) and [Android Debug Bridge](https://developer.android.com/studio/command-line/adb) (`adb`) enabled by default.\n*   Display an on-screen watermark to indicate that the device is only used for testing. The watermark moves around the screen while the device is in use so that you can see all parts of the screen.\n\nThe Terminal API supports targeting registered DevKit devices.\n\n## Develop your app for Stripe devices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the following steps to develop your app for Stripe Android devices, including setting up the app and handing it off to the Stripe Reader app.\n\n[](#setup-app)\n\nFirst, [set up your integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android) for in-person payments. Then, follow the guidance below for Apps on Devices integrations.\n\n### Add dependencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdd the following dependencies to your project’s Gradle build script. Apps on Devices integrations require [Terminal Android SDK](https://github.com/stripe/stripe-terminal-android) version `2.22.0` or later. We recommend that you integrate with the [latest version](https://github.com/stripe/stripe-terminal-android/releases).\n\n`dependencies {    implementation(\"com.stripe:stripeterminal-core:3.7.1\")    implementation(\"com.stripe:stripeterminal-handoffclient:3.7.1\") }`\n\nMake sure that you aren’t using any other Stripe Terminal SDK dependencies. For example, if you previously integrated the Terminal Android SDK, don’t use the top-level `com.stripe:stripeterminal` dependency (for example, `com.stripe:stripeterminal:3.7.1`).\n\nSee an example of [including dependencies in your app’s build script](https://github.com/stripe-samples/terminal-apps-on-devices/blob/718c2de38c7b8003fcf58c536c266bb990ad43a7/app/build.gradle.kts#L66).\n\n### Configure your application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo inform the Stripe SDK of lifecycle events, add a [TerminalApplicationDelegate.onCreate()](https://stripe.dev/stripe-terminal-android/core/com.stripe.stripeterminal/-terminal-application-delegate/on-create.html) call to the [onCreate()](https://developer.android.com/reference/android/app/Application#onCreate()) method for your application subclass.\n\n`class MyApp : Application() {    override fun onCreate() {        super.onCreate()         TerminalApplicationDelegate.onCreate(this)    } }`\n\nIn your [app manifest](https://developer.android.com/guide/topics/manifest/manifest-intro), specify the name of your `Application` subclass with the `android:name` attribute.\n\nLearn more about [setting up your integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android) or see the Apps on Devices sample app GitHub repository for an example of [configuring the Application subclass](https://github.com/stripe-samples/terminal-apps-on-devices/blob/718c2de38c7b8003fcf58c536c266bb990ad43a7/app/src/main/java/com/stripe/aod/sampleapp/MyApp.kt#L10).\n\n[](#build-app)\n\nFollow the guidance below for Apps on Devices integrations.\n\n### Discover and connect a reader![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must register a new Stripe device to your account as a new [Reader object](https://docs.stripe.com/api/terminal/readers/object). Use the pairing code provided in the device’s admin settings to [create the Reader object](https://docs.stripe.com/api/terminal/readers/create). Your app uses the Stripe Terminal Android SDK to discover and connect to your device:\n\n1.  Your app runs on your registered device.\n2.  Your app discovers the reader by calling [discoverReaders](https://stripe.dev/stripe-terminal-android/core/com.stripe.stripeterminal/-terminal/discover-readers.html) with [DiscoveryConfiguration.HandoffDiscoveryConfiguration](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.models/-discovery-configuration/-handoff-discovery-configuration/index.html).\n3.  Your app connects to the reader by using [connectHandoffReader](https://stripe.dev/stripe-terminal-android/core/com.stripe.stripeterminal/-terminal/connect-handoff-reader.html).\n\nThe following example shows how to discover and connect to a Stripe reader using handoff mode in an Android app:\n\n`private fun discoverReaders() {    Terminal.getInstance().discoverReaders(        config = DiscoveryConfiguration.HandoffDiscoveryConfiguration(),        discoveryListener = object : DiscoveryListener {            override fun onUpdateDiscoveredReaders(readers: List<Reader>) {                // In handoff discovery, the list will                // contain a single reader. Connect to                // the reader after it is discovered.                readers.firstOrNull()?.let { reader ->                    connectReader(reader)                }            }        },        callback = object : Callback {            override fun onSuccess() {                // success            }             override fun onFailure(e: TerminalException) {                // failure            }        }    ) }  private fun connectReader(reader: Reader) {    Terminal.getInstance().connectHandoffReader(        reader = reader,        config = ConnectionConfiguration.HandoffConnectionConfiguration(),        listener = null,        connectionCallback = object: ReaderCallback {            override fun onSuccess(reader: Reader) {                // ready for payment collection            }             override fun onFailure(e: TerminalException) {            }        }    ) }`\n\n### Collect payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you connect to the reader using handoff mode, you can start [collecting payments](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=android#create-payment).\n\nThe Stripe Reader app handles payment collection and other payment operations, such as [saving a card](https://docs.stripe.com/terminal/features/saving-cards/overview). When initiating a payment operation, the Stripe Reader app becomes the primary and launches in full screen. Then, the Stripe Reader app guides the customer through the flow and returns control to your app after completion (success or failure) or customer cancellation. When control returns to your app, the Stripe Reader app continues to run in the background.\n\nSee an example of [collecting payment in an Apps on Devices app](https://github.com/stripe-samples/terminal-apps-on-devices/blob/718c2de38c7b8003fcf58c536c266bb990ad43a7/app/src/main/java/com/stripe/aod/sampleapp/model/CheckoutViewModel.kt#L82).\n\n#### Collect payments while offline Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApps on Devices supports [offline payment collection](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments?terminal-sdk-platform=android&reader-type=internet).\n\n[](#device-management)\n\nYou can access the device’s admin settings by launching the `stripe://settings/` deep-link URI from your app.\n\nSee an example of [launching the admin settings deep-link URI](https://github.com/stripe-samples/terminal-apps-on-devices/blob/718c2de38c7b8003fcf58c536c266bb990ad43a7/app/src/main/java/com/stripe/aod/sampleapp/fragment/HomeFragment.kt#L30).\n\n`startActivity(     Intent(Intent.ACTION_VIEW)         .setData(Uri.parse(\"stripe://settings/\")) )`\n\n[](#instrument-app)\n\nStripe doesn’t provide an application-level instrumentation solution. To keep track of crashes and other logs from your application, you can use a third-party library such as Sentry or Crashlytics.\n\n[](#device-locale)\n\nThe device user’s language selection (not country) informs the value returned by [Locale.getDefault()](https://developer.android.com/reference/java/util/Locale#getDefault()). You can change the device language in the admin settings.\n\n[](#device-accessories)\n\nWhen the Stripe reader connects or disconnects from a dock, the Android operation system triggers a [configuration change](https://developer.android.com/guide/topics/resources/runtime-changes).\n\nBy default, your app’s activity is automatically recreated on a configuration change.\n\nTo disable automatic activity recreation when connecting to or disconnecting from a dock, add `android:configChanges=\"uiMode\"` in the `<activity>` entry in your `AndroidManifest.xml` file.\n\n`<activity     android:name=\".MyActivity\"     android:configChanges=\"uiMode\" />`\n\nYour activity can be notified of configuration changes by implementing [Activity::onConfigurationChanged](https://developer.android.com/reference/android/app/Activity#onConfigurationChanged(android.content.res.Configuration)). This method is only called if you’ve specified configurations you want to handle with the `android:configChanges` attribute in your manifest.\n\n`class MainActivity : Activity() {     override fun onConfigurationChanged(newConfig: Configuration) {         super.onConfigurationChanged(newConfig)         // implement custom configuration change handling logic     } }`\n\n## Test your app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse your S700 DevKit device to test your app in the Stripe Dashboard or using the Android Debug Bridge (`adb`).\n\nYou can connect your DevKit device to your computer using a USB-A to USB-C cable. Then, use `adb` to directly install your app’s assembled APK onto the DevKit device.\n\nThe following examples assume your application’s [package name](https://developer.android.com/studio/build/configure-app-module) is `com.example.myapp` and the [main activity](https://developer.android.com/reference/android/content/Intent.html#ACTION_MAIN) is `MainActivity`.\n\nAfter installation completes, launch your app:\n\n`$ adb shell am start com.example.myapp/.MainActivity`\n\nStart admin settings:\n\n`$ adb shell am start -d \"stripe://settings/\"`\n\nIf needed, uninstall your app:\n\n`$ adb uninstall com.example.myapp`\n\nGoogle’s [Android Debug Bridge documentation](https://developer.android.com/studio/command-line/adb) provides a comprehensive guide to using `adb`.\n\n## Test payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDevKit devices can process test payments using a Stripe physical test card, which you can order in the [Dashboard](https://dashboard.stripe.com/terminal/shop/thsku_FmpZaTqwezTFvS). When [testing payments](https://docs.stripe.com/terminal/references/testing#physical-test-cards), you can use decimal amounts to produce specific outcomes.\n\n#### Warning\n\nDon’t use real cards for test payments on DevKit devices.",
    "title": "Build and test your app | Stripe Documentation",
    "description": "Learn how to build and test your app using a DevKit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/account/login_link",
    "markdown": "# The Login Link object | Stripe API Reference\n\n### Attributes\n\n*   The URL for the login link.\n    \n\n### More attributes\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Create a login link](https://docs.stripe.com/api/accounts/login_link/create)\n\nCreates a single-use login link for a connected account to access the Express Dashboard.\n\n**You can only create login links for accounts that use the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard) and are connected to your platform**.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a login link object if the call succeeded.\n\nPOST /v1/accounts/:id/login\\_links\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/login_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Login Link object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/custom_checkout/create_element?type=address",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/overview",
    "markdown": "# Custom Checkout with Elements | Stripe DocumentationThe Stripe Docs logo\n\nUse the Checkout Sessions or Payment Intents API to accept various types of payments. You can integrate either API into Stripe’s prebuilt payment platforms. Depending on your checkout flow and the level of control you require, these APIs support different use cases:\n\n*   The [Checkout Sessions API](https://docs.stripe.com/api/checkout/sessions) allows you to model your customer’s checkout process. This includes the line items in their purchase, billing or shipping addresses, applicable tax rates, and coupons or discounts. The CheckoutSession manages creating subscriptions, calculating tax rates with Stripe Tax, or initiating payments.\n*   The [Payment Intents API](https://docs.stripe.com/api/payment_intents) is a lower-level API that only focuses on modeling the payments step. Unlike the Checkout Sessions API, which requires line item details, you only pass in the final amount you want to charge. To use Stripe to calculate applicable taxes or create subscriptions, you need to integrate with the Stripe [Tax API](https://docs.stripe.com/api/tax/calculations) or [Subscriptions API](https://docs.stripe.com/api/subscriptions).\n\n![Checkout Sessions versus Payment Intents API](https://b.stripecdn.com/docs-statics-srv/assets/checkout-sessions-vs-payment-intents.9395694871e31814befdc186bb6ab4d4.png)\n\nComparing the Checkout Sessions and Payment Intents APIs\n\nBecause the Checkout Sessions API uses [line\\_items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items), it integrates natively with other Stripe products such as Stripe Tax, Stripe Billing, and Automatic Currency Conversion. However, you can also integrate with these other products using the Payment Intents API in combination with other standalone Stripe APIs.",
    "title": "Custom Checkout with Elements | Stripe Documentation",
    "description": "Learn how to use Elements with Custom Checkout to build a checkout page.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/webhook_endpoints/update",
    "markdown": "# Update a webhook endpoint | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fwebhook_endpoints%2Fupdate)\n\nUpdates the webhook endpoint. You may edit the `url`, the list of `enabled_events`, and the status of your endpoint.\n\n### Parameters\n\n*   An optional description of what the webhook is used for.\n    \n*   #### \n    \n    enabled\\_eventsarray of enums\n    \n    The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account.application.authorized`<br><br>Occurs whenever a user authorizes an application. Sent to the related application only. |\n    | `account.application.deauthorized`<br><br>Occurs whenever a user deauthorizes an application. Sent to the related application only. |\n    | `account.external_account.created`<br><br>Occurs whenever an external account is created. |\n    | `account.external_account.deleted`<br><br>Occurs whenever an external account is deleted. |\n    | `account.external_account.updated`<br><br>Occurs whenever an external account is updated. |\n    | `account.updated`<br><br>Occurs whenever an account status or property has changed. |\n    | `application_fee.created`<br><br>Occurs whenever an application fee is created on a charge. |\n    | `application_fee.refund.updated`<br><br>Occurs whenever an application fee refund is updated. |\n    | `application_fee.refunded`<br><br>Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds. |\n    | `balance.available`<br><br>Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions. |\n    | Show 336 more |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The URL of the webhook endpoint.\n    \n\n### More parameters\n\n### Returns\n\nThe updated webhook endpoint object if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/webhook\\_endpoints/:id\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"enabled_events[]\"=\"charge.succeeded\" \\  -d \"enabled_events[]\"=\"charge.failed\" \\  --data-urlencode url=\"https://example.com/new_endpoint\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"status\": \"disabled\",  \"url\": \"https://example.com/new_endpoint\"}\n```\n\n## [Retrieve a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/retrieve)\n\nRetrieves the webhook endpoint with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a webhook endpoint if a valid webhook endpoint ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/webhook\\_endpoints/:id\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"status\": \"enabled\",  \"url\": \"https://example.com/my/webhook/endpoint\"}\n```\n\n## [List all webhook endpoints](https://docs.stripe.com/api/webhook_endpoints/list)\n\nReturns a list of your webhook endpoints.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` webhook endpoints, starting after webhook endpoint `starting_after`. Each entry in the array is a separate webhook endpoint object. If no more webhook endpoints are available, the resulting array will be empty. This request should never raise an error.\n\nGET /v1/webhook\\_endpoints\n\n```\ncurl -G https://api.stripe.com/v1/webhook_endpoints \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/webhook_endpoints\",  \"has_more\": false,  \"data\": [    {      \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",      \"object\": \"webhook_endpoint\",      \"api_version\": null,      \"application\": null,      \"created\": 1680122196,      \"description\": null,      \"enabled_events\": [        \"charge.succeeded\",        \"charge.failed\"      ],      \"livemode\": false,      \"metadata\": {},      \"status\": \"enabled\",      \"url\": \"https://example.com/my/webhook/endpoint\"    }    {...}    {...}  ],}\n```\n\n## [Delete a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/delete)\n\nYou can also delete webhook endpoints via the [webhook endpoint management](https://dashboard.stripe.com/account/webhooks) page of the Stripe dashboard.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted webhook endpoints’s ID. Otherwise, this call raises [an error](#errors), such as if the webhook endpoint has already been deleted.\n\nDELETE /v1/webhook\\_endpoints/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"deleted\": true}\n```",
    "title": "Update a webhook endpoint | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/migrate-subscriptions",
    "markdown": "# Migrate subscriptions to Stripe Billing\n\n## Learn about migrating subscriptions from other sources to Stripe.\n\nYou can import existing [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") from third-party billing systems (such as Zuora, Recurly, Chargify, or Chargebee) into Stripe Billing. You can also migrate subscriptions from an in-house billing system or from a different Stripe account.\n\nUse the [Billing migration toolkit](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit) to migrate your subscriptions without writing code. Alternatively, you can use the [Stripe APIs](https://docs.stripe.com/billing/subscriptions/import-subscriptions) to import subscriptions with manual scripts.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must know:\n\n*   Your current payment processor.\n*   Your current subscription provider.\n*   Your [pricing model](https://docs.stripe.com/products-prices/pricing-models \"pricing model\").\n\n## Getting started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit \"Migrate subscriptions using toolkit\")\n\n[Migrate subscriptions using toolkit](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit \"Migrate subscriptions using toolkit\")\n\n[\n\nUse the Billing migration toolkit to migrate your subscriptions to Stripe.\n\n](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit \"Migrate subscriptions using toolkit\")\n\n[](https://docs.stripe.com/billing/subscriptions/import-subscriptions \"Migrate subscriptions with APIs\")\n\n[Migrate subscriptions with APIs](https://docs.stripe.com/billing/subscriptions/import-subscriptions \"Migrate subscriptions with APIs\")\n\n[\n\nLearn how to migrate your subscriptions to Stripe using Stripe APIs.\n\n](https://docs.stripe.com/billing/subscriptions/import-subscriptions \"Migrate subscriptions with APIs\")\n\n[](https://docs.stripe.com/billing/subscriptions/toolkit-reference \"Toolkit CSV reference\")\n\n[Toolkit CSV reference](https://docs.stripe.com/billing/subscriptions/toolkit-reference \"Toolkit CSV reference\")\n\n[\n\nFollow best practices to migrate your subscriptions using the Billing migration toolkit.\n\n](https://docs.stripe.com/billing/subscriptions/toolkit-reference \"Toolkit CSV reference\")\n\n## Migration stages![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA typical migration process consists of the following stages:\n\n1.  [Set up your billing integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n2.  [Migrate your customer and payment processor information](https://docs.stripe.com/get-started/data-migrations/pan-import).\n3.  [Import your subscriptions to Stripe Billing](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit).\n\n![example image](https://b.stripecdn.com/docs-statics-srv/assets/billing-migration.f3bae77ee00a04b8d0baf90518a1db2c.png)\n\n### Migration decision matrix![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe migration process varies slightly depending on a few factors. Use the following decision matrix to understand the required steps for your situation.\n\n|     |     |     |\n| --- | --- | --- |\n|     | **My customer and payment data is in an external system** | **My customer and payment data is already in Stripe** |\n| **Migrate subscription data from a third party** | *   [Set up a Stripe Billing integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions)<br>*   [Request a PAN data import from your current processor](https://docs.stripe.com/get-started/data-migrations/pan-import)<br>*   [Use the Billing toolkit to migrate subscriptions data to Stripe Billing](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit) | *   [Set up a Stripe Billing integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions)<br>*   [Use the Billing toolkit to migrate subscriptions data to Stripe Billing](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit) |\n| **Migrate subscription data between Stripe accounts** | *   [Set up a Stripe Billing integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions)<br>*   [Copy PAN data across Stripe accounts](https://docs.stripe.com/get-started/data-migrations/pan-copy-self-serve)<br>*   [Billing migration within Stripe accounts](https://docs.stripe.com/billing/subscriptions/toolkit-reference#within-Stripe-accounts) | *   [Set up a Stripe Billing integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions)<br>*   [Copy PAN data across Stripe accounts](https://docs.stripe.com/get-started/data-migrations/pan-copy-self-serve)<br>*   [Billing migration within Stripe accounts](https://docs.stripe.com/billing/subscriptions/toolkit-reference#within-Stripe-accounts) |",
    "title": "Migrate subscriptions to Stripe Billing | Stripe Documentation",
    "description": "Learn about migrating subscriptions from other sources to Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/link/add-link-elements-integration",
    "markdown": "# Build a custom checkout page that includes Link\n\n## Integrate Link using the Payment Element or Link Authentication Element.\n\nThis guide walks you through how to accept payments with [Link](https://docs.stripe.com/payments/link/what-is-link) using the [Payment Intents API](https://docs.stripe.com/api/payment_intents) and either the [Payment Element](https://docs.stripe.com/payments/payment-element) or [Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element).\n\nThere are three ways you can secure a customer email address for Link authentication and enrollment:\n\n*   **Pass in an email address:** You can pass an email address to the Payment Element using [defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues). If you’re already collecting the email address and or customer’s phone number in the checkout flow, we recommend this approach.\n*   **Collect an email address:** You can collect an email address directly in the Payment Element. If you’re not collecting the email address anywhere in the checkout flow, we recommend this approach.\n*   **Link Authentication Element:** You can use the Link Authentication Element to create a single email input field for both email collection and Link authentication. We recommend doing this if you use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n![Authenticate or enroll with Link directly in the Payment Element during checkout](https://b.stripecdn.com/docs-statics-srv/assets/link-in-pe.2efb5138a4708b781b8a913ebddd9aba.png)\n\nCollect a customer email address for Link authentication or enrollment\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-intent)\n\nStripe uses a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object to represent your intent to collect payment from a customer, tracking charge attempts and payment state changes throughout the process.\n\n![An overview diagram of the entire payment flow](https://b.stripecdn.com/docs-statics-srv/assets/accept-a-payment-payment-element.5cf6795a02f864923f9953611493d735.svg)\n\nYou can accept payments with Link using information your customer stores in the Link app. Because you don’t use the Link `payment_method.type`, when you receive a payment from a customer using Link in the Payment Element, the `payment_method.type` listed for the payment is `card`.\n\nTo use the Link `payment_method.type`, update your integration to set `payment_method_types` to `link`. Alternatively, you can set `automatic_payment_methods` to `enabled` and let Stripe dynamically display the most relevant payment methods to your customers.\n\nCreate a PaymentIntent on your server with an amount and currency, and `payment_method_types` set to `link` and any other payment methods you want to accept. Always decide how much to charge on the server side (a trusted environment) instead of the client. This prevents malicious customers from choosing their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"automatic_payment_methods[enabled]\"=true`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#design-your-integration)\n\nLink authenticates a customer by using their email address. Depending on your checkout flow, you have the following options: pass an email to the Payment Element, collect it directly within the Payment Element, or use the Link Authentication Element. Of these, Stripe recommends passing a customer email address to the Payment Element if available.\n\nIf _any_ of the following apply to you:\n\n*   You want a single, optimized component for email collection and Link authentication.\n*   You need to collect a shipping address from your customer.\n\nThen use the integration flow that implements these elements: the Link Authentication Element, Payment Element and optional Address Element.\n\nA Link-enabled checkout page has the Link Authentication Element at the beginning, followed by the Address Element, and the Payment Element at the end. You can also display the Link Authentication Element on separate pages, in this same order, for multi-page checkout flows.\n\n![Create a payment form using multiple Elements](https://b.stripecdn.com/docs-statics-srv/assets/link-with-elements.f60af275f69b6e6e73c766d1f9928457.png)\n\nCreate a payment form using multiple Elements\n\nThe integration works as follows:\n\n[](#web-collect-payment-details)\n\nNow you can set up your custom payment form with the Elements prebuilt UI components. Your payment page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS. [Enable HTTPS](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\nThe Link Authentication Element renders an email address input. When Link matches a customer email with an existing Link account, it sends the customer a secure, one-time code to their phone to authenticate. If the customer successfully authenticates, Stripe displays their Link-saved addresses and payment methods automatically for them to use.\n\nThis integration also creates the Payment Element, which renders a dynamic form that allows your customer to pick a payment method type. The form automatically collects all necessary payments details for the payment method type selected by the customer. The Payment Element also handles the display of Link-saved payment methods for authenticated customers.\n\n### Set up Stripe Elements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstall React Stripe.js and the Stripe.js loader from the [npm public registry](https://www.npmjs.com/package/@stripe/react-stripe-js).\n\n`npm install --save @stripe/react-stripe-js @stripe/stripe-js`\n\nOn your payment page, wrap your payment form with the `Elements` component, passing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from [the previous step](#web-create-intent). ​​If you already collect the customer’s email in another part of your form, replace your existing input with the `linkAuthenticationElement​`.\n\nIf you don’t collect email, add the `linkAuthenticationElement​` to your checkout flow. You must place the `linkAuthenticationElement` before the `ShippingAddressElement` (optional if you collect shipping addresses) and the `PaymentElement` for Link to autofill Link-saved details for your customer in the `ShippingAddressElement` and `PaymentElement`. You can also pass in the [appearance option](https://docs.stripe.com/elements/appearance-api), customizing the Elements to match the design of your site.\n\nIf you have the customer’s email, pass it to the `defaultValues` option of the `linkAuthenticationElement`. This prefills their email address and initiates the Link authentication process.\n\nIf you have other customer information, pass it to the `defaultValues.billingDetails` object for the `PaymentElement`. Prefilling as much information as possible simplifies Link account creation and reuse for your customers.\n\nThen, render the `linkAuthenticationElement` and `PaymentElement` components in your payment form:\n\n`import {loadStripe} from \"@stripe/stripe-js\"; import {   Elements,   LinkAuthenticationElement,   PaymentElement, } from \"@stripe/react-stripe-js\";  const stripe = loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  // Customize the appearance of Elements using the Appearance API. const appearance = {/* ... */};  // Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';`\n\nThe `linkAuthenticationElement`, `PaymentElement`, and `ShippingAddressElement` don’t need to be on the same page. If you have a process where customer contact information, shipping details, and payment details display to the customer in separate steps, you can display each Element in the appropriate step or page. Include the `linkAuthenticationElement` as the email input form in the contact info collection step to make sure the customer can take full advantage of the shipping and payment autofill provided by Link.\n\nIf you collect your customer’s email with the Link Authentication Element early in the checkout flow, you don’t need to show it again on the shipping or payment pages.\n\n### Retrieve an email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can retrieve the email address details using the `onChange` prop on the `linkAuthenticationElement` component. The `onChange` handler fires whenever the user updates the email field, or when a saved customer email is autofilled.\n\n`<linkAuthenticationElement onChange={(event) => {   setEmail(event.value.email); }} />`\n\n### Prefill a customer email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Link Authentication Element accepts an email address. Providing a customer’s email address triggers the Link authentication flow as soon as the customer lands on the payment page using the `defaultValues` option.\n\n`<linkAuthenticationElement options={{defaultValues: {email: 'foo@bar.com'}}}/>`\n\n[](#web-submit-payment)\n\nUse [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) to complete the payment with details collected from your customer in the different Elements forms. Provide a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe redirects the user after they complete the payment.\n\nYour user might be first redirected to an intermediate site, like a bank authorization page, before Stripe redirects them to the `return_url`.\n\nBy default, card and bank payments immediately redirect to the `return_url` when a payment is successful. If you don’t want to redirect to the `return_url`, you can use [`if_required`](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to change the behavior.\n\n`import {loadStripe} from \"@stripe/stripe-js\"; import {   useStripe,   useElements,   Elements,   LinkAuthenticationElement,   PaymentElement,   // If collecting shipping   AddressElement, } from \"@stripe/react-stripe-js\";  const stripe = loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {/* ... */};  // Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';  const CheckoutPage =({clientSecret}) => (   <Elements stripe={stripe} options={{clientSecret, appearance, loader}}>     <CheckoutForm />   </Elements> );  export default function CheckoutForm() {   const stripe = useStripe();   const elements = useElements();    const handleSubmit = async (event) => {     event.preventDefault();      const {error} = await stripe.confirmPayment({       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (error) {       // handle error     }   };    return (     <form onSubmit={handleSubmit}>       <h3>Contact info</h3>       <LinkAuthenticationElement />       {/* If collecting shipping */}       <h3>Shipping</h3>       <AddressElement options={{mode: 'shipping', allowedCountries: ['US']}} />       <h3>Payment</h3>       <PaymentElement />        <button type=\"submit\">Submit</button>     </form>   ); }`\n\nThe `return_url` corresponds to a page on your website that provides [the payment status](https://docs.stripe.com/payments/payment-intents/verifying-status) of the `PaymentIntent` when you render the return page. When Stripe redirects the customer to the `return_url`, you can use the following URL query parameters to verify payment status. You can also append your own query parameters when providing the `return_url`. These query parameters persist through the redirect process.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent` |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\n[](#web-post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nConfigure your integration to listen for these events rather than waiting on a callback from the client. When you wait on a callback from the client, the customer can close the browser window or quit the app before the callback executes. Setting up your integration to listen for asynchronous events enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, you can also handle two other important events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent from Stripe when a customer has successfully completed a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent from Stripe when a customer attempted a payment, but the payment didn’t succeed. | If a payment transitioned from `processing` to `payment_failed`, offer the customer another attempt to pay. |\n\n[](#web-test-the-integration)\n\n#### Caution\n\nDon’t store real user data in [test mode](https://docs.stripe.com/test-mode \"test mode\") Link accounts. Treat them as if they’re publicly available, because these test accounts are associated with your publishable key.\n\nCurrently, Link only works with credit cards, debit cards, and qualified US bank account purchases. Link requires [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\nYou can create test mode accounts for Link using any valid email address. The following table shows the fixed one-time passcode values that Stripe accepts for authenticating test mode accounts:\n\n| Value | Outcome |\n| --- | --- |\n| Any other 6 digits not listed below | Success |\n| 000001 | Error, code invalid |\n| 000002 | Error, code expired |\n| 000003 | Error, max attempts exceeded |\n\nFor testing specific payment methods, refer to the [Payment Element testing examples](https://docs.stripe.com/payments/accept-a-payment?platform=web#additional-testing-resources).\n\n### Multiple funding sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs Stripe adds additional funding source support, you don’t need to update your integration. Stripe automatically supports them with the same transaction settlement time and guarantees as card and bank account payments.\n\n### Card authentication and 3D Secure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLink supports [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2 \"3D Secure 2 (3DS2)\") authentication for card payments. 3DS2 requires customers to complete an additional verification step with the card issuer when paying. Payments that have been successfully authenticated using 3D Secure are covered by a liability shift.\n\nTo trigger 3DS2 authentication challenge flows with Link in test mode, use the following test card with any CVC, postal code, and future expiration date: .\n\nIn test mode, the authentication process displays a mock authentication page. On that page, you can either authorize or cancel the payment. Authorizing the payment simulates successful authentication and redirects you to the specified return URL. Clicking the **Failure** button simulates an unsuccessful attempt at authentication.\n\nFor more details, refer to the [3D Secure authentication page](https://docs.stripe.com/payments/3d-secure).\n\n#### Note\n\nWhen testing 3DS flows, only test cards for 3DS2 will trigger authentication on Link.\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [What is Link](https://docs.stripe.com/payments/link/what-is-link)\n*   [Link with Elements](https://docs.stripe.com/payments/link/elements-link)\n*   [Link in the Payment Element](https://docs.stripe.com/payments/link/payment-element-link)\n*   [Explore the Link Authentication Element](https://docs.stripe.com/payments/link/link-authentication-element)",
    "title": "Build a custom checkout page that includes Link | Stripe Documentation",
    "description": "Integrate Link using the Payment Element or Link Authentication Element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/cli-preview-plugin",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700",
    "markdown": "# Set up Stripe Reader S700\n\n## Learn how to set up Stripe Reader S700.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/S700-3D.041eca5dfd580cdc451a41020b4dd45a.png)\n\nStripe Reader S700 is an Android-based smart reader for countertop and handheld use. You can customize the on-reader checkout UI using a suite of pre-built and custom elements.\n\nThe [Stripe Terminal SDK connects to the reader](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet) over the internet, LAN, or [handoff mode](https://docs.stripe.com/terminal/features/apps-on-devices/build#discover-and-connect-a-reader). This reader is compatible with the following integrations:\n\n*   JavaScript SDK\n*   iOS SDK\n*   Android SDK\n*   React Native SDK\n*   Server-driven\n\nFor Stripe Reader S700, we recommend the [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven), which uses the Stripe API instead of a Terminal SDK. To view the reader’s parts and features, see the [Stripe Reader S700 product sheet](https://d37ugbyn3rpeym.cloudfront.net/docs/terminal/S700_Product_Sheet_legal_0240314.pdf).\n\n## Turn the reader on and off![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect the reader to power by plugging the provided USB-C cable into the port on the left side of your reader. Connect the opposite end of the USB-C cable to the provided power adapter and plug it into a power outlet. The Stripe Reader S700 requires a recommended 12W of power to operate properly. Stripe power adapters and cables are recommended for the charging and operation of the S700 and its accessories. Using alternative power adapters or cables might result in failure modes including inadequate S700 charging, and might invalidate your product warranty.\n\n![Side of Stripe Reader S700](https://b.stripecdn.com/docs-statics-srv/assets/s700-side-view.66affe17a0aeac5999a561f44d67bfbc.png)\n\nStripe Reader S700\n\nAfter the reader is fully charged, hold down the power button on the right side until the screen turns on. After the device powers on, press the power button to sleep or wake the device. To fully power off the device, hold down the power button until the power off option appears on the screen, then select it.\n\nIn a countertop deployment, leaving the device on for extended periods is expected. With a full charge, you can expect the battery to last about 15 hours.\n\nEven when not in use, leave Stripe Reader S700 plugged in and powered on to receive automatic software updates.\n\n## Access settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo open the settings menu, swipe right from the left edge of the reader screen to reveal a **Settings** button. Tap the **Settings** button and enter the admin PIN `07139`. From here, you can update your WiFi settings or generate a pairing code for device registration. Battery status is displayed at the top right of this screen. To close the settings menu, click the back arrow in the top left corner.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-settings-button.6f47bb2572f4ac12b13286dde247ad88.png)\n\nSettings button\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-admin-pin-screen.37e0ae6a621abb2c506db9ae762c8e91.png)\n\nAdmin PIN screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-settings-menu.e03e2092089fa18470a353da3fdad707.png)\n\nSettings menu\n\n## Screen timeout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe screen times out when the reader isn’t connected to a power source. The default timeout of 1 hour improves battery performance. To update this value, go to the [settings](#settings), select **Appearance**, then select a new screen timeout from the dropdown. The device screen turns on automatically after a device interaction occurs (such as touching the screen or picking up the device), or when the device enters the payments flow and a payment is initiated.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-settings-menu.e03e2092089fa18470a353da3fdad707.png)\n\nSettings menu\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-appearance-menu.b83b814d09f1344e1407174e969def1c.png)\n\nAppearance menu\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-settings-timeout.4fa38fc09ee1092d47eb737d46155a15.png)\n\nTimeout menu\n\n## Connect the reader to the internet![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause the Stripe Reader S700 is a smart reader, its reader software communicates directly with Stripe. Your point of sale application communicates with the reader through either a LAN (using a Terminal SDK) or the internet (using the [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven)). When communicating with the reader through the LAN, the reader must connect to the same local network as your point of sale application. If you’re running into issues connecting your reader to the internet, follow the [troubleshooting steps](https://docs.stripe.com/terminal/readers/stripe-reader-s700#troubleshooting) to diagnose the issue.\n\n### WiFi![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo connect to WiFi or switch networks, go to [settings](#settings), then select **WiFi settings** to choose the network and connect. Attempting to join a new network disconnects the reader from any existing wireless connection. See our [network requirements](https://docs.stripe.com/terminal/network-requirements) for details about supported WiFi networks.\n\n### Ethernet and USB Peripherals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEthernet connectivity requires an optional hub, which provides wired 10/100 Ethernet connectivity and allows your smart reader to remain fully charged with the included charging cable. The hub also provides two USB-A ports to connect peripherals such as a barcode scanner and printer. The hub is compatible with the S700 Dock for countertop applications. You can purchase the hub and dock separately in the [Stripe Dashboard](https://dashboard.stripe.com/terminal/shop).\n\nTo set up the hub:\n\n1.  Connect the Ethernet cable from your hub to your router.\n2.  Connect the hub to power through the built-in USB-C cable. We recommend using the power adapter included with your tripe Reader S700 to make sure the appropriate power is provided to the hub (27W) to power the reader and attached peripherals.\n3.  Connect the USB-C cable (provided with Stripe Reader S700) to the hub and reader when both cables are in place. The right-angle USB-C connector connects to the reader.\n\nTo confirm the reader’s Ethernet connectivity, verify that the reader is charging and check if the Ethernet icon is visible in the status bar.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-battery-icon.d1e81d69ea61041f809e60d79e25be54.png)\n\nCharging icon\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-ethernet-icon.c5ae0533a503eb51ee9c8d587a854af0.png)\n\nEthernet icon\n\nThe reader obtains an IP address using DHCP. As soon as the network cable is plugged in, the reader attempts to establish communication with Stripe.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/USB_Ethernet_Hub_with_Dock_and_S700.a26b62b93fad05b1dcc65f74341f3447.png)\n\nHub when used with Dock (sold separately)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/USB_Ethernet_Hub_with_S700.03e29d9d225b2677b7f86da50926ec25.png)\n\nHub with peripherals. Ethernet connected and power connected to Stripe Reader S700.\n\nFor more information about these accessories, see [Stripe Reader S700 accessories](https://docs.stripe.com/terminal/payments/stripe-reader-s700/accessories).\n\n## Network priority![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Reader S700 prioritizes connecting through Ethernet if possible. Even if previously configured for WiFi, the reader switches to using an Ethernet connection when connected to the dock with a plugged-in Ethernet cable. If you remove the reader from the dock, it switches back to the WiFi connection.\n\nThe Stripe Reader S700 resets its priority to Ethernet when rebooting. Even if previously configured for WiFi, the reader switches to Ethernet if it detects an Ethernet cable connection while starting up.\n\nIf you dock the reader, but you don’t have an Ethernet cable plugged in, it uses WiFi. Regardless of connectivity while docked, you can still connect to WiFi and manage networks on the device.\n\n## Change the UI appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the user interface of your Stripe Reader S700 reader uses a light theme.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-welcome-screen.903f1751a4041eefd1840d9a5d2f110f.png)\n\nWelcome screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-payment-screen.4dd5fc4be4c989e6af7bd1b2a635ba5d.png)\n\nPayment screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-processing-screen.f99410ddc0d26e095ffdda92e953e7ac.png)\n\nProcessing screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-approved-screen.ae53ca99ba84aefbf2cb1aacf9ef1a2e.png)\n\nApproved screen\n\nYou can change the appearance of the UI to use a different theme in the settings menu. Go to [settings](#settings), then select **Appearance**, and select a new theme from the dropdown.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-settings-menu.e03e2092089fa18470a353da3fdad707.png)\n\nSettings menu\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-appearance-menu.b83b814d09f1344e1407174e969def1c.png)\n\nAppearance menu\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700-settings-theme.b07df3b6d20482df8790ecb9e19e8893.png)\n\nTheme menu\n\n## Change the default reader language![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Reader S700 supports changing the reader language in the [reader settings](#access-settings) menu. Swipe right across the screen to access the settings menu, and select your language.\n\n## Design your own accessories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can design your own accessories for the Stripe Reader S700. To download the Stripe Reader S700 mechanical design files (.STP), you must first review and accept our [Terminal Design File License Agreement](https://stripe.com/legal/terminal-design). By downloading the file below, you agree to the terms outlined in the license.\n\n[Download Stripe design files](https://d37ugbyn3rpeym.cloudfront.net/terminal/Stripe-Reader-S700-and-Accessories-Design-Files.zip)\n\n### Custom mounting attachment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re interested in designing your own custom mounting attachment, see the [Stripe Reader S700 Accessory Design Guidelines](https://d37ugbyn3rpeym.cloudfront.net/terminal/Stripe-Reader-S700-Accessories-Design-Files-Mechanical-Usage-Guidelines.pdf).",
    "title": "Set up Stripe Reader S700 | Stripe Documentation",
    "description": "Learn how to set up Stripe Reader S700.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/climate/orders/quickstart",
    "markdown": "# Climate Orders quickstart | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
    "title": "Climate Orders quickstart | Stripe Documentation",
    "description": "Enable your customers to buy carbon removal using the Climate API with your payments integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/climate/orders/how-it-works",
    "markdown": "# How it works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create, monitor, and manage your carbon removal orders.\n\nClimate Orders enables companies to buy permanent carbon removal from the [Frontier offtake portfolio and its individual suppliers](https://frontierclimate.com/portfolio?track=offtake). When you purchase carbon removal, your company can help contribute to the world’s net zero carbon goals and help fund emerging carbon removal technologies.\n\nTo help you incorporate carbon removal into your climate offering, Frontier does the following for you:\n\n*   **Procures supply**: This requires establishing purchasing criteria, sourcing promising projects, and negotiating contracts.\n*   **Monitors supplier progress**: This includes monitoring supplier performance against key milestones.\n*   **Manages deliveries**: This includes validating delivery and retiring purchases.\n\n![Diagram describing the life cycle of a carbon removal order](https://b.stripecdn.com/docs-statics-srv/assets/frontier-diagram.9a70cf7ffa99c0589082ee922804e333.svg)\n\n## Procure supply![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrontier’s in-house team of experts and a group of [60+ technical reviewers](https://frontierclimate.com/who-we-are#section-technical-reviewers) source and vet all suppliers. We look for permanent carbon removal solutions that have the potential to be low-cost and high-volume in the future, even if they aren’t today.\n\nWe use these factors to make purchasing decisions:\n\n| Approach | Execution | Portfolio |\n| --- | --- | --- |\n| Does the carbon removal approach meet our target criteria? | Can this team deliver on the proposal, given where the technology is today? | Does this purchase help us build a diverse, risk-adjusted portfolio of carbon removal approaches? |\n\nSpecifically, Frontier focuses on technologies that meet the following criteria:\n\n| Criteria | Description |\n| --- | --- |\n| Durability | Store carbon permanently (>1,000 years) |\n| Physical footprint | Take advantage of carbon sinks and sources that don’t compete for arable land |\n| Cost | Have a path to being affordable at scale (<100 USD per ton) |\n| Capacity | Have a path to being a meaningful part of the carbon removal solution portfolio (>0.5 gigatons per year) |\n| Net negativity | Maximize net removal of atmospheric carbon dioxide |\n| Additionality | Result in net new carbon removed, rather than taking credit for removal that was already going to occur |\n| Verifiability | Have a published protocol that addresses key pathway uncertainties, has responded to scientific community feedback, and has a plan for independent verification of outcomes |\n| Safety and legality | Have a compelling case for why they don’t cause additional ecosystem damage or other ongoing externalities, has published ecosystem impact data and responded to feedback from the scientific community, and will actively manage the minimal remaining uncertainty within their deployments based on ongoing ecosystem monitoring |\n| Performance data | Have technology that has been validated by data obtained through a pilot deployment |\n| Community engagement | Have a community benefits plan and has proactively engaged stakeholders and incorporated feedback into their deployment plans |\n\nWe conduct diligence and sign long-term offtake agreements with the most promising suppliers that meet our criteria so that you don’t have to. Early offtakes are a unique way to buy carbon removal because they help projects start building today so that they can deliver tons in the near future.\n\nLearn more about [our available inventory](https://docs.stripe.com/climate/orders/carbon-removal-inventory).\n\n## Monitor supplier progress![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause the carbon removal industry is in its early stages, it’s likely that some suppliers will be delayed or fail. Apart from conducting careful diligence, Frontier minimizes delivery delays and failures by actively monitoring progress against supplier-specific milestones, reallocating offtake agreements across suppliers as needed, and maintaining an inventory buffer.\n\n#### Note\n\nIf an order is delayed or fails, we’ll send you an email and the relevant webhook at least 60 days in advance.\n\n*   **Delays**. You’ll have the option of receiving a full refund or waiting for the tons to be delivered.\n*   **Individual supplier failures**. We’ll try to substitute your order with another similar supplier in the Frontier portfolio. Substituted carbon removal units might vary by pathway, geography, and price. If you don’t want a substitute, you can cancel the order and receive a full refund.\n\n## Manage deliveries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Frontier receives the verified carbon removal from the supplier, the carbon removal units are retired on an independent third party registry. All deliveries are third party verified.\n\nAt the time of delivery, Frontier shares a delivery certificate and important details about the suppliers that fulfilled your order.\n\n![Preview of a carbon removal order certificate](https://b.stripecdn.com/docs-statics-srv/assets/frontier-certificate.377888457bcfecad08286964dd7e1751.svg)\n\nWhen possible, Frontier retires the carbon removal units on your behalf (or on behalf of your [beneficiary](https://docs.stripe.com/api/climate/order/object#climate_order_object-beneficiary_reference \"climate beneficiary\")). If we can’t name the buyer on the third party registry, we’ll retire orders in Frontier’s name.\n\nAfter delivery of your order, you can use your carbon removal units for net zero¹ or carbon neutrality claims.² You can’t make these claims prior to delivery.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can purchase carbon removal programmatically using the Climate API or manually using the [Dashboard](https://dashboard.stripe.com/climate/orders).\n\n¹ The [Science Based Targets Initiative](https://sciencebasedtargets.org/) (SBTi) has become the de facto standard for companies setting net zero targets. SBTi [requires that,](https://sciencebasedtargets.org/resources/files/Net-Zero-Standard.pdf) to make a net zero claim, companies must (i) plan to reduce their current emissions by at least 90% relative to current levels, (ii) purchase permanent carbon removal—such as that being sold through the Climate API—on behalf of the remaining 10% of emissions, and (iii) support beyond value chain mitigation—a somewhat unclear concept that’s meant to capture all the various ways that companies can contribute to mitigating climate change or reducing its impacts outside of reducing their own emissions (or neutralizing them through permanent carbon removal purchases).\n\n² Carbon neutrality is somewhat poorly defined, but is generally claimed when a company purchases an amount of carbon credits (or carbon removal units) equal to their remaining emissions.",
    "title": "How it works | Stripe Documentation",
    "description": "Learn how to create, monitor, and manage your carbon removal orders.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/add-discounts",
    "markdown": "# Add discounts | Stripe DocumentationThe Stripe Docs logo\n\nCreate coupons in the [Dashboard](https://dashboard.stripe.com/test/coupons/create) or with the [API](https://docs.stripe.com/api/coupons/create):\n\n`curl https://api.stripe.com/v1/coupons \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d duration=once \\  -d id=free-period \\  -d percent_off=100`\n\nYou can choose between a fixed amount discount and a percentage discount by choosing [amount\\_off](https://docs.stripe.com/api/coupons/object#coupon_object-amount_off) or [percent\\_off](https://docs.stripe.com/api/coupons/object#coupon_object-percent_off).\n\nIf discounting a subscription, you can use the [duration](https://docs.stripe.com/api/coupons/object#coupon_object-duration) and [duration\\_in\\_months](https://docs.stripe.com/api/coupons/object#coupon_object-duration_in_months) parameters to configure how the coupon applies to subsequent charges in the subscription. The default is a one-time discount.\n\nAfter creation, only the name of the coupon is editable.",
    "title": "Add discounts | Stripe Documentation",
    "description": "Reduce the amount charged to a customer by using coupons and promotion codes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/kakao-pay/set-up-future-payments",
    "markdown": "# Set up future payments with Kakao Pay\n\nSave Kakao Pay payment details using [Checkout](https://docs.stripe.com/payments/checkout), our fully hosted checkout page.\n\nLearn how to [set up a subscription with Kakao Pay](https://docs.stripe.com/billing/subscriptions/kakao-pay) to create recurring payments after saving a payment method in Checkout.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-permissions)\n\nIf you save your customer’s payment method for future use, you need permission. Creating an agreement (sometimes called a mandate) up front allows you to save your customer’s payment details and charge them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save your customer’s payment method details, and let them opt in. If you plan to charge your customer when they’re offline, make sure that your terms also include the following:\n\n*   The customer’s permission for you to initiate a payment or a series of payments on their behalf for specified transactions\n*   The anticipated frequency (one-time or recurring) and timing of payments\n*   How you determine the payment amount\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service\n\nMake sure that you keep a record of your customer’s written agreement to these terms, and only submit charges in accordance with the agreed terms.\n\n[](#web-create-customer)\n\nTo reuse a Kakao Pay payment method for future payments, attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a [Customer object](https://docs.stripe.com/api/customers) when your customer creates an account with your business, and associate the ID of the Customer object with your own internal representation of that customer. Alternatively, you can create a new Customer before saving a payment method for future payments.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#web-create-checkout-session)\n\nYour customer must authorize you to use their NicePay account for future payments through Stripe Checkout. This allows you to accept Kakao Pay payments. Add a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) that the response returns.\n\n``Stripe::Checkout::Session.create({   mode: 'setup',   payment_method_types: ['card'],   payment_method_types: ['card', 'kakao_pay'],   payment_method_data: {     kakao_pay: {},     billing_details: {       email: \"jane.diaz@stripe.com\"     }   line_items: [{     price_data: {       currency: 'usd',       # To accept `kakao_pay`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#web-test-integration)\n\nWhen testing your Checkout integration, select **Kakao Pay** and click Pay. You will be redirected to a Stripe-hosted page where you can choose to authorize or fail the payment. See more details [here](https://docs.stripe.com/testing#redirects) for how to test redirect based payment methods.",
    "title": "Set up future payments with Kakao Pay | Stripe Documentation",
    "description": "Learn how to save Kakao Pay to charge your customers later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/confirm_bancontact_payment",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/kakao-pay",
    "markdown": "# Set up a subscription with Kakao Pay\n\nCreate and confirm a Subscription using two API calls. The [first API call](#create-setup-intent) sends customer and product information to the [Subscriptions API](https://docs.stripe.com/api/subscriptions) to create a Subscription and PaymentIntent in one call. The response includes a PaymentIntent ID that you must use in a [Payment Intents API](https://docs.stripe.com/api/payment_intents) call to confirm a payment.\n\n[\n\n## Create a product and price![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 100,000 KRW monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **100,000** for the price.\n4.  Select **KRW** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n#### Note\n\nYou must convert your prices to KRW to use the payment method.\n\n[\n\n## Create a SetupIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-setup-intent)\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) to save a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this setup process.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d confirm=true \\   --data-urlencode return_url=\"[https://www.stripe.com](https://www.stripe.com/)\" \\  -d usage=off_session \\  -d customer=cus_ODQluYFNl44ODI \\  -d \"payment_method_data[type]\"=kakao_pay \\  -d \"payment_method_types[]\"=kakao_pay \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"127.0.0.0\" \\  -d \"mandate_data[customer_acceptance][online][user_agent]\"=device`\n\nThe SetupIntent object contains a `client_secret`, which is a unique key that you must pass to Stripe.js on the client-side to redirect your buyer to Kakao Pay and authorize the mandate.\n\n[\n\n## Create a subscription![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-subscription)\n\nCreate a subscription that has a price and a customer. Set the value of the `default_payment_method` parameter to the PaymentMethod ID from the SetupIntent response.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d default_payment_method={{PAYMENT_METHOD_ID}} \\   -d off_session=true`\n\nCreating subscriptions automatically charges the preset default payment method of customers. After a successful payment, the status in the Stripe Dashboard changes to **Active**. The price that you previously set up determines the amount for future billings. Learn how to [create a subscription with a free trial period](#trial-periods).\n\n[\n\n## Confirm a payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#confirm-payment)\n\nConfirm a payment with [PaymentIntents](https://docs.stripe.com/api/payment_intents) using the PaymentIntent ID from the Subscriptions response. Add the PaymentIntent ID to the URL path and set the value of the `payment_method_types` parameter to `kakao_pay`:\n\n`curl https://api.stripe.com/v1/payment_intents/:id/confirm \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode return_url=\"[https://www.stripe.com](https://www.stripe.com/)\" \\  -d \"payment_method_data[]\"=type \\  -d \"payment_method_data[]\"=kakao_pay`\n\nThe PaymentIntent response includes the status `requires_action`, which indicates that your customers must complete the payment with the payment method they select from Kakao Pay to complete the PaymentIntent. After a successful payment, the subscription becomes active and saves the payment method as the default payment method.",
    "title": "Set up a subscription with Kakao Pay | Stripe Documentation",
    "description": "Learn how to create a subscription with Kakao Pay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/required-updates/accounts-arguments",
    "markdown": "# Accounts API Argument Changes | Stripe DocumentationThe Stripe Docs logo\n\n## This page maps old Accounts API arguments to the new argument names.\n\nIndividuals and companies used to share many of the same arguments. With the new [Persons API](https://docs.stripe.com/api/persons) and other changes, many of these arguments now have new names specific to individuals and companies. Existing [Account](https://docs.stripe.com/api/accounts) arguments that have not changed are not listed on this page.\n\n## Individuals ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Old argument | New argument |\n| --- | --- |\n| `business_name` | `business_profile.name` |\n| `business_url` | `business_profile.url` |\n| `debit_negative_balances` | `settings.payouts.debit_negative_balances` |\n| `decline_charge_on` | `settings.card_payments.decline_on` |\n| `keys` | Authenticate using the [Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header). |\n| `legal_entity` | `business_type` |\n| `legal_entity.additional_owners` | Argument removed. |\n| `legal_entity.address` | `individual.address`<br><br>`individual.address_kana` (Japan) `individual.address_kanji` (Japan) |\n| `legal_entity.dob` | `individual.dob` |\n| `legal_entity.first_name` | `individual.first_name` |\n| `legal_entity.last_name` | `individual.last_name` |\n| `legal_entity.personal_address` | `individual.address` |\n| `legal_entity.personal_phone_number` | `individual.phone` |\n| `legal_entity.personal_id_number` | `individual.id_number` |\n| `legal_entity.personal_id_number_provided` | `individual.id_number_provided` |\n| `legal_entity.ssn_last_4` | `individual.ssn_last_4` |\n| `legal_entity.ssn_last_4_provided` | `individual.ssn_last_4_provided` |\n| `legal_entity.type` | `business_type` |\n| `legal_entity.verification` | `individual.verification` |\n| `mcc` | `business_profile.mcc` |\n| `payout_schedule` | `settings.payouts.schedule` |\n| `payout_statement_descriptor` | `settings.payouts.statement_descriptor` |\n| `product_description` | `business_profile.product_description` |\n| `statement_descriptor` | `settings.payments.statement_descriptor` |\n| `support_email` | `business_profile.support_email` |\n| `support_phone` | `business_profile.support_phone` |\n| `support_address` | `business_profile.support_address` |\n| `verification.disabled_reason` | `requirements.disabled_reason` |\n| `verification.due_by` | `requirements.current_deadline` |\n| `verification.fields_needed` | `requirements.past_due, requirements.currently_due, requirements.eventually_due` |\n\n## Companies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Old argument | New argument |\n| --- | --- |\n| `business_name` | `business_profile.name` |\n| `business_url` | `business_profile.url` |\n| `debit_negative_balances` | `settings.payouts.debit_negative_balances` |\n| `decline_charge_on` | `settings.card_payments.decline_on` |\n| `keys` | Authenticate using the [Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header). |\n| `legal_entity` | Argument removed and replaced with `company`. |\n| `legal_entity.additional_owners` | Argument removed. |\n| `legal_entity.address` | `company.address`<br><br>`company.address_kana` (Japan) `company.address_kanji` (Japan) |\n| `legal_entity.business_name` | `company.name`<br><br>`company.name_kana` (Japan)<br><br>`company.name_kanji` (Japan) |\n| `legal_entity.business_tax_id` | `company.tax_id` |\n| `legal_entity.business_tax_id_provided` | `company.tax_id_provided` |\n| `legal_entity.dob` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-dob) object. |\n| `legal_entity.first_name` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-first_name) object. |\n| `legal_entity.last_name` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-last_name) object. |\n| `legal_entity.personal_address` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-address) object. |\n| `legal_entity.phone_number` | `company.phone` |\n| `legal_entity.personal_id_number` | Now managed with the [Persons](https://docs.stripe.com/api/persons/create#create_person-personal_id_number) object. |\n| `legal_entity.personal_id_number_provided` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-personal_id_number_provided) object. |\n| `legal_entity.ssn_last_4` | Now managed with the [Persons](https://docs.stripe.com/api/persons/create#create_person-ssn_last_4) object. |\n| `legal_entity.ssn_last_4_provided` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-ssn_last_4_provided) object. |\n| `legal_entity.type` | `business_type` |\n| `legal_entity.verification` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-requirements) object. |\n| `mcc` | `business_profile.mcc` |\n| `payout_schedule` | `settings.payouts.schedule` |\n| `payout_statement_descriptor` | `settings.payouts.statement_descriptor` |\n| `product_description` | `business_profile.product_description` |\n| `statement_descriptor` | `settings.payments.statement_descriptor` |\n| `support_email` | `business_profile.support_email` |\n| `support_phone` | `business_profile.support_phone` |\n| `support_address` | `business_profile.support_address` |\n| `verification.disabled_reason` | `requirements.disabled_reason` |\n| `verification.due_by` | `requirements.current_deadline` |\n| `verification.fields_needed` | `requirements.past_due, requirements.currently_due, requirements.eventually_due` |",
    "title": "Accounts API Argument Changes | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/bancontact",
    "markdown": "# Bancontact payments with Sources | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sources to accept payments using Bancontact, Belgium's most popular payment method.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with Bancontact using the Sources API, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nFor information about integrating Bancontact with the current APIs, see [Bancontact payments](https://docs.stripe.com/payments/bancontact).\n\nStripe users in Europe and the United States can accept [Bancontact](https://www.bancontact.com/) payments from customers in Belgium using [Sources](https://docs.stripe.com/sources).\n\nDuring the payment process, a [Source](https://docs.stripe.com/api#sources) object is created and your customer is redirected to their bank’s website or mobile application to authorize the payment. After completing this, your integration uses the source to make a charge request and complete the payment.\n\nBancontact is a [push](https://docs.stripe.com/sources#pull-or-push-of-funds)\\-based, [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) method of payment. This means your customer takes action to send the amount to you through a [redirect](https://docs.stripe.com/sources#flow-for-customer-action) and there is immediate confirmation about the success or failure of a payment.\n\n[\n\n## Create a Source object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-source)\n\nA `Source` object is either created client-side using [Stripe.js](https://docs.stripe.com/payments/elements) or server-side using the [Source creation endpoint](https://docs.stripe.com/api#create_source), with the following parameters:\n\n| Parameter | Value |\n| --- | --- |\n| `type` | **bancontact** |\n| `amount` | A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing the amount to charge the customer (for example, **1099** for a 10.99 EUR payment). The charge amount must be at least 1 EUR or its equivalent in the given currency. |\n| `bancontact[preferred_language]` (optional) | The preferred language of the Bancontact authorization page that the customer is redirected to. Supported values are: **en**, **de**, **fr**, or **nl**. |\n| `currency` | **eur** (Bancontact must always use Euros) |\n| `owner[name]` | The full name of the account holder. |\n| `redirect[return_url]` | The URL the customer should be redirected to after the authorization process. |\n| `statement_descriptor` (optional) | A custom statement descriptor for the payment. |\n\nTo create a source with [Stripe.js](https://docs.stripe.com/payments/elements), first include the library within your website and set your [publishable API key](https://dashboard.stripe.com/apikeys). Once included, use the following `createSource` method to create a source client-side:\n\n`stripe.createSource({   type: 'bancontact',   amount: 1099,   currency: 'eur',   owner: {     name: 'Jenny Rosen',   },   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nUsing either method, Stripe returns a `Source` object containing the relevant details for the method of payment used. Information specific to Bancontact is provided within the `bancontact` subhash.\n\n`{   \"id\": \"src_16xhynE8WzK49JbAs9M21jaR\",   \"object\": \"source\",   \"amount\": 1099,   \"client_secret\": \"src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU\",   \"created\": 1445277809,   \"currency\": \"eur\",   \"statement_descriptor\": null,   \"flow\": \"redirect\",   \"livemode\": true,`\n\n### Source creation in mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re building an iOS or Android app, you can implement sources using our mobile SDKs. Refer to our sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n### Optional: Providing a custom statement descriptor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBancontact requires a [statement descriptor](https://support.stripe.com/questions/when-i-charge-a-customer-what-will-they-see-on-their-card-statements) before the customer is redirected to authenticate the payment. By default, your Stripe account’s statement descriptor is used (you can review this in the [Dashboard](https://dashboard.stripe.com/settings/public)). You can provide a custom descriptor by specifying `statement_descriptor` when creating a source. Bancontact statement descriptors support a maximum of 35 characters.\n\n`stripe.createSource({   type: 'bancontact',   amount: 1099,   currency: 'eur',   statement_descriptor: 'ORDER AT11990',   owner: {     name: 'Jenny Rosen',   },   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nProviding a custom statement descriptor within a subsequent charge request has no effect.\n\n### Error codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSource creation for Bancontact payments may return any of the following errors:\n\n| Error | Description |\n| --- | --- |\n| `payment_method_not_available` | The payment method is currently not available. You should invite your customer to fallback to another payment method to proceed. |\n| `processing_error` | An unexpected error occurred preventing us from creating the source. The source creation should be retried. |\n| `invalid_owner_name` | The owner name is invalid. It must be at least three characters in length. |\n\n[\n\n## Have the customer authorize the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#customer-action)\n\nWhen creating a source, its status is initially set to `pending` and cannot yet be used to make a charge request. Your customer must authorize a Bancontact payment to make the source chargeable. To allow your customer to authorize the payment, redirect them to the URL provided within the`redirect[url]` attribute of the `Source` object.\n\nAfter the authorization process, your customer is redirected back to the URL provided as a value of `redirect[return_url]`. This happens regardless of whether authorization was successful or not. If the customer has authorized the payment, the `Source` object’s status is updated to `chargeable` and it is ready to use in a charge request. If your customer declines the payment, the status transitions to `failed`.\n\nStripe populates the `redirect[return_url]` with the following GET parameters when returning your customer to your website:\n\n*   `source`: a string representing the original ID of the `Source` object\n*   `livemode`: indicates if this is a live payment, either `true` or `false`\n*   `client_secret`: used to confirm that the returning customer is the same one who triggered the creation of the source (source IDs are not considered secret)\n\nYou may include any other GET parameters you may need when specifying `redirect[return_url]`. Do not use the above as parameter names yourself as these would be overridden with the values we populate.\n\n### Mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo integrate Bancontact within a mobile application, provide your application URI scheme as the `redirect[return_url]` value. By doing so, your customers are returned to your app after completing authorization. Refer to our Sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\nIf you are integrating without using our mobile SDKs, the redirect URL must be opened using the device’s native browser. The use of in-app web views and containers can prevent your customer from completing authentication—resulting in a lower conversion rate.\n\n### Testing the redirect process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a `Source` object using your test API keys, you can follow the URL returned in the `redirect[url]` field. This leads to a Stripe page that displays information about the API request, and where you can either authorize or cancel the payment. Authorizing the payment redirects you to the URL specified in `redirect[return_url]`.\n\nAlternatively, to accelerate testing, use the following value for `owner[email]`, where `xxx_` is any prefix of your choice (these patterns are significant only in testmode):\n\n| Email Address | Effect |\n| --- | --- |\n| `xxx_chargeable@example.com` | The source will be created as `pending`, but automatically transition to `chargeable` within seconds of its creation. |\n\n[\n\n## Charge the Source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-request)\n\nOnce the customer has authenticated the payment, the source’s `status` transitions to `chargeable` and it can be used to make a charge request. This transition happens asynchronously and may occur after the customer was redirected back to your website.\n\nSome customers using Bancontact assume that the order process is complete once they have authenticated the payment and received confirmation from their bank. This results in customers who close their browser instead of following the redirect and returning to your app or website.\n\nFor these reasons it is essential that your integration rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") to determine when the source becomes chargeable in order to create a charge. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following webhook events are also sent to notify you about changes to the source’s status:\n\n| Event | Description |\n| --- | --- |\n| `source.chargeable` | A `Source` object becomes `chargeable` after a customer has authenticated and verified a payment. |\n| `source.failed` | A `Source` object failed to become chargeable as your customer declined to authenticate the payment. |\n| `source.canceled` | A `Source` object expired and cannot be used to create a charge. |\n\n### Make a charge request using the source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce the source is chargeable, from your `source.chargeable` webhook handler, you can make a charge request using the source ID as the value for the `source` parameter to complete the payment.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nBancontact Sources are [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and cannot be used for recurring or additional payments.\n\nRefer to our [Sources & Customers](https://docs.stripe.com/sources/customers) guide for more information on how single-use Sources interact with [Customers](https://docs.stripe.com/api/customers \"Customers\").\n\n[\n\n## Confirm that the charge has succeeded![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-confirmation)\n\nSince Bancontact is a [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment method and the customer has already authenticated the payment as part of the redirect, unless there is an unexpected error, the [Charge](https://docs.stripe.com/api#charge_object) will immediately succeed.\n\nYou will also receive the following webhook event as the charge is created:\n\n| Event | Description |\n| --- | --- |\n| `charge.succeeded` | The charge succeeded and the payment is complete. |\n\nWe recommend that you rely on the `charge.succeeded` webhook event to notify your customer that the payment process has been completed and their order is confirmed. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is extremely low with Bancontact as the customer must authenticate the payment with their bank. As such, there is no dispute process that can result in a chargeback and funds withdrawn from your Stripe account.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Bancontact can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.\n\n### Source expiration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA source must be used within six hours of becoming `chargeable`. If it is not, its status is automatically transitioned to `canceled` and your integration receives a `source.canceled` webhook event. Additionally, `pending` sources are canceled after one hour if they are not used to authenticate a payment.\n\nOnce a source is canceled, the customer’s authenticated payment is refunded automatically—no money is moved into your account. For this reason, make sure the order is canceled on your end and the customer is notified once you receive the `source.canceled` event.",
    "title": "Bancontact payments with Sources | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/pan-copy-self-serve",
    "markdown": "# Copy PAN data across Stripe accounts\n\n## Securely copy sensitive primary account number data within Stripe.\n\nStripe’s self-serve data copy service allows you to copy customer and payment data from one Stripe account to another Stripe account in the Dashboard.\n\nA data copy involves two parties: the sender account and the recipient account.\n\n*   **Sender account**: The Stripe account currently storing the customer data. This is the account to copy the data from.\n*   **Recipient account**: The Stripe account where you want to store the customer data. This is the account to copy the data to.\n\nBefore beginning the copying process, the sender and the recipient must provide their account IDs to each other. If you’re the sender account, work with a user of the recipient account to share account IDs. If you’re the recipient account, work with a user of the sender account to share account IDs. Find your account ID by going to the [User settings](https://dashboard.stripe.com/settings/user) in the Dashboard while logged into your account.\n\n## Data copying considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConsider the following when copying data to a new account:\n\n*   We can only copy data from one account to another. We can’t merge or move the data. After it’s complete, the copied data exists on both the destination and source accounts.\n    \n*   We only copy the raw [Customer](https://docs.stripe.com/api/customers/object) objects and associated payment data objects. The supported payment methods include:\n    \n    *   Cards stored as [Card](https://docs.stripe.com/api/cards/object) objects\n    *   Cards stored as [Source](https://docs.stripe.com/api/sources/object) objects\n    *   Cards stored as [Payment method](https://docs.stripe.com/api/payment_methods/object) objects\n    *   US ACH records stored as [Bank account](https://docs.stripe.com/api/customer_bank_accounts/object) objects\n*   We can’t copy Single Euro Payments Area (SEPA), BACs, or ACH records stored as payment method objects at this time.\n    \n*   We can’t copy individual [Charges](https://docs.stripe.com/api/charges/object), [PaymentIntents](https://docs.stripe.com/api/payment_intents/object), [Invoices](https://docs.stripe.com/api/invoices/object), [Plans](https://docs.stripe.com/api/plans/object), [Subscriptions](https://docs.stripe.com/api/subscriptions/object), [Coupons](https://docs.stripe.com/api/coupons/object), [Events](https://docs.stripe.com/api/events/object), Logs, [Guest customers](https://support.stripe.com/questions/guest-customer-faq), or any other Stripe objects.\n    \n*   The copy operation doesn’t change customer IDs, resulting in the same IDs for customers in both the destination and source account data.\n    \n*   The copy process assigns new object IDs of the same payment type to payment data. For example, the process assigns a new card object ID to all card objects and new payment method object IDs to all payment method objects. After the copy process is complete, Stripe creates and uploads a CSV mapping file to the **Documents** section of the recipient’s Dashboard. The mapping file is available to the recipient only. The mapping file contains the following headers:\n    \n    *   `customer_id_old`\n    *   `source_id_old`\n    *   `customer_id_new`\n    *   `source_id_new`\n    \n    Customer IDs don’t change during the copying process, so `customer_id_old` and `customer_id_new` have the same value after the copy finishes. `source_id_old` is the old payment method ID from the sharing account, and `source_id_new` is the new payment method ID from the recipient account.\n    \n*   Source account data remains intact. We recommend keeping the original source account as a backup for your data.\n    \n*   The recipient account must be an activated account. To activate the account, log in to the Dashboard and follow the prompts at the top-left of the home screen to activate payments.\n    \n*   You can’t copy deleted customers from the sharing account to the recipient account. After you delete a Customer, there’s no way to restore that customer.\n    \n*   If you delete a customer in the recipient account, a second copy doesn’t restore that customer.\n    \n*   During a second copy involving the same accounts and same customers, previously-copied Customer objects aren’t duplicated. The second copy copies over brand new Stripe Customer objects or new payment methods only for previously-copied Customer objects. If you delete a customer in the account, re-copying that customer from the sharing account doesn’t restore that customer.\n    \n*   The copy includes only Stripe Customer objects (`cus_xxx`). We can’t copy Guest (`gcus_xxxx`) customers—see [Guest customers](https://support.stripe.com/questions/guest-customer-faq) to learn more. Sender accounts must have Customer objects stored to process a data copy.\n    \n*   Accounts can perform up to 50 copies per day. Stripe limits copies to unauthorized accounts to one copy until the recipient account authorizes the first copy request.\n    \n*   If any expired cards are included in the records that you copy over to the destination account, there’s the possibility that [Card Account Updater](https://stripe.com/guides/optimizing-authorization-rates#card-account-updater) (CAU)—if turned on for the destination account—will communicate with the card networks to automatically update these cards. This can result in additional CAU fees for the destination account. To avoid the possibility of CAU fees related to a self-serve copy, the destination account team must work with the source account team to make sure that no expired cards are included in the copy data set.\n    \n\n## Full or partial copy ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can perform a full or partial copy. A full copy sends all customers from the sender account. A partial copy sends a subset of customers from the sender account.\n\nA partial copy entails sending a subset of customers from the sender account to the recipient account. There are two ways to complete a partial copy:\n\n*   **Select customers in the Dashboard**: Recommended for copies of less than 15 customers\n*   **Upload a CSV file with a list of customer IDs**: Recommended for copies of more than 15 customers\n\nYou need to complete three steps for a full data copy:\n\n1.  The sender shares their customer data with the recipient.\n2.  The recipient authorizes and accepts the customer data from the sender.\n3.  The copying process finishes.\n\n1.  The sender logs into their [Stripe account](https://dashboard.stripe.com/login) and navigates to the [Customers](https://dashboard.stripe.com/customers) page.\n2.  They click **Copy customers**.\n3.  In the **Copy Method** field, they click **Copy all customers**.\n4.  They enter the account ID (`acct_xxxx`) of the recipient account and click **Continue**. If they haven’t previously shared customers with this recipient account, they receive a message stating that the recipient needs to authorize your request before the copy occurs.\n5.  They click **Confirm**.\n6.  After successfully sharing the data with the recipient, the sender can see the pending copy request at the top of their Customers page.\n\nThe recipient logs into their [Stripe account](https://dashboard.stripe.com/login) and navigates to the [Customers page](https://dashboard.stripe.com/customers), where they see a banner at the top advising that the sender wants to share their data. The recipient clicks **Authorize and Accept**.\n\n## The copying process finishes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter the sender completes the previous steps, the copy begins processing. The sender and recipient can see the in-progress copy banner at the top of the Customers page in the Dashboard.\n\nMost data copies finish within 72 hours, after the sender shares the customer data with the recipient and the recipient authorizes and accepts the customer data from the sender. Copies of fewer than 10,000 customers typically complete within a couple of hours.\n\nWhen the copying process is complete, the sender and recipient can see the completed copy banner at the top of the Customers page in the Dashboard. The recipient has the option to download the mapping file.\n\n## Copy into or out of a Connect account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the sender account is a Connect account without access to the Stripe Dashboard, reach out to your contact at the Platform to let them know you need a data copy. The Platform account owner or Data Migration Specialist needs to follow these steps:\n\nPartial copy with customer selection isn’t available for Connect accounts.\n\n1.  The Platform account owner or Data Migration Specialist logs into their Stripe account and navigates to the [Connect](https://dashboard.stripe.com/connect/accounts/overview) page.\n2.  The sender locates and selects the correct Connect account where the customers are stored.\n3.  They navigate to the Customers section within the Connect account.\n4.  They click **Copy customers**.\n5.  In the **Copy Method** field, they click **Copy all customers**.\n6.  They enter the account ID (format: acct\\_xxxx) of the recipient account and click **Continue**. If they haven’t previously shared customers with this recipient account, they receive a message stating that the recipient needs to authorize your request before the copy occurs.\n7.  They click **Confirm**. After successfully sharing the data with the recipient, they can see the pending copy request at the top of the Customers page within the Connect account.\n8.  The recipient follows standard steps for authorizing and accepting customer data.\n\nIf the recipient account is a Connect account that doesn’t have access to the Stripe Dashboard, reach out to your contact at the Platform to let them know you need a data copy.\n\nThe Platform account owner, Admin, or Data Migration Specialist need to authorize and accept customer data from the sender after the sender shares it.\n\nTo authorize the data, the recipient logs into the Platform Stripe account, navigates to the Connect page, locates the Connect account where the customers were shared, and clicks **Authorize and Accept** on the banner in the Customers section.\n\nIf your customers are stored in a Platform account that you don’t own, inform your contact at the Platform that you need a data copy. Direct them to follow the steps to share your customers with the recipient account. Platform accounts typically store customers for several unrelated Connected accounts. Make sure the Platform account shares only your customers, by following the steps to do a partial copy.\n\n## Status page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re an account owner or data migration specialist, you can view in-progress and completed copies by going to the Customers page and selecting **Copy customers** then **Status page**. You can toggle between **Shared** data and **Received** data.\n\nFor all other roles, you can view in-progress and complete copies on the [copy status page](https://dashboard.stripe.com/copy-status).\n\n### Shared![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn the Shared tab, you can see copies where your account was the sender account, sharing your customers to other accounts.\n\n**In progress** copies are copies that are currently processing or where the sender account has initiated the copy, but the recipient hasn’t authorized and accepted it. For **Pending** copies, the recipient needs to authorize and accept the copy to proceed. Most **In progress** copies finish within 72 hours. Copies of fewer than 10,000 customers typically complete within a couple of hours.\n\n**Previously shared** copies are copies that were successful or canceled from your account to another.\n\n### Received![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn the Received tab, you can see copies where your account was the recipient account, receiving customers from other accounts.\n\n**In progress** copies are copies that are currently processing or where the sender account has initiated the copy, but you as the recipient haven’t authorized and accepted it. For **Pending** copies, you need to authorize and accept the copy to proceed. Most **In progress** copies in this state finish within 72 hours. Copies of fewer than 10,000 customers typically complete within a couple of hours.\n\n**Previously shared with you** copies are copies that were successful or canceled from another account to your account.\n\n**Sharing permissions** are the accounts that have previously shared their customers with you. For any future copies from these accounts to yours, the sender account still needs to share customer data with you, and you still need to accept the data. Authorized accounts see your business name when they enter your account ID during the sharing step.\n\n**View all** navigates to the Authorized accounts page, which shows the accounts authorized to send you their data. You still need to accept the data copy requests from these accounts, but these accounts now have the ability to see your business name when they enter your account ID during the sharing step. You can revoke permission from any accounts in this list, which prevents them from seeing your business name during the sharing process. When revoked, future copy requests must be authorized and accepted. Only account owners, admins, and data migration specialists can add and revoke authorized accounts.\n\n## Permissions restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnly the account owner or a Data Migration Specialist can perform actions from the sender account. Only the account owner, an account admin, or a Data Migration Specialist can perform actions from the recipient account.\n\nLearn how to [add a team member as a Data Migration Specialist](https://docs.stripe.com/get-started/account/teams/roles).\n\n## India account considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nData copies aren’t permitted between India Stripe accounts and accounts outside of India. There are regulations in India that require local storage of certain payments data. As part of our continued investment in India and to meet these requirements, we’re updating our systems and have reviewed the data migrations we offer to Stripe users. The data storage requirements prevent us from proceeding with the data copy you’ve requested. If you attempt to complete a copy between an India Stripe account and an account outside of India, you receive an error message that says copying isn’t permissible.\n\n#### Note\n\n## Get Stripe support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you run into issues or have any questions when completing the data copy, contact the Data Migration Team with this [intake form](https://support.stripe.com/contact/email?topic=migrations). You must be logged in to your Stripe account before clicking this link.\n\nIn the intake form, for migration type, select **Tell us about your other data migration use case**, and fill out the form accordingly. If you’ve already initiated a data copy, provide the migration request ID associated with the copy request. The migration request ID is in the pending banner or the status page.",
    "title": "Copy PAN data across Stripe accounts | Stripe Documentation",
    "description": "Securely copy sensitive primary account number data within Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/co-badged-cards-compliance",
    "markdown": "# Co-badged cards compliance | Stripe DocumentationThe Stripe Docs logo\n\n[Regulation (EU) 2015/751](https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=celex%3A32015R0751) requires businesses in the European Economic Area (EEA) to honor customers’ card brand choice for co-badged cards (for example, [Cartes Bancaires](https://docs.stripe.com/payments/cartes-bancaires) cards co-badged with Visa). In practice, this means you must enable cardholders to select a preferred card brand within your checkout form in accordance with these guidelines:\n\nCartes Bancaires co-badged cards are the only Stripe-supported cards that fall under this regulation. As a result, [Regulation (EU) 2015/751](https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=celex%3A32015R0751) applies to businesses that:\n\n#### Connect users\n\nIn Connect integrations, the merchant of record on a transaction is the business we use to determine if co-badged regulation applies. Depending on the Connect integration, this can either be the Platform or the Connected account.\n\nBusinesses that meet the above criteria are required to present customers with a choice of card network for all transactions that can processed with [Cartes Bancaires](https://docs.stripe.com/payments/cartes-bancaires). A transaction is eligible for Cartes Bancaires if:\n\nStripe-hosted UIs, such as [Checkout](https://docs.stripe.com/payments/checkout), [Payment Links](https://docs.stripe.com/payment-links), and [Elements](https://docs.stripe.com/payments/elements), will automatically display a network selector when you meet the [applicability criteria](#when-reglation-applies) above, if configured according to the following guides. You can migrate to a Stripe-hosted UI to use these features.\n\nFor other integrations, you’re fully responsible for making sure your integration complies with the regulation requirements.\n\nCheckout and Payment Links\n\n[Stripe Checkout](https://stripe.com/checkout) supports customer card brand choice by default. Customers who enter a co-badged card in Checkout can select their option for customer card brand choice:\n\n![The card input with a co-badged card in Stripe Checkout](https://b.stripecdn.com/docs-statics-srv/assets/checkout-card-brand-choice-full-page.9cf891dfb55abcdc9ae9046ea15bc054.png)\n\nCard input with a co-badged card\n\nThe charge object associated with a successful payment contains a `network` field indicating which card network the payment was processed on:",
    "title": "Co-badged cards compliance | Stripe Documentation",
    "description": "Learn about EU regulations requiring customer choice for co-badged cards.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/custom_checkout/react/update_email",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/bacs-debit/export-data",
    "markdown": "# Export Bacs data from Stripe\n\n## Learn how to export your Bacs data from Stripe to another payment processor.\n\nYou can migrate your data from your Stripe account to a new payment processor using the Bacs bulk change process. We work with other payment processors and Bacs sponsor banks throughout the migration to securely migrate your Bacs data. A Bacs migration takes at least 6 weeks to complete.\n\nTo import Bacs data from another payment processor to Stripe, see [Import Bacs data from Stripe](https://docs.stripe.com/payments/bacs-debit/import-data).\n\n[](#submit-bacs-request)\n\nStart the migration process by submitting a data migration request.\n\n1.  Navigate to the [Stripe Support form for data migrations](https://support.stripe.com/contact/email?topic=migrations). If you’re not signed in, select **Sign in** and enter the credentials of the account that you want to migrate your data from.\n2.  Select **Export data out of Stripe to a third party**.\n3.  Select **Bacs** as the data type you want to export.\n4.  Complete the remaining fields and select **Send email**.\n\nOur data migrations team emails you within 3 business days of receiving your request.\n\n[](#sign-bulk-change-deed)\n\nYour new Bacs provider must print and sign a bulk change deed. This agreement authorizes the transfer of your mandates from Stripe to your new payment processor.\n\n#### Caution\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fpayments%2Fbacs-debit%2Fexport-data) to download the bulk change deed.\n\n[](#determine-switch-date)\n\nAfter we receive your bulk change deed, our Data Migrations team works with you, your new payment processor, and their sponsor bank to agree on a switch date.\n\n[](#wait-for-export)\n\nOur Data Migrations team exports your data and cancels your existing Bacs mandates on the agreed-upon date. This step is irreversible and removes the ability to create charges on these mandates through Stripe.\n\nWe control the timing of the export of data from Stripe. There are other tasks that your new processor and their sponsor bank must complete when importing the data.\n\nSee [Bacs Direct Debit payments in the UK](https://docs.stripe.com/payments/payment-methods/bacs-debit) for more information.",
    "title": "Export Bacs data from Stripe | Stripe Documentation",
    "description": "Learn how to export your Bacs data from Stripe to another payment processor.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_payment_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/collect-payment-details",
    "markdown": "# Collect payment details | Stripe DocumentationThe Stripe Docs logo\n\n## Collect payment detailsBeta\n\n## Accept payment methods with a secure, embeddable UI component.\n\n#### Beta\n\nThe Custom Checkout integration is in private beta. To request access, [click here.](#)\n\nThe Payment Element is a UI component that accepts many payment methods, validates input, and handles errors.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with either wallet.\n\n[](#render-payment-element)\n\nMount the `PaymentElement` component within the `CustomCheckoutProvider`.\n\n`import React from 'react'; import {PaymentElement} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   const checkout = useCustomCheckout();   return (     <form>       <PaymentElement options={{layout: 'accordion'}}/>     </form>   ) };  export default CheckoutForm;`",
    "title": "Collect payment details | Stripe Documentation",
    "description": "Accept payment methods with a secure, embeddable UI component.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/stripe-reader-s700/accessories",
    "markdown": "# Stripe Reader S700 accessories | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe's accessory line for Stripe Reader S700.\n\n## S700 Case![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe S700 Case protects your Stripe Reader S700 against damage from drops at countertop height. Its compact design allows your customers to access all payment methods (tap, chip, and swipe). You can access the headphone jack, USB port, and volume buttons without removing the case.\n\nThe S700 Case is also compatible with the S700 Dock. This allows you to protect your reader if you transition from docked to mobile applications.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Protective_Case_rear_S700.52ccbcff60f9d4fe78fcc5fb13d20994.png)\n\nS700 Case\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Protective_Case_rear_perspective_with_S700.0ec24206f43cbaa7a00a7a9531478075.png)\n\nS700 Case with reader\n\n## S700 Hub![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe S700 Hub provides drop-in I/O expansion to your POS configuration. The 10/100M LAN port provides physical ethernet connectivity. Additionally, if you need USB connectivity between your POS and peripheral devices such as cash drawers, printers, or barcode scanners, the S700 Hub has 2x USB-A ports. The communication ports on the hub are activated when the Stripe Reader S700 is connected to the hub. Use of alternative hubs might result in unreliable communication or charging of the Stripe Reader S700.\n\n#### Warning\n\nThe S700 Hub doesn’t connect Stripe Reader S700 to peripheral devices, such as a barcode scanner or printer. It connects peripheral devices to your POS device, such as a table or cash register.\n\nThe S700 Hub provides power to Stripe Reader S700 and connected peripherals through a built-in 6 foot USB-C cable. We recommend using the power adapter supplied with Stripe Reader S700 for full power capabilities. If you need an additional or replacement power adapter, order the S700 Charger in the [Stripe Dashboard](https://dashboard.stripe.com/terminal/shop).\n\nThe S700 Hub can provide a total of 1A shared between the two USB-A ports. Accessories that require high power, such as printers, must have their own power source. Different devices such as cell phones might require different charging protocols that aren’t supported by the S700 Hub.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/USB_Ethernet_Hub_coiled_S700.03a21bcce95ed25a8b395164d33bc8a6.png)\n\nS700 Hub\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/USB_Ethernet_Hub_with_Dock_and_S700.a26b62b93fad05b1dcc65f74341f3447.png)\n\nHub with Stripe Reader S700 on dock\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/USB_Ethernet_Hub_with_S700.03e29d9d225b2677b7f86da50926ec25.png)\n\nHub directly connected to Stripe Reader S700\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/S700_diagram.84e81baead74d977af0eb47f1ad0f0bb.png)\n\nExample I/O configurations with S700 Hub\n\n## S700 Dock![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the S700 Dock to display the Stripe Reader S700 for customers on a countertop. The dock is compatible with the Stripe Reader S700 with and without a case. The Stripe Reader S700 attaches to the dock using magnets for correct electrical contacts, and includes a locking nut for a more secure connection. Additionally, there are three mounting points on the bottom of the dock to optionally secure to a countertop or other surface.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700_dock_1_float.634.9472083de520e879fad349798b97f1f3.png)\n\nStripe Reader S700 (sold separately) above S700 Dock\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/S700_Dock_S700_mate_annotated.0d5ba31e988ed9347ef45af3e42a60ce.png)\n\nDock mounting features to Stripe Reader S700\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/S700_Dock_back_with_cable_front_annotated.4c7ed744d89454fd45d6b9e425240dfa.png)\n\nDock mounting feature to countertop\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/readers_with_without_case_sitting_on_dock.1b65f53d115f5889e6f52a4cde51fbab.png)\n\nIn addition to mounting the Stripe Reader S700 to a countertop surface, the S700 Dock also provides power and USB connectivity pass-through to Stripe Reader S700. This provides continuous power to Stripe Reader S700, keeping it powered throughout the day. You can also use the S700 Dock with the Hub to create a complete countertop I/O solution.\n\n#### Warning\n\nReader S700 is an internet connected device and doesn’t support payment connectivity through USB connection.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700_dock_pass_through_diagram.d22b52baa78051f85e63c4951ace277b.png)\n\nExample power pass-through configuration with S700 Dock\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700_dock_hub_pass_through_diagram.26691b66fe084da9443ae8f4a0f5f29b.png)\n\nExample power and data pass-through configuration with S700 Dock and S700 Hub (sold separately)\n\nThe Dock includes both front and rear exit cable management options, allowing flexible routing of the USB-C power cable.\n\n#### Note\n\nThe S700 Dock doesn’t include a USB-C power cable. The power cable supplied with Stripe Reader S700 is intended for the S700 Dock.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/S700_Dock_back_with_cable_front.6847ab1f6876635f23402c1c71dbafac.png)\n\nUnderside of the Dock showing front and rear exit cable management (Right angle cable is included with Stripe Reader S700)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/s700_front_rear_cable_exit.5991c67a7494e29fa6f76cab798320e0.png)\n\nFront and rear cable exit options\n\n## S700 power adapter and USB-C cable![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Reader S700 includes a region-specific AC-to-USB-C power adapter. You can replace the adapter or order an additional adapter in the [Stripe Dashboard](https://dashboard.stripe.com/terminal/shop).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/20W_power_adapter_US.43db55e11d4ffa48c08152e74e504fa5.png)\n\nUS adapter\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/20W_power_adapter_US_prong.35410d5b330a5e52f9d8288efd205ce4.png)\n\nUS adapter\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/20W_power_adapter_UK.237c5348797274f6386d22da13ddf7a9.png)\n\nUK adapter\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/20W_power_adapter_UK_prong.c3c2f58ffd76c6f2b909c59ccd0397b7.png)\n\nUK adapter\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/20W_power_adapter_EU.aa09ab63cad10e3b2dea49a0d0dde51b.png)\n\nEU adapter\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/20W_power_adapter_EU_prong.2fca95fbce9ae947108bcd21128bce5a.png)\n\nEU adapter\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/20W_power_adapter_AU.0798a8afe95230a651f094d1804b8bf0.png)\n\nAU adapter\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/20W_power_adapter_AU_prong.2e45ec22a8bd08b47b664da911d75cc1.png)\n\nAU adapter\n\nStripe Reader S700 also ships with a USB-C cable. One end of this cable provides a right angle connection designed to connect into the side of the reader or into the dock. You can replace the adapter or order an additional adapter in the [Dashboard](https://dashboard.stripe.com/terminal/shop).\n\n## S700 Stand![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe recommends using a third-party stand for Stripe Reader S700. See the [Hardware accessories section](https://support.stripe.com/questions/recommended-resources-and-partners-for-stripe-terminal#hardware-accessories) of this support article for more information about recommended vendors.",
    "title": "Stripe Reader S700 accessories | Stripe Documentation",
    "description": "Learn about Stripe's accessory line for Stripe Reader S700.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/submit-the-payment",
    "markdown": "# Submit the payment | Stripe DocumentationThe Stripe Docs logo\n\n## Submit the paymentBeta\n\n## Add a button to complete checkout.\n\n## Check if the session is ready![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore submitting the payment, make sure that all required data is present by checking [canConfirm](https://docs.stripe.com/js/custom_checkout/session_object#custom_checkout_session_object-canConfirm). If you’re missing data, you can see what’s missing by checking [confirmationRequirements](https://docs.stripe.com/js/custom_checkout/session_object#custom_checkout_session_object-confirmationRequirements).\n\n## Render a pay button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCall [confirm](https://docs.stripe.com/js/custom_checkout/confirm) when the customer is ready to complete checkout, such as in response to clicking a pay button.\n\n`import React from 'react'; import {useCustomCheckout} from '@stripe/react-stripe-js';  const PayButton = () => {   const {confirm, canConfirm, confirmationRequirements} = useCustomCheckout();   const [loading, setLoading] = React.useState(false);    const handleClick = () => {     setLoading(true);     confirm().then((result) => {       if (result.error) {         // Confirmation failed. Display the error message.       }       setLoading(false);     })   };    return (     <button disabled={!canConfirm || loading} onClick={handleClick}>       Pay     </button>   ) };  export default PayButton;`",
    "title": "Submit the payment | Stripe Documentation",
    "description": "Add a button to complete checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/custom_checkout/session_object",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/custom_checkout/confirm",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/link/add-link-elements-integration?link-integration-type=collect-email",
    "markdown": "# Build a custom checkout page that includes Link\n\n## Integrate Link using the Payment Element or Link Authentication Element.\n\nThis guide walks you through how to accept payments with [Link](https://docs.stripe.com/payments/link/what-is-link) using the [Payment Intents API](https://docs.stripe.com/api/payment_intents) and either the [Payment Element](https://docs.stripe.com/payments/payment-element) or [Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element).\n\nThere are three ways you can secure a customer email address for Link authentication and enrollment:\n\n*   **Pass in an email address:** You can pass an email address to the Payment Element using [defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues). If you’re already collecting the email address and or customer’s phone number in the checkout flow, we recommend this approach.\n*   **Collect an email address:** You can collect an email address directly in the Payment Element. If you’re not collecting the email address anywhere in the checkout flow, we recommend this approach.\n*   **Link Authentication Element:** You can use the Link Authentication Element to create a single email input field for both email collection and Link authentication. We recommend doing this if you use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n![Authenticate or enroll with Link directly in the Payment Element during checkout](https://b.stripecdn.com/docs-statics-srv/assets/link-in-pe.2efb5138a4708b781b8a913ebddd9aba.png)\n\nCollect a customer email address for Link authentication or enrollment\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-intent)\n\nStripe uses a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object to represent your intent to collect payment from a customer, tracking charge attempts and payment state changes throughout the process.\n\n![An overview diagram of the entire payment flow](https://b.stripecdn.com/docs-statics-srv/assets/accept-a-payment-payment-element.5cf6795a02f864923f9953611493d735.svg)\n\nYou can accept payments with Link using information your customer stores in the Link app. Because you don’t use the Link `payment_method.type`, when you receive a payment from a customer using Link in the Payment Element, the `payment_method.type` listed for the payment is `card`.\n\nTo use the Link `payment_method.type`, update your integration to set `payment_method_types` to `link`. Alternatively, you can set `automatic_payment_methods` to `enabled` and let Stripe dynamically display the most relevant payment methods to your customers.\n\nCreate a PaymentIntent on your server with an amount and currency, and `payment_method_types` set to `link` and any other payment methods you want to accept. Always decide how much to charge on the server side (a trusted environment) instead of the client. This prevents malicious customers from choosing their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"automatic_payment_methods[enabled]\"=true`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#design-your-integration)\n\nLink authenticates a customer by using their email address. Depending on your checkout flow, you have the following options: pass an email to the Payment Element, collect it directly within the Payment Element, or use the Link Authentication Element. Of these, Stripe recommends passing a customer email address to the Payment Element if available.\n\nLink authentication in the Payment Element allows your customers to enter an email address directly in the Payment Element with no additional integration work required.\n\nIn this flow, your customer enters their email address and authenticates or enrolls with Link directly in the Payment Element during checkout. If a customer hasn’t enrolled with Link and they choose a supported payment method in the Payment Element, they’re prompted to save their details using Link. For those who have already enrolled, Link automatically populates their payment information.\n\n[](#web-collect-payment-details)\n\nNow you can set up your custom payment form with the Elements prebuilt UI components. Your payment page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS. [Enable HTTPS](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\nThe Payment Element renders a prefilled customer contact form that includes the phone number and email address. It also renders a dynamic form that allows your customer to pick a payment method type. This form automatically collects all necessary payments details for the payment method type selected by the customer.\n\nWhat’s more, the Payment Element handles the display of Link-saved payment methods for authenticated customers. For this integration, you must leave Link turned on in your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n### Set up Stripe Elements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstall React Stripe.js and the Stripe.js loader from the [npm public registry](https://www.npmjs.com/package/@stripe/react-stripe-js):\n\n`npm install --save @stripe/react-stripe-js @stripe/stripe-js`\n\n### Build the payment form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn your payment page, wrap your payment form with the `Elements` component, passing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret).\n\nIf you have other customer information, pass it to the `defaultValues.billingDetails` object for the `PaymentElement`. Prefilling as much information as possible simplifies Link account creation and reuse for your customers. You can also pass in the [appearance object](https://docs.stripe.com/js/elements_object/update#elements_update-options-appearance), customizing the Elements to match the design of your site.\n\nThen, render `PaymentElement` in your payment form. You need to pass in the [defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues) option with at least the customer’s email address to prefill their data for Link.\n\n`import {loadStripe} from \"@stripe/stripe-js\"; import {   Elements,   PaymentElement, } from \"@stripe/react-stripe-js\";  const stripe = loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  // Customize the appearance of Elements using the Appearance API. const appearance = {/* ... */};  const CheckoutPage = ({clientSecret}) => (   <Elements stripe={stripe} options={{clientSecret, appearance}}>     <CheckoutForm />   </Elements> );  export default function CheckoutForm() {   return (     <form>       <h3>Payment</h3>        // Create the Payment Element       <PaymentElement/>       <button type=\"submit\">Submit</button>     </form>   ); }`\n\n[](#web-submit-payment)\n\nUse [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) to complete the payment with details collected from your customer in the different Elements forms. Provide a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe redirects the user after they complete the payment.\n\nYour user might be first redirected to an intermediate site, like a bank authorization page, before Stripe redirects them to the `return_url`.\n\nBy default, card and bank payments immediately redirect to the `return_url` when a payment is successful. If you don’t want to redirect to the `return_url`, you can use [`if_required`](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to change the behavior.\n\n`import {loadStripe} from \"@stripe/stripe-js\"; import {   useStripe,   useElements,   Elements,   LinkAuthenticationElement,   PaymentElement,   // If collecting shipping   AddressElement, } from \"@stripe/react-stripe-js\";  const stripe = loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {/* ... */};  // Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';  const CheckoutPage =({clientSecret}) => (   <Elements stripe={stripe} options={{clientSecret, appearance, loader}}>     <CheckoutForm />   </Elements> );  export default function CheckoutForm() {   const stripe = useStripe();   const elements = useElements();    const handleSubmit = async (event) => {     event.preventDefault();      const {error} = await stripe.confirmPayment({       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (error) {       // handle error     }   };    return (     <form onSubmit={handleSubmit}>       <h3>Contact info</h3>       <LinkAuthenticationElement />       {/* If collecting shipping */}       <h3>Shipping</h3>       <AddressElement options={{mode: 'shipping', allowedCountries: ['US']}} />       <h3>Payment</h3>       <PaymentElement />        <button type=\"submit\">Submit</button>     </form>   ); }`\n\nThe `return_url` corresponds to a page on your website that provides [the payment status](https://docs.stripe.com/payments/payment-intents/verifying-status) of the `PaymentIntent` when you render the return page. When Stripe redirects the customer to the `return_url`, you can use the following URL query parameters to verify payment status. You can also append your own query parameters when providing the `return_url`. These query parameters persist through the redirect process.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent` |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\n[](#web-post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nConfigure your integration to listen for these events rather than waiting on a callback from the client. When you wait on a callback from the client, the customer can close the browser window or quit the app before the callback executes. Setting up your integration to listen for asynchronous events enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, you can also handle two other important events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent from Stripe when a customer has successfully completed a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent from Stripe when a customer attempted a payment, but the payment didn’t succeed. | If a payment transitioned from `processing` to `payment_failed`, offer the customer another attempt to pay. |\n\n[](#web-test-the-integration)\n\n#### Caution\n\nDon’t store real user data in [test mode](https://docs.stripe.com/test-mode \"test mode\") Link accounts. Treat them as if they’re publicly available, because these test accounts are associated with your publishable key.\n\nCurrently, Link only works with credit cards, debit cards, and qualified US bank account purchases. Link requires [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\nYou can create test mode accounts for Link using any valid email address. The following table shows the fixed one-time passcode values that Stripe accepts for authenticating test mode accounts:\n\n| Value | Outcome |\n| --- | --- |\n| Any other 6 digits not listed below | Success |\n| 000001 | Error, code invalid |\n| 000002 | Error, code expired |\n| 000003 | Error, max attempts exceeded |\n\nFor testing specific payment methods, refer to the [Payment Element testing examples](https://docs.stripe.com/payments/accept-a-payment?platform=web#additional-testing-resources).\n\n### Multiple funding sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs Stripe adds additional funding source support, you don’t need to update your integration. Stripe automatically supports them with the same transaction settlement time and guarantees as card and bank account payments.\n\n### Card authentication and 3D Secure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLink supports [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2 \"3D Secure 2 (3DS2)\") authentication for card payments. 3DS2 requires customers to complete an additional verification step with the card issuer when paying. Payments that have been successfully authenticated using 3D Secure are covered by a liability shift.\n\nTo trigger 3DS2 authentication challenge flows with Link in test mode, use the following test card with any CVC, postal code, and future expiration date: .\n\nIn test mode, the authentication process displays a mock authentication page. On that page, you can either authorize or cancel the payment. Authorizing the payment simulates successful authentication and redirects you to the specified return URL. Clicking the **Failure** button simulates an unsuccessful attempt at authentication.\n\nFor more details, refer to the [3D Secure authentication page](https://docs.stripe.com/payments/3d-secure).\n\n#### Note\n\nWhen testing 3DS flows, only test cards for 3DS2 will trigger authentication on Link.\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [What is Link](https://docs.stripe.com/payments/link/what-is-link)\n*   [Link with Elements](https://docs.stripe.com/payments/link/elements-link)\n*   [Link in the Payment Element](https://docs.stripe.com/payments/link/payment-element-link)\n*   [Explore the Link Authentication Element](https://docs.stripe.com/payments/link/link-authentication-element)",
    "title": "Build a custom checkout page that includes Link | Stripe Documentation",
    "description": "Integrate Link using the Payment Element or Link Authentication Element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/crypto/onramp_quotes/object",
    "markdown": "# The Crypto Onramp Quote object\n\nThe Crypto Onramp Quote object\n\n```\n{  \"id\": \"610a15d980d48eeaabc3e7375127cd10c8e7a6aad03ecf77d42dfd4c4f881faa\",  \"object\": \"crypto.onramp.quotes\",  \"destination_network_quotes\": {    \"avalanche\": [      {        \"id\": \"dec31b3a2ef646c0bbf525774fa767097a334d51567cab715523b19e2d4a83f1\",        \"destination_amount\": \"3.474296399973076273\",        \"destination_currency\": \"avax\",        \"destination_network\": \"avalanche\",        \"fees\": {          \"network_fee_monetary\": \"0.03\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.07\"      },      {        \"id\": \"3d56a9b2fdf3e5b9666461d5c28ea82ebb24287a8ece19869b02778dc70497e1\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"avalanche\",        \"fees\": {          \"network_fee_monetary\": \"0.06\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.10\"      }    ],    \"base_network\": [      {        \"id\": \"b2e849efda961116b180c9da75d7f852b9e46593f06a95e1ccd0893099579a9e\",        \"destination_amount\": \"0.029133919178255537\",        \"destination_currency\": \"eth\",        \"destination_network\": \"base\",        \"fees\": {          \"network_fee_monetary\": \"0.07\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.11\"      },      {        \"id\": \"e8bc97d01c0fbf0d0b18cf5a25f7da6b2f98183fd223ebb866b691bc652109ac\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"base\",        \"fees\": {          \"network_fee_monetary\": \"0.17\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.21\"      }    ],    \"bitcoin\": [      {        \"id\": \"2a83796a355cfc311aec441170e2448b678828d336828c3ebb427e180e552091\",        \"destination_amount\": \"0.00160673\",        \"destination_currency\": \"btc\",        \"destination_network\": \"bitcoin\",        \"fees\": {          \"network_fee_monetary\": \"11.89\",          \"transaction_fee_monetary\": \"4.27\"        },        \"source_total_amount\": \"116.16\"      }    ],    \"ethereum\": [      {        \"id\": \"52670639e0db4e969e472b1e7e1a219fb70d8674200a5ca30bfc941a73200c82\",        \"destination_amount\": \"0.029111240079494021\",        \"destination_currency\": \"eth\",        \"destination_network\": \"ethereum\",        \"fees\": {          \"network_fee_monetary\": \"1.25\",          \"transaction_fee_monetary\": \"4.06\"        },        \"source_total_amount\": \"105.31\"      },      {        \"id\": \"1fdae4939338d2ac2fdd2a18909cd570bdb7f412109304fb6965b826741e6f0f\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"ethereum\",        \"fees\": {          \"network_fee_monetary\": \"3.76\",          \"transaction_fee_monetary\": \"4.11\"        },        \"source_total_amount\": \"107.87\"      }    ],    \"polygon\": [      {        \"id\": \"3a039af52bb8d7aaab7ce3c89f9445dc58b0a3ef5cf8a5c9ce3e20cc030e1a07\",        \"destination_amount\": \"174.481810700000000000\",        \"destination_currency\": \"matic\",        \"destination_network\": \"polygon\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      },      {        \"id\": \"cce3462ecd4dc451e8ac16af79ada6997e969620547995bb2911e14e95903d6a\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"polygon\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      }    ],    \"solana\": [      {        \"id\": \"733e3fa8578e38020a78c6f45ea5f1da1210bc04b12e554841768ac4f5c505db\",        \"destination_amount\": \"0.653551160\",        \"destination_currency\": \"sol\",        \"destination_network\": \"solana\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      },      {        \"id\": \"c270e59f3e9aaa52662d18699cdff4112568b0dad888d56f37d05dfdedbc76c5\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"solana\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      }    ],    \"stellar\": [      {        \"id\": \"a0c754b8d68155e13318643d71ea1b0d00eba8614f3778d3ddcfe6e8c5ec711e\",        \"destination_amount\": \"1064.71823580\",        \"destination_currency\": \"xlm\",        \"destination_network\": \"stellar\",        \"fees\": {          \"network_fee_monetary\": \"0.18\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.22\"      },      {        \"id\": \"3e66d98654933b753971ba75f99f7e7fb47e03c5db1b0a4d02e8ec189842ab5b\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"stellar\",        \"fees\": {          \"network_fee_monetary\": \"0.18\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.22\"      }    ]  },  \"livemode\": false,  \"rate_fetched_at\": 1719947634.6564176,  \"source_amount\": \"100.00\",  \"source_currency\": \"usd\"}\n```",
    "title": "The Crypto Onramp Quote object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sandboxes/dashboard/manage-keys",
    "markdown": "# Manage API keys | Stripe DocumentationThe Stripe Docs logo\n\n## Manage API keysBeta\n\n## Use sandbox API keys to authenticate API requests.\n\n#### Beta\n\nSandboxes is currently in private beta. Join [Stripe Insiders](https://insiders.stripe.dev/c/sandboxes/6), our new early access program, to register your interest in joining the Sandboxes private beta.\n\nStripe uses the API keys associated with a sandbox to authenticate API requests made to the applicable sandbox environment. We raise an [invalid request error](https://docs.stripe.com/error-handling#invalid-request-errors) if you don’t include a key and an [authentication error](https://docs.stripe.com/error-handling#authentication-errors) if the key is incorrect or outdated.\n\nUse the [Developer Dashboard](https://dashboard.stripe.com/developers) within the sandbox to reveal, revoke, and create API keys.\n\nLearn how to [manage API keys](https://docs.stripe.com/keys).",
    "title": "Manage API keys | Stripe Documentation",
    "description": "Use sandbox API keys to authenticate API requests.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=internet",
    "markdown": "# Connect to a reader | Stripe DocumentationThe Stripe Docs logo\n\nTo connect your point of sale application to a reader, call `connectInternetReader` with the selected reader.\n\n`// after selecting a reader to connect to val config = ConnectionConfiguration.InternetConnectionConfiguration() Terminal.getInstance().connectInternetReader(firstReader, config, object : ReaderCallback {     override fun onSuccess(reader: Reader) {         System.out.println(\"Connected to reader\")     }      override fun onFailure(e: TerminalException) {         e.printStackTrace()     } })`\n\n### Multiple connections![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`val config = ConnectionConfiguration.InternetConnectionConfiguration(failIfInUse = true) Terminal.getInstance().connectInternetReader(reader, config, object : ReaderCallback {     override fun onSuccess(reader: Reader) {         System.out.println(\"Connected to reader\")     }      override fun onFailure(e: TerminalException) {         e.printStackTrace()     } })`\n\n|     | failIfInUse is false (default) | failIfInUse is true |\n| --- | --- | --- |\n| `connectInternetReader` called from a new SDK when the reader is idle | The existing SDK-to-reader connection breaks, and the new SDK connects to the reader. The next command from the previously-connected SDK fails with a reader error, and that app’s `onUnexpectedReaderDisconnect` method is called. | The existing SDK-to-reader connection breaks, and the new SDK connects to the reader. The next command from the previously-connected SDK fails with a reader error, and that app’s `onUnexpectedReaderDisconnect` method is called. |\n| `connectInternetReader` called from a new SDK when the reader is mid-transaction | The existing SDK-to-reader connection breaks, and the new SDK connects to the reader. The next command from the previously-connected SDK fails with a reader error, and that app’s `onUnexpectedReaderDisconnect` method is called. | The incoming connection fails with a reader error. The existing SDK-to-reader connection does not break and the command in progress continues. |\n\nFor the least-disruptive connection experience in multi-reader environments, we recommend setting `failIfInUse` to `true` on your application’s initial connection attempt. Then, allow your users to retry the connection with `failIfInUse` set to `false` if the connection fails the first time. With this setup, one of your users can’t accidentally interrupt a transaction by inadvertently connecting to an in-use reader, but can still connect if needed.\n\n### Handle disconnects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour app must implement the `UnexpectedReaderDisconnect` callback to handle when a reader is disconnected.\n\nWhen you implement this callback, display a UI that notifies your user of the disconnected reader. You can call `discoverReaders` to scan for readers and initiate reconnection. Your app can attempt to automatically reconnect to the disconnected reader or display a UI that prompts your user to reconnect to a different reader.\n\nThe reader can disconnect from your app if it loses connection to the network. To simulate an unexpected disconnect, power off the reader.\n\n`class ReaderActivity : AppCompatActivity(), TerminalListener {    // ...    Terminal.getInstance().setTerminalListener(this)    // TerminalListener   override fun onUnexpectedReaderDisconnect(reader: Reader) {     // Consider displaying a UI to notify the user and start rediscovering readers   } }`\n\n### Automatic reconnection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Terminal doesn’t automatically reconnect to a reader when your application starts. Instead, you can build a reconnection flow by storing reader IDs and attempting to connect to a known reader on startup.\n\n1.  When you successfully connect to a reader, save its serial number in a persistent data storage location, such as the [Shared Preferences API](https://developer.android.com/training/data-storage/shared-preferences) (Android).\n2.  When your app launches, check that persistent store for a saved serial number. If one is found, call the `discoverReaders` method so your application can try to find that reader again.\n3.  If the saved serial number matches any of the discovered readers, try connecting to that reader with the matching reader object returned from the call to `discoverReaders`. If the previously connected reader isn’t found, stop the discovery process.\n\nDisplay some UI during the discovery and connection process to indicate that an automatic reconnection is taking place.",
    "title": "Connect to a reader | Stripe Documentation",
    "description": "Connect your application to a Stripe Terminal reader.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sandboxes/dashboard/sandbox-settings",
    "markdown": "# Sandbox settings | Stripe DocumentationThe Stripe Docs logo\n\n## Sandbox settingsBeta\n\n## Learn about how settings work in sandboxes.\n\n#### Beta\n\nSandboxes is currently in private beta. Join [Stripe Insiders](https://insiders.stripe.dev/c/sandboxes/6), our new early access program, to register your interest in joining the Sandboxes private beta.\n\nWhen you create a sandbox, you can enable the **Copy selected settings from my live account and activate the sandbox**. This activates your sandbox in the same country as your live account, allowing you to begin testing payment flows. To create a completely empty sandbox, keep this option disabled.\n\nStarting with the same settings as your live account eliminates the need to spend time manually verifying that your sandboxes behave like your live account. We don’t synchronize settings. As a result, they can diverge from live settings at any time. This allows for testing how settings changes affect integration behavior. View the settings that the toggle copies when you enable it below.\n\n## Payments settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo open your payments settings, click **Settings** in the top right corner of the Dashboard, then click **Payments**. Stripe excludes a subset of the payments settings when you’re setting up a new sandboxes. These include:\n\n| Payment settings page | Functionality |\n| --- | --- |\n| `Checkout and Payment Links` | Stripe doesn’t copy the `Conversion testing program` setting. To join this program, adjust this setting in your live account. |\n| `Payment methods` | Stripe enables all payment methods that are enabled or pending in your live account. We automatically enable some payment methods for testing purposes. |\n| `Payment method domains` | Stripe doesn’t copy domains from your live account. You must add a new domain to test it in a sandbox. |\n\n## Billing settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo open your billing settings, click **Settings** in the top right corner of the Dashboard, then click **Billing**. Stripe excludes a subset of the billing settings when you’re setting up a new sandboxes. These include:\n\n| Billing settings page | Functionality |\n| --- | --- |\n| `Customer portal` | Stripe doesn’t copy domains from your live account. You must add a new domain to test it in a sandbox. |\n| `Automations` | Stripe doesn’t copy automations or their states from your live account. |\n\n## Connect settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo open your Connect settings, click **Settings** in the top right corner of the Dashboard, then click **Connect**. Stripe excludes a subset of the Connect settings when you’re setting up a new sandboxes. These include:\n\n| Connect settings page | Functionality |\n| --- | --- |\n| `Onboarding options - OAuth` | Stripe doesn’t copy redirect URIs from your live platform. You must add a redirect URI to test it in a sandbox. |\n| `Onboarding options - Tax` | Stripe only copies these settings if Tax is enabled on your live platform. |\n| `Tax reporting` | Stripe only copies these settings if Tax is enabled on your live platform. |\n| `Emails` | Stripe doesn’t copy email domains from your live platform. You must add a new email domain to test it in a sandbox. |\n\n## Business settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo open your business settings, click **Settings** in the top right corner of the Dashboard, then click **Business**.\n\n| Business settings page | Functionality |\n| --- | --- |\n| `Custom domains` | Stripe doesn’t copy domains from your live account. You must add a new domain to test it in a sandbox. |\n| `Public details` | Stripe doesn’t copy domains from your live account. Instead, we add placeholder domains to enable payments in a sandbox. |",
    "title": "Sandbox settings | Stripe Documentation",
    "description": "Learn about how settings work in sandboxes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sandboxes/dashboard/manage",
    "markdown": "# Manage sandboxes | Stripe DocumentationThe Stripe Docs logo\n\n## Manage sandboxesBeta\n\n## Manage and organize your sandboxes in the Dashboard.\n\n#### Beta\n\nSandboxes is currently in private beta. Join [Stripe Insiders](https://insiders.stripe.dev/c/sandboxes/6), our new early access program, to register your interest in joining the Sandboxes private beta.\n\nUse the [Stripe Dashboard](https://dashboard.stripe.com/) or the Stripe CLI to manage your sandbox.\n\n## Create a sandbox![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny team member with the [Sandbox Administrator role, Administrator role, or Developer role](https://docs.stripe.com/get-started/account/teams/roles) can create a new sandbox. Each account can have a maximum of six sandboxes.\n\nTo create a sandbox:\n\n1.  Click **Sandboxes** > **Create New** in the Dashboard.\n2.  Enter a unique name that reflects the purpose of the sandbox (for example, “Staging”) in the **Name** field.\n3.  Decide if you want to adjust the toggle that [copies selected settings](https://docs.stripe.com/sandboxes/dashboard/sandbox-settings) you already have configured in your live account. Stripe enables this by default.\n4.  Click **Create**.\n\nStripe automatically assigns the Super Administrator role to any user that creates a sandbox. This role allows them to carry out all operations within that particular sandbox.\n\n## View a sandbox![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny team member with the Sandbox Administrator role can view all sandboxes. Developers can only view sandboxes they’ve created. All members of your team can continue to access your prior test mode setup in Legacy Test mode.\n\n1.  Click **Sandboxes** in the Dashboard, then select one of your most recent sandboxes.\n2.  Click **Manage Sandboxes** to view the full list of your sandboxes.\n3.  Click **Open** to enter the sandbox.\n\nThe banner at the top of the Dashboard indicates that you’re in a sandbox. You can navigate to any other part of the Dashboard.\n\n### View your current sandbox in the CLI![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo display the sandbox you’re currently using, run the following command:\n\n`Default Sandbox        {{SANDBOX_ID}}`\n\n## Update a sandbox![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny member of your team with the Sandbox Administrator role can update the name and details of any sandbox. Developers can only update the name and details of a sandbox that they’ve created.\n\n1.  Click **Sandboxes** in the Dashboard, then select a sandbox.\n2.  Click **Settings** in the top right corner.\n3.  Update the name or additional details about your sandbox’s business account (for example, the branding).\n\n## Delete a sandbox![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny team member with the Sandbox Administrator role can delete a sandbox. Developers can only delete sandboxes that they’ve created. You can’t delete the Legacy Test mode sandbox, and you must have one other sandbox. Create a new sandbox before attempting to delete the last, non-legacy sandbox.\n\n1.  Click **Sandboxes** > **Manage Sandboxes** in the Dashboard.\n2.  Click the overflow menu (), then **Delete Sandbox**.\n3.  Confirm that you want to delete this sandbox as this action can’t be undone. After deletion, we remove all data associated with the sandbox and revoke access.\n\n#### Note\n\nDeleting a sandbox deletes all the data associated with the sandbox and removes access for any other team members who had access to the sandbox.\n\n## Switch to a sandbox in the CLI![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can switch the sandbox you’re operating on in your CLI. To switch to a different sandbox, run the following command:\n\n`You are currently operating on Default Sandbox ({{SANDBOX_ID}})  * indicates your active workspace. Use the arrow keys to navigate: ↓ ↑ → ← ? Select the sandbox you'd like to use:   ▸  * Default Sandbox      {{SANDBOX_ID}}        QA Team Sandbox      {{SANDBOX_ID}}        Developer Sandbox    {{SANDBOX_ID}}`\n\nNext, select the sandbox you want to switch to.\n\n## Organize your sandboxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach account can have a maximum of six sandboxes. You can organize your sandboxes to completely isolate changes in one area from changes in another area. Teams and developers can use this isolation to observe changes. Here are a few potential ways to organize your sandboxes:\n\n*   Per team member\n*   Per development team\n*   For a specific feature\n*   For a staging environment",
    "title": "Manage sandboxes | Stripe Documentation",
    "description": "Manage and organize your sandboxes in the Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sandboxes/dashboard/manage-access",
    "markdown": "# Manage access | Stripe DocumentationThe Stripe Docs logo\n\n## Manage accessBeta\n\n## Manage who can access a sandbox.\n\n#### Beta\n\nSandboxes is currently in private beta. Join [Stripe Insiders](https://insiders.stripe.dev/c/sandboxes/6), our new early access program, to register your interest in joining the Sandboxes private beta.\n\nUse the [Stripe Dashboard](https://dashboard.stripe.com/) to grant users access to your sandbox.\n\nYou can manage access to your sandbox using [Team management](https://docs.stripe.com/get-started/account/teams) in your live business account’s settings or from within a sandbox.\n\nYou can assign a role directly to give a user access to a specific sandbox. You can also assign a role in a sandbox different from the role the user has in other sandboxes, or in your live business. You must also assign a user a role in the live business account to assign them a role in a sandbox.\n\n## Grant users access to all sandboxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following steps to invite additional team members to all sandboxes associated with your live business account.\n\n1.  Navigate to your live business account in the Dashboard.\n2.  Click **Settings** in the top right corner.\n3.  Click **Team and security** > **\\+ Add member**, then enter one or more email addresses. Select the [Sandbox Administrator role](https://docs.stripe.com/get-started/account/teams/roles).\n4.  Click **Send invites**.\n\n#### Note\n\nWhen you grant a team member the Sandbox Administrator role, you’re granting access to all sandboxes associated with your live business account.\n\n## Grant users access for testing only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following steps to invite additional team members to _only_ sandboxes associated with your live business account without any access to your live business details.\n\n1.  Navigate to your live business account in the Dashboard.\n2.  Click **Settings** in the top right corner.\n3.  Click **Team and security** > **\\+ Add member**, then enter one or more email addresses. Select the [Sandbox User role](https://docs.stripe.com/get-started/account/teams/roles).\n4.  Click **Send invites**.\n\n#### Note\n\nWhen you grant a team member the Sandbox User role, you’re granting access to create sandboxes associated with your live business account and delete sandboxes they’ve created. Follow the steps below to invite that user to a specific sandbox they didn’t create.\n\n## Grant users access to a specific sandbox![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following steps to invite additional team members to a specific sandbox associated with your live business account.\n\n1.  Navigate to your live business account in the Dashboard.\n2.  Click **Settings**.\n3.  Click **Team and security** > **\\+ Add member**, then enter one or more email addresses. Select a [role](https://docs.stripe.com/get-started/account/teams/roles).\n4.  Click **Send invites**.\n5.  Navigate to a sandbox in the Dashboard.\n6.  Click **Settings**.\n7.  Click **Team and security** > **\\+ Add member**, then enter the same email addresses. Select a [role](https://docs.stripe.com/get-started/account/teams/roles).\n8.  Click **Send invites**.\n\n## Revoke user access to sandboxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo revoke a user’s access:\n\n1.  Navigate to the live business account or sandbox where that user has a role assignment in the Dashboard.\n2.  Click **Settings**.\n3.  Click the overflow menu (), then click **Edit**.\n4.  Remove the [Sandbox role](https://docs.stripe.com/get-started/account/teams/roles).",
    "title": "Manage access | Stripe Documentation",
    "description": "Manage who can access a sandbox.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments?terminal-sdk-platform=android&reader-type=internet",
    "markdown": "# Collect card payments while offline\n\nThe Terminal SDK allows your application to continue collecting payments using a smart reader without an Internet connection.\n\nIf you’re using a separate POS device with a Stripe smart reader, you still need a functioning local network to allow your POS device to communicate with the smart reader. Operating offline with smart readers is for scenarios where your POS and reader can’t communicate with Stripe, such as during an ISP outage. If you need to be able to operate offline without a local network, consider Stripe Terminal’s [mobile readers](https://docs.stripe.com/terminal/bluetooth-readers).\n\nYou can also operate offline with an [Apps on Devices](https://docs.stripe.com/terminal/features/apps-on-devices/overview) integration. Since your POS application runs directly on the smart reader, you don’t need a local network to collect payments. However, you still need to be on a local network when your reader first boots up, even if the network doesn’t have access to the Internet.\n\n#### Warning\n\nWhen operating offline, payment information is collected at the time of sale, and authorization is only attempted after connectivity is restored and the payment is forwarded. You, as the user, assume all decline risk of the transaction. If the issuer declines the offline transaction, there’s no way to recover the funds, and you might not receive payment from the customer for goods or services already provided.\n\nTo reduce the chances of an issuer decline, you’re encouraged to:\n\n*   Reestablish internet connectivity as soon as possible to record the payments to Stripe.\n*   Restrict transactions if they exceed a certain amount.\n*   [Fail all offline payments](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#managing-risk-while-offline) if the SDK has stored a set of transactions whose sum exceeds a certain amount.\n\nOffline payments follow the same steps as online payments: create, collect, process, and capture the payment. Your device can transition from online to offline at any step in the process.\n\n1.  [Enable offline mode](#enable-offline-mode)\n2.  [Connect to a reader while offline](#connect-while-offline)\n3.  [Handle offline events](#handle-offline-events)\n4.  [Create a PaymentIntent while offline](#create-payment-intent)\n5.  [Collect a payment method](#collect-payment-method)\n6.  [Confirm the payment](#confirm-payment)\n7.  [Wait for payments to forward](#wait-for-forward)\n8.  [Capture the payment](#capture-payment)\n9.  [Examine offline payments](#examine-offline)\n\n[](#enable-offline-mode)\n\n#### Note\n\nThe offline mode feature is in private beta. To request access, please email [stripe-terminal-betas@stripe.com](mailto:stripe-terminal-betas@stripe.com). After we enable the changes for your account and you’ve enabled the feature using the Configuration API, you must disconnect and reconnect to your reader using the SDK for the updated configuration to take effect.\n\nTo use offline mode, your application needs to consume version `3.2.0` or later of the Terminal Android SDK.\n\nUse a [Configuration](https://docs.stripe.com/api/terminal/configuration) object to enable offline mode for the [Stripe Reader S700](https://docs.stripe.com/terminal/readers/stripe-reader-s700), [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e). devices at your `Location`.\n\n`curl https://api.stripe.com/v1/terminal/configurations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"offline[enabled]\"=true`\n\nAfter you enable offline mode on a `Configuration` object, you can [assign it](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#create-a-configuration-for-an-individual-location) to a `Location`. You can also enable offline mode by default for all `Locations` by updating the [default](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#retrieve-the-account-default-configuration) `Configuration` object for your account. Configuration API changes can take several minutes to propagate to your SDK and reader, and require you to disconnect from and reconnect to your reader to take effect.\n\n[](#connect-while-offline)\n\nTo collect payments with a smart reader while offline, you must have previously connected to that reader at the same `Location` while online, on the same local network, within the last 30 days. The reader stores the `Location` information locally after connecting online, and it derives configuration information from that `Location` while operating offline.\n\nYour reader and POS device must be on the same local network used to connect online. You can’t switch networks while offline.\n\n[\n\n## Handle offline events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-offline-events)\n\nImplement the `OfflineListener` interface and pass it to Terminal to notify your application of offline-related events. You must set `OfflineListener` before collecting payments offline.\n\n``import com.stripe.stripeterminal.external.OfflineMode import com.stripe.stripeterminal.external.callable.OfflineListener import com.stripe.stripeterminal.external.models.*  @OptIn(OfflineMode::class) class CustomOfflineListener: OfflineListener {    override fun onOfflineStatusChange(offlineStatus: OfflineStatus)        // Check the value of `offlineStatus` and update your UI accordingly. For instance,        // you can check the SDK's network status at `offlineStatus.sdk.networkStatus`.        //        // You can also check the SDK's current offline status using        // `Terminal::offlineStatus`.    }     override fun onPaymentIntentForwarded(paymentIntent: PaymentIntent, e: TerminalException?) {        // The PaymentIntent was successfully forwarded, or an error occurred.        // Reconcile any local state using the backend-generated `PaymentIntent::id`        // and the metadata you supplied when creating the payment intent.        //        // Note that the `PaymentIntent::id` may still be null if creating the        // PaymentIntent in the backend failed.    }     override fun onForwardingFailure(e: TerminalException) {        // A non-specific error occurred while forwarding a PaymentIntent.        // Check the error message and your integration implementation to        // troubleshoot.    } }``\n\n`Terminal.initTerminal(    context = applicationContext,    logLevel = LogLevel.VERBOSE,    tokenProvider = TokenProvider(),    listener = TerminalEventListener(),    offlineListener = CustomOfflineListener(), ) // ...`\n\n[](#create-payment-intent)\n\nTo support operating offline, you must use the SDK’s `createPaymentIntent` to create PaymentIntent objects.\n\nWhile operating offline, `PaymentIntent` objects have a null `id`. We recommend adding a custom identifier to the PaymentIntent’s [metadata](https://docs.stripe.com/payments/payment-intents#storing-information-in-metadata) to help reconcile `PaymentIntent` objects created offline. You can set up a [webhook](https://docs.stripe.com/webhooks) endpoint to receive `PaymentIntent` events when offline payments are forwarded to Stripe, and use your identifier to associate them with a `PaymentIntent` ID.\n\n``import android.util.Log import androidx.fragment.app.Fragment import com.stripe.stripeterminal.Terminal import com.stripe.stripeterminal.external.OfflineMode import com.stripe.stripeterminal.external.callable.PaymentIntentCallback import com.stripe.stripeterminal.external.models.* import java.util.UUID  private const val TAG = \"ShoppingCartFragment\"  class ShoppingCartFragment : Fragment() {    // Action for a \"Checkout\" button    @OptIn(OfflineMode::class)    private fun onCheckout(cart: Cart) {        // Build up parameters for creating a `PaymentIntent`        val params = PaymentIntentParameters.Builder()            .setAmount(cart.total)            .setCurrency(cart.currency)            .setMetadata(mapOf(\"unique-id\" to UUID.randomUUID().toString()))            .build()         // Your app might want to prevent offline payments for too large an amount.        // Here, we require a network connection if the payment if the amount is over 1000 usd.        // Otherwise, we allow collecting offline if the network connection is unavailable.        val offlineBehavior = if (cart.total > 1000000) { OfflineBehavior.REQUIRE_ONLINE }          else { OfflineBehavior.PREFER_ONLINE }        val createConfig = CreateConfiguration(offlineBehavior)        val createPaymentCallback: PaymentIntentCallback = object : PaymentIntentCallback {            override fun onSuccess(paymentIntent: PaymentIntent) {                Log.d(TAG, \"createPaymentIntent succeeded\")                // If the `PaymentIntent` was created offline, its `id` field will be null.                if (paymentIntent.id != null) {                    Log.d(TAG, \"created online\")                } else {                     Log.d(TAG, \"created offline\")                }                // ... Collect a PaymentMethod            }             override fun onFailure(e: TerminalException) {                Log.e(TAG, \"createPaymentIntent failed\", e)                // Handle offline-specific errors in your application (for example,                // `offlineBehavior` was set to REQUIRE_ONLINE and the SDK is offline).            }        }        Terminal.getInstance().createPaymentIntent(params, createPaymentCallback, createConfig)    } }``\n\n#### Managing risk while offline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `Terminal.createPaymentIntent` accepts a `CreateConfiguration` parameter. By default, if you’re operating offline, the Terminal reader stores all offline payments, then forwards them to Stripe’s backend when connectivity is restored. You can pass a `CreateConfiguration` object with `offlineBehavior` set to `REQUIRE_ONLINE` to fail the current transaction if you’re operating offline. You might want to disallow transactions above a certain amount or disallow all offline transactions if the reader has stored a set of transactions whose sum exceeds a certain amount.\n\nThe SDK exposes two properties to help you manage risk:\n\n1.  `Terminal.offlineStatus.reader.offlinePaymentsCount`\n2.  `Terminal.offlineStatus.reader.offlinePaymentAmountsByCurrency`\n\n#### Managing latency while offline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Terminal SDK automatically determines whether to collect payments online or offline based on your network connectivity. However, you might want to operate offline despite having an active network connection – for example, if you need to collect transactions quickly and your network connection is slow. You can pass a `CreateConfiguration` object with `offlineBehavior` set to `FORCE_OFFLINE` to collect the payment offline regardless of connectivity. Payments collected offline while the Terminal reader has an active network connection are forwarded in the background.\n\n[](#collect-payment-method)\n\nSwiping cards isn’t supported while offline. Tapping cards is also not supported in markets where [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") is required. Your smart reader automatically displays the available payment options to the customer. Using the `updatePaymentIntent` parameter in `CollectConfiguration` is disabled when offline mode is enabled unless `offlineBehavior` is set to `REQUIRE_ONLINE`.\n\n#### Note\n\nPayment liability is your responsibility when operating your reader offline. Because magnetic stripe data is easy to spoof, Stripe disallows this option while operating offline.\n\n`import android.util.Log import androidx.fragment.app.Fragment import com.stripe.stripeterminal.Terminal import com.stripe.stripeterminal.external.OfflineMode import com.stripe.stripeterminal.external.callable.PaymentIntentCallback import com.stripe.stripeterminal.external.models.*  private const val TAG = \"ShoppingCartFragment\"  class ShoppingCartFragment : Fragment() {     // Action for a \"Checkout\" button     @OptIn(OfflineMode::class)     private fun onCheckout(cart: Cart) {         // SNIP: Create PaymentIntent         val collectPaymentCallback: PaymentIntentCallback = object : PaymentIntentCallback {             override fun onSuccess(paymentIntent: PaymentIntent) {                 Log.d(TAG, \"collectPaymentMethod succeeded\")                 // ... Confirm the payment             }              override fun onFailure(e: TerminalException) {                 // Handle offline-specific errors in your application (for example,                 // unsupported payment method).                 Log.d(TAG, \"collectPaymentMethod failed:\", e)             }         }         val collectConfig = CollectConfiguration.Builder().build()         Terminal.getInstance().collectPaymentMethod(paymentIntent, collectPaymentCallback, collectConfig)     } }`\n\n[](#confirm-payment)\n\nThis step is similar to [confirming payments while online](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=android#confirm-payment). The primary difference is that your integration must handle offline-specific error cases, such as when the transaction exceeds the Stripe-enforced offline maximum of 10,000 USD or equivalent in your operating currency.\n\nIn some cases, the SDK might create a `PaymentIntent` online, but confirm it while offline. When this happens, the `PaymentIntent` might have a non-null `stripeId`. You can check `offlineDetails.storedAt` to determine if it was confirmed offline.\n\n``import android.util.Log import androidx.fragment.app.Fragment import com.stripe.stripeterminal.Terminal import com.stripe.stripeterminal.external.OfflineMode import com.stripe.stripeterminal.external.callable.PaymentIntentCallback import com.stripe.stripeterminal.external.models.*  private const val TAG = \"ShoppingCartFragment\"  class ShoppingCartFragment : Fragment() {     // Action for a \"Checkout\" button     @OptIn(OfflineMode::class)     private fun onCheckout(cart: Cart) {         // SNIP: Create PaymentIntent, and collect payment method.         val confirmPaymentIntentCallback: PaymentIntentCallback = object : PaymentIntentCallback {             override fun onSuccess(paymentIntent: PaymentIntent) {                 Log.d(TAG, \"confirmPaymentIntent succeeded\")                 // If the `PaymentIntent` was confirmed offline, `offlineDetails.storedAt` will be defined                 if (confirmResult.offlineDetails.storedAt != null) {                     Log.d(TAG, \"confirmed offline\");                 } else {                     Log.d(TAG, \"confirmed online\");                 }             }              override fun onFailure(e: TerminalException) {                 // Handle offline-specific errors in your application (for example,                 // unsupported payment method).                 Log.e(TAG, \"confirmPaymentIntent failed:\", e)             }         }         Terminal.getInstance().confirmPaymentIntent(paymentIntent, confirmPaymentIntentCallback)     } }``\n\n#### Providing receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might require information about the card used to complete a payment while offline. For example, you might need to generate a receipt for customers who require one at the time of purchase.\n\nIf the PaymentIntent is confirmed offline, retrieve its [OfflineCardPresentDetails](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.models/-offline-card-present-details/index.html) from the `paymentIntent.offlineDetails.offlineCardPresentDetails` property.\n\nThis hash contains a [ReceiptDetails](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.models/-receipt-details/index.html) property you can use to generate a receipt, as well as other card details like the cardholder name and card brand.\n\nNot all receipt details are available while operating offline. [Prebuilt email receipts](https://docs.stripe.com/terminal/features/receipts#prebuilt) are only sent after connectivity is restored and the payment is successfully captured.\n\n[](#wait-for-forward)\n\nWhen network connectivity is restored, the reader automatically begins forwarding the stored offline payments.\n\nIf you disconnect or power off your smart reader too soon, your payments might not be forwarded. You can query `Terminal.offlineStatus.reader.networkStatus` to make sure your reader is online and can forward payments, and `Terminal.offlineStatus.reader.offlinePaymentsCount` to check how many payments the Terminal reader has to be forwarded.\n\nIf your smart reader becomes damaged or otherwise can’t take payments, your stored payments can often still be forwarded. Make sure to connect the smart reader to your POS and re-establish Internet access to allow it to re-connect to Stripe.\n\n[](#capture-payment)\n\n#### Note\n\nWhile offline, you can create PaymentIntents with `captureMethod` set to `automatic`. Once you confirm these PaymentIntents, they have a `SUCCEEDED` status instead of `REQUIRES_CAPTURE` . Stripe automatically captures the payments after you forward them.\n\nPayments that are successfully forwarded and authorized require capture from your backend or application:\n\n*   To capture payments from your backend, use [webhooks](https://docs.stripe.com/webhooks) to listen for PaymentIntents with a `requires_capture` status.\n*   To capture payments from your application, wait for your application to receive calls to `OfflineListener::onPaymentIntentForwarded` for each PaymentIntent as the reader forwards it. A PaymentIntent is ready to capture if its status is `REQUIRES_CAPTURE` .\n\nIf your application determines when to capture a PaymentIntent after `confirmPaymentIntent`, they’re ready to capture when the status is `REQUIRES_CAPTURE` , and the `offlineDetails` is null or has a `requiresUpload` of `false` .\n\nCapture a payment after `confirmPaymentIntent`, if it’s confirmed online:\n\n``import android.util.Log import androidx.fragment.app.Fragment import com.stripe.stripeterminal.Terminal import com.stripe.stripeterminal.external.OfflineMode import com.stripe.stripeterminal.external.callable.PaymentIntentCallback import com.stripe.stripeterminal.external.models.*  private const val TAG = \"ShoppingCartFragment\"  class ShoppingCartFragment : Fragment() {     // Action for a \"Checkout\" button     @OptIn(OfflineMode::class)     private fun onCheckout(cart: Cart) {         // SNIP: Create PaymentIntent, and collect payment method.         val callback: PaymentIntentCallback = object : PaymentIntentCallback {             override fun onSuccess(paymentIntent: PaymentIntent) {                 Log.d(TAG, \"confirmPaymentIntent succeeded\")                 if (paymentIntent.status == PaymentIntentStatus.REQUIRES_CAPTURE) {                     val offlineDetails = paymentIntent.offlineDetails                     if (offlineDetails?.requiresUpload == true) {                         // Offline payment, wait for `onPaymentIntentForwarded` (see snippet below)                     } else {                         // Online payment, can be captured now                     }                 } else {                     // handle other paymentIntent.status results here                 }             }              override fun onFailure(e: TerminalException) {                 // Handle offline-specific errors in your application (for example,                 // unsupported payment method).                 Log.e(TAG, \"confirmPaymentIntent failed:\", e)             }         }          Terminal.getInstance().confirmPaymentIntent(paymentIntent, callback)     } }``\n\nCapture an offline payment after the reader forwards it in your `OfflineListener::onPaymentIntentForwarded`:\n\n`import com.stripe.stripeterminal.external.OfflineMode import com.stripe.stripeterminal.external.callable.OfflineListener import com.stripe.stripeterminal.external.models.*  @OptIn(OfflineMode::class) class CustomOfflineListener : OfflineListener {    // ...    override fun onPaymentIntentForwarded(paymentIntent: PaymentIntent, e: TerminalException?) {        if (e != null) {            // Handle the error appropriate for your application        } else if (paymentIntent.status == PaymentIntentStatus.REQUIRES_CAPTURE) {            // The paymentIntent is ready to be captured        } else {            // Handle the paymentIntent.status as appropriate.        }    }    // ... }`",
    "title": "Collect card payments while offline | Stripe Documentation",
    "description": "Collect card payments with intermittent, limited, or no internet connectivity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/quickstart",
    "markdown": "Stripe-hosted page | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\nQuickstart (Stripe-hosted page)\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register)or[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fcheckout%2Fquickstart)\n\n[\n\n](/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fcheckout%2Fquickstart)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\n[\n\nNo-code\n\n\n\n](/no-code)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\nAPIs & SDKs\n\nHelp\n\n[Overview](/payments)\n\nAccept a payment\n\nAbout Stripe payments\n\n[Upgrade your integration](/payments/upgrades \"Improve your existing integration\")\n\nStart an integration\n\nPayment Links\n\nCheckout\n\n[Overview](/payments/checkout)\n\n[How Checkout works](/payments/checkout/how-checkout-works)\n\nQuickstart (Stripe-hosted page)\n\n[Quickstart (Embedded form)](/checkout/embedded/quickstart \"Quickstart\")\n\n[Fulfillment](/checkout/fulfillment)\n\n[Migrate payment methods to the Dashboard](/payments/dashboard-payment-methods)\n\n[Migrate from legacy Checkout](/payments/checkout/migration)\n\n[Migrate Checkout to use Prices](/payments/checkout/migrating-prices)\n\nCustomize your integration\n\n[Customize Checkout](/payments/checkout/customization)\n\n[Font compatibility](/payments/checkout/customization/font-compatibility)\n\n[Use your custom domain](/payments/checkout/custom-domains)\n\n[Customize redirect behavior (Embedded form)](/payments/checkout/custom-redirect-behavior)\n\n[Customize redirect behavior (Stripe-hosted page)](/payments/checkout/custom-success-page)\n\n[Collect taxes](/payments/checkout/taxes)\n\n[Collect tax IDs](/tax/checkout/tax-ids)\n\n[Collect phone numbers](/payments/checkout/phone-numbers)\n\n[Make line item quantities adjustable](/payments/checkout/adjustable-quantity)\n\n[Add custom fields](/payments/checkout/custom-fields)\n\n[Let customers decide what to pay](/payments/checkout/pay-what-you-want)\n\n[Limit customers to one subscription](/payments/checkout/limit-subscriptions)\n\n[Let customers complete orders for free](/payments/checkout/no-cost-orders)\n\nBoost revenue\n\n[Let customers pay in their local currency](/payments/checkout/adaptive-pricing)\n\n[Configure subscription upsells](/payments/checkout/upsells)\n\n[Configure cross-sells](/payments/checkout/cross-sells)\n\n[Recover abandoned carts](/payments/checkout/abandoned-carts)\n\n[Collect consent for promotional emails](/payments/checkout/promotional-emails-consent)\n\n[Analyze conversion funnel](/payments/checkout/analyze-conversion-funnel)\n\nAdditional features\n\n[Add discounts](/payments/checkout/discounts)\n\n[Start a free trial without collecting payment details](/payments/checkout/free-trials)\n\n[Set billing cycle date](/payments/checkout/billing-cycle)\n\n[Manage limited inventory](/payments/checkout/managing-limited-inventory)\n\n[Guest customers](/payments/checkout/guest-customers)\n\n[Customize payment method reuse agreement](/payments/checkout/customize-payment-method-reuse-agreement)\n\nWeb Elements\n\nMobile Elements\n\nPayment scenarios\n\nDuring the payment\n\nAfter the payment\n\nAdd payment methods\n\nMore payment scenarios\n\nFaster checkout with Link\n\nOther Stripe products\n\nConnect\n\nTerminal\n\nFinancial Connections\n\nCrypto\n\nClimate\n\nCustom Checkout\n\nUnited States\n\nEnglish (United States)",
    "title": "Stripe-hosted page | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/appearance-api?platform=web",
    "markdown": "# Elements Appearance API | Stripe DocumentationThe Stripe Docs logo\n\n`-moz-osx-font-smoothing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``-webkit-font-smoothing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``-webkit-text-fill-color``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``backgroundColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `BlockDivider`, `Button`, `CheckboxInput`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `InputDivider`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `Switch`, `Tab``border``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottom``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomLeftRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomRightRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeft``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink`, `TermsText`, `Text``borderRight``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTop``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopLeftRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopRightRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``boxShadow``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``color``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabIcon`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fill``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `SwitchControl`, `Tab`, `TabIcon``fontFamily``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontSize``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontVariant``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontWeight``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``letterSpacing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``lineHeight``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``margin``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginBottom``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginLeft``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginRight``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginTop``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``opacity``Label``outline``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``outlineOffset``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``padding``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingBottom``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingLeft``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingRight``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingTop``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``textDecoration``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``textShadow``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``textTransform``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``transition``Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CheckboxLabel`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Icon`, `Input`, `InputCloseIcon`, `Label`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TabIcon`, `TabLabel`, `TermsLink`, `TermsText`, `Text`",
    "title": "Elements Appearance API | Stripe Documentation",
    "description": "Customize the look and feel of Elements to match the design of your site.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/mobile",
    "markdown": "# Stripe Mobile Elements | Stripe DocumentationThe Stripe Docs logo\n\n## Build payments into your mobile app.\n\nYou can use the prebuilt user interface (UI) components of Stripe Elements to build your mobile checkout flow. These components are feature-rich and customizable, allowing you to collect your users’ payment details, and create fully custom experiences.\n\nSome Mobile Element features include:\n\n*   Automatic input formatting as customers type.\n*   Complete UI translations to match your customer’s preferred language.\n*   Mobile specific behaviors, with single-step bottom sheets and multi-step inline options.\n*   Device hardware integrations such as card scanning with the camera.\n*   UI customization, including colors and fonts.\n\n![Examples of apps using the Address Element, Mobile Payment Element, and Card Element in an iOS app.](https://b.stripecdn.com/docs-statics-srv/assets/ios-landing.35eb3fe43605b2b982353f4bdac95840.png)\n\n## Stripe iOS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Android ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## React Native ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Sign up for updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Stripe Mobile Elements | Stripe Documentation",
    "description": "Build payments into your mobile app.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/alipay/accept-a-payment",
    "markdown": "# Accept an Alipay payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAlipay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers pay by redirecting from your website or app, authorize the payment through Alipay, then return to your website or app where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Alipay payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items.\n\nRecurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans aren’t supported.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Alipay and shows the differences between accepting a card payment and using Alipay.\n\n### Enable Alipay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `Alipay` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'alipay'],   line_items: [{     price_data: {       currency: 'usd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Alipay as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for Alipay is up to 90 days after the original payment.\n\nAlipay has no dispute process—customers authenticate with their Alipay account.",
    "title": "Accept an Alipay payment | Stripe Documentation",
    "description": "Learn how to accept Alipay payments, a digital wallet popular with customers from China.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payouts/create",
    "markdown": "# Create a payout | Stripe API Reference\n\nTo send funds to your own bank account, create a new payout object. Your [Stripe balance](#balance) must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.\n\nIf your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.\n\nIf you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The [balance object](#balance_object) details available and pending amounts by source type.\n\n### Parameters\n\n*   A positive integer in cents representing how much to payout.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    A string that displays on the recipient’s bank or card statement (up to 22 characters). A `statement_descriptor` that’s longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.\n    \n\n### More parameters\n\n### Returns\n\nReturns a payout object if no initial errors are present during the payout creation (invalid routing number, insufficient funds, and so on). We initially mark the status of the payout object as `pending`.\n\n```\ncurl https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1100 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Update a payout](https://docs.stripe.com/api/payouts/update)\n\nUpdates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the payout object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Retrieve a payout](https://docs.stripe.com/api/payouts/retrieve)\n\nRetrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a payout object if a you provide a valid identifier. raises [An error](#errors) occurs otherwise.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [List all payouts](https://docs.stripe.com/api/payouts/list)\n\nReturns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.\n\n### Parameters\n\n*   Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payouts, starting after payout `starting_after`. Each entry in the array is a separate payout object. If no other payouts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payouts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",      \"object\": \"payout\",      \"amount\": 1100,      \"arrival_date\": 1680652800,      \"automatic\": false,      \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",      \"created\": 1680648691,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",      \"failure_balance_transaction\": null,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"metadata\": {},      \"method\": \"standard\",      \"original_payout\": null,      \"reconciliation_status\": \"not_applicable\",      \"reversed_by\": null,      \"source_type\": \"card\",      \"statement_descriptor\": null,      \"status\": \"pending\",      \"type\": \"bank_account\"    }    {...}    {...}  ],}\n```\n\n## [Cancel a payout](https://docs.stripe.com/api/payouts/cancel)\n\nYou can cancel a previously created payout if its status is `pending`. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payout object if the cancellation succeeds. Returns an error if the payout is already canceled or can’t be canceled.\n\nPOST /v1/payouts/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": \"txn_1OaFJKEcg9tTZuTg2RdsWQhi\",  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"canceled\",  \"type\": \"bank_account\"}\n```",
    "title": "Create a payout | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/customer-sheet",
    "markdown": "# Integrate the Customer Sheet | Stripe DocumentationThe Stripe Docs logo\n\n## Offer a prebuilt UI for your customers to manage their saved payment methods.\n\nThe Customer Sheet is a prebuilt UI component that lets your customers manage their saved payment methods. You can use the Customer Sheet UI outside of a checkout flow, and the appearance and styling is customizable to match the appearance and aesthetic of your app. Customers can add and remove payment methods, which get saved to the customer object, and set their default payment method stored locally on the device. Use both the Mobile Payment Element and the Customer Sheet to provide customers a consistent end-to-end solution for saved payment methods.\n\n![Screenshot of Customer Sheet presenting multiple saved payment methods in an iOS app.](https://b.stripecdn.com/docs-statics-srv/assets/ios-landing.6c4969968fd6efe3d39fe673628f8284.png)\n\nCustomerAdapter uses Customer Ephemeral Keys and serves as a bridge to help users of legacy products (such as the Basic Integration) adopt CustomerSheet more quickly. If you’re starting a new integration, we recommend adopting CustomerSession over Customer Ephemeral Keys.\n\n[](#ios-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source, [fully documented](https://stripe.dev/stripe-ios/index.html), and compatible with apps supporting iOS 13 or above.\n\nTo install the SDK, follow these steps:\n\n1.  In Xcode, select **File** > **Add Packages…** and enter `https://github.com/stripe/stripe-ios-spm` as the repository URL.\n2.  Select the latest version number from our [releases page](https://github.com/stripe/stripe-ios/releases).\n3.  Add the **StripePaymentSheet** product to the [target of your app](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/test/apikeys) on app start. This enables your app to make requests to the Stripe API.\n\n`import UIKit import StripePaymentSheet  @main class AppDelegate: UIResponder, UIApplicationDelegate {      func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {         StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `// do any other necessary launch configuration         return true     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#ios-enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n#### Note\n\nAt this time, CustomerSheet only supports cards and US bank accounts.\n\n[](#ios-add-endpoints)\n\nCreate two endpoints on your server: one for fetching a Customer’s ephemeral key, and one to create a [SetupIntent](https://docs.stripe.com/api/setup_intents) for saving a new payment method to the [Customer](https://docs.stripe.com/api/customers).\n\n1.  Create an endpoint to return a [Customer](https://docs.stripe.com/api/customers) ID and an associated ephemeral key. You can view the API version used by the SDK [here](https://github.com/stripe/stripe-ios/blob/master/StripeCore/StripeCore/Source/API%20Bindings/STPAPIClient.swift#L233).\n\n`# Create a Customer (skip this and get the existing Customer ID if this is a returning customer) curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" curl https://api.stripe.com/v1/ephemeral_keys \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -X \"POST\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\`\n\n1.  Create an endpoint to return a [SetupIntent](https://docs.stripe.com/api/setup_intents) configured with the [Customer](https://docs.stripe.com/api/customers) ID.\n\n`# Create a Customer (skip this and get the existing Customer ID if this is a returning customer) curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" curl https://api.stripe.com/v1/setup_intents \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\`\n\nIf you only plan to use the payment method for future payments when your customer is present during the checkout flow, set the [usage](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) parameter to on\\_session to improve authorization rates.\n\n[](#ios-customer-adapter)\n\nA `StripeCustomerAdapter` enables a `CustomerSheet` to communicate with Stripe. On the client, configure a `StripeCustomerAdapter` with providers that make requests to these endpoints on your server.\n\n`import StripePaymentSheet  let customerAdapter = StripeCustomerAdapter(customerEphemeralKeyProvider: {     let json = await myBackend.getCustomerEphemeralKey()     return CustomerEphemeralKey(customerId: json[\"customerId\"]!, ephemeralKeySecret: json[\"ephemeralKeySecret\"]!) }, setupIntentClientSecretProvider: {     let json = await myBackend.getSetupIntentForCustomer()     return json[\"setupIntentClientSecret\"]! })`\n\n[](#ios-configure-wallet-element)\n\nNext, configure the Customer Sheet with your `StripeCustomerAdapter` and a [`CustomerSheet.Configuration`](https://stripe.dev/stripe-ios/stripepaymentsheet/documentation/stripepaymentsheet/customersheet/configuration/).\n\n`var configuration = CustomerSheet.Configuration()  // Configure settings for the CustomerSheet here. For example: configuration.headerTextForSelectionScreen = \"Manage your payment method\"  let customerSheet = CustomerSheet(configuration: configuration, customer: customerAdapter)`\n\n[](#ios-present-wallet-element)\n\nPresent the Customer Sheet. When the customer dismisses the sheet, the Customer Sheet calls the completion block with a `CustomerSheet.SheetResult`.\n\n`import StripePaymentSheet  customerSheet.present(from: self, completion: { result in   switch result {   case .canceled(let paymentOption), .selected(let paymentOption):     // Configure your UI based on the payment option     self.paymentLabel.text = paymentOption?.displayData().label ?? \"None\"      // Optional: Send the selected payment method ID to your backend for advanced use cases     // like charging a customer when not present in your app     if let paymentOption = paymentOption {       switch paymentOption {       case .paymentMethod(let paymentMethod, let paymentOptionDisplayData):         MyBackend.setDefaultPaymentMethod(paymentMethod.stripeId)       case .applePay(paymentOptionDisplayData: let paymentOptionDisplayData):         MyBackend.setDefaultPaymentMethodIsApplePay()       }     }   case .error(let error):     // Show the error in your UI   } })`\n\n*   If the customer selects a payment method, the result is `.selected(PaymentOptionSelection?)`. The associated value is the selected [`PaymentOptionSelection`](https://stripe.dev/stripe-ios/stripepaymentsheet/documentation/stripepaymentsheet/customersheet/paymentoptionselection), or `nil` if the user deleted the previously-selected payment method. You can find the full payment method details in the PaymentOptionSelection’s `paymentMethod` associated value.\n*   If the user cancels the sheet, the result is `.canceled`. The associated value is the original payment method selected prior to opening the customer sheet, as long as that payment method is still available.\n*   If an error occurs, the result is `.error(Error)`.\n\nLearn more about how to [enable Apple Pay](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element#ios-apple-pay).",
    "title": "Integrate the Customer Sheet | Stripe Documentation",
    "description": "Offer a prebuilt UI for your customers to manage their saved payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/funding_instructions",
    "markdown": "# Funding Instructions | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fissuing%2Ffunding_instructions)\n\n## [The Funding Instruction object](https://docs.stripe.com/api/issuing/funding_instructions/object)\n\n### Attributes\n\n*   Details to display instructions for initiating a bank transfer\n    \n\n*   The `funding_type` of the returned instructions\n    \n    Possible enum values\n    \n    `bank_transfer`\n    \n    Use a bank\\_transfer hash to define the bank transfer type\n    \n\n### More attributes\n\nThe Funding Instruction object\n\n```\n{  \"object\": \"funding_instructions\",  \"bank_transfer\": {    \"country\": \"DE\",    \"financial_addresses\": [      {        \"iban\": {          \"account_holder_name\": \"Stripe Technology Europe Limited\",          \"bic\": \"SXPYDEHH\",          \"country\": \"DE\",          \"iban\": \"DE00000000000000000001\"        },        \"supported_networks\": [          \"sepa\"        ],        \"type\": \"iban\"      }    ],    \"type\": \"eu_bank_transfer\"  },  \"currency\": \"eur\",  \"funding_type\": \"bank_transfer\",  \"livemode\": false}\n```\n\n## [Create funding instructions](https://docs.stripe.com/api/issuing/funding_instructions/create)\n\nCreate or retrieve funding instructions for an Issuing balance. If funding instructions don’t yet exist for the account, we’ll create new funding instructions. If we’ve already created funding instructions for the account, the same we’ll retrieve the same funding instructions. In other words, we’ll return the same funding instructions each time.\n\n### Parameters\n\n*   #### \n    \n    bank\\_transferobjectRequired\n    \n    Additional parameters for `bank_transfer` funding types\n    \n\n*   The `funding_type` to get the instructions for.\n    \n    Possible enum values\n    \n    `bank_transfer`\n    \n    Use a bank\\_transfer hash to define the bank transfer type\n    \n\n### Returns\n\nReturns funding instructions for an Issuing balance\n\nPOST /v1/issuing/funding\\_instructions\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/issuing/funding_instructions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bank_transfer[type]\"=eu_bank_transfer \\  -d currency=eur \\  -d funding_type=bank_transfer\n```\n\n```\n{  \"object\": \"funding_instructions\",  \"bank_transfer\": {    \"country\": \"DE\",    \"financial_addresses\": [      {        \"iban\": {          \"account_holder_name\": \"Stripe Technology Europe Limited\",          \"bic\": \"SXPYDEHH\",          \"country\": \"DE\",          \"iban\": \"DE00000000000000000001\"        },        \"supported_networks\": [          \"sepa\"        ],        \"type\": \"iban\"      }    ],    \"type\": \"eu_bank_transfer\"  },  \"currency\": \"eur\",  \"funding_type\": \"bank_transfer\",  \"livemode\": false}\n```\n\n## [List all funding instructions](https://docs.stripe.com/api/issuing/funding_instructions/list)\n\nRetrieve all applicable funding instructions for an Issuing balance.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns all funding instructions for an Issuing balance\n\nGET /v1/issuing/funding\\_instructions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/issuing/funding_instructions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/funding_instructions\",  \"has_more\": false,  \"data\": [    {      \"object\": \"funding_instructions\",      \"bank_transfer\": {        \"country\": \"DE\",        \"financial_addresses\": [          {            \"iban\": {              \"account_holder_name\": \"Stripe Technology Europe Limited\",              \"bic\": \"SXPYDEHH\",              \"country\": \"DE\",              \"iban\": \"DE00000000000000000001\"            },            \"supported_networks\": [              \"sepa\"            ],            \"type\": \"iban\"          }        ],        \"type\": \"eu_bank_transfer\"      },      \"currency\": \"eur\",      \"funding_type\": \"bank_transfer\",      \"livemode\": false    }  ]}\n```\n\n## [Simulate a top up](https://docs.stripe.com/api/issuing/funding_instructions/fund)Test helper\n\nSimulates an external bank transfer and adds funds to an Issuing balance. This method can only be called in test mode.\n\n### Parameters\n\n*   The amount to top up\n    \n*   The currency to top up\n    \n\n### Returns\n\nReturns testmode funding instructions for an Issuing balance\n\nPOST /v1/test\\_helpers/issuing/fund\\_balance\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/fund_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=4242 \\  -d currency=eur\n```\n\n```\n{  \"object\": \"funding_instructions\",  \"bank_transfer\": {    \"country\": \"DE\",    \"financial_addresses\": [      {        \"iban\": {          \"account_holder_name\": \"Stripe Technology Europe Limited\",          \"bic\": \"SXPYDEHH\",          \"country\": \"DE\",          \"iban\": \"DE00000000000000000001\"        },        \"supported_networks\": [          \"sepa\"        ],        \"type\": \"iban\"      }    ],    \"type\": \"eu_bank_transfer\"  },  \"currency\": \"eur\",  \"funding_type\": \"bank_transfer\",  \"livemode\": false}\n```",
    "title": "Funding Instructions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/india-network-tokenization",
    "markdown": "# India network tokenization | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how the Reserve Bank of India (RBI) card on file tokenization guidelines affect you and how to use Stripe Managed Customer Consent collection.\n\nThe Reserve Bank of India (RBI) issued a [directive](https://rbi.org.in/Scripts/NotificationUser.aspx?Id=11822&Mode=0) to the issuing banks and card networks for the non-storage of card credentials by Payment Aggregators, Payment Gateways, and Merchants in the India payments ecosystem. The RBI mandates card on file (CoF) tokenization through the card networks. This means:\n\n*   To store an India-issued customer card for future use for domestic India merchants, Stripe must tokenize the card with the card network (Visa/Mastercard).\n*   Customers must provide explicit consent to allow the tokenization and storage of the card on Stripe’s system.\n*   For users who don’t want to build their own custom checkout flow for collecting customer consent, Stripe provides a Stripe-managed customer consent flow by default.\n\nMerchants, Payment Aggregators (PAs), Payment Gateways (PGs), and acquiring banks can no longer store customer card information. Network tokenization and issuer tokenization is the only applicable way forward for the industry and the RBI.\n\n## Regulatory requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must adhere to these requirements to implement tokenization:\n\n*   Scope a Token to a Merchant, Customer Card, and Token Requestor.\n*   Take explicit user consent and Additional Factor of Authentication before generating a Token.\n*   As the Merchant, you’re required to give the customer an option to de-register their Token from the Merchant platform.\n*   During transactions, make available to a Merchant only the last 4 digits of the customer card, Issuer Bank name, and card network (visible on the Stripe Dashboard for payments).\n\n#### Note\n\nThis applies only to India domestic merchants for domestic transactions. International merchants on Stripe aren’t contracted with Stripe India or bound by these requirements. Cards won’t be automatically tokenized.\n\n## Tokenize customer cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTokenization minimally impacts the end customer. To convert their cards into a token, a customer must give you consent during payment for a transaction. This applies to new and saved card consent flows.\n\nYou can use Stripe Managed Customer Consent to collect customer consent on your behalf. Stripe will automatically prompt the customer for consent before proceeding to 3D Secure authentication.\n\nIf you want to create a custom consent flow, you can opt out of Stripe Managed Customer Consent. To do so, navigate to [Card Storage Consent](https://dashboard.stripe.com/settings/card_storage_consent) under Compliance in the Dashboard.\n\nIf you opt out, you must collect customer consent and only save card details for future use on the `Customer` object if the cardholder gives consent in your checkout consent flow.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/customer-consent-modal.f76e495163cda39ce68fc98fb900b99c.png)\n\nStripe Managed Consent Collection Experience\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-toggle.519b55eff7a68a73d02a4ec549343209.png)\n\nOpting out of Stripe Managed Consent Collection\n\nCustomers who have tokenized their cards will see only the last 4 digits of their saved cards.\n\n## Collect card information for customers that opt out of tokenization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers who choose not to tokenize their cards must enter their 16 digit card number, expiry, and CVC for all card transactions.\n\nIf you have a direct API integration and don’t currently collect CVC in your checkout flow, you must add it to your integration to continue accepting payments. When you’re collecting payment method details, populate the [CVC field](https://docs.stripe.com/api/payment_methods/create#create_payment_method-card-cvc).\n\n## More information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor more details on the updated requirements to have a compliant integration with Stripe, see [Saving cards in India](https://support.stripe.com/questions/guide-for-saving-cards-in-india).\n\nContact us at [support.stripe.com](https://support.stripe.com/) if you have any questions or need help with understanding how to comply with the regulations.",
    "title": "India network tokenization | Stripe Documentation",
    "description": "Learn how the Reserve Bank of India (RBI) card on file tokenization guidelines affect you and how to use Stripe Managed Customer Consent collection.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout/express-checkout-element",
    "markdown": "# Add one-click payment buttons | Stripe DocumentationThe Stripe Docs logo\n\n## Add one-click payment buttonsBeta\n\n## Use the Express Checkout Element to show one-click payment buttons.\n\n#### Beta\n\nThe Custom Checkout integration is in private beta. To request access, [click here.](#)\n\n![Express Checkout Element](https://b.stripecdn.com/docs-statics-srv/assets/link-in-express-checkout-element.67be6745e5a37c1c09074b0f43763cff.png)\n\nThe Express Checkout Element gives you a single integration for accepting payments through one-click payment buttons. Supported payment methods include [Link](https://docs.stripe.com/payments/link/what-is-link), [Apple Pay](https://docs.stripe.com/apple-pay), and [Google Pay](https://docs.stripe.com/google-pay).\n\n[](#try-demo)\n\nIn the following demo, you can toggle some of the prebuilt options to change the background color, layout, size, and shipping address collection of the payment interface. The demo displays Google Pay and Apple Pay only on their available platforms. Payment Method buttons are only shown in their supported countries.\n\nIf you don’t see the demo, try viewing this page in a [supported browser](#supported-browsers).\n\n[](#prerequisites)\n\nBefore you start, you must:\n\n*   Add a payment method to your browser. For example, you can add a card to your Google Pay account or to your Wallet for Safari.\n*   Serve your application over HTTPS. This is required in development and in production. You can use a service such as [ngrok](https://ngrok.com/).\n*   **[Register and verify your domain](https://docs.stripe.com/payments/payment-methods/pmd-registration)** in both test mode and live mode.\n\n[\n\n## Handle one-click payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-one-click-payments)\n\nThe Express Checkout Element emits the [confirm](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event) event when your customer finalizes their payment. Add a handler that responds to the event by calling `event.confirm()` and pass it to the Express Checkout Element.\n\nThe event also contains the following fields:\n\n*   [expressPaymentType](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event#express_checkout_element_on_confirm-handler-expressPaymentType): One of `'apple_pay'`, `'google_pay'`, or `'link'`.\n*   [billingDetails](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event#express_checkout_element_on_confirm-handler-billingDetails): Object containing information about the customer’s billing details.\n*   [shippingAddress](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event#express_checkout_element_on_confirm-handler-shippingAddress): Object containing information about the customer’s shipping address.\n*   [shippingRate](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event#express_checkout_element_on_confirm-handler-shippingRate): Object containing information about the selected shipping rate.\n\n`import {ExpressCheckoutElement} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   const handleConfirmExpressCheckout = (event) => {     event.confirm();   };   return (     <form>       <ExpressCheckoutElement onConfirm={handleConfirmExpressCheckout} />     </form>   ) };  export default CheckoutForm;`\n\nThe following options are also supported:\n\n*   [buttonHeight](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonHeight)\n*   [buttonTheme](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonTheme)\n*   [layout](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-layout)\n*   [paymentMethodOrder](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethodOrder)",
    "title": "Add one-click payment buttons | Stripe Documentation",
    "description": "Use the Express Checkout Element to show one-click payment buttons.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/climate/orders/order-carbon-removal",
    "markdown": "# Order carbon removal | Stripe DocumentationThe Stripe Docs logo\n\n[](#create-a-climate-order)\n\nReserve and pay for carbon removal by creating a climate order. You can use the order to track your products through confirmation and delivery. When you create your order, we immediately deduct the funds from your Stripe balance.\n\n`curl https://api.stripe.com/v1/climate/orders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=10000 \\  -d currency=usd \\  -d product=climsku_frontier_offtake_portfolio_2027`\n\nYou have 24 hours to cancel a climate order and receive a refund of the purchase amount, but fees won’t be refunded.\n\n#### Note\n\nIf you’re programmatically funding your account, make this call in the corresponding webhook handler for your funding source.\n\n`case 'checkout.session.completed':   await stripe.climate.orders.create({     amount: 10000,     currency: 'usd',     product: \"climsku_frontier_offtake_portfolio_2027\"   });`\n\n[](#track-your-climate-orders)\n\nYou can track the status of your climate orders in the [Dashboard](https://dashboard.stripe.com/climate/orders).\n\nTo get updates about a climate order, listen for events on your Stripe account. When the order status changes, you receive an event with the details. When your order is delivered, you receive a `climate.order.delivered` event. See [Webhooks for climate orders](https://docs.stripe.com/climate/orders/webhooks) for other possible event types.",
    "title": "Order carbon removal | Stripe Documentation",
    "description": "Pre-order carbon removal tons from Frontier's offtake portfolio.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/import-subscriptions",
    "markdown": "# Migrate subscriptions to Stripe Billing using Stripe APIs\n\nAfter you import your customers and create a pricing model, you can start importing your subscriptions. You should be able to export subscription data from third-party systems through their UI or API. Contact your subscriptions processor if they don’t provide this option through either interface.\n\nTo import subscriptions, use your list of customers to create the appropriate subscription for each one. For example, if a subscriber has a monthly `Basic` subscription plan in your old model, use the monthly recurring price associated with that level when you create their subscription in Stripe.\n\n### Make source data Stripe-compatible![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you start importing subscriptions into Stripe, make sure that all of your source data is compatible with our expected format.\n\n#### Important fields for migrating subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use relevant subscription data in your custom integration that Stripe doesn’t also use, you can apply your data to the `metadata` field of the subscriptions you create in Stripe. The following table describes other important fields to consider when importing subscriptions.\n\n| Field | Description |\n| --- | --- |\n| [customer](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-customer) | Make sure that you’ve properly mapped the customer ID from your source data to the new customer ID in Stripe. |\n| [phases.items.price](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-phases-items-price) | Make sure that you’ve mapped the price ID from your source data to the new price ID in Stripe. |\n| [current\\_phase.start\\_date](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-current_phase-start_date) | Make sure that the subscription schedule you define in Stripe lines up with and maintains continuity from your original source data. For example, if a customer has 6 months left on a yearly subscription in your source system, make sure that `billing_cycle_anchor` and `start_date` reflect the correct mid-cycle term. |\n| Third-party metadata | Import any additional data fields from your source data, which might include product names, plan names, and third-party application IDs. |\n| Tax settings | Include any tax IDs, VAT IDs, or other tax information. |\n\n#### Prepare legacy prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you created placeholders for [legacy prices](#legacy-prices), you need to map those prices to the subscriptions and customers you’re importing. For each subscription with a legacy price, use the [price\\_data](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data) parameter of the [Subscriptions](https://docs.stripe.com/api/subscriptions#subscriptions) API to pass in information about the price and subscription. The required fields are:\n\n| Parameter | Description |\n| --- | --- |\n| [currency](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data-currency) | Currency of the price, in three-letter ISO format. |\n| [product](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data-product) | ID of the placeholder product. You can use this for all of the legacy prices. |\n| [recurring](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data-recurring) | Information about the amount and frequency of the recurring price. |\n| [recurring.interval](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data-recurring) | Frequency of the interval-`day`, `week`, `month`, or `year`. |\n| [recurring.interval\\_count](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data-recurring-interval_count) | Number of intervals between billings. For example, setting `interval=day` and `interval_count=30` means that you bill the customer every 30 days. The maximum interval is 1 year (1 year, 12 months, or 52 weeks). |\n| [recurring.unit\\_amount\\_decimal](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data-unit_amount_decimal) | Same as [unit\\_amount](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data-unit_amount), but allows you to specify more granular decimal amounts in cents, up to 12 decimals. You can only set one of `unit_amount` and `unit_amount_decimal`. |\n\n### Import subscription data into Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you’ve prepared your source data, you can start importing subscriptions into Stripe.\n\n#### Test mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse [test mode](https://docs.stripe.com/test-mode \"test mode\") to run through the pricing model import process at least once before running the import in live mode. You need to remap your script:\n\n*   If you wipe the data in test mode and rerun the import.\n*   When you move to live mode, because the price IDs are different in test mode and live mode.\n\nIn test mode, you can use [test clocks](https://docs.stripe.com/billing/testing/test-clocks) to simulate subscriptions advancing through time. This allows you to see how the migrated subscriptions work in production.\n\n#### Create subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile you can use the [Subscription](https://docs.stripe.com/api/subscriptions) API to create subscriptions, we recommend using the [Subscription Schedules](https://docs.stripe.com/api/subscription_schedules) API. With this API, you can schedule subscriptions to start in the future. For example, it’s the only way to start monthly subscriptions more than 30 days in advance. The ability to start subscriptions in the future also allows you to review the import before you start to bill your customers in production.\n\nAdditionally, the Subscription Schedules API provides `phases`, which provide much more flexibility in defining settings such as tax behavior, collection method, and coupon usage within more granular intervals. You can also define different behavior for different intervals. For example, you could apply a coupon only for the first 3 months of a yearly subscription.\n\nHere’s how to create subscriptions that start on June 1, 2022 at 12:00 AM UTC.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"default_settings[billing_cycle_anchor]\"=phase_start \\  -d \"phases[0][items][0][price]\"=  {{PRICE_ID}}   \\  -d start_date=1654066801`",
    "title": "Migrate subscriptions to Stripe Billing using Stripe APIs | Stripe Documentation",
    "description": "Learn how to migrate your existing subscriptions to Stripe using Stripe APIs.",
    "languageCode": "en-US"
  }
]